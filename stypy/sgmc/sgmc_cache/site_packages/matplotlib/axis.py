
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: Classes for the ticks and x and y axis
3: '''
4: from __future__ import (absolute_import, division, print_function,
5:                         unicode_literals)
6: 
7: import six
8: 
9: from matplotlib import rcParams
10: import matplotlib.artist as artist
11: from matplotlib.artist import allow_rasterization
12: import matplotlib.cbook as cbook
13: from matplotlib.cbook import _string_to_bool
14: import matplotlib.font_manager as font_manager
15: import matplotlib.lines as mlines
16: import matplotlib.patches as mpatches
17: import matplotlib.scale as mscale
18: import matplotlib.text as mtext
19: import matplotlib.ticker as mticker
20: import matplotlib.transforms as mtransforms
21: import matplotlib.units as munits
22: import numpy as np
23: import warnings
24: 
25: GRIDLINE_INTERPOLATION_STEPS = 180
26: 
27: 
28: class Tick(artist.Artist):
29:     '''
30:     Abstract base class for the axis ticks, grid lines and labels
31: 
32:     1 refers to the bottom of the plot for xticks and the left for yticks
33:     2 refers to the top of the plot for xticks and the right for yticks
34: 
35:     Publicly accessible attributes:
36: 
37:       :attr:`tick1line`
38:           a Line2D instance
39: 
40:       :attr:`tick2line`
41:           a Line2D instance
42: 
43:       :attr:`gridline`
44:           a Line2D instance
45: 
46:       :attr:`label1`
47:           a Text instance
48: 
49:       :attr:`label2`
50:           a Text instance
51: 
52:       :attr:`gridOn`
53:           a boolean which determines whether to draw the tickline
54: 
55:       :attr:`tick1On`
56:           a boolean which determines whether to draw the 1st tickline
57: 
58:       :attr:`tick2On`
59:           a boolean which determines whether to draw the 2nd tickline
60: 
61:       :attr:`label1On`
62:           a boolean which determines whether to draw tick label
63: 
64:       :attr:`label2On`
65:           a boolean which determines whether to draw tick label
66: 
67:     '''
68:     def __init__(self, axes, loc, label,
69:                  size=None,  # points
70:                  width=None,
71:                  color=None,
72:                  tickdir=None,
73:                  pad=None,
74:                  labelsize=None,
75:                  labelcolor=None,
76:                  zorder=None,
77:                  gridOn=None,  # defaults to axes.grid depending on
78:                                # axes.grid.which
79:                  tick1On=True,
80:                  tick2On=True,
81:                  label1On=True,
82:                  label2On=False,
83:                  major=True,
84:                  labelrotation=0,
85:                  ):
86:         '''
87:         bbox is the Bound2D bounding box in display coords of the Axes
88:         loc is the tick location in data coords
89:         size is the tick size in points
90:         '''
91:         artist.Artist.__init__(self)
92: 
93:         if gridOn is None:
94:             if major and (rcParams['axes.grid.which'] in ('both', 'major')):
95:                 gridOn = rcParams['axes.grid']
96:             elif (not major) and (rcParams['axes.grid.which']
97:                                   in ('both', 'minor')):
98:                 gridOn = rcParams['axes.grid']
99:             else:
100:                 gridOn = False
101: 
102:         self.set_figure(axes.figure)
103:         self.axes = axes
104: 
105:         name = self.__name__.lower()
106:         self._name = name
107: 
108:         self._loc = loc
109: 
110:         if size is None:
111:             if major:
112:                 size = rcParams['%s.major.size' % name]
113:             else:
114:                 size = rcParams['%s.minor.size' % name]
115:         self._size = size
116: 
117:         if width is None:
118:             if major:
119:                 width = rcParams['%s.major.width' % name]
120:             else:
121:                 width = rcParams['%s.minor.width' % name]
122:         self._width = width
123: 
124:         if color is None:
125:             color = rcParams['%s.color' % name]
126:         self._color = color
127: 
128:         if pad is None:
129:             if major:
130:                 pad = rcParams['%s.major.pad' % name]
131:             else:
132:                 pad = rcParams['%s.minor.pad' % name]
133:         self._base_pad = pad
134: 
135:         if labelcolor is None:
136:             labelcolor = rcParams['%s.color' % name]
137:         self._labelcolor = labelcolor
138: 
139:         if labelsize is None:
140:             labelsize = rcParams['%s.labelsize' % name]
141:         self._labelsize = labelsize
142: 
143:         self._set_labelrotation(labelrotation)
144: 
145:         if zorder is None:
146:             if major:
147:                 zorder = mlines.Line2D.zorder + 0.01
148:             else:
149:                 zorder = mlines.Line2D.zorder
150:         self._zorder = zorder
151: 
152:         self.apply_tickdir(tickdir)
153: 
154:         self.tick1line = self._get_tick1line()
155:         self.tick2line = self._get_tick2line()
156:         self.gridline = self._get_gridline()
157: 
158:         self.label1 = self._get_text1()
159:         self.label = self.label1  # legacy name
160:         self.label2 = self._get_text2()
161: 
162:         self.gridOn = gridOn
163:         self.tick1On = tick1On
164:         self.tick2On = tick2On
165:         self.label1On = label1On
166:         self.label2On = label2On
167: 
168:         self.update_position(loc)
169: 
170:     def _set_labelrotation(self, labelrotation):
171:         if isinstance(labelrotation, six.string_types):
172:             mode = labelrotation
173:             angle = 0
174:         elif isinstance(labelrotation, (tuple, list)):
175:             mode, angle = labelrotation
176:         else:
177:             mode = 'default'
178:             angle = labelrotation
179:         if mode not in ('auto', 'default'):
180:             raise ValueError("Label rotation mode must be 'default' or "
181:                              "'auto', not '{}'.".format(mode))
182:         self._labelrotation = (mode, angle)
183: 
184:     def apply_tickdir(self, tickdir):
185:         '''
186:         Calculate self._pad and self._tickmarkers
187:         '''
188:         pass
189: 
190:     def get_tickdir(self):
191:         return self._tickdir
192: 
193:     def get_tick_padding(self):
194:         '''
195:         Get the length of the tick outside of the axes.
196:         '''
197:         padding = {
198:             'in': 0.0,
199:             'inout': 0.5,
200:             'out': 1.0
201:         }
202:         return self._size * padding[self._tickdir]
203: 
204:     def get_children(self):
205:         children = [self.tick1line, self.tick2line,
206:                     self.gridline, self.label1, self.label2]
207:         return children
208: 
209:     def set_clip_path(self, clippath, transform=None):
210:         artist.Artist.set_clip_path(self, clippath, transform)
211:         self.gridline.set_clip_path(clippath, transform)
212:         self.stale = True
213: 
214:     set_clip_path.__doc__ = artist.Artist.set_clip_path.__doc__
215: 
216:     def get_pad_pixels(self):
217:         return self.figure.dpi * self._base_pad / 72.0
218: 
219:     def contains(self, mouseevent):
220:         '''
221:         Test whether the mouse event occurred in the Tick marks.
222: 
223:         This function always returns false.  It is more useful to test if the
224:         axis as a whole contains the mouse rather than the set of tick marks.
225:         '''
226:         if callable(self._contains):
227:             return self._contains(self, mouseevent)
228:         return False, {}
229: 
230:     def set_pad(self, val):
231:         '''
232:         Set the tick label pad in points
233: 
234:         ACCEPTS: float
235:         '''
236:         self._apply_params(pad=val)
237:         self.stale = True
238: 
239:     def get_pad(self):
240:         'Get the value of the tick label pad in points'
241:         return self._base_pad
242: 
243:     def _get_text1(self):
244:         'Get the default Text 1 instance'
245:         pass
246: 
247:     def _get_text2(self):
248:         'Get the default Text 2 instance'
249:         pass
250: 
251:     def _get_tick1line(self):
252:         'Get the default line2D instance for tick1'
253:         pass
254: 
255:     def _get_tick2line(self):
256:         'Get the default line2D instance for tick2'
257:         pass
258: 
259:     def _get_gridline(self):
260:         'Get the default grid Line2d instance for this tick'
261:         pass
262: 
263:     def get_loc(self):
264:         'Return the tick location (data coords) as a scalar'
265:         return self._loc
266: 
267:     @allow_rasterization
268:     def draw(self, renderer):
269:         if not self.get_visible():
270:             self.stale = False
271:             return
272: 
273:         renderer.open_group(self.__name__)
274:         if self.gridOn:
275:             self.gridline.draw(renderer)
276:         if self.tick1On:
277:             self.tick1line.draw(renderer)
278:         if self.tick2On:
279:             self.tick2line.draw(renderer)
280: 
281:         if self.label1On:
282:             self.label1.draw(renderer)
283:         if self.label2On:
284:             self.label2.draw(renderer)
285:         renderer.close_group(self.__name__)
286: 
287:         self.stale = False
288: 
289:     def set_label1(self, s):
290:         '''
291:         Set the text of ticklabel
292: 
293:         ACCEPTS: str
294:         '''
295:         self.label1.set_text(s)
296:         self.stale = True
297: 
298:     set_label = set_label1
299: 
300:     def set_label2(self, s):
301:         '''
302:         Set the text of ticklabel2
303: 
304:         ACCEPTS: str
305:         '''
306:         self.label2.set_text(s)
307:         self.stale = True
308: 
309:     def _set_artist_props(self, a):
310:         a.set_figure(self.figure)
311: 
312:     def get_view_interval(self):
313:         'return the view Interval instance for the axis this tick is ticking'
314:         raise NotImplementedError('Derived must override')
315: 
316:     def _apply_params(self, **kw):
317:         switchkw = ['gridOn', 'tick1On', 'tick2On', 'label1On', 'label2On']
318:         switches = [k for k in kw if k in switchkw]
319:         for k in switches:
320:             setattr(self, k, kw.pop(k))
321:         newmarker = [k for k in kw if k in ['size', 'width', 'pad', 'tickdir']]
322:         if newmarker:
323:             self._size = kw.pop('size', self._size)
324:             # Width could be handled outside this block, but it is
325:             # convenient to leave it here.
326:             self._width = kw.pop('width', self._width)
327:             self._base_pad = kw.pop('pad', self._base_pad)
328:             # apply_tickdir uses _size and _base_pad to make _pad,
329:             # and also makes _tickmarkers.
330:             self.apply_tickdir(kw.pop('tickdir', self._tickdir))
331:             self.tick1line.set_marker(self._tickmarkers[0])
332:             self.tick2line.set_marker(self._tickmarkers[1])
333:             for line in (self.tick1line, self.tick2line):
334:                 line.set_markersize(self._size)
335:                 line.set_markeredgewidth(self._width)
336:             # _get_text1_transform uses _pad from apply_tickdir.
337:             trans = self._get_text1_transform()[0]
338:             self.label1.set_transform(trans)
339:             trans = self._get_text2_transform()[0]
340:             self.label2.set_transform(trans)
341:         tick_kw = {k: v for k, v in six.iteritems(kw)
342:                    if k in ['color', 'zorder']}
343:         if tick_kw:
344:             self.tick1line.set(**tick_kw)
345:             self.tick2line.set(**tick_kw)
346:             for k, v in six.iteritems(tick_kw):
347:                 setattr(self, '_' + k, v)
348: 
349:         if 'labelrotation' in kw:
350:             self._set_labelrotation(kw.pop('labelrotation'))
351:             self.label1.set(rotation=self._labelrotation[1])
352:             self.label2.set(rotation=self._labelrotation[1])
353: 
354:         label_list = [k for k in six.iteritems(kw)
355:                       if k[0] in ['labelsize', 'labelcolor']]
356:         if label_list:
357:             label_kw = {k[5:]: v for k, v in label_list}
358:             self.label1.set(**label_kw)
359:             self.label2.set(**label_kw)
360:             for k, v in six.iteritems(label_kw):
361:                 # for labelsize the text objects covert str ('small')
362:                 # -> points. grab the integer from the `Text` object
363:                 # instead of saving the string representation
364:                 v = getattr(self.label1, 'get_' + k)()
365:                 setattr(self, '_label' + k, v)
366: 
367:     def update_position(self, loc):
368:         'Set the location of tick in data coords with scalar *loc*'
369:         raise NotImplementedError('Derived must override')
370: 
371:     def _get_text1_transform(self):
372:         raise NotImplementedError('Derived must override')
373: 
374:     def _get_text2_transform(self):
375:         raise NotImplementedError('Derived must override')
376: 
377: 
378: class XTick(Tick):
379:     '''
380:     Contains all the Artists needed to make an x tick - the tick line,
381:     the label text and the grid line
382:     '''
383:     __name__ = 'xtick'
384: 
385:     def _get_text1_transform(self):
386:         return self.axes.get_xaxis_text1_transform(self._pad)
387: 
388:     def _get_text2_transform(self):
389:         return self.axes.get_xaxis_text2_transform(self._pad)
390: 
391:     def apply_tickdir(self, tickdir):
392:         if tickdir is None:
393:             tickdir = rcParams['%s.direction' % self._name]
394:         self._tickdir = tickdir
395: 
396:         if self._tickdir == 'in':
397:             self._tickmarkers = (mlines.TICKUP, mlines.TICKDOWN)
398:         elif self._tickdir == 'inout':
399:             self._tickmarkers = ('|', '|')
400:         else:
401:             self._tickmarkers = (mlines.TICKDOWN, mlines.TICKUP)
402:         self._pad = self._base_pad + self.get_tick_padding()
403:         self.stale = True
404: 
405:     def _get_text1(self):
406:         'Get the default Text instance'
407:         # the y loc is 3 points below the min of y axis
408:         # get the affine as an a,b,c,d,tx,ty list
409:         # x in data coords, y in axes coords
410:         trans, vert, horiz = self._get_text1_transform()
411:         t = mtext.Text(
412:             x=0, y=0,
413:             fontproperties=font_manager.FontProperties(size=self._labelsize),
414:             color=self._labelcolor,
415:             verticalalignment=vert,
416:             horizontalalignment=horiz,
417:             )
418:         t.set_transform(trans)
419:         self._set_artist_props(t)
420:         return t
421: 
422:     def _get_text2(self):
423: 
424:         'Get the default Text 2 instance'
425:         # x in data coords, y in axes coords
426:         trans, vert, horiz = self._get_text2_transform()
427:         t = mtext.Text(
428:             x=0, y=1,
429:             fontproperties=font_manager.FontProperties(size=self._labelsize),
430:             color=self._labelcolor,
431:             verticalalignment=vert,
432:             horizontalalignment=horiz,
433:             )
434:         t.set_transform(trans)
435:         self._set_artist_props(t)
436:         return t
437: 
438:     def _get_tick1line(self):
439:         'Get the default line2D instance'
440:         # x in data coords, y in axes coords
441:         l = mlines.Line2D(xdata=(0,), ydata=(0,), color=self._color,
442:                           linestyle='None', marker=self._tickmarkers[0],
443:                           markersize=self._size,
444:                           markeredgewidth=self._width, zorder=self._zorder)
445:         l.set_transform(self.axes.get_xaxis_transform(which='tick1'))
446:         self._set_artist_props(l)
447:         return l
448: 
449:     def _get_tick2line(self):
450:         'Get the default line2D instance'
451:         # x in data coords, y in axes coords
452:         l = mlines.Line2D(xdata=(0,), ydata=(1,),
453:                           color=self._color,
454:                           linestyle='None',
455:                           marker=self._tickmarkers[1],
456:                           markersize=self._size,
457:                           markeredgewidth=self._width,
458:                           zorder=self._zorder)
459: 
460:         l.set_transform(self.axes.get_xaxis_transform(which='tick2'))
461:         self._set_artist_props(l)
462:         return l
463: 
464:     def _get_gridline(self):
465:         'Get the default line2D instance'
466:         # x in data coords, y in axes coords
467:         l = mlines.Line2D(xdata=(0.0, 0.0), ydata=(0, 1.0),
468:                           color=rcParams['grid.color'],
469:                           linestyle=rcParams['grid.linestyle'],
470:                           linewidth=rcParams['grid.linewidth'],
471:                           alpha=rcParams['grid.alpha'],
472:                           markersize=0)
473:         l.set_transform(self.axes.get_xaxis_transform(which='grid'))
474:         l.get_path()._interpolation_steps = GRIDLINE_INTERPOLATION_STEPS
475:         self._set_artist_props(l)
476: 
477:         return l
478: 
479:     def update_position(self, loc):
480:         'Set the location of tick in data coords with scalar *loc*'
481:         if self.tick1On:
482:             self.tick1line.set_xdata((loc,))
483:         if self.tick2On:
484:             self.tick2line.set_xdata((loc,))
485:         if self.gridOn:
486:             self.gridline.set_xdata((loc,))
487:         if self.label1On:
488:             self.label1.set_x(loc)
489:         if self.label2On:
490:             self.label2.set_x(loc)
491: 
492:         self._loc = loc
493:         self.stale = True
494: 
495:     def get_view_interval(self):
496:         'return the Interval instance for this axis view limits'
497:         return self.axes.viewLim.intervalx
498: 
499: 
500: class YTick(Tick):
501:     '''
502:     Contains all the Artists needed to make a Y tick - the tick line,
503:     the label text and the grid line
504:     '''
505:     __name__ = 'ytick'
506: 
507:     def _get_text1_transform(self):
508:         return self.axes.get_yaxis_text1_transform(self._pad)
509: 
510:     def _get_text2_transform(self):
511:         return self.axes.get_yaxis_text2_transform(self._pad)
512: 
513:     def apply_tickdir(self, tickdir):
514:         if tickdir is None:
515:             tickdir = rcParams['%s.direction' % self._name]
516:         self._tickdir = tickdir
517: 
518:         if self._tickdir == 'in':
519:             self._tickmarkers = (mlines.TICKRIGHT, mlines.TICKLEFT)
520:         elif self._tickdir == 'inout':
521:             self._tickmarkers = ('_', '_')
522:         else:
523:             self._tickmarkers = (mlines.TICKLEFT, mlines.TICKRIGHT)
524:         self._pad = self._base_pad + self.get_tick_padding()
525:         self.stale = True
526: 
527:     # how far from the y axis line the right of the ticklabel are
528:     def _get_text1(self):
529:         'Get the default Text instance'
530:         # x in axes coords, y in data coords
531:         trans, vert, horiz = self._get_text1_transform()
532:         t = mtext.Text(
533:             x=0, y=0,
534:             fontproperties=font_manager.FontProperties(size=self._labelsize),
535:             color=self._labelcolor,
536:             verticalalignment=vert,
537:             horizontalalignment=horiz,
538:             )
539:         t.set_transform(trans)
540:         self._set_artist_props(t)
541:         return t
542: 
543:     def _get_text2(self):
544:         'Get the default Text instance'
545:         # x in axes coords, y in data coords
546:         trans, vert, horiz = self._get_text2_transform()
547:         t = mtext.Text(
548:             x=1, y=0,
549:             fontproperties=font_manager.FontProperties(size=self._labelsize),
550:             color=self._labelcolor,
551:             verticalalignment=vert,
552:             horizontalalignment=horiz,
553:             )
554:         t.set_transform(trans)
555:         self._set_artist_props(t)
556:         return t
557: 
558:     def _get_tick1line(self):
559:         'Get the default line2D instance'
560:         # x in axes coords, y in data coords
561: 
562:         l = mlines.Line2D((0,), (0,),
563:                           color=self._color,
564:                           marker=self._tickmarkers[0],
565:                           linestyle='None',
566:                           markersize=self._size,
567:                           markeredgewidth=self._width,
568:                           zorder=self._zorder)
569:         l.set_transform(self.axes.get_yaxis_transform(which='tick1'))
570:         self._set_artist_props(l)
571:         return l
572: 
573:     def _get_tick2line(self):
574:         'Get the default line2D instance'
575:         # x in axes coords, y in data coords
576:         l = mlines.Line2D((1,), (0,),
577:                           color=self._color,
578:                           marker=self._tickmarkers[1],
579:                           linestyle='None',
580:                           markersize=self._size,
581:                           markeredgewidth=self._width,
582:                           zorder=self._zorder)
583:         l.set_transform(self.axes.get_yaxis_transform(which='tick2'))
584:         self._set_artist_props(l)
585:         return l
586: 
587:     def _get_gridline(self):
588:         'Get the default line2D instance'
589:         # x in axes coords, y in data coords
590:         l = mlines.Line2D(xdata=(0, 1), ydata=(0, 0),
591:                           color=rcParams['grid.color'],
592:                           linestyle=rcParams['grid.linestyle'],
593:                           linewidth=rcParams['grid.linewidth'],
594:                           alpha=rcParams['grid.alpha'],
595:                           markersize=0)
596: 
597:         l.set_transform(self.axes.get_yaxis_transform(which='grid'))
598:         l.get_path()._interpolation_steps = GRIDLINE_INTERPOLATION_STEPS
599:         self._set_artist_props(l)
600:         return l
601: 
602:     def update_position(self, loc):
603:         'Set the location of tick in data coords with scalar *loc*'
604:         if self.tick1On:
605:             self.tick1line.set_ydata((loc,))
606:         if self.tick2On:
607:             self.tick2line.set_ydata((loc,))
608:         if self.gridOn:
609:             self.gridline.set_ydata((loc,))
610:         if self.label1On:
611:             self.label1.set_y(loc)
612:         if self.label2On:
613:             self.label2.set_y(loc)
614: 
615:         self._loc = loc
616:         self.stale = True
617: 
618:     def get_view_interval(self):
619:         'return the Interval instance for this axis view limits'
620:         return self.axes.viewLim.intervaly
621: 
622: 
623: class Ticker(object):
624:     locator = None
625:     formatter = None
626: 
627: 
628: class Axis(artist.Artist):
629:     '''
630:     Public attributes
631: 
632:     * :attr:`axes.transData` - transform data coords to display coords
633:     * :attr:`axes.transAxes` - transform axis coords to display coords
634:     * :attr:`labelpad` - number of points between the axis and its label
635:     '''
636:     OFFSETTEXTPAD = 3
637: 
638:     def __str__(self):
639:         return self.__class__.__name__ \
640:             + "(%f,%f)" % tuple(self.axes.transAxes.transform_point((0, 0)))
641: 
642:     def __init__(self, axes, pickradius=15):
643:         '''
644:         Init the axis with the parent Axes instance
645:         '''
646:         artist.Artist.__init__(self)
647:         self.set_figure(axes.figure)
648: 
649:         # Keep track of setting to the default value, this allows use to know
650:         # if any of the following values is explicitly set by the user, so as
651:         # to not overwrite their settings with any of our 'auto' settings.
652:         self.isDefault_majloc = True
653:         self.isDefault_minloc = True
654:         self.isDefault_majfmt = True
655:         self.isDefault_minfmt = True
656:         self.isDefault_label = True
657: 
658:         self.axes = axes
659:         self.major = Ticker()
660:         self.minor = Ticker()
661:         self.callbacks = cbook.CallbackRegistry()
662: 
663:         self._autolabelpos = True
664:         self._smart_bounds = False
665: 
666:         self.label = self._get_label()
667:         self.labelpad = rcParams['axes.labelpad']
668:         self.offsetText = self._get_offset_text()
669:         self.majorTicks = []
670:         self.minorTicks = []
671:         self.unit_data = None
672:         self.pickradius = pickradius
673: 
674:         # Initialize here for testing; later add API
675:         self._major_tick_kw = dict()
676:         self._minor_tick_kw = dict()
677: 
678:         self.cla()
679:         self._set_scale('linear')
680: 
681:     def set_label_coords(self, x, y, transform=None):
682:         '''
683:         Set the coordinates of the label.  By default, the x
684:         coordinate of the y label is determined by the tick label
685:         bounding boxes, but this can lead to poor alignment of
686:         multiple ylabels if there are multiple axes.  Ditto for the y
687:         coodinate of the x label.
688: 
689:         You can also specify the coordinate system of the label with
690:         the transform.  If None, the default coordinate system will be
691:         the axes coordinate system (0,0) is (left,bottom), (0.5, 0.5)
692:         is middle, etc
693: 
694:         '''
695: 
696:         self._autolabelpos = False
697:         if transform is None:
698:             transform = self.axes.transAxes
699: 
700:         self.label.set_transform(transform)
701:         self.label.set_position((x, y))
702:         self.stale = True
703: 
704:     def get_transform(self):
705:         return self._scale.get_transform()
706: 
707:     def get_scale(self):
708:         return self._scale.name
709: 
710:     def _set_scale(self, value, **kwargs):
711:         self._scale = mscale.scale_factory(value, self, **kwargs)
712:         self._scale.set_default_locators_and_formatters(self)
713: 
714:         self.isDefault_majloc = True
715:         self.isDefault_minloc = True
716:         self.isDefault_majfmt = True
717:         self.isDefault_minfmt = True
718: 
719:     def limit_range_for_scale(self, vmin, vmax):
720:         return self._scale.limit_range_for_scale(vmin, vmax, self.get_minpos())
721: 
722:     @property
723:     def unit_data(self):
724:         '''Holds data that a ConversionInterface subclass uses
725:         to convert between labels and indexes
726:         '''
727:         return self._unit_data
728: 
729:     @unit_data.setter
730:     def unit_data(self, unit_data):
731:         self._unit_data = unit_data
732: 
733:     def get_children(self):
734:         children = [self.label, self.offsetText]
735:         majorticks = self.get_major_ticks()
736:         minorticks = self.get_minor_ticks()
737: 
738:         children.extend(majorticks)
739:         children.extend(minorticks)
740:         return children
741: 
742:     def cla(self):
743:         'clear the current axis'
744:         self.set_major_locator(mticker.AutoLocator())
745:         self.set_major_formatter(mticker.ScalarFormatter())
746:         self.set_minor_locator(mticker.NullLocator())
747:         self.set_minor_formatter(mticker.NullFormatter())
748: 
749:         self.set_label_text('')
750:         self._set_artist_props(self.label)
751: 
752:         # Keep track of setting to the default value, this allows use to know
753:         # if any of the following values is explicitly set by the user, so as
754:         # to not overwrite their settings with any of our 'auto' settings.
755:         self.isDefault_majloc = True
756:         self.isDefault_minloc = True
757:         self.isDefault_majfmt = True
758:         self.isDefault_minfmt = True
759:         self.isDefault_label = True
760: 
761:         # Clear the callback registry for this axis, or it may "leak"
762:         self.callbacks = cbook.CallbackRegistry()
763: 
764:         # whether the grids are on
765:         self._gridOnMajor = (rcParams['axes.grid'] and
766:                              rcParams['axes.grid.which'] in ('both', 'major'))
767:         self._gridOnMinor = (rcParams['axes.grid'] and
768:                              rcParams['axes.grid.which'] in ('both', 'minor'))
769: 
770:         self.label.set_text('')
771:         self._set_artist_props(self.label)
772: 
773:         self.reset_ticks()
774: 
775:         self.converter = None
776:         self.units = None
777:         self.set_units(None)
778:         self.stale = True
779: 
780:     def reset_ticks(self):
781:         # build a few default ticks; grow as necessary later; only
782:         # define 1 so properties set on ticks will be copied as they
783:         # grow
784:         del self.majorTicks[:]
785:         del self.minorTicks[:]
786: 
787:         self.majorTicks.extend([self._get_tick(major=True)])
788:         self.minorTicks.extend([self._get_tick(major=False)])
789:         self._lastNumMajorTicks = 1
790:         self._lastNumMinorTicks = 1
791: 
792:     def set_tick_params(self, which='major', reset=False, **kw):
793:         '''
794:         Set appearance parameters for ticks and ticklabels.
795: 
796:         For documentation of keyword arguments, see
797:         :meth:`matplotlib.axes.Axes.tick_params`.
798:         '''
799:         dicts = []
800:         if which == 'major' or which == 'both':
801:             dicts.append(self._major_tick_kw)
802:         if which == 'minor' or which == 'both':
803:             dicts.append(self._minor_tick_kw)
804:         kwtrans = self._translate_tick_kw(kw, to_init_kw=True)
805:         for d in dicts:
806:             if reset:
807:                 d.clear()
808:             d.update(kwtrans)
809:         if reset:
810:             self.reset_ticks()
811:         else:
812:             if which == 'major' or which == 'both':
813:                 for tick in self.majorTicks:
814:                     tick._apply_params(**self._major_tick_kw)
815:             if which == 'minor' or which == 'both':
816:                 for tick in self.minorTicks:
817:                     tick._apply_params(**self._minor_tick_kw)
818:             if 'labelcolor' in kwtrans:
819:                 self.offsetText.set_color(kwtrans['labelcolor'])
820:         self.stale = True
821: 
822:     @staticmethod
823:     def _translate_tick_kw(kw, to_init_kw=True):
824:         # The following lists may be moved to a more
825:         # accessible location.
826:         kwkeys0 = ['size', 'width', 'color', 'tickdir', 'pad',
827:                    'labelsize', 'labelcolor', 'zorder', 'gridOn',
828:                    'tick1On', 'tick2On', 'label1On', 'label2On']
829:         kwkeys1 = ['length', 'direction', 'left', 'bottom', 'right', 'top',
830:                    'labelleft', 'labelbottom', 'labelright', 'labeltop',
831:                    'rotation']
832:         kwkeys = kwkeys0 + kwkeys1
833:         kwtrans = dict()
834:         if to_init_kw:
835:             if 'length' in kw:
836:                 kwtrans['size'] = kw.pop('length')
837:             if 'direction' in kw:
838:                 kwtrans['tickdir'] = kw.pop('direction')
839:             if 'rotation' in kw:
840:                 kwtrans['labelrotation'] = kw.pop('rotation')
841:             if 'left' in kw:
842:                 kwtrans['tick1On'] = _string_to_bool(kw.pop('left'))
843:             if 'bottom' in kw:
844:                 kwtrans['tick1On'] = _string_to_bool(kw.pop('bottom'))
845:             if 'right' in kw:
846:                 kwtrans['tick2On'] = _string_to_bool(kw.pop('right'))
847:             if 'top' in kw:
848:                 kwtrans['tick2On'] = _string_to_bool(kw.pop('top'))
849: 
850:             if 'labelleft' in kw:
851:                 kwtrans['label1On'] = _string_to_bool(kw.pop('labelleft'))
852:             if 'labelbottom' in kw:
853:                 kwtrans['label1On'] = _string_to_bool(kw.pop('labelbottom'))
854:             if 'labelright' in kw:
855:                 kwtrans['label2On'] = _string_to_bool(kw.pop('labelright'))
856:             if 'labeltop' in kw:
857:                 kwtrans['label2On'] = _string_to_bool(kw.pop('labeltop'))
858:             if 'colors' in kw:
859:                 c = kw.pop('colors')
860:                 kwtrans['color'] = c
861:                 kwtrans['labelcolor'] = c
862:             # Maybe move the checking up to the caller of this method.
863:             for key in kw:
864:                 if key not in kwkeys:
865:                     raise ValueError(
866:                         "keyword %s is not recognized; valid keywords are %s"
867:                         % (key, kwkeys))
868:             kwtrans.update(kw)
869:         else:
870:             raise NotImplementedError("Inverse translation is deferred")
871:         return kwtrans
872: 
873:     def set_clip_path(self, clippath, transform=None):
874:         artist.Artist.set_clip_path(self, clippath, transform)
875:         for child in self.majorTicks + self.minorTicks:
876:             child.set_clip_path(clippath, transform)
877:         self.stale = True
878: 
879:     def get_view_interval(self):
880:         'return the Interval instance for this axis view limits'
881:         raise NotImplementedError('Derived must override')
882: 
883:     def set_view_interval(self, vmin, vmax, ignore=False):
884:         raise NotImplementedError('Derived must override')
885: 
886:     def get_data_interval(self):
887:         'return the Interval instance for this axis data limits'
888:         raise NotImplementedError('Derived must override')
889: 
890:     def set_data_interval(self):
891:         '''set the axis data limits'''
892:         raise NotImplementedError('Derived must override')
893: 
894:     def set_default_intervals(self):
895:         '''set the default limits for the axis data and view interval if they
896:         are not mutated'''
897: 
898:         # this is mainly in support of custom object plotting.  For
899:         # example, if someone passes in a datetime object, we do not
900:         # know automagically how to set the default min/max of the
901:         # data and view limits.  The unit conversion AxisInfo
902:         # interface provides a hook for custom types to register
903:         # default limits through the AxisInfo.default_limits
904:         # attribute, and the derived code below will check for that
905:         # and use it if is available (else just use 0..1)
906:         pass
907: 
908:     def _set_artist_props(self, a):
909:         if a is None:
910:             return
911:         a.set_figure(self.figure)
912: 
913:     def iter_ticks(self):
914:         '''
915:         Iterate through all of the major and minor ticks.
916:         '''
917:         majorLocs = self.major.locator()
918:         majorTicks = self.get_major_ticks(len(majorLocs))
919:         self.major.formatter.set_locs(majorLocs)
920:         majorLabels = [self.major.formatter(val, i)
921:                        for i, val in enumerate(majorLocs)]
922: 
923:         minorLocs = self.minor.locator()
924:         minorTicks = self.get_minor_ticks(len(minorLocs))
925:         self.minor.formatter.set_locs(minorLocs)
926:         minorLabels = [self.minor.formatter(val, i)
927:                        for i, val in enumerate(minorLocs)]
928: 
929:         major_minor = [
930:             (majorTicks, majorLocs, majorLabels),
931:             (minorTicks, minorLocs, minorLabels)]
932: 
933:         for group in major_minor:
934:             for tick in zip(*group):
935:                 yield tick
936: 
937:     def get_ticklabel_extents(self, renderer):
938:         '''
939:         Get the extents of the tick labels on either side
940:         of the axes.
941:         '''
942: 
943:         ticks_to_draw = self._update_ticks(renderer)
944:         ticklabelBoxes, ticklabelBoxes2 = self._get_tick_bboxes(ticks_to_draw,
945:                                                                 renderer)
946: 
947:         if len(ticklabelBoxes):
948:             bbox = mtransforms.Bbox.union(ticklabelBoxes)
949:         else:
950:             bbox = mtransforms.Bbox.from_extents(0, 0, 0, 0)
951:         if len(ticklabelBoxes2):
952:             bbox2 = mtransforms.Bbox.union(ticklabelBoxes2)
953:         else:
954:             bbox2 = mtransforms.Bbox.from_extents(0, 0, 0, 0)
955:         return bbox, bbox2
956: 
957:     def set_smart_bounds(self, value):
958:         '''set the axis to have smart bounds'''
959:         self._smart_bounds = value
960:         self.stale = True
961: 
962:     def get_smart_bounds(self):
963:         '''get whether the axis has smart bounds'''
964:         return self._smart_bounds
965: 
966:     def _update_ticks(self, renderer):
967:         '''
968:         Update ticks (position and labels) using the current data
969:         interval of the axes. Returns a list of ticks that will be
970:         drawn.
971:         '''
972: 
973:         interval = self.get_view_interval()
974:         tick_tups = list(self.iter_ticks())
975:         if self._smart_bounds and tick_tups:
976:             # handle inverted limits
977:             view_low, view_high = sorted(interval)
978:             data_low, data_high = sorted(self.get_data_interval())
979:             locs = np.sort([ti[1] for ti in tick_tups])
980:             if data_low <= view_low:
981:                 # data extends beyond view, take view as limit
982:                 ilow = view_low
983:             else:
984:                 # data stops within view, take best tick
985:                 good_locs = locs[locs <= data_low]
986:                 if len(good_locs):
987:                     # last tick prior or equal to first data point
988:                     ilow = good_locs[-1]
989:                 else:
990:                     # No ticks (why not?), take first tick
991:                     ilow = locs[0]
992:             if data_high >= view_high:
993:                 # data extends beyond view, take view as limit
994:                 ihigh = view_high
995:             else:
996:                 # data stops within view, take best tick
997:                 good_locs = locs[locs >= data_high]
998:                 if len(good_locs):
999:                     # first tick after or equal to last data point
1000:                     ihigh = good_locs[0]
1001:                 else:
1002:                     # No ticks (why not?), take last tick
1003:                     ihigh = locs[-1]
1004:             tick_tups = [ti for ti in tick_tups if ilow <= ti[1] <= ihigh]
1005: 
1006:         # so that we don't lose ticks on the end, expand out the interval ever
1007:         # so slightly.  The "ever so slightly" is defined to be the width of a
1008:         # half of a pixel.  We don't want to draw a tick that even one pixel
1009:         # outside of the defined axis interval.
1010:         if interval[0] <= interval[1]:
1011:             interval_expanded = interval
1012:         else:
1013:             interval_expanded = interval[1], interval[0]
1014: 
1015:         if hasattr(self, '_get_pixel_distance_along_axis'):
1016:             # normally, one does not want to catch all exceptions that
1017:             # could possibly happen, but it is not clear exactly what
1018:             # exceptions might arise from a user's projection (their
1019:             # rendition of the Axis object).  So, we catch all, with
1020:             # the idea that one would rather potentially lose a tick
1021:             # from one side of the axis or another, rather than see a
1022:             # stack trace.
1023:             # We also catch users warnings here. These are the result of
1024:             # invalid numpy calculations that may be the result of out of
1025:             # bounds on axis with finite allowed intervals such as geo
1026:             # projections i.e. Mollweide.
1027:             with np.errstate(invalid='ignore'):
1028:                 try:
1029:                     ds1 = self._get_pixel_distance_along_axis(
1030:                         interval_expanded[0], -0.5)
1031:                 except:
1032:                     warnings.warn("Unable to find pixel distance along axis "
1033:                                   "for interval padding of ticks; assuming no "
1034:                                   "interval padding needed.")
1035:                     ds1 = 0.0
1036:                 if np.isnan(ds1):
1037:                     ds1 = 0.0
1038:                 try:
1039:                     ds2 = self._get_pixel_distance_along_axis(
1040:                         interval_expanded[1], +0.5)
1041:                 except:
1042:                     warnings.warn("Unable to find pixel distance along axis "
1043:                                   "for interval padding of ticks; assuming no "
1044:                                   "interval padding needed.")
1045:                     ds2 = 0.0
1046:                 if np.isnan(ds2):
1047:                     ds2 = 0.0
1048:             interval_expanded = (interval_expanded[0] - ds1,
1049:                                  interval_expanded[1] + ds2)
1050: 
1051:         ticks_to_draw = []
1052:         for tick, loc, label in tick_tups:
1053:             if tick is None:
1054:                 continue
1055:             if not mtransforms.interval_contains(interval_expanded, loc):
1056:                 continue
1057:             tick.update_position(loc)
1058:             tick.set_label1(label)
1059:             tick.set_label2(label)
1060:             ticks_to_draw.append(tick)
1061: 
1062:         return ticks_to_draw
1063: 
1064:     def _get_tick_bboxes(self, ticks, renderer):
1065:         '''
1066:         Given the list of ticks, return two lists of bboxes. One for
1067:         tick lable1's and another for tick label2's.
1068:         '''
1069: 
1070:         ticklabelBoxes = []
1071:         ticklabelBoxes2 = []
1072: 
1073:         for tick in ticks:
1074:             if tick.label1On and tick.label1.get_visible():
1075:                 extent = tick.label1.get_window_extent(renderer)
1076:                 ticklabelBoxes.append(extent)
1077:             if tick.label2On and tick.label2.get_visible():
1078:                 extent = tick.label2.get_window_extent(renderer)
1079:                 ticklabelBoxes2.append(extent)
1080:         return ticklabelBoxes, ticklabelBoxes2
1081: 
1082:     def get_tightbbox(self, renderer):
1083:         '''
1084:         Return a bounding box that encloses the axis. It only accounts
1085:         tick labels, axis label, and offsetText.
1086:         '''
1087:         if not self.get_visible():
1088:             return
1089: 
1090:         ticks_to_draw = self._update_ticks(renderer)
1091:         ticklabelBoxes, ticklabelBoxes2 = self._get_tick_bboxes(ticks_to_draw,
1092:                                                                 renderer)
1093: 
1094:         self._update_label_position(ticklabelBoxes, ticklabelBoxes2)
1095: 
1096:         self._update_offset_text_position(ticklabelBoxes, ticklabelBoxes2)
1097:         self.offsetText.set_text(self.major.formatter.get_offset())
1098: 
1099:         bb = []
1100: 
1101:         for a in [self.label, self.offsetText]:
1102:             if a.get_visible():
1103:                 bb.append(a.get_window_extent(renderer))
1104: 
1105:         bb.extend(ticklabelBoxes)
1106:         bb.extend(ticklabelBoxes2)
1107: 
1108:         bb = [b for b in bb if b.width != 0 or b.height != 0]
1109:         if bb:
1110:             _bbox = mtransforms.Bbox.union(bb)
1111:             return _bbox
1112:         else:
1113:             return None
1114: 
1115:     def get_tick_padding(self):
1116:         values = []
1117:         if len(self.majorTicks):
1118:             values.append(self.majorTicks[0].get_tick_padding())
1119:         if len(self.minorTicks):
1120:             values.append(self.minorTicks[0].get_tick_padding())
1121:         if len(values):
1122:             return max(values)
1123:         return 0.0
1124: 
1125:     @allow_rasterization
1126:     def draw(self, renderer, *args, **kwargs):
1127:         'Draw the axis lines, grid lines, tick lines and labels'
1128: 
1129:         if not self.get_visible():
1130:             return
1131:         renderer.open_group(__name__)
1132: 
1133:         ticks_to_draw = self._update_ticks(renderer)
1134:         ticklabelBoxes, ticklabelBoxes2 = self._get_tick_bboxes(ticks_to_draw,
1135:                                                                 renderer)
1136: 
1137:         for tick in ticks_to_draw:
1138:             tick.draw(renderer)
1139: 
1140:         # scale up the axis label box to also find the neighbors, not
1141:         # just the tick labels that actually overlap note we need a
1142:         # *copy* of the axis label box because we don't wan't to scale
1143:         # the actual bbox
1144: 
1145:         self._update_label_position(ticklabelBoxes, ticklabelBoxes2)
1146: 
1147:         self.label.draw(renderer)
1148: 
1149:         self._update_offset_text_position(ticklabelBoxes, ticklabelBoxes2)
1150:         self.offsetText.set_text(self.major.formatter.get_offset())
1151:         self.offsetText.draw(renderer)
1152: 
1153:         if 0:  # draw the bounding boxes around the text for debug
1154:             for tick in self.majorTicks:
1155:                 label = tick.label1
1156:                 mpatches.bbox_artist(label, renderer)
1157:             mpatches.bbox_artist(self.label, renderer)
1158: 
1159:         renderer.close_group(__name__)
1160:         self.stale = False
1161: 
1162:     def _get_label(self):
1163:         raise NotImplementedError('Derived must override')
1164: 
1165:     def _get_offset_text(self):
1166:         raise NotImplementedError('Derived must override')
1167: 
1168:     def get_gridlines(self):
1169:         'Return the grid lines as a list of Line2D instance'
1170:         ticks = self.get_major_ticks()
1171:         return cbook.silent_list('Line2D gridline',
1172:                                  [tick.gridline for tick in ticks])
1173: 
1174:     def get_label(self):
1175:         'Return the axis label as a Text instance'
1176:         return self.label
1177: 
1178:     def get_offset_text(self):
1179:         'Return the axis offsetText as a Text instance'
1180:         return self.offsetText
1181: 
1182:     def get_pickradius(self):
1183:         'Return the depth of the axis used by the picker'
1184:         return self.pickradius
1185: 
1186:     def get_majorticklabels(self):
1187:         'Return a list of Text instances for the major ticklabels'
1188:         ticks = self.get_major_ticks()
1189:         labels1 = [tick.label1 for tick in ticks if tick.label1On]
1190:         labels2 = [tick.label2 for tick in ticks if tick.label2On]
1191:         return cbook.silent_list('Text major ticklabel', labels1 + labels2)
1192: 
1193:     def get_minorticklabels(self):
1194:         'Return a list of Text instances for the minor ticklabels'
1195:         ticks = self.get_minor_ticks()
1196:         labels1 = [tick.label1 for tick in ticks if tick.label1On]
1197:         labels2 = [tick.label2 for tick in ticks if tick.label2On]
1198:         return cbook.silent_list('Text minor ticklabel', labels1 + labels2)
1199: 
1200:     def get_ticklabels(self, minor=False, which=None):
1201:         '''
1202:         Get the x tick labels as a list of :class:`~matplotlib.text.Text`
1203:         instances.
1204: 
1205:         Parameters
1206:         ----------
1207:         minor : bool
1208:            If True return the minor ticklabels,
1209:            else return the major ticklabels
1210: 
1211:         which : None, ('minor', 'major', 'both')
1212:            Overrides `minor`.
1213: 
1214:            Selects which ticklabels to return
1215: 
1216:         Returns
1217:         -------
1218:         ret : list
1219:            List of :class:`~matplotlib.text.Text` instances.
1220:         '''
1221: 
1222:         if which is not None:
1223:             if which == 'minor':
1224:                 return self.get_minorticklabels()
1225:             elif which == 'major':
1226:                 return self.get_majorticklabels()
1227:             elif which == 'both':
1228:                 return self.get_majorticklabels() + self.get_minorticklabels()
1229:             else:
1230:                 raise ValueError("`which` must be one of ('minor', 'major', "
1231:                                  "'both') not " + str(which))
1232:         if minor:
1233:             return self.get_minorticklabels()
1234:         return self.get_majorticklabels()
1235: 
1236:     def get_majorticklines(self):
1237:         'Return the major tick lines as a list of Line2D instances'
1238:         lines = []
1239:         ticks = self.get_major_ticks()
1240:         for tick in ticks:
1241:             lines.append(tick.tick1line)
1242:             lines.append(tick.tick2line)
1243:         return cbook.silent_list('Line2D ticklines', lines)
1244: 
1245:     def get_minorticklines(self):
1246:         'Return the minor tick lines as a list of Line2D instances'
1247:         lines = []
1248:         ticks = self.get_minor_ticks()
1249:         for tick in ticks:
1250:             lines.append(tick.tick1line)
1251:             lines.append(tick.tick2line)
1252:         return cbook.silent_list('Line2D ticklines', lines)
1253: 
1254:     def get_ticklines(self, minor=False):
1255:         'Return the tick lines as a list of Line2D instances'
1256:         if minor:
1257:             return self.get_minorticklines()
1258:         return self.get_majorticklines()
1259: 
1260:     def get_majorticklocs(self):
1261:         "Get the major tick locations in data coordinates as a numpy array"
1262:         return self.major.locator()
1263: 
1264:     def get_minorticklocs(self):
1265:         "Get the minor tick locations in data coordinates as a numpy array"
1266:         return self.minor.locator()
1267: 
1268:     def get_ticklocs(self, minor=False):
1269:         "Get the tick locations in data coordinates as a numpy array"
1270:         if minor:
1271:             return self.minor.locator()
1272:         return self.major.locator()
1273: 
1274:     def get_ticks_direction(self, minor=False):
1275:         '''
1276:         Get the tick directions as a numpy array
1277: 
1278:         Parameters
1279:         ----------
1280:         minor : boolean
1281:             True to return the minor tick directions,
1282:             False to return the major tick directions,
1283:             Default is False
1284: 
1285:         Returns
1286:         -------
1287:         numpy array of tick directions
1288:         '''
1289:         if minor:
1290:             return np.array(
1291:                 [tick._tickdir for tick in self.get_minor_ticks()])
1292:         else:
1293:             return np.array(
1294:                 [tick._tickdir for tick in self.get_major_ticks()])
1295: 
1296:     def _get_tick(self, major):
1297:         'return the default tick instance'
1298:         raise NotImplementedError('derived must override')
1299: 
1300:     def _copy_tick_props(self, src, dest):
1301:         'Copy the props from src tick to dest tick'
1302:         if src is None or dest is None:
1303:             return
1304:         dest.label1.update_from(src.label1)
1305:         dest.label2.update_from(src.label2)
1306: 
1307:         dest.tick1line.update_from(src.tick1line)
1308:         dest.tick2line.update_from(src.tick2line)
1309:         dest.gridline.update_from(src.gridline)
1310: 
1311:         dest.tick1On = src.tick1On
1312:         dest.tick2On = src.tick2On
1313:         dest.label1On = src.label1On
1314:         dest.label2On = src.label2On
1315: 
1316:     def get_label_text(self):
1317:         'Get the text of the label'
1318:         return self.label.get_text()
1319: 
1320:     def get_major_locator(self):
1321:         'Get the locator of the major ticker'
1322:         return self.major.locator
1323: 
1324:     def get_minor_locator(self):
1325:         'Get the locator of the minor ticker'
1326:         return self.minor.locator
1327: 
1328:     def get_major_formatter(self):
1329:         'Get the formatter of the major ticker'
1330:         return self.major.formatter
1331: 
1332:     def get_minor_formatter(self):
1333:         'Get the formatter of the minor ticker'
1334:         return self.minor.formatter
1335: 
1336:     def get_major_ticks(self, numticks=None):
1337:         'get the tick instances; grow as necessary'
1338:         if numticks is None:
1339:             numticks = len(self.get_major_locator()())
1340:         if len(self.majorTicks) < numticks:
1341:             # update the new tick label properties from the old
1342:             for i in range(numticks - len(self.majorTicks)):
1343:                 tick = self._get_tick(major=True)
1344:                 self.majorTicks.append(tick)
1345: 
1346:         if self._lastNumMajorTicks < numticks:
1347:             protoTick = self.majorTicks[0]
1348:             for i in range(self._lastNumMajorTicks, len(self.majorTicks)):
1349:                 tick = self.majorTicks[i]
1350:                 if self._gridOnMajor:
1351:                     tick.gridOn = True
1352:                 self._copy_tick_props(protoTick, tick)
1353: 
1354:         self._lastNumMajorTicks = numticks
1355:         ticks = self.majorTicks[:numticks]
1356: 
1357:         return ticks
1358: 
1359:     def get_minor_ticks(self, numticks=None):
1360:         'get the minor tick instances; grow as necessary'
1361:         if numticks is None:
1362:             numticks = len(self.get_minor_locator()())
1363: 
1364:         if len(self.minorTicks) < numticks:
1365:             # update the new tick label properties from the old
1366:             for i in range(numticks - len(self.minorTicks)):
1367:                 tick = self._get_tick(major=False)
1368:                 self.minorTicks.append(tick)
1369: 
1370:         if self._lastNumMinorTicks < numticks:
1371:             protoTick = self.minorTicks[0]
1372:             for i in range(self._lastNumMinorTicks, len(self.minorTicks)):
1373:                 tick = self.minorTicks[i]
1374:                 if self._gridOnMinor:
1375:                     tick.gridOn = True
1376:                 self._copy_tick_props(protoTick, tick)
1377: 
1378:         self._lastNumMinorTicks = numticks
1379:         ticks = self.minorTicks[:numticks]
1380: 
1381:         return ticks
1382: 
1383:     def grid(self, b=None, which='major', **kwargs):
1384:         '''
1385:         Set the axis grid on or off; b is a boolean. Use *which* =
1386:         'major' | 'minor' | 'both' to set the grid for major or minor ticks.
1387: 
1388:         If *b* is *None* and len(kwargs)==0, toggle the grid state.  If
1389:         *kwargs* are supplied, it is assumed you want the grid on and *b*
1390:         will be set to True.
1391: 
1392:         *kwargs* are used to set the line properties of the grids, e.g.,
1393: 
1394:           xax.grid(color='r', linestyle='-', linewidth=2)
1395:         '''
1396:         if len(kwargs):
1397:             b = True
1398:         which = which.lower()
1399:         if which in ['minor', 'both']:
1400:             if b is None:
1401:                 self._gridOnMinor = not self._gridOnMinor
1402:             else:
1403:                 self._gridOnMinor = b
1404:             for tick in self.minorTicks:  # don't use get_ticks here!
1405:                 if tick is None:
1406:                     continue
1407:                 tick.gridOn = self._gridOnMinor
1408:                 if len(kwargs):
1409:                     tick.gridline.update(kwargs)
1410:             self._minor_tick_kw['gridOn'] = self._gridOnMinor
1411:         if which in ['major', 'both']:
1412:             if b is None:
1413:                 self._gridOnMajor = not self._gridOnMajor
1414:             else:
1415:                 self._gridOnMajor = b
1416:             for tick in self.majorTicks:  # don't use get_ticks here!
1417:                 if tick is None:
1418:                     continue
1419:                 tick.gridOn = self._gridOnMajor
1420:                 if len(kwargs):
1421:                     tick.gridline.update(kwargs)
1422:             self._major_tick_kw['gridOn'] = self._gridOnMajor
1423:         self.stale = True
1424: 
1425:     def update_units(self, data):
1426:         '''
1427:         introspect *data* for units converter and update the
1428:         axis.converter instance if necessary. Return *True*
1429:         if *data* is registered for unit conversion.
1430:         '''
1431: 
1432:         converter = munits.registry.get_converter(data)
1433:         if converter is None:
1434:             return False
1435: 
1436:         neednew = self.converter != converter
1437:         self.converter = converter
1438:         default = self.converter.default_units(data, self)
1439:         if default is not None and self.units is None:
1440:             self.set_units(default)
1441: 
1442:         if neednew:
1443:             self._update_axisinfo()
1444:         self.stale = True
1445:         return True
1446: 
1447:     def _update_axisinfo(self):
1448:         '''
1449:         check the axis converter for the stored units to see if the
1450:         axis info needs to be updated
1451:         '''
1452: 
1453:         if self.converter is None:
1454:             return
1455: 
1456:         info = self.converter.axisinfo(self.units, self)
1457:         if info is None:
1458:             return
1459:         if info.majloc is not None and \
1460:            self.major.locator != info.majloc and self.isDefault_majloc:
1461:             self.set_major_locator(info.majloc)
1462:             self.isDefault_majloc = True
1463:         if info.minloc is not None and \
1464:            self.minor.locator != info.minloc and self.isDefault_minloc:
1465:             self.set_minor_locator(info.minloc)
1466:             self.isDefault_minloc = True
1467:         if info.majfmt is not None and \
1468:            self.major.formatter != info.majfmt and self.isDefault_majfmt:
1469:             self.set_major_formatter(info.majfmt)
1470:             self.isDefault_majfmt = True
1471:         if info.minfmt is not None and \
1472:            self.minor.formatter != info.minfmt and self.isDefault_minfmt:
1473:             self.set_minor_formatter(info.minfmt)
1474:             self.isDefault_minfmt = True
1475:         if info.label is not None and self.isDefault_label:
1476:             self.set_label_text(info.label)
1477:             self.isDefault_label = True
1478: 
1479:         self.set_default_intervals()
1480: 
1481:     def have_units(self):
1482:         return self.converter is not None or self.units is not None
1483: 
1484:     def convert_units(self, x):
1485:         if self.converter is None:
1486:             self.converter = munits.registry.get_converter(x)
1487: 
1488:         if self.converter is None:
1489:             return x
1490: 
1491:         ret = self.converter.convert(x, self.units, self)
1492:         return ret
1493: 
1494:     def set_units(self, u):
1495:         '''
1496:         set the units for axis
1497: 
1498:         ACCEPTS: a units tag
1499:         '''
1500:         pchanged = False
1501:         if u is None:
1502:             self.units = None
1503:             pchanged = True
1504:         else:
1505:             if u != self.units:
1506:                 self.units = u
1507:                 pchanged = True
1508:         if pchanged:
1509:             self._update_axisinfo()
1510:             self.callbacks.process('units')
1511:             self.callbacks.process('units finalize')
1512:         self.stale = True
1513: 
1514:     def get_units(self):
1515:         'return the units for axis'
1516:         return self.units
1517: 
1518:     def set_label_text(self, label, fontdict=None, **kwargs):
1519:         '''  Sets the text value of the axis label
1520: 
1521:         ACCEPTS: A string value for the label
1522:         '''
1523:         self.isDefault_label = False
1524:         self.label.set_text(label)
1525:         if fontdict is not None:
1526:             self.label.update(fontdict)
1527:         self.label.update(kwargs)
1528:         self.stale = True
1529:         return self.label
1530: 
1531:     def set_major_formatter(self, formatter):
1532:         '''
1533:         Set the formatter of the major ticker
1534: 
1535:         ACCEPTS: A :class:`~matplotlib.ticker.Formatter` instance
1536:         '''
1537:         self.isDefault_majfmt = False
1538:         self.major.formatter = formatter
1539:         formatter.set_axis(self)
1540:         self.stale = True
1541: 
1542:     def set_minor_formatter(self, formatter):
1543:         '''
1544:         Set the formatter of the minor ticker
1545: 
1546:         ACCEPTS: A :class:`~matplotlib.ticker.Formatter` instance
1547:         '''
1548:         self.isDefault_minfmt = False
1549:         self.minor.formatter = formatter
1550:         formatter.set_axis(self)
1551:         self.stale = True
1552: 
1553:     def set_major_locator(self, locator):
1554:         '''
1555:         Set the locator of the major ticker
1556: 
1557:         ACCEPTS: a :class:`~matplotlib.ticker.Locator` instance
1558:         '''
1559:         self.isDefault_majloc = False
1560:         self.major.locator = locator
1561:         locator.set_axis(self)
1562:         self.stale = True
1563: 
1564:     def set_minor_locator(self, locator):
1565:         '''
1566:         Set the locator of the minor ticker
1567: 
1568:         ACCEPTS: a :class:`~matplotlib.ticker.Locator` instance
1569:         '''
1570:         self.isDefault_minloc = False
1571:         self.minor.locator = locator
1572:         locator.set_axis(self)
1573:         self.stale = True
1574: 
1575:     def set_pickradius(self, pickradius):
1576:         '''
1577:         Set the depth of the axis used by the picker
1578: 
1579:         ACCEPTS: a distance in points
1580:         '''
1581:         self.pickradius = pickradius
1582: 
1583:     def set_ticklabels(self, ticklabels, *args, **kwargs):
1584:         '''
1585:         Set the text values of the tick labels. Return a list of Text
1586:         instances.  Use *kwarg* *minor=True* to select minor ticks.
1587:         All other kwargs are used to update the text object properties.
1588:         As for get_ticklabels, label1 (left or bottom) is
1589:         affected for a given tick only if its label1On attribute
1590:         is True, and similarly for label2.  The list of returned
1591:         label text objects consists of all such label1 objects followed
1592:         by all such label2 objects.
1593: 
1594:         The input *ticklabels* is assumed to match the set of
1595:         tick locations, regardless of the state of label1On and
1596:         label2On.
1597: 
1598:         ACCEPTS: sequence of strings or Text objects
1599:         '''
1600:         get_labels = []
1601:         for t in ticklabels:
1602:             # try calling get_text() to check whether it is Text object
1603:             # if it is Text, get label content
1604:             try:
1605:                 get_labels.append(t.get_text())
1606:             # otherwise add the label to the list directly
1607:             except AttributeError:
1608:                 get_labels.append(t)
1609:         # replace the ticklabels list with the processed one
1610:         ticklabels = get_labels
1611: 
1612:         minor = kwargs.pop('minor', False)
1613:         if minor:
1614:             self.set_minor_formatter(mticker.FixedFormatter(ticklabels))
1615:             ticks = self.get_minor_ticks()
1616:         else:
1617:             self.set_major_formatter(mticker.FixedFormatter(ticklabels))
1618:             ticks = self.get_major_ticks()
1619:         ret = []
1620:         for tick_label, tick in zip(ticklabels, ticks):
1621:             # deal with label1
1622:             tick.label1.set_text(tick_label)
1623:             tick.label1.update(kwargs)
1624:             # deal with label2
1625:             tick.label2.set_text(tick_label)
1626:             tick.label2.update(kwargs)
1627:             # only return visible tick labels
1628:             if tick.label1On:
1629:                 ret.append(tick.label1)
1630:             if tick.label2On:
1631:                 ret.append(tick.label2)
1632: 
1633:         self.stale = True
1634:         return ret
1635: 
1636:     def set_ticks(self, ticks, minor=False):
1637:         '''
1638:         Set the locations of the tick marks from sequence ticks
1639: 
1640:         ACCEPTS: sequence of floats
1641:         '''
1642:         # XXX if the user changes units, the information will be lost here
1643:         ticks = self.convert_units(ticks)
1644:         if len(ticks) > 1:
1645:             xleft, xright = self.get_view_interval()
1646:             if xright > xleft:
1647:                 self.set_view_interval(min(ticks), max(ticks))
1648:             else:
1649:                 self.set_view_interval(max(ticks), min(ticks))
1650:         if minor:
1651:             self.set_minor_locator(mticker.FixedLocator(ticks))
1652:             return self.get_minor_ticks(len(ticks))
1653:         else:
1654:             self.set_major_locator(mticker.FixedLocator(ticks))
1655:             return self.get_major_ticks(len(ticks))
1656: 
1657:     def _update_label_position(self, bboxes, bboxes2):
1658:         '''
1659:         Update the label position based on the bounding box enclosing
1660:         all the ticklabels and axis spine
1661:         '''
1662:         raise NotImplementedError('Derived must override')
1663: 
1664:     def _update_offset_text_position(self, bboxes, bboxes2):
1665:         '''
1666:         Update the label position based on the sequence of bounding
1667:         boxes of all the ticklabels
1668:         '''
1669:         raise NotImplementedError('Derived must override')
1670: 
1671:     def pan(self, numsteps):
1672:         'Pan *numsteps* (can be positive or negative)'
1673:         self.major.locator.pan(numsteps)
1674: 
1675:     def zoom(self, direction):
1676:         "Zoom in/out on axis; if *direction* is >0 zoom in, else zoom out"
1677:         self.major.locator.zoom(direction)
1678: 
1679:     def axis_date(self, tz=None):
1680:         '''
1681:         Sets up x-axis ticks and labels that treat the x data as dates.
1682:         *tz* is a :class:`tzinfo` instance or a timezone string.
1683:         This timezone is used to create date labels.
1684:         '''
1685:         # By providing a sample datetime instance with the desired
1686:         # timezone, the registered converter can be selected,
1687:         # and the "units" attribute, which is the timezone, can
1688:         # be set.
1689:         import datetime
1690:         if isinstance(tz, six.string_types):
1691:             import pytz
1692:             tz = pytz.timezone(tz)
1693:         self.update_units(datetime.datetime(2009, 1, 1, 0, 0, 0, 0, tz))
1694: 
1695:     def get_tick_space(self):
1696:         '''
1697:         Return the estimated number of ticks that can fit on the axis.
1698:         '''
1699:         # Must be overridden in the subclass
1700:         raise NotImplementedError()
1701: 
1702:     def get_label_position(self):
1703:         '''
1704:         Return the label position (top or bottom)
1705:         '''
1706:         return self.label_position
1707: 
1708:     def set_label_position(self, position):
1709:         '''
1710:         Set the label position (top or bottom)
1711: 
1712:         ACCEPTS: [ 'top' | 'bottom' ]
1713:         '''
1714:         raise NotImplementedError()
1715: 
1716:     def get_minpos(self):
1717:         raise NotImplementedError()
1718: 
1719: 
1720: class XAxis(Axis):
1721:     __name__ = 'xaxis'
1722:     axis_name = 'x'
1723: 
1724:     def contains(self, mouseevent):
1725:         '''Test whether the mouse event occurred in the x axis.
1726:         '''
1727:         if callable(self._contains):
1728:             return self._contains(self, mouseevent)
1729: 
1730:         x, y = mouseevent.x, mouseevent.y
1731:         try:
1732:             trans = self.axes.transAxes.inverted()
1733:             xaxes, yaxes = trans.transform_point((x, y))
1734:         except ValueError:
1735:             return False, {}
1736:         l, b = self.axes.transAxes.transform_point((0, 0))
1737:         r, t = self.axes.transAxes.transform_point((1, 1))
1738:         inaxis = xaxes >= 0 and xaxes <= 1 and (
1739:             (y < b and y > b - self.pickradius) or
1740:             (y > t and y < t + self.pickradius))
1741:         return inaxis, {}
1742: 
1743:     def _get_tick(self, major):
1744:         if major:
1745:             tick_kw = self._major_tick_kw
1746:         else:
1747:             tick_kw = self._minor_tick_kw
1748:         return XTick(self.axes, 0, '', major=major, **tick_kw)
1749: 
1750:     def _get_label(self):
1751:         # x in axes coords, y in display coords (to be updated at draw
1752:         # time by _update_label_positions)
1753:         label = mtext.Text(x=0.5, y=0,
1754:                            fontproperties=font_manager.FontProperties(
1755:                                size=rcParams['axes.labelsize'],
1756:                                weight=rcParams['axes.labelweight']),
1757:                            color=rcParams['axes.labelcolor'],
1758:                            verticalalignment='top',
1759:                            horizontalalignment='center')
1760: 
1761:         label.set_transform(mtransforms.blended_transform_factory(
1762:             self.axes.transAxes, mtransforms.IdentityTransform()))
1763: 
1764:         self._set_artist_props(label)
1765:         self.label_position = 'bottom'
1766:         return label
1767: 
1768:     def _get_offset_text(self):
1769:         # x in axes coords, y in display coords (to be updated at draw time)
1770:         offsetText = mtext.Text(x=1, y=0,
1771:                                 fontproperties=font_manager.FontProperties(
1772:                                     size=rcParams['xtick.labelsize']),
1773:                                 color=rcParams['xtick.color'],
1774:                                 verticalalignment='top',
1775:                                 horizontalalignment='right')
1776:         offsetText.set_transform(mtransforms.blended_transform_factory(
1777:             self.axes.transAxes, mtransforms.IdentityTransform())
1778:         )
1779:         self._set_artist_props(offsetText)
1780:         self.offset_text_position = 'bottom'
1781:         return offsetText
1782: 
1783:     def _get_pixel_distance_along_axis(self, where, perturb):
1784:         '''
1785:         Returns the amount, in data coordinates, that a single pixel
1786:         corresponds to in the locality given by "where", which is also given
1787:         in data coordinates, and is an x coordinate. "perturb" is the amount
1788:         to perturb the pixel.  Usually +0.5 or -0.5.
1789: 
1790:         Implementing this routine for an axis is optional; if present, it will
1791:         ensure that no ticks are lost due to round-off at the extreme ends of
1792:         an axis.
1793:         '''
1794: 
1795:         # Note that this routine does not work for a polar axis, because of
1796:         # the 1e-10 below.  To do things correctly, we need to use rmax
1797:         # instead of 1e-10 for a polar axis.  But since we do not have that
1798:         # kind of information at this point, we just don't try to pad anything
1799:         # for the theta axis of a polar plot.
1800:         if self.axes.name == 'polar':
1801:             return 0.0
1802: 
1803:         #
1804:         # first figure out the pixel location of the "where" point.  We use
1805:         # 1e-10 for the y point, so that we remain compatible with log axes.
1806: 
1807:         # transformation from data coords to display coords
1808:         trans = self.axes.transData
1809:         # transformation from display coords to data coords
1810:         transinv = trans.inverted()
1811:         pix = trans.transform_point((where, 1e-10))
1812:         # perturb the pixel
1813:         ptp = transinv.transform_point((pix[0] + perturb, pix[1]))
1814:         dx = abs(ptp[0] - where)
1815: 
1816:         return dx
1817: 
1818:     def set_label_position(self, position):
1819:         '''
1820:         Set the label position (top or bottom)
1821: 
1822:         ACCEPTS: [ 'top' | 'bottom' ]
1823:         '''
1824:         if position == 'top':
1825:             self.label.set_verticalalignment('baseline')
1826:         elif position == 'bottom':
1827:             self.label.set_verticalalignment('top')
1828:         else:
1829:             msg = "Position accepts only [ 'top' | 'bottom' ]"
1830:             raise ValueError(msg)
1831:         self.label_position = position
1832:         self.stale = True
1833: 
1834:     def _update_label_position(self, bboxes, bboxes2):
1835:         '''
1836:         Update the label position based on the bounding box enclosing
1837:         all the ticklabels and axis spine
1838:         '''
1839:         if not self._autolabelpos:
1840:             return
1841:         x, y = self.label.get_position()
1842:         if self.label_position == 'bottom':
1843:             try:
1844:                 spine = self.axes.spines['bottom']
1845:                 spinebbox = spine.get_transform().transform_path(
1846:                     spine.get_path()).get_extents()
1847:             except KeyError:
1848:                 # use axes if spine doesn't exist
1849:                 spinebbox = self.axes.bbox
1850:             bbox = mtransforms.Bbox.union(bboxes + [spinebbox])
1851:             bottom = bbox.y0
1852: 
1853:             self.label.set_position(
1854:                 (x, bottom - self.labelpad * self.figure.dpi / 72.0)
1855:             )
1856: 
1857:         else:
1858:             try:
1859:                 spine = self.axes.spines['top']
1860:                 spinebbox = spine.get_transform().transform_path(
1861:                     spine.get_path()).get_extents()
1862:             except KeyError:
1863:                 # use axes if spine doesn't exist
1864:                 spinebbox = self.axes.bbox
1865:             bbox = mtransforms.Bbox.union(bboxes2 + [spinebbox])
1866:             top = bbox.y1
1867: 
1868:             self.label.set_position(
1869:                 (x, top + self.labelpad * self.figure.dpi / 72.0)
1870:             )
1871: 
1872:     def _update_offset_text_position(self, bboxes, bboxes2):
1873:         '''
1874:         Update the offset_text position based on the sequence of bounding
1875:         boxes of all the ticklabels
1876:         '''
1877:         x, y = self.offsetText.get_position()
1878:         if not len(bboxes):
1879:             bottom = self.axes.bbox.ymin
1880:         else:
1881:             bbox = mtransforms.Bbox.union(bboxes)
1882:             bottom = bbox.y0
1883:         self.offsetText.set_position(
1884:             (x, bottom - self.OFFSETTEXTPAD * self.figure.dpi / 72.0)
1885:         )
1886: 
1887:     def get_text_heights(self, renderer):
1888:         '''
1889:         Returns the amount of space one should reserve for text
1890:         above and below the axes.  Returns a tuple (above, below)
1891:         '''
1892:         bbox, bbox2 = self.get_ticklabel_extents(renderer)
1893:         # MGDTODO: Need a better way to get the pad
1894:         padPixels = self.majorTicks[0].get_pad_pixels()
1895: 
1896:         above = 0.0
1897:         if bbox2.height:
1898:             above += bbox2.height + padPixels
1899:         below = 0.0
1900:         if bbox.height:
1901:             below += bbox.height + padPixels
1902: 
1903:         if self.get_label_position() == 'top':
1904:             above += self.label.get_window_extent(renderer).height + padPixels
1905:         else:
1906:             below += self.label.get_window_extent(renderer).height + padPixels
1907:         return above, below
1908: 
1909:     def set_ticks_position(self, position):
1910:         '''
1911:         Set the ticks position (top, bottom, both, default or none)
1912:         both sets the ticks to appear on both positions, but does not
1913:         change the tick labels.  'default' resets the tick positions to
1914:         the default: ticks on both positions, labels at bottom.  'none'
1915:         can be used if you don't want any ticks. 'none' and 'both'
1916:         affect only the ticks, not the labels.
1917: 
1918:         ACCEPTS: [ 'top' | 'bottom' | 'both' | 'default' | 'none' ]
1919:         '''
1920:         if position == 'top':
1921:             self.set_tick_params(which='both', top=True, labeltop=True,
1922:                                  bottom=False, labelbottom=False)
1923:         elif position == 'bottom':
1924:             self.set_tick_params(which='both', top=False, labeltop=False,
1925:                                  bottom=True, labelbottom=True)
1926:         elif position == 'both':
1927:             self.set_tick_params(which='both', top=True,
1928:                                  bottom=True)
1929:         elif position == 'none':
1930:             self.set_tick_params(which='both', top=False,
1931:                                  bottom=False)
1932:         elif position == 'default':
1933:             self.set_tick_params(which='both', top=True, labeltop=False,
1934:                                  bottom=True, labelbottom=True)
1935:         else:
1936:             raise ValueError("invalid position: %s" % position)
1937:         self.stale = True
1938: 
1939:     def tick_top(self):
1940:         'use ticks only on top'
1941:         self.set_ticks_position('top')
1942: 
1943:     def tick_bottom(self):
1944:         'use ticks only on bottom'
1945:         self.set_ticks_position('bottom')
1946: 
1947:     def get_ticks_position(self):
1948:         '''
1949:         Return the ticks position (top, bottom, default or unknown)
1950:         '''
1951:         majt = self.majorTicks[0]
1952:         mT = self.minorTicks[0]
1953: 
1954:         majorTop = ((not majt.tick1On) and majt.tick2On and
1955:                     (not majt.label1On) and majt.label2On)
1956:         minorTop = ((not mT.tick1On) and mT.tick2On and
1957:                     (not mT.label1On) and mT.label2On)
1958:         if majorTop and minorTop:
1959:             return 'top'
1960: 
1961:         MajorBottom = (majt.tick1On and (not majt.tick2On) and
1962:                        majt.label1On and (not majt.label2On))
1963:         MinorBottom = (mT.tick1On and (not mT.tick2On) and
1964:                        mT.label1On and (not mT.label2On))
1965:         if MajorBottom and MinorBottom:
1966:             return 'bottom'
1967: 
1968:         majorDefault = (majt.tick1On and majt.tick2On and
1969:                         majt.label1On and (not majt.label2On))
1970:         minorDefault = (mT.tick1On and mT.tick2On and
1971:                         mT.label1On and (not mT.label2On))
1972:         if majorDefault and minorDefault:
1973:             return 'default'
1974: 
1975:         return 'unknown'
1976: 
1977:     def get_view_interval(self):
1978:         'return the Interval instance for this axis view limits'
1979:         return self.axes.viewLim.intervalx
1980: 
1981:     def set_view_interval(self, vmin, vmax, ignore=False):
1982:         '''
1983:         If *ignore* is *False*, the order of vmin, vmax
1984:         does not matter; the original axis orientation will
1985:         be preserved. In addition, the view limits can be
1986:         expanded, but will not be reduced.  This method is
1987:         for mpl internal use; for normal use, see
1988:         :meth:`~matplotlib.axes.Axes.set_xlim`.
1989: 
1990:         '''
1991:         if ignore:
1992:             self.axes.viewLim.intervalx = vmin, vmax
1993:         else:
1994:             Vmin, Vmax = self.get_view_interval()
1995:             if Vmin < Vmax:
1996:                 self.axes.viewLim.intervalx = (min(vmin, vmax, Vmin),
1997:                                                max(vmin, vmax, Vmax))
1998:             else:
1999:                 self.axes.viewLim.intervalx = (max(vmin, vmax, Vmin),
2000:                                                min(vmin, vmax, Vmax))
2001: 
2002:     def get_minpos(self):
2003:         return self.axes.dataLim.minposx
2004: 
2005:     def get_data_interval(self):
2006:         'return the Interval instance for this axis data limits'
2007:         return self.axes.dataLim.intervalx
2008: 
2009:     def set_data_interval(self, vmin, vmax, ignore=False):
2010:         'set the axis data limits'
2011:         if ignore:
2012:             self.axes.dataLim.intervalx = vmin, vmax
2013:         else:
2014:             Vmin, Vmax = self.get_data_interval()
2015:             self.axes.dataLim.intervalx = min(vmin, Vmin), max(vmax, Vmax)
2016:         self.stale = True
2017: 
2018:     def set_default_intervals(self):
2019:         'set the default limits for the axis interval if they are not mutated'
2020:         xmin, xmax = 0., 1.
2021:         dataMutated = self.axes.dataLim.mutatedx()
2022:         viewMutated = self.axes.viewLim.mutatedx()
2023:         if not dataMutated or not viewMutated:
2024:             if self.converter is not None:
2025:                 info = self.converter.axisinfo(self.units, self)
2026:                 if info.default_limits is not None:
2027:                     valmin, valmax = info.default_limits
2028:                     xmin = self.converter.convert(valmin, self.units, self)
2029:                     xmax = self.converter.convert(valmax, self.units, self)
2030:             if not dataMutated:
2031:                 self.axes.dataLim.intervalx = xmin, xmax
2032:             if not viewMutated:
2033:                 self.axes.viewLim.intervalx = xmin, xmax
2034:         self.stale = True
2035: 
2036:     def get_tick_space(self):
2037:         ends = self.axes.transAxes.transform([[0, 0], [1, 0]])
2038:         length = ((ends[1][0] - ends[0][0]) / self.axes.figure.dpi) * 72.0
2039:         tick = self._get_tick(True)
2040:         # There is a heuristic here that the aspect ratio of tick text
2041:         # is no more than 3:1
2042:         size = tick.label1.get_size() * 3
2043:         if size > 0:
2044:             return int(np.floor(length / size))
2045:         else:
2046:             return 2**31 - 1
2047: 
2048: 
2049: class YAxis(Axis):
2050:     __name__ = 'yaxis'
2051:     axis_name = 'y'
2052: 
2053:     def contains(self, mouseevent):
2054:         '''Test whether the mouse event occurred in the y axis.
2055: 
2056:         Returns *True* | *False*
2057:         '''
2058:         if callable(self._contains):
2059:             return self._contains(self, mouseevent)
2060: 
2061:         x, y = mouseevent.x, mouseevent.y
2062:         try:
2063:             trans = self.axes.transAxes.inverted()
2064:             xaxes, yaxes = trans.transform_point((x, y))
2065:         except ValueError:
2066:             return False, {}
2067:         l, b = self.axes.transAxes.transform_point((0, 0))
2068:         r, t = self.axes.transAxes.transform_point((1, 1))
2069:         inaxis = yaxes >= 0 and yaxes <= 1 and (
2070:             (x < l and x > l - self.pickradius) or
2071:             (x > r and x < r + self.pickradius))
2072:         return inaxis, {}
2073: 
2074:     def _get_tick(self, major):
2075:         if major:
2076:             tick_kw = self._major_tick_kw
2077:         else:
2078:             tick_kw = self._minor_tick_kw
2079:         return YTick(self.axes, 0, '', major=major, **tick_kw)
2080: 
2081:     def _get_label(self):
2082:         # x in display coords (updated by _update_label_position)
2083:         # y in axes coords
2084:         label = mtext.Text(x=0, y=0.5,
2085:                            # todo: get the label position
2086:                            fontproperties=font_manager.FontProperties(
2087:                                size=rcParams['axes.labelsize'],
2088:                                weight=rcParams['axes.labelweight']),
2089:                            color=rcParams['axes.labelcolor'],
2090:                            verticalalignment='bottom',
2091:                            horizontalalignment='center',
2092:                            rotation='vertical',
2093:                            rotation_mode='anchor')
2094:         label.set_transform(mtransforms.blended_transform_factory(
2095:             mtransforms.IdentityTransform(), self.axes.transAxes))
2096: 
2097:         self._set_artist_props(label)
2098:         self.label_position = 'left'
2099:         return label
2100: 
2101:     def _get_offset_text(self):
2102:         # x in display coords, y in axes coords (to be updated at draw time)
2103:         offsetText = mtext.Text(x=0, y=0.5,
2104:                                 fontproperties=font_manager.FontProperties(
2105:                                     size=rcParams['ytick.labelsize']
2106:                                 ),
2107:                                 color=rcParams['ytick.color'],
2108:                                 verticalalignment='baseline',
2109:                                 horizontalalignment='left')
2110:         offsetText.set_transform(mtransforms.blended_transform_factory(
2111:             self.axes.transAxes, mtransforms.IdentityTransform())
2112:         )
2113:         self._set_artist_props(offsetText)
2114:         self.offset_text_position = 'left'
2115:         return offsetText
2116: 
2117:     def _get_pixel_distance_along_axis(self, where, perturb):
2118:         '''
2119:         Returns the amount, in data coordinates, that a single pixel
2120:         corresponds to in the locality given by *where*, which is also given
2121:         in data coordinates, and is a y coordinate.
2122: 
2123:         *perturb* is the amount to perturb the pixel.  Usually +0.5 or -0.5.
2124: 
2125:         Implementing this routine for an axis is optional; if present, it will
2126:         ensure that no ticks are lost due to round-off at the extreme ends of
2127:         an axis.
2128:         '''
2129: 
2130:         #
2131:         # first figure out the pixel location of the "where" point.  We use
2132:         # 1e-10 for the x point, so that we remain compatible with log axes.
2133: 
2134:         # transformation from data coords to display coords
2135:         trans = self.axes.transData
2136:         # transformation from display coords to data coords
2137:         transinv = trans.inverted()
2138:         pix = trans.transform_point((1e-10, where))
2139:         # perturb the pixel
2140:         ptp = transinv.transform_point((pix[0], pix[1] + perturb))
2141:         dy = abs(ptp[1] - where)
2142:         return dy
2143: 
2144:     def set_label_position(self, position):
2145:         '''
2146:         Set the label position (left or right)
2147: 
2148:         ACCEPTS: [ 'left' | 'right' ]
2149:         '''
2150:         self.label.set_rotation_mode('anchor')
2151:         self.label.set_horizontalalignment('center')
2152:         if position == 'left':
2153:             self.label.set_verticalalignment('bottom')
2154:         elif position == 'right':
2155:             self.label.set_verticalalignment('top')
2156:         else:
2157:             msg = "Position accepts only [ 'left' | 'right' ]"
2158:             raise ValueError(msg)
2159:         self.label_position = position
2160:         self.stale = True
2161: 
2162:     def _update_label_position(self, bboxes, bboxes2):
2163:         '''
2164:         Update the label position based on the bounding box enclosing
2165:         all the ticklabels and axis spine
2166:         '''
2167:         if not self._autolabelpos:
2168:             return
2169:         x, y = self.label.get_position()
2170:         if self.label_position == 'left':
2171:             try:
2172:                 spine = self.axes.spines['left']
2173:                 spinebbox = spine.get_transform().transform_path(
2174:                     spine.get_path()).get_extents()
2175:             except KeyError:
2176:                 # use axes if spine doesn't exist
2177:                 spinebbox = self.axes.bbox
2178:             bbox = mtransforms.Bbox.union(bboxes + [spinebbox])
2179:             left = bbox.x0
2180: 
2181:             self.label.set_position(
2182:                 (left - self.labelpad * self.figure.dpi / 72.0, y)
2183:             )
2184: 
2185:         else:
2186:             try:
2187:                 spine = self.axes.spines['right']
2188:                 spinebbox = spine.get_transform().transform_path(
2189:                     spine.get_path()).get_extents()
2190:             except KeyError:
2191:                 # use axes if spine doesn't exist
2192:                 spinebbox = self.axes.bbox
2193:             bbox = mtransforms.Bbox.union(bboxes2 + [spinebbox])
2194:             right = bbox.x1
2195: 
2196:             self.label.set_position(
2197:                 (right + self.labelpad * self.figure.dpi / 72.0, y)
2198:             )
2199: 
2200:     def _update_offset_text_position(self, bboxes, bboxes2):
2201:         '''
2202:         Update the offset_text position based on the sequence of bounding
2203:         boxes of all the ticklabels
2204:         '''
2205:         x, y = self.offsetText.get_position()
2206:         top = self.axes.bbox.ymax
2207:         self.offsetText.set_position(
2208:             (x, top + self.OFFSETTEXTPAD * self.figure.dpi / 72.0)
2209:         )
2210: 
2211:     def set_offset_position(self, position):
2212:         x, y = self.offsetText.get_position()
2213:         if position == 'left':
2214:             x = 0
2215:         elif position == 'right':
2216:             x = 1
2217:         else:
2218:             msg = "Position accepts only [ 'left' | 'right' ]"
2219:             raise ValueError(msg)
2220: 
2221:         self.offsetText.set_ha(position)
2222:         self.offsetText.set_position((x, y))
2223:         self.stale = True
2224: 
2225:     def get_text_widths(self, renderer):
2226:         bbox, bbox2 = self.get_ticklabel_extents(renderer)
2227:         # MGDTODO: Need a better way to get the pad
2228:         padPixels = self.majorTicks[0].get_pad_pixels()
2229: 
2230:         left = 0.0
2231:         if bbox.width:
2232:             left += bbox.width + padPixels
2233:         right = 0.0
2234:         if bbox2.width:
2235:             right += bbox2.width + padPixels
2236: 
2237:         if self.get_label_position() == 'left':
2238:             left += self.label.get_window_extent(renderer).width + padPixels
2239:         else:
2240:             right += self.label.get_window_extent(renderer).width + padPixels
2241:         return left, right
2242: 
2243:     def set_ticks_position(self, position):
2244:         '''
2245:         Set the ticks position (left, right, both, default or none)
2246:         'both' sets the ticks to appear on both positions, but does not
2247:         change the tick labels.  'default' resets the tick positions to
2248:         the default: ticks on both positions, labels at left.  'none'
2249:         can be used if you don't want any ticks. 'none' and 'both'
2250:         affect only the ticks, not the labels.
2251: 
2252:         ACCEPTS: [ 'left' | 'right' | 'both' | 'default' | 'none' ]
2253:         '''
2254:         if position == 'right':
2255:             self.set_tick_params(which='both', right=True, labelright=True,
2256:                                  left=False, labelleft=False)
2257:             self.set_offset_position(position)
2258:         elif position == 'left':
2259:             self.set_tick_params(which='both', right=False, labelright=False,
2260:                                  left=True, labelleft=True)
2261:             self.set_offset_position(position)
2262:         elif position == 'both':
2263:             self.set_tick_params(which='both', right=True,
2264:                                  left=True)
2265:         elif position == 'none':
2266:             self.set_tick_params(which='both', right=False,
2267:                                  left=False)
2268:         elif position == 'default':
2269:             self.set_tick_params(which='both', right=True, labelright=False,
2270:                                  left=True, labelleft=True)
2271:         else:
2272:             raise ValueError("invalid position: %s" % position)
2273:         self.stale = True
2274: 
2275:     def tick_right(self):
2276:         'use ticks only on right'
2277:         self.set_ticks_position('right')
2278: 
2279:     def tick_left(self):
2280:         'use ticks only on left'
2281:         self.set_ticks_position('left')
2282: 
2283:     def get_ticks_position(self):
2284:         '''
2285:         Return the ticks position (left, right, both or unknown)
2286:         '''
2287:         majt = self.majorTicks[0]
2288:         mT = self.minorTicks[0]
2289: 
2290:         majorRight = ((not majt.tick1On) and majt.tick2On and
2291:                       (not majt.label1On) and majt.label2On)
2292:         minorRight = ((not mT.tick1On) and mT.tick2On and
2293:                       (not mT.label1On) and mT.label2On)
2294:         if majorRight and minorRight:
2295:             return 'right'
2296: 
2297:         majorLeft = (majt.tick1On and (not majt.tick2On) and
2298:                      majt.label1On and (not majt.label2On))
2299:         minorLeft = (mT.tick1On and (not mT.tick2On) and
2300:                      mT.label1On and (not mT.label2On))
2301:         if majorLeft and minorLeft:
2302:             return 'left'
2303: 
2304:         majorDefault = (majt.tick1On and majt.tick2On and
2305:                         majt.label1On and (not majt.label2On))
2306:         minorDefault = (mT.tick1On and mT.tick2On and
2307:                         mT.label1On and (not mT.label2On))
2308:         if majorDefault and minorDefault:
2309:             return 'default'
2310: 
2311:         return 'unknown'
2312: 
2313:     def get_view_interval(self):
2314:         'return the Interval instance for this axis view limits'
2315:         return self.axes.viewLim.intervaly
2316: 
2317:     def set_view_interval(self, vmin, vmax, ignore=False):
2318:         '''
2319:         If *ignore* is *False*, the order of vmin, vmax
2320:         does not matter; the original axis orientation will
2321:         be preserved. In addition, the view limits can be
2322:         expanded, but will not be reduced.  This method is
2323:         for mpl internal use; for normal use, see
2324:         :meth:`~matplotlib.axes.Axes.set_ylim`.
2325: 
2326:         '''
2327:         if ignore:
2328:             self.axes.viewLim.intervaly = vmin, vmax
2329:         else:
2330:             Vmin, Vmax = self.get_view_interval()
2331:             if Vmin < Vmax:
2332:                 self.axes.viewLim.intervaly = (min(vmin, vmax, Vmin),
2333:                                                max(vmin, vmax, Vmax))
2334:             else:
2335:                 self.axes.viewLim.intervaly = (max(vmin, vmax, Vmin),
2336:                                                min(vmin, vmax, Vmax))
2337:         self.stale = True
2338: 
2339:     def get_minpos(self):
2340:         return self.axes.dataLim.minposy
2341: 
2342:     def get_data_interval(self):
2343:         'return the Interval instance for this axis data limits'
2344:         return self.axes.dataLim.intervaly
2345: 
2346:     def set_data_interval(self, vmin, vmax, ignore=False):
2347:         'set the axis data limits'
2348:         if ignore:
2349:             self.axes.dataLim.intervaly = vmin, vmax
2350:         else:
2351:             Vmin, Vmax = self.get_data_interval()
2352:             self.axes.dataLim.intervaly = min(vmin, Vmin), max(vmax, Vmax)
2353:         self.stale = True
2354: 
2355:     def set_default_intervals(self):
2356:         'set the default limits for the axis interval if they are not mutated'
2357:         ymin, ymax = 0., 1.
2358:         dataMutated = self.axes.dataLim.mutatedy()
2359:         viewMutated = self.axes.viewLim.mutatedy()
2360:         if not dataMutated or not viewMutated:
2361:             if self.converter is not None:
2362:                 info = self.converter.axisinfo(self.units, self)
2363:                 if info.default_limits is not None:
2364:                     valmin, valmax = info.default_limits
2365:                     ymin = self.converter.convert(valmin, self.units, self)
2366:                     ymax = self.converter.convert(valmax, self.units, self)
2367:             if not dataMutated:
2368:                 self.axes.dataLim.intervaly = ymin, ymax
2369:             if not viewMutated:
2370:                 self.axes.viewLim.intervaly = ymin, ymax
2371:         self.stale = True
2372: 
2373:     def get_tick_space(self):
2374:         ends = self.axes.transAxes.transform([[0, 0], [0, 1]])
2375:         length = ((ends[1][1] - ends[0][1]) / self.axes.figure.dpi) * 72.0
2376:         tick = self._get_tick(True)
2377:         # Having a spacing of at least 2 just looks good.
2378:         size = tick.label1.get_size() * 2.0
2379:         if size > 0:
2380:             return int(np.floor(length / size))
2381:         else:
2382:             return 2**31 - 1
2383: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_7057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3, (-1)), 'unicode', u'\nClasses for the ticks and x and y axis\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import six' statement (line 7)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7058 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six')

if (type(import_7058) is not StypyTypeError):

    if (import_7058 != 'pyd_module'):
        __import__(import_7058)
        sys_modules_7059 = sys.modules[import_7058]
        import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six', sys_modules_7059.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 7)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7, 0), 'six', import_7058)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'from matplotlib import rcParams' statement (line 9)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7060 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'matplotlib')

if (type(import_7060) is not StypyTypeError):

    if (import_7060 != 'pyd_module'):
        __import__(import_7060)
        sys_modules_7061 = sys.modules[import_7060]
        import_from_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'matplotlib', sys_modules_7061.module_type_store, module_type_store, ['rcParams'])
        nest_module(stypy.reporting.localization.Localization(__file__, 9, 0), __file__, sys_modules_7061, sys_modules_7061.module_type_store, module_type_store)
    else:
        from matplotlib import rcParams

        import_from_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'matplotlib', None, module_type_store, ['rcParams'], [rcParams])

else:
    # Assigning a type to the variable 'matplotlib' (line 9)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 9, 0), 'matplotlib', import_7060)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import matplotlib.artist' statement (line 10)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7062 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'matplotlib.artist')

if (type(import_7062) is not StypyTypeError):

    if (import_7062 != 'pyd_module'):
        __import__(import_7062)
        sys_modules_7063 = sys.modules[import_7062]
        import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'artist', sys_modules_7063.module_type_store, module_type_store)
    else:
        import matplotlib.artist as artist

        import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'artist', matplotlib.artist, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 10)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 10, 0), 'matplotlib.artist', import_7062)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'from matplotlib.artist import allow_rasterization' statement (line 11)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7064 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'matplotlib.artist')

if (type(import_7064) is not StypyTypeError):

    if (import_7064 != 'pyd_module'):
        __import__(import_7064)
        sys_modules_7065 = sys.modules[import_7064]
        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'matplotlib.artist', sys_modules_7065.module_type_store, module_type_store, ['allow_rasterization'])
        nest_module(stypy.reporting.localization.Localization(__file__, 11, 0), __file__, sys_modules_7065, sys_modules_7065.module_type_store, module_type_store)
    else:
        from matplotlib.artist import allow_rasterization

        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'matplotlib.artist', None, module_type_store, ['allow_rasterization'], [allow_rasterization])

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 11)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'matplotlib.artist', import_7064)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'import matplotlib.cbook' statement (line 12)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7066 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'matplotlib.cbook')

if (type(import_7066) is not StypyTypeError):

    if (import_7066 != 'pyd_module'):
        __import__(import_7066)
        sys_modules_7067 = sys.modules[import_7066]
        import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'cbook', sys_modules_7067.module_type_store, module_type_store)
    else:
        import matplotlib.cbook as cbook

        import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'cbook', matplotlib.cbook, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'matplotlib.cbook', import_7066)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'from matplotlib.cbook import _string_to_bool' statement (line 13)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7068 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'matplotlib.cbook')

if (type(import_7068) is not StypyTypeError):

    if (import_7068 != 'pyd_module'):
        __import__(import_7068)
        sys_modules_7069 = sys.modules[import_7068]
        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'matplotlib.cbook', sys_modules_7069.module_type_store, module_type_store, ['_string_to_bool'])
        nest_module(stypy.reporting.localization.Localization(__file__, 13, 0), __file__, sys_modules_7069, sys_modules_7069.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import _string_to_bool

        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'matplotlib.cbook', None, module_type_store, ['_string_to_bool'], [_string_to_bool])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 13)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'matplotlib.cbook', import_7068)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'import matplotlib.font_manager' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7070 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'matplotlib.font_manager')

if (type(import_7070) is not StypyTypeError):

    if (import_7070 != 'pyd_module'):
        __import__(import_7070)
        sys_modules_7071 = sys.modules[import_7070]
        import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'font_manager', sys_modules_7071.module_type_store, module_type_store)
    else:
        import matplotlib.font_manager as font_manager

        import_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'font_manager', matplotlib.font_manager, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.font_manager' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'matplotlib.font_manager', import_7070)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'import matplotlib.lines' statement (line 15)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7072 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'matplotlib.lines')

if (type(import_7072) is not StypyTypeError):

    if (import_7072 != 'pyd_module'):
        __import__(import_7072)
        sys_modules_7073 = sys.modules[import_7072]
        import_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'mlines', sys_modules_7073.module_type_store, module_type_store)
    else:
        import matplotlib.lines as mlines

        import_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'mlines', matplotlib.lines, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.lines' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'matplotlib.lines', import_7072)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'import matplotlib.patches' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7074 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib.patches')

if (type(import_7074) is not StypyTypeError):

    if (import_7074 != 'pyd_module'):
        __import__(import_7074)
        sys_modules_7075 = sys.modules[import_7074]
        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'mpatches', sys_modules_7075.module_type_store, module_type_store)
    else:
        import matplotlib.patches as mpatches

        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'mpatches', matplotlib.patches, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.patches' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib.patches', import_7074)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'import matplotlib.scale' statement (line 17)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7076 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'matplotlib.scale')

if (type(import_7076) is not StypyTypeError):

    if (import_7076 != 'pyd_module'):
        __import__(import_7076)
        sys_modules_7077 = sys.modules[import_7076]
        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'mscale', sys_modules_7077.module_type_store, module_type_store)
    else:
        import matplotlib.scale as mscale

        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'mscale', matplotlib.scale, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.scale' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'matplotlib.scale', import_7076)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'import matplotlib.text' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7078 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib.text')

if (type(import_7078) is not StypyTypeError):

    if (import_7078 != 'pyd_module'):
        __import__(import_7078)
        sys_modules_7079 = sys.modules[import_7078]
        import_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'mtext', sys_modules_7079.module_type_store, module_type_store)
    else:
        import matplotlib.text as mtext

        import_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'mtext', matplotlib.text, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.text' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib.text', import_7078)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'import matplotlib.ticker' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7080 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.ticker')

if (type(import_7080) is not StypyTypeError):

    if (import_7080 != 'pyd_module'):
        __import__(import_7080)
        sys_modules_7081 = sys.modules[import_7080]
        import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'mticker', sys_modules_7081.module_type_store, module_type_store)
    else:
        import matplotlib.ticker as mticker

        import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'mticker', matplotlib.ticker, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.ticker' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.ticker', import_7080)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'import matplotlib.transforms' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7082 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.transforms')

if (type(import_7082) is not StypyTypeError):

    if (import_7082 != 'pyd_module'):
        __import__(import_7082)
        sys_modules_7083 = sys.modules[import_7082]
        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'mtransforms', sys_modules_7083.module_type_store, module_type_store)
    else:
        import matplotlib.transforms as mtransforms

        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'mtransforms', matplotlib.transforms, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.transforms', import_7082)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'import matplotlib.units' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7084 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.units')

if (type(import_7084) is not StypyTypeError):

    if (import_7084 != 'pyd_module'):
        __import__(import_7084)
        sys_modules_7085 = sys.modules[import_7084]
        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'munits', sys_modules_7085.module_type_store, module_type_store)
    else:
        import matplotlib.units as munits

        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'munits', matplotlib.units, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.units' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.units', import_7084)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'import numpy' statement (line 22)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_7086 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'numpy')

if (type(import_7086) is not StypyTypeError):

    if (import_7086 != 'pyd_module'):
        __import__(import_7086)
        sys_modules_7087 = sys.modules[import_7086]
        import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'np', sys_modules_7087.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 22)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'numpy', import_7086)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'import warnings' statement (line 23)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'warnings', warnings, module_type_store)


# Assigning a Num to a Name (line 25):

# Assigning a Num to a Name (line 25):
int_7088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 25, 31), 'int')
# Assigning a type to the variable 'GRIDLINE_INTERPOLATION_STEPS' (line 25)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'GRIDLINE_INTERPOLATION_STEPS', int_7088)
# Declaration of the 'Tick' class
# Getting the type of 'artist' (line 28)
artist_7089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 28, 11), 'artist')
# Obtaining the member 'Artist' of a type (line 28)
Artist_7090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 28, 11), artist_7089, 'Artist')

class Tick(Artist_7090, ):
    unicode_7091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 67, (-1)), 'unicode', u'\n    Abstract base class for the axis ticks, grid lines and labels\n\n    1 refers to the bottom of the plot for xticks and the left for yticks\n    2 refers to the top of the plot for xticks and the right for yticks\n\n    Publicly accessible attributes:\n\n      :attr:`tick1line`\n          a Line2D instance\n\n      :attr:`tick2line`\n          a Line2D instance\n\n      :attr:`gridline`\n          a Line2D instance\n\n      :attr:`label1`\n          a Text instance\n\n      :attr:`label2`\n          a Text instance\n\n      :attr:`gridOn`\n          a boolean which determines whether to draw the tickline\n\n      :attr:`tick1On`\n          a boolean which determines whether to draw the 1st tickline\n\n      :attr:`tick2On`\n          a boolean which determines whether to draw the 2nd tickline\n\n      :attr:`label1On`\n          a boolean which determines whether to draw tick label\n\n      :attr:`label2On`\n          a boolean which determines whether to draw tick label\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 69)
        None_7092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 69, 22), 'None')
        # Getting the type of 'None' (line 70)
        None_7093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 70, 23), 'None')
        # Getting the type of 'None' (line 71)
        None_7094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 71, 23), 'None')
        # Getting the type of 'None' (line 72)
        None_7095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 25), 'None')
        # Getting the type of 'None' (line 73)
        None_7096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 73, 21), 'None')
        # Getting the type of 'None' (line 74)
        None_7097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 74, 27), 'None')
        # Getting the type of 'None' (line 75)
        None_7098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 28), 'None')
        # Getting the type of 'None' (line 76)
        None_7099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 24), 'None')
        # Getting the type of 'None' (line 77)
        None_7100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 24), 'None')
        # Getting the type of 'True' (line 79)
        True_7101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 79, 25), 'True')
        # Getting the type of 'True' (line 80)
        True_7102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 25), 'True')
        # Getting the type of 'True' (line 81)
        True_7103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 26), 'True')
        # Getting the type of 'False' (line 82)
        False_7104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 26), 'False')
        # Getting the type of 'True' (line 83)
        True_7105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 23), 'True')
        int_7106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 31), 'int')
        defaults = [None_7092, None_7093, None_7094, None_7095, None_7096, None_7097, None_7098, None_7099, None_7100, True_7101, True_7102, True_7103, False_7104, True_7105, int_7106]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 68, 4, False)
        # Assigning a type to the variable 'self' (line 69)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.__init__', ['axes', 'loc', 'label', 'size', 'width', 'color', 'tickdir', 'pad', 'labelsize', 'labelcolor', 'zorder', 'gridOn', 'tick1On', 'tick2On', 'label1On', 'label2On', 'major', 'labelrotation'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['axes', 'loc', 'label', 'size', 'width', 'color', 'tickdir', 'pad', 'labelsize', 'labelcolor', 'zorder', 'gridOn', 'tick1On', 'tick2On', 'label1On', 'label2On', 'major', 'labelrotation'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_7107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, (-1)), 'unicode', u'\n        bbox is the Bound2D bounding box in display coords of the Axes\n        loc is the tick location in data coords\n        size is the tick size in points\n        ')
        
        # Call to __init__(...): (line 91)
        # Processing the call arguments (line 91)
        # Getting the type of 'self' (line 91)
        self_7111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 31), 'self', False)
        # Processing the call keyword arguments (line 91)
        kwargs_7112 = {}
        # Getting the type of 'artist' (line 91)
        artist_7108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 8), 'artist', False)
        # Obtaining the member 'Artist' of a type (line 91)
        Artist_7109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 8), artist_7108, 'Artist')
        # Obtaining the member '__init__' of a type (line 91)
        init___7110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 8), Artist_7109, '__init__')
        # Calling __init__(args, kwargs) (line 91)
        init___call_result_7113 = invoke(stypy.reporting.localization.Localization(__file__, 91, 8), init___7110, *[self_7111], **kwargs_7112)
        
        
        # Type idiom detected: calculating its left and rigth part (line 93)
        # Getting the type of 'gridOn' (line 93)
        gridOn_7114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 11), 'gridOn')
        # Getting the type of 'None' (line 93)
        None_7115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 21), 'None')
        
        (may_be_7116, more_types_in_union_7117) = may_be_none(gridOn_7114, None_7115)

        if may_be_7116:

            if more_types_in_union_7117:
                # Runtime conditional SSA (line 93)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Evaluating a boolean operation
            # Getting the type of 'major' (line 94)
            major_7118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 15), 'major')
            
            
            # Obtaining the type of the subscript
            unicode_7119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 35), 'unicode', u'axes.grid.which')
            # Getting the type of 'rcParams' (line 94)
            rcParams_7120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 26), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 94)
            getitem___7121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 26), rcParams_7120, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 94)
            subscript_call_result_7122 = invoke(stypy.reporting.localization.Localization(__file__, 94, 26), getitem___7121, unicode_7119)
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 94)
            tuple_7123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 58), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 94)
            # Adding element type (line 94)
            unicode_7124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 58), 'unicode', u'both')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 94, 58), tuple_7123, unicode_7124)
            # Adding element type (line 94)
            unicode_7125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 66), 'unicode', u'major')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 94, 58), tuple_7123, unicode_7125)
            
            # Applying the binary operator 'in' (line 94)
            result_contains_7126 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 26), 'in', subscript_call_result_7122, tuple_7123)
            
            # Applying the binary operator 'and' (line 94)
            result_and_keyword_7127 = python_operator(stypy.reporting.localization.Localization(__file__, 94, 15), 'and', major_7118, result_contains_7126)
            
            # Testing the type of an if condition (line 94)
            if_condition_7128 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 94, 12), result_and_keyword_7127)
            # Assigning a type to the variable 'if_condition_7128' (line 94)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 12), 'if_condition_7128', if_condition_7128)
            # SSA begins for if statement (line 94)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 95):
            
            # Assigning a Subscript to a Name (line 95):
            
            # Obtaining the type of the subscript
            unicode_7129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 34), 'unicode', u'axes.grid')
            # Getting the type of 'rcParams' (line 95)
            rcParams_7130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 25), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 95)
            getitem___7131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 25), rcParams_7130, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 95)
            subscript_call_result_7132 = invoke(stypy.reporting.localization.Localization(__file__, 95, 25), getitem___7131, unicode_7129)
            
            # Assigning a type to the variable 'gridOn' (line 95)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 16), 'gridOn', subscript_call_result_7132)
            # SSA branch for the else part of an if statement (line 94)
            module_type_store.open_ssa_branch('else')
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'major' (line 96)
            major_7133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 22), 'major')
            # Applying the 'not' unary operator (line 96)
            result_not__7134 = python_operator(stypy.reporting.localization.Localization(__file__, 96, 18), 'not', major_7133)
            
            
            
            # Obtaining the type of the subscript
            unicode_7135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 43), 'unicode', u'axes.grid.which')
            # Getting the type of 'rcParams' (line 96)
            rcParams_7136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 34), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 96)
            getitem___7137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 34), rcParams_7136, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 96)
            subscript_call_result_7138 = invoke(stypy.reporting.localization.Localization(__file__, 96, 34), getitem___7137, unicode_7135)
            
            
            # Obtaining an instance of the builtin type 'tuple' (line 97)
            tuple_7139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 38), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 97)
            # Adding element type (line 97)
            unicode_7140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 38), 'unicode', u'both')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 38), tuple_7139, unicode_7140)
            # Adding element type (line 97)
            unicode_7141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 46), 'unicode', u'minor')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 97, 38), tuple_7139, unicode_7141)
            
            # Applying the binary operator 'in' (line 96)
            result_contains_7142 = python_operator(stypy.reporting.localization.Localization(__file__, 96, 34), 'in', subscript_call_result_7138, tuple_7139)
            
            # Applying the binary operator 'and' (line 96)
            result_and_keyword_7143 = python_operator(stypy.reporting.localization.Localization(__file__, 96, 17), 'and', result_not__7134, result_contains_7142)
            
            # Testing the type of an if condition (line 96)
            if_condition_7144 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 96, 17), result_and_keyword_7143)
            # Assigning a type to the variable 'if_condition_7144' (line 96)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 17), 'if_condition_7144', if_condition_7144)
            # SSA begins for if statement (line 96)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 98):
            
            # Assigning a Subscript to a Name (line 98):
            
            # Obtaining the type of the subscript
            unicode_7145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 98, 34), 'unicode', u'axes.grid')
            # Getting the type of 'rcParams' (line 98)
            rcParams_7146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 25), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 98)
            getitem___7147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 98, 25), rcParams_7146, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 98)
            subscript_call_result_7148 = invoke(stypy.reporting.localization.Localization(__file__, 98, 25), getitem___7147, unicode_7145)
            
            # Assigning a type to the variable 'gridOn' (line 98)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 16), 'gridOn', subscript_call_result_7148)
            # SSA branch for the else part of an if statement (line 96)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Name to a Name (line 100):
            
            # Assigning a Name to a Name (line 100):
            # Getting the type of 'False' (line 100)
            False_7149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 25), 'False')
            # Assigning a type to the variable 'gridOn' (line 100)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 100, 16), 'gridOn', False_7149)
            # SSA join for if statement (line 96)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 94)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_7117:
                # SSA join for if statement (line 93)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_figure(...): (line 102)
        # Processing the call arguments (line 102)
        # Getting the type of 'axes' (line 102)
        axes_7152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 24), 'axes', False)
        # Obtaining the member 'figure' of a type (line 102)
        figure_7153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 24), axes_7152, 'figure')
        # Processing the call keyword arguments (line 102)
        kwargs_7154 = {}
        # Getting the type of 'self' (line 102)
        self_7150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 8), 'self', False)
        # Obtaining the member 'set_figure' of a type (line 102)
        set_figure_7151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 8), self_7150, 'set_figure')
        # Calling set_figure(args, kwargs) (line 102)
        set_figure_call_result_7155 = invoke(stypy.reporting.localization.Localization(__file__, 102, 8), set_figure_7151, *[figure_7153], **kwargs_7154)
        
        
        # Assigning a Name to a Attribute (line 103):
        
        # Assigning a Name to a Attribute (line 103):
        # Getting the type of 'axes' (line 103)
        axes_7156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 20), 'axes')
        # Getting the type of 'self' (line 103)
        self_7157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 8), 'self')
        # Setting the type of the member 'axes' of a type (line 103)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 103, 8), self_7157, 'axes', axes_7156)
        
        # Assigning a Call to a Name (line 105):
        
        # Assigning a Call to a Name (line 105):
        
        # Call to lower(...): (line 105)
        # Processing the call keyword arguments (line 105)
        kwargs_7161 = {}
        # Getting the type of 'self' (line 105)
        self_7158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 15), 'self', False)
        # Obtaining the member '__name__' of a type (line 105)
        name___7159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 15), self_7158, '__name__')
        # Obtaining the member 'lower' of a type (line 105)
        lower_7160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 15), name___7159, 'lower')
        # Calling lower(args, kwargs) (line 105)
        lower_call_result_7162 = invoke(stypy.reporting.localization.Localization(__file__, 105, 15), lower_7160, *[], **kwargs_7161)
        
        # Assigning a type to the variable 'name' (line 105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 8), 'name', lower_call_result_7162)
        
        # Assigning a Name to a Attribute (line 106):
        
        # Assigning a Name to a Attribute (line 106):
        # Getting the type of 'name' (line 106)
        name_7163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 21), 'name')
        # Getting the type of 'self' (line 106)
        self_7164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 106, 8), 'self')
        # Setting the type of the member '_name' of a type (line 106)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 106, 8), self_7164, '_name', name_7163)
        
        # Assigning a Name to a Attribute (line 108):
        
        # Assigning a Name to a Attribute (line 108):
        # Getting the type of 'loc' (line 108)
        loc_7165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 20), 'loc')
        # Getting the type of 'self' (line 108)
        self_7166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 108, 8), 'self')
        # Setting the type of the member '_loc' of a type (line 108)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 108, 8), self_7166, '_loc', loc_7165)
        
        # Type idiom detected: calculating its left and rigth part (line 110)
        # Getting the type of 'size' (line 110)
        size_7167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 11), 'size')
        # Getting the type of 'None' (line 110)
        None_7168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 19), 'None')
        
        (may_be_7169, more_types_in_union_7170) = may_be_none(size_7167, None_7168)

        if may_be_7169:

            if more_types_in_union_7170:
                # Runtime conditional SSA (line 110)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'major' (line 111)
            major_7171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 15), 'major')
            # Testing the type of an if condition (line 111)
            if_condition_7172 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 111, 12), major_7171)
            # Assigning a type to the variable 'if_condition_7172' (line 111)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 111, 12), 'if_condition_7172', if_condition_7172)
            # SSA begins for if statement (line 111)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 112):
            
            # Assigning a Subscript to a Name (line 112):
            
            # Obtaining the type of the subscript
            unicode_7173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 112, 32), 'unicode', u'%s.major.size')
            # Getting the type of 'name' (line 112)
            name_7174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 50), 'name')
            # Applying the binary operator '%' (line 112)
            result_mod_7175 = python_operator(stypy.reporting.localization.Localization(__file__, 112, 32), '%', unicode_7173, name_7174)
            
            # Getting the type of 'rcParams' (line 112)
            rcParams_7176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 23), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 112)
            getitem___7177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 112, 23), rcParams_7176, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 112)
            subscript_call_result_7178 = invoke(stypy.reporting.localization.Localization(__file__, 112, 23), getitem___7177, result_mod_7175)
            
            # Assigning a type to the variable 'size' (line 112)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 16), 'size', subscript_call_result_7178)
            # SSA branch for the else part of an if statement (line 111)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Subscript to a Name (line 114):
            
            # Assigning a Subscript to a Name (line 114):
            
            # Obtaining the type of the subscript
            unicode_7179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 114, 32), 'unicode', u'%s.minor.size')
            # Getting the type of 'name' (line 114)
            name_7180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 50), 'name')
            # Applying the binary operator '%' (line 114)
            result_mod_7181 = python_operator(stypy.reporting.localization.Localization(__file__, 114, 32), '%', unicode_7179, name_7180)
            
            # Getting the type of 'rcParams' (line 114)
            rcParams_7182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 23), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 114)
            getitem___7183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 114, 23), rcParams_7182, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 114)
            subscript_call_result_7184 = invoke(stypy.reporting.localization.Localization(__file__, 114, 23), getitem___7183, result_mod_7181)
            
            # Assigning a type to the variable 'size' (line 114)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 114, 16), 'size', subscript_call_result_7184)
            # SSA join for if statement (line 111)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_7170:
                # SSA join for if statement (line 110)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 115):
        
        # Assigning a Name to a Attribute (line 115):
        # Getting the type of 'size' (line 115)
        size_7185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 21), 'size')
        # Getting the type of 'self' (line 115)
        self_7186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 8), 'self')
        # Setting the type of the member '_size' of a type (line 115)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 115, 8), self_7186, '_size', size_7185)
        
        # Type idiom detected: calculating its left and rigth part (line 117)
        # Getting the type of 'width' (line 117)
        width_7187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 11), 'width')
        # Getting the type of 'None' (line 117)
        None_7188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 20), 'None')
        
        (may_be_7189, more_types_in_union_7190) = may_be_none(width_7187, None_7188)

        if may_be_7189:

            if more_types_in_union_7190:
                # Runtime conditional SSA (line 117)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'major' (line 118)
            major_7191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 15), 'major')
            # Testing the type of an if condition (line 118)
            if_condition_7192 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 118, 12), major_7191)
            # Assigning a type to the variable 'if_condition_7192' (line 118)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 118, 12), 'if_condition_7192', if_condition_7192)
            # SSA begins for if statement (line 118)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 119):
            
            # Assigning a Subscript to a Name (line 119):
            
            # Obtaining the type of the subscript
            unicode_7193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 119, 33), 'unicode', u'%s.major.width')
            # Getting the type of 'name' (line 119)
            name_7194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 52), 'name')
            # Applying the binary operator '%' (line 119)
            result_mod_7195 = python_operator(stypy.reporting.localization.Localization(__file__, 119, 33), '%', unicode_7193, name_7194)
            
            # Getting the type of 'rcParams' (line 119)
            rcParams_7196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 24), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 119)
            getitem___7197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 119, 24), rcParams_7196, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 119)
            subscript_call_result_7198 = invoke(stypy.reporting.localization.Localization(__file__, 119, 24), getitem___7197, result_mod_7195)
            
            # Assigning a type to the variable 'width' (line 119)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 16), 'width', subscript_call_result_7198)
            # SSA branch for the else part of an if statement (line 118)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Subscript to a Name (line 121):
            
            # Assigning a Subscript to a Name (line 121):
            
            # Obtaining the type of the subscript
            unicode_7199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 121, 33), 'unicode', u'%s.minor.width')
            # Getting the type of 'name' (line 121)
            name_7200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 52), 'name')
            # Applying the binary operator '%' (line 121)
            result_mod_7201 = python_operator(stypy.reporting.localization.Localization(__file__, 121, 33), '%', unicode_7199, name_7200)
            
            # Getting the type of 'rcParams' (line 121)
            rcParams_7202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 24), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 121)
            getitem___7203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 121, 24), rcParams_7202, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 121)
            subscript_call_result_7204 = invoke(stypy.reporting.localization.Localization(__file__, 121, 24), getitem___7203, result_mod_7201)
            
            # Assigning a type to the variable 'width' (line 121)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 121, 16), 'width', subscript_call_result_7204)
            # SSA join for if statement (line 118)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_7190:
                # SSA join for if statement (line 117)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 122):
        
        # Assigning a Name to a Attribute (line 122):
        # Getting the type of 'width' (line 122)
        width_7205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 22), 'width')
        # Getting the type of 'self' (line 122)
        self_7206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 122, 8), 'self')
        # Setting the type of the member '_width' of a type (line 122)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 122, 8), self_7206, '_width', width_7205)
        
        # Type idiom detected: calculating its left and rigth part (line 124)
        # Getting the type of 'color' (line 124)
        color_7207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 11), 'color')
        # Getting the type of 'None' (line 124)
        None_7208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 124, 20), 'None')
        
        (may_be_7209, more_types_in_union_7210) = may_be_none(color_7207, None_7208)

        if may_be_7209:

            if more_types_in_union_7210:
                # Runtime conditional SSA (line 124)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 125):
            
            # Assigning a Subscript to a Name (line 125):
            
            # Obtaining the type of the subscript
            unicode_7211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 125, 29), 'unicode', u'%s.color')
            # Getting the type of 'name' (line 125)
            name_7212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 42), 'name')
            # Applying the binary operator '%' (line 125)
            result_mod_7213 = python_operator(stypy.reporting.localization.Localization(__file__, 125, 29), '%', unicode_7211, name_7212)
            
            # Getting the type of 'rcParams' (line 125)
            rcParams_7214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 125, 20), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 125)
            getitem___7215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 125, 20), rcParams_7214, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 125)
            subscript_call_result_7216 = invoke(stypy.reporting.localization.Localization(__file__, 125, 20), getitem___7215, result_mod_7213)
            
            # Assigning a type to the variable 'color' (line 125)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 125, 12), 'color', subscript_call_result_7216)

            if more_types_in_union_7210:
                # SSA join for if statement (line 124)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 126):
        
        # Assigning a Name to a Attribute (line 126):
        # Getting the type of 'color' (line 126)
        color_7217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 22), 'color')
        # Getting the type of 'self' (line 126)
        self_7218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 126, 8), 'self')
        # Setting the type of the member '_color' of a type (line 126)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 126, 8), self_7218, '_color', color_7217)
        
        # Type idiom detected: calculating its left and rigth part (line 128)
        # Getting the type of 'pad' (line 128)
        pad_7219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 11), 'pad')
        # Getting the type of 'None' (line 128)
        None_7220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 128, 18), 'None')
        
        (may_be_7221, more_types_in_union_7222) = may_be_none(pad_7219, None_7220)

        if may_be_7221:

            if more_types_in_union_7222:
                # Runtime conditional SSA (line 128)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'major' (line 129)
            major_7223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 15), 'major')
            # Testing the type of an if condition (line 129)
            if_condition_7224 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 129, 12), major_7223)
            # Assigning a type to the variable 'if_condition_7224' (line 129)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 12), 'if_condition_7224', if_condition_7224)
            # SSA begins for if statement (line 129)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 130):
            
            # Assigning a Subscript to a Name (line 130):
            
            # Obtaining the type of the subscript
            unicode_7225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 31), 'unicode', u'%s.major.pad')
            # Getting the type of 'name' (line 130)
            name_7226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 48), 'name')
            # Applying the binary operator '%' (line 130)
            result_mod_7227 = python_operator(stypy.reporting.localization.Localization(__file__, 130, 31), '%', unicode_7225, name_7226)
            
            # Getting the type of 'rcParams' (line 130)
            rcParams_7228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 22), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 130)
            getitem___7229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 22), rcParams_7228, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 130)
            subscript_call_result_7230 = invoke(stypy.reporting.localization.Localization(__file__, 130, 22), getitem___7229, result_mod_7227)
            
            # Assigning a type to the variable 'pad' (line 130)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 16), 'pad', subscript_call_result_7230)
            # SSA branch for the else part of an if statement (line 129)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Subscript to a Name (line 132):
            
            # Assigning a Subscript to a Name (line 132):
            
            # Obtaining the type of the subscript
            unicode_7231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 132, 31), 'unicode', u'%s.minor.pad')
            # Getting the type of 'name' (line 132)
            name_7232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 48), 'name')
            # Applying the binary operator '%' (line 132)
            result_mod_7233 = python_operator(stypy.reporting.localization.Localization(__file__, 132, 31), '%', unicode_7231, name_7232)
            
            # Getting the type of 'rcParams' (line 132)
            rcParams_7234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 22), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 132)
            getitem___7235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 132, 22), rcParams_7234, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 132)
            subscript_call_result_7236 = invoke(stypy.reporting.localization.Localization(__file__, 132, 22), getitem___7235, result_mod_7233)
            
            # Assigning a type to the variable 'pad' (line 132)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 132, 16), 'pad', subscript_call_result_7236)
            # SSA join for if statement (line 129)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_7222:
                # SSA join for if statement (line 128)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 133):
        
        # Assigning a Name to a Attribute (line 133):
        # Getting the type of 'pad' (line 133)
        pad_7237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 25), 'pad')
        # Getting the type of 'self' (line 133)
        self_7238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 8), 'self')
        # Setting the type of the member '_base_pad' of a type (line 133)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 133, 8), self_7238, '_base_pad', pad_7237)
        
        # Type idiom detected: calculating its left and rigth part (line 135)
        # Getting the type of 'labelcolor' (line 135)
        labelcolor_7239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 11), 'labelcolor')
        # Getting the type of 'None' (line 135)
        None_7240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 135, 25), 'None')
        
        (may_be_7241, more_types_in_union_7242) = may_be_none(labelcolor_7239, None_7240)

        if may_be_7241:

            if more_types_in_union_7242:
                # Runtime conditional SSA (line 135)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 136):
            
            # Assigning a Subscript to a Name (line 136):
            
            # Obtaining the type of the subscript
            unicode_7243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 136, 34), 'unicode', u'%s.color')
            # Getting the type of 'name' (line 136)
            name_7244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 47), 'name')
            # Applying the binary operator '%' (line 136)
            result_mod_7245 = python_operator(stypy.reporting.localization.Localization(__file__, 136, 34), '%', unicode_7243, name_7244)
            
            # Getting the type of 'rcParams' (line 136)
            rcParams_7246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 25), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 136)
            getitem___7247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 136, 25), rcParams_7246, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 136)
            subscript_call_result_7248 = invoke(stypy.reporting.localization.Localization(__file__, 136, 25), getitem___7247, result_mod_7245)
            
            # Assigning a type to the variable 'labelcolor' (line 136)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 12), 'labelcolor', subscript_call_result_7248)

            if more_types_in_union_7242:
                # SSA join for if statement (line 135)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 137):
        
        # Assigning a Name to a Attribute (line 137):
        # Getting the type of 'labelcolor' (line 137)
        labelcolor_7249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 27), 'labelcolor')
        # Getting the type of 'self' (line 137)
        self_7250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 8), 'self')
        # Setting the type of the member '_labelcolor' of a type (line 137)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 137, 8), self_7250, '_labelcolor', labelcolor_7249)
        
        # Type idiom detected: calculating its left and rigth part (line 139)
        # Getting the type of 'labelsize' (line 139)
        labelsize_7251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 11), 'labelsize')
        # Getting the type of 'None' (line 139)
        None_7252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 24), 'None')
        
        (may_be_7253, more_types_in_union_7254) = may_be_none(labelsize_7251, None_7252)

        if may_be_7253:

            if more_types_in_union_7254:
                # Runtime conditional SSA (line 139)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 140):
            
            # Assigning a Subscript to a Name (line 140):
            
            # Obtaining the type of the subscript
            unicode_7255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 33), 'unicode', u'%s.labelsize')
            # Getting the type of 'name' (line 140)
            name_7256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 50), 'name')
            # Applying the binary operator '%' (line 140)
            result_mod_7257 = python_operator(stypy.reporting.localization.Localization(__file__, 140, 33), '%', unicode_7255, name_7256)
            
            # Getting the type of 'rcParams' (line 140)
            rcParams_7258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 24), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 140)
            getitem___7259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 140, 24), rcParams_7258, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 140)
            subscript_call_result_7260 = invoke(stypy.reporting.localization.Localization(__file__, 140, 24), getitem___7259, result_mod_7257)
            
            # Assigning a type to the variable 'labelsize' (line 140)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 140, 12), 'labelsize', subscript_call_result_7260)

            if more_types_in_union_7254:
                # SSA join for if statement (line 139)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 141):
        
        # Assigning a Name to a Attribute (line 141):
        # Getting the type of 'labelsize' (line 141)
        labelsize_7261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 26), 'labelsize')
        # Getting the type of 'self' (line 141)
        self_7262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 141, 8), 'self')
        # Setting the type of the member '_labelsize' of a type (line 141)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 141, 8), self_7262, '_labelsize', labelsize_7261)
        
        # Call to _set_labelrotation(...): (line 143)
        # Processing the call arguments (line 143)
        # Getting the type of 'labelrotation' (line 143)
        labelrotation_7265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 32), 'labelrotation', False)
        # Processing the call keyword arguments (line 143)
        kwargs_7266 = {}
        # Getting the type of 'self' (line 143)
        self_7263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 8), 'self', False)
        # Obtaining the member '_set_labelrotation' of a type (line 143)
        _set_labelrotation_7264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 143, 8), self_7263, '_set_labelrotation')
        # Calling _set_labelrotation(args, kwargs) (line 143)
        _set_labelrotation_call_result_7267 = invoke(stypy.reporting.localization.Localization(__file__, 143, 8), _set_labelrotation_7264, *[labelrotation_7265], **kwargs_7266)
        
        
        # Type idiom detected: calculating its left and rigth part (line 145)
        # Getting the type of 'zorder' (line 145)
        zorder_7268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 11), 'zorder')
        # Getting the type of 'None' (line 145)
        None_7269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 21), 'None')
        
        (may_be_7270, more_types_in_union_7271) = may_be_none(zorder_7268, None_7269)

        if may_be_7270:

            if more_types_in_union_7271:
                # Runtime conditional SSA (line 145)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'major' (line 146)
            major_7272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 15), 'major')
            # Testing the type of an if condition (line 146)
            if_condition_7273 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 146, 12), major_7272)
            # Assigning a type to the variable 'if_condition_7273' (line 146)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 12), 'if_condition_7273', if_condition_7273)
            # SSA begins for if statement (line 146)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 147):
            
            # Assigning a BinOp to a Name (line 147):
            # Getting the type of 'mlines' (line 147)
            mlines_7274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 25), 'mlines')
            # Obtaining the member 'Line2D' of a type (line 147)
            Line2D_7275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 25), mlines_7274, 'Line2D')
            # Obtaining the member 'zorder' of a type (line 147)
            zorder_7276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 147, 25), Line2D_7275, 'zorder')
            float_7277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 48), 'float')
            # Applying the binary operator '+' (line 147)
            result_add_7278 = python_operator(stypy.reporting.localization.Localization(__file__, 147, 25), '+', zorder_7276, float_7277)
            
            # Assigning a type to the variable 'zorder' (line 147)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 16), 'zorder', result_add_7278)
            # SSA branch for the else part of an if statement (line 146)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Attribute to a Name (line 149):
            
            # Assigning a Attribute to a Name (line 149):
            # Getting the type of 'mlines' (line 149)
            mlines_7279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 25), 'mlines')
            # Obtaining the member 'Line2D' of a type (line 149)
            Line2D_7280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 25), mlines_7279, 'Line2D')
            # Obtaining the member 'zorder' of a type (line 149)
            zorder_7281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 25), Line2D_7280, 'zorder')
            # Assigning a type to the variable 'zorder' (line 149)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 149, 16), 'zorder', zorder_7281)
            # SSA join for if statement (line 146)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_7271:
                # SSA join for if statement (line 145)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 150):
        
        # Assigning a Name to a Attribute (line 150):
        # Getting the type of 'zorder' (line 150)
        zorder_7282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 23), 'zorder')
        # Getting the type of 'self' (line 150)
        self_7283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 8), 'self')
        # Setting the type of the member '_zorder' of a type (line 150)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 8), self_7283, '_zorder', zorder_7282)
        
        # Call to apply_tickdir(...): (line 152)
        # Processing the call arguments (line 152)
        # Getting the type of 'tickdir' (line 152)
        tickdir_7286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 27), 'tickdir', False)
        # Processing the call keyword arguments (line 152)
        kwargs_7287 = {}
        # Getting the type of 'self' (line 152)
        self_7284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 8), 'self', False)
        # Obtaining the member 'apply_tickdir' of a type (line 152)
        apply_tickdir_7285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 8), self_7284, 'apply_tickdir')
        # Calling apply_tickdir(args, kwargs) (line 152)
        apply_tickdir_call_result_7288 = invoke(stypy.reporting.localization.Localization(__file__, 152, 8), apply_tickdir_7285, *[tickdir_7286], **kwargs_7287)
        
        
        # Assigning a Call to a Attribute (line 154):
        
        # Assigning a Call to a Attribute (line 154):
        
        # Call to _get_tick1line(...): (line 154)
        # Processing the call keyword arguments (line 154)
        kwargs_7291 = {}
        # Getting the type of 'self' (line 154)
        self_7289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 25), 'self', False)
        # Obtaining the member '_get_tick1line' of a type (line 154)
        _get_tick1line_7290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 25), self_7289, '_get_tick1line')
        # Calling _get_tick1line(args, kwargs) (line 154)
        _get_tick1line_call_result_7292 = invoke(stypy.reporting.localization.Localization(__file__, 154, 25), _get_tick1line_7290, *[], **kwargs_7291)
        
        # Getting the type of 'self' (line 154)
        self_7293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 8), 'self')
        # Setting the type of the member 'tick1line' of a type (line 154)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 8), self_7293, 'tick1line', _get_tick1line_call_result_7292)
        
        # Assigning a Call to a Attribute (line 155):
        
        # Assigning a Call to a Attribute (line 155):
        
        # Call to _get_tick2line(...): (line 155)
        # Processing the call keyword arguments (line 155)
        kwargs_7296 = {}
        # Getting the type of 'self' (line 155)
        self_7294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 25), 'self', False)
        # Obtaining the member '_get_tick2line' of a type (line 155)
        _get_tick2line_7295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 25), self_7294, '_get_tick2line')
        # Calling _get_tick2line(args, kwargs) (line 155)
        _get_tick2line_call_result_7297 = invoke(stypy.reporting.localization.Localization(__file__, 155, 25), _get_tick2line_7295, *[], **kwargs_7296)
        
        # Getting the type of 'self' (line 155)
        self_7298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 8), 'self')
        # Setting the type of the member 'tick2line' of a type (line 155)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 8), self_7298, 'tick2line', _get_tick2line_call_result_7297)
        
        # Assigning a Call to a Attribute (line 156):
        
        # Assigning a Call to a Attribute (line 156):
        
        # Call to _get_gridline(...): (line 156)
        # Processing the call keyword arguments (line 156)
        kwargs_7301 = {}
        # Getting the type of 'self' (line 156)
        self_7299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 24), 'self', False)
        # Obtaining the member '_get_gridline' of a type (line 156)
        _get_gridline_7300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 24), self_7299, '_get_gridline')
        # Calling _get_gridline(args, kwargs) (line 156)
        _get_gridline_call_result_7302 = invoke(stypy.reporting.localization.Localization(__file__, 156, 24), _get_gridline_7300, *[], **kwargs_7301)
        
        # Getting the type of 'self' (line 156)
        self_7303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 8), 'self')
        # Setting the type of the member 'gridline' of a type (line 156)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 8), self_7303, 'gridline', _get_gridline_call_result_7302)
        
        # Assigning a Call to a Attribute (line 158):
        
        # Assigning a Call to a Attribute (line 158):
        
        # Call to _get_text1(...): (line 158)
        # Processing the call keyword arguments (line 158)
        kwargs_7306 = {}
        # Getting the type of 'self' (line 158)
        self_7304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 22), 'self', False)
        # Obtaining the member '_get_text1' of a type (line 158)
        _get_text1_7305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 22), self_7304, '_get_text1')
        # Calling _get_text1(args, kwargs) (line 158)
        _get_text1_call_result_7307 = invoke(stypy.reporting.localization.Localization(__file__, 158, 22), _get_text1_7305, *[], **kwargs_7306)
        
        # Getting the type of 'self' (line 158)
        self_7308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 8), 'self')
        # Setting the type of the member 'label1' of a type (line 158)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 8), self_7308, 'label1', _get_text1_call_result_7307)
        
        # Assigning a Attribute to a Attribute (line 159):
        
        # Assigning a Attribute to a Attribute (line 159):
        # Getting the type of 'self' (line 159)
        self_7309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 21), 'self')
        # Obtaining the member 'label1' of a type (line 159)
        label1_7310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 21), self_7309, 'label1')
        # Getting the type of 'self' (line 159)
        self_7311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'self')
        # Setting the type of the member 'label' of a type (line 159)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 8), self_7311, 'label', label1_7310)
        
        # Assigning a Call to a Attribute (line 160):
        
        # Assigning a Call to a Attribute (line 160):
        
        # Call to _get_text2(...): (line 160)
        # Processing the call keyword arguments (line 160)
        kwargs_7314 = {}
        # Getting the type of 'self' (line 160)
        self_7312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 22), 'self', False)
        # Obtaining the member '_get_text2' of a type (line 160)
        _get_text2_7313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 160, 22), self_7312, '_get_text2')
        # Calling _get_text2(args, kwargs) (line 160)
        _get_text2_call_result_7315 = invoke(stypy.reporting.localization.Localization(__file__, 160, 22), _get_text2_7313, *[], **kwargs_7314)
        
        # Getting the type of 'self' (line 160)
        self_7316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 160, 8), 'self')
        # Setting the type of the member 'label2' of a type (line 160)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 160, 8), self_7316, 'label2', _get_text2_call_result_7315)
        
        # Assigning a Name to a Attribute (line 162):
        
        # Assigning a Name to a Attribute (line 162):
        # Getting the type of 'gridOn' (line 162)
        gridOn_7317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 22), 'gridOn')
        # Getting the type of 'self' (line 162)
        self_7318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 8), 'self')
        # Setting the type of the member 'gridOn' of a type (line 162)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 8), self_7318, 'gridOn', gridOn_7317)
        
        # Assigning a Name to a Attribute (line 163):
        
        # Assigning a Name to a Attribute (line 163):
        # Getting the type of 'tick1On' (line 163)
        tick1On_7319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 23), 'tick1On')
        # Getting the type of 'self' (line 163)
        self_7320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 8), 'self')
        # Setting the type of the member 'tick1On' of a type (line 163)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 8), self_7320, 'tick1On', tick1On_7319)
        
        # Assigning a Name to a Attribute (line 164):
        
        # Assigning a Name to a Attribute (line 164):
        # Getting the type of 'tick2On' (line 164)
        tick2On_7321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 23), 'tick2On')
        # Getting the type of 'self' (line 164)
        self_7322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 8), 'self')
        # Setting the type of the member 'tick2On' of a type (line 164)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 8), self_7322, 'tick2On', tick2On_7321)
        
        # Assigning a Name to a Attribute (line 165):
        
        # Assigning a Name to a Attribute (line 165):
        # Getting the type of 'label1On' (line 165)
        label1On_7323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 24), 'label1On')
        # Getting the type of 'self' (line 165)
        self_7324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 8), 'self')
        # Setting the type of the member 'label1On' of a type (line 165)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 8), self_7324, 'label1On', label1On_7323)
        
        # Assigning a Name to a Attribute (line 166):
        
        # Assigning a Name to a Attribute (line 166):
        # Getting the type of 'label2On' (line 166)
        label2On_7325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 24), 'label2On')
        # Getting the type of 'self' (line 166)
        self_7326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 8), 'self')
        # Setting the type of the member 'label2On' of a type (line 166)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 8), self_7326, 'label2On', label2On_7325)
        
        # Call to update_position(...): (line 168)
        # Processing the call arguments (line 168)
        # Getting the type of 'loc' (line 168)
        loc_7329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 29), 'loc', False)
        # Processing the call keyword arguments (line 168)
        kwargs_7330 = {}
        # Getting the type of 'self' (line 168)
        self_7327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 8), 'self', False)
        # Obtaining the member 'update_position' of a type (line 168)
        update_position_7328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 8), self_7327, 'update_position')
        # Calling update_position(args, kwargs) (line 168)
        update_position_call_result_7331 = invoke(stypy.reporting.localization.Localization(__file__, 168, 8), update_position_7328, *[loc_7329], **kwargs_7330)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _set_labelrotation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_labelrotation'
        module_type_store = module_type_store.open_function_context('_set_labelrotation', 170, 4, False)
        # Assigning a type to the variable 'self' (line 171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick._set_labelrotation.__dict__.__setitem__('stypy_localization', localization)
        Tick._set_labelrotation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick._set_labelrotation.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick._set_labelrotation.__dict__.__setitem__('stypy_function_name', 'Tick._set_labelrotation')
        Tick._set_labelrotation.__dict__.__setitem__('stypy_param_names_list', ['labelrotation'])
        Tick._set_labelrotation.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick._set_labelrotation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick._set_labelrotation.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick._set_labelrotation.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick._set_labelrotation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick._set_labelrotation.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick._set_labelrotation', ['labelrotation'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_labelrotation', localization, ['labelrotation'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_labelrotation(...)' code ##################

        
        
        # Call to isinstance(...): (line 171)
        # Processing the call arguments (line 171)
        # Getting the type of 'labelrotation' (line 171)
        labelrotation_7333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 22), 'labelrotation', False)
        # Getting the type of 'six' (line 171)
        six_7334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 37), 'six', False)
        # Obtaining the member 'string_types' of a type (line 171)
        string_types_7335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 37), six_7334, 'string_types')
        # Processing the call keyword arguments (line 171)
        kwargs_7336 = {}
        # Getting the type of 'isinstance' (line 171)
        isinstance_7332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 171)
        isinstance_call_result_7337 = invoke(stypy.reporting.localization.Localization(__file__, 171, 11), isinstance_7332, *[labelrotation_7333, string_types_7335], **kwargs_7336)
        
        # Testing the type of an if condition (line 171)
        if_condition_7338 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 171, 8), isinstance_call_result_7337)
        # Assigning a type to the variable 'if_condition_7338' (line 171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 8), 'if_condition_7338', if_condition_7338)
        # SSA begins for if statement (line 171)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 172):
        
        # Assigning a Name to a Name (line 172):
        # Getting the type of 'labelrotation' (line 172)
        labelrotation_7339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 19), 'labelrotation')
        # Assigning a type to the variable 'mode' (line 172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 12), 'mode', labelrotation_7339)
        
        # Assigning a Num to a Name (line 173):
        
        # Assigning a Num to a Name (line 173):
        int_7340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 173, 20), 'int')
        # Assigning a type to the variable 'angle' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 12), 'angle', int_7340)
        # SSA branch for the else part of an if statement (line 171)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isinstance(...): (line 174)
        # Processing the call arguments (line 174)
        # Getting the type of 'labelrotation' (line 174)
        labelrotation_7342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 24), 'labelrotation', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 174)
        tuple_7343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 174, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 174)
        # Adding element type (line 174)
        # Getting the type of 'tuple' (line 174)
        tuple_7344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 40), 'tuple', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 174, 40), tuple_7343, tuple_7344)
        # Adding element type (line 174)
        # Getting the type of 'list' (line 174)
        list_7345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 47), 'list', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 174, 40), tuple_7343, list_7345)
        
        # Processing the call keyword arguments (line 174)
        kwargs_7346 = {}
        # Getting the type of 'isinstance' (line 174)
        isinstance_7341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 13), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 174)
        isinstance_call_result_7347 = invoke(stypy.reporting.localization.Localization(__file__, 174, 13), isinstance_7341, *[labelrotation_7342, tuple_7343], **kwargs_7346)
        
        # Testing the type of an if condition (line 174)
        if_condition_7348 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 174, 13), isinstance_call_result_7347)
        # Assigning a type to the variable 'if_condition_7348' (line 174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 174, 13), 'if_condition_7348', if_condition_7348)
        # SSA begins for if statement (line 174)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 175):
        
        # Assigning a Subscript to a Name (line 175):
        
        # Obtaining the type of the subscript
        int_7349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, 12), 'int')
        # Getting the type of 'labelrotation' (line 175)
        labelrotation_7350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 26), 'labelrotation')
        # Obtaining the member '__getitem__' of a type (line 175)
        getitem___7351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 12), labelrotation_7350, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 175)
        subscript_call_result_7352 = invoke(stypy.reporting.localization.Localization(__file__, 175, 12), getitem___7351, int_7349)
        
        # Assigning a type to the variable 'tuple_var_assignment_6958' (line 175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 12), 'tuple_var_assignment_6958', subscript_call_result_7352)
        
        # Assigning a Subscript to a Name (line 175):
        
        # Obtaining the type of the subscript
        int_7353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 175, 12), 'int')
        # Getting the type of 'labelrotation' (line 175)
        labelrotation_7354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 26), 'labelrotation')
        # Obtaining the member '__getitem__' of a type (line 175)
        getitem___7355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 12), labelrotation_7354, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 175)
        subscript_call_result_7356 = invoke(stypy.reporting.localization.Localization(__file__, 175, 12), getitem___7355, int_7353)
        
        # Assigning a type to the variable 'tuple_var_assignment_6959' (line 175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 12), 'tuple_var_assignment_6959', subscript_call_result_7356)
        
        # Assigning a Name to a Name (line 175):
        # Getting the type of 'tuple_var_assignment_6958' (line 175)
        tuple_var_assignment_6958_7357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 12), 'tuple_var_assignment_6958')
        # Assigning a type to the variable 'mode' (line 175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 12), 'mode', tuple_var_assignment_6958_7357)
        
        # Assigning a Name to a Name (line 175):
        # Getting the type of 'tuple_var_assignment_6959' (line 175)
        tuple_var_assignment_6959_7358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 12), 'tuple_var_assignment_6959')
        # Assigning a type to the variable 'angle' (line 175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 18), 'angle', tuple_var_assignment_6959_7358)
        # SSA branch for the else part of an if statement (line 174)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 177):
        
        # Assigning a Str to a Name (line 177):
        unicode_7359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 177, 19), 'unicode', u'default')
        # Assigning a type to the variable 'mode' (line 177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 12), 'mode', unicode_7359)
        
        # Assigning a Name to a Name (line 178):
        
        # Assigning a Name to a Name (line 178):
        # Getting the type of 'labelrotation' (line 178)
        labelrotation_7360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 20), 'labelrotation')
        # Assigning a type to the variable 'angle' (line 178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 178, 12), 'angle', labelrotation_7360)
        # SSA join for if statement (line 174)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 171)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'mode' (line 179)
        mode_7361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 11), 'mode')
        
        # Obtaining an instance of the builtin type 'tuple' (line 179)
        tuple_7362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 179)
        # Adding element type (line 179)
        unicode_7363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 24), 'unicode', u'auto')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 179, 24), tuple_7362, unicode_7363)
        # Adding element type (line 179)
        unicode_7364 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 179, 32), 'unicode', u'default')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 179, 24), tuple_7362, unicode_7364)
        
        # Applying the binary operator 'notin' (line 179)
        result_contains_7365 = python_operator(stypy.reporting.localization.Localization(__file__, 179, 11), 'notin', mode_7361, tuple_7362)
        
        # Testing the type of an if condition (line 179)
        if_condition_7366 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 179, 8), result_contains_7365)
        # Assigning a type to the variable 'if_condition_7366' (line 179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 179, 8), 'if_condition_7366', if_condition_7366)
        # SSA begins for if statement (line 179)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 180)
        # Processing the call arguments (line 180)
        
        # Call to format(...): (line 180)
        # Processing the call arguments (line 180)
        # Getting the type of 'mode' (line 181)
        mode_7370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 181, 56), 'mode', False)
        # Processing the call keyword arguments (line 180)
        kwargs_7371 = {}
        unicode_7368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 180, 29), 'unicode', u"Label rotation mode must be 'default' or 'auto', not '{}'.")
        # Obtaining the member 'format' of a type (line 180)
        format_7369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 180, 29), unicode_7368, 'format')
        # Calling format(args, kwargs) (line 180)
        format_call_result_7372 = invoke(stypy.reporting.localization.Localization(__file__, 180, 29), format_7369, *[mode_7370], **kwargs_7371)
        
        # Processing the call keyword arguments (line 180)
        kwargs_7373 = {}
        # Getting the type of 'ValueError' (line 180)
        ValueError_7367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 180)
        ValueError_call_result_7374 = invoke(stypy.reporting.localization.Localization(__file__, 180, 18), ValueError_7367, *[format_call_result_7372], **kwargs_7373)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 180, 12), ValueError_call_result_7374, 'raise parameter', BaseException)
        # SSA join for if statement (line 179)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Attribute (line 182):
        
        # Assigning a Tuple to a Attribute (line 182):
        
        # Obtaining an instance of the builtin type 'tuple' (line 182)
        tuple_7375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 182, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 182)
        # Adding element type (line 182)
        # Getting the type of 'mode' (line 182)
        mode_7376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 31), 'mode')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 182, 31), tuple_7375, mode_7376)
        # Adding element type (line 182)
        # Getting the type of 'angle' (line 182)
        angle_7377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 37), 'angle')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 182, 31), tuple_7375, angle_7377)
        
        # Getting the type of 'self' (line 182)
        self_7378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 8), 'self')
        # Setting the type of the member '_labelrotation' of a type (line 182)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 182, 8), self_7378, '_labelrotation', tuple_7375)
        
        # ################# End of '_set_labelrotation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_labelrotation' in the type store
        # Getting the type of 'stypy_return_type' (line 170)
        stypy_return_type_7379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7379)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_labelrotation'
        return stypy_return_type_7379


    @norecursion
    def apply_tickdir(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'apply_tickdir'
        module_type_store = module_type_store.open_function_context('apply_tickdir', 184, 4, False)
        # Assigning a type to the variable 'self' (line 185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.apply_tickdir.__dict__.__setitem__('stypy_localization', localization)
        Tick.apply_tickdir.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.apply_tickdir.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.apply_tickdir.__dict__.__setitem__('stypy_function_name', 'Tick.apply_tickdir')
        Tick.apply_tickdir.__dict__.__setitem__('stypy_param_names_list', ['tickdir'])
        Tick.apply_tickdir.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.apply_tickdir.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.apply_tickdir.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.apply_tickdir.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.apply_tickdir.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.apply_tickdir.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.apply_tickdir', ['tickdir'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'apply_tickdir', localization, ['tickdir'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'apply_tickdir(...)' code ##################

        unicode_7380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 187, (-1)), 'unicode', u'\n        Calculate self._pad and self._tickmarkers\n        ')
        pass
        
        # ################# End of 'apply_tickdir(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'apply_tickdir' in the type store
        # Getting the type of 'stypy_return_type' (line 184)
        stypy_return_type_7381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7381)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'apply_tickdir'
        return stypy_return_type_7381


    @norecursion
    def get_tickdir(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_tickdir'
        module_type_store = module_type_store.open_function_context('get_tickdir', 190, 4, False)
        # Assigning a type to the variable 'self' (line 191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.get_tickdir.__dict__.__setitem__('stypy_localization', localization)
        Tick.get_tickdir.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.get_tickdir.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.get_tickdir.__dict__.__setitem__('stypy_function_name', 'Tick.get_tickdir')
        Tick.get_tickdir.__dict__.__setitem__('stypy_param_names_list', [])
        Tick.get_tickdir.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.get_tickdir.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.get_tickdir.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.get_tickdir.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.get_tickdir.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.get_tickdir.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.get_tickdir', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_tickdir', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_tickdir(...)' code ##################

        # Getting the type of 'self' (line 191)
        self_7382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 15), 'self')
        # Obtaining the member '_tickdir' of a type (line 191)
        _tickdir_7383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 191, 15), self_7382, '_tickdir')
        # Assigning a type to the variable 'stypy_return_type' (line 191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 8), 'stypy_return_type', _tickdir_7383)
        
        # ################# End of 'get_tickdir(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_tickdir' in the type store
        # Getting the type of 'stypy_return_type' (line 190)
        stypy_return_type_7384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 190, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7384)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_tickdir'
        return stypy_return_type_7384


    @norecursion
    def get_tick_padding(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_tick_padding'
        module_type_store = module_type_store.open_function_context('get_tick_padding', 193, 4, False)
        # Assigning a type to the variable 'self' (line 194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 194, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.get_tick_padding.__dict__.__setitem__('stypy_localization', localization)
        Tick.get_tick_padding.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.get_tick_padding.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.get_tick_padding.__dict__.__setitem__('stypy_function_name', 'Tick.get_tick_padding')
        Tick.get_tick_padding.__dict__.__setitem__('stypy_param_names_list', [])
        Tick.get_tick_padding.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.get_tick_padding.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.get_tick_padding.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.get_tick_padding.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.get_tick_padding.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.get_tick_padding.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.get_tick_padding', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_tick_padding', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_tick_padding(...)' code ##################

        unicode_7385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, (-1)), 'unicode', u'\n        Get the length of the tick outside of the axes.\n        ')
        
        # Assigning a Dict to a Name (line 197):
        
        # Assigning a Dict to a Name (line 197):
        
        # Obtaining an instance of the builtin type 'dict' (line 197)
        dict_7386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 197, 18), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 197)
        # Adding element type (key, value) (line 197)
        unicode_7387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 12), 'unicode', u'in')
        float_7388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 198, 18), 'float')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 197, 18), dict_7386, (unicode_7387, float_7388))
        # Adding element type (key, value) (line 197)
        unicode_7389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 199, 12), 'unicode', u'inout')
        float_7390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 199, 21), 'float')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 197, 18), dict_7386, (unicode_7389, float_7390))
        # Adding element type (key, value) (line 197)
        unicode_7391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 12), 'unicode', u'out')
        float_7392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 200, 19), 'float')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 197, 18), dict_7386, (unicode_7391, float_7392))
        
        # Assigning a type to the variable 'padding' (line 197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 197, 8), 'padding', dict_7386)
        # Getting the type of 'self' (line 202)
        self_7393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 15), 'self')
        # Obtaining the member '_size' of a type (line 202)
        _size_7394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 15), self_7393, '_size')
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 202)
        self_7395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 36), 'self')
        # Obtaining the member '_tickdir' of a type (line 202)
        _tickdir_7396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 36), self_7395, '_tickdir')
        # Getting the type of 'padding' (line 202)
        padding_7397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 28), 'padding')
        # Obtaining the member '__getitem__' of a type (line 202)
        getitem___7398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 28), padding_7397, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 202)
        subscript_call_result_7399 = invoke(stypy.reporting.localization.Localization(__file__, 202, 28), getitem___7398, _tickdir_7396)
        
        # Applying the binary operator '*' (line 202)
        result_mul_7400 = python_operator(stypy.reporting.localization.Localization(__file__, 202, 15), '*', _size_7394, subscript_call_result_7399)
        
        # Assigning a type to the variable 'stypy_return_type' (line 202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), 'stypy_return_type', result_mul_7400)
        
        # ################# End of 'get_tick_padding(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_tick_padding' in the type store
        # Getting the type of 'stypy_return_type' (line 193)
        stypy_return_type_7401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7401)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_tick_padding'
        return stypy_return_type_7401


    @norecursion
    def get_children(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_children'
        module_type_store = module_type_store.open_function_context('get_children', 204, 4, False)
        # Assigning a type to the variable 'self' (line 205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.get_children.__dict__.__setitem__('stypy_localization', localization)
        Tick.get_children.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.get_children.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.get_children.__dict__.__setitem__('stypy_function_name', 'Tick.get_children')
        Tick.get_children.__dict__.__setitem__('stypy_param_names_list', [])
        Tick.get_children.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.get_children.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.get_children.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.get_children.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.get_children.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.get_children.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.get_children', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_children', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_children(...)' code ##################

        
        # Assigning a List to a Name (line 205):
        
        # Assigning a List to a Name (line 205):
        
        # Obtaining an instance of the builtin type 'list' (line 205)
        list_7402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 205, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 205)
        # Adding element type (line 205)
        # Getting the type of 'self' (line 205)
        self_7403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 20), 'self')
        # Obtaining the member 'tick1line' of a type (line 205)
        tick1line_7404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 20), self_7403, 'tick1line')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 205, 19), list_7402, tick1line_7404)
        # Adding element type (line 205)
        # Getting the type of 'self' (line 205)
        self_7405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 36), 'self')
        # Obtaining the member 'tick2line' of a type (line 205)
        tick2line_7406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 36), self_7405, 'tick2line')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 205, 19), list_7402, tick2line_7406)
        # Adding element type (line 205)
        # Getting the type of 'self' (line 206)
        self_7407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 20), 'self')
        # Obtaining the member 'gridline' of a type (line 206)
        gridline_7408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 20), self_7407, 'gridline')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 205, 19), list_7402, gridline_7408)
        # Adding element type (line 205)
        # Getting the type of 'self' (line 206)
        self_7409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 35), 'self')
        # Obtaining the member 'label1' of a type (line 206)
        label1_7410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 35), self_7409, 'label1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 205, 19), list_7402, label1_7410)
        # Adding element type (line 205)
        # Getting the type of 'self' (line 206)
        self_7411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 48), 'self')
        # Obtaining the member 'label2' of a type (line 206)
        label2_7412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 206, 48), self_7411, 'label2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 205, 19), list_7402, label2_7412)
        
        # Assigning a type to the variable 'children' (line 205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 8), 'children', list_7402)
        # Getting the type of 'children' (line 207)
        children_7413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 15), 'children')
        # Assigning a type to the variable 'stypy_return_type' (line 207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 207, 8), 'stypy_return_type', children_7413)
        
        # ################# End of 'get_children(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_children' in the type store
        # Getting the type of 'stypy_return_type' (line 204)
        stypy_return_type_7414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7414)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_children'
        return stypy_return_type_7414


    @norecursion
    def set_clip_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 209)
        None_7415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 48), 'None')
        defaults = [None_7415]
        # Create a new context for function 'set_clip_path'
        module_type_store = module_type_store.open_function_context('set_clip_path', 209, 4, False)
        # Assigning a type to the variable 'self' (line 210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 210, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.set_clip_path.__dict__.__setitem__('stypy_localization', localization)
        Tick.set_clip_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.set_clip_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.set_clip_path.__dict__.__setitem__('stypy_function_name', 'Tick.set_clip_path')
        Tick.set_clip_path.__dict__.__setitem__('stypy_param_names_list', ['clippath', 'transform'])
        Tick.set_clip_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.set_clip_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.set_clip_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.set_clip_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.set_clip_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.set_clip_path.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.set_clip_path', ['clippath', 'transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_clip_path', localization, ['clippath', 'transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_clip_path(...)' code ##################

        
        # Call to set_clip_path(...): (line 210)
        # Processing the call arguments (line 210)
        # Getting the type of 'self' (line 210)
        self_7419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 36), 'self', False)
        # Getting the type of 'clippath' (line 210)
        clippath_7420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 42), 'clippath', False)
        # Getting the type of 'transform' (line 210)
        transform_7421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 52), 'transform', False)
        # Processing the call keyword arguments (line 210)
        kwargs_7422 = {}
        # Getting the type of 'artist' (line 210)
        artist_7416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 8), 'artist', False)
        # Obtaining the member 'Artist' of a type (line 210)
        Artist_7417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 8), artist_7416, 'Artist')
        # Obtaining the member 'set_clip_path' of a type (line 210)
        set_clip_path_7418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 210, 8), Artist_7417, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 210)
        set_clip_path_call_result_7423 = invoke(stypy.reporting.localization.Localization(__file__, 210, 8), set_clip_path_7418, *[self_7419, clippath_7420, transform_7421], **kwargs_7422)
        
        
        # Call to set_clip_path(...): (line 211)
        # Processing the call arguments (line 211)
        # Getting the type of 'clippath' (line 211)
        clippath_7427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 36), 'clippath', False)
        # Getting the type of 'transform' (line 211)
        transform_7428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 46), 'transform', False)
        # Processing the call keyword arguments (line 211)
        kwargs_7429 = {}
        # Getting the type of 'self' (line 211)
        self_7424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'self', False)
        # Obtaining the member 'gridline' of a type (line 211)
        gridline_7425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 8), self_7424, 'gridline')
        # Obtaining the member 'set_clip_path' of a type (line 211)
        set_clip_path_7426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 211, 8), gridline_7425, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 211)
        set_clip_path_call_result_7430 = invoke(stypy.reporting.localization.Localization(__file__, 211, 8), set_clip_path_7426, *[clippath_7427, transform_7428], **kwargs_7429)
        
        
        # Assigning a Name to a Attribute (line 212):
        
        # Assigning a Name to a Attribute (line 212):
        # Getting the type of 'True' (line 212)
        True_7431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 21), 'True')
        # Getting the type of 'self' (line 212)
        self_7432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 212)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 8), self_7432, 'stale', True_7431)
        
        # ################# End of 'set_clip_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_clip_path' in the type store
        # Getting the type of 'stypy_return_type' (line 209)
        stypy_return_type_7433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7433)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_clip_path'
        return stypy_return_type_7433

    
    # Assigning a Attribute to a Attribute (line 214):

    @norecursion
    def get_pad_pixels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_pad_pixels'
        module_type_store = module_type_store.open_function_context('get_pad_pixels', 216, 4, False)
        # Assigning a type to the variable 'self' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.get_pad_pixels.__dict__.__setitem__('stypy_localization', localization)
        Tick.get_pad_pixels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.get_pad_pixels.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.get_pad_pixels.__dict__.__setitem__('stypy_function_name', 'Tick.get_pad_pixels')
        Tick.get_pad_pixels.__dict__.__setitem__('stypy_param_names_list', [])
        Tick.get_pad_pixels.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.get_pad_pixels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.get_pad_pixels.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.get_pad_pixels.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.get_pad_pixels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.get_pad_pixels.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.get_pad_pixels', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_pad_pixels', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_pad_pixels(...)' code ##################

        # Getting the type of 'self' (line 217)
        self_7434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 15), 'self')
        # Obtaining the member 'figure' of a type (line 217)
        figure_7435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 15), self_7434, 'figure')
        # Obtaining the member 'dpi' of a type (line 217)
        dpi_7436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 15), figure_7435, 'dpi')
        # Getting the type of 'self' (line 217)
        self_7437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 33), 'self')
        # Obtaining the member '_base_pad' of a type (line 217)
        _base_pad_7438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 33), self_7437, '_base_pad')
        # Applying the binary operator '*' (line 217)
        result_mul_7439 = python_operator(stypy.reporting.localization.Localization(__file__, 217, 15), '*', dpi_7436, _base_pad_7438)
        
        float_7440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 50), 'float')
        # Applying the binary operator 'div' (line 217)
        result_div_7441 = python_operator(stypy.reporting.localization.Localization(__file__, 217, 48), 'div', result_mul_7439, float_7440)
        
        # Assigning a type to the variable 'stypy_return_type' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'stypy_return_type', result_div_7441)
        
        # ################# End of 'get_pad_pixels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_pad_pixels' in the type store
        # Getting the type of 'stypy_return_type' (line 216)
        stypy_return_type_7442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7442)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_pad_pixels'
        return stypy_return_type_7442


    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 219, 4, False)
        # Assigning a type to the variable 'self' (line 220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 220, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.contains.__dict__.__setitem__('stypy_localization', localization)
        Tick.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.contains.__dict__.__setitem__('stypy_function_name', 'Tick.contains')
        Tick.contains.__dict__.__setitem__('stypy_param_names_list', ['mouseevent'])
        Tick.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.contains', ['mouseevent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['mouseevent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        unicode_7443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, (-1)), 'unicode', u'\n        Test whether the mouse event occurred in the Tick marks.\n\n        This function always returns false.  It is more useful to test if the\n        axis as a whole contains the mouse rather than the set of tick marks.\n        ')
        
        
        # Call to callable(...): (line 226)
        # Processing the call arguments (line 226)
        # Getting the type of 'self' (line 226)
        self_7445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 20), 'self', False)
        # Obtaining the member '_contains' of a type (line 226)
        _contains_7446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 20), self_7445, '_contains')
        # Processing the call keyword arguments (line 226)
        kwargs_7447 = {}
        # Getting the type of 'callable' (line 226)
        callable_7444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 226)
        callable_call_result_7448 = invoke(stypy.reporting.localization.Localization(__file__, 226, 11), callable_7444, *[_contains_7446], **kwargs_7447)
        
        # Testing the type of an if condition (line 226)
        if_condition_7449 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 226, 8), callable_call_result_7448)
        # Assigning a type to the variable 'if_condition_7449' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 8), 'if_condition_7449', if_condition_7449)
        # SSA begins for if statement (line 226)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _contains(...): (line 227)
        # Processing the call arguments (line 227)
        # Getting the type of 'self' (line 227)
        self_7452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 34), 'self', False)
        # Getting the type of 'mouseevent' (line 227)
        mouseevent_7453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 40), 'mouseevent', False)
        # Processing the call keyword arguments (line 227)
        kwargs_7454 = {}
        # Getting the type of 'self' (line 227)
        self_7450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 19), 'self', False)
        # Obtaining the member '_contains' of a type (line 227)
        _contains_7451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 19), self_7450, '_contains')
        # Calling _contains(args, kwargs) (line 227)
        _contains_call_result_7455 = invoke(stypy.reporting.localization.Localization(__file__, 227, 19), _contains_7451, *[self_7452, mouseevent_7453], **kwargs_7454)
        
        # Assigning a type to the variable 'stypy_return_type' (line 227)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 227, 12), 'stypy_return_type', _contains_call_result_7455)
        # SSA join for if statement (line 226)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 228)
        tuple_7456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 228)
        # Adding element type (line 228)
        # Getting the type of 'False' (line 228)
        False_7457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 15), 'False')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 228, 15), tuple_7456, False_7457)
        # Adding element type (line 228)
        
        # Obtaining an instance of the builtin type 'dict' (line 228)
        dict_7458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 228, 22), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 228)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 228, 15), tuple_7456, dict_7458)
        
        # Assigning a type to the variable 'stypy_return_type' (line 228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 228, 8), 'stypy_return_type', tuple_7456)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 219)
        stypy_return_type_7459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7459)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_7459


    @norecursion
    def set_pad(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_pad'
        module_type_store = module_type_store.open_function_context('set_pad', 230, 4, False)
        # Assigning a type to the variable 'self' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.set_pad.__dict__.__setitem__('stypy_localization', localization)
        Tick.set_pad.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.set_pad.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.set_pad.__dict__.__setitem__('stypy_function_name', 'Tick.set_pad')
        Tick.set_pad.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Tick.set_pad.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.set_pad.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.set_pad.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.set_pad.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.set_pad.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.set_pad.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.set_pad', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_pad', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_pad(...)' code ##################

        unicode_7460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 235, (-1)), 'unicode', u'\n        Set the tick label pad in points\n\n        ACCEPTS: float\n        ')
        
        # Call to _apply_params(...): (line 236)
        # Processing the call keyword arguments (line 236)
        # Getting the type of 'val' (line 236)
        val_7463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 31), 'val', False)
        keyword_7464 = val_7463
        kwargs_7465 = {'pad': keyword_7464}
        # Getting the type of 'self' (line 236)
        self_7461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 8), 'self', False)
        # Obtaining the member '_apply_params' of a type (line 236)
        _apply_params_7462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 236, 8), self_7461, '_apply_params')
        # Calling _apply_params(args, kwargs) (line 236)
        _apply_params_call_result_7466 = invoke(stypy.reporting.localization.Localization(__file__, 236, 8), _apply_params_7462, *[], **kwargs_7465)
        
        
        # Assigning a Name to a Attribute (line 237):
        
        # Assigning a Name to a Attribute (line 237):
        # Getting the type of 'True' (line 237)
        True_7467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 21), 'True')
        # Getting the type of 'self' (line 237)
        self_7468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 237)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 237, 8), self_7468, 'stale', True_7467)
        
        # ################# End of 'set_pad(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_pad' in the type store
        # Getting the type of 'stypy_return_type' (line 230)
        stypy_return_type_7469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7469)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_pad'
        return stypy_return_type_7469


    @norecursion
    def get_pad(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_pad'
        module_type_store = module_type_store.open_function_context('get_pad', 239, 4, False)
        # Assigning a type to the variable 'self' (line 240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 240, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.get_pad.__dict__.__setitem__('stypy_localization', localization)
        Tick.get_pad.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.get_pad.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.get_pad.__dict__.__setitem__('stypy_function_name', 'Tick.get_pad')
        Tick.get_pad.__dict__.__setitem__('stypy_param_names_list', [])
        Tick.get_pad.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.get_pad.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.get_pad.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.get_pad.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.get_pad.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.get_pad.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.get_pad', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_pad', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_pad(...)' code ##################

        unicode_7470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 8), 'unicode', u'Get the value of the tick label pad in points')
        # Getting the type of 'self' (line 241)
        self_7471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 15), 'self')
        # Obtaining the member '_base_pad' of a type (line 241)
        _base_pad_7472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 241, 15), self_7471, '_base_pad')
        # Assigning a type to the variable 'stypy_return_type' (line 241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 8), 'stypy_return_type', _base_pad_7472)
        
        # ################# End of 'get_pad(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_pad' in the type store
        # Getting the type of 'stypy_return_type' (line 239)
        stypy_return_type_7473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7473)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_pad'
        return stypy_return_type_7473


    @norecursion
    def _get_text1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text1'
        module_type_store = module_type_store.open_function_context('_get_text1', 243, 4, False)
        # Assigning a type to the variable 'self' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick._get_text1.__dict__.__setitem__('stypy_localization', localization)
        Tick._get_text1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick._get_text1.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick._get_text1.__dict__.__setitem__('stypy_function_name', 'Tick._get_text1')
        Tick._get_text1.__dict__.__setitem__('stypy_param_names_list', [])
        Tick._get_text1.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick._get_text1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick._get_text1.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick._get_text1.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick._get_text1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick._get_text1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick._get_text1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text1(...)' code ##################

        unicode_7474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 8), 'unicode', u'Get the default Text 1 instance')
        pass
        
        # ################# End of '_get_text1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text1' in the type store
        # Getting the type of 'stypy_return_type' (line 243)
        stypy_return_type_7475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7475)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text1'
        return stypy_return_type_7475


    @norecursion
    def _get_text2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text2'
        module_type_store = module_type_store.open_function_context('_get_text2', 247, 4, False)
        # Assigning a type to the variable 'self' (line 248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick._get_text2.__dict__.__setitem__('stypy_localization', localization)
        Tick._get_text2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick._get_text2.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick._get_text2.__dict__.__setitem__('stypy_function_name', 'Tick._get_text2')
        Tick._get_text2.__dict__.__setitem__('stypy_param_names_list', [])
        Tick._get_text2.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick._get_text2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick._get_text2.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick._get_text2.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick._get_text2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick._get_text2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick._get_text2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text2(...)' code ##################

        unicode_7476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 8), 'unicode', u'Get the default Text 2 instance')
        pass
        
        # ################# End of '_get_text2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text2' in the type store
        # Getting the type of 'stypy_return_type' (line 247)
        stypy_return_type_7477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7477)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text2'
        return stypy_return_type_7477


    @norecursion
    def _get_tick1line(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_tick1line'
        module_type_store = module_type_store.open_function_context('_get_tick1line', 251, 4, False)
        # Assigning a type to the variable 'self' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick._get_tick1line.__dict__.__setitem__('stypy_localization', localization)
        Tick._get_tick1line.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick._get_tick1line.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick._get_tick1line.__dict__.__setitem__('stypy_function_name', 'Tick._get_tick1line')
        Tick._get_tick1line.__dict__.__setitem__('stypy_param_names_list', [])
        Tick._get_tick1line.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick._get_tick1line.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick._get_tick1line.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick._get_tick1line.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick._get_tick1line.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick._get_tick1line.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick._get_tick1line', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_tick1line', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_tick1line(...)' code ##################

        unicode_7478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 252, 8), 'unicode', u'Get the default line2D instance for tick1')
        pass
        
        # ################# End of '_get_tick1line(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_tick1line' in the type store
        # Getting the type of 'stypy_return_type' (line 251)
        stypy_return_type_7479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7479)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_tick1line'
        return stypy_return_type_7479


    @norecursion
    def _get_tick2line(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_tick2line'
        module_type_store = module_type_store.open_function_context('_get_tick2line', 255, 4, False)
        # Assigning a type to the variable 'self' (line 256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 256, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick._get_tick2line.__dict__.__setitem__('stypy_localization', localization)
        Tick._get_tick2line.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick._get_tick2line.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick._get_tick2line.__dict__.__setitem__('stypy_function_name', 'Tick._get_tick2line')
        Tick._get_tick2line.__dict__.__setitem__('stypy_param_names_list', [])
        Tick._get_tick2line.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick._get_tick2line.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick._get_tick2line.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick._get_tick2line.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick._get_tick2line.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick._get_tick2line.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick._get_tick2line', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_tick2line', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_tick2line(...)' code ##################

        unicode_7480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, 8), 'unicode', u'Get the default line2D instance for tick2')
        pass
        
        # ################# End of '_get_tick2line(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_tick2line' in the type store
        # Getting the type of 'stypy_return_type' (line 255)
        stypy_return_type_7481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7481)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_tick2line'
        return stypy_return_type_7481


    @norecursion
    def _get_gridline(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_gridline'
        module_type_store = module_type_store.open_function_context('_get_gridline', 259, 4, False)
        # Assigning a type to the variable 'self' (line 260)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 260, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick._get_gridline.__dict__.__setitem__('stypy_localization', localization)
        Tick._get_gridline.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick._get_gridline.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick._get_gridline.__dict__.__setitem__('stypy_function_name', 'Tick._get_gridline')
        Tick._get_gridline.__dict__.__setitem__('stypy_param_names_list', [])
        Tick._get_gridline.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick._get_gridline.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick._get_gridline.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick._get_gridline.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick._get_gridline.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick._get_gridline.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick._get_gridline', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_gridline', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_gridline(...)' code ##################

        unicode_7482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 260, 8), 'unicode', u'Get the default grid Line2d instance for this tick')
        pass
        
        # ################# End of '_get_gridline(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_gridline' in the type store
        # Getting the type of 'stypy_return_type' (line 259)
        stypy_return_type_7483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7483)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_gridline'
        return stypy_return_type_7483


    @norecursion
    def get_loc(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_loc'
        module_type_store = module_type_store.open_function_context('get_loc', 263, 4, False)
        # Assigning a type to the variable 'self' (line 264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 264, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.get_loc.__dict__.__setitem__('stypy_localization', localization)
        Tick.get_loc.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.get_loc.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.get_loc.__dict__.__setitem__('stypy_function_name', 'Tick.get_loc')
        Tick.get_loc.__dict__.__setitem__('stypy_param_names_list', [])
        Tick.get_loc.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.get_loc.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.get_loc.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.get_loc.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.get_loc.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.get_loc.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.get_loc', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_loc', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_loc(...)' code ##################

        unicode_7484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, 8), 'unicode', u'Return the tick location (data coords) as a scalar')
        # Getting the type of 'self' (line 265)
        self_7485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 15), 'self')
        # Obtaining the member '_loc' of a type (line 265)
        _loc_7486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 15), self_7485, '_loc')
        # Assigning a type to the variable 'stypy_return_type' (line 265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 8), 'stypy_return_type', _loc_7486)
        
        # ################# End of 'get_loc(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_loc' in the type store
        # Getting the type of 'stypy_return_type' (line 263)
        stypy_return_type_7487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7487)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_loc'
        return stypy_return_type_7487


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 267, 4, False)
        # Assigning a type to the variable 'self' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.draw.__dict__.__setitem__('stypy_localization', localization)
        Tick.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.draw.__dict__.__setitem__('stypy_function_name', 'Tick.draw')
        Tick.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Tick.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        
        
        
        # Call to get_visible(...): (line 269)
        # Processing the call keyword arguments (line 269)
        kwargs_7490 = {}
        # Getting the type of 'self' (line 269)
        self_7488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 269)
        get_visible_7489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 269, 15), self_7488, 'get_visible')
        # Calling get_visible(args, kwargs) (line 269)
        get_visible_call_result_7491 = invoke(stypy.reporting.localization.Localization(__file__, 269, 15), get_visible_7489, *[], **kwargs_7490)
        
        # Applying the 'not' unary operator (line 269)
        result_not__7492 = python_operator(stypy.reporting.localization.Localization(__file__, 269, 11), 'not', get_visible_call_result_7491)
        
        # Testing the type of an if condition (line 269)
        if_condition_7493 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 269, 8), result_not__7492)
        # Assigning a type to the variable 'if_condition_7493' (line 269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 8), 'if_condition_7493', if_condition_7493)
        # SSA begins for if statement (line 269)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 270):
        
        # Assigning a Name to a Attribute (line 270):
        # Getting the type of 'False' (line 270)
        False_7494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 25), 'False')
        # Getting the type of 'self' (line 270)
        self_7495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 270)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 270, 12), self_7495, 'stale', False_7494)
        # Assigning a type to the variable 'stypy_return_type' (line 271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 271, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 269)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to open_group(...): (line 273)
        # Processing the call arguments (line 273)
        # Getting the type of 'self' (line 273)
        self_7498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 28), 'self', False)
        # Obtaining the member '__name__' of a type (line 273)
        name___7499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 28), self_7498, '__name__')
        # Processing the call keyword arguments (line 273)
        kwargs_7500 = {}
        # Getting the type of 'renderer' (line 273)
        renderer_7496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 8), 'renderer', False)
        # Obtaining the member 'open_group' of a type (line 273)
        open_group_7497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 273, 8), renderer_7496, 'open_group')
        # Calling open_group(args, kwargs) (line 273)
        open_group_call_result_7501 = invoke(stypy.reporting.localization.Localization(__file__, 273, 8), open_group_7497, *[name___7499], **kwargs_7500)
        
        
        # Getting the type of 'self' (line 274)
        self_7502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 11), 'self')
        # Obtaining the member 'gridOn' of a type (line 274)
        gridOn_7503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 11), self_7502, 'gridOn')
        # Testing the type of an if condition (line 274)
        if_condition_7504 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 274, 8), gridOn_7503)
        # Assigning a type to the variable 'if_condition_7504' (line 274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 8), 'if_condition_7504', if_condition_7504)
        # SSA begins for if statement (line 274)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 275)
        # Processing the call arguments (line 275)
        # Getting the type of 'renderer' (line 275)
        renderer_7508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 31), 'renderer', False)
        # Processing the call keyword arguments (line 275)
        kwargs_7509 = {}
        # Getting the type of 'self' (line 275)
        self_7505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 12), 'self', False)
        # Obtaining the member 'gridline' of a type (line 275)
        gridline_7506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 12), self_7505, 'gridline')
        # Obtaining the member 'draw' of a type (line 275)
        draw_7507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 275, 12), gridline_7506, 'draw')
        # Calling draw(args, kwargs) (line 275)
        draw_call_result_7510 = invoke(stypy.reporting.localization.Localization(__file__, 275, 12), draw_7507, *[renderer_7508], **kwargs_7509)
        
        # SSA join for if statement (line 274)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 276)
        self_7511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 11), 'self')
        # Obtaining the member 'tick1On' of a type (line 276)
        tick1On_7512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 11), self_7511, 'tick1On')
        # Testing the type of an if condition (line 276)
        if_condition_7513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 276, 8), tick1On_7512)
        # Assigning a type to the variable 'if_condition_7513' (line 276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 276, 8), 'if_condition_7513', if_condition_7513)
        # SSA begins for if statement (line 276)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 277)
        # Processing the call arguments (line 277)
        # Getting the type of 'renderer' (line 277)
        renderer_7517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 32), 'renderer', False)
        # Processing the call keyword arguments (line 277)
        kwargs_7518 = {}
        # Getting the type of 'self' (line 277)
        self_7514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'self', False)
        # Obtaining the member 'tick1line' of a type (line 277)
        tick1line_7515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 12), self_7514, 'tick1line')
        # Obtaining the member 'draw' of a type (line 277)
        draw_7516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 12), tick1line_7515, 'draw')
        # Calling draw(args, kwargs) (line 277)
        draw_call_result_7519 = invoke(stypy.reporting.localization.Localization(__file__, 277, 12), draw_7516, *[renderer_7517], **kwargs_7518)
        
        # SSA join for if statement (line 276)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 278)
        self_7520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 11), 'self')
        # Obtaining the member 'tick2On' of a type (line 278)
        tick2On_7521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 11), self_7520, 'tick2On')
        # Testing the type of an if condition (line 278)
        if_condition_7522 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 278, 8), tick2On_7521)
        # Assigning a type to the variable 'if_condition_7522' (line 278)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 278, 8), 'if_condition_7522', if_condition_7522)
        # SSA begins for if statement (line 278)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 279)
        # Processing the call arguments (line 279)
        # Getting the type of 'renderer' (line 279)
        renderer_7526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 32), 'renderer', False)
        # Processing the call keyword arguments (line 279)
        kwargs_7527 = {}
        # Getting the type of 'self' (line 279)
        self_7523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 12), 'self', False)
        # Obtaining the member 'tick2line' of a type (line 279)
        tick2line_7524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 12), self_7523, 'tick2line')
        # Obtaining the member 'draw' of a type (line 279)
        draw_7525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 12), tick2line_7524, 'draw')
        # Calling draw(args, kwargs) (line 279)
        draw_call_result_7528 = invoke(stypy.reporting.localization.Localization(__file__, 279, 12), draw_7525, *[renderer_7526], **kwargs_7527)
        
        # SSA join for if statement (line 278)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 281)
        self_7529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 281, 11), 'self')
        # Obtaining the member 'label1On' of a type (line 281)
        label1On_7530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 281, 11), self_7529, 'label1On')
        # Testing the type of an if condition (line 281)
        if_condition_7531 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 281, 8), label1On_7530)
        # Assigning a type to the variable 'if_condition_7531' (line 281)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 281, 8), 'if_condition_7531', if_condition_7531)
        # SSA begins for if statement (line 281)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 282)
        # Processing the call arguments (line 282)
        # Getting the type of 'renderer' (line 282)
        renderer_7535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 29), 'renderer', False)
        # Processing the call keyword arguments (line 282)
        kwargs_7536 = {}
        # Getting the type of 'self' (line 282)
        self_7532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 12), 'self', False)
        # Obtaining the member 'label1' of a type (line 282)
        label1_7533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 12), self_7532, 'label1')
        # Obtaining the member 'draw' of a type (line 282)
        draw_7534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 282, 12), label1_7533, 'draw')
        # Calling draw(args, kwargs) (line 282)
        draw_call_result_7537 = invoke(stypy.reporting.localization.Localization(__file__, 282, 12), draw_7534, *[renderer_7535], **kwargs_7536)
        
        # SSA join for if statement (line 281)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 283)
        self_7538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 11), 'self')
        # Obtaining the member 'label2On' of a type (line 283)
        label2On_7539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 283, 11), self_7538, 'label2On')
        # Testing the type of an if condition (line 283)
        if_condition_7540 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 283, 8), label2On_7539)
        # Assigning a type to the variable 'if_condition_7540' (line 283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 283, 8), 'if_condition_7540', if_condition_7540)
        # SSA begins for if statement (line 283)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 284)
        # Processing the call arguments (line 284)
        # Getting the type of 'renderer' (line 284)
        renderer_7544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 29), 'renderer', False)
        # Processing the call keyword arguments (line 284)
        kwargs_7545 = {}
        # Getting the type of 'self' (line 284)
        self_7541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 12), 'self', False)
        # Obtaining the member 'label2' of a type (line 284)
        label2_7542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 12), self_7541, 'label2')
        # Obtaining the member 'draw' of a type (line 284)
        draw_7543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 284, 12), label2_7542, 'draw')
        # Calling draw(args, kwargs) (line 284)
        draw_call_result_7546 = invoke(stypy.reporting.localization.Localization(__file__, 284, 12), draw_7543, *[renderer_7544], **kwargs_7545)
        
        # SSA join for if statement (line 283)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to close_group(...): (line 285)
        # Processing the call arguments (line 285)
        # Getting the type of 'self' (line 285)
        self_7549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 29), 'self', False)
        # Obtaining the member '__name__' of a type (line 285)
        name___7550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 29), self_7549, '__name__')
        # Processing the call keyword arguments (line 285)
        kwargs_7551 = {}
        # Getting the type of 'renderer' (line 285)
        renderer_7547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 285, 8), 'renderer', False)
        # Obtaining the member 'close_group' of a type (line 285)
        close_group_7548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 285, 8), renderer_7547, 'close_group')
        # Calling close_group(args, kwargs) (line 285)
        close_group_call_result_7552 = invoke(stypy.reporting.localization.Localization(__file__, 285, 8), close_group_7548, *[name___7550], **kwargs_7551)
        
        
        # Assigning a Name to a Attribute (line 287):
        
        # Assigning a Name to a Attribute (line 287):
        # Getting the type of 'False' (line 287)
        False_7553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 21), 'False')
        # Getting the type of 'self' (line 287)
        self_7554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 287)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 287, 8), self_7554, 'stale', False_7553)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 267)
        stypy_return_type_7555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7555)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_7555


    @norecursion
    def set_label1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_label1'
        module_type_store = module_type_store.open_function_context('set_label1', 289, 4, False)
        # Assigning a type to the variable 'self' (line 290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 290, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.set_label1.__dict__.__setitem__('stypy_localization', localization)
        Tick.set_label1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.set_label1.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.set_label1.__dict__.__setitem__('stypy_function_name', 'Tick.set_label1')
        Tick.set_label1.__dict__.__setitem__('stypy_param_names_list', ['s'])
        Tick.set_label1.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.set_label1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.set_label1.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.set_label1.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.set_label1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.set_label1.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.set_label1', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_label1', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_label1(...)' code ##################

        unicode_7556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, (-1)), 'unicode', u'\n        Set the text of ticklabel\n\n        ACCEPTS: str\n        ')
        
        # Call to set_text(...): (line 295)
        # Processing the call arguments (line 295)
        # Getting the type of 's' (line 295)
        s_7560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 29), 's', False)
        # Processing the call keyword arguments (line 295)
        kwargs_7561 = {}
        # Getting the type of 'self' (line 295)
        self_7557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 8), 'self', False)
        # Obtaining the member 'label1' of a type (line 295)
        label1_7558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 8), self_7557, 'label1')
        # Obtaining the member 'set_text' of a type (line 295)
        set_text_7559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 8), label1_7558, 'set_text')
        # Calling set_text(args, kwargs) (line 295)
        set_text_call_result_7562 = invoke(stypy.reporting.localization.Localization(__file__, 295, 8), set_text_7559, *[s_7560], **kwargs_7561)
        
        
        # Assigning a Name to a Attribute (line 296):
        
        # Assigning a Name to a Attribute (line 296):
        # Getting the type of 'True' (line 296)
        True_7563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 21), 'True')
        # Getting the type of 'self' (line 296)
        self_7564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 296)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 296, 8), self_7564, 'stale', True_7563)
        
        # ################# End of 'set_label1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_label1' in the type store
        # Getting the type of 'stypy_return_type' (line 289)
        stypy_return_type_7565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7565)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_label1'
        return stypy_return_type_7565

    
    # Assigning a Name to a Name (line 298):

    @norecursion
    def set_label2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_label2'
        module_type_store = module_type_store.open_function_context('set_label2', 300, 4, False)
        # Assigning a type to the variable 'self' (line 301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 301, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.set_label2.__dict__.__setitem__('stypy_localization', localization)
        Tick.set_label2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.set_label2.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.set_label2.__dict__.__setitem__('stypy_function_name', 'Tick.set_label2')
        Tick.set_label2.__dict__.__setitem__('stypy_param_names_list', ['s'])
        Tick.set_label2.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.set_label2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.set_label2.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.set_label2.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.set_label2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.set_label2.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.set_label2', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_label2', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_label2(...)' code ##################

        unicode_7566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 305, (-1)), 'unicode', u'\n        Set the text of ticklabel2\n\n        ACCEPTS: str\n        ')
        
        # Call to set_text(...): (line 306)
        # Processing the call arguments (line 306)
        # Getting the type of 's' (line 306)
        s_7570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 29), 's', False)
        # Processing the call keyword arguments (line 306)
        kwargs_7571 = {}
        # Getting the type of 'self' (line 306)
        self_7567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 8), 'self', False)
        # Obtaining the member 'label2' of a type (line 306)
        label2_7568 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 8), self_7567, 'label2')
        # Obtaining the member 'set_text' of a type (line 306)
        set_text_7569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 306, 8), label2_7568, 'set_text')
        # Calling set_text(args, kwargs) (line 306)
        set_text_call_result_7572 = invoke(stypy.reporting.localization.Localization(__file__, 306, 8), set_text_7569, *[s_7570], **kwargs_7571)
        
        
        # Assigning a Name to a Attribute (line 307):
        
        # Assigning a Name to a Attribute (line 307):
        # Getting the type of 'True' (line 307)
        True_7573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 21), 'True')
        # Getting the type of 'self' (line 307)
        self_7574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 307)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 307, 8), self_7574, 'stale', True_7573)
        
        # ################# End of 'set_label2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_label2' in the type store
        # Getting the type of 'stypy_return_type' (line 300)
        stypy_return_type_7575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 300, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7575)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_label2'
        return stypy_return_type_7575


    @norecursion
    def _set_artist_props(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_artist_props'
        module_type_store = module_type_store.open_function_context('_set_artist_props', 309, 4, False)
        # Assigning a type to the variable 'self' (line 310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick._set_artist_props.__dict__.__setitem__('stypy_localization', localization)
        Tick._set_artist_props.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick._set_artist_props.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick._set_artist_props.__dict__.__setitem__('stypy_function_name', 'Tick._set_artist_props')
        Tick._set_artist_props.__dict__.__setitem__('stypy_param_names_list', ['a'])
        Tick._set_artist_props.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick._set_artist_props.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick._set_artist_props.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick._set_artist_props.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick._set_artist_props.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick._set_artist_props.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick._set_artist_props', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_artist_props', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_artist_props(...)' code ##################

        
        # Call to set_figure(...): (line 310)
        # Processing the call arguments (line 310)
        # Getting the type of 'self' (line 310)
        self_7578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 21), 'self', False)
        # Obtaining the member 'figure' of a type (line 310)
        figure_7579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 21), self_7578, 'figure')
        # Processing the call keyword arguments (line 310)
        kwargs_7580 = {}
        # Getting the type of 'a' (line 310)
        a_7576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 8), 'a', False)
        # Obtaining the member 'set_figure' of a type (line 310)
        set_figure_7577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 8), a_7576, 'set_figure')
        # Calling set_figure(args, kwargs) (line 310)
        set_figure_call_result_7581 = invoke(stypy.reporting.localization.Localization(__file__, 310, 8), set_figure_7577, *[figure_7579], **kwargs_7580)
        
        
        # ################# End of '_set_artist_props(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_artist_props' in the type store
        # Getting the type of 'stypy_return_type' (line 309)
        stypy_return_type_7582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7582)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_artist_props'
        return stypy_return_type_7582


    @norecursion
    def get_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_view_interval'
        module_type_store = module_type_store.open_function_context('get_view_interval', 312, 4, False)
        # Assigning a type to the variable 'self' (line 313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.get_view_interval.__dict__.__setitem__('stypy_localization', localization)
        Tick.get_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.get_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.get_view_interval.__dict__.__setitem__('stypy_function_name', 'Tick.get_view_interval')
        Tick.get_view_interval.__dict__.__setitem__('stypy_param_names_list', [])
        Tick.get_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.get_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.get_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.get_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.get_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.get_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.get_view_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_view_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_view_interval(...)' code ##################

        unicode_7583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 313, 8), 'unicode', u'return the view Interval instance for the axis this tick is ticking')
        
        # Call to NotImplementedError(...): (line 314)
        # Processing the call arguments (line 314)
        unicode_7585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 314)
        kwargs_7586 = {}
        # Getting the type of 'NotImplementedError' (line 314)
        NotImplementedError_7584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 314)
        NotImplementedError_call_result_7587 = invoke(stypy.reporting.localization.Localization(__file__, 314, 14), NotImplementedError_7584, *[unicode_7585], **kwargs_7586)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 314, 8), NotImplementedError_call_result_7587, 'raise parameter', BaseException)
        
        # ################# End of 'get_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 312)
        stypy_return_type_7588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7588)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_view_interval'
        return stypy_return_type_7588


    @norecursion
    def _apply_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_apply_params'
        module_type_store = module_type_store.open_function_context('_apply_params', 316, 4, False)
        # Assigning a type to the variable 'self' (line 317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick._apply_params.__dict__.__setitem__('stypy_localization', localization)
        Tick._apply_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick._apply_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick._apply_params.__dict__.__setitem__('stypy_function_name', 'Tick._apply_params')
        Tick._apply_params.__dict__.__setitem__('stypy_param_names_list', [])
        Tick._apply_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick._apply_params.__dict__.__setitem__('stypy_kwargs_param_name', 'kw')
        Tick._apply_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick._apply_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick._apply_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick._apply_params.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick._apply_params', [], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_apply_params', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_apply_params(...)' code ##################

        
        # Assigning a List to a Name (line 317):
        
        # Assigning a List to a Name (line 317):
        
        # Obtaining an instance of the builtin type 'list' (line 317)
        list_7589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 317)
        # Adding element type (line 317)
        unicode_7590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 20), 'unicode', u'gridOn')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 19), list_7589, unicode_7590)
        # Adding element type (line 317)
        unicode_7591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 30), 'unicode', u'tick1On')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 19), list_7589, unicode_7591)
        # Adding element type (line 317)
        unicode_7592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 41), 'unicode', u'tick2On')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 19), list_7589, unicode_7592)
        # Adding element type (line 317)
        unicode_7593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 52), 'unicode', u'label1On')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 19), list_7589, unicode_7593)
        # Adding element type (line 317)
        unicode_7594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 317, 64), 'unicode', u'label2On')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 317, 19), list_7589, unicode_7594)
        
        # Assigning a type to the variable 'switchkw' (line 317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 8), 'switchkw', list_7589)
        
        # Assigning a ListComp to a Name (line 318):
        
        # Assigning a ListComp to a Name (line 318):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'kw' (line 318)
        kw_7599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 31), 'kw')
        comprehension_7600 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 20), kw_7599)
        # Assigning a type to the variable 'k' (line 318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 20), 'k', comprehension_7600)
        
        # Getting the type of 'k' (line 318)
        k_7596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 37), 'k')
        # Getting the type of 'switchkw' (line 318)
        switchkw_7597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 42), 'switchkw')
        # Applying the binary operator 'in' (line 318)
        result_contains_7598 = python_operator(stypy.reporting.localization.Localization(__file__, 318, 37), 'in', k_7596, switchkw_7597)
        
        # Getting the type of 'k' (line 318)
        k_7595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 20), 'k')
        list_7601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 20), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 318, 20), list_7601, k_7595)
        # Assigning a type to the variable 'switches' (line 318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 8), 'switches', list_7601)
        
        # Getting the type of 'switches' (line 319)
        switches_7602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 17), 'switches')
        # Testing the type of a for loop iterable (line 319)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 319, 8), switches_7602)
        # Getting the type of the for loop variable (line 319)
        for_loop_var_7603 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 319, 8), switches_7602)
        # Assigning a type to the variable 'k' (line 319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 319, 8), 'k', for_loop_var_7603)
        # SSA begins for a for statement (line 319)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to setattr(...): (line 320)
        # Processing the call arguments (line 320)
        # Getting the type of 'self' (line 320)
        self_7605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 20), 'self', False)
        # Getting the type of 'k' (line 320)
        k_7606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 26), 'k', False)
        
        # Call to pop(...): (line 320)
        # Processing the call arguments (line 320)
        # Getting the type of 'k' (line 320)
        k_7609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 36), 'k', False)
        # Processing the call keyword arguments (line 320)
        kwargs_7610 = {}
        # Getting the type of 'kw' (line 320)
        kw_7607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 29), 'kw', False)
        # Obtaining the member 'pop' of a type (line 320)
        pop_7608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 320, 29), kw_7607, 'pop')
        # Calling pop(args, kwargs) (line 320)
        pop_call_result_7611 = invoke(stypy.reporting.localization.Localization(__file__, 320, 29), pop_7608, *[k_7609], **kwargs_7610)
        
        # Processing the call keyword arguments (line 320)
        kwargs_7612 = {}
        # Getting the type of 'setattr' (line 320)
        setattr_7604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 12), 'setattr', False)
        # Calling setattr(args, kwargs) (line 320)
        setattr_call_result_7613 = invoke(stypy.reporting.localization.Localization(__file__, 320, 12), setattr_7604, *[self_7605, k_7606, pop_call_result_7611], **kwargs_7612)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a ListComp to a Name (line 321):
        
        # Assigning a ListComp to a Name (line 321):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'kw' (line 321)
        kw_7622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 32), 'kw')
        comprehension_7623 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 321, 21), kw_7622)
        # Assigning a type to the variable 'k' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 21), 'k', comprehension_7623)
        
        # Getting the type of 'k' (line 321)
        k_7615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 38), 'k')
        
        # Obtaining an instance of the builtin type 'list' (line 321)
        list_7616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 43), 'list')
        # Adding type elements to the builtin type 'list' instance (line 321)
        # Adding element type (line 321)
        unicode_7617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 44), 'unicode', u'size')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 321, 43), list_7616, unicode_7617)
        # Adding element type (line 321)
        unicode_7618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 52), 'unicode', u'width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 321, 43), list_7616, unicode_7618)
        # Adding element type (line 321)
        unicode_7619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 61), 'unicode', u'pad')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 321, 43), list_7616, unicode_7619)
        # Adding element type (line 321)
        unicode_7620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 68), 'unicode', u'tickdir')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 321, 43), list_7616, unicode_7620)
        
        # Applying the binary operator 'in' (line 321)
        result_contains_7621 = python_operator(stypy.reporting.localization.Localization(__file__, 321, 38), 'in', k_7615, list_7616)
        
        # Getting the type of 'k' (line 321)
        k_7614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 21), 'k')
        list_7624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 321, 21), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 321, 21), list_7624, k_7614)
        # Assigning a type to the variable 'newmarker' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 8), 'newmarker', list_7624)
        
        # Getting the type of 'newmarker' (line 322)
        newmarker_7625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 11), 'newmarker')
        # Testing the type of an if condition (line 322)
        if_condition_7626 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 322, 8), newmarker_7625)
        # Assigning a type to the variable 'if_condition_7626' (line 322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'if_condition_7626', if_condition_7626)
        # SSA begins for if statement (line 322)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 323):
        
        # Assigning a Call to a Attribute (line 323):
        
        # Call to pop(...): (line 323)
        # Processing the call arguments (line 323)
        unicode_7629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 323, 32), 'unicode', u'size')
        # Getting the type of 'self' (line 323)
        self_7630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 40), 'self', False)
        # Obtaining the member '_size' of a type (line 323)
        _size_7631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 40), self_7630, '_size')
        # Processing the call keyword arguments (line 323)
        kwargs_7632 = {}
        # Getting the type of 'kw' (line 323)
        kw_7627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 25), 'kw', False)
        # Obtaining the member 'pop' of a type (line 323)
        pop_7628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 25), kw_7627, 'pop')
        # Calling pop(args, kwargs) (line 323)
        pop_call_result_7633 = invoke(stypy.reporting.localization.Localization(__file__, 323, 25), pop_7628, *[unicode_7629, _size_7631], **kwargs_7632)
        
        # Getting the type of 'self' (line 323)
        self_7634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 12), 'self')
        # Setting the type of the member '_size' of a type (line 323)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 12), self_7634, '_size', pop_call_result_7633)
        
        # Assigning a Call to a Attribute (line 326):
        
        # Assigning a Call to a Attribute (line 326):
        
        # Call to pop(...): (line 326)
        # Processing the call arguments (line 326)
        unicode_7637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 33), 'unicode', u'width')
        # Getting the type of 'self' (line 326)
        self_7638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 42), 'self', False)
        # Obtaining the member '_width' of a type (line 326)
        _width_7639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 42), self_7638, '_width')
        # Processing the call keyword arguments (line 326)
        kwargs_7640 = {}
        # Getting the type of 'kw' (line 326)
        kw_7635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 26), 'kw', False)
        # Obtaining the member 'pop' of a type (line 326)
        pop_7636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 26), kw_7635, 'pop')
        # Calling pop(args, kwargs) (line 326)
        pop_call_result_7641 = invoke(stypy.reporting.localization.Localization(__file__, 326, 26), pop_7636, *[unicode_7637, _width_7639], **kwargs_7640)
        
        # Getting the type of 'self' (line 326)
        self_7642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 12), 'self')
        # Setting the type of the member '_width' of a type (line 326)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 12), self_7642, '_width', pop_call_result_7641)
        
        # Assigning a Call to a Attribute (line 327):
        
        # Assigning a Call to a Attribute (line 327):
        
        # Call to pop(...): (line 327)
        # Processing the call arguments (line 327)
        unicode_7645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 36), 'unicode', u'pad')
        # Getting the type of 'self' (line 327)
        self_7646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 43), 'self', False)
        # Obtaining the member '_base_pad' of a type (line 327)
        _base_pad_7647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 43), self_7646, '_base_pad')
        # Processing the call keyword arguments (line 327)
        kwargs_7648 = {}
        # Getting the type of 'kw' (line 327)
        kw_7643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 29), 'kw', False)
        # Obtaining the member 'pop' of a type (line 327)
        pop_7644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 29), kw_7643, 'pop')
        # Calling pop(args, kwargs) (line 327)
        pop_call_result_7649 = invoke(stypy.reporting.localization.Localization(__file__, 327, 29), pop_7644, *[unicode_7645, _base_pad_7647], **kwargs_7648)
        
        # Getting the type of 'self' (line 327)
        self_7650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 12), 'self')
        # Setting the type of the member '_base_pad' of a type (line 327)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 12), self_7650, '_base_pad', pop_call_result_7649)
        
        # Call to apply_tickdir(...): (line 330)
        # Processing the call arguments (line 330)
        
        # Call to pop(...): (line 330)
        # Processing the call arguments (line 330)
        unicode_7655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, 38), 'unicode', u'tickdir')
        # Getting the type of 'self' (line 330)
        self_7656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 49), 'self', False)
        # Obtaining the member '_tickdir' of a type (line 330)
        _tickdir_7657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 330, 49), self_7656, '_tickdir')
        # Processing the call keyword arguments (line 330)
        kwargs_7658 = {}
        # Getting the type of 'kw' (line 330)
        kw_7653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 31), 'kw', False)
        # Obtaining the member 'pop' of a type (line 330)
        pop_7654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 330, 31), kw_7653, 'pop')
        # Calling pop(args, kwargs) (line 330)
        pop_call_result_7659 = invoke(stypy.reporting.localization.Localization(__file__, 330, 31), pop_7654, *[unicode_7655, _tickdir_7657], **kwargs_7658)
        
        # Processing the call keyword arguments (line 330)
        kwargs_7660 = {}
        # Getting the type of 'self' (line 330)
        self_7651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 12), 'self', False)
        # Obtaining the member 'apply_tickdir' of a type (line 330)
        apply_tickdir_7652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 330, 12), self_7651, 'apply_tickdir')
        # Calling apply_tickdir(args, kwargs) (line 330)
        apply_tickdir_call_result_7661 = invoke(stypy.reporting.localization.Localization(__file__, 330, 12), apply_tickdir_7652, *[pop_call_result_7659], **kwargs_7660)
        
        
        # Call to set_marker(...): (line 331)
        # Processing the call arguments (line 331)
        
        # Obtaining the type of the subscript
        int_7665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, 56), 'int')
        # Getting the type of 'self' (line 331)
        self_7666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 38), 'self', False)
        # Obtaining the member '_tickmarkers' of a type (line 331)
        _tickmarkers_7667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 38), self_7666, '_tickmarkers')
        # Obtaining the member '__getitem__' of a type (line 331)
        getitem___7668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 38), _tickmarkers_7667, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 331)
        subscript_call_result_7669 = invoke(stypy.reporting.localization.Localization(__file__, 331, 38), getitem___7668, int_7665)
        
        # Processing the call keyword arguments (line 331)
        kwargs_7670 = {}
        # Getting the type of 'self' (line 331)
        self_7662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 12), 'self', False)
        # Obtaining the member 'tick1line' of a type (line 331)
        tick1line_7663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 12), self_7662, 'tick1line')
        # Obtaining the member 'set_marker' of a type (line 331)
        set_marker_7664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 12), tick1line_7663, 'set_marker')
        # Calling set_marker(args, kwargs) (line 331)
        set_marker_call_result_7671 = invoke(stypy.reporting.localization.Localization(__file__, 331, 12), set_marker_7664, *[subscript_call_result_7669], **kwargs_7670)
        
        
        # Call to set_marker(...): (line 332)
        # Processing the call arguments (line 332)
        
        # Obtaining the type of the subscript
        int_7675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 332, 56), 'int')
        # Getting the type of 'self' (line 332)
        self_7676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 38), 'self', False)
        # Obtaining the member '_tickmarkers' of a type (line 332)
        _tickmarkers_7677 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 38), self_7676, '_tickmarkers')
        # Obtaining the member '__getitem__' of a type (line 332)
        getitem___7678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 38), _tickmarkers_7677, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 332)
        subscript_call_result_7679 = invoke(stypy.reporting.localization.Localization(__file__, 332, 38), getitem___7678, int_7675)
        
        # Processing the call keyword arguments (line 332)
        kwargs_7680 = {}
        # Getting the type of 'self' (line 332)
        self_7672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 12), 'self', False)
        # Obtaining the member 'tick2line' of a type (line 332)
        tick2line_7673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 12), self_7672, 'tick2line')
        # Obtaining the member 'set_marker' of a type (line 332)
        set_marker_7674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 12), tick2line_7673, 'set_marker')
        # Calling set_marker(args, kwargs) (line 332)
        set_marker_call_result_7681 = invoke(stypy.reporting.localization.Localization(__file__, 332, 12), set_marker_7674, *[subscript_call_result_7679], **kwargs_7680)
        
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 333)
        tuple_7682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 333)
        # Adding element type (line 333)
        # Getting the type of 'self' (line 333)
        self_7683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 25), 'self')
        # Obtaining the member 'tick1line' of a type (line 333)
        tick1line_7684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 25), self_7683, 'tick1line')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 333, 25), tuple_7682, tick1line_7684)
        # Adding element type (line 333)
        # Getting the type of 'self' (line 333)
        self_7685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 41), 'self')
        # Obtaining the member 'tick2line' of a type (line 333)
        tick2line_7686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 41), self_7685, 'tick2line')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 333, 25), tuple_7682, tick2line_7686)
        
        # Testing the type of a for loop iterable (line 333)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 333, 12), tuple_7682)
        # Getting the type of the for loop variable (line 333)
        for_loop_var_7687 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 333, 12), tuple_7682)
        # Assigning a type to the variable 'line' (line 333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 12), 'line', for_loop_var_7687)
        # SSA begins for a for statement (line 333)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_markersize(...): (line 334)
        # Processing the call arguments (line 334)
        # Getting the type of 'self' (line 334)
        self_7690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 36), 'self', False)
        # Obtaining the member '_size' of a type (line 334)
        _size_7691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 36), self_7690, '_size')
        # Processing the call keyword arguments (line 334)
        kwargs_7692 = {}
        # Getting the type of 'line' (line 334)
        line_7688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 16), 'line', False)
        # Obtaining the member 'set_markersize' of a type (line 334)
        set_markersize_7689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 334, 16), line_7688, 'set_markersize')
        # Calling set_markersize(args, kwargs) (line 334)
        set_markersize_call_result_7693 = invoke(stypy.reporting.localization.Localization(__file__, 334, 16), set_markersize_7689, *[_size_7691], **kwargs_7692)
        
        
        # Call to set_markeredgewidth(...): (line 335)
        # Processing the call arguments (line 335)
        # Getting the type of 'self' (line 335)
        self_7696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 41), 'self', False)
        # Obtaining the member '_width' of a type (line 335)
        _width_7697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 41), self_7696, '_width')
        # Processing the call keyword arguments (line 335)
        kwargs_7698 = {}
        # Getting the type of 'line' (line 335)
        line_7694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 16), 'line', False)
        # Obtaining the member 'set_markeredgewidth' of a type (line 335)
        set_markeredgewidth_7695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 16), line_7694, 'set_markeredgewidth')
        # Calling set_markeredgewidth(args, kwargs) (line 335)
        set_markeredgewidth_call_result_7699 = invoke(stypy.reporting.localization.Localization(__file__, 335, 16), set_markeredgewidth_7695, *[_width_7697], **kwargs_7698)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 337):
        
        # Assigning a Subscript to a Name (line 337):
        
        # Obtaining the type of the subscript
        int_7700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 337, 48), 'int')
        
        # Call to _get_text1_transform(...): (line 337)
        # Processing the call keyword arguments (line 337)
        kwargs_7703 = {}
        # Getting the type of 'self' (line 337)
        self_7701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 20), 'self', False)
        # Obtaining the member '_get_text1_transform' of a type (line 337)
        _get_text1_transform_7702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 20), self_7701, '_get_text1_transform')
        # Calling _get_text1_transform(args, kwargs) (line 337)
        _get_text1_transform_call_result_7704 = invoke(stypy.reporting.localization.Localization(__file__, 337, 20), _get_text1_transform_7702, *[], **kwargs_7703)
        
        # Obtaining the member '__getitem__' of a type (line 337)
        getitem___7705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 337, 20), _get_text1_transform_call_result_7704, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 337)
        subscript_call_result_7706 = invoke(stypy.reporting.localization.Localization(__file__, 337, 20), getitem___7705, int_7700)
        
        # Assigning a type to the variable 'trans' (line 337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 337, 12), 'trans', subscript_call_result_7706)
        
        # Call to set_transform(...): (line 338)
        # Processing the call arguments (line 338)
        # Getting the type of 'trans' (line 338)
        trans_7710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 38), 'trans', False)
        # Processing the call keyword arguments (line 338)
        kwargs_7711 = {}
        # Getting the type of 'self' (line 338)
        self_7707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 12), 'self', False)
        # Obtaining the member 'label1' of a type (line 338)
        label1_7708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 12), self_7707, 'label1')
        # Obtaining the member 'set_transform' of a type (line 338)
        set_transform_7709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 12), label1_7708, 'set_transform')
        # Calling set_transform(args, kwargs) (line 338)
        set_transform_call_result_7712 = invoke(stypy.reporting.localization.Localization(__file__, 338, 12), set_transform_7709, *[trans_7710], **kwargs_7711)
        
        
        # Assigning a Subscript to a Name (line 339):
        
        # Assigning a Subscript to a Name (line 339):
        
        # Obtaining the type of the subscript
        int_7713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 339, 48), 'int')
        
        # Call to _get_text2_transform(...): (line 339)
        # Processing the call keyword arguments (line 339)
        kwargs_7716 = {}
        # Getting the type of 'self' (line 339)
        self_7714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 20), 'self', False)
        # Obtaining the member '_get_text2_transform' of a type (line 339)
        _get_text2_transform_7715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 20), self_7714, '_get_text2_transform')
        # Calling _get_text2_transform(args, kwargs) (line 339)
        _get_text2_transform_call_result_7717 = invoke(stypy.reporting.localization.Localization(__file__, 339, 20), _get_text2_transform_7715, *[], **kwargs_7716)
        
        # Obtaining the member '__getitem__' of a type (line 339)
        getitem___7718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 339, 20), _get_text2_transform_call_result_7717, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 339)
        subscript_call_result_7719 = invoke(stypy.reporting.localization.Localization(__file__, 339, 20), getitem___7718, int_7713)
        
        # Assigning a type to the variable 'trans' (line 339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 339, 12), 'trans', subscript_call_result_7719)
        
        # Call to set_transform(...): (line 340)
        # Processing the call arguments (line 340)
        # Getting the type of 'trans' (line 340)
        trans_7723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 38), 'trans', False)
        # Processing the call keyword arguments (line 340)
        kwargs_7724 = {}
        # Getting the type of 'self' (line 340)
        self_7720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 12), 'self', False)
        # Obtaining the member 'label2' of a type (line 340)
        label2_7721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 12), self_7720, 'label2')
        # Obtaining the member 'set_transform' of a type (line 340)
        set_transform_7722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 12), label2_7721, 'set_transform')
        # Calling set_transform(args, kwargs) (line 340)
        set_transform_call_result_7725 = invoke(stypy.reporting.localization.Localization(__file__, 340, 12), set_transform_7722, *[trans_7723], **kwargs_7724)
        
        # SSA join for if statement (line 322)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a DictComp to a Name (line 341):
        
        # Assigning a DictComp to a Name (line 341):
        # Calculating dict comprehension
        module_type_store = module_type_store.open_function_context('dict comprehension expression', 341, 19, True)
        # Calculating comprehension expression
        
        # Call to iteritems(...): (line 341)
        # Processing the call arguments (line 341)
        # Getting the type of 'kw' (line 341)
        kw_7735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 50), 'kw', False)
        # Processing the call keyword arguments (line 341)
        kwargs_7736 = {}
        # Getting the type of 'six' (line 341)
        six_7733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 36), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 341)
        iteritems_7734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 341, 36), six_7733, 'iteritems')
        # Calling iteritems(args, kwargs) (line 341)
        iteritems_call_result_7737 = invoke(stypy.reporting.localization.Localization(__file__, 341, 36), iteritems_7734, *[kw_7735], **kwargs_7736)
        
        comprehension_7738 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 341, 19), iteritems_call_result_7737)
        # Assigning a type to the variable 'k' (line 341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 19), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 341, 19), comprehension_7738))
        # Assigning a type to the variable 'v' (line 341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 19), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 341, 19), comprehension_7738))
        
        # Getting the type of 'k' (line 342)
        k_7728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 22), 'k')
        
        # Obtaining an instance of the builtin type 'list' (line 342)
        list_7729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 342)
        # Adding element type (line 342)
        unicode_7730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 28), 'unicode', u'color')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 342, 27), list_7729, unicode_7730)
        # Adding element type (line 342)
        unicode_7731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 37), 'unicode', u'zorder')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 342, 27), list_7729, unicode_7731)
        
        # Applying the binary operator 'in' (line 342)
        result_contains_7732 = python_operator(stypy.reporting.localization.Localization(__file__, 342, 22), 'in', k_7728, list_7729)
        
        # Getting the type of 'k' (line 341)
        k_7726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 19), 'k')
        # Getting the type of 'v' (line 341)
        v_7727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 22), 'v')
        dict_7739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, 19), 'dict')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 341, 19), dict_7739, (k_7726, v_7727))
        # Assigning a type to the variable 'tick_kw' (line 341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 341, 8), 'tick_kw', dict_7739)
        
        # Getting the type of 'tick_kw' (line 343)
        tick_kw_7740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 11), 'tick_kw')
        # Testing the type of an if condition (line 343)
        if_condition_7741 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 343, 8), tick_kw_7740)
        # Assigning a type to the variable 'if_condition_7741' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'if_condition_7741', if_condition_7741)
        # SSA begins for if statement (line 343)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set(...): (line 344)
        # Processing the call keyword arguments (line 344)
        # Getting the type of 'tick_kw' (line 344)
        tick_kw_7745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 33), 'tick_kw', False)
        kwargs_7746 = {'tick_kw_7745': tick_kw_7745}
        # Getting the type of 'self' (line 344)
        self_7742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 12), 'self', False)
        # Obtaining the member 'tick1line' of a type (line 344)
        tick1line_7743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 344, 12), self_7742, 'tick1line')
        # Obtaining the member 'set' of a type (line 344)
        set_7744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 344, 12), tick1line_7743, 'set')
        # Calling set(args, kwargs) (line 344)
        set_call_result_7747 = invoke(stypy.reporting.localization.Localization(__file__, 344, 12), set_7744, *[], **kwargs_7746)
        
        
        # Call to set(...): (line 345)
        # Processing the call keyword arguments (line 345)
        # Getting the type of 'tick_kw' (line 345)
        tick_kw_7751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 33), 'tick_kw', False)
        kwargs_7752 = {'tick_kw_7751': tick_kw_7751}
        # Getting the type of 'self' (line 345)
        self_7748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 12), 'self', False)
        # Obtaining the member 'tick2line' of a type (line 345)
        tick2line_7749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 12), self_7748, 'tick2line')
        # Obtaining the member 'set' of a type (line 345)
        set_7750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 12), tick2line_7749, 'set')
        # Calling set(args, kwargs) (line 345)
        set_call_result_7753 = invoke(stypy.reporting.localization.Localization(__file__, 345, 12), set_7750, *[], **kwargs_7752)
        
        
        
        # Call to iteritems(...): (line 346)
        # Processing the call arguments (line 346)
        # Getting the type of 'tick_kw' (line 346)
        tick_kw_7756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 38), 'tick_kw', False)
        # Processing the call keyword arguments (line 346)
        kwargs_7757 = {}
        # Getting the type of 'six' (line 346)
        six_7754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 24), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 346)
        iteritems_7755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 24), six_7754, 'iteritems')
        # Calling iteritems(args, kwargs) (line 346)
        iteritems_call_result_7758 = invoke(stypy.reporting.localization.Localization(__file__, 346, 24), iteritems_7755, *[tick_kw_7756], **kwargs_7757)
        
        # Testing the type of a for loop iterable (line 346)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 346, 12), iteritems_call_result_7758)
        # Getting the type of the for loop variable (line 346)
        for_loop_var_7759 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 346, 12), iteritems_call_result_7758)
        # Assigning a type to the variable 'k' (line 346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 12), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 346, 12), for_loop_var_7759))
        # Assigning a type to the variable 'v' (line 346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 12), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 346, 12), for_loop_var_7759))
        # SSA begins for a for statement (line 346)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to setattr(...): (line 347)
        # Processing the call arguments (line 347)
        # Getting the type of 'self' (line 347)
        self_7761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 24), 'self', False)
        unicode_7762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 347, 30), 'unicode', u'_')
        # Getting the type of 'k' (line 347)
        k_7763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 36), 'k', False)
        # Applying the binary operator '+' (line 347)
        result_add_7764 = python_operator(stypy.reporting.localization.Localization(__file__, 347, 30), '+', unicode_7762, k_7763)
        
        # Getting the type of 'v' (line 347)
        v_7765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 39), 'v', False)
        # Processing the call keyword arguments (line 347)
        kwargs_7766 = {}
        # Getting the type of 'setattr' (line 347)
        setattr_7760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 16), 'setattr', False)
        # Calling setattr(args, kwargs) (line 347)
        setattr_call_result_7767 = invoke(stypy.reporting.localization.Localization(__file__, 347, 16), setattr_7760, *[self_7761, result_add_7764, v_7765], **kwargs_7766)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 343)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_7768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, 11), 'unicode', u'labelrotation')
        # Getting the type of 'kw' (line 349)
        kw_7769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 30), 'kw')
        # Applying the binary operator 'in' (line 349)
        result_contains_7770 = python_operator(stypy.reporting.localization.Localization(__file__, 349, 11), 'in', unicode_7768, kw_7769)
        
        # Testing the type of an if condition (line 349)
        if_condition_7771 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 349, 8), result_contains_7770)
        # Assigning a type to the variable 'if_condition_7771' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'if_condition_7771', if_condition_7771)
        # SSA begins for if statement (line 349)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _set_labelrotation(...): (line 350)
        # Processing the call arguments (line 350)
        
        # Call to pop(...): (line 350)
        # Processing the call arguments (line 350)
        unicode_7776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 43), 'unicode', u'labelrotation')
        # Processing the call keyword arguments (line 350)
        kwargs_7777 = {}
        # Getting the type of 'kw' (line 350)
        kw_7774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 36), 'kw', False)
        # Obtaining the member 'pop' of a type (line 350)
        pop_7775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 36), kw_7774, 'pop')
        # Calling pop(args, kwargs) (line 350)
        pop_call_result_7778 = invoke(stypy.reporting.localization.Localization(__file__, 350, 36), pop_7775, *[unicode_7776], **kwargs_7777)
        
        # Processing the call keyword arguments (line 350)
        kwargs_7779 = {}
        # Getting the type of 'self' (line 350)
        self_7772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 350, 12), 'self', False)
        # Obtaining the member '_set_labelrotation' of a type (line 350)
        _set_labelrotation_7773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 350, 12), self_7772, '_set_labelrotation')
        # Calling _set_labelrotation(args, kwargs) (line 350)
        _set_labelrotation_call_result_7780 = invoke(stypy.reporting.localization.Localization(__file__, 350, 12), _set_labelrotation_7773, *[pop_call_result_7778], **kwargs_7779)
        
        
        # Call to set(...): (line 351)
        # Processing the call keyword arguments (line 351)
        
        # Obtaining the type of the subscript
        int_7784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 351, 57), 'int')
        # Getting the type of 'self' (line 351)
        self_7785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 37), 'self', False)
        # Obtaining the member '_labelrotation' of a type (line 351)
        _labelrotation_7786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 37), self_7785, '_labelrotation')
        # Obtaining the member '__getitem__' of a type (line 351)
        getitem___7787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 37), _labelrotation_7786, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 351)
        subscript_call_result_7788 = invoke(stypy.reporting.localization.Localization(__file__, 351, 37), getitem___7787, int_7784)
        
        keyword_7789 = subscript_call_result_7788
        kwargs_7790 = {'rotation': keyword_7789}
        # Getting the type of 'self' (line 351)
        self_7781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 12), 'self', False)
        # Obtaining the member 'label1' of a type (line 351)
        label1_7782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 12), self_7781, 'label1')
        # Obtaining the member 'set' of a type (line 351)
        set_7783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 12), label1_7782, 'set')
        # Calling set(args, kwargs) (line 351)
        set_call_result_7791 = invoke(stypy.reporting.localization.Localization(__file__, 351, 12), set_7783, *[], **kwargs_7790)
        
        
        # Call to set(...): (line 352)
        # Processing the call keyword arguments (line 352)
        
        # Obtaining the type of the subscript
        int_7795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 57), 'int')
        # Getting the type of 'self' (line 352)
        self_7796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 37), 'self', False)
        # Obtaining the member '_labelrotation' of a type (line 352)
        _labelrotation_7797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 37), self_7796, '_labelrotation')
        # Obtaining the member '__getitem__' of a type (line 352)
        getitem___7798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 37), _labelrotation_7797, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 352)
        subscript_call_result_7799 = invoke(stypy.reporting.localization.Localization(__file__, 352, 37), getitem___7798, int_7795)
        
        keyword_7800 = subscript_call_result_7799
        kwargs_7801 = {'rotation': keyword_7800}
        # Getting the type of 'self' (line 352)
        self_7792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 12), 'self', False)
        # Obtaining the member 'label2' of a type (line 352)
        label2_7793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 12), self_7792, 'label2')
        # Obtaining the member 'set' of a type (line 352)
        set_7794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 12), label2_7793, 'set')
        # Calling set(args, kwargs) (line 352)
        set_call_result_7802 = invoke(stypy.reporting.localization.Localization(__file__, 352, 12), set_7794, *[], **kwargs_7801)
        
        # SSA join for if statement (line 349)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a ListComp to a Name (line 354):
        
        # Assigning a ListComp to a Name (line 354):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to iteritems(...): (line 354)
        # Processing the call arguments (line 354)
        # Getting the type of 'kw' (line 354)
        kw_7814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 47), 'kw', False)
        # Processing the call keyword arguments (line 354)
        kwargs_7815 = {}
        # Getting the type of 'six' (line 354)
        six_7812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 33), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 354)
        iteritems_7813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 33), six_7812, 'iteritems')
        # Calling iteritems(args, kwargs) (line 354)
        iteritems_call_result_7816 = invoke(stypy.reporting.localization.Localization(__file__, 354, 33), iteritems_7813, *[kw_7814], **kwargs_7815)
        
        comprehension_7817 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 354, 22), iteritems_call_result_7816)
        # Assigning a type to the variable 'k' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 22), 'k', comprehension_7817)
        
        
        # Obtaining the type of the subscript
        int_7804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 27), 'int')
        # Getting the type of 'k' (line 355)
        k_7805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 25), 'k')
        # Obtaining the member '__getitem__' of a type (line 355)
        getitem___7806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 25), k_7805, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 355)
        subscript_call_result_7807 = invoke(stypy.reporting.localization.Localization(__file__, 355, 25), getitem___7806, int_7804)
        
        
        # Obtaining an instance of the builtin type 'list' (line 355)
        list_7808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 355)
        # Adding element type (line 355)
        unicode_7809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 34), 'unicode', u'labelsize')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 355, 33), list_7808, unicode_7809)
        # Adding element type (line 355)
        unicode_7810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 47), 'unicode', u'labelcolor')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 355, 33), list_7808, unicode_7810)
        
        # Applying the binary operator 'in' (line 355)
        result_contains_7811 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 25), 'in', subscript_call_result_7807, list_7808)
        
        # Getting the type of 'k' (line 354)
        k_7803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 22), 'k')
        list_7818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, 22), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 354, 22), list_7818, k_7803)
        # Assigning a type to the variable 'label_list' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 8), 'label_list', list_7818)
        
        # Getting the type of 'label_list' (line 356)
        label_list_7819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 11), 'label_list')
        # Testing the type of an if condition (line 356)
        if_condition_7820 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 356, 8), label_list_7819)
        # Assigning a type to the variable 'if_condition_7820' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 8), 'if_condition_7820', if_condition_7820)
        # SSA begins for if statement (line 356)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a DictComp to a Name (line 357):
        
        # Assigning a DictComp to a Name (line 357):
        # Calculating dict comprehension
        module_type_store = module_type_store.open_function_context('dict comprehension expression', 357, 24, True)
        # Calculating comprehension expression
        # Getting the type of 'label_list' (line 357)
        label_list_7827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 45), 'label_list')
        comprehension_7828 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 357, 24), label_list_7827)
        # Assigning a type to the variable 'k' (line 357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 24), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 357, 24), comprehension_7828))
        # Assigning a type to the variable 'v' (line 357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 24), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 357, 24), comprehension_7828))
        
        # Obtaining the type of the subscript
        int_7821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, 26), 'int')
        slice_7822 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 357, 24), int_7821, None, None)
        # Getting the type of 'k' (line 357)
        k_7823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 24), 'k')
        # Obtaining the member '__getitem__' of a type (line 357)
        getitem___7824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 357, 24), k_7823, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 357)
        subscript_call_result_7825 = invoke(stypy.reporting.localization.Localization(__file__, 357, 24), getitem___7824, slice_7822)
        
        # Getting the type of 'v' (line 357)
        v_7826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 31), 'v')
        dict_7829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 357, 24), 'dict')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 357, 24), dict_7829, (subscript_call_result_7825, v_7826))
        # Assigning a type to the variable 'label_kw' (line 357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 357, 12), 'label_kw', dict_7829)
        
        # Call to set(...): (line 358)
        # Processing the call keyword arguments (line 358)
        # Getting the type of 'label_kw' (line 358)
        label_kw_7833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 30), 'label_kw', False)
        kwargs_7834 = {'label_kw_7833': label_kw_7833}
        # Getting the type of 'self' (line 358)
        self_7830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 12), 'self', False)
        # Obtaining the member 'label1' of a type (line 358)
        label1_7831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 358, 12), self_7830, 'label1')
        # Obtaining the member 'set' of a type (line 358)
        set_7832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 358, 12), label1_7831, 'set')
        # Calling set(args, kwargs) (line 358)
        set_call_result_7835 = invoke(stypy.reporting.localization.Localization(__file__, 358, 12), set_7832, *[], **kwargs_7834)
        
        
        # Call to set(...): (line 359)
        # Processing the call keyword arguments (line 359)
        # Getting the type of 'label_kw' (line 359)
        label_kw_7839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 30), 'label_kw', False)
        kwargs_7840 = {'label_kw_7839': label_kw_7839}
        # Getting the type of 'self' (line 359)
        self_7836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'self', False)
        # Obtaining the member 'label2' of a type (line 359)
        label2_7837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 12), self_7836, 'label2')
        # Obtaining the member 'set' of a type (line 359)
        set_7838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 12), label2_7837, 'set')
        # Calling set(args, kwargs) (line 359)
        set_call_result_7841 = invoke(stypy.reporting.localization.Localization(__file__, 359, 12), set_7838, *[], **kwargs_7840)
        
        
        
        # Call to iteritems(...): (line 360)
        # Processing the call arguments (line 360)
        # Getting the type of 'label_kw' (line 360)
        label_kw_7844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 38), 'label_kw', False)
        # Processing the call keyword arguments (line 360)
        kwargs_7845 = {}
        # Getting the type of 'six' (line 360)
        six_7842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 24), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 360)
        iteritems_7843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 360, 24), six_7842, 'iteritems')
        # Calling iteritems(args, kwargs) (line 360)
        iteritems_call_result_7846 = invoke(stypy.reporting.localization.Localization(__file__, 360, 24), iteritems_7843, *[label_kw_7844], **kwargs_7845)
        
        # Testing the type of a for loop iterable (line 360)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 360, 12), iteritems_call_result_7846)
        # Getting the type of the for loop variable (line 360)
        for_loop_var_7847 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 360, 12), iteritems_call_result_7846)
        # Assigning a type to the variable 'k' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 12), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 360, 12), for_loop_var_7847))
        # Assigning a type to the variable 'v' (line 360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 360, 12), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 360, 12), for_loop_var_7847))
        # SSA begins for a for statement (line 360)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 364):
        
        # Assigning a Call to a Name (line 364):
        
        # Call to (...): (line 364)
        # Processing the call keyword arguments (line 364)
        kwargs_7856 = {}
        
        # Call to getattr(...): (line 364)
        # Processing the call arguments (line 364)
        # Getting the type of 'self' (line 364)
        self_7849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 28), 'self', False)
        # Obtaining the member 'label1' of a type (line 364)
        label1_7850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 28), self_7849, 'label1')
        unicode_7851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, 41), 'unicode', u'get_')
        # Getting the type of 'k' (line 364)
        k_7852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 50), 'k', False)
        # Applying the binary operator '+' (line 364)
        result_add_7853 = python_operator(stypy.reporting.localization.Localization(__file__, 364, 41), '+', unicode_7851, k_7852)
        
        # Processing the call keyword arguments (line 364)
        kwargs_7854 = {}
        # Getting the type of 'getattr' (line 364)
        getattr_7848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 20), 'getattr', False)
        # Calling getattr(args, kwargs) (line 364)
        getattr_call_result_7855 = invoke(stypy.reporting.localization.Localization(__file__, 364, 20), getattr_7848, *[label1_7850, result_add_7853], **kwargs_7854)
        
        # Calling (args, kwargs) (line 364)
        _call_result_7857 = invoke(stypy.reporting.localization.Localization(__file__, 364, 20), getattr_call_result_7855, *[], **kwargs_7856)
        
        # Assigning a type to the variable 'v' (line 364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 16), 'v', _call_result_7857)
        
        # Call to setattr(...): (line 365)
        # Processing the call arguments (line 365)
        # Getting the type of 'self' (line 365)
        self_7859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 24), 'self', False)
        unicode_7860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 30), 'unicode', u'_label')
        # Getting the type of 'k' (line 365)
        k_7861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 41), 'k', False)
        # Applying the binary operator '+' (line 365)
        result_add_7862 = python_operator(stypy.reporting.localization.Localization(__file__, 365, 30), '+', unicode_7860, k_7861)
        
        # Getting the type of 'v' (line 365)
        v_7863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 44), 'v', False)
        # Processing the call keyword arguments (line 365)
        kwargs_7864 = {}
        # Getting the type of 'setattr' (line 365)
        setattr_7858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 16), 'setattr', False)
        # Calling setattr(args, kwargs) (line 365)
        setattr_call_result_7865 = invoke(stypy.reporting.localization.Localization(__file__, 365, 16), setattr_7858, *[self_7859, result_add_7862, v_7863], **kwargs_7864)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 356)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_apply_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_apply_params' in the type store
        # Getting the type of 'stypy_return_type' (line 316)
        stypy_return_type_7866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7866)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_apply_params'
        return stypy_return_type_7866


    @norecursion
    def update_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_position'
        module_type_store = module_type_store.open_function_context('update_position', 367, 4, False)
        # Assigning a type to the variable 'self' (line 368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 368, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick.update_position.__dict__.__setitem__('stypy_localization', localization)
        Tick.update_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick.update_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick.update_position.__dict__.__setitem__('stypy_function_name', 'Tick.update_position')
        Tick.update_position.__dict__.__setitem__('stypy_param_names_list', ['loc'])
        Tick.update_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick.update_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick.update_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick.update_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick.update_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick.update_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick.update_position', ['loc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_position', localization, ['loc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_position(...)' code ##################

        unicode_7867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 368, 8), 'unicode', u'Set the location of tick in data coords with scalar *loc*')
        
        # Call to NotImplementedError(...): (line 369)
        # Processing the call arguments (line 369)
        unicode_7869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 369)
        kwargs_7870 = {}
        # Getting the type of 'NotImplementedError' (line 369)
        NotImplementedError_7868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 369)
        NotImplementedError_call_result_7871 = invoke(stypy.reporting.localization.Localization(__file__, 369, 14), NotImplementedError_7868, *[unicode_7869], **kwargs_7870)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 369, 8), NotImplementedError_call_result_7871, 'raise parameter', BaseException)
        
        # ################# End of 'update_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_position' in the type store
        # Getting the type of 'stypy_return_type' (line 367)
        stypy_return_type_7872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7872)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_position'
        return stypy_return_type_7872


    @norecursion
    def _get_text1_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text1_transform'
        module_type_store = module_type_store.open_function_context('_get_text1_transform', 371, 4, False)
        # Assigning a type to the variable 'self' (line 372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick._get_text1_transform.__dict__.__setitem__('stypy_localization', localization)
        Tick._get_text1_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick._get_text1_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick._get_text1_transform.__dict__.__setitem__('stypy_function_name', 'Tick._get_text1_transform')
        Tick._get_text1_transform.__dict__.__setitem__('stypy_param_names_list', [])
        Tick._get_text1_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick._get_text1_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick._get_text1_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick._get_text1_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick._get_text1_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick._get_text1_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick._get_text1_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text1_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text1_transform(...)' code ##################

        
        # Call to NotImplementedError(...): (line 372)
        # Processing the call arguments (line 372)
        unicode_7874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 372, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 372)
        kwargs_7875 = {}
        # Getting the type of 'NotImplementedError' (line 372)
        NotImplementedError_7873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 372)
        NotImplementedError_call_result_7876 = invoke(stypy.reporting.localization.Localization(__file__, 372, 14), NotImplementedError_7873, *[unicode_7874], **kwargs_7875)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 372, 8), NotImplementedError_call_result_7876, 'raise parameter', BaseException)
        
        # ################# End of '_get_text1_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text1_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 371)
        stypy_return_type_7877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7877)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text1_transform'
        return stypy_return_type_7877


    @norecursion
    def _get_text2_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text2_transform'
        module_type_store = module_type_store.open_function_context('_get_text2_transform', 374, 4, False)
        # Assigning a type to the variable 'self' (line 375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Tick._get_text2_transform.__dict__.__setitem__('stypy_localization', localization)
        Tick._get_text2_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Tick._get_text2_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Tick._get_text2_transform.__dict__.__setitem__('stypy_function_name', 'Tick._get_text2_transform')
        Tick._get_text2_transform.__dict__.__setitem__('stypy_param_names_list', [])
        Tick._get_text2_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Tick._get_text2_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Tick._get_text2_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Tick._get_text2_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Tick._get_text2_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Tick._get_text2_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Tick._get_text2_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text2_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text2_transform(...)' code ##################

        
        # Call to NotImplementedError(...): (line 375)
        # Processing the call arguments (line 375)
        unicode_7879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 375, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 375)
        kwargs_7880 = {}
        # Getting the type of 'NotImplementedError' (line 375)
        NotImplementedError_7878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 375)
        NotImplementedError_call_result_7881 = invoke(stypy.reporting.localization.Localization(__file__, 375, 14), NotImplementedError_7878, *[unicode_7879], **kwargs_7880)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 375, 8), NotImplementedError_call_result_7881, 'raise parameter', BaseException)
        
        # ################# End of '_get_text2_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text2_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 374)
        stypy_return_type_7882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 374, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7882)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text2_transform'
        return stypy_return_type_7882


# Assigning a type to the variable 'Tick' (line 28)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'Tick', Tick)

# Assigning a Attribute to a Attribute (line 214):
# Getting the type of 'artist' (line 214)
artist_7883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 28), 'artist')
# Obtaining the member 'Artist' of a type (line 214)
Artist_7884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 28), artist_7883, 'Artist')
# Obtaining the member 'set_clip_path' of a type (line 214)
set_clip_path_7885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 28), Artist_7884, 'set_clip_path')
# Obtaining the member '__doc__' of a type (line 214)
doc___7886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 214, 28), set_clip_path_7885, '__doc__')
# Getting the type of 'Tick'
Tick_7887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Tick')
# Obtaining the member 'set_clip_path' of a type
set_clip_path_7888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Tick_7887, 'set_clip_path')
# Setting the type of the member '__doc__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), set_clip_path_7888, '__doc__', doc___7886)

# Assigning a Name to a Name (line 298):
# Getting the type of 'Tick'
Tick_7889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Tick')
# Obtaining the member 'set_label1' of a type
set_label1_7890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Tick_7889, 'set_label1')
# Getting the type of 'Tick'
Tick_7891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Tick')
# Setting the type of the member 'set_label' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Tick_7891, 'set_label', set_label1_7890)
# Declaration of the 'XTick' class
# Getting the type of 'Tick' (line 378)
Tick_7892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 378, 12), 'Tick')

class XTick(Tick_7892, ):
    unicode_7893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 382, (-1)), 'unicode', u'\n    Contains all the Artists needed to make an x tick - the tick line,\n    the label text and the grid line\n    ')
    
    # Assigning a Str to a Name (line 383):

    @norecursion
    def _get_text1_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text1_transform'
        module_type_store = module_type_store.open_function_context('_get_text1_transform', 385, 4, False)
        # Assigning a type to the variable 'self' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XTick._get_text1_transform.__dict__.__setitem__('stypy_localization', localization)
        XTick._get_text1_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XTick._get_text1_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        XTick._get_text1_transform.__dict__.__setitem__('stypy_function_name', 'XTick._get_text1_transform')
        XTick._get_text1_transform.__dict__.__setitem__('stypy_param_names_list', [])
        XTick._get_text1_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        XTick._get_text1_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XTick._get_text1_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        XTick._get_text1_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        XTick._get_text1_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XTick._get_text1_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XTick._get_text1_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text1_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text1_transform(...)' code ##################

        
        # Call to get_xaxis_text1_transform(...): (line 386)
        # Processing the call arguments (line 386)
        # Getting the type of 'self' (line 386)
        self_7897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 51), 'self', False)
        # Obtaining the member '_pad' of a type (line 386)
        _pad_7898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 51), self_7897, '_pad')
        # Processing the call keyword arguments (line 386)
        kwargs_7899 = {}
        # Getting the type of 'self' (line 386)
        self_7894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 15), 'self', False)
        # Obtaining the member 'axes' of a type (line 386)
        axes_7895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 15), self_7894, 'axes')
        # Obtaining the member 'get_xaxis_text1_transform' of a type (line 386)
        get_xaxis_text1_transform_7896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 15), axes_7895, 'get_xaxis_text1_transform')
        # Calling get_xaxis_text1_transform(args, kwargs) (line 386)
        get_xaxis_text1_transform_call_result_7900 = invoke(stypy.reporting.localization.Localization(__file__, 386, 15), get_xaxis_text1_transform_7896, *[_pad_7898], **kwargs_7899)
        
        # Assigning a type to the variable 'stypy_return_type' (line 386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 8), 'stypy_return_type', get_xaxis_text1_transform_call_result_7900)
        
        # ################# End of '_get_text1_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text1_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 385)
        stypy_return_type_7901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7901)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text1_transform'
        return stypy_return_type_7901


    @norecursion
    def _get_text2_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text2_transform'
        module_type_store = module_type_store.open_function_context('_get_text2_transform', 388, 4, False)
        # Assigning a type to the variable 'self' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XTick._get_text2_transform.__dict__.__setitem__('stypy_localization', localization)
        XTick._get_text2_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XTick._get_text2_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        XTick._get_text2_transform.__dict__.__setitem__('stypy_function_name', 'XTick._get_text2_transform')
        XTick._get_text2_transform.__dict__.__setitem__('stypy_param_names_list', [])
        XTick._get_text2_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        XTick._get_text2_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XTick._get_text2_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        XTick._get_text2_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        XTick._get_text2_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XTick._get_text2_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XTick._get_text2_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text2_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text2_transform(...)' code ##################

        
        # Call to get_xaxis_text2_transform(...): (line 389)
        # Processing the call arguments (line 389)
        # Getting the type of 'self' (line 389)
        self_7905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 51), 'self', False)
        # Obtaining the member '_pad' of a type (line 389)
        _pad_7906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 51), self_7905, '_pad')
        # Processing the call keyword arguments (line 389)
        kwargs_7907 = {}
        # Getting the type of 'self' (line 389)
        self_7902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 15), 'self', False)
        # Obtaining the member 'axes' of a type (line 389)
        axes_7903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 15), self_7902, 'axes')
        # Obtaining the member 'get_xaxis_text2_transform' of a type (line 389)
        get_xaxis_text2_transform_7904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 389, 15), axes_7903, 'get_xaxis_text2_transform')
        # Calling get_xaxis_text2_transform(args, kwargs) (line 389)
        get_xaxis_text2_transform_call_result_7908 = invoke(stypy.reporting.localization.Localization(__file__, 389, 15), get_xaxis_text2_transform_7904, *[_pad_7906], **kwargs_7907)
        
        # Assigning a type to the variable 'stypy_return_type' (line 389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 8), 'stypy_return_type', get_xaxis_text2_transform_call_result_7908)
        
        # ################# End of '_get_text2_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text2_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 388)
        stypy_return_type_7909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7909)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text2_transform'
        return stypy_return_type_7909


    @norecursion
    def apply_tickdir(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'apply_tickdir'
        module_type_store = module_type_store.open_function_context('apply_tickdir', 391, 4, False)
        # Assigning a type to the variable 'self' (line 392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 392, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XTick.apply_tickdir.__dict__.__setitem__('stypy_localization', localization)
        XTick.apply_tickdir.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XTick.apply_tickdir.__dict__.__setitem__('stypy_type_store', module_type_store)
        XTick.apply_tickdir.__dict__.__setitem__('stypy_function_name', 'XTick.apply_tickdir')
        XTick.apply_tickdir.__dict__.__setitem__('stypy_param_names_list', ['tickdir'])
        XTick.apply_tickdir.__dict__.__setitem__('stypy_varargs_param_name', None)
        XTick.apply_tickdir.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XTick.apply_tickdir.__dict__.__setitem__('stypy_call_defaults', defaults)
        XTick.apply_tickdir.__dict__.__setitem__('stypy_call_varargs', varargs)
        XTick.apply_tickdir.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XTick.apply_tickdir.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XTick.apply_tickdir', ['tickdir'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'apply_tickdir', localization, ['tickdir'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'apply_tickdir(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 392)
        # Getting the type of 'tickdir' (line 392)
        tickdir_7910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 11), 'tickdir')
        # Getting the type of 'None' (line 392)
        None_7911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 22), 'None')
        
        (may_be_7912, more_types_in_union_7913) = may_be_none(tickdir_7910, None_7911)

        if may_be_7912:

            if more_types_in_union_7913:
                # Runtime conditional SSA (line 392)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 393):
            
            # Assigning a Subscript to a Name (line 393):
            
            # Obtaining the type of the subscript
            unicode_7914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 31), 'unicode', u'%s.direction')
            # Getting the type of 'self' (line 393)
            self_7915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 48), 'self')
            # Obtaining the member '_name' of a type (line 393)
            _name_7916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 48), self_7915, '_name')
            # Applying the binary operator '%' (line 393)
            result_mod_7917 = python_operator(stypy.reporting.localization.Localization(__file__, 393, 31), '%', unicode_7914, _name_7916)
            
            # Getting the type of 'rcParams' (line 393)
            rcParams_7918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 22), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 393)
            getitem___7919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 22), rcParams_7918, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 393)
            subscript_call_result_7920 = invoke(stypy.reporting.localization.Localization(__file__, 393, 22), getitem___7919, result_mod_7917)
            
            # Assigning a type to the variable 'tickdir' (line 393)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 393, 12), 'tickdir', subscript_call_result_7920)

            if more_types_in_union_7913:
                # SSA join for if statement (line 392)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 394):
        
        # Assigning a Name to a Attribute (line 394):
        # Getting the type of 'tickdir' (line 394)
        tickdir_7921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 24), 'tickdir')
        # Getting the type of 'self' (line 394)
        self_7922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'self')
        # Setting the type of the member '_tickdir' of a type (line 394)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 8), self_7922, '_tickdir', tickdir_7921)
        
        
        # Getting the type of 'self' (line 396)
        self_7923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 11), 'self')
        # Obtaining the member '_tickdir' of a type (line 396)
        _tickdir_7924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 11), self_7923, '_tickdir')
        unicode_7925 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 28), 'unicode', u'in')
        # Applying the binary operator '==' (line 396)
        result_eq_7926 = python_operator(stypy.reporting.localization.Localization(__file__, 396, 11), '==', _tickdir_7924, unicode_7925)
        
        # Testing the type of an if condition (line 396)
        if_condition_7927 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 396, 8), result_eq_7926)
        # Assigning a type to the variable 'if_condition_7927' (line 396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 'if_condition_7927', if_condition_7927)
        # SSA begins for if statement (line 396)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 397):
        
        # Assigning a Tuple to a Attribute (line 397):
        
        # Obtaining an instance of the builtin type 'tuple' (line 397)
        tuple_7928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 397)
        # Adding element type (line 397)
        # Getting the type of 'mlines' (line 397)
        mlines_7929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 33), 'mlines')
        # Obtaining the member 'TICKUP' of a type (line 397)
        TICKUP_7930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 33), mlines_7929, 'TICKUP')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 33), tuple_7928, TICKUP_7930)
        # Adding element type (line 397)
        # Getting the type of 'mlines' (line 397)
        mlines_7931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 48), 'mlines')
        # Obtaining the member 'TICKDOWN' of a type (line 397)
        TICKDOWN_7932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 48), mlines_7931, 'TICKDOWN')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 397, 33), tuple_7928, TICKDOWN_7932)
        
        # Getting the type of 'self' (line 397)
        self_7933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 12), 'self')
        # Setting the type of the member '_tickmarkers' of a type (line 397)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 12), self_7933, '_tickmarkers', tuple_7928)
        # SSA branch for the else part of an if statement (line 396)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 398)
        self_7934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 13), 'self')
        # Obtaining the member '_tickdir' of a type (line 398)
        _tickdir_7935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 398, 13), self_7934, '_tickdir')
        unicode_7936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 30), 'unicode', u'inout')
        # Applying the binary operator '==' (line 398)
        result_eq_7937 = python_operator(stypy.reporting.localization.Localization(__file__, 398, 13), '==', _tickdir_7935, unicode_7936)
        
        # Testing the type of an if condition (line 398)
        if_condition_7938 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 398, 13), result_eq_7937)
        # Assigning a type to the variable 'if_condition_7938' (line 398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 13), 'if_condition_7938', if_condition_7938)
        # SSA begins for if statement (line 398)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 399):
        
        # Assigning a Tuple to a Attribute (line 399):
        
        # Obtaining an instance of the builtin type 'tuple' (line 399)
        tuple_7939 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 399)
        # Adding element type (line 399)
        unicode_7940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 33), 'unicode', u'|')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 399, 33), tuple_7939, unicode_7940)
        # Adding element type (line 399)
        unicode_7941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 38), 'unicode', u'|')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 399, 33), tuple_7939, unicode_7941)
        
        # Getting the type of 'self' (line 399)
        self_7942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 12), 'self')
        # Setting the type of the member '_tickmarkers' of a type (line 399)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 12), self_7942, '_tickmarkers', tuple_7939)
        # SSA branch for the else part of an if statement (line 398)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Attribute (line 401):
        
        # Assigning a Tuple to a Attribute (line 401):
        
        # Obtaining an instance of the builtin type 'tuple' (line 401)
        tuple_7943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 401)
        # Adding element type (line 401)
        # Getting the type of 'mlines' (line 401)
        mlines_7944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 33), 'mlines')
        # Obtaining the member 'TICKDOWN' of a type (line 401)
        TICKDOWN_7945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 33), mlines_7944, 'TICKDOWN')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 401, 33), tuple_7943, TICKDOWN_7945)
        # Adding element type (line 401)
        # Getting the type of 'mlines' (line 401)
        mlines_7946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 50), 'mlines')
        # Obtaining the member 'TICKUP' of a type (line 401)
        TICKUP_7947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 50), mlines_7946, 'TICKUP')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 401, 33), tuple_7943, TICKUP_7947)
        
        # Getting the type of 'self' (line 401)
        self_7948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 12), 'self')
        # Setting the type of the member '_tickmarkers' of a type (line 401)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 401, 12), self_7948, '_tickmarkers', tuple_7943)
        # SSA join for if statement (line 398)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 396)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Attribute (line 402):
        
        # Assigning a BinOp to a Attribute (line 402):
        # Getting the type of 'self' (line 402)
        self_7949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 20), 'self')
        # Obtaining the member '_base_pad' of a type (line 402)
        _base_pad_7950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 20), self_7949, '_base_pad')
        
        # Call to get_tick_padding(...): (line 402)
        # Processing the call keyword arguments (line 402)
        kwargs_7953 = {}
        # Getting the type of 'self' (line 402)
        self_7951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 37), 'self', False)
        # Obtaining the member 'get_tick_padding' of a type (line 402)
        get_tick_padding_7952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 37), self_7951, 'get_tick_padding')
        # Calling get_tick_padding(args, kwargs) (line 402)
        get_tick_padding_call_result_7954 = invoke(stypy.reporting.localization.Localization(__file__, 402, 37), get_tick_padding_7952, *[], **kwargs_7953)
        
        # Applying the binary operator '+' (line 402)
        result_add_7955 = python_operator(stypy.reporting.localization.Localization(__file__, 402, 20), '+', _base_pad_7950, get_tick_padding_call_result_7954)
        
        # Getting the type of 'self' (line 402)
        self_7956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 'self')
        # Setting the type of the member '_pad' of a type (line 402)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 8), self_7956, '_pad', result_add_7955)
        
        # Assigning a Name to a Attribute (line 403):
        
        # Assigning a Name to a Attribute (line 403):
        # Getting the type of 'True' (line 403)
        True_7957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 21), 'True')
        # Getting the type of 'self' (line 403)
        self_7958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 403)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 403, 8), self_7958, 'stale', True_7957)
        
        # ################# End of 'apply_tickdir(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'apply_tickdir' in the type store
        # Getting the type of 'stypy_return_type' (line 391)
        stypy_return_type_7959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_7959)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'apply_tickdir'
        return stypy_return_type_7959


    @norecursion
    def _get_text1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text1'
        module_type_store = module_type_store.open_function_context('_get_text1', 405, 4, False)
        # Assigning a type to the variable 'self' (line 406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XTick._get_text1.__dict__.__setitem__('stypy_localization', localization)
        XTick._get_text1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XTick._get_text1.__dict__.__setitem__('stypy_type_store', module_type_store)
        XTick._get_text1.__dict__.__setitem__('stypy_function_name', 'XTick._get_text1')
        XTick._get_text1.__dict__.__setitem__('stypy_param_names_list', [])
        XTick._get_text1.__dict__.__setitem__('stypy_varargs_param_name', None)
        XTick._get_text1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XTick._get_text1.__dict__.__setitem__('stypy_call_defaults', defaults)
        XTick._get_text1.__dict__.__setitem__('stypy_call_varargs', varargs)
        XTick._get_text1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XTick._get_text1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XTick._get_text1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text1(...)' code ##################

        unicode_7960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, 8), 'unicode', u'Get the default Text instance')
        
        # Assigning a Call to a Tuple (line 410):
        
        # Assigning a Call to a Name:
        
        # Call to _get_text1_transform(...): (line 410)
        # Processing the call keyword arguments (line 410)
        kwargs_7963 = {}
        # Getting the type of 'self' (line 410)
        self_7961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 29), 'self', False)
        # Obtaining the member '_get_text1_transform' of a type (line 410)
        _get_text1_transform_7962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 29), self_7961, '_get_text1_transform')
        # Calling _get_text1_transform(args, kwargs) (line 410)
        _get_text1_transform_call_result_7964 = invoke(stypy.reporting.localization.Localization(__file__, 410, 29), _get_text1_transform_7962, *[], **kwargs_7963)
        
        # Assigning a type to the variable 'call_assignment_6960' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_6960', _get_text1_transform_call_result_7964)
        
        # Assigning a Call to a Name (line 410):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_7967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 8), 'int')
        # Processing the call keyword arguments
        kwargs_7968 = {}
        # Getting the type of 'call_assignment_6960' (line 410)
        call_assignment_6960_7965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_6960', False)
        # Obtaining the member '__getitem__' of a type (line 410)
        getitem___7966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 8), call_assignment_6960_7965, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_7969 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___7966, *[int_7967], **kwargs_7968)
        
        # Assigning a type to the variable 'call_assignment_6961' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_6961', getitem___call_result_7969)
        
        # Assigning a Name to a Name (line 410):
        # Getting the type of 'call_assignment_6961' (line 410)
        call_assignment_6961_7970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_6961')
        # Assigning a type to the variable 'trans' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'trans', call_assignment_6961_7970)
        
        # Assigning a Call to a Name (line 410):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_7973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 8), 'int')
        # Processing the call keyword arguments
        kwargs_7974 = {}
        # Getting the type of 'call_assignment_6960' (line 410)
        call_assignment_6960_7971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_6960', False)
        # Obtaining the member '__getitem__' of a type (line 410)
        getitem___7972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 8), call_assignment_6960_7971, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_7975 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___7972, *[int_7973], **kwargs_7974)
        
        # Assigning a type to the variable 'call_assignment_6962' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_6962', getitem___call_result_7975)
        
        # Assigning a Name to a Name (line 410):
        # Getting the type of 'call_assignment_6962' (line 410)
        call_assignment_6962_7976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_6962')
        # Assigning a type to the variable 'vert' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 15), 'vert', call_assignment_6962_7976)
        
        # Assigning a Call to a Name (line 410):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_7979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 8), 'int')
        # Processing the call keyword arguments
        kwargs_7980 = {}
        # Getting the type of 'call_assignment_6960' (line 410)
        call_assignment_6960_7977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_6960', False)
        # Obtaining the member '__getitem__' of a type (line 410)
        getitem___7978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 8), call_assignment_6960_7977, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_7981 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___7978, *[int_7979], **kwargs_7980)
        
        # Assigning a type to the variable 'call_assignment_6963' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_6963', getitem___call_result_7981)
        
        # Assigning a Name to a Name (line 410):
        # Getting the type of 'call_assignment_6963' (line 410)
        call_assignment_6963_7982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'call_assignment_6963')
        # Assigning a type to the variable 'horiz' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 21), 'horiz', call_assignment_6963_7982)
        
        # Assigning a Call to a Name (line 411):
        
        # Assigning a Call to a Name (line 411):
        
        # Call to Text(...): (line 411)
        # Processing the call keyword arguments (line 411)
        int_7985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, 14), 'int')
        keyword_7986 = int_7985
        int_7987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 412, 19), 'int')
        keyword_7988 = int_7987
        
        # Call to FontProperties(...): (line 413)
        # Processing the call keyword arguments (line 413)
        # Getting the type of 'self' (line 413)
        self_7991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 60), 'self', False)
        # Obtaining the member '_labelsize' of a type (line 413)
        _labelsize_7992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 60), self_7991, '_labelsize')
        keyword_7993 = _labelsize_7992
        kwargs_7994 = {'size': keyword_7993}
        # Getting the type of 'font_manager' (line 413)
        font_manager_7989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 413, 27), 'font_manager', False)
        # Obtaining the member 'FontProperties' of a type (line 413)
        FontProperties_7990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 413, 27), font_manager_7989, 'FontProperties')
        # Calling FontProperties(args, kwargs) (line 413)
        FontProperties_call_result_7995 = invoke(stypy.reporting.localization.Localization(__file__, 413, 27), FontProperties_7990, *[], **kwargs_7994)
        
        keyword_7996 = FontProperties_call_result_7995
        # Getting the type of 'self' (line 414)
        self_7997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 18), 'self', False)
        # Obtaining the member '_labelcolor' of a type (line 414)
        _labelcolor_7998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 18), self_7997, '_labelcolor')
        keyword_7999 = _labelcolor_7998
        # Getting the type of 'vert' (line 415)
        vert_8000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 30), 'vert', False)
        keyword_8001 = vert_8000
        # Getting the type of 'horiz' (line 416)
        horiz_8002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 416, 32), 'horiz', False)
        keyword_8003 = horiz_8002
        kwargs_8004 = {'color': keyword_7999, 'fontproperties': keyword_7996, 'verticalalignment': keyword_8001, 'y': keyword_7988, 'x': keyword_7986, 'horizontalalignment': keyword_8003}
        # Getting the type of 'mtext' (line 411)
        mtext_7983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 12), 'mtext', False)
        # Obtaining the member 'Text' of a type (line 411)
        Text_7984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 12), mtext_7983, 'Text')
        # Calling Text(args, kwargs) (line 411)
        Text_call_result_8005 = invoke(stypy.reporting.localization.Localization(__file__, 411, 12), Text_7984, *[], **kwargs_8004)
        
        # Assigning a type to the variable 't' (line 411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 8), 't', Text_call_result_8005)
        
        # Call to set_transform(...): (line 418)
        # Processing the call arguments (line 418)
        # Getting the type of 'trans' (line 418)
        trans_8008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 24), 'trans', False)
        # Processing the call keyword arguments (line 418)
        kwargs_8009 = {}
        # Getting the type of 't' (line 418)
        t_8006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 't', False)
        # Obtaining the member 'set_transform' of a type (line 418)
        set_transform_8007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 8), t_8006, 'set_transform')
        # Calling set_transform(args, kwargs) (line 418)
        set_transform_call_result_8010 = invoke(stypy.reporting.localization.Localization(__file__, 418, 8), set_transform_8007, *[trans_8008], **kwargs_8009)
        
        
        # Call to _set_artist_props(...): (line 419)
        # Processing the call arguments (line 419)
        # Getting the type of 't' (line 419)
        t_8013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 31), 't', False)
        # Processing the call keyword arguments (line 419)
        kwargs_8014 = {}
        # Getting the type of 'self' (line 419)
        self_8011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 419)
        _set_artist_props_8012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 419, 8), self_8011, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 419)
        _set_artist_props_call_result_8015 = invoke(stypy.reporting.localization.Localization(__file__, 419, 8), _set_artist_props_8012, *[t_8013], **kwargs_8014)
        
        # Getting the type of 't' (line 420)
        t_8016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 15), 't')
        # Assigning a type to the variable 'stypy_return_type' (line 420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 420, 8), 'stypy_return_type', t_8016)
        
        # ################# End of '_get_text1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text1' in the type store
        # Getting the type of 'stypy_return_type' (line 405)
        stypy_return_type_8017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8017)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text1'
        return stypy_return_type_8017


    @norecursion
    def _get_text2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text2'
        module_type_store = module_type_store.open_function_context('_get_text2', 422, 4, False)
        # Assigning a type to the variable 'self' (line 423)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XTick._get_text2.__dict__.__setitem__('stypy_localization', localization)
        XTick._get_text2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XTick._get_text2.__dict__.__setitem__('stypy_type_store', module_type_store)
        XTick._get_text2.__dict__.__setitem__('stypy_function_name', 'XTick._get_text2')
        XTick._get_text2.__dict__.__setitem__('stypy_param_names_list', [])
        XTick._get_text2.__dict__.__setitem__('stypy_varargs_param_name', None)
        XTick._get_text2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XTick._get_text2.__dict__.__setitem__('stypy_call_defaults', defaults)
        XTick._get_text2.__dict__.__setitem__('stypy_call_varargs', varargs)
        XTick._get_text2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XTick._get_text2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XTick._get_text2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text2(...)' code ##################

        unicode_8018 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 424, 8), 'unicode', u'Get the default Text 2 instance')
        
        # Assigning a Call to a Tuple (line 426):
        
        # Assigning a Call to a Name:
        
        # Call to _get_text2_transform(...): (line 426)
        # Processing the call keyword arguments (line 426)
        kwargs_8021 = {}
        # Getting the type of 'self' (line 426)
        self_8019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 29), 'self', False)
        # Obtaining the member '_get_text2_transform' of a type (line 426)
        _get_text2_transform_8020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 29), self_8019, '_get_text2_transform')
        # Calling _get_text2_transform(args, kwargs) (line 426)
        _get_text2_transform_call_result_8022 = invoke(stypy.reporting.localization.Localization(__file__, 426, 29), _get_text2_transform_8020, *[], **kwargs_8021)
        
        # Assigning a type to the variable 'call_assignment_6964' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'call_assignment_6964', _get_text2_transform_call_result_8022)
        
        # Assigning a Call to a Name (line 426):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_8025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 8), 'int')
        # Processing the call keyword arguments
        kwargs_8026 = {}
        # Getting the type of 'call_assignment_6964' (line 426)
        call_assignment_6964_8023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'call_assignment_6964', False)
        # Obtaining the member '__getitem__' of a type (line 426)
        getitem___8024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 8), call_assignment_6964_8023, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_8027 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___8024, *[int_8025], **kwargs_8026)
        
        # Assigning a type to the variable 'call_assignment_6965' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'call_assignment_6965', getitem___call_result_8027)
        
        # Assigning a Name to a Name (line 426):
        # Getting the type of 'call_assignment_6965' (line 426)
        call_assignment_6965_8028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'call_assignment_6965')
        # Assigning a type to the variable 'trans' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'trans', call_assignment_6965_8028)
        
        # Assigning a Call to a Name (line 426):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_8031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 8), 'int')
        # Processing the call keyword arguments
        kwargs_8032 = {}
        # Getting the type of 'call_assignment_6964' (line 426)
        call_assignment_6964_8029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'call_assignment_6964', False)
        # Obtaining the member '__getitem__' of a type (line 426)
        getitem___8030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 8), call_assignment_6964_8029, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_8033 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___8030, *[int_8031], **kwargs_8032)
        
        # Assigning a type to the variable 'call_assignment_6966' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'call_assignment_6966', getitem___call_result_8033)
        
        # Assigning a Name to a Name (line 426):
        # Getting the type of 'call_assignment_6966' (line 426)
        call_assignment_6966_8034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'call_assignment_6966')
        # Assigning a type to the variable 'vert' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 15), 'vert', call_assignment_6966_8034)
        
        # Assigning a Call to a Name (line 426):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_8037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 8), 'int')
        # Processing the call keyword arguments
        kwargs_8038 = {}
        # Getting the type of 'call_assignment_6964' (line 426)
        call_assignment_6964_8035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'call_assignment_6964', False)
        # Obtaining the member '__getitem__' of a type (line 426)
        getitem___8036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 426, 8), call_assignment_6964_8035, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_8039 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___8036, *[int_8037], **kwargs_8038)
        
        # Assigning a type to the variable 'call_assignment_6967' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'call_assignment_6967', getitem___call_result_8039)
        
        # Assigning a Name to a Name (line 426):
        # Getting the type of 'call_assignment_6967' (line 426)
        call_assignment_6967_8040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 8), 'call_assignment_6967')
        # Assigning a type to the variable 'horiz' (line 426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 426, 21), 'horiz', call_assignment_6967_8040)
        
        # Assigning a Call to a Name (line 427):
        
        # Assigning a Call to a Name (line 427):
        
        # Call to Text(...): (line 427)
        # Processing the call keyword arguments (line 427)
        int_8043 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 14), 'int')
        keyword_8044 = int_8043
        int_8045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 19), 'int')
        keyword_8046 = int_8045
        
        # Call to FontProperties(...): (line 429)
        # Processing the call keyword arguments (line 429)
        # Getting the type of 'self' (line 429)
        self_8049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 60), 'self', False)
        # Obtaining the member '_labelsize' of a type (line 429)
        _labelsize_8050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 60), self_8049, '_labelsize')
        keyword_8051 = _labelsize_8050
        kwargs_8052 = {'size': keyword_8051}
        # Getting the type of 'font_manager' (line 429)
        font_manager_8047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 27), 'font_manager', False)
        # Obtaining the member 'FontProperties' of a type (line 429)
        FontProperties_8048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 429, 27), font_manager_8047, 'FontProperties')
        # Calling FontProperties(args, kwargs) (line 429)
        FontProperties_call_result_8053 = invoke(stypy.reporting.localization.Localization(__file__, 429, 27), FontProperties_8048, *[], **kwargs_8052)
        
        keyword_8054 = FontProperties_call_result_8053
        # Getting the type of 'self' (line 430)
        self_8055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 18), 'self', False)
        # Obtaining the member '_labelcolor' of a type (line 430)
        _labelcolor_8056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 430, 18), self_8055, '_labelcolor')
        keyword_8057 = _labelcolor_8056
        # Getting the type of 'vert' (line 431)
        vert_8058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 30), 'vert', False)
        keyword_8059 = vert_8058
        # Getting the type of 'horiz' (line 432)
        horiz_8060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 32), 'horiz', False)
        keyword_8061 = horiz_8060
        kwargs_8062 = {'color': keyword_8057, 'fontproperties': keyword_8054, 'verticalalignment': keyword_8059, 'y': keyword_8046, 'x': keyword_8044, 'horizontalalignment': keyword_8061}
        # Getting the type of 'mtext' (line 427)
        mtext_8041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 12), 'mtext', False)
        # Obtaining the member 'Text' of a type (line 427)
        Text_8042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 12), mtext_8041, 'Text')
        # Calling Text(args, kwargs) (line 427)
        Text_call_result_8063 = invoke(stypy.reporting.localization.Localization(__file__, 427, 12), Text_8042, *[], **kwargs_8062)
        
        # Assigning a type to the variable 't' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 8), 't', Text_call_result_8063)
        
        # Call to set_transform(...): (line 434)
        # Processing the call arguments (line 434)
        # Getting the type of 'trans' (line 434)
        trans_8066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 24), 'trans', False)
        # Processing the call keyword arguments (line 434)
        kwargs_8067 = {}
        # Getting the type of 't' (line 434)
        t_8064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 't', False)
        # Obtaining the member 'set_transform' of a type (line 434)
        set_transform_8065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 8), t_8064, 'set_transform')
        # Calling set_transform(args, kwargs) (line 434)
        set_transform_call_result_8068 = invoke(stypy.reporting.localization.Localization(__file__, 434, 8), set_transform_8065, *[trans_8066], **kwargs_8067)
        
        
        # Call to _set_artist_props(...): (line 435)
        # Processing the call arguments (line 435)
        # Getting the type of 't' (line 435)
        t_8071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 31), 't', False)
        # Processing the call keyword arguments (line 435)
        kwargs_8072 = {}
        # Getting the type of 'self' (line 435)
        self_8069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 435)
        _set_artist_props_8070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 8), self_8069, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 435)
        _set_artist_props_call_result_8073 = invoke(stypy.reporting.localization.Localization(__file__, 435, 8), _set_artist_props_8070, *[t_8071], **kwargs_8072)
        
        # Getting the type of 't' (line 436)
        t_8074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 15), 't')
        # Assigning a type to the variable 'stypy_return_type' (line 436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 8), 'stypy_return_type', t_8074)
        
        # ################# End of '_get_text2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text2' in the type store
        # Getting the type of 'stypy_return_type' (line 422)
        stypy_return_type_8075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8075)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text2'
        return stypy_return_type_8075


    @norecursion
    def _get_tick1line(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_tick1line'
        module_type_store = module_type_store.open_function_context('_get_tick1line', 438, 4, False)
        # Assigning a type to the variable 'self' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XTick._get_tick1line.__dict__.__setitem__('stypy_localization', localization)
        XTick._get_tick1line.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XTick._get_tick1line.__dict__.__setitem__('stypy_type_store', module_type_store)
        XTick._get_tick1line.__dict__.__setitem__('stypy_function_name', 'XTick._get_tick1line')
        XTick._get_tick1line.__dict__.__setitem__('stypy_param_names_list', [])
        XTick._get_tick1line.__dict__.__setitem__('stypy_varargs_param_name', None)
        XTick._get_tick1line.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XTick._get_tick1line.__dict__.__setitem__('stypy_call_defaults', defaults)
        XTick._get_tick1line.__dict__.__setitem__('stypy_call_varargs', varargs)
        XTick._get_tick1line.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XTick._get_tick1line.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XTick._get_tick1line', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_tick1line', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_tick1line(...)' code ##################

        unicode_8076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 439, 8), 'unicode', u'Get the default line2D instance')
        
        # Assigning a Call to a Name (line 441):
        
        # Assigning a Call to a Name (line 441):
        
        # Call to Line2D(...): (line 441)
        # Processing the call keyword arguments (line 441)
        
        # Obtaining an instance of the builtin type 'tuple' (line 441)
        tuple_8079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 441, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 441)
        # Adding element type (line 441)
        int_8080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 441, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 441, 33), tuple_8079, int_8080)
        
        keyword_8081 = tuple_8079
        
        # Obtaining an instance of the builtin type 'tuple' (line 441)
        tuple_8082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 441, 45), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 441)
        # Adding element type (line 441)
        int_8083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 441, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 441, 45), tuple_8082, int_8083)
        
        keyword_8084 = tuple_8082
        # Getting the type of 'self' (line 441)
        self_8085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 56), 'self', False)
        # Obtaining the member '_color' of a type (line 441)
        _color_8086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 56), self_8085, '_color')
        keyword_8087 = _color_8086
        unicode_8088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 442, 36), 'unicode', u'None')
        keyword_8089 = unicode_8088
        
        # Obtaining the type of the subscript
        int_8090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 442, 69), 'int')
        # Getting the type of 'self' (line 442)
        self_8091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 51), 'self', False)
        # Obtaining the member '_tickmarkers' of a type (line 442)
        _tickmarkers_8092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 51), self_8091, '_tickmarkers')
        # Obtaining the member '__getitem__' of a type (line 442)
        getitem___8093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 51), _tickmarkers_8092, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 442)
        subscript_call_result_8094 = invoke(stypy.reporting.localization.Localization(__file__, 442, 51), getitem___8093, int_8090)
        
        keyword_8095 = subscript_call_result_8094
        # Getting the type of 'self' (line 443)
        self_8096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 443, 37), 'self', False)
        # Obtaining the member '_size' of a type (line 443)
        _size_8097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 443, 37), self_8096, '_size')
        keyword_8098 = _size_8097
        # Getting the type of 'self' (line 444)
        self_8099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 42), 'self', False)
        # Obtaining the member '_width' of a type (line 444)
        _width_8100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 42), self_8099, '_width')
        keyword_8101 = _width_8100
        # Getting the type of 'self' (line 444)
        self_8102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 62), 'self', False)
        # Obtaining the member '_zorder' of a type (line 444)
        _zorder_8103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 62), self_8102, '_zorder')
        keyword_8104 = _zorder_8103
        kwargs_8105 = {'color': keyword_8087, 'markersize': keyword_8098, 'markeredgewidth': keyword_8101, 'ydata': keyword_8084, 'xdata': keyword_8081, 'marker': keyword_8095, 'zorder': keyword_8104, 'linestyle': keyword_8089}
        # Getting the type of 'mlines' (line 441)
        mlines_8077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 12), 'mlines', False)
        # Obtaining the member 'Line2D' of a type (line 441)
        Line2D_8078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 12), mlines_8077, 'Line2D')
        # Calling Line2D(args, kwargs) (line 441)
        Line2D_call_result_8106 = invoke(stypy.reporting.localization.Localization(__file__, 441, 12), Line2D_8078, *[], **kwargs_8105)
        
        # Assigning a type to the variable 'l' (line 441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 8), 'l', Line2D_call_result_8106)
        
        # Call to set_transform(...): (line 445)
        # Processing the call arguments (line 445)
        
        # Call to get_xaxis_transform(...): (line 445)
        # Processing the call keyword arguments (line 445)
        unicode_8112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 60), 'unicode', u'tick1')
        keyword_8113 = unicode_8112
        kwargs_8114 = {'which': keyword_8113}
        # Getting the type of 'self' (line 445)
        self_8109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 24), 'self', False)
        # Obtaining the member 'axes' of a type (line 445)
        axes_8110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 24), self_8109, 'axes')
        # Obtaining the member 'get_xaxis_transform' of a type (line 445)
        get_xaxis_transform_8111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 24), axes_8110, 'get_xaxis_transform')
        # Calling get_xaxis_transform(args, kwargs) (line 445)
        get_xaxis_transform_call_result_8115 = invoke(stypy.reporting.localization.Localization(__file__, 445, 24), get_xaxis_transform_8111, *[], **kwargs_8114)
        
        # Processing the call keyword arguments (line 445)
        kwargs_8116 = {}
        # Getting the type of 'l' (line 445)
        l_8107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 8), 'l', False)
        # Obtaining the member 'set_transform' of a type (line 445)
        set_transform_8108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 8), l_8107, 'set_transform')
        # Calling set_transform(args, kwargs) (line 445)
        set_transform_call_result_8117 = invoke(stypy.reporting.localization.Localization(__file__, 445, 8), set_transform_8108, *[get_xaxis_transform_call_result_8115], **kwargs_8116)
        
        
        # Call to _set_artist_props(...): (line 446)
        # Processing the call arguments (line 446)
        # Getting the type of 'l' (line 446)
        l_8120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 31), 'l', False)
        # Processing the call keyword arguments (line 446)
        kwargs_8121 = {}
        # Getting the type of 'self' (line 446)
        self_8118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 446)
        _set_artist_props_8119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 8), self_8118, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 446)
        _set_artist_props_call_result_8122 = invoke(stypy.reporting.localization.Localization(__file__, 446, 8), _set_artist_props_8119, *[l_8120], **kwargs_8121)
        
        # Getting the type of 'l' (line 447)
        l_8123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 15), 'l')
        # Assigning a type to the variable 'stypy_return_type' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 8), 'stypy_return_type', l_8123)
        
        # ################# End of '_get_tick1line(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_tick1line' in the type store
        # Getting the type of 'stypy_return_type' (line 438)
        stypy_return_type_8124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8124)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_tick1line'
        return stypy_return_type_8124


    @norecursion
    def _get_tick2line(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_tick2line'
        module_type_store = module_type_store.open_function_context('_get_tick2line', 449, 4, False)
        # Assigning a type to the variable 'self' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XTick._get_tick2line.__dict__.__setitem__('stypy_localization', localization)
        XTick._get_tick2line.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XTick._get_tick2line.__dict__.__setitem__('stypy_type_store', module_type_store)
        XTick._get_tick2line.__dict__.__setitem__('stypy_function_name', 'XTick._get_tick2line')
        XTick._get_tick2line.__dict__.__setitem__('stypy_param_names_list', [])
        XTick._get_tick2line.__dict__.__setitem__('stypy_varargs_param_name', None)
        XTick._get_tick2line.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XTick._get_tick2line.__dict__.__setitem__('stypy_call_defaults', defaults)
        XTick._get_tick2line.__dict__.__setitem__('stypy_call_varargs', varargs)
        XTick._get_tick2line.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XTick._get_tick2line.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XTick._get_tick2line', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_tick2line', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_tick2line(...)' code ##################

        unicode_8125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, 8), 'unicode', u'Get the default line2D instance')
        
        # Assigning a Call to a Name (line 452):
        
        # Assigning a Call to a Name (line 452):
        
        # Call to Line2D(...): (line 452)
        # Processing the call keyword arguments (line 452)
        
        # Obtaining an instance of the builtin type 'tuple' (line 452)
        tuple_8128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 452)
        # Adding element type (line 452)
        int_8129 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 452, 33), tuple_8128, int_8129)
        
        keyword_8130 = tuple_8128
        
        # Obtaining an instance of the builtin type 'tuple' (line 452)
        tuple_8131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, 45), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 452)
        # Adding element type (line 452)
        int_8132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, 45), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 452, 45), tuple_8131, int_8132)
        
        keyword_8133 = tuple_8131
        # Getting the type of 'self' (line 453)
        self_8134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 453, 32), 'self', False)
        # Obtaining the member '_color' of a type (line 453)
        _color_8135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 453, 32), self_8134, '_color')
        keyword_8136 = _color_8135
        unicode_8137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 454, 36), 'unicode', u'None')
        keyword_8138 = unicode_8137
        
        # Obtaining the type of the subscript
        int_8139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 455, 51), 'int')
        # Getting the type of 'self' (line 455)
        self_8140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 33), 'self', False)
        # Obtaining the member '_tickmarkers' of a type (line 455)
        _tickmarkers_8141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 33), self_8140, '_tickmarkers')
        # Obtaining the member '__getitem__' of a type (line 455)
        getitem___8142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 455, 33), _tickmarkers_8141, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 455)
        subscript_call_result_8143 = invoke(stypy.reporting.localization.Localization(__file__, 455, 33), getitem___8142, int_8139)
        
        keyword_8144 = subscript_call_result_8143
        # Getting the type of 'self' (line 456)
        self_8145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 456, 37), 'self', False)
        # Obtaining the member '_size' of a type (line 456)
        _size_8146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 456, 37), self_8145, '_size')
        keyword_8147 = _size_8146
        # Getting the type of 'self' (line 457)
        self_8148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 42), 'self', False)
        # Obtaining the member '_width' of a type (line 457)
        _width_8149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 42), self_8148, '_width')
        keyword_8150 = _width_8149
        # Getting the type of 'self' (line 458)
        self_8151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 33), 'self', False)
        # Obtaining the member '_zorder' of a type (line 458)
        _zorder_8152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 33), self_8151, '_zorder')
        keyword_8153 = _zorder_8152
        kwargs_8154 = {'color': keyword_8136, 'markersize': keyword_8147, 'markeredgewidth': keyword_8150, 'ydata': keyword_8133, 'xdata': keyword_8130, 'marker': keyword_8144, 'zorder': keyword_8153, 'linestyle': keyword_8138}
        # Getting the type of 'mlines' (line 452)
        mlines_8126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 12), 'mlines', False)
        # Obtaining the member 'Line2D' of a type (line 452)
        Line2D_8127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 12), mlines_8126, 'Line2D')
        # Calling Line2D(args, kwargs) (line 452)
        Line2D_call_result_8155 = invoke(stypy.reporting.localization.Localization(__file__, 452, 12), Line2D_8127, *[], **kwargs_8154)
        
        # Assigning a type to the variable 'l' (line 452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 8), 'l', Line2D_call_result_8155)
        
        # Call to set_transform(...): (line 460)
        # Processing the call arguments (line 460)
        
        # Call to get_xaxis_transform(...): (line 460)
        # Processing the call keyword arguments (line 460)
        unicode_8161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 460, 60), 'unicode', u'tick2')
        keyword_8162 = unicode_8161
        kwargs_8163 = {'which': keyword_8162}
        # Getting the type of 'self' (line 460)
        self_8158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 24), 'self', False)
        # Obtaining the member 'axes' of a type (line 460)
        axes_8159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 24), self_8158, 'axes')
        # Obtaining the member 'get_xaxis_transform' of a type (line 460)
        get_xaxis_transform_8160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 24), axes_8159, 'get_xaxis_transform')
        # Calling get_xaxis_transform(args, kwargs) (line 460)
        get_xaxis_transform_call_result_8164 = invoke(stypy.reporting.localization.Localization(__file__, 460, 24), get_xaxis_transform_8160, *[], **kwargs_8163)
        
        # Processing the call keyword arguments (line 460)
        kwargs_8165 = {}
        # Getting the type of 'l' (line 460)
        l_8156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'l', False)
        # Obtaining the member 'set_transform' of a type (line 460)
        set_transform_8157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 8), l_8156, 'set_transform')
        # Calling set_transform(args, kwargs) (line 460)
        set_transform_call_result_8166 = invoke(stypy.reporting.localization.Localization(__file__, 460, 8), set_transform_8157, *[get_xaxis_transform_call_result_8164], **kwargs_8165)
        
        
        # Call to _set_artist_props(...): (line 461)
        # Processing the call arguments (line 461)
        # Getting the type of 'l' (line 461)
        l_8169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 31), 'l', False)
        # Processing the call keyword arguments (line 461)
        kwargs_8170 = {}
        # Getting the type of 'self' (line 461)
        self_8167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 461)
        _set_artist_props_8168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 8), self_8167, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 461)
        _set_artist_props_call_result_8171 = invoke(stypy.reporting.localization.Localization(__file__, 461, 8), _set_artist_props_8168, *[l_8169], **kwargs_8170)
        
        # Getting the type of 'l' (line 462)
        l_8172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 15), 'l')
        # Assigning a type to the variable 'stypy_return_type' (line 462)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 462, 8), 'stypy_return_type', l_8172)
        
        # ################# End of '_get_tick2line(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_tick2line' in the type store
        # Getting the type of 'stypy_return_type' (line 449)
        stypy_return_type_8173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8173)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_tick2line'
        return stypy_return_type_8173


    @norecursion
    def _get_gridline(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_gridline'
        module_type_store = module_type_store.open_function_context('_get_gridline', 464, 4, False)
        # Assigning a type to the variable 'self' (line 465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 465, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XTick._get_gridline.__dict__.__setitem__('stypy_localization', localization)
        XTick._get_gridline.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XTick._get_gridline.__dict__.__setitem__('stypy_type_store', module_type_store)
        XTick._get_gridline.__dict__.__setitem__('stypy_function_name', 'XTick._get_gridline')
        XTick._get_gridline.__dict__.__setitem__('stypy_param_names_list', [])
        XTick._get_gridline.__dict__.__setitem__('stypy_varargs_param_name', None)
        XTick._get_gridline.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XTick._get_gridline.__dict__.__setitem__('stypy_call_defaults', defaults)
        XTick._get_gridline.__dict__.__setitem__('stypy_call_varargs', varargs)
        XTick._get_gridline.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XTick._get_gridline.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XTick._get_gridline', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_gridline', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_gridline(...)' code ##################

        unicode_8174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 465, 8), 'unicode', u'Get the default line2D instance')
        
        # Assigning a Call to a Name (line 467):
        
        # Assigning a Call to a Name (line 467):
        
        # Call to Line2D(...): (line 467)
        # Processing the call keyword arguments (line 467)
        
        # Obtaining an instance of the builtin type 'tuple' (line 467)
        tuple_8177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 467)
        # Adding element type (line 467)
        float_8178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 33), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 467, 33), tuple_8177, float_8178)
        # Adding element type (line 467)
        float_8179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 38), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 467, 33), tuple_8177, float_8179)
        
        keyword_8180 = tuple_8177
        
        # Obtaining an instance of the builtin type 'tuple' (line 467)
        tuple_8181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 51), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 467)
        # Adding element type (line 467)
        int_8182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 51), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 467, 51), tuple_8181, int_8182)
        # Adding element type (line 467)
        float_8183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 54), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 467, 51), tuple_8181, float_8183)
        
        keyword_8184 = tuple_8181
        
        # Obtaining the type of the subscript
        unicode_8185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 41), 'unicode', u'grid.color')
        # Getting the type of 'rcParams' (line 468)
        rcParams_8186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 32), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 468)
        getitem___8187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 32), rcParams_8186, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 468)
        subscript_call_result_8188 = invoke(stypy.reporting.localization.Localization(__file__, 468, 32), getitem___8187, unicode_8185)
        
        keyword_8189 = subscript_call_result_8188
        
        # Obtaining the type of the subscript
        unicode_8190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 45), 'unicode', u'grid.linestyle')
        # Getting the type of 'rcParams' (line 469)
        rcParams_8191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 36), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 469)
        getitem___8192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 36), rcParams_8191, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 469)
        subscript_call_result_8193 = invoke(stypy.reporting.localization.Localization(__file__, 469, 36), getitem___8192, unicode_8190)
        
        keyword_8194 = subscript_call_result_8193
        
        # Obtaining the type of the subscript
        unicode_8195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 45), 'unicode', u'grid.linewidth')
        # Getting the type of 'rcParams' (line 470)
        rcParams_8196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 36), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 470)
        getitem___8197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 36), rcParams_8196, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 470)
        subscript_call_result_8198 = invoke(stypy.reporting.localization.Localization(__file__, 470, 36), getitem___8197, unicode_8195)
        
        keyword_8199 = subscript_call_result_8198
        
        # Obtaining the type of the subscript
        unicode_8200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 471, 41), 'unicode', u'grid.alpha')
        # Getting the type of 'rcParams' (line 471)
        rcParams_8201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 32), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 471)
        getitem___8202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 32), rcParams_8201, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 471)
        subscript_call_result_8203 = invoke(stypy.reporting.localization.Localization(__file__, 471, 32), getitem___8202, unicode_8200)
        
        keyword_8204 = subscript_call_result_8203
        int_8205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 472, 37), 'int')
        keyword_8206 = int_8205
        kwargs_8207 = {'color': keyword_8189, 'markersize': keyword_8206, 'ydata': keyword_8184, 'xdata': keyword_8180, 'alpha': keyword_8204, 'linewidth': keyword_8199, 'linestyle': keyword_8194}
        # Getting the type of 'mlines' (line 467)
        mlines_8175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 12), 'mlines', False)
        # Obtaining the member 'Line2D' of a type (line 467)
        Line2D_8176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 12), mlines_8175, 'Line2D')
        # Calling Line2D(args, kwargs) (line 467)
        Line2D_call_result_8208 = invoke(stypy.reporting.localization.Localization(__file__, 467, 12), Line2D_8176, *[], **kwargs_8207)
        
        # Assigning a type to the variable 'l' (line 467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 8), 'l', Line2D_call_result_8208)
        
        # Call to set_transform(...): (line 473)
        # Processing the call arguments (line 473)
        
        # Call to get_xaxis_transform(...): (line 473)
        # Processing the call keyword arguments (line 473)
        unicode_8214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 60), 'unicode', u'grid')
        keyword_8215 = unicode_8214
        kwargs_8216 = {'which': keyword_8215}
        # Getting the type of 'self' (line 473)
        self_8211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 24), 'self', False)
        # Obtaining the member 'axes' of a type (line 473)
        axes_8212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 24), self_8211, 'axes')
        # Obtaining the member 'get_xaxis_transform' of a type (line 473)
        get_xaxis_transform_8213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 24), axes_8212, 'get_xaxis_transform')
        # Calling get_xaxis_transform(args, kwargs) (line 473)
        get_xaxis_transform_call_result_8217 = invoke(stypy.reporting.localization.Localization(__file__, 473, 24), get_xaxis_transform_8213, *[], **kwargs_8216)
        
        # Processing the call keyword arguments (line 473)
        kwargs_8218 = {}
        # Getting the type of 'l' (line 473)
        l_8209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 473, 8), 'l', False)
        # Obtaining the member 'set_transform' of a type (line 473)
        set_transform_8210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 473, 8), l_8209, 'set_transform')
        # Calling set_transform(args, kwargs) (line 473)
        set_transform_call_result_8219 = invoke(stypy.reporting.localization.Localization(__file__, 473, 8), set_transform_8210, *[get_xaxis_transform_call_result_8217], **kwargs_8218)
        
        
        # Assigning a Name to a Attribute (line 474):
        
        # Assigning a Name to a Attribute (line 474):
        # Getting the type of 'GRIDLINE_INTERPOLATION_STEPS' (line 474)
        GRIDLINE_INTERPOLATION_STEPS_8220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 44), 'GRIDLINE_INTERPOLATION_STEPS')
        
        # Call to get_path(...): (line 474)
        # Processing the call keyword arguments (line 474)
        kwargs_8223 = {}
        # Getting the type of 'l' (line 474)
        l_8221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 8), 'l', False)
        # Obtaining the member 'get_path' of a type (line 474)
        get_path_8222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 8), l_8221, 'get_path')
        # Calling get_path(args, kwargs) (line 474)
        get_path_call_result_8224 = invoke(stypy.reporting.localization.Localization(__file__, 474, 8), get_path_8222, *[], **kwargs_8223)
        
        # Setting the type of the member '_interpolation_steps' of a type (line 474)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 8), get_path_call_result_8224, '_interpolation_steps', GRIDLINE_INTERPOLATION_STEPS_8220)
        
        # Call to _set_artist_props(...): (line 475)
        # Processing the call arguments (line 475)
        # Getting the type of 'l' (line 475)
        l_8227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 31), 'l', False)
        # Processing the call keyword arguments (line 475)
        kwargs_8228 = {}
        # Getting the type of 'self' (line 475)
        self_8225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 475)
        _set_artist_props_8226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 8), self_8225, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 475)
        _set_artist_props_call_result_8229 = invoke(stypy.reporting.localization.Localization(__file__, 475, 8), _set_artist_props_8226, *[l_8227], **kwargs_8228)
        
        # Getting the type of 'l' (line 477)
        l_8230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 15), 'l')
        # Assigning a type to the variable 'stypy_return_type' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'stypy_return_type', l_8230)
        
        # ################# End of '_get_gridline(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_gridline' in the type store
        # Getting the type of 'stypy_return_type' (line 464)
        stypy_return_type_8231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8231)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_gridline'
        return stypy_return_type_8231


    @norecursion
    def update_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_position'
        module_type_store = module_type_store.open_function_context('update_position', 479, 4, False)
        # Assigning a type to the variable 'self' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XTick.update_position.__dict__.__setitem__('stypy_localization', localization)
        XTick.update_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XTick.update_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        XTick.update_position.__dict__.__setitem__('stypy_function_name', 'XTick.update_position')
        XTick.update_position.__dict__.__setitem__('stypy_param_names_list', ['loc'])
        XTick.update_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        XTick.update_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XTick.update_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        XTick.update_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        XTick.update_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XTick.update_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XTick.update_position', ['loc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_position', localization, ['loc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_position(...)' code ##################

        unicode_8232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 8), 'unicode', u'Set the location of tick in data coords with scalar *loc*')
        
        # Getting the type of 'self' (line 481)
        self_8233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 11), 'self')
        # Obtaining the member 'tick1On' of a type (line 481)
        tick1On_8234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 11), self_8233, 'tick1On')
        # Testing the type of an if condition (line 481)
        if_condition_8235 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 481, 8), tick1On_8234)
        # Assigning a type to the variable 'if_condition_8235' (line 481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 8), 'if_condition_8235', if_condition_8235)
        # SSA begins for if statement (line 481)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_xdata(...): (line 482)
        # Processing the call arguments (line 482)
        
        # Obtaining an instance of the builtin type 'tuple' (line 482)
        tuple_8239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 482)
        # Adding element type (line 482)
        # Getting the type of 'loc' (line 482)
        loc_8240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 38), 'loc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 482, 38), tuple_8239, loc_8240)
        
        # Processing the call keyword arguments (line 482)
        kwargs_8241 = {}
        # Getting the type of 'self' (line 482)
        self_8236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'self', False)
        # Obtaining the member 'tick1line' of a type (line 482)
        tick1line_8237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 12), self_8236, 'tick1line')
        # Obtaining the member 'set_xdata' of a type (line 482)
        set_xdata_8238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 12), tick1line_8237, 'set_xdata')
        # Calling set_xdata(args, kwargs) (line 482)
        set_xdata_call_result_8242 = invoke(stypy.reporting.localization.Localization(__file__, 482, 12), set_xdata_8238, *[tuple_8239], **kwargs_8241)
        
        # SSA join for if statement (line 481)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 483)
        self_8243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 483, 11), 'self')
        # Obtaining the member 'tick2On' of a type (line 483)
        tick2On_8244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 483, 11), self_8243, 'tick2On')
        # Testing the type of an if condition (line 483)
        if_condition_8245 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 483, 8), tick2On_8244)
        # Assigning a type to the variable 'if_condition_8245' (line 483)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 483, 8), 'if_condition_8245', if_condition_8245)
        # SSA begins for if statement (line 483)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_xdata(...): (line 484)
        # Processing the call arguments (line 484)
        
        # Obtaining an instance of the builtin type 'tuple' (line 484)
        tuple_8249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 484, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 484)
        # Adding element type (line 484)
        # Getting the type of 'loc' (line 484)
        loc_8250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 38), 'loc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 484, 38), tuple_8249, loc_8250)
        
        # Processing the call keyword arguments (line 484)
        kwargs_8251 = {}
        # Getting the type of 'self' (line 484)
        self_8246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 12), 'self', False)
        # Obtaining the member 'tick2line' of a type (line 484)
        tick2line_8247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 12), self_8246, 'tick2line')
        # Obtaining the member 'set_xdata' of a type (line 484)
        set_xdata_8248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 484, 12), tick2line_8247, 'set_xdata')
        # Calling set_xdata(args, kwargs) (line 484)
        set_xdata_call_result_8252 = invoke(stypy.reporting.localization.Localization(__file__, 484, 12), set_xdata_8248, *[tuple_8249], **kwargs_8251)
        
        # SSA join for if statement (line 483)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 485)
        self_8253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 11), 'self')
        # Obtaining the member 'gridOn' of a type (line 485)
        gridOn_8254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 11), self_8253, 'gridOn')
        # Testing the type of an if condition (line 485)
        if_condition_8255 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 485, 8), gridOn_8254)
        # Assigning a type to the variable 'if_condition_8255' (line 485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 8), 'if_condition_8255', if_condition_8255)
        # SSA begins for if statement (line 485)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_xdata(...): (line 486)
        # Processing the call arguments (line 486)
        
        # Obtaining an instance of the builtin type 'tuple' (line 486)
        tuple_8259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 486, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 486)
        # Adding element type (line 486)
        # Getting the type of 'loc' (line 486)
        loc_8260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 37), 'loc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 486, 37), tuple_8259, loc_8260)
        
        # Processing the call keyword arguments (line 486)
        kwargs_8261 = {}
        # Getting the type of 'self' (line 486)
        self_8256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 12), 'self', False)
        # Obtaining the member 'gridline' of a type (line 486)
        gridline_8257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 12), self_8256, 'gridline')
        # Obtaining the member 'set_xdata' of a type (line 486)
        set_xdata_8258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 12), gridline_8257, 'set_xdata')
        # Calling set_xdata(args, kwargs) (line 486)
        set_xdata_call_result_8262 = invoke(stypy.reporting.localization.Localization(__file__, 486, 12), set_xdata_8258, *[tuple_8259], **kwargs_8261)
        
        # SSA join for if statement (line 485)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 487)
        self_8263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 11), 'self')
        # Obtaining the member 'label1On' of a type (line 487)
        label1On_8264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 11), self_8263, 'label1On')
        # Testing the type of an if condition (line 487)
        if_condition_8265 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 487, 8), label1On_8264)
        # Assigning a type to the variable 'if_condition_8265' (line 487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 8), 'if_condition_8265', if_condition_8265)
        # SSA begins for if statement (line 487)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_x(...): (line 488)
        # Processing the call arguments (line 488)
        # Getting the type of 'loc' (line 488)
        loc_8269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 30), 'loc', False)
        # Processing the call keyword arguments (line 488)
        kwargs_8270 = {}
        # Getting the type of 'self' (line 488)
        self_8266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 12), 'self', False)
        # Obtaining the member 'label1' of a type (line 488)
        label1_8267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 12), self_8266, 'label1')
        # Obtaining the member 'set_x' of a type (line 488)
        set_x_8268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 12), label1_8267, 'set_x')
        # Calling set_x(args, kwargs) (line 488)
        set_x_call_result_8271 = invoke(stypy.reporting.localization.Localization(__file__, 488, 12), set_x_8268, *[loc_8269], **kwargs_8270)
        
        # SSA join for if statement (line 487)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 489)
        self_8272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 11), 'self')
        # Obtaining the member 'label2On' of a type (line 489)
        label2On_8273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 11), self_8272, 'label2On')
        # Testing the type of an if condition (line 489)
        if_condition_8274 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 489, 8), label2On_8273)
        # Assigning a type to the variable 'if_condition_8274' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'if_condition_8274', if_condition_8274)
        # SSA begins for if statement (line 489)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_x(...): (line 490)
        # Processing the call arguments (line 490)
        # Getting the type of 'loc' (line 490)
        loc_8278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 30), 'loc', False)
        # Processing the call keyword arguments (line 490)
        kwargs_8279 = {}
        # Getting the type of 'self' (line 490)
        self_8275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 12), 'self', False)
        # Obtaining the member 'label2' of a type (line 490)
        label2_8276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 12), self_8275, 'label2')
        # Obtaining the member 'set_x' of a type (line 490)
        set_x_8277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 12), label2_8276, 'set_x')
        # Calling set_x(args, kwargs) (line 490)
        set_x_call_result_8280 = invoke(stypy.reporting.localization.Localization(__file__, 490, 12), set_x_8277, *[loc_8278], **kwargs_8279)
        
        # SSA join for if statement (line 489)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 492):
        
        # Assigning a Name to a Attribute (line 492):
        # Getting the type of 'loc' (line 492)
        loc_8281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 20), 'loc')
        # Getting the type of 'self' (line 492)
        self_8282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'self')
        # Setting the type of the member '_loc' of a type (line 492)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 8), self_8282, '_loc', loc_8281)
        
        # Assigning a Name to a Attribute (line 493):
        
        # Assigning a Name to a Attribute (line 493):
        # Getting the type of 'True' (line 493)
        True_8283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 21), 'True')
        # Getting the type of 'self' (line 493)
        self_8284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 493)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 8), self_8284, 'stale', True_8283)
        
        # ################# End of 'update_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_position' in the type store
        # Getting the type of 'stypy_return_type' (line 479)
        stypy_return_type_8285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8285)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_position'
        return stypy_return_type_8285


    @norecursion
    def get_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_view_interval'
        module_type_store = module_type_store.open_function_context('get_view_interval', 495, 4, False)
        # Assigning a type to the variable 'self' (line 496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XTick.get_view_interval.__dict__.__setitem__('stypy_localization', localization)
        XTick.get_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XTick.get_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        XTick.get_view_interval.__dict__.__setitem__('stypy_function_name', 'XTick.get_view_interval')
        XTick.get_view_interval.__dict__.__setitem__('stypy_param_names_list', [])
        XTick.get_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        XTick.get_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XTick.get_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        XTick.get_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        XTick.get_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XTick.get_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XTick.get_view_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_view_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_view_interval(...)' code ##################

        unicode_8286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 496, 8), 'unicode', u'return the Interval instance for this axis view limits')
        # Getting the type of 'self' (line 497)
        self_8287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 15), 'self')
        # Obtaining the member 'axes' of a type (line 497)
        axes_8288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 15), self_8287, 'axes')
        # Obtaining the member 'viewLim' of a type (line 497)
        viewLim_8289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 15), axes_8288, 'viewLim')
        # Obtaining the member 'intervalx' of a type (line 497)
        intervalx_8290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 15), viewLim_8289, 'intervalx')
        # Assigning a type to the variable 'stypy_return_type' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'stypy_return_type', intervalx_8290)
        
        # ################# End of 'get_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 495)
        stypy_return_type_8291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8291)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_view_interval'
        return stypy_return_type_8291


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 378, 0, False)
        # Assigning a type to the variable 'self' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XTick.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'XTick' (line 378)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 378, 0), 'XTick', XTick)

# Assigning a Str to a Name (line 383):
unicode_8292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 383, 15), 'unicode', u'xtick')
# Getting the type of 'XTick'
XTick_8293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'XTick')
# Setting the type of the member '__name__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), XTick_8293, '__name__', unicode_8292)
# Declaration of the 'YTick' class
# Getting the type of 'Tick' (line 500)
Tick_8294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 12), 'Tick')

class YTick(Tick_8294, ):
    unicode_8295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, (-1)), 'unicode', u'\n    Contains all the Artists needed to make a Y tick - the tick line,\n    the label text and the grid line\n    ')
    
    # Assigning a Str to a Name (line 505):

    @norecursion
    def _get_text1_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text1_transform'
        module_type_store = module_type_store.open_function_context('_get_text1_transform', 507, 4, False)
        # Assigning a type to the variable 'self' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YTick._get_text1_transform.__dict__.__setitem__('stypy_localization', localization)
        YTick._get_text1_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YTick._get_text1_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        YTick._get_text1_transform.__dict__.__setitem__('stypy_function_name', 'YTick._get_text1_transform')
        YTick._get_text1_transform.__dict__.__setitem__('stypy_param_names_list', [])
        YTick._get_text1_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        YTick._get_text1_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YTick._get_text1_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        YTick._get_text1_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        YTick._get_text1_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YTick._get_text1_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YTick._get_text1_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text1_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text1_transform(...)' code ##################

        
        # Call to get_yaxis_text1_transform(...): (line 508)
        # Processing the call arguments (line 508)
        # Getting the type of 'self' (line 508)
        self_8299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 51), 'self', False)
        # Obtaining the member '_pad' of a type (line 508)
        _pad_8300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 51), self_8299, '_pad')
        # Processing the call keyword arguments (line 508)
        kwargs_8301 = {}
        # Getting the type of 'self' (line 508)
        self_8296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 15), 'self', False)
        # Obtaining the member 'axes' of a type (line 508)
        axes_8297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 15), self_8296, 'axes')
        # Obtaining the member 'get_yaxis_text1_transform' of a type (line 508)
        get_yaxis_text1_transform_8298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 15), axes_8297, 'get_yaxis_text1_transform')
        # Calling get_yaxis_text1_transform(args, kwargs) (line 508)
        get_yaxis_text1_transform_call_result_8302 = invoke(stypy.reporting.localization.Localization(__file__, 508, 15), get_yaxis_text1_transform_8298, *[_pad_8300], **kwargs_8301)
        
        # Assigning a type to the variable 'stypy_return_type' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'stypy_return_type', get_yaxis_text1_transform_call_result_8302)
        
        # ################# End of '_get_text1_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text1_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 507)
        stypy_return_type_8303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8303)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text1_transform'
        return stypy_return_type_8303


    @norecursion
    def _get_text2_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text2_transform'
        module_type_store = module_type_store.open_function_context('_get_text2_transform', 510, 4, False)
        # Assigning a type to the variable 'self' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YTick._get_text2_transform.__dict__.__setitem__('stypy_localization', localization)
        YTick._get_text2_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YTick._get_text2_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        YTick._get_text2_transform.__dict__.__setitem__('stypy_function_name', 'YTick._get_text2_transform')
        YTick._get_text2_transform.__dict__.__setitem__('stypy_param_names_list', [])
        YTick._get_text2_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        YTick._get_text2_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YTick._get_text2_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        YTick._get_text2_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        YTick._get_text2_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YTick._get_text2_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YTick._get_text2_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text2_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text2_transform(...)' code ##################

        
        # Call to get_yaxis_text2_transform(...): (line 511)
        # Processing the call arguments (line 511)
        # Getting the type of 'self' (line 511)
        self_8307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 51), 'self', False)
        # Obtaining the member '_pad' of a type (line 511)
        _pad_8308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 51), self_8307, '_pad')
        # Processing the call keyword arguments (line 511)
        kwargs_8309 = {}
        # Getting the type of 'self' (line 511)
        self_8304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 15), 'self', False)
        # Obtaining the member 'axes' of a type (line 511)
        axes_8305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 15), self_8304, 'axes')
        # Obtaining the member 'get_yaxis_text2_transform' of a type (line 511)
        get_yaxis_text2_transform_8306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 15), axes_8305, 'get_yaxis_text2_transform')
        # Calling get_yaxis_text2_transform(args, kwargs) (line 511)
        get_yaxis_text2_transform_call_result_8310 = invoke(stypy.reporting.localization.Localization(__file__, 511, 15), get_yaxis_text2_transform_8306, *[_pad_8308], **kwargs_8309)
        
        # Assigning a type to the variable 'stypy_return_type' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'stypy_return_type', get_yaxis_text2_transform_call_result_8310)
        
        # ################# End of '_get_text2_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text2_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 510)
        stypy_return_type_8311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8311)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text2_transform'
        return stypy_return_type_8311


    @norecursion
    def apply_tickdir(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'apply_tickdir'
        module_type_store = module_type_store.open_function_context('apply_tickdir', 513, 4, False)
        # Assigning a type to the variable 'self' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YTick.apply_tickdir.__dict__.__setitem__('stypy_localization', localization)
        YTick.apply_tickdir.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YTick.apply_tickdir.__dict__.__setitem__('stypy_type_store', module_type_store)
        YTick.apply_tickdir.__dict__.__setitem__('stypy_function_name', 'YTick.apply_tickdir')
        YTick.apply_tickdir.__dict__.__setitem__('stypy_param_names_list', ['tickdir'])
        YTick.apply_tickdir.__dict__.__setitem__('stypy_varargs_param_name', None)
        YTick.apply_tickdir.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YTick.apply_tickdir.__dict__.__setitem__('stypy_call_defaults', defaults)
        YTick.apply_tickdir.__dict__.__setitem__('stypy_call_varargs', varargs)
        YTick.apply_tickdir.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YTick.apply_tickdir.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YTick.apply_tickdir', ['tickdir'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'apply_tickdir', localization, ['tickdir'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'apply_tickdir(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 514)
        # Getting the type of 'tickdir' (line 514)
        tickdir_8312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 11), 'tickdir')
        # Getting the type of 'None' (line 514)
        None_8313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 22), 'None')
        
        (may_be_8314, more_types_in_union_8315) = may_be_none(tickdir_8312, None_8313)

        if may_be_8314:

            if more_types_in_union_8315:
                # Runtime conditional SSA (line 514)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 515):
            
            # Assigning a Subscript to a Name (line 515):
            
            # Obtaining the type of the subscript
            unicode_8316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 31), 'unicode', u'%s.direction')
            # Getting the type of 'self' (line 515)
            self_8317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 48), 'self')
            # Obtaining the member '_name' of a type (line 515)
            _name_8318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 48), self_8317, '_name')
            # Applying the binary operator '%' (line 515)
            result_mod_8319 = python_operator(stypy.reporting.localization.Localization(__file__, 515, 31), '%', unicode_8316, _name_8318)
            
            # Getting the type of 'rcParams' (line 515)
            rcParams_8320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 22), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 515)
            getitem___8321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 22), rcParams_8320, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 515)
            subscript_call_result_8322 = invoke(stypy.reporting.localization.Localization(__file__, 515, 22), getitem___8321, result_mod_8319)
            
            # Assigning a type to the variable 'tickdir' (line 515)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 12), 'tickdir', subscript_call_result_8322)

            if more_types_in_union_8315:
                # SSA join for if statement (line 514)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 516):
        
        # Assigning a Name to a Attribute (line 516):
        # Getting the type of 'tickdir' (line 516)
        tickdir_8323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 24), 'tickdir')
        # Getting the type of 'self' (line 516)
        self_8324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 8), 'self')
        # Setting the type of the member '_tickdir' of a type (line 516)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 8), self_8324, '_tickdir', tickdir_8323)
        
        
        # Getting the type of 'self' (line 518)
        self_8325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 11), 'self')
        # Obtaining the member '_tickdir' of a type (line 518)
        _tickdir_8326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 11), self_8325, '_tickdir')
        unicode_8327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 518, 28), 'unicode', u'in')
        # Applying the binary operator '==' (line 518)
        result_eq_8328 = python_operator(stypy.reporting.localization.Localization(__file__, 518, 11), '==', _tickdir_8326, unicode_8327)
        
        # Testing the type of an if condition (line 518)
        if_condition_8329 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 518, 8), result_eq_8328)
        # Assigning a type to the variable 'if_condition_8329' (line 518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 8), 'if_condition_8329', if_condition_8329)
        # SSA begins for if statement (line 518)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 519):
        
        # Assigning a Tuple to a Attribute (line 519):
        
        # Obtaining an instance of the builtin type 'tuple' (line 519)
        tuple_8330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 519, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 519)
        # Adding element type (line 519)
        # Getting the type of 'mlines' (line 519)
        mlines_8331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 33), 'mlines')
        # Obtaining the member 'TICKRIGHT' of a type (line 519)
        TICKRIGHT_8332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 33), mlines_8331, 'TICKRIGHT')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 519, 33), tuple_8330, TICKRIGHT_8332)
        # Adding element type (line 519)
        # Getting the type of 'mlines' (line 519)
        mlines_8333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 51), 'mlines')
        # Obtaining the member 'TICKLEFT' of a type (line 519)
        TICKLEFT_8334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 51), mlines_8333, 'TICKLEFT')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 519, 33), tuple_8330, TICKLEFT_8334)
        
        # Getting the type of 'self' (line 519)
        self_8335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 12), 'self')
        # Setting the type of the member '_tickmarkers' of a type (line 519)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 12), self_8335, '_tickmarkers', tuple_8330)
        # SSA branch for the else part of an if statement (line 518)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'self' (line 520)
        self_8336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 13), 'self')
        # Obtaining the member '_tickdir' of a type (line 520)
        _tickdir_8337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 520, 13), self_8336, '_tickdir')
        unicode_8338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 520, 30), 'unicode', u'inout')
        # Applying the binary operator '==' (line 520)
        result_eq_8339 = python_operator(stypy.reporting.localization.Localization(__file__, 520, 13), '==', _tickdir_8337, unicode_8338)
        
        # Testing the type of an if condition (line 520)
        if_condition_8340 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 520, 13), result_eq_8339)
        # Assigning a type to the variable 'if_condition_8340' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 13), 'if_condition_8340', if_condition_8340)
        # SSA begins for if statement (line 520)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 521):
        
        # Assigning a Tuple to a Attribute (line 521):
        
        # Obtaining an instance of the builtin type 'tuple' (line 521)
        tuple_8341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 521)
        # Adding element type (line 521)
        unicode_8342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, 33), 'unicode', u'_')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 521, 33), tuple_8341, unicode_8342)
        # Adding element type (line 521)
        unicode_8343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, 38), 'unicode', u'_')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 521, 33), tuple_8341, unicode_8343)
        
        # Getting the type of 'self' (line 521)
        self_8344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 12), 'self')
        # Setting the type of the member '_tickmarkers' of a type (line 521)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 521, 12), self_8344, '_tickmarkers', tuple_8341)
        # SSA branch for the else part of an if statement (line 520)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Attribute (line 523):
        
        # Assigning a Tuple to a Attribute (line 523):
        
        # Obtaining an instance of the builtin type 'tuple' (line 523)
        tuple_8345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 523, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 523)
        # Adding element type (line 523)
        # Getting the type of 'mlines' (line 523)
        mlines_8346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 33), 'mlines')
        # Obtaining the member 'TICKLEFT' of a type (line 523)
        TICKLEFT_8347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 33), mlines_8346, 'TICKLEFT')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 523, 33), tuple_8345, TICKLEFT_8347)
        # Adding element type (line 523)
        # Getting the type of 'mlines' (line 523)
        mlines_8348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 50), 'mlines')
        # Obtaining the member 'TICKRIGHT' of a type (line 523)
        TICKRIGHT_8349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 50), mlines_8348, 'TICKRIGHT')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 523, 33), tuple_8345, TICKRIGHT_8349)
        
        # Getting the type of 'self' (line 523)
        self_8350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 12), 'self')
        # Setting the type of the member '_tickmarkers' of a type (line 523)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 523, 12), self_8350, '_tickmarkers', tuple_8345)
        # SSA join for if statement (line 520)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 518)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Attribute (line 524):
        
        # Assigning a BinOp to a Attribute (line 524):
        # Getting the type of 'self' (line 524)
        self_8351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 20), 'self')
        # Obtaining the member '_base_pad' of a type (line 524)
        _base_pad_8352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 20), self_8351, '_base_pad')
        
        # Call to get_tick_padding(...): (line 524)
        # Processing the call keyword arguments (line 524)
        kwargs_8355 = {}
        # Getting the type of 'self' (line 524)
        self_8353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 37), 'self', False)
        # Obtaining the member 'get_tick_padding' of a type (line 524)
        get_tick_padding_8354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 37), self_8353, 'get_tick_padding')
        # Calling get_tick_padding(args, kwargs) (line 524)
        get_tick_padding_call_result_8356 = invoke(stypy.reporting.localization.Localization(__file__, 524, 37), get_tick_padding_8354, *[], **kwargs_8355)
        
        # Applying the binary operator '+' (line 524)
        result_add_8357 = python_operator(stypy.reporting.localization.Localization(__file__, 524, 20), '+', _base_pad_8352, get_tick_padding_call_result_8356)
        
        # Getting the type of 'self' (line 524)
        self_8358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 8), 'self')
        # Setting the type of the member '_pad' of a type (line 524)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 524, 8), self_8358, '_pad', result_add_8357)
        
        # Assigning a Name to a Attribute (line 525):
        
        # Assigning a Name to a Attribute (line 525):
        # Getting the type of 'True' (line 525)
        True_8359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 21), 'True')
        # Getting the type of 'self' (line 525)
        self_8360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 525)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 8), self_8360, 'stale', True_8359)
        
        # ################# End of 'apply_tickdir(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'apply_tickdir' in the type store
        # Getting the type of 'stypy_return_type' (line 513)
        stypy_return_type_8361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8361)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'apply_tickdir'
        return stypy_return_type_8361


    @norecursion
    def _get_text1(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text1'
        module_type_store = module_type_store.open_function_context('_get_text1', 528, 4, False)
        # Assigning a type to the variable 'self' (line 529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YTick._get_text1.__dict__.__setitem__('stypy_localization', localization)
        YTick._get_text1.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YTick._get_text1.__dict__.__setitem__('stypy_type_store', module_type_store)
        YTick._get_text1.__dict__.__setitem__('stypy_function_name', 'YTick._get_text1')
        YTick._get_text1.__dict__.__setitem__('stypy_param_names_list', [])
        YTick._get_text1.__dict__.__setitem__('stypy_varargs_param_name', None)
        YTick._get_text1.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YTick._get_text1.__dict__.__setitem__('stypy_call_defaults', defaults)
        YTick._get_text1.__dict__.__setitem__('stypy_call_varargs', varargs)
        YTick._get_text1.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YTick._get_text1.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YTick._get_text1', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text1', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text1(...)' code ##################

        unicode_8362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 529, 8), 'unicode', u'Get the default Text instance')
        
        # Assigning a Call to a Tuple (line 531):
        
        # Assigning a Call to a Name:
        
        # Call to _get_text1_transform(...): (line 531)
        # Processing the call keyword arguments (line 531)
        kwargs_8365 = {}
        # Getting the type of 'self' (line 531)
        self_8363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 29), 'self', False)
        # Obtaining the member '_get_text1_transform' of a type (line 531)
        _get_text1_transform_8364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 29), self_8363, '_get_text1_transform')
        # Calling _get_text1_transform(args, kwargs) (line 531)
        _get_text1_transform_call_result_8366 = invoke(stypy.reporting.localization.Localization(__file__, 531, 29), _get_text1_transform_8364, *[], **kwargs_8365)
        
        # Assigning a type to the variable 'call_assignment_6968' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'call_assignment_6968', _get_text1_transform_call_result_8366)
        
        # Assigning a Call to a Name (line 531):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_8369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 8), 'int')
        # Processing the call keyword arguments
        kwargs_8370 = {}
        # Getting the type of 'call_assignment_6968' (line 531)
        call_assignment_6968_8367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'call_assignment_6968', False)
        # Obtaining the member '__getitem__' of a type (line 531)
        getitem___8368 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 8), call_assignment_6968_8367, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_8371 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___8368, *[int_8369], **kwargs_8370)
        
        # Assigning a type to the variable 'call_assignment_6969' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'call_assignment_6969', getitem___call_result_8371)
        
        # Assigning a Name to a Name (line 531):
        # Getting the type of 'call_assignment_6969' (line 531)
        call_assignment_6969_8372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'call_assignment_6969')
        # Assigning a type to the variable 'trans' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'trans', call_assignment_6969_8372)
        
        # Assigning a Call to a Name (line 531):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_8375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 8), 'int')
        # Processing the call keyword arguments
        kwargs_8376 = {}
        # Getting the type of 'call_assignment_6968' (line 531)
        call_assignment_6968_8373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'call_assignment_6968', False)
        # Obtaining the member '__getitem__' of a type (line 531)
        getitem___8374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 8), call_assignment_6968_8373, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_8377 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___8374, *[int_8375], **kwargs_8376)
        
        # Assigning a type to the variable 'call_assignment_6970' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'call_assignment_6970', getitem___call_result_8377)
        
        # Assigning a Name to a Name (line 531):
        # Getting the type of 'call_assignment_6970' (line 531)
        call_assignment_6970_8378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'call_assignment_6970')
        # Assigning a type to the variable 'vert' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 15), 'vert', call_assignment_6970_8378)
        
        # Assigning a Call to a Name (line 531):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_8381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 8), 'int')
        # Processing the call keyword arguments
        kwargs_8382 = {}
        # Getting the type of 'call_assignment_6968' (line 531)
        call_assignment_6968_8379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'call_assignment_6968', False)
        # Obtaining the member '__getitem__' of a type (line 531)
        getitem___8380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 8), call_assignment_6968_8379, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_8383 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___8380, *[int_8381], **kwargs_8382)
        
        # Assigning a type to the variable 'call_assignment_6971' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'call_assignment_6971', getitem___call_result_8383)
        
        # Assigning a Name to a Name (line 531):
        # Getting the type of 'call_assignment_6971' (line 531)
        call_assignment_6971_8384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'call_assignment_6971')
        # Assigning a type to the variable 'horiz' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 21), 'horiz', call_assignment_6971_8384)
        
        # Assigning a Call to a Name (line 532):
        
        # Assigning a Call to a Name (line 532):
        
        # Call to Text(...): (line 532)
        # Processing the call keyword arguments (line 532)
        int_8387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 14), 'int')
        keyword_8388 = int_8387
        int_8389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 19), 'int')
        keyword_8390 = int_8389
        
        # Call to FontProperties(...): (line 534)
        # Processing the call keyword arguments (line 534)
        # Getting the type of 'self' (line 534)
        self_8393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 60), 'self', False)
        # Obtaining the member '_labelsize' of a type (line 534)
        _labelsize_8394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 60), self_8393, '_labelsize')
        keyword_8395 = _labelsize_8394
        kwargs_8396 = {'size': keyword_8395}
        # Getting the type of 'font_manager' (line 534)
        font_manager_8391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 27), 'font_manager', False)
        # Obtaining the member 'FontProperties' of a type (line 534)
        FontProperties_8392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 534, 27), font_manager_8391, 'FontProperties')
        # Calling FontProperties(args, kwargs) (line 534)
        FontProperties_call_result_8397 = invoke(stypy.reporting.localization.Localization(__file__, 534, 27), FontProperties_8392, *[], **kwargs_8396)
        
        keyword_8398 = FontProperties_call_result_8397
        # Getting the type of 'self' (line 535)
        self_8399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 18), 'self', False)
        # Obtaining the member '_labelcolor' of a type (line 535)
        _labelcolor_8400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 18), self_8399, '_labelcolor')
        keyword_8401 = _labelcolor_8400
        # Getting the type of 'vert' (line 536)
        vert_8402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 30), 'vert', False)
        keyword_8403 = vert_8402
        # Getting the type of 'horiz' (line 537)
        horiz_8404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 32), 'horiz', False)
        keyword_8405 = horiz_8404
        kwargs_8406 = {'color': keyword_8401, 'fontproperties': keyword_8398, 'verticalalignment': keyword_8403, 'y': keyword_8390, 'x': keyword_8388, 'horizontalalignment': keyword_8405}
        # Getting the type of 'mtext' (line 532)
        mtext_8385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 12), 'mtext', False)
        # Obtaining the member 'Text' of a type (line 532)
        Text_8386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 12), mtext_8385, 'Text')
        # Calling Text(args, kwargs) (line 532)
        Text_call_result_8407 = invoke(stypy.reporting.localization.Localization(__file__, 532, 12), Text_8386, *[], **kwargs_8406)
        
        # Assigning a type to the variable 't' (line 532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 8), 't', Text_call_result_8407)
        
        # Call to set_transform(...): (line 539)
        # Processing the call arguments (line 539)
        # Getting the type of 'trans' (line 539)
        trans_8410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 24), 'trans', False)
        # Processing the call keyword arguments (line 539)
        kwargs_8411 = {}
        # Getting the type of 't' (line 539)
        t_8408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 8), 't', False)
        # Obtaining the member 'set_transform' of a type (line 539)
        set_transform_8409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 8), t_8408, 'set_transform')
        # Calling set_transform(args, kwargs) (line 539)
        set_transform_call_result_8412 = invoke(stypy.reporting.localization.Localization(__file__, 539, 8), set_transform_8409, *[trans_8410], **kwargs_8411)
        
        
        # Call to _set_artist_props(...): (line 540)
        # Processing the call arguments (line 540)
        # Getting the type of 't' (line 540)
        t_8415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 31), 't', False)
        # Processing the call keyword arguments (line 540)
        kwargs_8416 = {}
        # Getting the type of 'self' (line 540)
        self_8413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 540)
        _set_artist_props_8414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 8), self_8413, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 540)
        _set_artist_props_call_result_8417 = invoke(stypy.reporting.localization.Localization(__file__, 540, 8), _set_artist_props_8414, *[t_8415], **kwargs_8416)
        
        # Getting the type of 't' (line 541)
        t_8418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 15), 't')
        # Assigning a type to the variable 'stypy_return_type' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'stypy_return_type', t_8418)
        
        # ################# End of '_get_text1(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text1' in the type store
        # Getting the type of 'stypy_return_type' (line 528)
        stypy_return_type_8419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8419)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text1'
        return stypy_return_type_8419


    @norecursion
    def _get_text2(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_text2'
        module_type_store = module_type_store.open_function_context('_get_text2', 543, 4, False)
        # Assigning a type to the variable 'self' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YTick._get_text2.__dict__.__setitem__('stypy_localization', localization)
        YTick._get_text2.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YTick._get_text2.__dict__.__setitem__('stypy_type_store', module_type_store)
        YTick._get_text2.__dict__.__setitem__('stypy_function_name', 'YTick._get_text2')
        YTick._get_text2.__dict__.__setitem__('stypy_param_names_list', [])
        YTick._get_text2.__dict__.__setitem__('stypy_varargs_param_name', None)
        YTick._get_text2.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YTick._get_text2.__dict__.__setitem__('stypy_call_defaults', defaults)
        YTick._get_text2.__dict__.__setitem__('stypy_call_varargs', varargs)
        YTick._get_text2.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YTick._get_text2.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YTick._get_text2', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_text2', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_text2(...)' code ##################

        unicode_8420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 8), 'unicode', u'Get the default Text instance')
        
        # Assigning a Call to a Tuple (line 546):
        
        # Assigning a Call to a Name:
        
        # Call to _get_text2_transform(...): (line 546)
        # Processing the call keyword arguments (line 546)
        kwargs_8423 = {}
        # Getting the type of 'self' (line 546)
        self_8421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 29), 'self', False)
        # Obtaining the member '_get_text2_transform' of a type (line 546)
        _get_text2_transform_8422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 29), self_8421, '_get_text2_transform')
        # Calling _get_text2_transform(args, kwargs) (line 546)
        _get_text2_transform_call_result_8424 = invoke(stypy.reporting.localization.Localization(__file__, 546, 29), _get_text2_transform_8422, *[], **kwargs_8423)
        
        # Assigning a type to the variable 'call_assignment_6972' (line 546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'call_assignment_6972', _get_text2_transform_call_result_8424)
        
        # Assigning a Call to a Name (line 546):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_8427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 8), 'int')
        # Processing the call keyword arguments
        kwargs_8428 = {}
        # Getting the type of 'call_assignment_6972' (line 546)
        call_assignment_6972_8425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'call_assignment_6972', False)
        # Obtaining the member '__getitem__' of a type (line 546)
        getitem___8426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 8), call_assignment_6972_8425, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_8429 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___8426, *[int_8427], **kwargs_8428)
        
        # Assigning a type to the variable 'call_assignment_6973' (line 546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'call_assignment_6973', getitem___call_result_8429)
        
        # Assigning a Name to a Name (line 546):
        # Getting the type of 'call_assignment_6973' (line 546)
        call_assignment_6973_8430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'call_assignment_6973')
        # Assigning a type to the variable 'trans' (line 546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'trans', call_assignment_6973_8430)
        
        # Assigning a Call to a Name (line 546):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_8433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 8), 'int')
        # Processing the call keyword arguments
        kwargs_8434 = {}
        # Getting the type of 'call_assignment_6972' (line 546)
        call_assignment_6972_8431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'call_assignment_6972', False)
        # Obtaining the member '__getitem__' of a type (line 546)
        getitem___8432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 8), call_assignment_6972_8431, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_8435 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___8432, *[int_8433], **kwargs_8434)
        
        # Assigning a type to the variable 'call_assignment_6974' (line 546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'call_assignment_6974', getitem___call_result_8435)
        
        # Assigning a Name to a Name (line 546):
        # Getting the type of 'call_assignment_6974' (line 546)
        call_assignment_6974_8436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'call_assignment_6974')
        # Assigning a type to the variable 'vert' (line 546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 15), 'vert', call_assignment_6974_8436)
        
        # Assigning a Call to a Name (line 546):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_8439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 546, 8), 'int')
        # Processing the call keyword arguments
        kwargs_8440 = {}
        # Getting the type of 'call_assignment_6972' (line 546)
        call_assignment_6972_8437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'call_assignment_6972', False)
        # Obtaining the member '__getitem__' of a type (line 546)
        getitem___8438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 546, 8), call_assignment_6972_8437, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_8441 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___8438, *[int_8439], **kwargs_8440)
        
        # Assigning a type to the variable 'call_assignment_6975' (line 546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'call_assignment_6975', getitem___call_result_8441)
        
        # Assigning a Name to a Name (line 546):
        # Getting the type of 'call_assignment_6975' (line 546)
        call_assignment_6975_8442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 546, 8), 'call_assignment_6975')
        # Assigning a type to the variable 'horiz' (line 546)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 546, 21), 'horiz', call_assignment_6975_8442)
        
        # Assigning a Call to a Name (line 547):
        
        # Assigning a Call to a Name (line 547):
        
        # Call to Text(...): (line 547)
        # Processing the call keyword arguments (line 547)
        int_8445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 14), 'int')
        keyword_8446 = int_8445
        int_8447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 548, 19), 'int')
        keyword_8448 = int_8447
        
        # Call to FontProperties(...): (line 549)
        # Processing the call keyword arguments (line 549)
        # Getting the type of 'self' (line 549)
        self_8451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 60), 'self', False)
        # Obtaining the member '_labelsize' of a type (line 549)
        _labelsize_8452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 60), self_8451, '_labelsize')
        keyword_8453 = _labelsize_8452
        kwargs_8454 = {'size': keyword_8453}
        # Getting the type of 'font_manager' (line 549)
        font_manager_8449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 27), 'font_manager', False)
        # Obtaining the member 'FontProperties' of a type (line 549)
        FontProperties_8450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 27), font_manager_8449, 'FontProperties')
        # Calling FontProperties(args, kwargs) (line 549)
        FontProperties_call_result_8455 = invoke(stypy.reporting.localization.Localization(__file__, 549, 27), FontProperties_8450, *[], **kwargs_8454)
        
        keyword_8456 = FontProperties_call_result_8455
        # Getting the type of 'self' (line 550)
        self_8457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 18), 'self', False)
        # Obtaining the member '_labelcolor' of a type (line 550)
        _labelcolor_8458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 18), self_8457, '_labelcolor')
        keyword_8459 = _labelcolor_8458
        # Getting the type of 'vert' (line 551)
        vert_8460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 30), 'vert', False)
        keyword_8461 = vert_8460
        # Getting the type of 'horiz' (line 552)
        horiz_8462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 32), 'horiz', False)
        keyword_8463 = horiz_8462
        kwargs_8464 = {'color': keyword_8459, 'fontproperties': keyword_8456, 'verticalalignment': keyword_8461, 'y': keyword_8448, 'x': keyword_8446, 'horizontalalignment': keyword_8463}
        # Getting the type of 'mtext' (line 547)
        mtext_8443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'mtext', False)
        # Obtaining the member 'Text' of a type (line 547)
        Text_8444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 12), mtext_8443, 'Text')
        # Calling Text(args, kwargs) (line 547)
        Text_call_result_8465 = invoke(stypy.reporting.localization.Localization(__file__, 547, 12), Text_8444, *[], **kwargs_8464)
        
        # Assigning a type to the variable 't' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 8), 't', Text_call_result_8465)
        
        # Call to set_transform(...): (line 554)
        # Processing the call arguments (line 554)
        # Getting the type of 'trans' (line 554)
        trans_8468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 24), 'trans', False)
        # Processing the call keyword arguments (line 554)
        kwargs_8469 = {}
        # Getting the type of 't' (line 554)
        t_8466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 8), 't', False)
        # Obtaining the member 'set_transform' of a type (line 554)
        set_transform_8467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 8), t_8466, 'set_transform')
        # Calling set_transform(args, kwargs) (line 554)
        set_transform_call_result_8470 = invoke(stypy.reporting.localization.Localization(__file__, 554, 8), set_transform_8467, *[trans_8468], **kwargs_8469)
        
        
        # Call to _set_artist_props(...): (line 555)
        # Processing the call arguments (line 555)
        # Getting the type of 't' (line 555)
        t_8473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 31), 't', False)
        # Processing the call keyword arguments (line 555)
        kwargs_8474 = {}
        # Getting the type of 'self' (line 555)
        self_8471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 555)
        _set_artist_props_8472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 8), self_8471, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 555)
        _set_artist_props_call_result_8475 = invoke(stypy.reporting.localization.Localization(__file__, 555, 8), _set_artist_props_8472, *[t_8473], **kwargs_8474)
        
        # Getting the type of 't' (line 556)
        t_8476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 15), 't')
        # Assigning a type to the variable 'stypy_return_type' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'stypy_return_type', t_8476)
        
        # ################# End of '_get_text2(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_text2' in the type store
        # Getting the type of 'stypy_return_type' (line 543)
        stypy_return_type_8477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8477)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_text2'
        return stypy_return_type_8477


    @norecursion
    def _get_tick1line(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_tick1line'
        module_type_store = module_type_store.open_function_context('_get_tick1line', 558, 4, False)
        # Assigning a type to the variable 'self' (line 559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YTick._get_tick1line.__dict__.__setitem__('stypy_localization', localization)
        YTick._get_tick1line.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YTick._get_tick1line.__dict__.__setitem__('stypy_type_store', module_type_store)
        YTick._get_tick1line.__dict__.__setitem__('stypy_function_name', 'YTick._get_tick1line')
        YTick._get_tick1line.__dict__.__setitem__('stypy_param_names_list', [])
        YTick._get_tick1line.__dict__.__setitem__('stypy_varargs_param_name', None)
        YTick._get_tick1line.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YTick._get_tick1line.__dict__.__setitem__('stypy_call_defaults', defaults)
        YTick._get_tick1line.__dict__.__setitem__('stypy_call_varargs', varargs)
        YTick._get_tick1line.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YTick._get_tick1line.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YTick._get_tick1line', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_tick1line', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_tick1line(...)' code ##################

        unicode_8478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 559, 8), 'unicode', u'Get the default line2D instance')
        
        # Assigning a Call to a Name (line 562):
        
        # Assigning a Call to a Name (line 562):
        
        # Call to Line2D(...): (line 562)
        # Processing the call arguments (line 562)
        
        # Obtaining an instance of the builtin type 'tuple' (line 562)
        tuple_8481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 562)
        # Adding element type (line 562)
        int_8482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 27), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 27), tuple_8481, int_8482)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 562)
        tuple_8483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 562)
        # Adding element type (line 562)
        int_8484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 562, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 562, 33), tuple_8483, int_8484)
        
        # Processing the call keyword arguments (line 562)
        # Getting the type of 'self' (line 563)
        self_8485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 563, 32), 'self', False)
        # Obtaining the member '_color' of a type (line 563)
        _color_8486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 563, 32), self_8485, '_color')
        keyword_8487 = _color_8486
        
        # Obtaining the type of the subscript
        int_8488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 564, 51), 'int')
        # Getting the type of 'self' (line 564)
        self_8489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 33), 'self', False)
        # Obtaining the member '_tickmarkers' of a type (line 564)
        _tickmarkers_8490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 33), self_8489, '_tickmarkers')
        # Obtaining the member '__getitem__' of a type (line 564)
        getitem___8491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 33), _tickmarkers_8490, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 564)
        subscript_call_result_8492 = invoke(stypy.reporting.localization.Localization(__file__, 564, 33), getitem___8491, int_8488)
        
        keyword_8493 = subscript_call_result_8492
        unicode_8494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 36), 'unicode', u'None')
        keyword_8495 = unicode_8494
        # Getting the type of 'self' (line 566)
        self_8496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 37), 'self', False)
        # Obtaining the member '_size' of a type (line 566)
        _size_8497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 566, 37), self_8496, '_size')
        keyword_8498 = _size_8497
        # Getting the type of 'self' (line 567)
        self_8499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 42), 'self', False)
        # Obtaining the member '_width' of a type (line 567)
        _width_8500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 42), self_8499, '_width')
        keyword_8501 = _width_8500
        # Getting the type of 'self' (line 568)
        self_8502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 33), 'self', False)
        # Obtaining the member '_zorder' of a type (line 568)
        _zorder_8503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 33), self_8502, '_zorder')
        keyword_8504 = _zorder_8503
        kwargs_8505 = {'color': keyword_8487, 'markersize': keyword_8498, 'markeredgewidth': keyword_8501, 'zorder': keyword_8504, 'marker': keyword_8493, 'linestyle': keyword_8495}
        # Getting the type of 'mlines' (line 562)
        mlines_8479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 12), 'mlines', False)
        # Obtaining the member 'Line2D' of a type (line 562)
        Line2D_8480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 12), mlines_8479, 'Line2D')
        # Calling Line2D(args, kwargs) (line 562)
        Line2D_call_result_8506 = invoke(stypy.reporting.localization.Localization(__file__, 562, 12), Line2D_8480, *[tuple_8481, tuple_8483], **kwargs_8505)
        
        # Assigning a type to the variable 'l' (line 562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 562, 8), 'l', Line2D_call_result_8506)
        
        # Call to set_transform(...): (line 569)
        # Processing the call arguments (line 569)
        
        # Call to get_yaxis_transform(...): (line 569)
        # Processing the call keyword arguments (line 569)
        unicode_8512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 569, 60), 'unicode', u'tick1')
        keyword_8513 = unicode_8512
        kwargs_8514 = {'which': keyword_8513}
        # Getting the type of 'self' (line 569)
        self_8509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 24), 'self', False)
        # Obtaining the member 'axes' of a type (line 569)
        axes_8510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 24), self_8509, 'axes')
        # Obtaining the member 'get_yaxis_transform' of a type (line 569)
        get_yaxis_transform_8511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 24), axes_8510, 'get_yaxis_transform')
        # Calling get_yaxis_transform(args, kwargs) (line 569)
        get_yaxis_transform_call_result_8515 = invoke(stypy.reporting.localization.Localization(__file__, 569, 24), get_yaxis_transform_8511, *[], **kwargs_8514)
        
        # Processing the call keyword arguments (line 569)
        kwargs_8516 = {}
        # Getting the type of 'l' (line 569)
        l_8507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 8), 'l', False)
        # Obtaining the member 'set_transform' of a type (line 569)
        set_transform_8508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 8), l_8507, 'set_transform')
        # Calling set_transform(args, kwargs) (line 569)
        set_transform_call_result_8517 = invoke(stypy.reporting.localization.Localization(__file__, 569, 8), set_transform_8508, *[get_yaxis_transform_call_result_8515], **kwargs_8516)
        
        
        # Call to _set_artist_props(...): (line 570)
        # Processing the call arguments (line 570)
        # Getting the type of 'l' (line 570)
        l_8520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 31), 'l', False)
        # Processing the call keyword arguments (line 570)
        kwargs_8521 = {}
        # Getting the type of 'self' (line 570)
        self_8518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 570)
        _set_artist_props_8519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 570, 8), self_8518, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 570)
        _set_artist_props_call_result_8522 = invoke(stypy.reporting.localization.Localization(__file__, 570, 8), _set_artist_props_8519, *[l_8520], **kwargs_8521)
        
        # Getting the type of 'l' (line 571)
        l_8523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 15), 'l')
        # Assigning a type to the variable 'stypy_return_type' (line 571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 8), 'stypy_return_type', l_8523)
        
        # ################# End of '_get_tick1line(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_tick1line' in the type store
        # Getting the type of 'stypy_return_type' (line 558)
        stypy_return_type_8524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8524)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_tick1line'
        return stypy_return_type_8524


    @norecursion
    def _get_tick2line(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_tick2line'
        module_type_store = module_type_store.open_function_context('_get_tick2line', 573, 4, False)
        # Assigning a type to the variable 'self' (line 574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YTick._get_tick2line.__dict__.__setitem__('stypy_localization', localization)
        YTick._get_tick2line.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YTick._get_tick2line.__dict__.__setitem__('stypy_type_store', module_type_store)
        YTick._get_tick2line.__dict__.__setitem__('stypy_function_name', 'YTick._get_tick2line')
        YTick._get_tick2line.__dict__.__setitem__('stypy_param_names_list', [])
        YTick._get_tick2line.__dict__.__setitem__('stypy_varargs_param_name', None)
        YTick._get_tick2line.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YTick._get_tick2line.__dict__.__setitem__('stypy_call_defaults', defaults)
        YTick._get_tick2line.__dict__.__setitem__('stypy_call_varargs', varargs)
        YTick._get_tick2line.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YTick._get_tick2line.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YTick._get_tick2line', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_tick2line', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_tick2line(...)' code ##################

        unicode_8525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 574, 8), 'unicode', u'Get the default line2D instance')
        
        # Assigning a Call to a Name (line 576):
        
        # Assigning a Call to a Name (line 576):
        
        # Call to Line2D(...): (line 576)
        # Processing the call arguments (line 576)
        
        # Obtaining an instance of the builtin type 'tuple' (line 576)
        tuple_8528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 576)
        # Adding element type (line 576)
        int_8529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 27), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 27), tuple_8528, int_8529)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 576)
        tuple_8530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 576)
        # Adding element type (line 576)
        int_8531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 33), tuple_8530, int_8531)
        
        # Processing the call keyword arguments (line 576)
        # Getting the type of 'self' (line 577)
        self_8532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 32), 'self', False)
        # Obtaining the member '_color' of a type (line 577)
        _color_8533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 32), self_8532, '_color')
        keyword_8534 = _color_8533
        
        # Obtaining the type of the subscript
        int_8535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 51), 'int')
        # Getting the type of 'self' (line 578)
        self_8536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 33), 'self', False)
        # Obtaining the member '_tickmarkers' of a type (line 578)
        _tickmarkers_8537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 33), self_8536, '_tickmarkers')
        # Obtaining the member '__getitem__' of a type (line 578)
        getitem___8538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 33), _tickmarkers_8537, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 578)
        subscript_call_result_8539 = invoke(stypy.reporting.localization.Localization(__file__, 578, 33), getitem___8538, int_8535)
        
        keyword_8540 = subscript_call_result_8539
        unicode_8541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 36), 'unicode', u'None')
        keyword_8542 = unicode_8541
        # Getting the type of 'self' (line 580)
        self_8543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 37), 'self', False)
        # Obtaining the member '_size' of a type (line 580)
        _size_8544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 37), self_8543, '_size')
        keyword_8545 = _size_8544
        # Getting the type of 'self' (line 581)
        self_8546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 42), 'self', False)
        # Obtaining the member '_width' of a type (line 581)
        _width_8547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 42), self_8546, '_width')
        keyword_8548 = _width_8547
        # Getting the type of 'self' (line 582)
        self_8549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 33), 'self', False)
        # Obtaining the member '_zorder' of a type (line 582)
        _zorder_8550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 33), self_8549, '_zorder')
        keyword_8551 = _zorder_8550
        kwargs_8552 = {'color': keyword_8534, 'markersize': keyword_8545, 'markeredgewidth': keyword_8548, 'zorder': keyword_8551, 'marker': keyword_8540, 'linestyle': keyword_8542}
        # Getting the type of 'mlines' (line 576)
        mlines_8526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 12), 'mlines', False)
        # Obtaining the member 'Line2D' of a type (line 576)
        Line2D_8527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 576, 12), mlines_8526, 'Line2D')
        # Calling Line2D(args, kwargs) (line 576)
        Line2D_call_result_8553 = invoke(stypy.reporting.localization.Localization(__file__, 576, 12), Line2D_8527, *[tuple_8528, tuple_8530], **kwargs_8552)
        
        # Assigning a type to the variable 'l' (line 576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 8), 'l', Line2D_call_result_8553)
        
        # Call to set_transform(...): (line 583)
        # Processing the call arguments (line 583)
        
        # Call to get_yaxis_transform(...): (line 583)
        # Processing the call keyword arguments (line 583)
        unicode_8559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 583, 60), 'unicode', u'tick2')
        keyword_8560 = unicode_8559
        kwargs_8561 = {'which': keyword_8560}
        # Getting the type of 'self' (line 583)
        self_8556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 24), 'self', False)
        # Obtaining the member 'axes' of a type (line 583)
        axes_8557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 24), self_8556, 'axes')
        # Obtaining the member 'get_yaxis_transform' of a type (line 583)
        get_yaxis_transform_8558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 24), axes_8557, 'get_yaxis_transform')
        # Calling get_yaxis_transform(args, kwargs) (line 583)
        get_yaxis_transform_call_result_8562 = invoke(stypy.reporting.localization.Localization(__file__, 583, 24), get_yaxis_transform_8558, *[], **kwargs_8561)
        
        # Processing the call keyword arguments (line 583)
        kwargs_8563 = {}
        # Getting the type of 'l' (line 583)
        l_8554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 8), 'l', False)
        # Obtaining the member 'set_transform' of a type (line 583)
        set_transform_8555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 8), l_8554, 'set_transform')
        # Calling set_transform(args, kwargs) (line 583)
        set_transform_call_result_8564 = invoke(stypy.reporting.localization.Localization(__file__, 583, 8), set_transform_8555, *[get_yaxis_transform_call_result_8562], **kwargs_8563)
        
        
        # Call to _set_artist_props(...): (line 584)
        # Processing the call arguments (line 584)
        # Getting the type of 'l' (line 584)
        l_8567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 31), 'l', False)
        # Processing the call keyword arguments (line 584)
        kwargs_8568 = {}
        # Getting the type of 'self' (line 584)
        self_8565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 584)
        _set_artist_props_8566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 8), self_8565, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 584)
        _set_artist_props_call_result_8569 = invoke(stypy.reporting.localization.Localization(__file__, 584, 8), _set_artist_props_8566, *[l_8567], **kwargs_8568)
        
        # Getting the type of 'l' (line 585)
        l_8570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 15), 'l')
        # Assigning a type to the variable 'stypy_return_type' (line 585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 8), 'stypy_return_type', l_8570)
        
        # ################# End of '_get_tick2line(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_tick2line' in the type store
        # Getting the type of 'stypy_return_type' (line 573)
        stypy_return_type_8571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8571)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_tick2line'
        return stypy_return_type_8571


    @norecursion
    def _get_gridline(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_gridline'
        module_type_store = module_type_store.open_function_context('_get_gridline', 587, 4, False)
        # Assigning a type to the variable 'self' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YTick._get_gridline.__dict__.__setitem__('stypy_localization', localization)
        YTick._get_gridline.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YTick._get_gridline.__dict__.__setitem__('stypy_type_store', module_type_store)
        YTick._get_gridline.__dict__.__setitem__('stypy_function_name', 'YTick._get_gridline')
        YTick._get_gridline.__dict__.__setitem__('stypy_param_names_list', [])
        YTick._get_gridline.__dict__.__setitem__('stypy_varargs_param_name', None)
        YTick._get_gridline.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YTick._get_gridline.__dict__.__setitem__('stypy_call_defaults', defaults)
        YTick._get_gridline.__dict__.__setitem__('stypy_call_varargs', varargs)
        YTick._get_gridline.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YTick._get_gridline.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YTick._get_gridline', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_gridline', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_gridline(...)' code ##################

        unicode_8572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 588, 8), 'unicode', u'Get the default line2D instance')
        
        # Assigning a Call to a Name (line 590):
        
        # Assigning a Call to a Name (line 590):
        
        # Call to Line2D(...): (line 590)
        # Processing the call keyword arguments (line 590)
        
        # Obtaining an instance of the builtin type 'tuple' (line 590)
        tuple_8575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 590)
        # Adding element type (line 590)
        int_8576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 33), tuple_8575, int_8576)
        # Adding element type (line 590)
        int_8577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 36), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 33), tuple_8575, int_8577)
        
        keyword_8578 = tuple_8575
        
        # Obtaining an instance of the builtin type 'tuple' (line 590)
        tuple_8579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 590)
        # Adding element type (line 590)
        int_8580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 47), tuple_8579, int_8580)
        # Adding element type (line 590)
        int_8581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 590, 50), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 590, 47), tuple_8579, int_8581)
        
        keyword_8582 = tuple_8579
        
        # Obtaining the type of the subscript
        unicode_8583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, 41), 'unicode', u'grid.color')
        # Getting the type of 'rcParams' (line 591)
        rcParams_8584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 32), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 591)
        getitem___8585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 32), rcParams_8584, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 591)
        subscript_call_result_8586 = invoke(stypy.reporting.localization.Localization(__file__, 591, 32), getitem___8585, unicode_8583)
        
        keyword_8587 = subscript_call_result_8586
        
        # Obtaining the type of the subscript
        unicode_8588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 592, 45), 'unicode', u'grid.linestyle')
        # Getting the type of 'rcParams' (line 592)
        rcParams_8589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 36), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 592)
        getitem___8590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 36), rcParams_8589, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 592)
        subscript_call_result_8591 = invoke(stypy.reporting.localization.Localization(__file__, 592, 36), getitem___8590, unicode_8588)
        
        keyword_8592 = subscript_call_result_8591
        
        # Obtaining the type of the subscript
        unicode_8593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, 45), 'unicode', u'grid.linewidth')
        # Getting the type of 'rcParams' (line 593)
        rcParams_8594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 36), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 593)
        getitem___8595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 36), rcParams_8594, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 593)
        subscript_call_result_8596 = invoke(stypy.reporting.localization.Localization(__file__, 593, 36), getitem___8595, unicode_8593)
        
        keyword_8597 = subscript_call_result_8596
        
        # Obtaining the type of the subscript
        unicode_8598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 594, 41), 'unicode', u'grid.alpha')
        # Getting the type of 'rcParams' (line 594)
        rcParams_8599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 32), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 594)
        getitem___8600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 32), rcParams_8599, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 594)
        subscript_call_result_8601 = invoke(stypy.reporting.localization.Localization(__file__, 594, 32), getitem___8600, unicode_8598)
        
        keyword_8602 = subscript_call_result_8601
        int_8603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 595, 37), 'int')
        keyword_8604 = int_8603
        kwargs_8605 = {'color': keyword_8587, 'markersize': keyword_8604, 'ydata': keyword_8582, 'xdata': keyword_8578, 'alpha': keyword_8602, 'linewidth': keyword_8597, 'linestyle': keyword_8592}
        # Getting the type of 'mlines' (line 590)
        mlines_8573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 12), 'mlines', False)
        # Obtaining the member 'Line2D' of a type (line 590)
        Line2D_8574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 12), mlines_8573, 'Line2D')
        # Calling Line2D(args, kwargs) (line 590)
        Line2D_call_result_8606 = invoke(stypy.reporting.localization.Localization(__file__, 590, 12), Line2D_8574, *[], **kwargs_8605)
        
        # Assigning a type to the variable 'l' (line 590)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 590, 8), 'l', Line2D_call_result_8606)
        
        # Call to set_transform(...): (line 597)
        # Processing the call arguments (line 597)
        
        # Call to get_yaxis_transform(...): (line 597)
        # Processing the call keyword arguments (line 597)
        unicode_8612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 597, 60), 'unicode', u'grid')
        keyword_8613 = unicode_8612
        kwargs_8614 = {'which': keyword_8613}
        # Getting the type of 'self' (line 597)
        self_8609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 24), 'self', False)
        # Obtaining the member 'axes' of a type (line 597)
        axes_8610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 24), self_8609, 'axes')
        # Obtaining the member 'get_yaxis_transform' of a type (line 597)
        get_yaxis_transform_8611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 24), axes_8610, 'get_yaxis_transform')
        # Calling get_yaxis_transform(args, kwargs) (line 597)
        get_yaxis_transform_call_result_8615 = invoke(stypy.reporting.localization.Localization(__file__, 597, 24), get_yaxis_transform_8611, *[], **kwargs_8614)
        
        # Processing the call keyword arguments (line 597)
        kwargs_8616 = {}
        # Getting the type of 'l' (line 597)
        l_8607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 8), 'l', False)
        # Obtaining the member 'set_transform' of a type (line 597)
        set_transform_8608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 8), l_8607, 'set_transform')
        # Calling set_transform(args, kwargs) (line 597)
        set_transform_call_result_8617 = invoke(stypy.reporting.localization.Localization(__file__, 597, 8), set_transform_8608, *[get_yaxis_transform_call_result_8615], **kwargs_8616)
        
        
        # Assigning a Name to a Attribute (line 598):
        
        # Assigning a Name to a Attribute (line 598):
        # Getting the type of 'GRIDLINE_INTERPOLATION_STEPS' (line 598)
        GRIDLINE_INTERPOLATION_STEPS_8618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 44), 'GRIDLINE_INTERPOLATION_STEPS')
        
        # Call to get_path(...): (line 598)
        # Processing the call keyword arguments (line 598)
        kwargs_8621 = {}
        # Getting the type of 'l' (line 598)
        l_8619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'l', False)
        # Obtaining the member 'get_path' of a type (line 598)
        get_path_8620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 8), l_8619, 'get_path')
        # Calling get_path(args, kwargs) (line 598)
        get_path_call_result_8622 = invoke(stypy.reporting.localization.Localization(__file__, 598, 8), get_path_8620, *[], **kwargs_8621)
        
        # Setting the type of the member '_interpolation_steps' of a type (line 598)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 8), get_path_call_result_8622, '_interpolation_steps', GRIDLINE_INTERPOLATION_STEPS_8618)
        
        # Call to _set_artist_props(...): (line 599)
        # Processing the call arguments (line 599)
        # Getting the type of 'l' (line 599)
        l_8625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 31), 'l', False)
        # Processing the call keyword arguments (line 599)
        kwargs_8626 = {}
        # Getting the type of 'self' (line 599)
        self_8623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 599)
        _set_artist_props_8624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 8), self_8623, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 599)
        _set_artist_props_call_result_8627 = invoke(stypy.reporting.localization.Localization(__file__, 599, 8), _set_artist_props_8624, *[l_8625], **kwargs_8626)
        
        # Getting the type of 'l' (line 600)
        l_8628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 15), 'l')
        # Assigning a type to the variable 'stypy_return_type' (line 600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'stypy_return_type', l_8628)
        
        # ################# End of '_get_gridline(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_gridline' in the type store
        # Getting the type of 'stypy_return_type' (line 587)
        stypy_return_type_8629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 587, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8629)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_gridline'
        return stypy_return_type_8629


    @norecursion
    def update_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_position'
        module_type_store = module_type_store.open_function_context('update_position', 602, 4, False)
        # Assigning a type to the variable 'self' (line 603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YTick.update_position.__dict__.__setitem__('stypy_localization', localization)
        YTick.update_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YTick.update_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        YTick.update_position.__dict__.__setitem__('stypy_function_name', 'YTick.update_position')
        YTick.update_position.__dict__.__setitem__('stypy_param_names_list', ['loc'])
        YTick.update_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        YTick.update_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YTick.update_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        YTick.update_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        YTick.update_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YTick.update_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YTick.update_position', ['loc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_position', localization, ['loc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_position(...)' code ##################

        unicode_8630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 8), 'unicode', u'Set the location of tick in data coords with scalar *loc*')
        
        # Getting the type of 'self' (line 604)
        self_8631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 11), 'self')
        # Obtaining the member 'tick1On' of a type (line 604)
        tick1On_8632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 11), self_8631, 'tick1On')
        # Testing the type of an if condition (line 604)
        if_condition_8633 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 604, 8), tick1On_8632)
        # Assigning a type to the variable 'if_condition_8633' (line 604)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 8), 'if_condition_8633', if_condition_8633)
        # SSA begins for if statement (line 604)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_ydata(...): (line 605)
        # Processing the call arguments (line 605)
        
        # Obtaining an instance of the builtin type 'tuple' (line 605)
        tuple_8637 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 605, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 605)
        # Adding element type (line 605)
        # Getting the type of 'loc' (line 605)
        loc_8638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 38), 'loc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 605, 38), tuple_8637, loc_8638)
        
        # Processing the call keyword arguments (line 605)
        kwargs_8639 = {}
        # Getting the type of 'self' (line 605)
        self_8634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 12), 'self', False)
        # Obtaining the member 'tick1line' of a type (line 605)
        tick1line_8635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 12), self_8634, 'tick1line')
        # Obtaining the member 'set_ydata' of a type (line 605)
        set_ydata_8636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 12), tick1line_8635, 'set_ydata')
        # Calling set_ydata(args, kwargs) (line 605)
        set_ydata_call_result_8640 = invoke(stypy.reporting.localization.Localization(__file__, 605, 12), set_ydata_8636, *[tuple_8637], **kwargs_8639)
        
        # SSA join for if statement (line 604)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 606)
        self_8641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 11), 'self')
        # Obtaining the member 'tick2On' of a type (line 606)
        tick2On_8642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 11), self_8641, 'tick2On')
        # Testing the type of an if condition (line 606)
        if_condition_8643 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 606, 8), tick2On_8642)
        # Assigning a type to the variable 'if_condition_8643' (line 606)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 606, 8), 'if_condition_8643', if_condition_8643)
        # SSA begins for if statement (line 606)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_ydata(...): (line 607)
        # Processing the call arguments (line 607)
        
        # Obtaining an instance of the builtin type 'tuple' (line 607)
        tuple_8647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 607, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 607)
        # Adding element type (line 607)
        # Getting the type of 'loc' (line 607)
        loc_8648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 38), 'loc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 607, 38), tuple_8647, loc_8648)
        
        # Processing the call keyword arguments (line 607)
        kwargs_8649 = {}
        # Getting the type of 'self' (line 607)
        self_8644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 12), 'self', False)
        # Obtaining the member 'tick2line' of a type (line 607)
        tick2line_8645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 12), self_8644, 'tick2line')
        # Obtaining the member 'set_ydata' of a type (line 607)
        set_ydata_8646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 12), tick2line_8645, 'set_ydata')
        # Calling set_ydata(args, kwargs) (line 607)
        set_ydata_call_result_8650 = invoke(stypy.reporting.localization.Localization(__file__, 607, 12), set_ydata_8646, *[tuple_8647], **kwargs_8649)
        
        # SSA join for if statement (line 606)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 608)
        self_8651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 11), 'self')
        # Obtaining the member 'gridOn' of a type (line 608)
        gridOn_8652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 11), self_8651, 'gridOn')
        # Testing the type of an if condition (line 608)
        if_condition_8653 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 608, 8), gridOn_8652)
        # Assigning a type to the variable 'if_condition_8653' (line 608)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 608, 8), 'if_condition_8653', if_condition_8653)
        # SSA begins for if statement (line 608)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_ydata(...): (line 609)
        # Processing the call arguments (line 609)
        
        # Obtaining an instance of the builtin type 'tuple' (line 609)
        tuple_8657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 609, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 609)
        # Adding element type (line 609)
        # Getting the type of 'loc' (line 609)
        loc_8658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 37), 'loc', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 609, 37), tuple_8657, loc_8658)
        
        # Processing the call keyword arguments (line 609)
        kwargs_8659 = {}
        # Getting the type of 'self' (line 609)
        self_8654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 12), 'self', False)
        # Obtaining the member 'gridline' of a type (line 609)
        gridline_8655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 12), self_8654, 'gridline')
        # Obtaining the member 'set_ydata' of a type (line 609)
        set_ydata_8656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 12), gridline_8655, 'set_ydata')
        # Calling set_ydata(args, kwargs) (line 609)
        set_ydata_call_result_8660 = invoke(stypy.reporting.localization.Localization(__file__, 609, 12), set_ydata_8656, *[tuple_8657], **kwargs_8659)
        
        # SSA join for if statement (line 608)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 610)
        self_8661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 11), 'self')
        # Obtaining the member 'label1On' of a type (line 610)
        label1On_8662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 610, 11), self_8661, 'label1On')
        # Testing the type of an if condition (line 610)
        if_condition_8663 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 610, 8), label1On_8662)
        # Assigning a type to the variable 'if_condition_8663' (line 610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 610, 8), 'if_condition_8663', if_condition_8663)
        # SSA begins for if statement (line 610)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_y(...): (line 611)
        # Processing the call arguments (line 611)
        # Getting the type of 'loc' (line 611)
        loc_8667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 30), 'loc', False)
        # Processing the call keyword arguments (line 611)
        kwargs_8668 = {}
        # Getting the type of 'self' (line 611)
        self_8664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 12), 'self', False)
        # Obtaining the member 'label1' of a type (line 611)
        label1_8665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 12), self_8664, 'label1')
        # Obtaining the member 'set_y' of a type (line 611)
        set_y_8666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 12), label1_8665, 'set_y')
        # Calling set_y(args, kwargs) (line 611)
        set_y_call_result_8669 = invoke(stypy.reporting.localization.Localization(__file__, 611, 12), set_y_8666, *[loc_8667], **kwargs_8668)
        
        # SSA join for if statement (line 610)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 612)
        self_8670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 11), 'self')
        # Obtaining the member 'label2On' of a type (line 612)
        label2On_8671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 612, 11), self_8670, 'label2On')
        # Testing the type of an if condition (line 612)
        if_condition_8672 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 612, 8), label2On_8671)
        # Assigning a type to the variable 'if_condition_8672' (line 612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 8), 'if_condition_8672', if_condition_8672)
        # SSA begins for if statement (line 612)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_y(...): (line 613)
        # Processing the call arguments (line 613)
        # Getting the type of 'loc' (line 613)
        loc_8676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 30), 'loc', False)
        # Processing the call keyword arguments (line 613)
        kwargs_8677 = {}
        # Getting the type of 'self' (line 613)
        self_8673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 12), 'self', False)
        # Obtaining the member 'label2' of a type (line 613)
        label2_8674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 12), self_8673, 'label2')
        # Obtaining the member 'set_y' of a type (line 613)
        set_y_8675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 613, 12), label2_8674, 'set_y')
        # Calling set_y(args, kwargs) (line 613)
        set_y_call_result_8678 = invoke(stypy.reporting.localization.Localization(__file__, 613, 12), set_y_8675, *[loc_8676], **kwargs_8677)
        
        # SSA join for if statement (line 612)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 615):
        
        # Assigning a Name to a Attribute (line 615):
        # Getting the type of 'loc' (line 615)
        loc_8679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 20), 'loc')
        # Getting the type of 'self' (line 615)
        self_8680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 8), 'self')
        # Setting the type of the member '_loc' of a type (line 615)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 615, 8), self_8680, '_loc', loc_8679)
        
        # Assigning a Name to a Attribute (line 616):
        
        # Assigning a Name to a Attribute (line 616):
        # Getting the type of 'True' (line 616)
        True_8681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 21), 'True')
        # Getting the type of 'self' (line 616)
        self_8682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 616)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 8), self_8682, 'stale', True_8681)
        
        # ################# End of 'update_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_position' in the type store
        # Getting the type of 'stypy_return_type' (line 602)
        stypy_return_type_8683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8683)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_position'
        return stypy_return_type_8683


    @norecursion
    def get_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_view_interval'
        module_type_store = module_type_store.open_function_context('get_view_interval', 618, 4, False)
        # Assigning a type to the variable 'self' (line 619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YTick.get_view_interval.__dict__.__setitem__('stypy_localization', localization)
        YTick.get_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YTick.get_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        YTick.get_view_interval.__dict__.__setitem__('stypy_function_name', 'YTick.get_view_interval')
        YTick.get_view_interval.__dict__.__setitem__('stypy_param_names_list', [])
        YTick.get_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        YTick.get_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YTick.get_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        YTick.get_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        YTick.get_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YTick.get_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YTick.get_view_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_view_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_view_interval(...)' code ##################

        unicode_8684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 619, 8), 'unicode', u'return the Interval instance for this axis view limits')
        # Getting the type of 'self' (line 620)
        self_8685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 15), 'self')
        # Obtaining the member 'axes' of a type (line 620)
        axes_8686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 15), self_8685, 'axes')
        # Obtaining the member 'viewLim' of a type (line 620)
        viewLim_8687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 15), axes_8686, 'viewLim')
        # Obtaining the member 'intervaly' of a type (line 620)
        intervaly_8688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 15), viewLim_8687, 'intervaly')
        # Assigning a type to the variable 'stypy_return_type' (line 620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 'stypy_return_type', intervaly_8688)
        
        # ################# End of 'get_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 618)
        stypy_return_type_8689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8689)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_view_interval'
        return stypy_return_type_8689


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 500, 0, False)
        # Assigning a type to the variable 'self' (line 501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YTick.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'YTick' (line 500)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 0), 'YTick', YTick)

# Assigning a Str to a Name (line 505):
unicode_8690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 505, 15), 'unicode', u'ytick')
# Getting the type of 'YTick'
YTick_8691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'YTick')
# Setting the type of the member '__name__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), YTick_8691, '__name__', unicode_8690)
# Declaration of the 'Ticker' class

class Ticker(object, ):
    
    # Assigning a Name to a Name (line 624):
    
    # Assigning a Name to a Name (line 625):
    pass

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 623, 0, False)
        # Assigning a type to the variable 'self' (line 624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Ticker.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'Ticker' (line 623)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 0), 'Ticker', Ticker)

# Assigning a Name to a Name (line 624):
# Getting the type of 'None' (line 624)
None_8692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 14), 'None')
# Getting the type of 'Ticker'
Ticker_8693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Ticker')
# Setting the type of the member 'locator' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Ticker_8693, 'locator', None_8692)

# Assigning a Name to a Name (line 625):
# Getting the type of 'None' (line 625)
None_8694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 16), 'None')
# Getting the type of 'Ticker'
Ticker_8695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Ticker')
# Setting the type of the member 'formatter' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Ticker_8695, 'formatter', None_8694)
# Declaration of the 'Axis' class
# Getting the type of 'artist' (line 628)
artist_8696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 11), 'artist')
# Obtaining the member 'Artist' of a type (line 628)
Artist_8697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 628, 11), artist_8696, 'Artist')

class Axis(Artist_8697, ):
    unicode_8698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 635, (-1)), 'unicode', u'\n    Public attributes\n\n    * :attr:`axes.transData` - transform data coords to display coords\n    * :attr:`axes.transAxes` - transform axis coords to display coords\n    * :attr:`labelpad` - number of points between the axis and its label\n    ')
    
    # Assigning a Num to a Name (line 636):

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 638, 4, False)
        # Assigning a type to the variable 'self' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Axis.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Axis.stypy__str__')
        Axis.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        # Getting the type of 'self' (line 639)
        self_8699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 15), 'self')
        # Obtaining the member '__class__' of a type (line 639)
        class___8700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 15), self_8699, '__class__')
        # Obtaining the member '__name__' of a type (line 639)
        name___8701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 639, 15), class___8700, '__name__')
        unicode_8702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 14), 'unicode', u'(%f,%f)')
        
        # Call to tuple(...): (line 640)
        # Processing the call arguments (line 640)
        
        # Call to transform_point(...): (line 640)
        # Processing the call arguments (line 640)
        
        # Obtaining an instance of the builtin type 'tuple' (line 640)
        tuple_8708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 69), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 640)
        # Adding element type (line 640)
        int_8709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 69), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 640, 69), tuple_8708, int_8709)
        # Adding element type (line 640)
        int_8710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 72), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 640, 69), tuple_8708, int_8710)
        
        # Processing the call keyword arguments (line 640)
        kwargs_8711 = {}
        # Getting the type of 'self' (line 640)
        self_8704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 32), 'self', False)
        # Obtaining the member 'axes' of a type (line 640)
        axes_8705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 32), self_8704, 'axes')
        # Obtaining the member 'transAxes' of a type (line 640)
        transAxes_8706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 32), axes_8705, 'transAxes')
        # Obtaining the member 'transform_point' of a type (line 640)
        transform_point_8707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 32), transAxes_8706, 'transform_point')
        # Calling transform_point(args, kwargs) (line 640)
        transform_point_call_result_8712 = invoke(stypy.reporting.localization.Localization(__file__, 640, 32), transform_point_8707, *[tuple_8708], **kwargs_8711)
        
        # Processing the call keyword arguments (line 640)
        kwargs_8713 = {}
        # Getting the type of 'tuple' (line 640)
        tuple_8703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 26), 'tuple', False)
        # Calling tuple(args, kwargs) (line 640)
        tuple_call_result_8714 = invoke(stypy.reporting.localization.Localization(__file__, 640, 26), tuple_8703, *[transform_point_call_result_8712], **kwargs_8713)
        
        # Applying the binary operator '%' (line 640)
        result_mod_8715 = python_operator(stypy.reporting.localization.Localization(__file__, 640, 14), '%', unicode_8702, tuple_call_result_8714)
        
        # Applying the binary operator '+' (line 639)
        result_add_8716 = python_operator(stypy.reporting.localization.Localization(__file__, 639, 15), '+', name___8701, result_mod_8715)
        
        # Assigning a type to the variable 'stypy_return_type' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 8), 'stypy_return_type', result_add_8716)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 638)
        stypy_return_type_8717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8717)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_8717


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_8718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 642, 40), 'int')
        defaults = [int_8718]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 642, 4, False)
        # Assigning a type to the variable 'self' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.__init__', ['axes', 'pickradius'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['axes', 'pickradius'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_8719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 645, (-1)), 'unicode', u'\n        Init the axis with the parent Axes instance\n        ')
        
        # Call to __init__(...): (line 646)
        # Processing the call arguments (line 646)
        # Getting the type of 'self' (line 646)
        self_8723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 31), 'self', False)
        # Processing the call keyword arguments (line 646)
        kwargs_8724 = {}
        # Getting the type of 'artist' (line 646)
        artist_8720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 8), 'artist', False)
        # Obtaining the member 'Artist' of a type (line 646)
        Artist_8721 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 8), artist_8720, 'Artist')
        # Obtaining the member '__init__' of a type (line 646)
        init___8722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 646, 8), Artist_8721, '__init__')
        # Calling __init__(args, kwargs) (line 646)
        init___call_result_8725 = invoke(stypy.reporting.localization.Localization(__file__, 646, 8), init___8722, *[self_8723], **kwargs_8724)
        
        
        # Call to set_figure(...): (line 647)
        # Processing the call arguments (line 647)
        # Getting the type of 'axes' (line 647)
        axes_8728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 24), 'axes', False)
        # Obtaining the member 'figure' of a type (line 647)
        figure_8729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 24), axes_8728, 'figure')
        # Processing the call keyword arguments (line 647)
        kwargs_8730 = {}
        # Getting the type of 'self' (line 647)
        self_8726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 8), 'self', False)
        # Obtaining the member 'set_figure' of a type (line 647)
        set_figure_8727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 8), self_8726, 'set_figure')
        # Calling set_figure(args, kwargs) (line 647)
        set_figure_call_result_8731 = invoke(stypy.reporting.localization.Localization(__file__, 647, 8), set_figure_8727, *[figure_8729], **kwargs_8730)
        
        
        # Assigning a Name to a Attribute (line 652):
        
        # Assigning a Name to a Attribute (line 652):
        # Getting the type of 'True' (line 652)
        True_8732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 32), 'True')
        # Getting the type of 'self' (line 652)
        self_8733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'self')
        # Setting the type of the member 'isDefault_majloc' of a type (line 652)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 8), self_8733, 'isDefault_majloc', True_8732)
        
        # Assigning a Name to a Attribute (line 653):
        
        # Assigning a Name to a Attribute (line 653):
        # Getting the type of 'True' (line 653)
        True_8734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 32), 'True')
        # Getting the type of 'self' (line 653)
        self_8735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 8), 'self')
        # Setting the type of the member 'isDefault_minloc' of a type (line 653)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 8), self_8735, 'isDefault_minloc', True_8734)
        
        # Assigning a Name to a Attribute (line 654):
        
        # Assigning a Name to a Attribute (line 654):
        # Getting the type of 'True' (line 654)
        True_8736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 32), 'True')
        # Getting the type of 'self' (line 654)
        self_8737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 8), 'self')
        # Setting the type of the member 'isDefault_majfmt' of a type (line 654)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 8), self_8737, 'isDefault_majfmt', True_8736)
        
        # Assigning a Name to a Attribute (line 655):
        
        # Assigning a Name to a Attribute (line 655):
        # Getting the type of 'True' (line 655)
        True_8738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 32), 'True')
        # Getting the type of 'self' (line 655)
        self_8739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 8), 'self')
        # Setting the type of the member 'isDefault_minfmt' of a type (line 655)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 8), self_8739, 'isDefault_minfmt', True_8738)
        
        # Assigning a Name to a Attribute (line 656):
        
        # Assigning a Name to a Attribute (line 656):
        # Getting the type of 'True' (line 656)
        True_8740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 31), 'True')
        # Getting the type of 'self' (line 656)
        self_8741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 8), 'self')
        # Setting the type of the member 'isDefault_label' of a type (line 656)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 8), self_8741, 'isDefault_label', True_8740)
        
        # Assigning a Name to a Attribute (line 658):
        
        # Assigning a Name to a Attribute (line 658):
        # Getting the type of 'axes' (line 658)
        axes_8742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 20), 'axes')
        # Getting the type of 'self' (line 658)
        self_8743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 8), 'self')
        # Setting the type of the member 'axes' of a type (line 658)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 658, 8), self_8743, 'axes', axes_8742)
        
        # Assigning a Call to a Attribute (line 659):
        
        # Assigning a Call to a Attribute (line 659):
        
        # Call to Ticker(...): (line 659)
        # Processing the call keyword arguments (line 659)
        kwargs_8745 = {}
        # Getting the type of 'Ticker' (line 659)
        Ticker_8744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 21), 'Ticker', False)
        # Calling Ticker(args, kwargs) (line 659)
        Ticker_call_result_8746 = invoke(stypy.reporting.localization.Localization(__file__, 659, 21), Ticker_8744, *[], **kwargs_8745)
        
        # Getting the type of 'self' (line 659)
        self_8747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 8), 'self')
        # Setting the type of the member 'major' of a type (line 659)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 8), self_8747, 'major', Ticker_call_result_8746)
        
        # Assigning a Call to a Attribute (line 660):
        
        # Assigning a Call to a Attribute (line 660):
        
        # Call to Ticker(...): (line 660)
        # Processing the call keyword arguments (line 660)
        kwargs_8749 = {}
        # Getting the type of 'Ticker' (line 660)
        Ticker_8748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 21), 'Ticker', False)
        # Calling Ticker(args, kwargs) (line 660)
        Ticker_call_result_8750 = invoke(stypy.reporting.localization.Localization(__file__, 660, 21), Ticker_8748, *[], **kwargs_8749)
        
        # Getting the type of 'self' (line 660)
        self_8751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 8), 'self')
        # Setting the type of the member 'minor' of a type (line 660)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 8), self_8751, 'minor', Ticker_call_result_8750)
        
        # Assigning a Call to a Attribute (line 661):
        
        # Assigning a Call to a Attribute (line 661):
        
        # Call to CallbackRegistry(...): (line 661)
        # Processing the call keyword arguments (line 661)
        kwargs_8754 = {}
        # Getting the type of 'cbook' (line 661)
        cbook_8752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 25), 'cbook', False)
        # Obtaining the member 'CallbackRegistry' of a type (line 661)
        CallbackRegistry_8753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 25), cbook_8752, 'CallbackRegistry')
        # Calling CallbackRegistry(args, kwargs) (line 661)
        CallbackRegistry_call_result_8755 = invoke(stypy.reporting.localization.Localization(__file__, 661, 25), CallbackRegistry_8753, *[], **kwargs_8754)
        
        # Getting the type of 'self' (line 661)
        self_8756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 8), 'self')
        # Setting the type of the member 'callbacks' of a type (line 661)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 8), self_8756, 'callbacks', CallbackRegistry_call_result_8755)
        
        # Assigning a Name to a Attribute (line 663):
        
        # Assigning a Name to a Attribute (line 663):
        # Getting the type of 'True' (line 663)
        True_8757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 29), 'True')
        # Getting the type of 'self' (line 663)
        self_8758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 8), 'self')
        # Setting the type of the member '_autolabelpos' of a type (line 663)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 8), self_8758, '_autolabelpos', True_8757)
        
        # Assigning a Name to a Attribute (line 664):
        
        # Assigning a Name to a Attribute (line 664):
        # Getting the type of 'False' (line 664)
        False_8759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 29), 'False')
        # Getting the type of 'self' (line 664)
        self_8760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 8), 'self')
        # Setting the type of the member '_smart_bounds' of a type (line 664)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 664, 8), self_8760, '_smart_bounds', False_8759)
        
        # Assigning a Call to a Attribute (line 666):
        
        # Assigning a Call to a Attribute (line 666):
        
        # Call to _get_label(...): (line 666)
        # Processing the call keyword arguments (line 666)
        kwargs_8763 = {}
        # Getting the type of 'self' (line 666)
        self_8761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 21), 'self', False)
        # Obtaining the member '_get_label' of a type (line 666)
        _get_label_8762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 21), self_8761, '_get_label')
        # Calling _get_label(args, kwargs) (line 666)
        _get_label_call_result_8764 = invoke(stypy.reporting.localization.Localization(__file__, 666, 21), _get_label_8762, *[], **kwargs_8763)
        
        # Getting the type of 'self' (line 666)
        self_8765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 8), 'self')
        # Setting the type of the member 'label' of a type (line 666)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 666, 8), self_8765, 'label', _get_label_call_result_8764)
        
        # Assigning a Subscript to a Attribute (line 667):
        
        # Assigning a Subscript to a Attribute (line 667):
        
        # Obtaining the type of the subscript
        unicode_8766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 667, 33), 'unicode', u'axes.labelpad')
        # Getting the type of 'rcParams' (line 667)
        rcParams_8767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 24), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 667)
        getitem___8768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 24), rcParams_8767, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 667)
        subscript_call_result_8769 = invoke(stypy.reporting.localization.Localization(__file__, 667, 24), getitem___8768, unicode_8766)
        
        # Getting the type of 'self' (line 667)
        self_8770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 667, 8), 'self')
        # Setting the type of the member 'labelpad' of a type (line 667)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 667, 8), self_8770, 'labelpad', subscript_call_result_8769)
        
        # Assigning a Call to a Attribute (line 668):
        
        # Assigning a Call to a Attribute (line 668):
        
        # Call to _get_offset_text(...): (line 668)
        # Processing the call keyword arguments (line 668)
        kwargs_8773 = {}
        # Getting the type of 'self' (line 668)
        self_8771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 26), 'self', False)
        # Obtaining the member '_get_offset_text' of a type (line 668)
        _get_offset_text_8772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 26), self_8771, '_get_offset_text')
        # Calling _get_offset_text(args, kwargs) (line 668)
        _get_offset_text_call_result_8774 = invoke(stypy.reporting.localization.Localization(__file__, 668, 26), _get_offset_text_8772, *[], **kwargs_8773)
        
        # Getting the type of 'self' (line 668)
        self_8775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 8), 'self')
        # Setting the type of the member 'offsetText' of a type (line 668)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 668, 8), self_8775, 'offsetText', _get_offset_text_call_result_8774)
        
        # Assigning a List to a Attribute (line 669):
        
        # Assigning a List to a Attribute (line 669):
        
        # Obtaining an instance of the builtin type 'list' (line 669)
        list_8776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 669, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 669)
        
        # Getting the type of 'self' (line 669)
        self_8777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 8), 'self')
        # Setting the type of the member 'majorTicks' of a type (line 669)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 669, 8), self_8777, 'majorTicks', list_8776)
        
        # Assigning a List to a Attribute (line 670):
        
        # Assigning a List to a Attribute (line 670):
        
        # Obtaining an instance of the builtin type 'list' (line 670)
        list_8778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 670)
        
        # Getting the type of 'self' (line 670)
        self_8779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 670, 8), 'self')
        # Setting the type of the member 'minorTicks' of a type (line 670)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 670, 8), self_8779, 'minorTicks', list_8778)
        
        # Assigning a Name to a Attribute (line 671):
        
        # Assigning a Name to a Attribute (line 671):
        # Getting the type of 'None' (line 671)
        None_8780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 25), 'None')
        # Getting the type of 'self' (line 671)
        self_8781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 8), 'self')
        # Setting the type of the member 'unit_data' of a type (line 671)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 671, 8), self_8781, 'unit_data', None_8780)
        
        # Assigning a Name to a Attribute (line 672):
        
        # Assigning a Name to a Attribute (line 672):
        # Getting the type of 'pickradius' (line 672)
        pickradius_8782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 26), 'pickradius')
        # Getting the type of 'self' (line 672)
        self_8783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 8), 'self')
        # Setting the type of the member 'pickradius' of a type (line 672)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 8), self_8783, 'pickradius', pickradius_8782)
        
        # Assigning a Call to a Attribute (line 675):
        
        # Assigning a Call to a Attribute (line 675):
        
        # Call to dict(...): (line 675)
        # Processing the call keyword arguments (line 675)
        kwargs_8785 = {}
        # Getting the type of 'dict' (line 675)
        dict_8784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 30), 'dict', False)
        # Calling dict(args, kwargs) (line 675)
        dict_call_result_8786 = invoke(stypy.reporting.localization.Localization(__file__, 675, 30), dict_8784, *[], **kwargs_8785)
        
        # Getting the type of 'self' (line 675)
        self_8787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 675, 8), 'self')
        # Setting the type of the member '_major_tick_kw' of a type (line 675)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 675, 8), self_8787, '_major_tick_kw', dict_call_result_8786)
        
        # Assigning a Call to a Attribute (line 676):
        
        # Assigning a Call to a Attribute (line 676):
        
        # Call to dict(...): (line 676)
        # Processing the call keyword arguments (line 676)
        kwargs_8789 = {}
        # Getting the type of 'dict' (line 676)
        dict_8788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 30), 'dict', False)
        # Calling dict(args, kwargs) (line 676)
        dict_call_result_8790 = invoke(stypy.reporting.localization.Localization(__file__, 676, 30), dict_8788, *[], **kwargs_8789)
        
        # Getting the type of 'self' (line 676)
        self_8791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 8), 'self')
        # Setting the type of the member '_minor_tick_kw' of a type (line 676)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 676, 8), self_8791, '_minor_tick_kw', dict_call_result_8790)
        
        # Call to cla(...): (line 678)
        # Processing the call keyword arguments (line 678)
        kwargs_8794 = {}
        # Getting the type of 'self' (line 678)
        self_8792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 8), 'self', False)
        # Obtaining the member 'cla' of a type (line 678)
        cla_8793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 8), self_8792, 'cla')
        # Calling cla(args, kwargs) (line 678)
        cla_call_result_8795 = invoke(stypy.reporting.localization.Localization(__file__, 678, 8), cla_8793, *[], **kwargs_8794)
        
        
        # Call to _set_scale(...): (line 679)
        # Processing the call arguments (line 679)
        unicode_8798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 679, 24), 'unicode', u'linear')
        # Processing the call keyword arguments (line 679)
        kwargs_8799 = {}
        # Getting the type of 'self' (line 679)
        self_8796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 8), 'self', False)
        # Obtaining the member '_set_scale' of a type (line 679)
        _set_scale_8797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 8), self_8796, '_set_scale')
        # Calling _set_scale(args, kwargs) (line 679)
        _set_scale_call_result_8800 = invoke(stypy.reporting.localization.Localization(__file__, 679, 8), _set_scale_8797, *[unicode_8798], **kwargs_8799)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def set_label_coords(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 681)
        None_8801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 47), 'None')
        defaults = [None_8801]
        # Create a new context for function 'set_label_coords'
        module_type_store = module_type_store.open_function_context('set_label_coords', 681, 4, False)
        # Assigning a type to the variable 'self' (line 682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 682, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_label_coords.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_label_coords.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_label_coords.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_label_coords.__dict__.__setitem__('stypy_function_name', 'Axis.set_label_coords')
        Axis.set_label_coords.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'transform'])
        Axis.set_label_coords.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_label_coords.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_label_coords.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_label_coords.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_label_coords.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_label_coords.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_label_coords', ['x', 'y', 'transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_label_coords', localization, ['x', 'y', 'transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_label_coords(...)' code ##################

        unicode_8802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 694, (-1)), 'unicode', u'\n        Set the coordinates of the label.  By default, the x\n        coordinate of the y label is determined by the tick label\n        bounding boxes, but this can lead to poor alignment of\n        multiple ylabels if there are multiple axes.  Ditto for the y\n        coodinate of the x label.\n\n        You can also specify the coordinate system of the label with\n        the transform.  If None, the default coordinate system will be\n        the axes coordinate system (0,0) is (left,bottom), (0.5, 0.5)\n        is middle, etc\n\n        ')
        
        # Assigning a Name to a Attribute (line 696):
        
        # Assigning a Name to a Attribute (line 696):
        # Getting the type of 'False' (line 696)
        False_8803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 29), 'False')
        # Getting the type of 'self' (line 696)
        self_8804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 8), 'self')
        # Setting the type of the member '_autolabelpos' of a type (line 696)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 696, 8), self_8804, '_autolabelpos', False_8803)
        
        # Type idiom detected: calculating its left and rigth part (line 697)
        # Getting the type of 'transform' (line 697)
        transform_8805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 11), 'transform')
        # Getting the type of 'None' (line 697)
        None_8806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 24), 'None')
        
        (may_be_8807, more_types_in_union_8808) = may_be_none(transform_8805, None_8806)

        if may_be_8807:

            if more_types_in_union_8808:
                # Runtime conditional SSA (line 697)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 698):
            
            # Assigning a Attribute to a Name (line 698):
            # Getting the type of 'self' (line 698)
            self_8809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 24), 'self')
            # Obtaining the member 'axes' of a type (line 698)
            axes_8810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 24), self_8809, 'axes')
            # Obtaining the member 'transAxes' of a type (line 698)
            transAxes_8811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 24), axes_8810, 'transAxes')
            # Assigning a type to the variable 'transform' (line 698)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 12), 'transform', transAxes_8811)

            if more_types_in_union_8808:
                # SSA join for if statement (line 697)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_transform(...): (line 700)
        # Processing the call arguments (line 700)
        # Getting the type of 'transform' (line 700)
        transform_8815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 33), 'transform', False)
        # Processing the call keyword arguments (line 700)
        kwargs_8816 = {}
        # Getting the type of 'self' (line 700)
        self_8812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 8), 'self', False)
        # Obtaining the member 'label' of a type (line 700)
        label_8813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 8), self_8812, 'label')
        # Obtaining the member 'set_transform' of a type (line 700)
        set_transform_8814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 700, 8), label_8813, 'set_transform')
        # Calling set_transform(args, kwargs) (line 700)
        set_transform_call_result_8817 = invoke(stypy.reporting.localization.Localization(__file__, 700, 8), set_transform_8814, *[transform_8815], **kwargs_8816)
        
        
        # Call to set_position(...): (line 701)
        # Processing the call arguments (line 701)
        
        # Obtaining an instance of the builtin type 'tuple' (line 701)
        tuple_8821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 701, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 701)
        # Adding element type (line 701)
        # Getting the type of 'x' (line 701)
        x_8822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 33), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 701, 33), tuple_8821, x_8822)
        # Adding element type (line 701)
        # Getting the type of 'y' (line 701)
        y_8823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 36), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 701, 33), tuple_8821, y_8823)
        
        # Processing the call keyword arguments (line 701)
        kwargs_8824 = {}
        # Getting the type of 'self' (line 701)
        self_8818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 8), 'self', False)
        # Obtaining the member 'label' of a type (line 701)
        label_8819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 8), self_8818, 'label')
        # Obtaining the member 'set_position' of a type (line 701)
        set_position_8820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 8), label_8819, 'set_position')
        # Calling set_position(args, kwargs) (line 701)
        set_position_call_result_8825 = invoke(stypy.reporting.localization.Localization(__file__, 701, 8), set_position_8820, *[tuple_8821], **kwargs_8824)
        
        
        # Assigning a Name to a Attribute (line 702):
        
        # Assigning a Name to a Attribute (line 702):
        # Getting the type of 'True' (line 702)
        True_8826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 21), 'True')
        # Getting the type of 'self' (line 702)
        self_8827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 702)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 702, 8), self_8827, 'stale', True_8826)
        
        # ################# End of 'set_label_coords(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_label_coords' in the type store
        # Getting the type of 'stypy_return_type' (line 681)
        stypy_return_type_8828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 681, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8828)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_label_coords'
        return stypy_return_type_8828


    @norecursion
    def get_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_transform'
        module_type_store = module_type_store.open_function_context('get_transform', 704, 4, False)
        # Assigning a type to the variable 'self' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_transform.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_transform.__dict__.__setitem__('stypy_function_name', 'Axis.get_transform')
        Axis.get_transform.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_transform(...)' code ##################

        
        # Call to get_transform(...): (line 705)
        # Processing the call keyword arguments (line 705)
        kwargs_8832 = {}
        # Getting the type of 'self' (line 705)
        self_8829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 15), 'self', False)
        # Obtaining the member '_scale' of a type (line 705)
        _scale_8830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 15), self_8829, '_scale')
        # Obtaining the member 'get_transform' of a type (line 705)
        get_transform_8831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 705, 15), _scale_8830, 'get_transform')
        # Calling get_transform(args, kwargs) (line 705)
        get_transform_call_result_8833 = invoke(stypy.reporting.localization.Localization(__file__, 705, 15), get_transform_8831, *[], **kwargs_8832)
        
        # Assigning a type to the variable 'stypy_return_type' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 'stypy_return_type', get_transform_call_result_8833)
        
        # ################# End of 'get_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 704)
        stypy_return_type_8834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8834)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_transform'
        return stypy_return_type_8834


    @norecursion
    def get_scale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_scale'
        module_type_store = module_type_store.open_function_context('get_scale', 707, 4, False)
        # Assigning a type to the variable 'self' (line 708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_scale.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_scale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_scale.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_scale.__dict__.__setitem__('stypy_function_name', 'Axis.get_scale')
        Axis.get_scale.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_scale.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_scale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_scale.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_scale.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_scale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_scale.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_scale', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_scale', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_scale(...)' code ##################

        # Getting the type of 'self' (line 708)
        self_8835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 15), 'self')
        # Obtaining the member '_scale' of a type (line 708)
        _scale_8836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 15), self_8835, '_scale')
        # Obtaining the member 'name' of a type (line 708)
        name_8837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 15), _scale_8836, 'name')
        # Assigning a type to the variable 'stypy_return_type' (line 708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 8), 'stypy_return_type', name_8837)
        
        # ################# End of 'get_scale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_scale' in the type store
        # Getting the type of 'stypy_return_type' (line 707)
        stypy_return_type_8838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8838)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_scale'
        return stypy_return_type_8838


    @norecursion
    def _set_scale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_scale'
        module_type_store = module_type_store.open_function_context('_set_scale', 710, 4, False)
        # Assigning a type to the variable 'self' (line 711)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 711, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis._set_scale.__dict__.__setitem__('stypy_localization', localization)
        Axis._set_scale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis._set_scale.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis._set_scale.__dict__.__setitem__('stypy_function_name', 'Axis._set_scale')
        Axis._set_scale.__dict__.__setitem__('stypy_param_names_list', ['value'])
        Axis._set_scale.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis._set_scale.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Axis._set_scale.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis._set_scale.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis._set_scale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis._set_scale.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis._set_scale', ['value'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_scale', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_scale(...)' code ##################

        
        # Assigning a Call to a Attribute (line 711):
        
        # Assigning a Call to a Attribute (line 711):
        
        # Call to scale_factory(...): (line 711)
        # Processing the call arguments (line 711)
        # Getting the type of 'value' (line 711)
        value_8841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 43), 'value', False)
        # Getting the type of 'self' (line 711)
        self_8842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 50), 'self', False)
        # Processing the call keyword arguments (line 711)
        # Getting the type of 'kwargs' (line 711)
        kwargs_8843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 58), 'kwargs', False)
        kwargs_8844 = {'kwargs_8843': kwargs_8843}
        # Getting the type of 'mscale' (line 711)
        mscale_8839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 22), 'mscale', False)
        # Obtaining the member 'scale_factory' of a type (line 711)
        scale_factory_8840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 22), mscale_8839, 'scale_factory')
        # Calling scale_factory(args, kwargs) (line 711)
        scale_factory_call_result_8845 = invoke(stypy.reporting.localization.Localization(__file__, 711, 22), scale_factory_8840, *[value_8841, self_8842], **kwargs_8844)
        
        # Getting the type of 'self' (line 711)
        self_8846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 8), 'self')
        # Setting the type of the member '_scale' of a type (line 711)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 711, 8), self_8846, '_scale', scale_factory_call_result_8845)
        
        # Call to set_default_locators_and_formatters(...): (line 712)
        # Processing the call arguments (line 712)
        # Getting the type of 'self' (line 712)
        self_8850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 56), 'self', False)
        # Processing the call keyword arguments (line 712)
        kwargs_8851 = {}
        # Getting the type of 'self' (line 712)
        self_8847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 8), 'self', False)
        # Obtaining the member '_scale' of a type (line 712)
        _scale_8848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 8), self_8847, '_scale')
        # Obtaining the member 'set_default_locators_and_formatters' of a type (line 712)
        set_default_locators_and_formatters_8849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 8), _scale_8848, 'set_default_locators_and_formatters')
        # Calling set_default_locators_and_formatters(args, kwargs) (line 712)
        set_default_locators_and_formatters_call_result_8852 = invoke(stypy.reporting.localization.Localization(__file__, 712, 8), set_default_locators_and_formatters_8849, *[self_8850], **kwargs_8851)
        
        
        # Assigning a Name to a Attribute (line 714):
        
        # Assigning a Name to a Attribute (line 714):
        # Getting the type of 'True' (line 714)
        True_8853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 32), 'True')
        # Getting the type of 'self' (line 714)
        self_8854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 714, 8), 'self')
        # Setting the type of the member 'isDefault_majloc' of a type (line 714)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 714, 8), self_8854, 'isDefault_majloc', True_8853)
        
        # Assigning a Name to a Attribute (line 715):
        
        # Assigning a Name to a Attribute (line 715):
        # Getting the type of 'True' (line 715)
        True_8855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 32), 'True')
        # Getting the type of 'self' (line 715)
        self_8856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 8), 'self')
        # Setting the type of the member 'isDefault_minloc' of a type (line 715)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 8), self_8856, 'isDefault_minloc', True_8855)
        
        # Assigning a Name to a Attribute (line 716):
        
        # Assigning a Name to a Attribute (line 716):
        # Getting the type of 'True' (line 716)
        True_8857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 32), 'True')
        # Getting the type of 'self' (line 716)
        self_8858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 8), 'self')
        # Setting the type of the member 'isDefault_majfmt' of a type (line 716)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 716, 8), self_8858, 'isDefault_majfmt', True_8857)
        
        # Assigning a Name to a Attribute (line 717):
        
        # Assigning a Name to a Attribute (line 717):
        # Getting the type of 'True' (line 717)
        True_8859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 32), 'True')
        # Getting the type of 'self' (line 717)
        self_8860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 8), 'self')
        # Setting the type of the member 'isDefault_minfmt' of a type (line 717)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 717, 8), self_8860, 'isDefault_minfmt', True_8859)
        
        # ################# End of '_set_scale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_scale' in the type store
        # Getting the type of 'stypy_return_type' (line 710)
        stypy_return_type_8861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 710, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8861)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_scale'
        return stypy_return_type_8861


    @norecursion
    def limit_range_for_scale(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'limit_range_for_scale'
        module_type_store = module_type_store.open_function_context('limit_range_for_scale', 719, 4, False)
        # Assigning a type to the variable 'self' (line 720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 720, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.limit_range_for_scale.__dict__.__setitem__('stypy_localization', localization)
        Axis.limit_range_for_scale.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.limit_range_for_scale.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.limit_range_for_scale.__dict__.__setitem__('stypy_function_name', 'Axis.limit_range_for_scale')
        Axis.limit_range_for_scale.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax'])
        Axis.limit_range_for_scale.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.limit_range_for_scale.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.limit_range_for_scale.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.limit_range_for_scale.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.limit_range_for_scale.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.limit_range_for_scale.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.limit_range_for_scale', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'limit_range_for_scale', localization, ['vmin', 'vmax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'limit_range_for_scale(...)' code ##################

        
        # Call to limit_range_for_scale(...): (line 720)
        # Processing the call arguments (line 720)
        # Getting the type of 'vmin' (line 720)
        vmin_8865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 49), 'vmin', False)
        # Getting the type of 'vmax' (line 720)
        vmax_8866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 55), 'vmax', False)
        
        # Call to get_minpos(...): (line 720)
        # Processing the call keyword arguments (line 720)
        kwargs_8869 = {}
        # Getting the type of 'self' (line 720)
        self_8867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 61), 'self', False)
        # Obtaining the member 'get_minpos' of a type (line 720)
        get_minpos_8868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 720, 61), self_8867, 'get_minpos')
        # Calling get_minpos(args, kwargs) (line 720)
        get_minpos_call_result_8870 = invoke(stypy.reporting.localization.Localization(__file__, 720, 61), get_minpos_8868, *[], **kwargs_8869)
        
        # Processing the call keyword arguments (line 720)
        kwargs_8871 = {}
        # Getting the type of 'self' (line 720)
        self_8862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 15), 'self', False)
        # Obtaining the member '_scale' of a type (line 720)
        _scale_8863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 720, 15), self_8862, '_scale')
        # Obtaining the member 'limit_range_for_scale' of a type (line 720)
        limit_range_for_scale_8864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 720, 15), _scale_8863, 'limit_range_for_scale')
        # Calling limit_range_for_scale(args, kwargs) (line 720)
        limit_range_for_scale_call_result_8872 = invoke(stypy.reporting.localization.Localization(__file__, 720, 15), limit_range_for_scale_8864, *[vmin_8865, vmax_8866, get_minpos_call_result_8870], **kwargs_8871)
        
        # Assigning a type to the variable 'stypy_return_type' (line 720)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 720, 8), 'stypy_return_type', limit_range_for_scale_call_result_8872)
        
        # ################# End of 'limit_range_for_scale(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'limit_range_for_scale' in the type store
        # Getting the type of 'stypy_return_type' (line 719)
        stypy_return_type_8873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8873)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'limit_range_for_scale'
        return stypy_return_type_8873


    @norecursion
    def unit_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'unit_data'
        module_type_store = module_type_store.open_function_context('unit_data', 722, 4, False)
        # Assigning a type to the variable 'self' (line 723)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 723, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.unit_data.__dict__.__setitem__('stypy_localization', localization)
        Axis.unit_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.unit_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.unit_data.__dict__.__setitem__('stypy_function_name', 'Axis.unit_data')
        Axis.unit_data.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.unit_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.unit_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.unit_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.unit_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.unit_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.unit_data.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.unit_data', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'unit_data', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'unit_data(...)' code ##################

        unicode_8874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, (-1)), 'unicode', u'Holds data that a ConversionInterface subclass uses\n        to convert between labels and indexes\n        ')
        # Getting the type of 'self' (line 727)
        self_8875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 15), 'self')
        # Obtaining the member '_unit_data' of a type (line 727)
        _unit_data_8876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 15), self_8875, '_unit_data')
        # Assigning a type to the variable 'stypy_return_type' (line 727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'stypy_return_type', _unit_data_8876)
        
        # ################# End of 'unit_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'unit_data' in the type store
        # Getting the type of 'stypy_return_type' (line 722)
        stypy_return_type_8877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8877)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'unit_data'
        return stypy_return_type_8877


    @norecursion
    def unit_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'unit_data'
        module_type_store = module_type_store.open_function_context('unit_data', 729, 4, False)
        # Assigning a type to the variable 'self' (line 730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.unit_data.__dict__.__setitem__('stypy_localization', localization)
        Axis.unit_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.unit_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.unit_data.__dict__.__setitem__('stypy_function_name', 'Axis.unit_data')
        Axis.unit_data.__dict__.__setitem__('stypy_param_names_list', ['unit_data'])
        Axis.unit_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.unit_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.unit_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.unit_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.unit_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.unit_data.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.unit_data', ['unit_data'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'unit_data', localization, ['unit_data'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'unit_data(...)' code ##################

        
        # Assigning a Name to a Attribute (line 731):
        
        # Assigning a Name to a Attribute (line 731):
        # Getting the type of 'unit_data' (line 731)
        unit_data_8878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 26), 'unit_data')
        # Getting the type of 'self' (line 731)
        self_8879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 8), 'self')
        # Setting the type of the member '_unit_data' of a type (line 731)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 731, 8), self_8879, '_unit_data', unit_data_8878)
        
        # ################# End of 'unit_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'unit_data' in the type store
        # Getting the type of 'stypy_return_type' (line 729)
        stypy_return_type_8880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8880)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'unit_data'
        return stypy_return_type_8880


    @norecursion
    def get_children(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_children'
        module_type_store = module_type_store.open_function_context('get_children', 733, 4, False)
        # Assigning a type to the variable 'self' (line 734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_children.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_children.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_children.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_children.__dict__.__setitem__('stypy_function_name', 'Axis.get_children')
        Axis.get_children.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_children.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_children.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_children.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_children.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_children.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_children.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_children', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_children', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_children(...)' code ##################

        
        # Assigning a List to a Name (line 734):
        
        # Assigning a List to a Name (line 734):
        
        # Obtaining an instance of the builtin type 'list' (line 734)
        list_8881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 734)
        # Adding element type (line 734)
        # Getting the type of 'self' (line 734)
        self_8882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 20), 'self')
        # Obtaining the member 'label' of a type (line 734)
        label_8883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 20), self_8882, 'label')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 734, 19), list_8881, label_8883)
        # Adding element type (line 734)
        # Getting the type of 'self' (line 734)
        self_8884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 32), 'self')
        # Obtaining the member 'offsetText' of a type (line 734)
        offsetText_8885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 32), self_8884, 'offsetText')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 734, 19), list_8881, offsetText_8885)
        
        # Assigning a type to the variable 'children' (line 734)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'children', list_8881)
        
        # Assigning a Call to a Name (line 735):
        
        # Assigning a Call to a Name (line 735):
        
        # Call to get_major_ticks(...): (line 735)
        # Processing the call keyword arguments (line 735)
        kwargs_8888 = {}
        # Getting the type of 'self' (line 735)
        self_8886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 21), 'self', False)
        # Obtaining the member 'get_major_ticks' of a type (line 735)
        get_major_ticks_8887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 735, 21), self_8886, 'get_major_ticks')
        # Calling get_major_ticks(args, kwargs) (line 735)
        get_major_ticks_call_result_8889 = invoke(stypy.reporting.localization.Localization(__file__, 735, 21), get_major_ticks_8887, *[], **kwargs_8888)
        
        # Assigning a type to the variable 'majorticks' (line 735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 8), 'majorticks', get_major_ticks_call_result_8889)
        
        # Assigning a Call to a Name (line 736):
        
        # Assigning a Call to a Name (line 736):
        
        # Call to get_minor_ticks(...): (line 736)
        # Processing the call keyword arguments (line 736)
        kwargs_8892 = {}
        # Getting the type of 'self' (line 736)
        self_8890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 21), 'self', False)
        # Obtaining the member 'get_minor_ticks' of a type (line 736)
        get_minor_ticks_8891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 736, 21), self_8890, 'get_minor_ticks')
        # Calling get_minor_ticks(args, kwargs) (line 736)
        get_minor_ticks_call_result_8893 = invoke(stypy.reporting.localization.Localization(__file__, 736, 21), get_minor_ticks_8891, *[], **kwargs_8892)
        
        # Assigning a type to the variable 'minorticks' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'minorticks', get_minor_ticks_call_result_8893)
        
        # Call to extend(...): (line 738)
        # Processing the call arguments (line 738)
        # Getting the type of 'majorticks' (line 738)
        majorticks_8896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 24), 'majorticks', False)
        # Processing the call keyword arguments (line 738)
        kwargs_8897 = {}
        # Getting the type of 'children' (line 738)
        children_8894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 738)
        extend_8895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 8), children_8894, 'extend')
        # Calling extend(args, kwargs) (line 738)
        extend_call_result_8898 = invoke(stypy.reporting.localization.Localization(__file__, 738, 8), extend_8895, *[majorticks_8896], **kwargs_8897)
        
        
        # Call to extend(...): (line 739)
        # Processing the call arguments (line 739)
        # Getting the type of 'minorticks' (line 739)
        minorticks_8901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 24), 'minorticks', False)
        # Processing the call keyword arguments (line 739)
        kwargs_8902 = {}
        # Getting the type of 'children' (line 739)
        children_8899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 739)
        extend_8900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 8), children_8899, 'extend')
        # Calling extend(args, kwargs) (line 739)
        extend_call_result_8903 = invoke(stypy.reporting.localization.Localization(__file__, 739, 8), extend_8900, *[minorticks_8901], **kwargs_8902)
        
        # Getting the type of 'children' (line 740)
        children_8904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 15), 'children')
        # Assigning a type to the variable 'stypy_return_type' (line 740)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 740, 8), 'stypy_return_type', children_8904)
        
        # ################# End of 'get_children(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_children' in the type store
        # Getting the type of 'stypy_return_type' (line 733)
        stypy_return_type_8905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_8905)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_children'
        return stypy_return_type_8905


    @norecursion
    def cla(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'cla'
        module_type_store = module_type_store.open_function_context('cla', 742, 4, False)
        # Assigning a type to the variable 'self' (line 743)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.cla.__dict__.__setitem__('stypy_localization', localization)
        Axis.cla.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.cla.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.cla.__dict__.__setitem__('stypy_function_name', 'Axis.cla')
        Axis.cla.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.cla.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.cla.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.cla.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.cla.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.cla.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.cla.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.cla', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'cla', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'cla(...)' code ##################

        unicode_8906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 8), 'unicode', u'clear the current axis')
        
        # Call to set_major_locator(...): (line 744)
        # Processing the call arguments (line 744)
        
        # Call to AutoLocator(...): (line 744)
        # Processing the call keyword arguments (line 744)
        kwargs_8911 = {}
        # Getting the type of 'mticker' (line 744)
        mticker_8909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 31), 'mticker', False)
        # Obtaining the member 'AutoLocator' of a type (line 744)
        AutoLocator_8910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 31), mticker_8909, 'AutoLocator')
        # Calling AutoLocator(args, kwargs) (line 744)
        AutoLocator_call_result_8912 = invoke(stypy.reporting.localization.Localization(__file__, 744, 31), AutoLocator_8910, *[], **kwargs_8911)
        
        # Processing the call keyword arguments (line 744)
        kwargs_8913 = {}
        # Getting the type of 'self' (line 744)
        self_8907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 8), 'self', False)
        # Obtaining the member 'set_major_locator' of a type (line 744)
        set_major_locator_8908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 744, 8), self_8907, 'set_major_locator')
        # Calling set_major_locator(args, kwargs) (line 744)
        set_major_locator_call_result_8914 = invoke(stypy.reporting.localization.Localization(__file__, 744, 8), set_major_locator_8908, *[AutoLocator_call_result_8912], **kwargs_8913)
        
        
        # Call to set_major_formatter(...): (line 745)
        # Processing the call arguments (line 745)
        
        # Call to ScalarFormatter(...): (line 745)
        # Processing the call keyword arguments (line 745)
        kwargs_8919 = {}
        # Getting the type of 'mticker' (line 745)
        mticker_8917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 33), 'mticker', False)
        # Obtaining the member 'ScalarFormatter' of a type (line 745)
        ScalarFormatter_8918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 33), mticker_8917, 'ScalarFormatter')
        # Calling ScalarFormatter(args, kwargs) (line 745)
        ScalarFormatter_call_result_8920 = invoke(stypy.reporting.localization.Localization(__file__, 745, 33), ScalarFormatter_8918, *[], **kwargs_8919)
        
        # Processing the call keyword arguments (line 745)
        kwargs_8921 = {}
        # Getting the type of 'self' (line 745)
        self_8915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 8), 'self', False)
        # Obtaining the member 'set_major_formatter' of a type (line 745)
        set_major_formatter_8916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 8), self_8915, 'set_major_formatter')
        # Calling set_major_formatter(args, kwargs) (line 745)
        set_major_formatter_call_result_8922 = invoke(stypy.reporting.localization.Localization(__file__, 745, 8), set_major_formatter_8916, *[ScalarFormatter_call_result_8920], **kwargs_8921)
        
        
        # Call to set_minor_locator(...): (line 746)
        # Processing the call arguments (line 746)
        
        # Call to NullLocator(...): (line 746)
        # Processing the call keyword arguments (line 746)
        kwargs_8927 = {}
        # Getting the type of 'mticker' (line 746)
        mticker_8925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 31), 'mticker', False)
        # Obtaining the member 'NullLocator' of a type (line 746)
        NullLocator_8926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 31), mticker_8925, 'NullLocator')
        # Calling NullLocator(args, kwargs) (line 746)
        NullLocator_call_result_8928 = invoke(stypy.reporting.localization.Localization(__file__, 746, 31), NullLocator_8926, *[], **kwargs_8927)
        
        # Processing the call keyword arguments (line 746)
        kwargs_8929 = {}
        # Getting the type of 'self' (line 746)
        self_8923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 8), 'self', False)
        # Obtaining the member 'set_minor_locator' of a type (line 746)
        set_minor_locator_8924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 8), self_8923, 'set_minor_locator')
        # Calling set_minor_locator(args, kwargs) (line 746)
        set_minor_locator_call_result_8930 = invoke(stypy.reporting.localization.Localization(__file__, 746, 8), set_minor_locator_8924, *[NullLocator_call_result_8928], **kwargs_8929)
        
        
        # Call to set_minor_formatter(...): (line 747)
        # Processing the call arguments (line 747)
        
        # Call to NullFormatter(...): (line 747)
        # Processing the call keyword arguments (line 747)
        kwargs_8935 = {}
        # Getting the type of 'mticker' (line 747)
        mticker_8933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 33), 'mticker', False)
        # Obtaining the member 'NullFormatter' of a type (line 747)
        NullFormatter_8934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 33), mticker_8933, 'NullFormatter')
        # Calling NullFormatter(args, kwargs) (line 747)
        NullFormatter_call_result_8936 = invoke(stypy.reporting.localization.Localization(__file__, 747, 33), NullFormatter_8934, *[], **kwargs_8935)
        
        # Processing the call keyword arguments (line 747)
        kwargs_8937 = {}
        # Getting the type of 'self' (line 747)
        self_8931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 747, 8), 'self', False)
        # Obtaining the member 'set_minor_formatter' of a type (line 747)
        set_minor_formatter_8932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 747, 8), self_8931, 'set_minor_formatter')
        # Calling set_minor_formatter(args, kwargs) (line 747)
        set_minor_formatter_call_result_8938 = invoke(stypy.reporting.localization.Localization(__file__, 747, 8), set_minor_formatter_8932, *[NullFormatter_call_result_8936], **kwargs_8937)
        
        
        # Call to set_label_text(...): (line 749)
        # Processing the call arguments (line 749)
        unicode_8941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 749, 28), 'unicode', u'')
        # Processing the call keyword arguments (line 749)
        kwargs_8942 = {}
        # Getting the type of 'self' (line 749)
        self_8939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 8), 'self', False)
        # Obtaining the member 'set_label_text' of a type (line 749)
        set_label_text_8940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 749, 8), self_8939, 'set_label_text')
        # Calling set_label_text(args, kwargs) (line 749)
        set_label_text_call_result_8943 = invoke(stypy.reporting.localization.Localization(__file__, 749, 8), set_label_text_8940, *[unicode_8941], **kwargs_8942)
        
        
        # Call to _set_artist_props(...): (line 750)
        # Processing the call arguments (line 750)
        # Getting the type of 'self' (line 750)
        self_8946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 31), 'self', False)
        # Obtaining the member 'label' of a type (line 750)
        label_8947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 31), self_8946, 'label')
        # Processing the call keyword arguments (line 750)
        kwargs_8948 = {}
        # Getting the type of 'self' (line 750)
        self_8944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 750)
        _set_artist_props_8945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 750, 8), self_8944, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 750)
        _set_artist_props_call_result_8949 = invoke(stypy.reporting.localization.Localization(__file__, 750, 8), _set_artist_props_8945, *[label_8947], **kwargs_8948)
        
        
        # Assigning a Name to a Attribute (line 755):
        
        # Assigning a Name to a Attribute (line 755):
        # Getting the type of 'True' (line 755)
        True_8950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 32), 'True')
        # Getting the type of 'self' (line 755)
        self_8951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 8), 'self')
        # Setting the type of the member 'isDefault_majloc' of a type (line 755)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 755, 8), self_8951, 'isDefault_majloc', True_8950)
        
        # Assigning a Name to a Attribute (line 756):
        
        # Assigning a Name to a Attribute (line 756):
        # Getting the type of 'True' (line 756)
        True_8952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 32), 'True')
        # Getting the type of 'self' (line 756)
        self_8953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 8), 'self')
        # Setting the type of the member 'isDefault_minloc' of a type (line 756)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 756, 8), self_8953, 'isDefault_minloc', True_8952)
        
        # Assigning a Name to a Attribute (line 757):
        
        # Assigning a Name to a Attribute (line 757):
        # Getting the type of 'True' (line 757)
        True_8954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 32), 'True')
        # Getting the type of 'self' (line 757)
        self_8955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 8), 'self')
        # Setting the type of the member 'isDefault_majfmt' of a type (line 757)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 757, 8), self_8955, 'isDefault_majfmt', True_8954)
        
        # Assigning a Name to a Attribute (line 758):
        
        # Assigning a Name to a Attribute (line 758):
        # Getting the type of 'True' (line 758)
        True_8956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 32), 'True')
        # Getting the type of 'self' (line 758)
        self_8957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 758, 8), 'self')
        # Setting the type of the member 'isDefault_minfmt' of a type (line 758)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 758, 8), self_8957, 'isDefault_minfmt', True_8956)
        
        # Assigning a Name to a Attribute (line 759):
        
        # Assigning a Name to a Attribute (line 759):
        # Getting the type of 'True' (line 759)
        True_8958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 31), 'True')
        # Getting the type of 'self' (line 759)
        self_8959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 759, 8), 'self')
        # Setting the type of the member 'isDefault_label' of a type (line 759)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 759, 8), self_8959, 'isDefault_label', True_8958)
        
        # Assigning a Call to a Attribute (line 762):
        
        # Assigning a Call to a Attribute (line 762):
        
        # Call to CallbackRegistry(...): (line 762)
        # Processing the call keyword arguments (line 762)
        kwargs_8962 = {}
        # Getting the type of 'cbook' (line 762)
        cbook_8960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 25), 'cbook', False)
        # Obtaining the member 'CallbackRegistry' of a type (line 762)
        CallbackRegistry_8961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 25), cbook_8960, 'CallbackRegistry')
        # Calling CallbackRegistry(args, kwargs) (line 762)
        CallbackRegistry_call_result_8963 = invoke(stypy.reporting.localization.Localization(__file__, 762, 25), CallbackRegistry_8961, *[], **kwargs_8962)
        
        # Getting the type of 'self' (line 762)
        self_8964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 8), 'self')
        # Setting the type of the member 'callbacks' of a type (line 762)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 8), self_8964, 'callbacks', CallbackRegistry_call_result_8963)
        
        # Assigning a BoolOp to a Attribute (line 765):
        
        # Assigning a BoolOp to a Attribute (line 765):
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        unicode_8965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 38), 'unicode', u'axes.grid')
        # Getting the type of 'rcParams' (line 765)
        rcParams_8966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 29), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 765)
        getitem___8967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 29), rcParams_8966, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 765)
        subscript_call_result_8968 = invoke(stypy.reporting.localization.Localization(__file__, 765, 29), getitem___8967, unicode_8965)
        
        
        
        # Obtaining the type of the subscript
        unicode_8969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 38), 'unicode', u'axes.grid.which')
        # Getting the type of 'rcParams' (line 766)
        rcParams_8970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 29), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 766)
        getitem___8971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 29), rcParams_8970, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 766)
        subscript_call_result_8972 = invoke(stypy.reporting.localization.Localization(__file__, 766, 29), getitem___8971, unicode_8969)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 766)
        tuple_8973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 61), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 766)
        # Adding element type (line 766)
        unicode_8974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 61), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 766, 61), tuple_8973, unicode_8974)
        # Adding element type (line 766)
        unicode_8975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 69), 'unicode', u'major')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 766, 61), tuple_8973, unicode_8975)
        
        # Applying the binary operator 'in' (line 766)
        result_contains_8976 = python_operator(stypy.reporting.localization.Localization(__file__, 766, 29), 'in', subscript_call_result_8972, tuple_8973)
        
        # Applying the binary operator 'and' (line 765)
        result_and_keyword_8977 = python_operator(stypy.reporting.localization.Localization(__file__, 765, 29), 'and', subscript_call_result_8968, result_contains_8976)
        
        # Getting the type of 'self' (line 765)
        self_8978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 8), 'self')
        # Setting the type of the member '_gridOnMajor' of a type (line 765)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 765, 8), self_8978, '_gridOnMajor', result_and_keyword_8977)
        
        # Assigning a BoolOp to a Attribute (line 767):
        
        # Assigning a BoolOp to a Attribute (line 767):
        
        # Evaluating a boolean operation
        
        # Obtaining the type of the subscript
        unicode_8979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 767, 38), 'unicode', u'axes.grid')
        # Getting the type of 'rcParams' (line 767)
        rcParams_8980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 29), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 767)
        getitem___8981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 767, 29), rcParams_8980, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 767)
        subscript_call_result_8982 = invoke(stypy.reporting.localization.Localization(__file__, 767, 29), getitem___8981, unicode_8979)
        
        
        
        # Obtaining the type of the subscript
        unicode_8983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 38), 'unicode', u'axes.grid.which')
        # Getting the type of 'rcParams' (line 768)
        rcParams_8984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 29), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 768)
        getitem___8985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 29), rcParams_8984, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 768)
        subscript_call_result_8986 = invoke(stypy.reporting.localization.Localization(__file__, 768, 29), getitem___8985, unicode_8983)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 768)
        tuple_8987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 61), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 768)
        # Adding element type (line 768)
        unicode_8988 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 61), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 768, 61), tuple_8987, unicode_8988)
        # Adding element type (line 768)
        unicode_8989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 69), 'unicode', u'minor')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 768, 61), tuple_8987, unicode_8989)
        
        # Applying the binary operator 'in' (line 768)
        result_contains_8990 = python_operator(stypy.reporting.localization.Localization(__file__, 768, 29), 'in', subscript_call_result_8986, tuple_8987)
        
        # Applying the binary operator 'and' (line 767)
        result_and_keyword_8991 = python_operator(stypy.reporting.localization.Localization(__file__, 767, 29), 'and', subscript_call_result_8982, result_contains_8990)
        
        # Getting the type of 'self' (line 767)
        self_8992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 8), 'self')
        # Setting the type of the member '_gridOnMinor' of a type (line 767)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 767, 8), self_8992, '_gridOnMinor', result_and_keyword_8991)
        
        # Call to set_text(...): (line 770)
        # Processing the call arguments (line 770)
        unicode_8996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 28), 'unicode', u'')
        # Processing the call keyword arguments (line 770)
        kwargs_8997 = {}
        # Getting the type of 'self' (line 770)
        self_8993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 8), 'self', False)
        # Obtaining the member 'label' of a type (line 770)
        label_8994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 8), self_8993, 'label')
        # Obtaining the member 'set_text' of a type (line 770)
        set_text_8995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 770, 8), label_8994, 'set_text')
        # Calling set_text(args, kwargs) (line 770)
        set_text_call_result_8998 = invoke(stypy.reporting.localization.Localization(__file__, 770, 8), set_text_8995, *[unicode_8996], **kwargs_8997)
        
        
        # Call to _set_artist_props(...): (line 771)
        # Processing the call arguments (line 771)
        # Getting the type of 'self' (line 771)
        self_9001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 31), 'self', False)
        # Obtaining the member 'label' of a type (line 771)
        label_9002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 31), self_9001, 'label')
        # Processing the call keyword arguments (line 771)
        kwargs_9003 = {}
        # Getting the type of 'self' (line 771)
        self_8999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 771)
        _set_artist_props_9000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 8), self_8999, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 771)
        _set_artist_props_call_result_9004 = invoke(stypy.reporting.localization.Localization(__file__, 771, 8), _set_artist_props_9000, *[label_9002], **kwargs_9003)
        
        
        # Call to reset_ticks(...): (line 773)
        # Processing the call keyword arguments (line 773)
        kwargs_9007 = {}
        # Getting the type of 'self' (line 773)
        self_9005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 8), 'self', False)
        # Obtaining the member 'reset_ticks' of a type (line 773)
        reset_ticks_9006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 8), self_9005, 'reset_ticks')
        # Calling reset_ticks(args, kwargs) (line 773)
        reset_ticks_call_result_9008 = invoke(stypy.reporting.localization.Localization(__file__, 773, 8), reset_ticks_9006, *[], **kwargs_9007)
        
        
        # Assigning a Name to a Attribute (line 775):
        
        # Assigning a Name to a Attribute (line 775):
        # Getting the type of 'None' (line 775)
        None_9009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 25), 'None')
        # Getting the type of 'self' (line 775)
        self_9010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 8), 'self')
        # Setting the type of the member 'converter' of a type (line 775)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 8), self_9010, 'converter', None_9009)
        
        # Assigning a Name to a Attribute (line 776):
        
        # Assigning a Name to a Attribute (line 776):
        # Getting the type of 'None' (line 776)
        None_9011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 21), 'None')
        # Getting the type of 'self' (line 776)
        self_9012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 8), 'self')
        # Setting the type of the member 'units' of a type (line 776)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 776, 8), self_9012, 'units', None_9011)
        
        # Call to set_units(...): (line 777)
        # Processing the call arguments (line 777)
        # Getting the type of 'None' (line 777)
        None_9015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 23), 'None', False)
        # Processing the call keyword arguments (line 777)
        kwargs_9016 = {}
        # Getting the type of 'self' (line 777)
        self_9013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 8), 'self', False)
        # Obtaining the member 'set_units' of a type (line 777)
        set_units_9014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 777, 8), self_9013, 'set_units')
        # Calling set_units(args, kwargs) (line 777)
        set_units_call_result_9017 = invoke(stypy.reporting.localization.Localization(__file__, 777, 8), set_units_9014, *[None_9015], **kwargs_9016)
        
        
        # Assigning a Name to a Attribute (line 778):
        
        # Assigning a Name to a Attribute (line 778):
        # Getting the type of 'True' (line 778)
        True_9018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 21), 'True')
        # Getting the type of 'self' (line 778)
        self_9019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 778, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 778)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 778, 8), self_9019, 'stale', True_9018)
        
        # ################# End of 'cla(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'cla' in the type store
        # Getting the type of 'stypy_return_type' (line 742)
        stypy_return_type_9020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9020)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'cla'
        return stypy_return_type_9020


    @norecursion
    def reset_ticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'reset_ticks'
        module_type_store = module_type_store.open_function_context('reset_ticks', 780, 4, False)
        # Assigning a type to the variable 'self' (line 781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.reset_ticks.__dict__.__setitem__('stypy_localization', localization)
        Axis.reset_ticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.reset_ticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.reset_ticks.__dict__.__setitem__('stypy_function_name', 'Axis.reset_ticks')
        Axis.reset_ticks.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.reset_ticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.reset_ticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.reset_ticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.reset_ticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.reset_ticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.reset_ticks.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.reset_ticks', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'reset_ticks', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'reset_ticks(...)' code ##################

        # Deleting a member
        # Getting the type of 'self' (line 784)
        self_9021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 12), 'self')
        # Obtaining the member 'majorTicks' of a type (line 784)
        majorTicks_9022 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 12), self_9021, 'majorTicks')
        
        # Obtaining the type of the subscript
        slice_9023 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 784, 12), None, None, None)
        # Getting the type of 'self' (line 784)
        self_9024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 784, 12), 'self')
        # Obtaining the member 'majorTicks' of a type (line 784)
        majorTicks_9025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 12), self_9024, 'majorTicks')
        # Obtaining the member '__getitem__' of a type (line 784)
        getitem___9026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 784, 12), majorTicks_9025, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 784)
        subscript_call_result_9027 = invoke(stypy.reporting.localization.Localization(__file__, 784, 12), getitem___9026, slice_9023)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 784, 8), majorTicks_9022, subscript_call_result_9027)
        # Deleting a member
        # Getting the type of 'self' (line 785)
        self_9028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 12), 'self')
        # Obtaining the member 'minorTicks' of a type (line 785)
        minorTicks_9029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 12), self_9028, 'minorTicks')
        
        # Obtaining the type of the subscript
        slice_9030 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 785, 12), None, None, None)
        # Getting the type of 'self' (line 785)
        self_9031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 12), 'self')
        # Obtaining the member 'minorTicks' of a type (line 785)
        minorTicks_9032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 12), self_9031, 'minorTicks')
        # Obtaining the member '__getitem__' of a type (line 785)
        getitem___9033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 785, 12), minorTicks_9032, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 785)
        subscript_call_result_9034 = invoke(stypy.reporting.localization.Localization(__file__, 785, 12), getitem___9033, slice_9030)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 785, 8), minorTicks_9029, subscript_call_result_9034)
        
        # Call to extend(...): (line 787)
        # Processing the call arguments (line 787)
        
        # Obtaining an instance of the builtin type 'list' (line 787)
        list_9038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 787, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 787)
        # Adding element type (line 787)
        
        # Call to _get_tick(...): (line 787)
        # Processing the call keyword arguments (line 787)
        # Getting the type of 'True' (line 787)
        True_9041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 53), 'True', False)
        keyword_9042 = True_9041
        kwargs_9043 = {'major': keyword_9042}
        # Getting the type of 'self' (line 787)
        self_9039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 32), 'self', False)
        # Obtaining the member '_get_tick' of a type (line 787)
        _get_tick_9040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 32), self_9039, '_get_tick')
        # Calling _get_tick(args, kwargs) (line 787)
        _get_tick_call_result_9044 = invoke(stypy.reporting.localization.Localization(__file__, 787, 32), _get_tick_9040, *[], **kwargs_9043)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 787, 31), list_9038, _get_tick_call_result_9044)
        
        # Processing the call keyword arguments (line 787)
        kwargs_9045 = {}
        # Getting the type of 'self' (line 787)
        self_9035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'self', False)
        # Obtaining the member 'majorTicks' of a type (line 787)
        majorTicks_9036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 8), self_9035, 'majorTicks')
        # Obtaining the member 'extend' of a type (line 787)
        extend_9037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 8), majorTicks_9036, 'extend')
        # Calling extend(args, kwargs) (line 787)
        extend_call_result_9046 = invoke(stypy.reporting.localization.Localization(__file__, 787, 8), extend_9037, *[list_9038], **kwargs_9045)
        
        
        # Call to extend(...): (line 788)
        # Processing the call arguments (line 788)
        
        # Obtaining an instance of the builtin type 'list' (line 788)
        list_9050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 788, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 788)
        # Adding element type (line 788)
        
        # Call to _get_tick(...): (line 788)
        # Processing the call keyword arguments (line 788)
        # Getting the type of 'False' (line 788)
        False_9053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 53), 'False', False)
        keyword_9054 = False_9053
        kwargs_9055 = {'major': keyword_9054}
        # Getting the type of 'self' (line 788)
        self_9051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 32), 'self', False)
        # Obtaining the member '_get_tick' of a type (line 788)
        _get_tick_9052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 32), self_9051, '_get_tick')
        # Calling _get_tick(args, kwargs) (line 788)
        _get_tick_call_result_9056 = invoke(stypy.reporting.localization.Localization(__file__, 788, 32), _get_tick_9052, *[], **kwargs_9055)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 788, 31), list_9050, _get_tick_call_result_9056)
        
        # Processing the call keyword arguments (line 788)
        kwargs_9057 = {}
        # Getting the type of 'self' (line 788)
        self_9047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 788, 8), 'self', False)
        # Obtaining the member 'minorTicks' of a type (line 788)
        minorTicks_9048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 8), self_9047, 'minorTicks')
        # Obtaining the member 'extend' of a type (line 788)
        extend_9049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 788, 8), minorTicks_9048, 'extend')
        # Calling extend(args, kwargs) (line 788)
        extend_call_result_9058 = invoke(stypy.reporting.localization.Localization(__file__, 788, 8), extend_9049, *[list_9050], **kwargs_9057)
        
        
        # Assigning a Num to a Attribute (line 789):
        
        # Assigning a Num to a Attribute (line 789):
        int_9059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, 34), 'int')
        # Getting the type of 'self' (line 789)
        self_9060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 8), 'self')
        # Setting the type of the member '_lastNumMajorTicks' of a type (line 789)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 789, 8), self_9060, '_lastNumMajorTicks', int_9059)
        
        # Assigning a Num to a Attribute (line 790):
        
        # Assigning a Num to a Attribute (line 790):
        int_9061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 790, 34), 'int')
        # Getting the type of 'self' (line 790)
        self_9062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 790, 8), 'self')
        # Setting the type of the member '_lastNumMinorTicks' of a type (line 790)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 790, 8), self_9062, '_lastNumMinorTicks', int_9061)
        
        # ################# End of 'reset_ticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'reset_ticks' in the type store
        # Getting the type of 'stypy_return_type' (line 780)
        stypy_return_type_9063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9063)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'reset_ticks'
        return stypy_return_type_9063


    @norecursion
    def set_tick_params(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_9064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 36), 'unicode', u'major')
        # Getting the type of 'False' (line 792)
        False_9065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 51), 'False')
        defaults = [unicode_9064, False_9065]
        # Create a new context for function 'set_tick_params'
        module_type_store = module_type_store.open_function_context('set_tick_params', 792, 4, False)
        # Assigning a type to the variable 'self' (line 793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_tick_params.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_tick_params.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_tick_params.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_tick_params.__dict__.__setitem__('stypy_function_name', 'Axis.set_tick_params')
        Axis.set_tick_params.__dict__.__setitem__('stypy_param_names_list', ['which', 'reset'])
        Axis.set_tick_params.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_tick_params.__dict__.__setitem__('stypy_kwargs_param_name', 'kw')
        Axis.set_tick_params.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_tick_params.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_tick_params.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_tick_params.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_tick_params', ['which', 'reset'], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_tick_params', localization, ['which', 'reset'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_tick_params(...)' code ##################

        unicode_9066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, (-1)), 'unicode', u'\n        Set appearance parameters for ticks and ticklabels.\n\n        For documentation of keyword arguments, see\n        :meth:`matplotlib.axes.Axes.tick_params`.\n        ')
        
        # Assigning a List to a Name (line 799):
        
        # Assigning a List to a Name (line 799):
        
        # Obtaining an instance of the builtin type 'list' (line 799)
        list_9067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 799, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 799)
        
        # Assigning a type to the variable 'dicts' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 8), 'dicts', list_9067)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'which' (line 800)
        which_9068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 11), 'which')
        unicode_9069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 800, 20), 'unicode', u'major')
        # Applying the binary operator '==' (line 800)
        result_eq_9070 = python_operator(stypy.reporting.localization.Localization(__file__, 800, 11), '==', which_9068, unicode_9069)
        
        
        # Getting the type of 'which' (line 800)
        which_9071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 31), 'which')
        unicode_9072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 800, 40), 'unicode', u'both')
        # Applying the binary operator '==' (line 800)
        result_eq_9073 = python_operator(stypy.reporting.localization.Localization(__file__, 800, 31), '==', which_9071, unicode_9072)
        
        # Applying the binary operator 'or' (line 800)
        result_or_keyword_9074 = python_operator(stypy.reporting.localization.Localization(__file__, 800, 11), 'or', result_eq_9070, result_eq_9073)
        
        # Testing the type of an if condition (line 800)
        if_condition_9075 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 800, 8), result_or_keyword_9074)
        # Assigning a type to the variable 'if_condition_9075' (line 800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 800, 8), 'if_condition_9075', if_condition_9075)
        # SSA begins for if statement (line 800)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 801)
        # Processing the call arguments (line 801)
        # Getting the type of 'self' (line 801)
        self_9078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 25), 'self', False)
        # Obtaining the member '_major_tick_kw' of a type (line 801)
        _major_tick_kw_9079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 801, 25), self_9078, '_major_tick_kw')
        # Processing the call keyword arguments (line 801)
        kwargs_9080 = {}
        # Getting the type of 'dicts' (line 801)
        dicts_9076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 12), 'dicts', False)
        # Obtaining the member 'append' of a type (line 801)
        append_9077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 801, 12), dicts_9076, 'append')
        # Calling append(args, kwargs) (line 801)
        append_call_result_9081 = invoke(stypy.reporting.localization.Localization(__file__, 801, 12), append_9077, *[_major_tick_kw_9079], **kwargs_9080)
        
        # SSA join for if statement (line 800)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'which' (line 802)
        which_9082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 11), 'which')
        unicode_9083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 20), 'unicode', u'minor')
        # Applying the binary operator '==' (line 802)
        result_eq_9084 = python_operator(stypy.reporting.localization.Localization(__file__, 802, 11), '==', which_9082, unicode_9083)
        
        
        # Getting the type of 'which' (line 802)
        which_9085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 31), 'which')
        unicode_9086 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, 40), 'unicode', u'both')
        # Applying the binary operator '==' (line 802)
        result_eq_9087 = python_operator(stypy.reporting.localization.Localization(__file__, 802, 31), '==', which_9085, unicode_9086)
        
        # Applying the binary operator 'or' (line 802)
        result_or_keyword_9088 = python_operator(stypy.reporting.localization.Localization(__file__, 802, 11), 'or', result_eq_9084, result_eq_9087)
        
        # Testing the type of an if condition (line 802)
        if_condition_9089 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 802, 8), result_or_keyword_9088)
        # Assigning a type to the variable 'if_condition_9089' (line 802)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'if_condition_9089', if_condition_9089)
        # SSA begins for if statement (line 802)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 803)
        # Processing the call arguments (line 803)
        # Getting the type of 'self' (line 803)
        self_9092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 25), 'self', False)
        # Obtaining the member '_minor_tick_kw' of a type (line 803)
        _minor_tick_kw_9093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 25), self_9092, '_minor_tick_kw')
        # Processing the call keyword arguments (line 803)
        kwargs_9094 = {}
        # Getting the type of 'dicts' (line 803)
        dicts_9090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 12), 'dicts', False)
        # Obtaining the member 'append' of a type (line 803)
        append_9091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 12), dicts_9090, 'append')
        # Calling append(args, kwargs) (line 803)
        append_call_result_9095 = invoke(stypy.reporting.localization.Localization(__file__, 803, 12), append_9091, *[_minor_tick_kw_9093], **kwargs_9094)
        
        # SSA join for if statement (line 802)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 804):
        
        # Assigning a Call to a Name (line 804):
        
        # Call to _translate_tick_kw(...): (line 804)
        # Processing the call arguments (line 804)
        # Getting the type of 'kw' (line 804)
        kw_9098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 42), 'kw', False)
        # Processing the call keyword arguments (line 804)
        # Getting the type of 'True' (line 804)
        True_9099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 57), 'True', False)
        keyword_9100 = True_9099
        kwargs_9101 = {'to_init_kw': keyword_9100}
        # Getting the type of 'self' (line 804)
        self_9096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 18), 'self', False)
        # Obtaining the member '_translate_tick_kw' of a type (line 804)
        _translate_tick_kw_9097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 18), self_9096, '_translate_tick_kw')
        # Calling _translate_tick_kw(args, kwargs) (line 804)
        _translate_tick_kw_call_result_9102 = invoke(stypy.reporting.localization.Localization(__file__, 804, 18), _translate_tick_kw_9097, *[kw_9098], **kwargs_9101)
        
        # Assigning a type to the variable 'kwtrans' (line 804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 8), 'kwtrans', _translate_tick_kw_call_result_9102)
        
        # Getting the type of 'dicts' (line 805)
        dicts_9103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 17), 'dicts')
        # Testing the type of a for loop iterable (line 805)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 805, 8), dicts_9103)
        # Getting the type of the for loop variable (line 805)
        for_loop_var_9104 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 805, 8), dicts_9103)
        # Assigning a type to the variable 'd' (line 805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 8), 'd', for_loop_var_9104)
        # SSA begins for a for statement (line 805)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'reset' (line 806)
        reset_9105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 15), 'reset')
        # Testing the type of an if condition (line 806)
        if_condition_9106 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 806, 12), reset_9105)
        # Assigning a type to the variable 'if_condition_9106' (line 806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 12), 'if_condition_9106', if_condition_9106)
        # SSA begins for if statement (line 806)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to clear(...): (line 807)
        # Processing the call keyword arguments (line 807)
        kwargs_9109 = {}
        # Getting the type of 'd' (line 807)
        d_9107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 16), 'd', False)
        # Obtaining the member 'clear' of a type (line 807)
        clear_9108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 807, 16), d_9107, 'clear')
        # Calling clear(args, kwargs) (line 807)
        clear_call_result_9110 = invoke(stypy.reporting.localization.Localization(__file__, 807, 16), clear_9108, *[], **kwargs_9109)
        
        # SSA join for if statement (line 806)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update(...): (line 808)
        # Processing the call arguments (line 808)
        # Getting the type of 'kwtrans' (line 808)
        kwtrans_9113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 21), 'kwtrans', False)
        # Processing the call keyword arguments (line 808)
        kwargs_9114 = {}
        # Getting the type of 'd' (line 808)
        d_9111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 12), 'd', False)
        # Obtaining the member 'update' of a type (line 808)
        update_9112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 12), d_9111, 'update')
        # Calling update(args, kwargs) (line 808)
        update_call_result_9115 = invoke(stypy.reporting.localization.Localization(__file__, 808, 12), update_9112, *[kwtrans_9113], **kwargs_9114)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'reset' (line 809)
        reset_9116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 11), 'reset')
        # Testing the type of an if condition (line 809)
        if_condition_9117 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 809, 8), reset_9116)
        # Assigning a type to the variable 'if_condition_9117' (line 809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 8), 'if_condition_9117', if_condition_9117)
        # SSA begins for if statement (line 809)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to reset_ticks(...): (line 810)
        # Processing the call keyword arguments (line 810)
        kwargs_9120 = {}
        # Getting the type of 'self' (line 810)
        self_9118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 12), 'self', False)
        # Obtaining the member 'reset_ticks' of a type (line 810)
        reset_ticks_9119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 810, 12), self_9118, 'reset_ticks')
        # Calling reset_ticks(args, kwargs) (line 810)
        reset_ticks_call_result_9121 = invoke(stypy.reporting.localization.Localization(__file__, 810, 12), reset_ticks_9119, *[], **kwargs_9120)
        
        # SSA branch for the else part of an if statement (line 809)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'which' (line 812)
        which_9122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 15), 'which')
        unicode_9123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 24), 'unicode', u'major')
        # Applying the binary operator '==' (line 812)
        result_eq_9124 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 15), '==', which_9122, unicode_9123)
        
        
        # Getting the type of 'which' (line 812)
        which_9125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 35), 'which')
        unicode_9126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 44), 'unicode', u'both')
        # Applying the binary operator '==' (line 812)
        result_eq_9127 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 35), '==', which_9125, unicode_9126)
        
        # Applying the binary operator 'or' (line 812)
        result_or_keyword_9128 = python_operator(stypy.reporting.localization.Localization(__file__, 812, 15), 'or', result_eq_9124, result_eq_9127)
        
        # Testing the type of an if condition (line 812)
        if_condition_9129 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 812, 12), result_or_keyword_9128)
        # Assigning a type to the variable 'if_condition_9129' (line 812)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 812, 12), 'if_condition_9129', if_condition_9129)
        # SSA begins for if statement (line 812)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 813)
        self_9130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 28), 'self')
        # Obtaining the member 'majorTicks' of a type (line 813)
        majorTicks_9131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 813, 28), self_9130, 'majorTicks')
        # Testing the type of a for loop iterable (line 813)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 813, 16), majorTicks_9131)
        # Getting the type of the for loop variable (line 813)
        for_loop_var_9132 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 813, 16), majorTicks_9131)
        # Assigning a type to the variable 'tick' (line 813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 813, 16), 'tick', for_loop_var_9132)
        # SSA begins for a for statement (line 813)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to _apply_params(...): (line 814)
        # Processing the call keyword arguments (line 814)
        # Getting the type of 'self' (line 814)
        self_9135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 41), 'self', False)
        # Obtaining the member '_major_tick_kw' of a type (line 814)
        _major_tick_kw_9136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 41), self_9135, '_major_tick_kw')
        kwargs_9137 = {'_major_tick_kw_9136': _major_tick_kw_9136}
        # Getting the type of 'tick' (line 814)
        tick_9133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 20), 'tick', False)
        # Obtaining the member '_apply_params' of a type (line 814)
        _apply_params_9134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 20), tick_9133, '_apply_params')
        # Calling _apply_params(args, kwargs) (line 814)
        _apply_params_call_result_9138 = invoke(stypy.reporting.localization.Localization(__file__, 814, 20), _apply_params_9134, *[], **kwargs_9137)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 812)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'which' (line 815)
        which_9139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 15), 'which')
        unicode_9140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 24), 'unicode', u'minor')
        # Applying the binary operator '==' (line 815)
        result_eq_9141 = python_operator(stypy.reporting.localization.Localization(__file__, 815, 15), '==', which_9139, unicode_9140)
        
        
        # Getting the type of 'which' (line 815)
        which_9142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 35), 'which')
        unicode_9143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 44), 'unicode', u'both')
        # Applying the binary operator '==' (line 815)
        result_eq_9144 = python_operator(stypy.reporting.localization.Localization(__file__, 815, 35), '==', which_9142, unicode_9143)
        
        # Applying the binary operator 'or' (line 815)
        result_or_keyword_9145 = python_operator(stypy.reporting.localization.Localization(__file__, 815, 15), 'or', result_eq_9141, result_eq_9144)
        
        # Testing the type of an if condition (line 815)
        if_condition_9146 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 815, 12), result_or_keyword_9145)
        # Assigning a type to the variable 'if_condition_9146' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 12), 'if_condition_9146', if_condition_9146)
        # SSA begins for if statement (line 815)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 816)
        self_9147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 28), 'self')
        # Obtaining the member 'minorTicks' of a type (line 816)
        minorTicks_9148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 28), self_9147, 'minorTicks')
        # Testing the type of a for loop iterable (line 816)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 816, 16), minorTicks_9148)
        # Getting the type of the for loop variable (line 816)
        for_loop_var_9149 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 816, 16), minorTicks_9148)
        # Assigning a type to the variable 'tick' (line 816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 816, 16), 'tick', for_loop_var_9149)
        # SSA begins for a for statement (line 816)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to _apply_params(...): (line 817)
        # Processing the call keyword arguments (line 817)
        # Getting the type of 'self' (line 817)
        self_9152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 41), 'self', False)
        # Obtaining the member '_minor_tick_kw' of a type (line 817)
        _minor_tick_kw_9153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 41), self_9152, '_minor_tick_kw')
        kwargs_9154 = {'_minor_tick_kw_9153': _minor_tick_kw_9153}
        # Getting the type of 'tick' (line 817)
        tick_9150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 20), 'tick', False)
        # Obtaining the member '_apply_params' of a type (line 817)
        _apply_params_9151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 20), tick_9150, '_apply_params')
        # Calling _apply_params(args, kwargs) (line 817)
        _apply_params_call_result_9155 = invoke(stypy.reporting.localization.Localization(__file__, 817, 20), _apply_params_9151, *[], **kwargs_9154)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 815)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_9156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 15), 'unicode', u'labelcolor')
        # Getting the type of 'kwtrans' (line 818)
        kwtrans_9157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 31), 'kwtrans')
        # Applying the binary operator 'in' (line 818)
        result_contains_9158 = python_operator(stypy.reporting.localization.Localization(__file__, 818, 15), 'in', unicode_9156, kwtrans_9157)
        
        # Testing the type of an if condition (line 818)
        if_condition_9159 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 818, 12), result_contains_9158)
        # Assigning a type to the variable 'if_condition_9159' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 12), 'if_condition_9159', if_condition_9159)
        # SSA begins for if statement (line 818)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_color(...): (line 819)
        # Processing the call arguments (line 819)
        
        # Obtaining the type of the subscript
        unicode_9163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, 50), 'unicode', u'labelcolor')
        # Getting the type of 'kwtrans' (line 819)
        kwtrans_9164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 42), 'kwtrans', False)
        # Obtaining the member '__getitem__' of a type (line 819)
        getitem___9165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 42), kwtrans_9164, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 819)
        subscript_call_result_9166 = invoke(stypy.reporting.localization.Localization(__file__, 819, 42), getitem___9165, unicode_9163)
        
        # Processing the call keyword arguments (line 819)
        kwargs_9167 = {}
        # Getting the type of 'self' (line 819)
        self_9160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 16), 'self', False)
        # Obtaining the member 'offsetText' of a type (line 819)
        offsetText_9161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 16), self_9160, 'offsetText')
        # Obtaining the member 'set_color' of a type (line 819)
        set_color_9162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 16), offsetText_9161, 'set_color')
        # Calling set_color(args, kwargs) (line 819)
        set_color_call_result_9168 = invoke(stypy.reporting.localization.Localization(__file__, 819, 16), set_color_9162, *[subscript_call_result_9166], **kwargs_9167)
        
        # SSA join for if statement (line 818)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 809)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 820):
        
        # Assigning a Name to a Attribute (line 820):
        # Getting the type of 'True' (line 820)
        True_9169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 21), 'True')
        # Getting the type of 'self' (line 820)
        self_9170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 820)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 8), self_9170, 'stale', True_9169)
        
        # ################# End of 'set_tick_params(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_tick_params' in the type store
        # Getting the type of 'stypy_return_type' (line 792)
        stypy_return_type_9171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9171)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_tick_params'
        return stypy_return_type_9171


    @staticmethod
    @norecursion
    def _translate_tick_kw(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 823)
        True_9172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 42), 'True')
        defaults = [True_9172]
        # Create a new context for function '_translate_tick_kw'
        module_type_store = module_type_store.open_function_context('_translate_tick_kw', 822, 4, False)
        
        # Passed parameters checking function
        Axis._translate_tick_kw.__dict__.__setitem__('stypy_localization', localization)
        Axis._translate_tick_kw.__dict__.__setitem__('stypy_type_of_self', None)
        Axis._translate_tick_kw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis._translate_tick_kw.__dict__.__setitem__('stypy_function_name', '_translate_tick_kw')
        Axis._translate_tick_kw.__dict__.__setitem__('stypy_param_names_list', ['kw', 'to_init_kw'])
        Axis._translate_tick_kw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis._translate_tick_kw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis._translate_tick_kw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis._translate_tick_kw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis._translate_tick_kw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis._translate_tick_kw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, None, module_type_store, '_translate_tick_kw', ['kw', 'to_init_kw'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_translate_tick_kw', localization, ['to_init_kw'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_translate_tick_kw(...)' code ##################

        
        # Assigning a List to a Name (line 826):
        
        # Assigning a List to a Name (line 826):
        
        # Obtaining an instance of the builtin type 'list' (line 826)
        list_9173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 826)
        # Adding element type (line 826)
        unicode_9174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 19), 'unicode', u'size')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 18), list_9173, unicode_9174)
        # Adding element type (line 826)
        unicode_9175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 27), 'unicode', u'width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 18), list_9173, unicode_9175)
        # Adding element type (line 826)
        unicode_9176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 36), 'unicode', u'color')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 18), list_9173, unicode_9176)
        # Adding element type (line 826)
        unicode_9177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 45), 'unicode', u'tickdir')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 18), list_9173, unicode_9177)
        # Adding element type (line 826)
        unicode_9178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 826, 56), 'unicode', u'pad')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 18), list_9173, unicode_9178)
        # Adding element type (line 826)
        unicode_9179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 19), 'unicode', u'labelsize')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 18), list_9173, unicode_9179)
        # Adding element type (line 826)
        unicode_9180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 32), 'unicode', u'labelcolor')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 18), list_9173, unicode_9180)
        # Adding element type (line 826)
        unicode_9181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 46), 'unicode', u'zorder')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 18), list_9173, unicode_9181)
        # Adding element type (line 826)
        unicode_9182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 56), 'unicode', u'gridOn')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 18), list_9173, unicode_9182)
        # Adding element type (line 826)
        unicode_9183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 19), 'unicode', u'tick1On')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 18), list_9173, unicode_9183)
        # Adding element type (line 826)
        unicode_9184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 30), 'unicode', u'tick2On')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 18), list_9173, unicode_9184)
        # Adding element type (line 826)
        unicode_9185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 41), 'unicode', u'label1On')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 18), list_9173, unicode_9185)
        # Adding element type (line 826)
        unicode_9186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 53), 'unicode', u'label2On')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 826, 18), list_9173, unicode_9186)
        
        # Assigning a type to the variable 'kwkeys0' (line 826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 826, 8), 'kwkeys0', list_9173)
        
        # Assigning a List to a Name (line 829):
        
        # Assigning a List to a Name (line 829):
        
        # Obtaining an instance of the builtin type 'list' (line 829)
        list_9187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 829)
        # Adding element type (line 829)
        unicode_9188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 19), 'unicode', u'length')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 18), list_9187, unicode_9188)
        # Adding element type (line 829)
        unicode_9189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 29), 'unicode', u'direction')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 18), list_9187, unicode_9189)
        # Adding element type (line 829)
        unicode_9190 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 42), 'unicode', u'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 18), list_9187, unicode_9190)
        # Adding element type (line 829)
        unicode_9191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 50), 'unicode', u'bottom')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 18), list_9187, unicode_9191)
        # Adding element type (line 829)
        unicode_9192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 60), 'unicode', u'right')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 18), list_9187, unicode_9192)
        # Adding element type (line 829)
        unicode_9193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 829, 69), 'unicode', u'top')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 18), list_9187, unicode_9193)
        # Adding element type (line 829)
        unicode_9194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 19), 'unicode', u'labelleft')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 18), list_9187, unicode_9194)
        # Adding element type (line 829)
        unicode_9195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 32), 'unicode', u'labelbottom')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 18), list_9187, unicode_9195)
        # Adding element type (line 829)
        unicode_9196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 47), 'unicode', u'labelright')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 18), list_9187, unicode_9196)
        # Adding element type (line 829)
        unicode_9197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 61), 'unicode', u'labeltop')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 18), list_9187, unicode_9197)
        # Adding element type (line 829)
        unicode_9198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 831, 19), 'unicode', u'rotation')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 829, 18), list_9187, unicode_9198)
        
        # Assigning a type to the variable 'kwkeys1' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'kwkeys1', list_9187)
        
        # Assigning a BinOp to a Name (line 832):
        
        # Assigning a BinOp to a Name (line 832):
        # Getting the type of 'kwkeys0' (line 832)
        kwkeys0_9199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 17), 'kwkeys0')
        # Getting the type of 'kwkeys1' (line 832)
        kwkeys1_9200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 27), 'kwkeys1')
        # Applying the binary operator '+' (line 832)
        result_add_9201 = python_operator(stypy.reporting.localization.Localization(__file__, 832, 17), '+', kwkeys0_9199, kwkeys1_9200)
        
        # Assigning a type to the variable 'kwkeys' (line 832)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 832, 8), 'kwkeys', result_add_9201)
        
        # Assigning a Call to a Name (line 833):
        
        # Assigning a Call to a Name (line 833):
        
        # Call to dict(...): (line 833)
        # Processing the call keyword arguments (line 833)
        kwargs_9203 = {}
        # Getting the type of 'dict' (line 833)
        dict_9202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 18), 'dict', False)
        # Calling dict(args, kwargs) (line 833)
        dict_call_result_9204 = invoke(stypy.reporting.localization.Localization(__file__, 833, 18), dict_9202, *[], **kwargs_9203)
        
        # Assigning a type to the variable 'kwtrans' (line 833)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 8), 'kwtrans', dict_call_result_9204)
        
        # Getting the type of 'to_init_kw' (line 834)
        to_init_kw_9205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 11), 'to_init_kw')
        # Testing the type of an if condition (line 834)
        if_condition_9206 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 834, 8), to_init_kw_9205)
        # Assigning a type to the variable 'if_condition_9206' (line 834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 8), 'if_condition_9206', if_condition_9206)
        # SSA begins for if statement (line 834)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        unicode_9207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, 15), 'unicode', u'length')
        # Getting the type of 'kw' (line 835)
        kw_9208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 27), 'kw')
        # Applying the binary operator 'in' (line 835)
        result_contains_9209 = python_operator(stypy.reporting.localization.Localization(__file__, 835, 15), 'in', unicode_9207, kw_9208)
        
        # Testing the type of an if condition (line 835)
        if_condition_9210 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 835, 12), result_contains_9209)
        # Assigning a type to the variable 'if_condition_9210' (line 835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 835, 12), 'if_condition_9210', if_condition_9210)
        # SSA begins for if statement (line 835)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 836):
        
        # Assigning a Call to a Subscript (line 836):
        
        # Call to pop(...): (line 836)
        # Processing the call arguments (line 836)
        unicode_9213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 41), 'unicode', u'length')
        # Processing the call keyword arguments (line 836)
        kwargs_9214 = {}
        # Getting the type of 'kw' (line 836)
        kw_9211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 34), 'kw', False)
        # Obtaining the member 'pop' of a type (line 836)
        pop_9212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 34), kw_9211, 'pop')
        # Calling pop(args, kwargs) (line 836)
        pop_call_result_9215 = invoke(stypy.reporting.localization.Localization(__file__, 836, 34), pop_9212, *[unicode_9213], **kwargs_9214)
        
        # Getting the type of 'kwtrans' (line 836)
        kwtrans_9216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 16), 'kwtrans')
        unicode_9217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 836, 24), 'unicode', u'size')
        # Storing an element on a container (line 836)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 836, 16), kwtrans_9216, (unicode_9217, pop_call_result_9215))
        # SSA join for if statement (line 835)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_9218 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 837, 15), 'unicode', u'direction')
        # Getting the type of 'kw' (line 837)
        kw_9219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 30), 'kw')
        # Applying the binary operator 'in' (line 837)
        result_contains_9220 = python_operator(stypy.reporting.localization.Localization(__file__, 837, 15), 'in', unicode_9218, kw_9219)
        
        # Testing the type of an if condition (line 837)
        if_condition_9221 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 837, 12), result_contains_9220)
        # Assigning a type to the variable 'if_condition_9221' (line 837)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 837, 12), 'if_condition_9221', if_condition_9221)
        # SSA begins for if statement (line 837)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 838):
        
        # Assigning a Call to a Subscript (line 838):
        
        # Call to pop(...): (line 838)
        # Processing the call arguments (line 838)
        unicode_9224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 838, 44), 'unicode', u'direction')
        # Processing the call keyword arguments (line 838)
        kwargs_9225 = {}
        # Getting the type of 'kw' (line 838)
        kw_9222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 37), 'kw', False)
        # Obtaining the member 'pop' of a type (line 838)
        pop_9223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 37), kw_9222, 'pop')
        # Calling pop(args, kwargs) (line 838)
        pop_call_result_9226 = invoke(stypy.reporting.localization.Localization(__file__, 838, 37), pop_9223, *[unicode_9224], **kwargs_9225)
        
        # Getting the type of 'kwtrans' (line 838)
        kwtrans_9227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 16), 'kwtrans')
        unicode_9228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 838, 24), 'unicode', u'tickdir')
        # Storing an element on a container (line 838)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 838, 16), kwtrans_9227, (unicode_9228, pop_call_result_9226))
        # SSA join for if statement (line 837)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_9229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, 15), 'unicode', u'rotation')
        # Getting the type of 'kw' (line 839)
        kw_9230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 29), 'kw')
        # Applying the binary operator 'in' (line 839)
        result_contains_9231 = python_operator(stypy.reporting.localization.Localization(__file__, 839, 15), 'in', unicode_9229, kw_9230)
        
        # Testing the type of an if condition (line 839)
        if_condition_9232 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 839, 12), result_contains_9231)
        # Assigning a type to the variable 'if_condition_9232' (line 839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 839, 12), 'if_condition_9232', if_condition_9232)
        # SSA begins for if statement (line 839)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 840):
        
        # Assigning a Call to a Subscript (line 840):
        
        # Call to pop(...): (line 840)
        # Processing the call arguments (line 840)
        unicode_9235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 50), 'unicode', u'rotation')
        # Processing the call keyword arguments (line 840)
        kwargs_9236 = {}
        # Getting the type of 'kw' (line 840)
        kw_9233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 43), 'kw', False)
        # Obtaining the member 'pop' of a type (line 840)
        pop_9234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 43), kw_9233, 'pop')
        # Calling pop(args, kwargs) (line 840)
        pop_call_result_9237 = invoke(stypy.reporting.localization.Localization(__file__, 840, 43), pop_9234, *[unicode_9235], **kwargs_9236)
        
        # Getting the type of 'kwtrans' (line 840)
        kwtrans_9238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 16), 'kwtrans')
        unicode_9239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 24), 'unicode', u'labelrotation')
        # Storing an element on a container (line 840)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 840, 16), kwtrans_9238, (unicode_9239, pop_call_result_9237))
        # SSA join for if statement (line 839)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_9240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 841, 15), 'unicode', u'left')
        # Getting the type of 'kw' (line 841)
        kw_9241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 25), 'kw')
        # Applying the binary operator 'in' (line 841)
        result_contains_9242 = python_operator(stypy.reporting.localization.Localization(__file__, 841, 15), 'in', unicode_9240, kw_9241)
        
        # Testing the type of an if condition (line 841)
        if_condition_9243 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 841, 12), result_contains_9242)
        # Assigning a type to the variable 'if_condition_9243' (line 841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 841, 12), 'if_condition_9243', if_condition_9243)
        # SSA begins for if statement (line 841)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 842):
        
        # Assigning a Call to a Subscript (line 842):
        
        # Call to _string_to_bool(...): (line 842)
        # Processing the call arguments (line 842)
        
        # Call to pop(...): (line 842)
        # Processing the call arguments (line 842)
        unicode_9247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, 60), 'unicode', u'left')
        # Processing the call keyword arguments (line 842)
        kwargs_9248 = {}
        # Getting the type of 'kw' (line 842)
        kw_9245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 53), 'kw', False)
        # Obtaining the member 'pop' of a type (line 842)
        pop_9246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 53), kw_9245, 'pop')
        # Calling pop(args, kwargs) (line 842)
        pop_call_result_9249 = invoke(stypy.reporting.localization.Localization(__file__, 842, 53), pop_9246, *[unicode_9247], **kwargs_9248)
        
        # Processing the call keyword arguments (line 842)
        kwargs_9250 = {}
        # Getting the type of '_string_to_bool' (line 842)
        _string_to_bool_9244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 37), '_string_to_bool', False)
        # Calling _string_to_bool(args, kwargs) (line 842)
        _string_to_bool_call_result_9251 = invoke(stypy.reporting.localization.Localization(__file__, 842, 37), _string_to_bool_9244, *[pop_call_result_9249], **kwargs_9250)
        
        # Getting the type of 'kwtrans' (line 842)
        kwtrans_9252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 16), 'kwtrans')
        unicode_9253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 842, 24), 'unicode', u'tick1On')
        # Storing an element on a container (line 842)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 842, 16), kwtrans_9252, (unicode_9253, _string_to_bool_call_result_9251))
        # SSA join for if statement (line 841)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_9254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 15), 'unicode', u'bottom')
        # Getting the type of 'kw' (line 843)
        kw_9255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 27), 'kw')
        # Applying the binary operator 'in' (line 843)
        result_contains_9256 = python_operator(stypy.reporting.localization.Localization(__file__, 843, 15), 'in', unicode_9254, kw_9255)
        
        # Testing the type of an if condition (line 843)
        if_condition_9257 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 843, 12), result_contains_9256)
        # Assigning a type to the variable 'if_condition_9257' (line 843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 12), 'if_condition_9257', if_condition_9257)
        # SSA begins for if statement (line 843)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 844):
        
        # Assigning a Call to a Subscript (line 844):
        
        # Call to _string_to_bool(...): (line 844)
        # Processing the call arguments (line 844)
        
        # Call to pop(...): (line 844)
        # Processing the call arguments (line 844)
        unicode_9261 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 60), 'unicode', u'bottom')
        # Processing the call keyword arguments (line 844)
        kwargs_9262 = {}
        # Getting the type of 'kw' (line 844)
        kw_9259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 53), 'kw', False)
        # Obtaining the member 'pop' of a type (line 844)
        pop_9260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 53), kw_9259, 'pop')
        # Calling pop(args, kwargs) (line 844)
        pop_call_result_9263 = invoke(stypy.reporting.localization.Localization(__file__, 844, 53), pop_9260, *[unicode_9261], **kwargs_9262)
        
        # Processing the call keyword arguments (line 844)
        kwargs_9264 = {}
        # Getting the type of '_string_to_bool' (line 844)
        _string_to_bool_9258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 37), '_string_to_bool', False)
        # Calling _string_to_bool(args, kwargs) (line 844)
        _string_to_bool_call_result_9265 = invoke(stypy.reporting.localization.Localization(__file__, 844, 37), _string_to_bool_9258, *[pop_call_result_9263], **kwargs_9264)
        
        # Getting the type of 'kwtrans' (line 844)
        kwtrans_9266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 16), 'kwtrans')
        unicode_9267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 24), 'unicode', u'tick1On')
        # Storing an element on a container (line 844)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 844, 16), kwtrans_9266, (unicode_9267, _string_to_bool_call_result_9265))
        # SSA join for if statement (line 843)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_9268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 845, 15), 'unicode', u'right')
        # Getting the type of 'kw' (line 845)
        kw_9269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 845, 26), 'kw')
        # Applying the binary operator 'in' (line 845)
        result_contains_9270 = python_operator(stypy.reporting.localization.Localization(__file__, 845, 15), 'in', unicode_9268, kw_9269)
        
        # Testing the type of an if condition (line 845)
        if_condition_9271 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 845, 12), result_contains_9270)
        # Assigning a type to the variable 'if_condition_9271' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 12), 'if_condition_9271', if_condition_9271)
        # SSA begins for if statement (line 845)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 846):
        
        # Assigning a Call to a Subscript (line 846):
        
        # Call to _string_to_bool(...): (line 846)
        # Processing the call arguments (line 846)
        
        # Call to pop(...): (line 846)
        # Processing the call arguments (line 846)
        unicode_9275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 846, 60), 'unicode', u'right')
        # Processing the call keyword arguments (line 846)
        kwargs_9276 = {}
        # Getting the type of 'kw' (line 846)
        kw_9273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 53), 'kw', False)
        # Obtaining the member 'pop' of a type (line 846)
        pop_9274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 846, 53), kw_9273, 'pop')
        # Calling pop(args, kwargs) (line 846)
        pop_call_result_9277 = invoke(stypy.reporting.localization.Localization(__file__, 846, 53), pop_9274, *[unicode_9275], **kwargs_9276)
        
        # Processing the call keyword arguments (line 846)
        kwargs_9278 = {}
        # Getting the type of '_string_to_bool' (line 846)
        _string_to_bool_9272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 37), '_string_to_bool', False)
        # Calling _string_to_bool(args, kwargs) (line 846)
        _string_to_bool_call_result_9279 = invoke(stypy.reporting.localization.Localization(__file__, 846, 37), _string_to_bool_9272, *[pop_call_result_9277], **kwargs_9278)
        
        # Getting the type of 'kwtrans' (line 846)
        kwtrans_9280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 16), 'kwtrans')
        unicode_9281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 846, 24), 'unicode', u'tick2On')
        # Storing an element on a container (line 846)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 846, 16), kwtrans_9280, (unicode_9281, _string_to_bool_call_result_9279))
        # SSA join for if statement (line 845)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_9282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 847, 15), 'unicode', u'top')
        # Getting the type of 'kw' (line 847)
        kw_9283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 24), 'kw')
        # Applying the binary operator 'in' (line 847)
        result_contains_9284 = python_operator(stypy.reporting.localization.Localization(__file__, 847, 15), 'in', unicode_9282, kw_9283)
        
        # Testing the type of an if condition (line 847)
        if_condition_9285 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 847, 12), result_contains_9284)
        # Assigning a type to the variable 'if_condition_9285' (line 847)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 847, 12), 'if_condition_9285', if_condition_9285)
        # SSA begins for if statement (line 847)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 848):
        
        # Assigning a Call to a Subscript (line 848):
        
        # Call to _string_to_bool(...): (line 848)
        # Processing the call arguments (line 848)
        
        # Call to pop(...): (line 848)
        # Processing the call arguments (line 848)
        unicode_9289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 848, 60), 'unicode', u'top')
        # Processing the call keyword arguments (line 848)
        kwargs_9290 = {}
        # Getting the type of 'kw' (line 848)
        kw_9287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 53), 'kw', False)
        # Obtaining the member 'pop' of a type (line 848)
        pop_9288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 53), kw_9287, 'pop')
        # Calling pop(args, kwargs) (line 848)
        pop_call_result_9291 = invoke(stypy.reporting.localization.Localization(__file__, 848, 53), pop_9288, *[unicode_9289], **kwargs_9290)
        
        # Processing the call keyword arguments (line 848)
        kwargs_9292 = {}
        # Getting the type of '_string_to_bool' (line 848)
        _string_to_bool_9286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 37), '_string_to_bool', False)
        # Calling _string_to_bool(args, kwargs) (line 848)
        _string_to_bool_call_result_9293 = invoke(stypy.reporting.localization.Localization(__file__, 848, 37), _string_to_bool_9286, *[pop_call_result_9291], **kwargs_9292)
        
        # Getting the type of 'kwtrans' (line 848)
        kwtrans_9294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 16), 'kwtrans')
        unicode_9295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 848, 24), 'unicode', u'tick2On')
        # Storing an element on a container (line 848)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 848, 16), kwtrans_9294, (unicode_9295, _string_to_bool_call_result_9293))
        # SSA join for if statement (line 847)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_9296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 850, 15), 'unicode', u'labelleft')
        # Getting the type of 'kw' (line 850)
        kw_9297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 30), 'kw')
        # Applying the binary operator 'in' (line 850)
        result_contains_9298 = python_operator(stypy.reporting.localization.Localization(__file__, 850, 15), 'in', unicode_9296, kw_9297)
        
        # Testing the type of an if condition (line 850)
        if_condition_9299 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 850, 12), result_contains_9298)
        # Assigning a type to the variable 'if_condition_9299' (line 850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 850, 12), 'if_condition_9299', if_condition_9299)
        # SSA begins for if statement (line 850)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 851):
        
        # Assigning a Call to a Subscript (line 851):
        
        # Call to _string_to_bool(...): (line 851)
        # Processing the call arguments (line 851)
        
        # Call to pop(...): (line 851)
        # Processing the call arguments (line 851)
        unicode_9303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 851, 61), 'unicode', u'labelleft')
        # Processing the call keyword arguments (line 851)
        kwargs_9304 = {}
        # Getting the type of 'kw' (line 851)
        kw_9301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 54), 'kw', False)
        # Obtaining the member 'pop' of a type (line 851)
        pop_9302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 54), kw_9301, 'pop')
        # Calling pop(args, kwargs) (line 851)
        pop_call_result_9305 = invoke(stypy.reporting.localization.Localization(__file__, 851, 54), pop_9302, *[unicode_9303], **kwargs_9304)
        
        # Processing the call keyword arguments (line 851)
        kwargs_9306 = {}
        # Getting the type of '_string_to_bool' (line 851)
        _string_to_bool_9300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 38), '_string_to_bool', False)
        # Calling _string_to_bool(args, kwargs) (line 851)
        _string_to_bool_call_result_9307 = invoke(stypy.reporting.localization.Localization(__file__, 851, 38), _string_to_bool_9300, *[pop_call_result_9305], **kwargs_9306)
        
        # Getting the type of 'kwtrans' (line 851)
        kwtrans_9308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 16), 'kwtrans')
        unicode_9309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 851, 24), 'unicode', u'label1On')
        # Storing an element on a container (line 851)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 851, 16), kwtrans_9308, (unicode_9309, _string_to_bool_call_result_9307))
        # SSA join for if statement (line 850)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_9310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 852, 15), 'unicode', u'labelbottom')
        # Getting the type of 'kw' (line 852)
        kw_9311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 32), 'kw')
        # Applying the binary operator 'in' (line 852)
        result_contains_9312 = python_operator(stypy.reporting.localization.Localization(__file__, 852, 15), 'in', unicode_9310, kw_9311)
        
        # Testing the type of an if condition (line 852)
        if_condition_9313 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 852, 12), result_contains_9312)
        # Assigning a type to the variable 'if_condition_9313' (line 852)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 12), 'if_condition_9313', if_condition_9313)
        # SSA begins for if statement (line 852)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 853):
        
        # Assigning a Call to a Subscript (line 853):
        
        # Call to _string_to_bool(...): (line 853)
        # Processing the call arguments (line 853)
        
        # Call to pop(...): (line 853)
        # Processing the call arguments (line 853)
        unicode_9317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 853, 61), 'unicode', u'labelbottom')
        # Processing the call keyword arguments (line 853)
        kwargs_9318 = {}
        # Getting the type of 'kw' (line 853)
        kw_9315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 54), 'kw', False)
        # Obtaining the member 'pop' of a type (line 853)
        pop_9316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 853, 54), kw_9315, 'pop')
        # Calling pop(args, kwargs) (line 853)
        pop_call_result_9319 = invoke(stypy.reporting.localization.Localization(__file__, 853, 54), pop_9316, *[unicode_9317], **kwargs_9318)
        
        # Processing the call keyword arguments (line 853)
        kwargs_9320 = {}
        # Getting the type of '_string_to_bool' (line 853)
        _string_to_bool_9314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 38), '_string_to_bool', False)
        # Calling _string_to_bool(args, kwargs) (line 853)
        _string_to_bool_call_result_9321 = invoke(stypy.reporting.localization.Localization(__file__, 853, 38), _string_to_bool_9314, *[pop_call_result_9319], **kwargs_9320)
        
        # Getting the type of 'kwtrans' (line 853)
        kwtrans_9322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 16), 'kwtrans')
        unicode_9323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 853, 24), 'unicode', u'label1On')
        # Storing an element on a container (line 853)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 853, 16), kwtrans_9322, (unicode_9323, _string_to_bool_call_result_9321))
        # SSA join for if statement (line 852)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_9324 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 854, 15), 'unicode', u'labelright')
        # Getting the type of 'kw' (line 854)
        kw_9325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 31), 'kw')
        # Applying the binary operator 'in' (line 854)
        result_contains_9326 = python_operator(stypy.reporting.localization.Localization(__file__, 854, 15), 'in', unicode_9324, kw_9325)
        
        # Testing the type of an if condition (line 854)
        if_condition_9327 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 854, 12), result_contains_9326)
        # Assigning a type to the variable 'if_condition_9327' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 12), 'if_condition_9327', if_condition_9327)
        # SSA begins for if statement (line 854)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 855):
        
        # Assigning a Call to a Subscript (line 855):
        
        # Call to _string_to_bool(...): (line 855)
        # Processing the call arguments (line 855)
        
        # Call to pop(...): (line 855)
        # Processing the call arguments (line 855)
        unicode_9331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, 61), 'unicode', u'labelright')
        # Processing the call keyword arguments (line 855)
        kwargs_9332 = {}
        # Getting the type of 'kw' (line 855)
        kw_9329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 54), 'kw', False)
        # Obtaining the member 'pop' of a type (line 855)
        pop_9330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 855, 54), kw_9329, 'pop')
        # Calling pop(args, kwargs) (line 855)
        pop_call_result_9333 = invoke(stypy.reporting.localization.Localization(__file__, 855, 54), pop_9330, *[unicode_9331], **kwargs_9332)
        
        # Processing the call keyword arguments (line 855)
        kwargs_9334 = {}
        # Getting the type of '_string_to_bool' (line 855)
        _string_to_bool_9328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 38), '_string_to_bool', False)
        # Calling _string_to_bool(args, kwargs) (line 855)
        _string_to_bool_call_result_9335 = invoke(stypy.reporting.localization.Localization(__file__, 855, 38), _string_to_bool_9328, *[pop_call_result_9333], **kwargs_9334)
        
        # Getting the type of 'kwtrans' (line 855)
        kwtrans_9336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 16), 'kwtrans')
        unicode_9337 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, 24), 'unicode', u'label2On')
        # Storing an element on a container (line 855)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 855, 16), kwtrans_9336, (unicode_9337, _string_to_bool_call_result_9335))
        # SSA join for if statement (line 854)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_9338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 856, 15), 'unicode', u'labeltop')
        # Getting the type of 'kw' (line 856)
        kw_9339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 29), 'kw')
        # Applying the binary operator 'in' (line 856)
        result_contains_9340 = python_operator(stypy.reporting.localization.Localization(__file__, 856, 15), 'in', unicode_9338, kw_9339)
        
        # Testing the type of an if condition (line 856)
        if_condition_9341 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 856, 12), result_contains_9340)
        # Assigning a type to the variable 'if_condition_9341' (line 856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 12), 'if_condition_9341', if_condition_9341)
        # SSA begins for if statement (line 856)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 857):
        
        # Assigning a Call to a Subscript (line 857):
        
        # Call to _string_to_bool(...): (line 857)
        # Processing the call arguments (line 857)
        
        # Call to pop(...): (line 857)
        # Processing the call arguments (line 857)
        unicode_9345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 857, 61), 'unicode', u'labeltop')
        # Processing the call keyword arguments (line 857)
        kwargs_9346 = {}
        # Getting the type of 'kw' (line 857)
        kw_9343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 54), 'kw', False)
        # Obtaining the member 'pop' of a type (line 857)
        pop_9344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 857, 54), kw_9343, 'pop')
        # Calling pop(args, kwargs) (line 857)
        pop_call_result_9347 = invoke(stypy.reporting.localization.Localization(__file__, 857, 54), pop_9344, *[unicode_9345], **kwargs_9346)
        
        # Processing the call keyword arguments (line 857)
        kwargs_9348 = {}
        # Getting the type of '_string_to_bool' (line 857)
        _string_to_bool_9342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 38), '_string_to_bool', False)
        # Calling _string_to_bool(args, kwargs) (line 857)
        _string_to_bool_call_result_9349 = invoke(stypy.reporting.localization.Localization(__file__, 857, 38), _string_to_bool_9342, *[pop_call_result_9347], **kwargs_9348)
        
        # Getting the type of 'kwtrans' (line 857)
        kwtrans_9350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 16), 'kwtrans')
        unicode_9351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 857, 24), 'unicode', u'label2On')
        # Storing an element on a container (line 857)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 857, 16), kwtrans_9350, (unicode_9351, _string_to_bool_call_result_9349))
        # SSA join for if statement (line 856)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_9352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 15), 'unicode', u'colors')
        # Getting the type of 'kw' (line 858)
        kw_9353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 27), 'kw')
        # Applying the binary operator 'in' (line 858)
        result_contains_9354 = python_operator(stypy.reporting.localization.Localization(__file__, 858, 15), 'in', unicode_9352, kw_9353)
        
        # Testing the type of an if condition (line 858)
        if_condition_9355 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 858, 12), result_contains_9354)
        # Assigning a type to the variable 'if_condition_9355' (line 858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 12), 'if_condition_9355', if_condition_9355)
        # SSA begins for if statement (line 858)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 859):
        
        # Assigning a Call to a Name (line 859):
        
        # Call to pop(...): (line 859)
        # Processing the call arguments (line 859)
        unicode_9358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 859, 27), 'unicode', u'colors')
        # Processing the call keyword arguments (line 859)
        kwargs_9359 = {}
        # Getting the type of 'kw' (line 859)
        kw_9356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 20), 'kw', False)
        # Obtaining the member 'pop' of a type (line 859)
        pop_9357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 20), kw_9356, 'pop')
        # Calling pop(args, kwargs) (line 859)
        pop_call_result_9360 = invoke(stypy.reporting.localization.Localization(__file__, 859, 20), pop_9357, *[unicode_9358], **kwargs_9359)
        
        # Assigning a type to the variable 'c' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 16), 'c', pop_call_result_9360)
        
        # Assigning a Name to a Subscript (line 860):
        
        # Assigning a Name to a Subscript (line 860):
        # Getting the type of 'c' (line 860)
        c_9361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 35), 'c')
        # Getting the type of 'kwtrans' (line 860)
        kwtrans_9362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 16), 'kwtrans')
        unicode_9363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 24), 'unicode', u'color')
        # Storing an element on a container (line 860)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 860, 16), kwtrans_9362, (unicode_9363, c_9361))
        
        # Assigning a Name to a Subscript (line 861):
        
        # Assigning a Name to a Subscript (line 861):
        # Getting the type of 'c' (line 861)
        c_9364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 40), 'c')
        # Getting the type of 'kwtrans' (line 861)
        kwtrans_9365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 16), 'kwtrans')
        unicode_9366 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 861, 24), 'unicode', u'labelcolor')
        # Storing an element on a container (line 861)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 861, 16), kwtrans_9365, (unicode_9366, c_9364))
        # SSA join for if statement (line 858)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'kw' (line 863)
        kw_9367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 23), 'kw')
        # Testing the type of a for loop iterable (line 863)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 863, 12), kw_9367)
        # Getting the type of the for loop variable (line 863)
        for_loop_var_9368 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 863, 12), kw_9367)
        # Assigning a type to the variable 'key' (line 863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 12), 'key', for_loop_var_9368)
        # SSA begins for a for statement (line 863)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'key' (line 864)
        key_9369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 19), 'key')
        # Getting the type of 'kwkeys' (line 864)
        kwkeys_9370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 30), 'kwkeys')
        # Applying the binary operator 'notin' (line 864)
        result_contains_9371 = python_operator(stypy.reporting.localization.Localization(__file__, 864, 19), 'notin', key_9369, kwkeys_9370)
        
        # Testing the type of an if condition (line 864)
        if_condition_9372 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 864, 16), result_contains_9371)
        # Assigning a type to the variable 'if_condition_9372' (line 864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 864, 16), 'if_condition_9372', if_condition_9372)
        # SSA begins for if statement (line 864)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 865)
        # Processing the call arguments (line 865)
        unicode_9374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, 24), 'unicode', u'keyword %s is not recognized; valid keywords are %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 867)
        tuple_9375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 867, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 867)
        # Adding element type (line 867)
        # Getting the type of 'key' (line 867)
        key_9376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 27), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 867, 27), tuple_9375, key_9376)
        # Adding element type (line 867)
        # Getting the type of 'kwkeys' (line 867)
        kwkeys_9377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 32), 'kwkeys', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 867, 27), tuple_9375, kwkeys_9377)
        
        # Applying the binary operator '%' (line 866)
        result_mod_9378 = python_operator(stypy.reporting.localization.Localization(__file__, 866, 24), '%', unicode_9374, tuple_9375)
        
        # Processing the call keyword arguments (line 865)
        kwargs_9379 = {}
        # Getting the type of 'ValueError' (line 865)
        ValueError_9373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 865)
        ValueError_call_result_9380 = invoke(stypy.reporting.localization.Localization(__file__, 865, 26), ValueError_9373, *[result_mod_9378], **kwargs_9379)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 865, 20), ValueError_call_result_9380, 'raise parameter', BaseException)
        # SSA join for if statement (line 864)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update(...): (line 868)
        # Processing the call arguments (line 868)
        # Getting the type of 'kw' (line 868)
        kw_9383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 27), 'kw', False)
        # Processing the call keyword arguments (line 868)
        kwargs_9384 = {}
        # Getting the type of 'kwtrans' (line 868)
        kwtrans_9381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 12), 'kwtrans', False)
        # Obtaining the member 'update' of a type (line 868)
        update_9382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 12), kwtrans_9381, 'update')
        # Calling update(args, kwargs) (line 868)
        update_call_result_9385 = invoke(stypy.reporting.localization.Localization(__file__, 868, 12), update_9382, *[kw_9383], **kwargs_9384)
        
        # SSA branch for the else part of an if statement (line 834)
        module_type_store.open_ssa_branch('else')
        
        # Call to NotImplementedError(...): (line 870)
        # Processing the call arguments (line 870)
        unicode_9387 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 38), 'unicode', u'Inverse translation is deferred')
        # Processing the call keyword arguments (line 870)
        kwargs_9388 = {}
        # Getting the type of 'NotImplementedError' (line 870)
        NotImplementedError_9386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 18), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 870)
        NotImplementedError_call_result_9389 = invoke(stypy.reporting.localization.Localization(__file__, 870, 18), NotImplementedError_9386, *[unicode_9387], **kwargs_9388)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 870, 12), NotImplementedError_call_result_9389, 'raise parameter', BaseException)
        # SSA join for if statement (line 834)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'kwtrans' (line 871)
        kwtrans_9390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 15), 'kwtrans')
        # Assigning a type to the variable 'stypy_return_type' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 8), 'stypy_return_type', kwtrans_9390)
        
        # ################# End of '_translate_tick_kw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_translate_tick_kw' in the type store
        # Getting the type of 'stypy_return_type' (line 822)
        stypy_return_type_9391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9391)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_translate_tick_kw'
        return stypy_return_type_9391


    @norecursion
    def set_clip_path(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 873)
        None_9392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 48), 'None')
        defaults = [None_9392]
        # Create a new context for function 'set_clip_path'
        module_type_store = module_type_store.open_function_context('set_clip_path', 873, 4, False)
        # Assigning a type to the variable 'self' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_clip_path.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_clip_path.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_clip_path.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_clip_path.__dict__.__setitem__('stypy_function_name', 'Axis.set_clip_path')
        Axis.set_clip_path.__dict__.__setitem__('stypy_param_names_list', ['clippath', 'transform'])
        Axis.set_clip_path.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_clip_path.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_clip_path.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_clip_path.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_clip_path.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_clip_path.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_clip_path', ['clippath', 'transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_clip_path', localization, ['clippath', 'transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_clip_path(...)' code ##################

        
        # Call to set_clip_path(...): (line 874)
        # Processing the call arguments (line 874)
        # Getting the type of 'self' (line 874)
        self_9396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 36), 'self', False)
        # Getting the type of 'clippath' (line 874)
        clippath_9397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 42), 'clippath', False)
        # Getting the type of 'transform' (line 874)
        transform_9398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 52), 'transform', False)
        # Processing the call keyword arguments (line 874)
        kwargs_9399 = {}
        # Getting the type of 'artist' (line 874)
        artist_9393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 8), 'artist', False)
        # Obtaining the member 'Artist' of a type (line 874)
        Artist_9394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 874, 8), artist_9393, 'Artist')
        # Obtaining the member 'set_clip_path' of a type (line 874)
        set_clip_path_9395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 874, 8), Artist_9394, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 874)
        set_clip_path_call_result_9400 = invoke(stypy.reporting.localization.Localization(__file__, 874, 8), set_clip_path_9395, *[self_9396, clippath_9397, transform_9398], **kwargs_9399)
        
        
        # Getting the type of 'self' (line 875)
        self_9401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 21), 'self')
        # Obtaining the member 'majorTicks' of a type (line 875)
        majorTicks_9402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 21), self_9401, 'majorTicks')
        # Getting the type of 'self' (line 875)
        self_9403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 39), 'self')
        # Obtaining the member 'minorTicks' of a type (line 875)
        minorTicks_9404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 875, 39), self_9403, 'minorTicks')
        # Applying the binary operator '+' (line 875)
        result_add_9405 = python_operator(stypy.reporting.localization.Localization(__file__, 875, 21), '+', majorTicks_9402, minorTicks_9404)
        
        # Testing the type of a for loop iterable (line 875)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 875, 8), result_add_9405)
        # Getting the type of the for loop variable (line 875)
        for_loop_var_9406 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 875, 8), result_add_9405)
        # Assigning a type to the variable 'child' (line 875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 875, 8), 'child', for_loop_var_9406)
        # SSA begins for a for statement (line 875)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_clip_path(...): (line 876)
        # Processing the call arguments (line 876)
        # Getting the type of 'clippath' (line 876)
        clippath_9409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 32), 'clippath', False)
        # Getting the type of 'transform' (line 876)
        transform_9410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 42), 'transform', False)
        # Processing the call keyword arguments (line 876)
        kwargs_9411 = {}
        # Getting the type of 'child' (line 876)
        child_9407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 12), 'child', False)
        # Obtaining the member 'set_clip_path' of a type (line 876)
        set_clip_path_9408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 12), child_9407, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 876)
        set_clip_path_call_result_9412 = invoke(stypy.reporting.localization.Localization(__file__, 876, 12), set_clip_path_9408, *[clippath_9409, transform_9410], **kwargs_9411)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 877):
        
        # Assigning a Name to a Attribute (line 877):
        # Getting the type of 'True' (line 877)
        True_9413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 21), 'True')
        # Getting the type of 'self' (line 877)
        self_9414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 877)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 8), self_9414, 'stale', True_9413)
        
        # ################# End of 'set_clip_path(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_clip_path' in the type store
        # Getting the type of 'stypy_return_type' (line 873)
        stypy_return_type_9415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9415)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_clip_path'
        return stypy_return_type_9415


    @norecursion
    def get_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_view_interval'
        module_type_store = module_type_store.open_function_context('get_view_interval', 879, 4, False)
        # Assigning a type to the variable 'self' (line 880)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 880, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_view_interval.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_view_interval.__dict__.__setitem__('stypy_function_name', 'Axis.get_view_interval')
        Axis.get_view_interval.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_view_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_view_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_view_interval(...)' code ##################

        unicode_9416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 880, 8), 'unicode', u'return the Interval instance for this axis view limits')
        
        # Call to NotImplementedError(...): (line 881)
        # Processing the call arguments (line 881)
        unicode_9418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 881, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 881)
        kwargs_9419 = {}
        # Getting the type of 'NotImplementedError' (line 881)
        NotImplementedError_9417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 881)
        NotImplementedError_call_result_9420 = invoke(stypy.reporting.localization.Localization(__file__, 881, 14), NotImplementedError_9417, *[unicode_9418], **kwargs_9419)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 881, 8), NotImplementedError_call_result_9420, 'raise parameter', BaseException)
        
        # ################# End of 'get_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 879)
        stypy_return_type_9421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9421)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_view_interval'
        return stypy_return_type_9421


    @norecursion
    def set_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 883)
        False_9422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 51), 'False')
        defaults = [False_9422]
        # Create a new context for function 'set_view_interval'
        module_type_store = module_type_store.open_function_context('set_view_interval', 883, 4, False)
        # Assigning a type to the variable 'self' (line 884)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 884, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_view_interval.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_view_interval.__dict__.__setitem__('stypy_function_name', 'Axis.set_view_interval')
        Axis.set_view_interval.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax', 'ignore'])
        Axis.set_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_view_interval', ['vmin', 'vmax', 'ignore'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_view_interval', localization, ['vmin', 'vmax', 'ignore'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_view_interval(...)' code ##################

        
        # Call to NotImplementedError(...): (line 884)
        # Processing the call arguments (line 884)
        unicode_9424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 884)
        kwargs_9425 = {}
        # Getting the type of 'NotImplementedError' (line 884)
        NotImplementedError_9423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 884)
        NotImplementedError_call_result_9426 = invoke(stypy.reporting.localization.Localization(__file__, 884, 14), NotImplementedError_9423, *[unicode_9424], **kwargs_9425)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 884, 8), NotImplementedError_call_result_9426, 'raise parameter', BaseException)
        
        # ################# End of 'set_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 883)
        stypy_return_type_9427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9427)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_view_interval'
        return stypy_return_type_9427


    @norecursion
    def get_data_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_data_interval'
        module_type_store = module_type_store.open_function_context('get_data_interval', 886, 4, False)
        # Assigning a type to the variable 'self' (line 887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 887, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_data_interval.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_data_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_data_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_data_interval.__dict__.__setitem__('stypy_function_name', 'Axis.get_data_interval')
        Axis.get_data_interval.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_data_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_data_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_data_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_data_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_data_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_data_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_data_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_data_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_data_interval(...)' code ##################

        unicode_9428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 887, 8), 'unicode', u'return the Interval instance for this axis data limits')
        
        # Call to NotImplementedError(...): (line 888)
        # Processing the call arguments (line 888)
        unicode_9430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 888, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 888)
        kwargs_9431 = {}
        # Getting the type of 'NotImplementedError' (line 888)
        NotImplementedError_9429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 888, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 888)
        NotImplementedError_call_result_9432 = invoke(stypy.reporting.localization.Localization(__file__, 888, 14), NotImplementedError_9429, *[unicode_9430], **kwargs_9431)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 888, 8), NotImplementedError_call_result_9432, 'raise parameter', BaseException)
        
        # ################# End of 'get_data_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_data_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 886)
        stypy_return_type_9433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9433)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_data_interval'
        return stypy_return_type_9433


    @norecursion
    def set_data_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_data_interval'
        module_type_store = module_type_store.open_function_context('set_data_interval', 890, 4, False)
        # Assigning a type to the variable 'self' (line 891)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 891, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_data_interval.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_data_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_data_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_data_interval.__dict__.__setitem__('stypy_function_name', 'Axis.set_data_interval')
        Axis.set_data_interval.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.set_data_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_data_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_data_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_data_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_data_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_data_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_data_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data_interval(...)' code ##################

        unicode_9434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 891, 8), 'unicode', u'set the axis data limits')
        
        # Call to NotImplementedError(...): (line 892)
        # Processing the call arguments (line 892)
        unicode_9436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 892)
        kwargs_9437 = {}
        # Getting the type of 'NotImplementedError' (line 892)
        NotImplementedError_9435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 892)
        NotImplementedError_call_result_9438 = invoke(stypy.reporting.localization.Localization(__file__, 892, 14), NotImplementedError_9435, *[unicode_9436], **kwargs_9437)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 892, 8), NotImplementedError_call_result_9438, 'raise parameter', BaseException)
        
        # ################# End of 'set_data_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 890)
        stypy_return_type_9439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 890, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9439)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data_interval'
        return stypy_return_type_9439


    @norecursion
    def set_default_intervals(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_default_intervals'
        module_type_store = module_type_store.open_function_context('set_default_intervals', 894, 4, False)
        # Assigning a type to the variable 'self' (line 895)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_default_intervals.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_default_intervals.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_default_intervals.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_default_intervals.__dict__.__setitem__('stypy_function_name', 'Axis.set_default_intervals')
        Axis.set_default_intervals.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.set_default_intervals.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_default_intervals.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_default_intervals.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_default_intervals.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_default_intervals.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_default_intervals.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_default_intervals', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_default_intervals', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_default_intervals(...)' code ##################

        unicode_9440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, (-1)), 'unicode', u'set the default limits for the axis data and view interval if they\n        are not mutated')
        pass
        
        # ################# End of 'set_default_intervals(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_default_intervals' in the type store
        # Getting the type of 'stypy_return_type' (line 894)
        stypy_return_type_9441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9441)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_default_intervals'
        return stypy_return_type_9441


    @norecursion
    def _set_artist_props(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_artist_props'
        module_type_store = module_type_store.open_function_context('_set_artist_props', 908, 4, False)
        # Assigning a type to the variable 'self' (line 909)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 909, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis._set_artist_props.__dict__.__setitem__('stypy_localization', localization)
        Axis._set_artist_props.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis._set_artist_props.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis._set_artist_props.__dict__.__setitem__('stypy_function_name', 'Axis._set_artist_props')
        Axis._set_artist_props.__dict__.__setitem__('stypy_param_names_list', ['a'])
        Axis._set_artist_props.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis._set_artist_props.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis._set_artist_props.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis._set_artist_props.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis._set_artist_props.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis._set_artist_props.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis._set_artist_props', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_artist_props', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_artist_props(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 909)
        # Getting the type of 'a' (line 909)
        a_9442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 11), 'a')
        # Getting the type of 'None' (line 909)
        None_9443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 16), 'None')
        
        (may_be_9444, more_types_in_union_9445) = may_be_none(a_9442, None_9443)

        if may_be_9444:

            if more_types_in_union_9445:
                # Runtime conditional SSA (line 909)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 910)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_9445:
                # SSA join for if statement (line 909)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to set_figure(...): (line 911)
        # Processing the call arguments (line 911)
        # Getting the type of 'self' (line 911)
        self_9448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 21), 'self', False)
        # Obtaining the member 'figure' of a type (line 911)
        figure_9449 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 21), self_9448, 'figure')
        # Processing the call keyword arguments (line 911)
        kwargs_9450 = {}
        # Getting the type of 'a' (line 911)
        a_9446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 8), 'a', False)
        # Obtaining the member 'set_figure' of a type (line 911)
        set_figure_9447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 8), a_9446, 'set_figure')
        # Calling set_figure(args, kwargs) (line 911)
        set_figure_call_result_9451 = invoke(stypy.reporting.localization.Localization(__file__, 911, 8), set_figure_9447, *[figure_9449], **kwargs_9450)
        
        
        # ################# End of '_set_artist_props(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_artist_props' in the type store
        # Getting the type of 'stypy_return_type' (line 908)
        stypy_return_type_9452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9452)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_artist_props'
        return stypy_return_type_9452


    @norecursion
    def iter_ticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'iter_ticks'
        module_type_store = module_type_store.open_function_context('iter_ticks', 913, 4, False)
        # Assigning a type to the variable 'self' (line 914)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 914, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.iter_ticks.__dict__.__setitem__('stypy_localization', localization)
        Axis.iter_ticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.iter_ticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.iter_ticks.__dict__.__setitem__('stypy_function_name', 'Axis.iter_ticks')
        Axis.iter_ticks.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.iter_ticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.iter_ticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.iter_ticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.iter_ticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.iter_ticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.iter_ticks.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.iter_ticks', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'iter_ticks', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'iter_ticks(...)' code ##################

        unicode_9453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, (-1)), 'unicode', u'\n        Iterate through all of the major and minor ticks.\n        ')
        
        # Assigning a Call to a Name (line 917):
        
        # Assigning a Call to a Name (line 917):
        
        # Call to locator(...): (line 917)
        # Processing the call keyword arguments (line 917)
        kwargs_9457 = {}
        # Getting the type of 'self' (line 917)
        self_9454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 20), 'self', False)
        # Obtaining the member 'major' of a type (line 917)
        major_9455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 20), self_9454, 'major')
        # Obtaining the member 'locator' of a type (line 917)
        locator_9456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 20), major_9455, 'locator')
        # Calling locator(args, kwargs) (line 917)
        locator_call_result_9458 = invoke(stypy.reporting.localization.Localization(__file__, 917, 20), locator_9456, *[], **kwargs_9457)
        
        # Assigning a type to the variable 'majorLocs' (line 917)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 917, 8), 'majorLocs', locator_call_result_9458)
        
        # Assigning a Call to a Name (line 918):
        
        # Assigning a Call to a Name (line 918):
        
        # Call to get_major_ticks(...): (line 918)
        # Processing the call arguments (line 918)
        
        # Call to len(...): (line 918)
        # Processing the call arguments (line 918)
        # Getting the type of 'majorLocs' (line 918)
        majorLocs_9462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 46), 'majorLocs', False)
        # Processing the call keyword arguments (line 918)
        kwargs_9463 = {}
        # Getting the type of 'len' (line 918)
        len_9461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 42), 'len', False)
        # Calling len(args, kwargs) (line 918)
        len_call_result_9464 = invoke(stypy.reporting.localization.Localization(__file__, 918, 42), len_9461, *[majorLocs_9462], **kwargs_9463)
        
        # Processing the call keyword arguments (line 918)
        kwargs_9465 = {}
        # Getting the type of 'self' (line 918)
        self_9459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 21), 'self', False)
        # Obtaining the member 'get_major_ticks' of a type (line 918)
        get_major_ticks_9460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 918, 21), self_9459, 'get_major_ticks')
        # Calling get_major_ticks(args, kwargs) (line 918)
        get_major_ticks_call_result_9466 = invoke(stypy.reporting.localization.Localization(__file__, 918, 21), get_major_ticks_9460, *[len_call_result_9464], **kwargs_9465)
        
        # Assigning a type to the variable 'majorTicks' (line 918)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 8), 'majorTicks', get_major_ticks_call_result_9466)
        
        # Call to set_locs(...): (line 919)
        # Processing the call arguments (line 919)
        # Getting the type of 'majorLocs' (line 919)
        majorLocs_9471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 38), 'majorLocs', False)
        # Processing the call keyword arguments (line 919)
        kwargs_9472 = {}
        # Getting the type of 'self' (line 919)
        self_9467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'self', False)
        # Obtaining the member 'major' of a type (line 919)
        major_9468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 919, 8), self_9467, 'major')
        # Obtaining the member 'formatter' of a type (line 919)
        formatter_9469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 919, 8), major_9468, 'formatter')
        # Obtaining the member 'set_locs' of a type (line 919)
        set_locs_9470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 919, 8), formatter_9469, 'set_locs')
        # Calling set_locs(args, kwargs) (line 919)
        set_locs_call_result_9473 = invoke(stypy.reporting.localization.Localization(__file__, 919, 8), set_locs_9470, *[majorLocs_9471], **kwargs_9472)
        
        
        # Assigning a ListComp to a Name (line 920):
        
        # Assigning a ListComp to a Name (line 920):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to enumerate(...): (line 921)
        # Processing the call arguments (line 921)
        # Getting the type of 'majorLocs' (line 921)
        majorLocs_9482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 47), 'majorLocs', False)
        # Processing the call keyword arguments (line 921)
        kwargs_9483 = {}
        # Getting the type of 'enumerate' (line 921)
        enumerate_9481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 37), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 921)
        enumerate_call_result_9484 = invoke(stypy.reporting.localization.Localization(__file__, 921, 37), enumerate_9481, *[majorLocs_9482], **kwargs_9483)
        
        comprehension_9485 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 920, 23), enumerate_call_result_9484)
        # Assigning a type to the variable 'i' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 23), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 920, 23), comprehension_9485))
        # Assigning a type to the variable 'val' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 23), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 920, 23), comprehension_9485))
        
        # Call to formatter(...): (line 920)
        # Processing the call arguments (line 920)
        # Getting the type of 'val' (line 920)
        val_9477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 44), 'val', False)
        # Getting the type of 'i' (line 920)
        i_9478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 49), 'i', False)
        # Processing the call keyword arguments (line 920)
        kwargs_9479 = {}
        # Getting the type of 'self' (line 920)
        self_9474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 23), 'self', False)
        # Obtaining the member 'major' of a type (line 920)
        major_9475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 23), self_9474, 'major')
        # Obtaining the member 'formatter' of a type (line 920)
        formatter_9476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 920, 23), major_9475, 'formatter')
        # Calling formatter(args, kwargs) (line 920)
        formatter_call_result_9480 = invoke(stypy.reporting.localization.Localization(__file__, 920, 23), formatter_9476, *[val_9477, i_9478], **kwargs_9479)
        
        list_9486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 920, 23), list_9486, formatter_call_result_9480)
        # Assigning a type to the variable 'majorLabels' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 8), 'majorLabels', list_9486)
        
        # Assigning a Call to a Name (line 923):
        
        # Assigning a Call to a Name (line 923):
        
        # Call to locator(...): (line 923)
        # Processing the call keyword arguments (line 923)
        kwargs_9490 = {}
        # Getting the type of 'self' (line 923)
        self_9487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 20), 'self', False)
        # Obtaining the member 'minor' of a type (line 923)
        minor_9488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 20), self_9487, 'minor')
        # Obtaining the member 'locator' of a type (line 923)
        locator_9489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 923, 20), minor_9488, 'locator')
        # Calling locator(args, kwargs) (line 923)
        locator_call_result_9491 = invoke(stypy.reporting.localization.Localization(__file__, 923, 20), locator_9489, *[], **kwargs_9490)
        
        # Assigning a type to the variable 'minorLocs' (line 923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'minorLocs', locator_call_result_9491)
        
        # Assigning a Call to a Name (line 924):
        
        # Assigning a Call to a Name (line 924):
        
        # Call to get_minor_ticks(...): (line 924)
        # Processing the call arguments (line 924)
        
        # Call to len(...): (line 924)
        # Processing the call arguments (line 924)
        # Getting the type of 'minorLocs' (line 924)
        minorLocs_9495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 46), 'minorLocs', False)
        # Processing the call keyword arguments (line 924)
        kwargs_9496 = {}
        # Getting the type of 'len' (line 924)
        len_9494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 42), 'len', False)
        # Calling len(args, kwargs) (line 924)
        len_call_result_9497 = invoke(stypy.reporting.localization.Localization(__file__, 924, 42), len_9494, *[minorLocs_9495], **kwargs_9496)
        
        # Processing the call keyword arguments (line 924)
        kwargs_9498 = {}
        # Getting the type of 'self' (line 924)
        self_9492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 21), 'self', False)
        # Obtaining the member 'get_minor_ticks' of a type (line 924)
        get_minor_ticks_9493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 21), self_9492, 'get_minor_ticks')
        # Calling get_minor_ticks(args, kwargs) (line 924)
        get_minor_ticks_call_result_9499 = invoke(stypy.reporting.localization.Localization(__file__, 924, 21), get_minor_ticks_9493, *[len_call_result_9497], **kwargs_9498)
        
        # Assigning a type to the variable 'minorTicks' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 8), 'minorTicks', get_minor_ticks_call_result_9499)
        
        # Call to set_locs(...): (line 925)
        # Processing the call arguments (line 925)
        # Getting the type of 'minorLocs' (line 925)
        minorLocs_9504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 38), 'minorLocs', False)
        # Processing the call keyword arguments (line 925)
        kwargs_9505 = {}
        # Getting the type of 'self' (line 925)
        self_9500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 8), 'self', False)
        # Obtaining the member 'minor' of a type (line 925)
        minor_9501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 8), self_9500, 'minor')
        # Obtaining the member 'formatter' of a type (line 925)
        formatter_9502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 8), minor_9501, 'formatter')
        # Obtaining the member 'set_locs' of a type (line 925)
        set_locs_9503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 925, 8), formatter_9502, 'set_locs')
        # Calling set_locs(args, kwargs) (line 925)
        set_locs_call_result_9506 = invoke(stypy.reporting.localization.Localization(__file__, 925, 8), set_locs_9503, *[minorLocs_9504], **kwargs_9505)
        
        
        # Assigning a ListComp to a Name (line 926):
        
        # Assigning a ListComp to a Name (line 926):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to enumerate(...): (line 927)
        # Processing the call arguments (line 927)
        # Getting the type of 'minorLocs' (line 927)
        minorLocs_9515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 47), 'minorLocs', False)
        # Processing the call keyword arguments (line 927)
        kwargs_9516 = {}
        # Getting the type of 'enumerate' (line 927)
        enumerate_9514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 927, 37), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 927)
        enumerate_call_result_9517 = invoke(stypy.reporting.localization.Localization(__file__, 927, 37), enumerate_9514, *[minorLocs_9515], **kwargs_9516)
        
        comprehension_9518 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 926, 23), enumerate_call_result_9517)
        # Assigning a type to the variable 'i' (line 926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 23), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 926, 23), comprehension_9518))
        # Assigning a type to the variable 'val' (line 926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 23), 'val', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 926, 23), comprehension_9518))
        
        # Call to formatter(...): (line 926)
        # Processing the call arguments (line 926)
        # Getting the type of 'val' (line 926)
        val_9510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 44), 'val', False)
        # Getting the type of 'i' (line 926)
        i_9511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 49), 'i', False)
        # Processing the call keyword arguments (line 926)
        kwargs_9512 = {}
        # Getting the type of 'self' (line 926)
        self_9507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 23), 'self', False)
        # Obtaining the member 'minor' of a type (line 926)
        minor_9508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 926, 23), self_9507, 'minor')
        # Obtaining the member 'formatter' of a type (line 926)
        formatter_9509 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 926, 23), minor_9508, 'formatter')
        # Calling formatter(args, kwargs) (line 926)
        formatter_call_result_9513 = invoke(stypy.reporting.localization.Localization(__file__, 926, 23), formatter_9509, *[val_9510, i_9511], **kwargs_9512)
        
        list_9519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 926, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 926, 23), list_9519, formatter_call_result_9513)
        # Assigning a type to the variable 'minorLabels' (line 926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 8), 'minorLabels', list_9519)
        
        # Assigning a List to a Name (line 929):
        
        # Assigning a List to a Name (line 929):
        
        # Obtaining an instance of the builtin type 'list' (line 929)
        list_9520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 929, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 929)
        # Adding element type (line 929)
        
        # Obtaining an instance of the builtin type 'tuple' (line 930)
        tuple_9521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 930, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 930)
        # Adding element type (line 930)
        # Getting the type of 'majorTicks' (line 930)
        majorTicks_9522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 13), 'majorTicks')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 930, 13), tuple_9521, majorTicks_9522)
        # Adding element type (line 930)
        # Getting the type of 'majorLocs' (line 930)
        majorLocs_9523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 25), 'majorLocs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 930, 13), tuple_9521, majorLocs_9523)
        # Adding element type (line 930)
        # Getting the type of 'majorLabels' (line 930)
        majorLabels_9524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 36), 'majorLabels')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 930, 13), tuple_9521, majorLabels_9524)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 929, 22), list_9520, tuple_9521)
        # Adding element type (line 929)
        
        # Obtaining an instance of the builtin type 'tuple' (line 931)
        tuple_9525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 931)
        # Adding element type (line 931)
        # Getting the type of 'minorTicks' (line 931)
        minorTicks_9526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 13), 'minorTicks')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 931, 13), tuple_9525, minorTicks_9526)
        # Adding element type (line 931)
        # Getting the type of 'minorLocs' (line 931)
        minorLocs_9527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 25), 'minorLocs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 931, 13), tuple_9525, minorLocs_9527)
        # Adding element type (line 931)
        # Getting the type of 'minorLabels' (line 931)
        minorLabels_9528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 36), 'minorLabels')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 931, 13), tuple_9525, minorLabels_9528)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 929, 22), list_9520, tuple_9525)
        
        # Assigning a type to the variable 'major_minor' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 8), 'major_minor', list_9520)
        
        # Getting the type of 'major_minor' (line 933)
        major_minor_9529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 21), 'major_minor')
        # Testing the type of a for loop iterable (line 933)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 933, 8), major_minor_9529)
        # Getting the type of the for loop variable (line 933)
        for_loop_var_9530 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 933, 8), major_minor_9529)
        # Assigning a type to the variable 'group' (line 933)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 8), 'group', for_loop_var_9530)
        # SSA begins for a for statement (line 933)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to zip(...): (line 934)
        # Getting the type of 'group' (line 934)
        group_9532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 29), 'group', False)
        # Processing the call keyword arguments (line 934)
        kwargs_9533 = {}
        # Getting the type of 'zip' (line 934)
        zip_9531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 24), 'zip', False)
        # Calling zip(args, kwargs) (line 934)
        zip_call_result_9534 = invoke(stypy.reporting.localization.Localization(__file__, 934, 24), zip_9531, *[group_9532], **kwargs_9533)
        
        # Testing the type of a for loop iterable (line 934)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 934, 12), zip_call_result_9534)
        # Getting the type of the for loop variable (line 934)
        for_loop_var_9535 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 934, 12), zip_call_result_9534)
        # Assigning a type to the variable 'tick' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 12), 'tick', for_loop_var_9535)
        # SSA begins for a for statement (line 934)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        # Creating a generator
        # Getting the type of 'tick' (line 935)
        tick_9536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 22), 'tick')
        GeneratorType_9537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 935, 16), 'GeneratorType')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 935, 16), GeneratorType_9537, tick_9536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 935, 16), 'stypy_return_type', GeneratorType_9537)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'iter_ticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'iter_ticks' in the type store
        # Getting the type of 'stypy_return_type' (line 913)
        stypy_return_type_9538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9538)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'iter_ticks'
        return stypy_return_type_9538


    @norecursion
    def get_ticklabel_extents(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_ticklabel_extents'
        module_type_store = module_type_store.open_function_context('get_ticklabel_extents', 937, 4, False)
        # Assigning a type to the variable 'self' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_ticklabel_extents.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_ticklabel_extents.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_ticklabel_extents.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_ticklabel_extents.__dict__.__setitem__('stypy_function_name', 'Axis.get_ticklabel_extents')
        Axis.get_ticklabel_extents.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Axis.get_ticklabel_extents.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_ticklabel_extents.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_ticklabel_extents.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_ticklabel_extents.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_ticklabel_extents.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_ticklabel_extents.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_ticklabel_extents', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ticklabel_extents', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ticklabel_extents(...)' code ##################

        unicode_9539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, (-1)), 'unicode', u'\n        Get the extents of the tick labels on either side\n        of the axes.\n        ')
        
        # Assigning a Call to a Name (line 943):
        
        # Assigning a Call to a Name (line 943):
        
        # Call to _update_ticks(...): (line 943)
        # Processing the call arguments (line 943)
        # Getting the type of 'renderer' (line 943)
        renderer_9542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 43), 'renderer', False)
        # Processing the call keyword arguments (line 943)
        kwargs_9543 = {}
        # Getting the type of 'self' (line 943)
        self_9540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 24), 'self', False)
        # Obtaining the member '_update_ticks' of a type (line 943)
        _update_ticks_9541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 24), self_9540, '_update_ticks')
        # Calling _update_ticks(args, kwargs) (line 943)
        _update_ticks_call_result_9544 = invoke(stypy.reporting.localization.Localization(__file__, 943, 24), _update_ticks_9541, *[renderer_9542], **kwargs_9543)
        
        # Assigning a type to the variable 'ticks_to_draw' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'ticks_to_draw', _update_ticks_call_result_9544)
        
        # Assigning a Call to a Tuple (line 944):
        
        # Assigning a Call to a Name:
        
        # Call to _get_tick_bboxes(...): (line 944)
        # Processing the call arguments (line 944)
        # Getting the type of 'ticks_to_draw' (line 944)
        ticks_to_draw_9547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 64), 'ticks_to_draw', False)
        # Getting the type of 'renderer' (line 945)
        renderer_9548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 64), 'renderer', False)
        # Processing the call keyword arguments (line 944)
        kwargs_9549 = {}
        # Getting the type of 'self' (line 944)
        self_9545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 42), 'self', False)
        # Obtaining the member '_get_tick_bboxes' of a type (line 944)
        _get_tick_bboxes_9546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 42), self_9545, '_get_tick_bboxes')
        # Calling _get_tick_bboxes(args, kwargs) (line 944)
        _get_tick_bboxes_call_result_9550 = invoke(stypy.reporting.localization.Localization(__file__, 944, 42), _get_tick_bboxes_9546, *[ticks_to_draw_9547, renderer_9548], **kwargs_9549)
        
        # Assigning a type to the variable 'call_assignment_6976' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'call_assignment_6976', _get_tick_bboxes_call_result_9550)
        
        # Assigning a Call to a Name (line 944):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_9553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 944, 8), 'int')
        # Processing the call keyword arguments
        kwargs_9554 = {}
        # Getting the type of 'call_assignment_6976' (line 944)
        call_assignment_6976_9551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'call_assignment_6976', False)
        # Obtaining the member '__getitem__' of a type (line 944)
        getitem___9552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 8), call_assignment_6976_9551, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_9555 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___9552, *[int_9553], **kwargs_9554)
        
        # Assigning a type to the variable 'call_assignment_6977' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'call_assignment_6977', getitem___call_result_9555)
        
        # Assigning a Name to a Name (line 944):
        # Getting the type of 'call_assignment_6977' (line 944)
        call_assignment_6977_9556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'call_assignment_6977')
        # Assigning a type to the variable 'ticklabelBoxes' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'ticklabelBoxes', call_assignment_6977_9556)
        
        # Assigning a Call to a Name (line 944):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_9559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 944, 8), 'int')
        # Processing the call keyword arguments
        kwargs_9560 = {}
        # Getting the type of 'call_assignment_6976' (line 944)
        call_assignment_6976_9557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'call_assignment_6976', False)
        # Obtaining the member '__getitem__' of a type (line 944)
        getitem___9558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 8), call_assignment_6976_9557, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_9561 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___9558, *[int_9559], **kwargs_9560)
        
        # Assigning a type to the variable 'call_assignment_6978' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'call_assignment_6978', getitem___call_result_9561)
        
        # Assigning a Name to a Name (line 944):
        # Getting the type of 'call_assignment_6978' (line 944)
        call_assignment_6978_9562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'call_assignment_6978')
        # Assigning a type to the variable 'ticklabelBoxes2' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 24), 'ticklabelBoxes2', call_assignment_6978_9562)
        
        
        # Call to len(...): (line 947)
        # Processing the call arguments (line 947)
        # Getting the type of 'ticklabelBoxes' (line 947)
        ticklabelBoxes_9564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 15), 'ticklabelBoxes', False)
        # Processing the call keyword arguments (line 947)
        kwargs_9565 = {}
        # Getting the type of 'len' (line 947)
        len_9563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 11), 'len', False)
        # Calling len(args, kwargs) (line 947)
        len_call_result_9566 = invoke(stypy.reporting.localization.Localization(__file__, 947, 11), len_9563, *[ticklabelBoxes_9564], **kwargs_9565)
        
        # Testing the type of an if condition (line 947)
        if_condition_9567 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 947, 8), len_call_result_9566)
        # Assigning a type to the variable 'if_condition_9567' (line 947)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 947, 8), 'if_condition_9567', if_condition_9567)
        # SSA begins for if statement (line 947)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 948):
        
        # Assigning a Call to a Name (line 948):
        
        # Call to union(...): (line 948)
        # Processing the call arguments (line 948)
        # Getting the type of 'ticklabelBoxes' (line 948)
        ticklabelBoxes_9571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 42), 'ticklabelBoxes', False)
        # Processing the call keyword arguments (line 948)
        kwargs_9572 = {}
        # Getting the type of 'mtransforms' (line 948)
        mtransforms_9568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 19), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 948)
        Bbox_9569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 19), mtransforms_9568, 'Bbox')
        # Obtaining the member 'union' of a type (line 948)
        union_9570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 19), Bbox_9569, 'union')
        # Calling union(args, kwargs) (line 948)
        union_call_result_9573 = invoke(stypy.reporting.localization.Localization(__file__, 948, 19), union_9570, *[ticklabelBoxes_9571], **kwargs_9572)
        
        # Assigning a type to the variable 'bbox' (line 948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 12), 'bbox', union_call_result_9573)
        # SSA branch for the else part of an if statement (line 947)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 950):
        
        # Assigning a Call to a Name (line 950):
        
        # Call to from_extents(...): (line 950)
        # Processing the call arguments (line 950)
        int_9577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 49), 'int')
        int_9578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 52), 'int')
        int_9579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 55), 'int')
        int_9580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 950, 58), 'int')
        # Processing the call keyword arguments (line 950)
        kwargs_9581 = {}
        # Getting the type of 'mtransforms' (line 950)
        mtransforms_9574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 19), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 950)
        Bbox_9575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 19), mtransforms_9574, 'Bbox')
        # Obtaining the member 'from_extents' of a type (line 950)
        from_extents_9576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 19), Bbox_9575, 'from_extents')
        # Calling from_extents(args, kwargs) (line 950)
        from_extents_call_result_9582 = invoke(stypy.reporting.localization.Localization(__file__, 950, 19), from_extents_9576, *[int_9577, int_9578, int_9579, int_9580], **kwargs_9581)
        
        # Assigning a type to the variable 'bbox' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 12), 'bbox', from_extents_call_result_9582)
        # SSA join for if statement (line 947)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to len(...): (line 951)
        # Processing the call arguments (line 951)
        # Getting the type of 'ticklabelBoxes2' (line 951)
        ticklabelBoxes2_9584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 15), 'ticklabelBoxes2', False)
        # Processing the call keyword arguments (line 951)
        kwargs_9585 = {}
        # Getting the type of 'len' (line 951)
        len_9583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 11), 'len', False)
        # Calling len(args, kwargs) (line 951)
        len_call_result_9586 = invoke(stypy.reporting.localization.Localization(__file__, 951, 11), len_9583, *[ticklabelBoxes2_9584], **kwargs_9585)
        
        # Testing the type of an if condition (line 951)
        if_condition_9587 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 951, 8), len_call_result_9586)
        # Assigning a type to the variable 'if_condition_9587' (line 951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 8), 'if_condition_9587', if_condition_9587)
        # SSA begins for if statement (line 951)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 952):
        
        # Assigning a Call to a Name (line 952):
        
        # Call to union(...): (line 952)
        # Processing the call arguments (line 952)
        # Getting the type of 'ticklabelBoxes2' (line 952)
        ticklabelBoxes2_9591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 43), 'ticklabelBoxes2', False)
        # Processing the call keyword arguments (line 952)
        kwargs_9592 = {}
        # Getting the type of 'mtransforms' (line 952)
        mtransforms_9588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 20), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 952)
        Bbox_9589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 20), mtransforms_9588, 'Bbox')
        # Obtaining the member 'union' of a type (line 952)
        union_9590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 20), Bbox_9589, 'union')
        # Calling union(args, kwargs) (line 952)
        union_call_result_9593 = invoke(stypy.reporting.localization.Localization(__file__, 952, 20), union_9590, *[ticklabelBoxes2_9591], **kwargs_9592)
        
        # Assigning a type to the variable 'bbox2' (line 952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 952, 12), 'bbox2', union_call_result_9593)
        # SSA branch for the else part of an if statement (line 951)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 954):
        
        # Assigning a Call to a Name (line 954):
        
        # Call to from_extents(...): (line 954)
        # Processing the call arguments (line 954)
        int_9597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 50), 'int')
        int_9598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 53), 'int')
        int_9599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 56), 'int')
        int_9600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 59), 'int')
        # Processing the call keyword arguments (line 954)
        kwargs_9601 = {}
        # Getting the type of 'mtransforms' (line 954)
        mtransforms_9594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 20), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 954)
        Bbox_9595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 20), mtransforms_9594, 'Bbox')
        # Obtaining the member 'from_extents' of a type (line 954)
        from_extents_9596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 20), Bbox_9595, 'from_extents')
        # Calling from_extents(args, kwargs) (line 954)
        from_extents_call_result_9602 = invoke(stypy.reporting.localization.Localization(__file__, 954, 20), from_extents_9596, *[int_9597, int_9598, int_9599, int_9600], **kwargs_9601)
        
        # Assigning a type to the variable 'bbox2' (line 954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 12), 'bbox2', from_extents_call_result_9602)
        # SSA join for if statement (line 951)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 955)
        tuple_9603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 955, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 955)
        # Adding element type (line 955)
        # Getting the type of 'bbox' (line 955)
        bbox_9604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 15), 'bbox')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 955, 15), tuple_9603, bbox_9604)
        # Adding element type (line 955)
        # Getting the type of 'bbox2' (line 955)
        bbox2_9605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 21), 'bbox2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 955, 15), tuple_9603, bbox2_9605)
        
        # Assigning a type to the variable 'stypy_return_type' (line 955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 955, 8), 'stypy_return_type', tuple_9603)
        
        # ################# End of 'get_ticklabel_extents(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ticklabel_extents' in the type store
        # Getting the type of 'stypy_return_type' (line 937)
        stypy_return_type_9606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9606)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ticklabel_extents'
        return stypy_return_type_9606


    @norecursion
    def set_smart_bounds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_smart_bounds'
        module_type_store = module_type_store.open_function_context('set_smart_bounds', 957, 4, False)
        # Assigning a type to the variable 'self' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_smart_bounds.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_smart_bounds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_smart_bounds.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_smart_bounds.__dict__.__setitem__('stypy_function_name', 'Axis.set_smart_bounds')
        Axis.set_smart_bounds.__dict__.__setitem__('stypy_param_names_list', ['value'])
        Axis.set_smart_bounds.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_smart_bounds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_smart_bounds.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_smart_bounds.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_smart_bounds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_smart_bounds.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_smart_bounds', ['value'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_smart_bounds', localization, ['value'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_smart_bounds(...)' code ##################

        unicode_9607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 8), 'unicode', u'set the axis to have smart bounds')
        
        # Assigning a Name to a Attribute (line 959):
        
        # Assigning a Name to a Attribute (line 959):
        # Getting the type of 'value' (line 959)
        value_9608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 29), 'value')
        # Getting the type of 'self' (line 959)
        self_9609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 8), 'self')
        # Setting the type of the member '_smart_bounds' of a type (line 959)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 8), self_9609, '_smart_bounds', value_9608)
        
        # Assigning a Name to a Attribute (line 960):
        
        # Assigning a Name to a Attribute (line 960):
        # Getting the type of 'True' (line 960)
        True_9610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 21), 'True')
        # Getting the type of 'self' (line 960)
        self_9611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 960)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 8), self_9611, 'stale', True_9610)
        
        # ################# End of 'set_smart_bounds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_smart_bounds' in the type store
        # Getting the type of 'stypy_return_type' (line 957)
        stypy_return_type_9612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9612)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_smart_bounds'
        return stypy_return_type_9612


    @norecursion
    def get_smart_bounds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_smart_bounds'
        module_type_store = module_type_store.open_function_context('get_smart_bounds', 962, 4, False)
        # Assigning a type to the variable 'self' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_smart_bounds.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_smart_bounds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_smart_bounds.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_smart_bounds.__dict__.__setitem__('stypy_function_name', 'Axis.get_smart_bounds')
        Axis.get_smart_bounds.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_smart_bounds.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_smart_bounds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_smart_bounds.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_smart_bounds.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_smart_bounds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_smart_bounds.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_smart_bounds', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_smart_bounds', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_smart_bounds(...)' code ##################

        unicode_9613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 963, 8), 'unicode', u'get whether the axis has smart bounds')
        # Getting the type of 'self' (line 964)
        self_9614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 15), 'self')
        # Obtaining the member '_smart_bounds' of a type (line 964)
        _smart_bounds_9615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 964, 15), self_9614, '_smart_bounds')
        # Assigning a type to the variable 'stypy_return_type' (line 964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 8), 'stypy_return_type', _smart_bounds_9615)
        
        # ################# End of 'get_smart_bounds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_smart_bounds' in the type store
        # Getting the type of 'stypy_return_type' (line 962)
        stypy_return_type_9616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9616)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_smart_bounds'
        return stypy_return_type_9616


    @norecursion
    def _update_ticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_ticks'
        module_type_store = module_type_store.open_function_context('_update_ticks', 966, 4, False)
        # Assigning a type to the variable 'self' (line 967)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 967, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis._update_ticks.__dict__.__setitem__('stypy_localization', localization)
        Axis._update_ticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis._update_ticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis._update_ticks.__dict__.__setitem__('stypy_function_name', 'Axis._update_ticks')
        Axis._update_ticks.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Axis._update_ticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis._update_ticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis._update_ticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis._update_ticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis._update_ticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis._update_ticks.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis._update_ticks', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_ticks', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_ticks(...)' code ##################

        unicode_9617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 971, (-1)), 'unicode', u'\n        Update ticks (position and labels) using the current data\n        interval of the axes. Returns a list of ticks that will be\n        drawn.\n        ')
        
        # Assigning a Call to a Name (line 973):
        
        # Assigning a Call to a Name (line 973):
        
        # Call to get_view_interval(...): (line 973)
        # Processing the call keyword arguments (line 973)
        kwargs_9620 = {}
        # Getting the type of 'self' (line 973)
        self_9618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 19), 'self', False)
        # Obtaining the member 'get_view_interval' of a type (line 973)
        get_view_interval_9619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 19), self_9618, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 973)
        get_view_interval_call_result_9621 = invoke(stypy.reporting.localization.Localization(__file__, 973, 19), get_view_interval_9619, *[], **kwargs_9620)
        
        # Assigning a type to the variable 'interval' (line 973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 973, 8), 'interval', get_view_interval_call_result_9621)
        
        # Assigning a Call to a Name (line 974):
        
        # Assigning a Call to a Name (line 974):
        
        # Call to list(...): (line 974)
        # Processing the call arguments (line 974)
        
        # Call to iter_ticks(...): (line 974)
        # Processing the call keyword arguments (line 974)
        kwargs_9625 = {}
        # Getting the type of 'self' (line 974)
        self_9623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 25), 'self', False)
        # Obtaining the member 'iter_ticks' of a type (line 974)
        iter_ticks_9624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 25), self_9623, 'iter_ticks')
        # Calling iter_ticks(args, kwargs) (line 974)
        iter_ticks_call_result_9626 = invoke(stypy.reporting.localization.Localization(__file__, 974, 25), iter_ticks_9624, *[], **kwargs_9625)
        
        # Processing the call keyword arguments (line 974)
        kwargs_9627 = {}
        # Getting the type of 'list' (line 974)
        list_9622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 20), 'list', False)
        # Calling list(args, kwargs) (line 974)
        list_call_result_9628 = invoke(stypy.reporting.localization.Localization(__file__, 974, 20), list_9622, *[iter_ticks_call_result_9626], **kwargs_9627)
        
        # Assigning a type to the variable 'tick_tups' (line 974)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 974, 8), 'tick_tups', list_call_result_9628)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 975)
        self_9629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 11), 'self')
        # Obtaining the member '_smart_bounds' of a type (line 975)
        _smart_bounds_9630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 11), self_9629, '_smart_bounds')
        # Getting the type of 'tick_tups' (line 975)
        tick_tups_9631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 34), 'tick_tups')
        # Applying the binary operator 'and' (line 975)
        result_and_keyword_9632 = python_operator(stypy.reporting.localization.Localization(__file__, 975, 11), 'and', _smart_bounds_9630, tick_tups_9631)
        
        # Testing the type of an if condition (line 975)
        if_condition_9633 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 975, 8), result_and_keyword_9632)
        # Assigning a type to the variable 'if_condition_9633' (line 975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 975, 8), 'if_condition_9633', if_condition_9633)
        # SSA begins for if statement (line 975)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 977):
        
        # Assigning a Call to a Name:
        
        # Call to sorted(...): (line 977)
        # Processing the call arguments (line 977)
        # Getting the type of 'interval' (line 977)
        interval_9635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 41), 'interval', False)
        # Processing the call keyword arguments (line 977)
        kwargs_9636 = {}
        # Getting the type of 'sorted' (line 977)
        sorted_9634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 34), 'sorted', False)
        # Calling sorted(args, kwargs) (line 977)
        sorted_call_result_9637 = invoke(stypy.reporting.localization.Localization(__file__, 977, 34), sorted_9634, *[interval_9635], **kwargs_9636)
        
        # Assigning a type to the variable 'call_assignment_6979' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 12), 'call_assignment_6979', sorted_call_result_9637)
        
        # Assigning a Call to a Name (line 977):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_9640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 12), 'int')
        # Processing the call keyword arguments
        kwargs_9641 = {}
        # Getting the type of 'call_assignment_6979' (line 977)
        call_assignment_6979_9638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 12), 'call_assignment_6979', False)
        # Obtaining the member '__getitem__' of a type (line 977)
        getitem___9639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 12), call_assignment_6979_9638, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_9642 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___9639, *[int_9640], **kwargs_9641)
        
        # Assigning a type to the variable 'call_assignment_6980' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 12), 'call_assignment_6980', getitem___call_result_9642)
        
        # Assigning a Name to a Name (line 977):
        # Getting the type of 'call_assignment_6980' (line 977)
        call_assignment_6980_9643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 12), 'call_assignment_6980')
        # Assigning a type to the variable 'view_low' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 12), 'view_low', call_assignment_6980_9643)
        
        # Assigning a Call to a Name (line 977):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_9646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 12), 'int')
        # Processing the call keyword arguments
        kwargs_9647 = {}
        # Getting the type of 'call_assignment_6979' (line 977)
        call_assignment_6979_9644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 12), 'call_assignment_6979', False)
        # Obtaining the member '__getitem__' of a type (line 977)
        getitem___9645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 12), call_assignment_6979_9644, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_9648 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___9645, *[int_9646], **kwargs_9647)
        
        # Assigning a type to the variable 'call_assignment_6981' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 12), 'call_assignment_6981', getitem___call_result_9648)
        
        # Assigning a Name to a Name (line 977):
        # Getting the type of 'call_assignment_6981' (line 977)
        call_assignment_6981_9649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 12), 'call_assignment_6981')
        # Assigning a type to the variable 'view_high' (line 977)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 977, 22), 'view_high', call_assignment_6981_9649)
        
        # Assigning a Call to a Tuple (line 978):
        
        # Assigning a Call to a Name:
        
        # Call to sorted(...): (line 978)
        # Processing the call arguments (line 978)
        
        # Call to get_data_interval(...): (line 978)
        # Processing the call keyword arguments (line 978)
        kwargs_9653 = {}
        # Getting the type of 'self' (line 978)
        self_9651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 41), 'self', False)
        # Obtaining the member 'get_data_interval' of a type (line 978)
        get_data_interval_9652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 41), self_9651, 'get_data_interval')
        # Calling get_data_interval(args, kwargs) (line 978)
        get_data_interval_call_result_9654 = invoke(stypy.reporting.localization.Localization(__file__, 978, 41), get_data_interval_9652, *[], **kwargs_9653)
        
        # Processing the call keyword arguments (line 978)
        kwargs_9655 = {}
        # Getting the type of 'sorted' (line 978)
        sorted_9650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 34), 'sorted', False)
        # Calling sorted(args, kwargs) (line 978)
        sorted_call_result_9656 = invoke(stypy.reporting.localization.Localization(__file__, 978, 34), sorted_9650, *[get_data_interval_call_result_9654], **kwargs_9655)
        
        # Assigning a type to the variable 'call_assignment_6982' (line 978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 12), 'call_assignment_6982', sorted_call_result_9656)
        
        # Assigning a Call to a Name (line 978):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_9659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 978, 12), 'int')
        # Processing the call keyword arguments
        kwargs_9660 = {}
        # Getting the type of 'call_assignment_6982' (line 978)
        call_assignment_6982_9657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 12), 'call_assignment_6982', False)
        # Obtaining the member '__getitem__' of a type (line 978)
        getitem___9658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 12), call_assignment_6982_9657, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_9661 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___9658, *[int_9659], **kwargs_9660)
        
        # Assigning a type to the variable 'call_assignment_6983' (line 978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 12), 'call_assignment_6983', getitem___call_result_9661)
        
        # Assigning a Name to a Name (line 978):
        # Getting the type of 'call_assignment_6983' (line 978)
        call_assignment_6983_9662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 12), 'call_assignment_6983')
        # Assigning a type to the variable 'data_low' (line 978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 12), 'data_low', call_assignment_6983_9662)
        
        # Assigning a Call to a Name (line 978):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_9665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 978, 12), 'int')
        # Processing the call keyword arguments
        kwargs_9666 = {}
        # Getting the type of 'call_assignment_6982' (line 978)
        call_assignment_6982_9663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 12), 'call_assignment_6982', False)
        # Obtaining the member '__getitem__' of a type (line 978)
        getitem___9664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 12), call_assignment_6982_9663, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_9667 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___9664, *[int_9665], **kwargs_9666)
        
        # Assigning a type to the variable 'call_assignment_6984' (line 978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 12), 'call_assignment_6984', getitem___call_result_9667)
        
        # Assigning a Name to a Name (line 978):
        # Getting the type of 'call_assignment_6984' (line 978)
        call_assignment_6984_9668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 12), 'call_assignment_6984')
        # Assigning a type to the variable 'data_high' (line 978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 978, 22), 'data_high', call_assignment_6984_9668)
        
        # Assigning a Call to a Name (line 979):
        
        # Assigning a Call to a Name (line 979):
        
        # Call to sort(...): (line 979)
        # Processing the call arguments (line 979)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'tick_tups' (line 979)
        tick_tups_9675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 44), 'tick_tups', False)
        comprehension_9676 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 979, 28), tick_tups_9675)
        # Assigning a type to the variable 'ti' (line 979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 28), 'ti', comprehension_9676)
        
        # Obtaining the type of the subscript
        int_9671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 979, 31), 'int')
        # Getting the type of 'ti' (line 979)
        ti_9672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 28), 'ti', False)
        # Obtaining the member '__getitem__' of a type (line 979)
        getitem___9673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 979, 28), ti_9672, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 979)
        subscript_call_result_9674 = invoke(stypy.reporting.localization.Localization(__file__, 979, 28), getitem___9673, int_9671)
        
        list_9677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 979, 28), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 979, 28), list_9677, subscript_call_result_9674)
        # Processing the call keyword arguments (line 979)
        kwargs_9678 = {}
        # Getting the type of 'np' (line 979)
        np_9669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 19), 'np', False)
        # Obtaining the member 'sort' of a type (line 979)
        sort_9670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 979, 19), np_9669, 'sort')
        # Calling sort(args, kwargs) (line 979)
        sort_call_result_9679 = invoke(stypy.reporting.localization.Localization(__file__, 979, 19), sort_9670, *[list_9677], **kwargs_9678)
        
        # Assigning a type to the variable 'locs' (line 979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 12), 'locs', sort_call_result_9679)
        
        
        # Getting the type of 'data_low' (line 980)
        data_low_9680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 15), 'data_low')
        # Getting the type of 'view_low' (line 980)
        view_low_9681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 27), 'view_low')
        # Applying the binary operator '<=' (line 980)
        result_le_9682 = python_operator(stypy.reporting.localization.Localization(__file__, 980, 15), '<=', data_low_9680, view_low_9681)
        
        # Testing the type of an if condition (line 980)
        if_condition_9683 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 980, 12), result_le_9682)
        # Assigning a type to the variable 'if_condition_9683' (line 980)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 980, 12), 'if_condition_9683', if_condition_9683)
        # SSA begins for if statement (line 980)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 982):
        
        # Assigning a Name to a Name (line 982):
        # Getting the type of 'view_low' (line 982)
        view_low_9684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 23), 'view_low')
        # Assigning a type to the variable 'ilow' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 16), 'ilow', view_low_9684)
        # SSA branch for the else part of an if statement (line 980)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Name (line 985):
        
        # Assigning a Subscript to a Name (line 985):
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'locs' (line 985)
        locs_9685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 33), 'locs')
        # Getting the type of 'data_low' (line 985)
        data_low_9686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 41), 'data_low')
        # Applying the binary operator '<=' (line 985)
        result_le_9687 = python_operator(stypy.reporting.localization.Localization(__file__, 985, 33), '<=', locs_9685, data_low_9686)
        
        # Getting the type of 'locs' (line 985)
        locs_9688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 28), 'locs')
        # Obtaining the member '__getitem__' of a type (line 985)
        getitem___9689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 985, 28), locs_9688, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 985)
        subscript_call_result_9690 = invoke(stypy.reporting.localization.Localization(__file__, 985, 28), getitem___9689, result_le_9687)
        
        # Assigning a type to the variable 'good_locs' (line 985)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 985, 16), 'good_locs', subscript_call_result_9690)
        
        
        # Call to len(...): (line 986)
        # Processing the call arguments (line 986)
        # Getting the type of 'good_locs' (line 986)
        good_locs_9692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 23), 'good_locs', False)
        # Processing the call keyword arguments (line 986)
        kwargs_9693 = {}
        # Getting the type of 'len' (line 986)
        len_9691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 19), 'len', False)
        # Calling len(args, kwargs) (line 986)
        len_call_result_9694 = invoke(stypy.reporting.localization.Localization(__file__, 986, 19), len_9691, *[good_locs_9692], **kwargs_9693)
        
        # Testing the type of an if condition (line 986)
        if_condition_9695 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 986, 16), len_call_result_9694)
        # Assigning a type to the variable 'if_condition_9695' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 16), 'if_condition_9695', if_condition_9695)
        # SSA begins for if statement (line 986)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 988):
        
        # Assigning a Subscript to a Name (line 988):
        
        # Obtaining the type of the subscript
        int_9696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 988, 37), 'int')
        # Getting the type of 'good_locs' (line 988)
        good_locs_9697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 27), 'good_locs')
        # Obtaining the member '__getitem__' of a type (line 988)
        getitem___9698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 27), good_locs_9697, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 988)
        subscript_call_result_9699 = invoke(stypy.reporting.localization.Localization(__file__, 988, 27), getitem___9698, int_9696)
        
        # Assigning a type to the variable 'ilow' (line 988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 20), 'ilow', subscript_call_result_9699)
        # SSA branch for the else part of an if statement (line 986)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Name (line 991):
        
        # Assigning a Subscript to a Name (line 991):
        
        # Obtaining the type of the subscript
        int_9700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 991, 32), 'int')
        # Getting the type of 'locs' (line 991)
        locs_9701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 27), 'locs')
        # Obtaining the member '__getitem__' of a type (line 991)
        getitem___9702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 27), locs_9701, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 991)
        subscript_call_result_9703 = invoke(stypy.reporting.localization.Localization(__file__, 991, 27), getitem___9702, int_9700)
        
        # Assigning a type to the variable 'ilow' (line 991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 20), 'ilow', subscript_call_result_9703)
        # SSA join for if statement (line 986)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 980)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'data_high' (line 992)
        data_high_9704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 15), 'data_high')
        # Getting the type of 'view_high' (line 992)
        view_high_9705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 28), 'view_high')
        # Applying the binary operator '>=' (line 992)
        result_ge_9706 = python_operator(stypy.reporting.localization.Localization(__file__, 992, 15), '>=', data_high_9704, view_high_9705)
        
        # Testing the type of an if condition (line 992)
        if_condition_9707 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 992, 12), result_ge_9706)
        # Assigning a type to the variable 'if_condition_9707' (line 992)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 992, 12), 'if_condition_9707', if_condition_9707)
        # SSA begins for if statement (line 992)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 994):
        
        # Assigning a Name to a Name (line 994):
        # Getting the type of 'view_high' (line 994)
        view_high_9708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 24), 'view_high')
        # Assigning a type to the variable 'ihigh' (line 994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 994, 16), 'ihigh', view_high_9708)
        # SSA branch for the else part of an if statement (line 992)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Name (line 997):
        
        # Assigning a Subscript to a Name (line 997):
        
        # Obtaining the type of the subscript
        
        # Getting the type of 'locs' (line 997)
        locs_9709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 33), 'locs')
        # Getting the type of 'data_high' (line 997)
        data_high_9710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 41), 'data_high')
        # Applying the binary operator '>=' (line 997)
        result_ge_9711 = python_operator(stypy.reporting.localization.Localization(__file__, 997, 33), '>=', locs_9709, data_high_9710)
        
        # Getting the type of 'locs' (line 997)
        locs_9712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 997, 28), 'locs')
        # Obtaining the member '__getitem__' of a type (line 997)
        getitem___9713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 997, 28), locs_9712, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 997)
        subscript_call_result_9714 = invoke(stypy.reporting.localization.Localization(__file__, 997, 28), getitem___9713, result_ge_9711)
        
        # Assigning a type to the variable 'good_locs' (line 997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 997, 16), 'good_locs', subscript_call_result_9714)
        
        
        # Call to len(...): (line 998)
        # Processing the call arguments (line 998)
        # Getting the type of 'good_locs' (line 998)
        good_locs_9716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 23), 'good_locs', False)
        # Processing the call keyword arguments (line 998)
        kwargs_9717 = {}
        # Getting the type of 'len' (line 998)
        len_9715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 19), 'len', False)
        # Calling len(args, kwargs) (line 998)
        len_call_result_9718 = invoke(stypy.reporting.localization.Localization(__file__, 998, 19), len_9715, *[good_locs_9716], **kwargs_9717)
        
        # Testing the type of an if condition (line 998)
        if_condition_9719 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 998, 16), len_call_result_9718)
        # Assigning a type to the variable 'if_condition_9719' (line 998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 16), 'if_condition_9719', if_condition_9719)
        # SSA begins for if statement (line 998)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1000):
        
        # Assigning a Subscript to a Name (line 1000):
        
        # Obtaining the type of the subscript
        int_9720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, 38), 'int')
        # Getting the type of 'good_locs' (line 1000)
        good_locs_9721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 28), 'good_locs')
        # Obtaining the member '__getitem__' of a type (line 1000)
        getitem___9722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 28), good_locs_9721, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1000)
        subscript_call_result_9723 = invoke(stypy.reporting.localization.Localization(__file__, 1000, 28), getitem___9722, int_9720)
        
        # Assigning a type to the variable 'ihigh' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 20), 'ihigh', subscript_call_result_9723)
        # SSA branch for the else part of an if statement (line 998)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Name (line 1003):
        
        # Assigning a Subscript to a Name (line 1003):
        
        # Obtaining the type of the subscript
        int_9724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1003, 33), 'int')
        # Getting the type of 'locs' (line 1003)
        locs_9725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 28), 'locs')
        # Obtaining the member '__getitem__' of a type (line 1003)
        getitem___9726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 28), locs_9725, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1003)
        subscript_call_result_9727 = invoke(stypy.reporting.localization.Localization(__file__, 1003, 28), getitem___9726, int_9724)
        
        # Assigning a type to the variable 'ihigh' (line 1003)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1003, 20), 'ihigh', subscript_call_result_9727)
        # SSA join for if statement (line 998)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 992)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a ListComp to a Name (line 1004):
        
        # Assigning a ListComp to a Name (line 1004):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'tick_tups' (line 1004)
        tick_tups_9738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 38), 'tick_tups')
        comprehension_9739 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1004, 25), tick_tups_9738)
        # Assigning a type to the variable 'ti' (line 1004)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1004, 25), 'ti', comprehension_9739)
        
        # Getting the type of 'ilow' (line 1004)
        ilow_9729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 51), 'ilow')
        
        # Obtaining the type of the subscript
        int_9730 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1004, 62), 'int')
        # Getting the type of 'ti' (line 1004)
        ti_9731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 59), 'ti')
        # Obtaining the member '__getitem__' of a type (line 1004)
        getitem___9732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 59), ti_9731, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1004)
        subscript_call_result_9733 = invoke(stypy.reporting.localization.Localization(__file__, 1004, 59), getitem___9732, int_9730)
        
        # Applying the binary operator '<=' (line 1004)
        result_le_9734 = python_operator(stypy.reporting.localization.Localization(__file__, 1004, 51), '<=', ilow_9729, subscript_call_result_9733)
        # Getting the type of 'ihigh' (line 1004)
        ihigh_9735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 68), 'ihigh')
        # Applying the binary operator '<=' (line 1004)
        result_le_9736 = python_operator(stypy.reporting.localization.Localization(__file__, 1004, 51), '<=', subscript_call_result_9733, ihigh_9735)
        # Applying the binary operator '&' (line 1004)
        result_and__9737 = python_operator(stypy.reporting.localization.Localization(__file__, 1004, 51), '&', result_le_9734, result_le_9736)
        
        # Getting the type of 'ti' (line 1004)
        ti_9728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 25), 'ti')
        list_9740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1004, 25), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1004, 25), list_9740, ti_9728)
        # Assigning a type to the variable 'tick_tups' (line 1004)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1004, 12), 'tick_tups', list_9740)
        # SSA join for if statement (line 975)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_9741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1010, 20), 'int')
        # Getting the type of 'interval' (line 1010)
        interval_9742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 11), 'interval')
        # Obtaining the member '__getitem__' of a type (line 1010)
        getitem___9743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 11), interval_9742, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1010)
        subscript_call_result_9744 = invoke(stypy.reporting.localization.Localization(__file__, 1010, 11), getitem___9743, int_9741)
        
        
        # Obtaining the type of the subscript
        int_9745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1010, 35), 'int')
        # Getting the type of 'interval' (line 1010)
        interval_9746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 26), 'interval')
        # Obtaining the member '__getitem__' of a type (line 1010)
        getitem___9747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 26), interval_9746, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1010)
        subscript_call_result_9748 = invoke(stypy.reporting.localization.Localization(__file__, 1010, 26), getitem___9747, int_9745)
        
        # Applying the binary operator '<=' (line 1010)
        result_le_9749 = python_operator(stypy.reporting.localization.Localization(__file__, 1010, 11), '<=', subscript_call_result_9744, subscript_call_result_9748)
        
        # Testing the type of an if condition (line 1010)
        if_condition_9750 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1010, 8), result_le_9749)
        # Assigning a type to the variable 'if_condition_9750' (line 1010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 8), 'if_condition_9750', if_condition_9750)
        # SSA begins for if statement (line 1010)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1011):
        
        # Assigning a Name to a Name (line 1011):
        # Getting the type of 'interval' (line 1011)
        interval_9751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1011, 32), 'interval')
        # Assigning a type to the variable 'interval_expanded' (line 1011)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1011, 12), 'interval_expanded', interval_9751)
        # SSA branch for the else part of an if statement (line 1010)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Name (line 1013):
        
        # Assigning a Tuple to a Name (line 1013):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1013)
        tuple_9752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1013)
        # Adding element type (line 1013)
        
        # Obtaining the type of the subscript
        int_9753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 41), 'int')
        # Getting the type of 'interval' (line 1013)
        interval_9754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 32), 'interval')
        # Obtaining the member '__getitem__' of a type (line 1013)
        getitem___9755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 32), interval_9754, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1013)
        subscript_call_result_9756 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 32), getitem___9755, int_9753)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1013, 32), tuple_9752, subscript_call_result_9756)
        # Adding element type (line 1013)
        
        # Obtaining the type of the subscript
        int_9757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1013, 54), 'int')
        # Getting the type of 'interval' (line 1013)
        interval_9758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 45), 'interval')
        # Obtaining the member '__getitem__' of a type (line 1013)
        getitem___9759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 45), interval_9758, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1013)
        subscript_call_result_9760 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 45), getitem___9759, int_9757)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1013, 32), tuple_9752, subscript_call_result_9760)
        
        # Assigning a type to the variable 'interval_expanded' (line 1013)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1013, 12), 'interval_expanded', tuple_9752)
        # SSA join for if statement (line 1010)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1015)
        unicode_9761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1015, 25), 'unicode', u'_get_pixel_distance_along_axis')
        # Getting the type of 'self' (line 1015)
        self_9762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 19), 'self')
        
        (may_be_9763, more_types_in_union_9764) = may_provide_member(unicode_9761, self_9762)

        if may_be_9763:

            if more_types_in_union_9764:
                # Runtime conditional SSA (line 1015)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 1015)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1015, 8), 'self', remove_not_member_provider_from_union(self_9762, u'_get_pixel_distance_along_axis'))
            
            # Call to errstate(...): (line 1027)
            # Processing the call keyword arguments (line 1027)
            unicode_9767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 37), 'unicode', u'ignore')
            keyword_9768 = unicode_9767
            kwargs_9769 = {'invalid': keyword_9768}
            # Getting the type of 'np' (line 1027)
            np_9765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 17), 'np', False)
            # Obtaining the member 'errstate' of a type (line 1027)
            errstate_9766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 17), np_9765, 'errstate')
            # Calling errstate(args, kwargs) (line 1027)
            errstate_call_result_9770 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 17), errstate_9766, *[], **kwargs_9769)
            
            with_9771 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1027, 17), errstate_call_result_9770, 'with parameter', '__enter__', '__exit__')

            if with_9771:
                # Calling the __enter__ method to initiate a with section
                # Obtaining the member '__enter__' of a type (line 1027)
                enter___9772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 17), errstate_call_result_9770, '__enter__')
                with_enter_9773 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 17), enter___9772)
                
                
                # SSA begins for try-except statement (line 1028)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
                
                # Assigning a Call to a Name (line 1029):
                
                # Assigning a Call to a Name (line 1029):
                
                # Call to _get_pixel_distance_along_axis(...): (line 1029)
                # Processing the call arguments (line 1029)
                
                # Obtaining the type of the subscript
                int_9776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 42), 'int')
                # Getting the type of 'interval_expanded' (line 1030)
                interval_expanded_9777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 24), 'interval_expanded', False)
                # Obtaining the member '__getitem__' of a type (line 1030)
                getitem___9778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 24), interval_expanded_9777, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1030)
                subscript_call_result_9779 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 24), getitem___9778, int_9776)
                
                float_9780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 46), 'float')
                # Processing the call keyword arguments (line 1029)
                kwargs_9781 = {}
                # Getting the type of 'self' (line 1029)
                self_9774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 26), 'self', False)
                # Obtaining the member '_get_pixel_distance_along_axis' of a type (line 1029)
                _get_pixel_distance_along_axis_9775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1029, 26), self_9774, '_get_pixel_distance_along_axis')
                # Calling _get_pixel_distance_along_axis(args, kwargs) (line 1029)
                _get_pixel_distance_along_axis_call_result_9782 = invoke(stypy.reporting.localization.Localization(__file__, 1029, 26), _get_pixel_distance_along_axis_9775, *[subscript_call_result_9779, float_9780], **kwargs_9781)
                
                # Assigning a type to the variable 'ds1' (line 1029)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1029, 20), 'ds1', _get_pixel_distance_along_axis_call_result_9782)
                # SSA branch for the except part of a try statement (line 1028)
                # SSA branch for the except '<any exception>' branch of a try statement (line 1028)
                module_type_store.open_ssa_branch('except')
                
                # Call to warn(...): (line 1032)
                # Processing the call arguments (line 1032)
                unicode_9785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1032, 34), 'unicode', u'Unable to find pixel distance along axis for interval padding of ticks; assuming no interval padding needed.')
                # Processing the call keyword arguments (line 1032)
                kwargs_9786 = {}
                # Getting the type of 'warnings' (line 1032)
                warnings_9783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 20), 'warnings', False)
                # Obtaining the member 'warn' of a type (line 1032)
                warn_9784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 20), warnings_9783, 'warn')
                # Calling warn(args, kwargs) (line 1032)
                warn_call_result_9787 = invoke(stypy.reporting.localization.Localization(__file__, 1032, 20), warn_9784, *[unicode_9785], **kwargs_9786)
                
                
                # Assigning a Num to a Name (line 1035):
                
                # Assigning a Num to a Name (line 1035):
                float_9788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 26), 'float')
                # Assigning a type to the variable 'ds1' (line 1035)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 20), 'ds1', float_9788)
                # SSA join for try-except statement (line 1028)
                module_type_store = module_type_store.join_ssa_context()
                
                
                
                # Call to isnan(...): (line 1036)
                # Processing the call arguments (line 1036)
                # Getting the type of 'ds1' (line 1036)
                ds1_9791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 28), 'ds1', False)
                # Processing the call keyword arguments (line 1036)
                kwargs_9792 = {}
                # Getting the type of 'np' (line 1036)
                np_9789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 19), 'np', False)
                # Obtaining the member 'isnan' of a type (line 1036)
                isnan_9790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 19), np_9789, 'isnan')
                # Calling isnan(args, kwargs) (line 1036)
                isnan_call_result_9793 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 19), isnan_9790, *[ds1_9791], **kwargs_9792)
                
                # Testing the type of an if condition (line 1036)
                if_condition_9794 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1036, 16), isnan_call_result_9793)
                # Assigning a type to the variable 'if_condition_9794' (line 1036)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1036, 16), 'if_condition_9794', if_condition_9794)
                # SSA begins for if statement (line 1036)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Num to a Name (line 1037):
                
                # Assigning a Num to a Name (line 1037):
                float_9795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 26), 'float')
                # Assigning a type to the variable 'ds1' (line 1037)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1037, 20), 'ds1', float_9795)
                # SSA join for if statement (line 1036)
                module_type_store = module_type_store.join_ssa_context()
                
                
                
                # SSA begins for try-except statement (line 1038)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
                
                # Assigning a Call to a Name (line 1039):
                
                # Assigning a Call to a Name (line 1039):
                
                # Call to _get_pixel_distance_along_axis(...): (line 1039)
                # Processing the call arguments (line 1039)
                
                # Obtaining the type of the subscript
                int_9798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 42), 'int')
                # Getting the type of 'interval_expanded' (line 1040)
                interval_expanded_9799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 24), 'interval_expanded', False)
                # Obtaining the member '__getitem__' of a type (line 1040)
                getitem___9800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 24), interval_expanded_9799, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1040)
                subscript_call_result_9801 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 24), getitem___9800, int_9798)
                
                
                float_9802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 47), 'float')
                # Applying the 'uadd' unary operator (line 1040)
                result___pos___9803 = python_operator(stypy.reporting.localization.Localization(__file__, 1040, 46), 'uadd', float_9802)
                
                # Processing the call keyword arguments (line 1039)
                kwargs_9804 = {}
                # Getting the type of 'self' (line 1039)
                self_9796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 26), 'self', False)
                # Obtaining the member '_get_pixel_distance_along_axis' of a type (line 1039)
                _get_pixel_distance_along_axis_9797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 26), self_9796, '_get_pixel_distance_along_axis')
                # Calling _get_pixel_distance_along_axis(args, kwargs) (line 1039)
                _get_pixel_distance_along_axis_call_result_9805 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 26), _get_pixel_distance_along_axis_9797, *[subscript_call_result_9801, result___pos___9803], **kwargs_9804)
                
                # Assigning a type to the variable 'ds2' (line 1039)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 20), 'ds2', _get_pixel_distance_along_axis_call_result_9805)
                # SSA branch for the except part of a try statement (line 1038)
                # SSA branch for the except '<any exception>' branch of a try statement (line 1038)
                module_type_store.open_ssa_branch('except')
                
                # Call to warn(...): (line 1042)
                # Processing the call arguments (line 1042)
                unicode_9808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 34), 'unicode', u'Unable to find pixel distance along axis for interval padding of ticks; assuming no interval padding needed.')
                # Processing the call keyword arguments (line 1042)
                kwargs_9809 = {}
                # Getting the type of 'warnings' (line 1042)
                warnings_9806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 20), 'warnings', False)
                # Obtaining the member 'warn' of a type (line 1042)
                warn_9807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 20), warnings_9806, 'warn')
                # Calling warn(args, kwargs) (line 1042)
                warn_call_result_9810 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 20), warn_9807, *[unicode_9808], **kwargs_9809)
                
                
                # Assigning a Num to a Name (line 1045):
                
                # Assigning a Num to a Name (line 1045):
                float_9811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 26), 'float')
                # Assigning a type to the variable 'ds2' (line 1045)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 20), 'ds2', float_9811)
                # SSA join for try-except statement (line 1038)
                module_type_store = module_type_store.join_ssa_context()
                
                
                
                # Call to isnan(...): (line 1046)
                # Processing the call arguments (line 1046)
                # Getting the type of 'ds2' (line 1046)
                ds2_9814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 28), 'ds2', False)
                # Processing the call keyword arguments (line 1046)
                kwargs_9815 = {}
                # Getting the type of 'np' (line 1046)
                np_9812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 19), 'np', False)
                # Obtaining the member 'isnan' of a type (line 1046)
                isnan_9813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 19), np_9812, 'isnan')
                # Calling isnan(args, kwargs) (line 1046)
                isnan_call_result_9816 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 19), isnan_9813, *[ds2_9814], **kwargs_9815)
                
                # Testing the type of an if condition (line 1046)
                if_condition_9817 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1046, 16), isnan_call_result_9816)
                # Assigning a type to the variable 'if_condition_9817' (line 1046)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1046, 16), 'if_condition_9817', if_condition_9817)
                # SSA begins for if statement (line 1046)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
                
                # Assigning a Num to a Name (line 1047):
                
                # Assigning a Num to a Name (line 1047):
                float_9818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1047, 26), 'float')
                # Assigning a type to the variable 'ds2' (line 1047)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1047, 20), 'ds2', float_9818)
                # SSA join for if statement (line 1046)
                module_type_store = module_type_store.join_ssa_context()
                
                # Calling the __exit__ method to finish a with section
                # Obtaining the member '__exit__' of a type (line 1027)
                exit___9819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 17), errstate_call_result_9770, '__exit__')
                with_exit_9820 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 17), exit___9819, None, None, None)

            
            # Assigning a Tuple to a Name (line 1048):
            
            # Assigning a Tuple to a Name (line 1048):
            
            # Obtaining an instance of the builtin type 'tuple' (line 1048)
            tuple_9821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 33), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1048)
            # Adding element type (line 1048)
            
            # Obtaining the type of the subscript
            int_9822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 51), 'int')
            # Getting the type of 'interval_expanded' (line 1048)
            interval_expanded_9823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 33), 'interval_expanded')
            # Obtaining the member '__getitem__' of a type (line 1048)
            getitem___9824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 33), interval_expanded_9823, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1048)
            subscript_call_result_9825 = invoke(stypy.reporting.localization.Localization(__file__, 1048, 33), getitem___9824, int_9822)
            
            # Getting the type of 'ds1' (line 1048)
            ds1_9826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 56), 'ds1')
            # Applying the binary operator '-' (line 1048)
            result_sub_9827 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 33), '-', subscript_call_result_9825, ds1_9826)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1048, 33), tuple_9821, result_sub_9827)
            # Adding element type (line 1048)
            
            # Obtaining the type of the subscript
            int_9828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 51), 'int')
            # Getting the type of 'interval_expanded' (line 1049)
            interval_expanded_9829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 33), 'interval_expanded')
            # Obtaining the member '__getitem__' of a type (line 1049)
            getitem___9830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 33), interval_expanded_9829, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1049)
            subscript_call_result_9831 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 33), getitem___9830, int_9828)
            
            # Getting the type of 'ds2' (line 1049)
            ds2_9832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 56), 'ds2')
            # Applying the binary operator '+' (line 1049)
            result_add_9833 = python_operator(stypy.reporting.localization.Localization(__file__, 1049, 33), '+', subscript_call_result_9831, ds2_9832)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1048, 33), tuple_9821, result_add_9833)
            
            # Assigning a type to the variable 'interval_expanded' (line 1048)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 12), 'interval_expanded', tuple_9821)

            if more_types_in_union_9764:
                # SSA join for if statement (line 1015)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a List to a Name (line 1051):
        
        # Assigning a List to a Name (line 1051):
        
        # Obtaining an instance of the builtin type 'list' (line 1051)
        list_9834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1051)
        
        # Assigning a type to the variable 'ticks_to_draw' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 8), 'ticks_to_draw', list_9834)
        
        # Getting the type of 'tick_tups' (line 1052)
        tick_tups_9835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 32), 'tick_tups')
        # Testing the type of a for loop iterable (line 1052)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1052, 8), tick_tups_9835)
        # Getting the type of the for loop variable (line 1052)
        for_loop_var_9836 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1052, 8), tick_tups_9835)
        # Assigning a type to the variable 'tick' (line 1052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'tick', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1052, 8), for_loop_var_9836))
        # Assigning a type to the variable 'loc' (line 1052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'loc', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1052, 8), for_loop_var_9836))
        # Assigning a type to the variable 'label' (line 1052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'label', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1052, 8), for_loop_var_9836))
        # SSA begins for a for statement (line 1052)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 1053)
        # Getting the type of 'tick' (line 1053)
        tick_9837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 15), 'tick')
        # Getting the type of 'None' (line 1053)
        None_9838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 23), 'None')
        
        (may_be_9839, more_types_in_union_9840) = may_be_none(tick_9837, None_9838)

        if may_be_9839:

            if more_types_in_union_9840:
                # Runtime conditional SSA (line 1053)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store


            if more_types_in_union_9840:
                # SSA join for if statement (line 1053)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to interval_contains(...): (line 1055)
        # Processing the call arguments (line 1055)
        # Getting the type of 'interval_expanded' (line 1055)
        interval_expanded_9843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 49), 'interval_expanded', False)
        # Getting the type of 'loc' (line 1055)
        loc_9844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 68), 'loc', False)
        # Processing the call keyword arguments (line 1055)
        kwargs_9845 = {}
        # Getting the type of 'mtransforms' (line 1055)
        mtransforms_9841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 19), 'mtransforms', False)
        # Obtaining the member 'interval_contains' of a type (line 1055)
        interval_contains_9842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1055, 19), mtransforms_9841, 'interval_contains')
        # Calling interval_contains(args, kwargs) (line 1055)
        interval_contains_call_result_9846 = invoke(stypy.reporting.localization.Localization(__file__, 1055, 19), interval_contains_9842, *[interval_expanded_9843, loc_9844], **kwargs_9845)
        
        # Applying the 'not' unary operator (line 1055)
        result_not__9847 = python_operator(stypy.reporting.localization.Localization(__file__, 1055, 15), 'not', interval_contains_call_result_9846)
        
        # Testing the type of an if condition (line 1055)
        if_condition_9848 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1055, 12), result_not__9847)
        # Assigning a type to the variable 'if_condition_9848' (line 1055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 12), 'if_condition_9848', if_condition_9848)
        # SSA begins for if statement (line 1055)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1055)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update_position(...): (line 1057)
        # Processing the call arguments (line 1057)
        # Getting the type of 'loc' (line 1057)
        loc_9851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 33), 'loc', False)
        # Processing the call keyword arguments (line 1057)
        kwargs_9852 = {}
        # Getting the type of 'tick' (line 1057)
        tick_9849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 12), 'tick', False)
        # Obtaining the member 'update_position' of a type (line 1057)
        update_position_9850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 12), tick_9849, 'update_position')
        # Calling update_position(args, kwargs) (line 1057)
        update_position_call_result_9853 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 12), update_position_9850, *[loc_9851], **kwargs_9852)
        
        
        # Call to set_label1(...): (line 1058)
        # Processing the call arguments (line 1058)
        # Getting the type of 'label' (line 1058)
        label_9856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 28), 'label', False)
        # Processing the call keyword arguments (line 1058)
        kwargs_9857 = {}
        # Getting the type of 'tick' (line 1058)
        tick_9854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 12), 'tick', False)
        # Obtaining the member 'set_label1' of a type (line 1058)
        set_label1_9855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1058, 12), tick_9854, 'set_label1')
        # Calling set_label1(args, kwargs) (line 1058)
        set_label1_call_result_9858 = invoke(stypy.reporting.localization.Localization(__file__, 1058, 12), set_label1_9855, *[label_9856], **kwargs_9857)
        
        
        # Call to set_label2(...): (line 1059)
        # Processing the call arguments (line 1059)
        # Getting the type of 'label' (line 1059)
        label_9861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 28), 'label', False)
        # Processing the call keyword arguments (line 1059)
        kwargs_9862 = {}
        # Getting the type of 'tick' (line 1059)
        tick_9859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 12), 'tick', False)
        # Obtaining the member 'set_label2' of a type (line 1059)
        set_label2_9860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1059, 12), tick_9859, 'set_label2')
        # Calling set_label2(args, kwargs) (line 1059)
        set_label2_call_result_9863 = invoke(stypy.reporting.localization.Localization(__file__, 1059, 12), set_label2_9860, *[label_9861], **kwargs_9862)
        
        
        # Call to append(...): (line 1060)
        # Processing the call arguments (line 1060)
        # Getting the type of 'tick' (line 1060)
        tick_9866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 33), 'tick', False)
        # Processing the call keyword arguments (line 1060)
        kwargs_9867 = {}
        # Getting the type of 'ticks_to_draw' (line 1060)
        ticks_to_draw_9864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 12), 'ticks_to_draw', False)
        # Obtaining the member 'append' of a type (line 1060)
        append_9865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 12), ticks_to_draw_9864, 'append')
        # Calling append(args, kwargs) (line 1060)
        append_call_result_9868 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 12), append_9865, *[tick_9866], **kwargs_9867)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'ticks_to_draw' (line 1062)
        ticks_to_draw_9869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 15), 'ticks_to_draw')
        # Assigning a type to the variable 'stypy_return_type' (line 1062)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1062, 8), 'stypy_return_type', ticks_to_draw_9869)
        
        # ################# End of '_update_ticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_ticks' in the type store
        # Getting the type of 'stypy_return_type' (line 966)
        stypy_return_type_9870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9870)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_ticks'
        return stypy_return_type_9870


    @norecursion
    def _get_tick_bboxes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_tick_bboxes'
        module_type_store = module_type_store.open_function_context('_get_tick_bboxes', 1064, 4, False)
        # Assigning a type to the variable 'self' (line 1065)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis._get_tick_bboxes.__dict__.__setitem__('stypy_localization', localization)
        Axis._get_tick_bboxes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis._get_tick_bboxes.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis._get_tick_bboxes.__dict__.__setitem__('stypy_function_name', 'Axis._get_tick_bboxes')
        Axis._get_tick_bboxes.__dict__.__setitem__('stypy_param_names_list', ['ticks', 'renderer'])
        Axis._get_tick_bboxes.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis._get_tick_bboxes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis._get_tick_bboxes.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis._get_tick_bboxes.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis._get_tick_bboxes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis._get_tick_bboxes.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis._get_tick_bboxes', ['ticks', 'renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_tick_bboxes', localization, ['ticks', 'renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_tick_bboxes(...)' code ##################

        unicode_9871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1068, (-1)), 'unicode', u"\n        Given the list of ticks, return two lists of bboxes. One for\n        tick lable1's and another for tick label2's.\n        ")
        
        # Assigning a List to a Name (line 1070):
        
        # Assigning a List to a Name (line 1070):
        
        # Obtaining an instance of the builtin type 'list' (line 1070)
        list_9872 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1070, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1070)
        
        # Assigning a type to the variable 'ticklabelBoxes' (line 1070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 8), 'ticklabelBoxes', list_9872)
        
        # Assigning a List to a Name (line 1071):
        
        # Assigning a List to a Name (line 1071):
        
        # Obtaining an instance of the builtin type 'list' (line 1071)
        list_9873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1071, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1071)
        
        # Assigning a type to the variable 'ticklabelBoxes2' (line 1071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1071, 8), 'ticklabelBoxes2', list_9873)
        
        # Getting the type of 'ticks' (line 1073)
        ticks_9874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 20), 'ticks')
        # Testing the type of a for loop iterable (line 1073)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1073, 8), ticks_9874)
        # Getting the type of the for loop variable (line 1073)
        for_loop_var_9875 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1073, 8), ticks_9874)
        # Assigning a type to the variable 'tick' (line 1073)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1073, 8), 'tick', for_loop_var_9875)
        # SSA begins for a for statement (line 1073)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Evaluating a boolean operation
        # Getting the type of 'tick' (line 1074)
        tick_9876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 15), 'tick')
        # Obtaining the member 'label1On' of a type (line 1074)
        label1On_9877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 15), tick_9876, 'label1On')
        
        # Call to get_visible(...): (line 1074)
        # Processing the call keyword arguments (line 1074)
        kwargs_9881 = {}
        # Getting the type of 'tick' (line 1074)
        tick_9878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 33), 'tick', False)
        # Obtaining the member 'label1' of a type (line 1074)
        label1_9879 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 33), tick_9878, 'label1')
        # Obtaining the member 'get_visible' of a type (line 1074)
        get_visible_9880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 33), label1_9879, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1074)
        get_visible_call_result_9882 = invoke(stypy.reporting.localization.Localization(__file__, 1074, 33), get_visible_9880, *[], **kwargs_9881)
        
        # Applying the binary operator 'and' (line 1074)
        result_and_keyword_9883 = python_operator(stypy.reporting.localization.Localization(__file__, 1074, 15), 'and', label1On_9877, get_visible_call_result_9882)
        
        # Testing the type of an if condition (line 1074)
        if_condition_9884 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1074, 12), result_and_keyword_9883)
        # Assigning a type to the variable 'if_condition_9884' (line 1074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 12), 'if_condition_9884', if_condition_9884)
        # SSA begins for if statement (line 1074)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1075):
        
        # Assigning a Call to a Name (line 1075):
        
        # Call to get_window_extent(...): (line 1075)
        # Processing the call arguments (line 1075)
        # Getting the type of 'renderer' (line 1075)
        renderer_9888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 55), 'renderer', False)
        # Processing the call keyword arguments (line 1075)
        kwargs_9889 = {}
        # Getting the type of 'tick' (line 1075)
        tick_9885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 25), 'tick', False)
        # Obtaining the member 'label1' of a type (line 1075)
        label1_9886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 25), tick_9885, 'label1')
        # Obtaining the member 'get_window_extent' of a type (line 1075)
        get_window_extent_9887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 25), label1_9886, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1075)
        get_window_extent_call_result_9890 = invoke(stypy.reporting.localization.Localization(__file__, 1075, 25), get_window_extent_9887, *[renderer_9888], **kwargs_9889)
        
        # Assigning a type to the variable 'extent' (line 1075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 16), 'extent', get_window_extent_call_result_9890)
        
        # Call to append(...): (line 1076)
        # Processing the call arguments (line 1076)
        # Getting the type of 'extent' (line 1076)
        extent_9893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 38), 'extent', False)
        # Processing the call keyword arguments (line 1076)
        kwargs_9894 = {}
        # Getting the type of 'ticklabelBoxes' (line 1076)
        ticklabelBoxes_9891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 16), 'ticklabelBoxes', False)
        # Obtaining the member 'append' of a type (line 1076)
        append_9892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 16), ticklabelBoxes_9891, 'append')
        # Calling append(args, kwargs) (line 1076)
        append_call_result_9895 = invoke(stypy.reporting.localization.Localization(__file__, 1076, 16), append_9892, *[extent_9893], **kwargs_9894)
        
        # SSA join for if statement (line 1074)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'tick' (line 1077)
        tick_9896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 15), 'tick')
        # Obtaining the member 'label2On' of a type (line 1077)
        label2On_9897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 15), tick_9896, 'label2On')
        
        # Call to get_visible(...): (line 1077)
        # Processing the call keyword arguments (line 1077)
        kwargs_9901 = {}
        # Getting the type of 'tick' (line 1077)
        tick_9898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 33), 'tick', False)
        # Obtaining the member 'label2' of a type (line 1077)
        label2_9899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 33), tick_9898, 'label2')
        # Obtaining the member 'get_visible' of a type (line 1077)
        get_visible_9900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 33), label2_9899, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1077)
        get_visible_call_result_9902 = invoke(stypy.reporting.localization.Localization(__file__, 1077, 33), get_visible_9900, *[], **kwargs_9901)
        
        # Applying the binary operator 'and' (line 1077)
        result_and_keyword_9903 = python_operator(stypy.reporting.localization.Localization(__file__, 1077, 15), 'and', label2On_9897, get_visible_call_result_9902)
        
        # Testing the type of an if condition (line 1077)
        if_condition_9904 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1077, 12), result_and_keyword_9903)
        # Assigning a type to the variable 'if_condition_9904' (line 1077)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1077, 12), 'if_condition_9904', if_condition_9904)
        # SSA begins for if statement (line 1077)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1078):
        
        # Assigning a Call to a Name (line 1078):
        
        # Call to get_window_extent(...): (line 1078)
        # Processing the call arguments (line 1078)
        # Getting the type of 'renderer' (line 1078)
        renderer_9908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 55), 'renderer', False)
        # Processing the call keyword arguments (line 1078)
        kwargs_9909 = {}
        # Getting the type of 'tick' (line 1078)
        tick_9905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1078, 25), 'tick', False)
        # Obtaining the member 'label2' of a type (line 1078)
        label2_9906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 25), tick_9905, 'label2')
        # Obtaining the member 'get_window_extent' of a type (line 1078)
        get_window_extent_9907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1078, 25), label2_9906, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1078)
        get_window_extent_call_result_9910 = invoke(stypy.reporting.localization.Localization(__file__, 1078, 25), get_window_extent_9907, *[renderer_9908], **kwargs_9909)
        
        # Assigning a type to the variable 'extent' (line 1078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1078, 16), 'extent', get_window_extent_call_result_9910)
        
        # Call to append(...): (line 1079)
        # Processing the call arguments (line 1079)
        # Getting the type of 'extent' (line 1079)
        extent_9913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 39), 'extent', False)
        # Processing the call keyword arguments (line 1079)
        kwargs_9914 = {}
        # Getting the type of 'ticklabelBoxes2' (line 1079)
        ticklabelBoxes2_9911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 16), 'ticklabelBoxes2', False)
        # Obtaining the member 'append' of a type (line 1079)
        append_9912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1079, 16), ticklabelBoxes2_9911, 'append')
        # Calling append(args, kwargs) (line 1079)
        append_call_result_9915 = invoke(stypy.reporting.localization.Localization(__file__, 1079, 16), append_9912, *[extent_9913], **kwargs_9914)
        
        # SSA join for if statement (line 1077)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1080)
        tuple_9916 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1080, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1080)
        # Adding element type (line 1080)
        # Getting the type of 'ticklabelBoxes' (line 1080)
        ticklabelBoxes_9917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 15), 'ticklabelBoxes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1080, 15), tuple_9916, ticklabelBoxes_9917)
        # Adding element type (line 1080)
        # Getting the type of 'ticklabelBoxes2' (line 1080)
        ticklabelBoxes2_9918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 31), 'ticklabelBoxes2')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1080, 15), tuple_9916, ticklabelBoxes2_9918)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 8), 'stypy_return_type', tuple_9916)
        
        # ################# End of '_get_tick_bboxes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_tick_bboxes' in the type store
        # Getting the type of 'stypy_return_type' (line 1064)
        stypy_return_type_9919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_9919)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_tick_bboxes'
        return stypy_return_type_9919


    @norecursion
    def get_tightbbox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_tightbbox'
        module_type_store = module_type_store.open_function_context('get_tightbbox', 1082, 4, False)
        # Assigning a type to the variable 'self' (line 1083)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1083, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_tightbbox.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_tightbbox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_tightbbox.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_tightbbox.__dict__.__setitem__('stypy_function_name', 'Axis.get_tightbbox')
        Axis.get_tightbbox.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Axis.get_tightbbox.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_tightbbox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_tightbbox.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_tightbbox.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_tightbbox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_tightbbox.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_tightbbox', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_tightbbox', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_tightbbox(...)' code ##################

        unicode_9920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1086, (-1)), 'unicode', u'\n        Return a bounding box that encloses the axis. It only accounts\n        tick labels, axis label, and offsetText.\n        ')
        
        
        
        # Call to get_visible(...): (line 1087)
        # Processing the call keyword arguments (line 1087)
        kwargs_9923 = {}
        # Getting the type of 'self' (line 1087)
        self_9921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1087, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 1087)
        get_visible_9922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1087, 15), self_9921, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1087)
        get_visible_call_result_9924 = invoke(stypy.reporting.localization.Localization(__file__, 1087, 15), get_visible_9922, *[], **kwargs_9923)
        
        # Applying the 'not' unary operator (line 1087)
        result_not__9925 = python_operator(stypy.reporting.localization.Localization(__file__, 1087, 11), 'not', get_visible_call_result_9924)
        
        # Testing the type of an if condition (line 1087)
        if_condition_9926 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1087, 8), result_not__9925)
        # Assigning a type to the variable 'if_condition_9926' (line 1087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1087, 8), 'if_condition_9926', if_condition_9926)
        # SSA begins for if statement (line 1087)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1087)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1090):
        
        # Assigning a Call to a Name (line 1090):
        
        # Call to _update_ticks(...): (line 1090)
        # Processing the call arguments (line 1090)
        # Getting the type of 'renderer' (line 1090)
        renderer_9929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 43), 'renderer', False)
        # Processing the call keyword arguments (line 1090)
        kwargs_9930 = {}
        # Getting the type of 'self' (line 1090)
        self_9927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 24), 'self', False)
        # Obtaining the member '_update_ticks' of a type (line 1090)
        _update_ticks_9928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 24), self_9927, '_update_ticks')
        # Calling _update_ticks(args, kwargs) (line 1090)
        _update_ticks_call_result_9931 = invoke(stypy.reporting.localization.Localization(__file__, 1090, 24), _update_ticks_9928, *[renderer_9929], **kwargs_9930)
        
        # Assigning a type to the variable 'ticks_to_draw' (line 1090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'ticks_to_draw', _update_ticks_call_result_9931)
        
        # Assigning a Call to a Tuple (line 1091):
        
        # Assigning a Call to a Name:
        
        # Call to _get_tick_bboxes(...): (line 1091)
        # Processing the call arguments (line 1091)
        # Getting the type of 'ticks_to_draw' (line 1091)
        ticks_to_draw_9934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 64), 'ticks_to_draw', False)
        # Getting the type of 'renderer' (line 1092)
        renderer_9935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 64), 'renderer', False)
        # Processing the call keyword arguments (line 1091)
        kwargs_9936 = {}
        # Getting the type of 'self' (line 1091)
        self_9932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 42), 'self', False)
        # Obtaining the member '_get_tick_bboxes' of a type (line 1091)
        _get_tick_bboxes_9933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 42), self_9932, '_get_tick_bboxes')
        # Calling _get_tick_bboxes(args, kwargs) (line 1091)
        _get_tick_bboxes_call_result_9937 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 42), _get_tick_bboxes_9933, *[ticks_to_draw_9934, renderer_9935], **kwargs_9936)
        
        # Assigning a type to the variable 'call_assignment_6985' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'call_assignment_6985', _get_tick_bboxes_call_result_9937)
        
        # Assigning a Call to a Name (line 1091):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_9940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1091, 8), 'int')
        # Processing the call keyword arguments
        kwargs_9941 = {}
        # Getting the type of 'call_assignment_6985' (line 1091)
        call_assignment_6985_9938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'call_assignment_6985', False)
        # Obtaining the member '__getitem__' of a type (line 1091)
        getitem___9939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 8), call_assignment_6985_9938, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_9942 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___9939, *[int_9940], **kwargs_9941)
        
        # Assigning a type to the variable 'call_assignment_6986' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'call_assignment_6986', getitem___call_result_9942)
        
        # Assigning a Name to a Name (line 1091):
        # Getting the type of 'call_assignment_6986' (line 1091)
        call_assignment_6986_9943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'call_assignment_6986')
        # Assigning a type to the variable 'ticklabelBoxes' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'ticklabelBoxes', call_assignment_6986_9943)
        
        # Assigning a Call to a Name (line 1091):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_9946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1091, 8), 'int')
        # Processing the call keyword arguments
        kwargs_9947 = {}
        # Getting the type of 'call_assignment_6985' (line 1091)
        call_assignment_6985_9944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'call_assignment_6985', False)
        # Obtaining the member '__getitem__' of a type (line 1091)
        getitem___9945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 8), call_assignment_6985_9944, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_9948 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___9945, *[int_9946], **kwargs_9947)
        
        # Assigning a type to the variable 'call_assignment_6987' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'call_assignment_6987', getitem___call_result_9948)
        
        # Assigning a Name to a Name (line 1091):
        # Getting the type of 'call_assignment_6987' (line 1091)
        call_assignment_6987_9949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'call_assignment_6987')
        # Assigning a type to the variable 'ticklabelBoxes2' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 24), 'ticklabelBoxes2', call_assignment_6987_9949)
        
        # Call to _update_label_position(...): (line 1094)
        # Processing the call arguments (line 1094)
        # Getting the type of 'ticklabelBoxes' (line 1094)
        ticklabelBoxes_9952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 36), 'ticklabelBoxes', False)
        # Getting the type of 'ticklabelBoxes2' (line 1094)
        ticklabelBoxes2_9953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 52), 'ticklabelBoxes2', False)
        # Processing the call keyword arguments (line 1094)
        kwargs_9954 = {}
        # Getting the type of 'self' (line 1094)
        self_9950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 8), 'self', False)
        # Obtaining the member '_update_label_position' of a type (line 1094)
        _update_label_position_9951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 8), self_9950, '_update_label_position')
        # Calling _update_label_position(args, kwargs) (line 1094)
        _update_label_position_call_result_9955 = invoke(stypy.reporting.localization.Localization(__file__, 1094, 8), _update_label_position_9951, *[ticklabelBoxes_9952, ticklabelBoxes2_9953], **kwargs_9954)
        
        
        # Call to _update_offset_text_position(...): (line 1096)
        # Processing the call arguments (line 1096)
        # Getting the type of 'ticklabelBoxes' (line 1096)
        ticklabelBoxes_9958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 42), 'ticklabelBoxes', False)
        # Getting the type of 'ticklabelBoxes2' (line 1096)
        ticklabelBoxes2_9959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 58), 'ticklabelBoxes2', False)
        # Processing the call keyword arguments (line 1096)
        kwargs_9960 = {}
        # Getting the type of 'self' (line 1096)
        self_9956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1096, 8), 'self', False)
        # Obtaining the member '_update_offset_text_position' of a type (line 1096)
        _update_offset_text_position_9957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1096, 8), self_9956, '_update_offset_text_position')
        # Calling _update_offset_text_position(args, kwargs) (line 1096)
        _update_offset_text_position_call_result_9961 = invoke(stypy.reporting.localization.Localization(__file__, 1096, 8), _update_offset_text_position_9957, *[ticklabelBoxes_9958, ticklabelBoxes2_9959], **kwargs_9960)
        
        
        # Call to set_text(...): (line 1097)
        # Processing the call arguments (line 1097)
        
        # Call to get_offset(...): (line 1097)
        # Processing the call keyword arguments (line 1097)
        kwargs_9969 = {}
        # Getting the type of 'self' (line 1097)
        self_9965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 33), 'self', False)
        # Obtaining the member 'major' of a type (line 1097)
        major_9966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 33), self_9965, 'major')
        # Obtaining the member 'formatter' of a type (line 1097)
        formatter_9967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 33), major_9966, 'formatter')
        # Obtaining the member 'get_offset' of a type (line 1097)
        get_offset_9968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 33), formatter_9967, 'get_offset')
        # Calling get_offset(args, kwargs) (line 1097)
        get_offset_call_result_9970 = invoke(stypy.reporting.localization.Localization(__file__, 1097, 33), get_offset_9968, *[], **kwargs_9969)
        
        # Processing the call keyword arguments (line 1097)
        kwargs_9971 = {}
        # Getting the type of 'self' (line 1097)
        self_9962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 8), 'self', False)
        # Obtaining the member 'offsetText' of a type (line 1097)
        offsetText_9963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 8), self_9962, 'offsetText')
        # Obtaining the member 'set_text' of a type (line 1097)
        set_text_9964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 8), offsetText_9963, 'set_text')
        # Calling set_text(args, kwargs) (line 1097)
        set_text_call_result_9972 = invoke(stypy.reporting.localization.Localization(__file__, 1097, 8), set_text_9964, *[get_offset_call_result_9970], **kwargs_9971)
        
        
        # Assigning a List to a Name (line 1099):
        
        # Assigning a List to a Name (line 1099):
        
        # Obtaining an instance of the builtin type 'list' (line 1099)
        list_9973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1099, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1099)
        
        # Assigning a type to the variable 'bb' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 8), 'bb', list_9973)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1101)
        list_9974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1101, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1101)
        # Adding element type (line 1101)
        # Getting the type of 'self' (line 1101)
        self_9975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 18), 'self')
        # Obtaining the member 'label' of a type (line 1101)
        label_9976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 18), self_9975, 'label')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1101, 17), list_9974, label_9976)
        # Adding element type (line 1101)
        # Getting the type of 'self' (line 1101)
        self_9977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 30), 'self')
        # Obtaining the member 'offsetText' of a type (line 1101)
        offsetText_9978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 30), self_9977, 'offsetText')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1101, 17), list_9974, offsetText_9978)
        
        # Testing the type of a for loop iterable (line 1101)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1101, 8), list_9974)
        # Getting the type of the for loop variable (line 1101)
        for_loop_var_9979 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1101, 8), list_9974)
        # Assigning a type to the variable 'a' (line 1101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1101, 8), 'a', for_loop_var_9979)
        # SSA begins for a for statement (line 1101)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to get_visible(...): (line 1102)
        # Processing the call keyword arguments (line 1102)
        kwargs_9982 = {}
        # Getting the type of 'a' (line 1102)
        a_9980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 15), 'a', False)
        # Obtaining the member 'get_visible' of a type (line 1102)
        get_visible_9981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1102, 15), a_9980, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1102)
        get_visible_call_result_9983 = invoke(stypy.reporting.localization.Localization(__file__, 1102, 15), get_visible_9981, *[], **kwargs_9982)
        
        # Testing the type of an if condition (line 1102)
        if_condition_9984 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1102, 12), get_visible_call_result_9983)
        # Assigning a type to the variable 'if_condition_9984' (line 1102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1102, 12), 'if_condition_9984', if_condition_9984)
        # SSA begins for if statement (line 1102)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1103)
        # Processing the call arguments (line 1103)
        
        # Call to get_window_extent(...): (line 1103)
        # Processing the call arguments (line 1103)
        # Getting the type of 'renderer' (line 1103)
        renderer_9989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 46), 'renderer', False)
        # Processing the call keyword arguments (line 1103)
        kwargs_9990 = {}
        # Getting the type of 'a' (line 1103)
        a_9987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 26), 'a', False)
        # Obtaining the member 'get_window_extent' of a type (line 1103)
        get_window_extent_9988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 26), a_9987, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1103)
        get_window_extent_call_result_9991 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 26), get_window_extent_9988, *[renderer_9989], **kwargs_9990)
        
        # Processing the call keyword arguments (line 1103)
        kwargs_9992 = {}
        # Getting the type of 'bb' (line 1103)
        bb_9985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 16), 'bb', False)
        # Obtaining the member 'append' of a type (line 1103)
        append_9986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 16), bb_9985, 'append')
        # Calling append(args, kwargs) (line 1103)
        append_call_result_9993 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 16), append_9986, *[get_window_extent_call_result_9991], **kwargs_9992)
        
        # SSA join for if statement (line 1102)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to extend(...): (line 1105)
        # Processing the call arguments (line 1105)
        # Getting the type of 'ticklabelBoxes' (line 1105)
        ticklabelBoxes_9996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 18), 'ticklabelBoxes', False)
        # Processing the call keyword arguments (line 1105)
        kwargs_9997 = {}
        # Getting the type of 'bb' (line 1105)
        bb_9994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 8), 'bb', False)
        # Obtaining the member 'extend' of a type (line 1105)
        extend_9995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1105, 8), bb_9994, 'extend')
        # Calling extend(args, kwargs) (line 1105)
        extend_call_result_9998 = invoke(stypy.reporting.localization.Localization(__file__, 1105, 8), extend_9995, *[ticklabelBoxes_9996], **kwargs_9997)
        
        
        # Call to extend(...): (line 1106)
        # Processing the call arguments (line 1106)
        # Getting the type of 'ticklabelBoxes2' (line 1106)
        ticklabelBoxes2_10001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 18), 'ticklabelBoxes2', False)
        # Processing the call keyword arguments (line 1106)
        kwargs_10002 = {}
        # Getting the type of 'bb' (line 1106)
        bb_9999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 8), 'bb', False)
        # Obtaining the member 'extend' of a type (line 1106)
        extend_10000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1106, 8), bb_9999, 'extend')
        # Calling extend(args, kwargs) (line 1106)
        extend_call_result_10003 = invoke(stypy.reporting.localization.Localization(__file__, 1106, 8), extend_10000, *[ticklabelBoxes2_10001], **kwargs_10002)
        
        
        # Assigning a ListComp to a Name (line 1108):
        
        # Assigning a ListComp to a Name (line 1108):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'bb' (line 1108)
        bb_10014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 25), 'bb')
        comprehension_10015 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1108, 14), bb_10014)
        # Assigning a type to the variable 'b' (line 1108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 14), 'b', comprehension_10015)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'b' (line 1108)
        b_10005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 31), 'b')
        # Obtaining the member 'width' of a type (line 1108)
        width_10006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 31), b_10005, 'width')
        int_10007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1108, 42), 'int')
        # Applying the binary operator '!=' (line 1108)
        result_ne_10008 = python_operator(stypy.reporting.localization.Localization(__file__, 1108, 31), '!=', width_10006, int_10007)
        
        
        # Getting the type of 'b' (line 1108)
        b_10009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 47), 'b')
        # Obtaining the member 'height' of a type (line 1108)
        height_10010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 47), b_10009, 'height')
        int_10011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1108, 59), 'int')
        # Applying the binary operator '!=' (line 1108)
        result_ne_10012 = python_operator(stypy.reporting.localization.Localization(__file__, 1108, 47), '!=', height_10010, int_10011)
        
        # Applying the binary operator 'or' (line 1108)
        result_or_keyword_10013 = python_operator(stypy.reporting.localization.Localization(__file__, 1108, 31), 'or', result_ne_10008, result_ne_10012)
        
        # Getting the type of 'b' (line 1108)
        b_10004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 14), 'b')
        list_10016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1108, 14), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1108, 14), list_10016, b_10004)
        # Assigning a type to the variable 'bb' (line 1108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1108, 8), 'bb', list_10016)
        
        # Getting the type of 'bb' (line 1109)
        bb_10017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 11), 'bb')
        # Testing the type of an if condition (line 1109)
        if_condition_10018 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1109, 8), bb_10017)
        # Assigning a type to the variable 'if_condition_10018' (line 1109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 8), 'if_condition_10018', if_condition_10018)
        # SSA begins for if statement (line 1109)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1110):
        
        # Assigning a Call to a Name (line 1110):
        
        # Call to union(...): (line 1110)
        # Processing the call arguments (line 1110)
        # Getting the type of 'bb' (line 1110)
        bb_10022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 43), 'bb', False)
        # Processing the call keyword arguments (line 1110)
        kwargs_10023 = {}
        # Getting the type of 'mtransforms' (line 1110)
        mtransforms_10019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 20), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 1110)
        Bbox_10020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 20), mtransforms_10019, 'Bbox')
        # Obtaining the member 'union' of a type (line 1110)
        union_10021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 20), Bbox_10020, 'union')
        # Calling union(args, kwargs) (line 1110)
        union_call_result_10024 = invoke(stypy.reporting.localization.Localization(__file__, 1110, 20), union_10021, *[bb_10022], **kwargs_10023)
        
        # Assigning a type to the variable '_bbox' (line 1110)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1110, 12), '_bbox', union_call_result_10024)
        # Getting the type of '_bbox' (line 1111)
        _bbox_10025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 19), '_bbox')
        # Assigning a type to the variable 'stypy_return_type' (line 1111)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1111, 12), 'stypy_return_type', _bbox_10025)
        # SSA branch for the else part of an if statement (line 1109)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'None' (line 1113)
        None_10026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 12), 'stypy_return_type', None_10026)
        # SSA join for if statement (line 1109)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_tightbbox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_tightbbox' in the type store
        # Getting the type of 'stypy_return_type' (line 1082)
        stypy_return_type_10027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10027)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_tightbbox'
        return stypy_return_type_10027


    @norecursion
    def get_tick_padding(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_tick_padding'
        module_type_store = module_type_store.open_function_context('get_tick_padding', 1115, 4, False)
        # Assigning a type to the variable 'self' (line 1116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1116, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_tick_padding.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_tick_padding.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_tick_padding.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_tick_padding.__dict__.__setitem__('stypy_function_name', 'Axis.get_tick_padding')
        Axis.get_tick_padding.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_tick_padding.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_tick_padding.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_tick_padding.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_tick_padding.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_tick_padding.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_tick_padding.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_tick_padding', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_tick_padding', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_tick_padding(...)' code ##################

        
        # Assigning a List to a Name (line 1116):
        
        # Assigning a List to a Name (line 1116):
        
        # Obtaining an instance of the builtin type 'list' (line 1116)
        list_10028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1116, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1116)
        
        # Assigning a type to the variable 'values' (line 1116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1116, 8), 'values', list_10028)
        
        
        # Call to len(...): (line 1117)
        # Processing the call arguments (line 1117)
        # Getting the type of 'self' (line 1117)
        self_10030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 15), 'self', False)
        # Obtaining the member 'majorTicks' of a type (line 1117)
        majorTicks_10031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 15), self_10030, 'majorTicks')
        # Processing the call keyword arguments (line 1117)
        kwargs_10032 = {}
        # Getting the type of 'len' (line 1117)
        len_10029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 11), 'len', False)
        # Calling len(args, kwargs) (line 1117)
        len_call_result_10033 = invoke(stypy.reporting.localization.Localization(__file__, 1117, 11), len_10029, *[majorTicks_10031], **kwargs_10032)
        
        # Testing the type of an if condition (line 1117)
        if_condition_10034 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1117, 8), len_call_result_10033)
        # Assigning a type to the variable 'if_condition_10034' (line 1117)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1117, 8), 'if_condition_10034', if_condition_10034)
        # SSA begins for if statement (line 1117)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1118)
        # Processing the call arguments (line 1118)
        
        # Call to get_tick_padding(...): (line 1118)
        # Processing the call keyword arguments (line 1118)
        kwargs_10043 = {}
        
        # Obtaining the type of the subscript
        int_10037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1118, 42), 'int')
        # Getting the type of 'self' (line 1118)
        self_10038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 26), 'self', False)
        # Obtaining the member 'majorTicks' of a type (line 1118)
        majorTicks_10039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 26), self_10038, 'majorTicks')
        # Obtaining the member '__getitem__' of a type (line 1118)
        getitem___10040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 26), majorTicks_10039, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1118)
        subscript_call_result_10041 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 26), getitem___10040, int_10037)
        
        # Obtaining the member 'get_tick_padding' of a type (line 1118)
        get_tick_padding_10042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 26), subscript_call_result_10041, 'get_tick_padding')
        # Calling get_tick_padding(args, kwargs) (line 1118)
        get_tick_padding_call_result_10044 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 26), get_tick_padding_10042, *[], **kwargs_10043)
        
        # Processing the call keyword arguments (line 1118)
        kwargs_10045 = {}
        # Getting the type of 'values' (line 1118)
        values_10035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 12), 'values', False)
        # Obtaining the member 'append' of a type (line 1118)
        append_10036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 12), values_10035, 'append')
        # Calling append(args, kwargs) (line 1118)
        append_call_result_10046 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 12), append_10036, *[get_tick_padding_call_result_10044], **kwargs_10045)
        
        # SSA join for if statement (line 1117)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to len(...): (line 1119)
        # Processing the call arguments (line 1119)
        # Getting the type of 'self' (line 1119)
        self_10048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 15), 'self', False)
        # Obtaining the member 'minorTicks' of a type (line 1119)
        minorTicks_10049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1119, 15), self_10048, 'minorTicks')
        # Processing the call keyword arguments (line 1119)
        kwargs_10050 = {}
        # Getting the type of 'len' (line 1119)
        len_10047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 11), 'len', False)
        # Calling len(args, kwargs) (line 1119)
        len_call_result_10051 = invoke(stypy.reporting.localization.Localization(__file__, 1119, 11), len_10047, *[minorTicks_10049], **kwargs_10050)
        
        # Testing the type of an if condition (line 1119)
        if_condition_10052 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1119, 8), len_call_result_10051)
        # Assigning a type to the variable 'if_condition_10052' (line 1119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1119, 8), 'if_condition_10052', if_condition_10052)
        # SSA begins for if statement (line 1119)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1120)
        # Processing the call arguments (line 1120)
        
        # Call to get_tick_padding(...): (line 1120)
        # Processing the call keyword arguments (line 1120)
        kwargs_10061 = {}
        
        # Obtaining the type of the subscript
        int_10055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1120, 42), 'int')
        # Getting the type of 'self' (line 1120)
        self_10056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 26), 'self', False)
        # Obtaining the member 'minorTicks' of a type (line 1120)
        minorTicks_10057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 26), self_10056, 'minorTicks')
        # Obtaining the member '__getitem__' of a type (line 1120)
        getitem___10058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 26), minorTicks_10057, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1120)
        subscript_call_result_10059 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 26), getitem___10058, int_10055)
        
        # Obtaining the member 'get_tick_padding' of a type (line 1120)
        get_tick_padding_10060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 26), subscript_call_result_10059, 'get_tick_padding')
        # Calling get_tick_padding(args, kwargs) (line 1120)
        get_tick_padding_call_result_10062 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 26), get_tick_padding_10060, *[], **kwargs_10061)
        
        # Processing the call keyword arguments (line 1120)
        kwargs_10063 = {}
        # Getting the type of 'values' (line 1120)
        values_10053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 12), 'values', False)
        # Obtaining the member 'append' of a type (line 1120)
        append_10054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 12), values_10053, 'append')
        # Calling append(args, kwargs) (line 1120)
        append_call_result_10064 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 12), append_10054, *[get_tick_padding_call_result_10062], **kwargs_10063)
        
        # SSA join for if statement (line 1119)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to len(...): (line 1121)
        # Processing the call arguments (line 1121)
        # Getting the type of 'values' (line 1121)
        values_10066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 15), 'values', False)
        # Processing the call keyword arguments (line 1121)
        kwargs_10067 = {}
        # Getting the type of 'len' (line 1121)
        len_10065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 11), 'len', False)
        # Calling len(args, kwargs) (line 1121)
        len_call_result_10068 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 11), len_10065, *[values_10066], **kwargs_10067)
        
        # Testing the type of an if condition (line 1121)
        if_condition_10069 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1121, 8), len_call_result_10068)
        # Assigning a type to the variable 'if_condition_10069' (line 1121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1121, 8), 'if_condition_10069', if_condition_10069)
        # SSA begins for if statement (line 1121)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to max(...): (line 1122)
        # Processing the call arguments (line 1122)
        # Getting the type of 'values' (line 1122)
        values_10071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 23), 'values', False)
        # Processing the call keyword arguments (line 1122)
        kwargs_10072 = {}
        # Getting the type of 'max' (line 1122)
        max_10070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 19), 'max', False)
        # Calling max(args, kwargs) (line 1122)
        max_call_result_10073 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 19), max_10070, *[values_10071], **kwargs_10072)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1122)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1122, 12), 'stypy_return_type', max_call_result_10073)
        # SSA join for if statement (line 1121)
        module_type_store = module_type_store.join_ssa_context()
        
        float_10074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1123, 15), 'float')
        # Assigning a type to the variable 'stypy_return_type' (line 1123)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1123, 8), 'stypy_return_type', float_10074)
        
        # ################# End of 'get_tick_padding(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_tick_padding' in the type store
        # Getting the type of 'stypy_return_type' (line 1115)
        stypy_return_type_10075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10075)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_tick_padding'
        return stypy_return_type_10075


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 1125, 4, False)
        # Assigning a type to the variable 'self' (line 1126)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1126, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.draw.__dict__.__setitem__('stypy_localization', localization)
        Axis.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.draw.__dict__.__setitem__('stypy_function_name', 'Axis.draw')
        Axis.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Axis.draw.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Axis.draw.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Axis.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.draw', ['renderer'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_10076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 8), 'unicode', u'Draw the axis lines, grid lines, tick lines and labels')
        
        
        
        # Call to get_visible(...): (line 1129)
        # Processing the call keyword arguments (line 1129)
        kwargs_10079 = {}
        # Getting the type of 'self' (line 1129)
        self_10077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 1129)
        get_visible_10078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 15), self_10077, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1129)
        get_visible_call_result_10080 = invoke(stypy.reporting.localization.Localization(__file__, 1129, 15), get_visible_10078, *[], **kwargs_10079)
        
        # Applying the 'not' unary operator (line 1129)
        result_not__10081 = python_operator(stypy.reporting.localization.Localization(__file__, 1129, 11), 'not', get_visible_call_result_10080)
        
        # Testing the type of an if condition (line 1129)
        if_condition_10082 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1129, 8), result_not__10081)
        # Assigning a type to the variable 'if_condition_10082' (line 1129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'if_condition_10082', if_condition_10082)
        # SSA begins for if statement (line 1129)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1129)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to open_group(...): (line 1131)
        # Processing the call arguments (line 1131)
        # Getting the type of '__name__' (line 1131)
        name___10085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 28), '__name__', False)
        # Processing the call keyword arguments (line 1131)
        kwargs_10086 = {}
        # Getting the type of 'renderer' (line 1131)
        renderer_10083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1131, 8), 'renderer', False)
        # Obtaining the member 'open_group' of a type (line 1131)
        open_group_10084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1131, 8), renderer_10083, 'open_group')
        # Calling open_group(args, kwargs) (line 1131)
        open_group_call_result_10087 = invoke(stypy.reporting.localization.Localization(__file__, 1131, 8), open_group_10084, *[name___10085], **kwargs_10086)
        
        
        # Assigning a Call to a Name (line 1133):
        
        # Assigning a Call to a Name (line 1133):
        
        # Call to _update_ticks(...): (line 1133)
        # Processing the call arguments (line 1133)
        # Getting the type of 'renderer' (line 1133)
        renderer_10090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 43), 'renderer', False)
        # Processing the call keyword arguments (line 1133)
        kwargs_10091 = {}
        # Getting the type of 'self' (line 1133)
        self_10088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 24), 'self', False)
        # Obtaining the member '_update_ticks' of a type (line 1133)
        _update_ticks_10089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 24), self_10088, '_update_ticks')
        # Calling _update_ticks(args, kwargs) (line 1133)
        _update_ticks_call_result_10092 = invoke(stypy.reporting.localization.Localization(__file__, 1133, 24), _update_ticks_10089, *[renderer_10090], **kwargs_10091)
        
        # Assigning a type to the variable 'ticks_to_draw' (line 1133)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1133, 8), 'ticks_to_draw', _update_ticks_call_result_10092)
        
        # Assigning a Call to a Tuple (line 1134):
        
        # Assigning a Call to a Name:
        
        # Call to _get_tick_bboxes(...): (line 1134)
        # Processing the call arguments (line 1134)
        # Getting the type of 'ticks_to_draw' (line 1134)
        ticks_to_draw_10095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 64), 'ticks_to_draw', False)
        # Getting the type of 'renderer' (line 1135)
        renderer_10096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1135, 64), 'renderer', False)
        # Processing the call keyword arguments (line 1134)
        kwargs_10097 = {}
        # Getting the type of 'self' (line 1134)
        self_10093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 42), 'self', False)
        # Obtaining the member '_get_tick_bboxes' of a type (line 1134)
        _get_tick_bboxes_10094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1134, 42), self_10093, '_get_tick_bboxes')
        # Calling _get_tick_bboxes(args, kwargs) (line 1134)
        _get_tick_bboxes_call_result_10098 = invoke(stypy.reporting.localization.Localization(__file__, 1134, 42), _get_tick_bboxes_10094, *[ticks_to_draw_10095, renderer_10096], **kwargs_10097)
        
        # Assigning a type to the variable 'call_assignment_6988' (line 1134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'call_assignment_6988', _get_tick_bboxes_call_result_10098)
        
        # Assigning a Call to a Name (line 1134):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_10101 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 8), 'int')
        # Processing the call keyword arguments
        kwargs_10102 = {}
        # Getting the type of 'call_assignment_6988' (line 1134)
        call_assignment_6988_10099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'call_assignment_6988', False)
        # Obtaining the member '__getitem__' of a type (line 1134)
        getitem___10100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1134, 8), call_assignment_6988_10099, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_10103 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___10100, *[int_10101], **kwargs_10102)
        
        # Assigning a type to the variable 'call_assignment_6989' (line 1134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'call_assignment_6989', getitem___call_result_10103)
        
        # Assigning a Name to a Name (line 1134):
        # Getting the type of 'call_assignment_6989' (line 1134)
        call_assignment_6989_10104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'call_assignment_6989')
        # Assigning a type to the variable 'ticklabelBoxes' (line 1134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'ticklabelBoxes', call_assignment_6989_10104)
        
        # Assigning a Call to a Name (line 1134):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_10107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1134, 8), 'int')
        # Processing the call keyword arguments
        kwargs_10108 = {}
        # Getting the type of 'call_assignment_6988' (line 1134)
        call_assignment_6988_10105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'call_assignment_6988', False)
        # Obtaining the member '__getitem__' of a type (line 1134)
        getitem___10106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1134, 8), call_assignment_6988_10105, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_10109 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___10106, *[int_10107], **kwargs_10108)
        
        # Assigning a type to the variable 'call_assignment_6990' (line 1134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'call_assignment_6990', getitem___call_result_10109)
        
        # Assigning a Name to a Name (line 1134):
        # Getting the type of 'call_assignment_6990' (line 1134)
        call_assignment_6990_10110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 8), 'call_assignment_6990')
        # Assigning a type to the variable 'ticklabelBoxes2' (line 1134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1134, 24), 'ticklabelBoxes2', call_assignment_6990_10110)
        
        # Getting the type of 'ticks_to_draw' (line 1137)
        ticks_to_draw_10111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1137, 20), 'ticks_to_draw')
        # Testing the type of a for loop iterable (line 1137)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1137, 8), ticks_to_draw_10111)
        # Getting the type of the for loop variable (line 1137)
        for_loop_var_10112 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1137, 8), ticks_to_draw_10111)
        # Assigning a type to the variable 'tick' (line 1137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 8), 'tick', for_loop_var_10112)
        # SSA begins for a for statement (line 1137)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to draw(...): (line 1138)
        # Processing the call arguments (line 1138)
        # Getting the type of 'renderer' (line 1138)
        renderer_10115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 22), 'renderer', False)
        # Processing the call keyword arguments (line 1138)
        kwargs_10116 = {}
        # Getting the type of 'tick' (line 1138)
        tick_10113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 12), 'tick', False)
        # Obtaining the member 'draw' of a type (line 1138)
        draw_10114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 12), tick_10113, 'draw')
        # Calling draw(args, kwargs) (line 1138)
        draw_call_result_10117 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 12), draw_10114, *[renderer_10115], **kwargs_10116)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _update_label_position(...): (line 1145)
        # Processing the call arguments (line 1145)
        # Getting the type of 'ticklabelBoxes' (line 1145)
        ticklabelBoxes_10120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 36), 'ticklabelBoxes', False)
        # Getting the type of 'ticklabelBoxes2' (line 1145)
        ticklabelBoxes2_10121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 52), 'ticklabelBoxes2', False)
        # Processing the call keyword arguments (line 1145)
        kwargs_10122 = {}
        # Getting the type of 'self' (line 1145)
        self_10118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 8), 'self', False)
        # Obtaining the member '_update_label_position' of a type (line 1145)
        _update_label_position_10119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 8), self_10118, '_update_label_position')
        # Calling _update_label_position(args, kwargs) (line 1145)
        _update_label_position_call_result_10123 = invoke(stypy.reporting.localization.Localization(__file__, 1145, 8), _update_label_position_10119, *[ticklabelBoxes_10120, ticklabelBoxes2_10121], **kwargs_10122)
        
        
        # Call to draw(...): (line 1147)
        # Processing the call arguments (line 1147)
        # Getting the type of 'renderer' (line 1147)
        renderer_10127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 24), 'renderer', False)
        # Processing the call keyword arguments (line 1147)
        kwargs_10128 = {}
        # Getting the type of 'self' (line 1147)
        self_10124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 8), 'self', False)
        # Obtaining the member 'label' of a type (line 1147)
        label_10125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 8), self_10124, 'label')
        # Obtaining the member 'draw' of a type (line 1147)
        draw_10126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1147, 8), label_10125, 'draw')
        # Calling draw(args, kwargs) (line 1147)
        draw_call_result_10129 = invoke(stypy.reporting.localization.Localization(__file__, 1147, 8), draw_10126, *[renderer_10127], **kwargs_10128)
        
        
        # Call to _update_offset_text_position(...): (line 1149)
        # Processing the call arguments (line 1149)
        # Getting the type of 'ticklabelBoxes' (line 1149)
        ticklabelBoxes_10132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 42), 'ticklabelBoxes', False)
        # Getting the type of 'ticklabelBoxes2' (line 1149)
        ticklabelBoxes2_10133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 58), 'ticklabelBoxes2', False)
        # Processing the call keyword arguments (line 1149)
        kwargs_10134 = {}
        # Getting the type of 'self' (line 1149)
        self_10130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 8), 'self', False)
        # Obtaining the member '_update_offset_text_position' of a type (line 1149)
        _update_offset_text_position_10131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1149, 8), self_10130, '_update_offset_text_position')
        # Calling _update_offset_text_position(args, kwargs) (line 1149)
        _update_offset_text_position_call_result_10135 = invoke(stypy.reporting.localization.Localization(__file__, 1149, 8), _update_offset_text_position_10131, *[ticklabelBoxes_10132, ticklabelBoxes2_10133], **kwargs_10134)
        
        
        # Call to set_text(...): (line 1150)
        # Processing the call arguments (line 1150)
        
        # Call to get_offset(...): (line 1150)
        # Processing the call keyword arguments (line 1150)
        kwargs_10143 = {}
        # Getting the type of 'self' (line 1150)
        self_10139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 33), 'self', False)
        # Obtaining the member 'major' of a type (line 1150)
        major_10140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 33), self_10139, 'major')
        # Obtaining the member 'formatter' of a type (line 1150)
        formatter_10141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 33), major_10140, 'formatter')
        # Obtaining the member 'get_offset' of a type (line 1150)
        get_offset_10142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 33), formatter_10141, 'get_offset')
        # Calling get_offset(args, kwargs) (line 1150)
        get_offset_call_result_10144 = invoke(stypy.reporting.localization.Localization(__file__, 1150, 33), get_offset_10142, *[], **kwargs_10143)
        
        # Processing the call keyword arguments (line 1150)
        kwargs_10145 = {}
        # Getting the type of 'self' (line 1150)
        self_10136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1150, 8), 'self', False)
        # Obtaining the member 'offsetText' of a type (line 1150)
        offsetText_10137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 8), self_10136, 'offsetText')
        # Obtaining the member 'set_text' of a type (line 1150)
        set_text_10138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1150, 8), offsetText_10137, 'set_text')
        # Calling set_text(args, kwargs) (line 1150)
        set_text_call_result_10146 = invoke(stypy.reporting.localization.Localization(__file__, 1150, 8), set_text_10138, *[get_offset_call_result_10144], **kwargs_10145)
        
        
        # Call to draw(...): (line 1151)
        # Processing the call arguments (line 1151)
        # Getting the type of 'renderer' (line 1151)
        renderer_10150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 29), 'renderer', False)
        # Processing the call keyword arguments (line 1151)
        kwargs_10151 = {}
        # Getting the type of 'self' (line 1151)
        self_10147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1151, 8), 'self', False)
        # Obtaining the member 'offsetText' of a type (line 1151)
        offsetText_10148 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1151, 8), self_10147, 'offsetText')
        # Obtaining the member 'draw' of a type (line 1151)
        draw_10149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1151, 8), offsetText_10148, 'draw')
        # Calling draw(args, kwargs) (line 1151)
        draw_call_result_10152 = invoke(stypy.reporting.localization.Localization(__file__, 1151, 8), draw_10149, *[renderer_10150], **kwargs_10151)
        
        
        int_10153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 11), 'int')
        # Testing the type of an if condition (line 1153)
        if_condition_10154 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1153, 8), int_10153)
        # Assigning a type to the variable 'if_condition_10154' (line 1153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 8), 'if_condition_10154', if_condition_10154)
        # SSA begins for if statement (line 1153)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 1154)
        self_10155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 24), 'self')
        # Obtaining the member 'majorTicks' of a type (line 1154)
        majorTicks_10156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1154, 24), self_10155, 'majorTicks')
        # Testing the type of a for loop iterable (line 1154)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1154, 12), majorTicks_10156)
        # Getting the type of the for loop variable (line 1154)
        for_loop_var_10157 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1154, 12), majorTicks_10156)
        # Assigning a type to the variable 'tick' (line 1154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 12), 'tick', for_loop_var_10157)
        # SSA begins for a for statement (line 1154)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Attribute to a Name (line 1155):
        
        # Assigning a Attribute to a Name (line 1155):
        # Getting the type of 'tick' (line 1155)
        tick_10158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 24), 'tick')
        # Obtaining the member 'label1' of a type (line 1155)
        label1_10159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 24), tick_10158, 'label1')
        # Assigning a type to the variable 'label' (line 1155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 16), 'label', label1_10159)
        
        # Call to bbox_artist(...): (line 1156)
        # Processing the call arguments (line 1156)
        # Getting the type of 'label' (line 1156)
        label_10162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 37), 'label', False)
        # Getting the type of 'renderer' (line 1156)
        renderer_10163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 44), 'renderer', False)
        # Processing the call keyword arguments (line 1156)
        kwargs_10164 = {}
        # Getting the type of 'mpatches' (line 1156)
        mpatches_10160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 16), 'mpatches', False)
        # Obtaining the member 'bbox_artist' of a type (line 1156)
        bbox_artist_10161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1156, 16), mpatches_10160, 'bbox_artist')
        # Calling bbox_artist(args, kwargs) (line 1156)
        bbox_artist_call_result_10165 = invoke(stypy.reporting.localization.Localization(__file__, 1156, 16), bbox_artist_10161, *[label_10162, renderer_10163], **kwargs_10164)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to bbox_artist(...): (line 1157)
        # Processing the call arguments (line 1157)
        # Getting the type of 'self' (line 1157)
        self_10168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 33), 'self', False)
        # Obtaining the member 'label' of a type (line 1157)
        label_10169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1157, 33), self_10168, 'label')
        # Getting the type of 'renderer' (line 1157)
        renderer_10170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 45), 'renderer', False)
        # Processing the call keyword arguments (line 1157)
        kwargs_10171 = {}
        # Getting the type of 'mpatches' (line 1157)
        mpatches_10166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 12), 'mpatches', False)
        # Obtaining the member 'bbox_artist' of a type (line 1157)
        bbox_artist_10167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1157, 12), mpatches_10166, 'bbox_artist')
        # Calling bbox_artist(args, kwargs) (line 1157)
        bbox_artist_call_result_10172 = invoke(stypy.reporting.localization.Localization(__file__, 1157, 12), bbox_artist_10167, *[label_10169, renderer_10170], **kwargs_10171)
        
        # SSA join for if statement (line 1153)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to close_group(...): (line 1159)
        # Processing the call arguments (line 1159)
        # Getting the type of '__name__' (line 1159)
        name___10175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 29), '__name__', False)
        # Processing the call keyword arguments (line 1159)
        kwargs_10176 = {}
        # Getting the type of 'renderer' (line 1159)
        renderer_10173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 8), 'renderer', False)
        # Obtaining the member 'close_group' of a type (line 1159)
        close_group_10174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 8), renderer_10173, 'close_group')
        # Calling close_group(args, kwargs) (line 1159)
        close_group_call_result_10177 = invoke(stypy.reporting.localization.Localization(__file__, 1159, 8), close_group_10174, *[name___10175], **kwargs_10176)
        
        
        # Assigning a Name to a Attribute (line 1160):
        
        # Assigning a Name to a Attribute (line 1160):
        # Getting the type of 'False' (line 1160)
        False_10178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 21), 'False')
        # Getting the type of 'self' (line 1160)
        self_10179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1160)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1160, 8), self_10179, 'stale', False_10178)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1125)
        stypy_return_type_10180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10180)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_10180


    @norecursion
    def _get_label(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_label'
        module_type_store = module_type_store.open_function_context('_get_label', 1162, 4, False)
        # Assigning a type to the variable 'self' (line 1163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis._get_label.__dict__.__setitem__('stypy_localization', localization)
        Axis._get_label.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis._get_label.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis._get_label.__dict__.__setitem__('stypy_function_name', 'Axis._get_label')
        Axis._get_label.__dict__.__setitem__('stypy_param_names_list', [])
        Axis._get_label.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis._get_label.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis._get_label.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis._get_label.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis._get_label.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis._get_label.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis._get_label', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_label', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_label(...)' code ##################

        
        # Call to NotImplementedError(...): (line 1163)
        # Processing the call arguments (line 1163)
        unicode_10182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 1163)
        kwargs_10183 = {}
        # Getting the type of 'NotImplementedError' (line 1163)
        NotImplementedError_10181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1163)
        NotImplementedError_call_result_10184 = invoke(stypy.reporting.localization.Localization(__file__, 1163, 14), NotImplementedError_10181, *[unicode_10182], **kwargs_10183)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1163, 8), NotImplementedError_call_result_10184, 'raise parameter', BaseException)
        
        # ################# End of '_get_label(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_label' in the type store
        # Getting the type of 'stypy_return_type' (line 1162)
        stypy_return_type_10185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10185)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_label'
        return stypy_return_type_10185


    @norecursion
    def _get_offset_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_offset_text'
        module_type_store = module_type_store.open_function_context('_get_offset_text', 1165, 4, False)
        # Assigning a type to the variable 'self' (line 1166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis._get_offset_text.__dict__.__setitem__('stypy_localization', localization)
        Axis._get_offset_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis._get_offset_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis._get_offset_text.__dict__.__setitem__('stypy_function_name', 'Axis._get_offset_text')
        Axis._get_offset_text.__dict__.__setitem__('stypy_param_names_list', [])
        Axis._get_offset_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis._get_offset_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis._get_offset_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis._get_offset_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis._get_offset_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis._get_offset_text.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis._get_offset_text', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_offset_text', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_offset_text(...)' code ##################

        
        # Call to NotImplementedError(...): (line 1166)
        # Processing the call arguments (line 1166)
        unicode_10187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1166, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 1166)
        kwargs_10188 = {}
        # Getting the type of 'NotImplementedError' (line 1166)
        NotImplementedError_10186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1166)
        NotImplementedError_call_result_10189 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 14), NotImplementedError_10186, *[unicode_10187], **kwargs_10188)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1166, 8), NotImplementedError_call_result_10189, 'raise parameter', BaseException)
        
        # ################# End of '_get_offset_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_offset_text' in the type store
        # Getting the type of 'stypy_return_type' (line 1165)
        stypy_return_type_10190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1165, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10190)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_offset_text'
        return stypy_return_type_10190


    @norecursion
    def get_gridlines(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_gridlines'
        module_type_store = module_type_store.open_function_context('get_gridlines', 1168, 4, False)
        # Assigning a type to the variable 'self' (line 1169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_gridlines.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_gridlines.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_gridlines.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_gridlines.__dict__.__setitem__('stypy_function_name', 'Axis.get_gridlines')
        Axis.get_gridlines.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_gridlines.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_gridlines.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_gridlines.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_gridlines.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_gridlines.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_gridlines.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_gridlines', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_gridlines', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_gridlines(...)' code ##################

        unicode_10191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1169, 8), 'unicode', u'Return the grid lines as a list of Line2D instance')
        
        # Assigning a Call to a Name (line 1170):
        
        # Assigning a Call to a Name (line 1170):
        
        # Call to get_major_ticks(...): (line 1170)
        # Processing the call keyword arguments (line 1170)
        kwargs_10194 = {}
        # Getting the type of 'self' (line 1170)
        self_10192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 16), 'self', False)
        # Obtaining the member 'get_major_ticks' of a type (line 1170)
        get_major_ticks_10193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1170, 16), self_10192, 'get_major_ticks')
        # Calling get_major_ticks(args, kwargs) (line 1170)
        get_major_ticks_call_result_10195 = invoke(stypy.reporting.localization.Localization(__file__, 1170, 16), get_major_ticks_10193, *[], **kwargs_10194)
        
        # Assigning a type to the variable 'ticks' (line 1170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1170, 8), 'ticks', get_major_ticks_call_result_10195)
        
        # Call to silent_list(...): (line 1171)
        # Processing the call arguments (line 1171)
        unicode_10198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1171, 33), 'unicode', u'Line2D gridline')
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'ticks' (line 1172)
        ticks_10201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 60), 'ticks', False)
        comprehension_10202 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1172, 34), ticks_10201)
        # Assigning a type to the variable 'tick' (line 1172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1172, 34), 'tick', comprehension_10202)
        # Getting the type of 'tick' (line 1172)
        tick_10199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 34), 'tick', False)
        # Obtaining the member 'gridline' of a type (line 1172)
        gridline_10200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 34), tick_10199, 'gridline')
        list_10203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1172, 34), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1172, 34), list_10203, gridline_10200)
        # Processing the call keyword arguments (line 1171)
        kwargs_10204 = {}
        # Getting the type of 'cbook' (line 1171)
        cbook_10196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 1171)
        silent_list_10197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 15), cbook_10196, 'silent_list')
        # Calling silent_list(args, kwargs) (line 1171)
        silent_list_call_result_10205 = invoke(stypy.reporting.localization.Localization(__file__, 1171, 15), silent_list_10197, *[unicode_10198, list_10203], **kwargs_10204)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1171, 8), 'stypy_return_type', silent_list_call_result_10205)
        
        # ################# End of 'get_gridlines(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_gridlines' in the type store
        # Getting the type of 'stypy_return_type' (line 1168)
        stypy_return_type_10206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10206)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_gridlines'
        return stypy_return_type_10206


    @norecursion
    def get_label(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_label'
        module_type_store = module_type_store.open_function_context('get_label', 1174, 4, False)
        # Assigning a type to the variable 'self' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_label.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_label.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_label.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_label.__dict__.__setitem__('stypy_function_name', 'Axis.get_label')
        Axis.get_label.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_label.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_label.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_label.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_label.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_label.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_label.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_label', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_label', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_label(...)' code ##################

        unicode_10207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 8), 'unicode', u'Return the axis label as a Text instance')
        # Getting the type of 'self' (line 1176)
        self_10208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 15), 'self')
        # Obtaining the member 'label' of a type (line 1176)
        label_10209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 15), self_10208, 'label')
        # Assigning a type to the variable 'stypy_return_type' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 8), 'stypy_return_type', label_10209)
        
        # ################# End of 'get_label(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_label' in the type store
        # Getting the type of 'stypy_return_type' (line 1174)
        stypy_return_type_10210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10210)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_label'
        return stypy_return_type_10210


    @norecursion
    def get_offset_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_offset_text'
        module_type_store = module_type_store.open_function_context('get_offset_text', 1178, 4, False)
        # Assigning a type to the variable 'self' (line 1179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_offset_text.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_offset_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_offset_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_offset_text.__dict__.__setitem__('stypy_function_name', 'Axis.get_offset_text')
        Axis.get_offset_text.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_offset_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_offset_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_offset_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_offset_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_offset_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_offset_text.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_offset_text', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_offset_text', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_offset_text(...)' code ##################

        unicode_10211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 8), 'unicode', u'Return the axis offsetText as a Text instance')
        # Getting the type of 'self' (line 1180)
        self_10212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 15), 'self')
        # Obtaining the member 'offsetText' of a type (line 1180)
        offsetText_10213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1180, 15), self_10212, 'offsetText')
        # Assigning a type to the variable 'stypy_return_type' (line 1180)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1180, 8), 'stypy_return_type', offsetText_10213)
        
        # ################# End of 'get_offset_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_offset_text' in the type store
        # Getting the type of 'stypy_return_type' (line 1178)
        stypy_return_type_10214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10214)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_offset_text'
        return stypy_return_type_10214


    @norecursion
    def get_pickradius(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_pickradius'
        module_type_store = module_type_store.open_function_context('get_pickradius', 1182, 4, False)
        # Assigning a type to the variable 'self' (line 1183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1183, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_pickradius.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_pickradius.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_pickradius.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_pickradius.__dict__.__setitem__('stypy_function_name', 'Axis.get_pickradius')
        Axis.get_pickradius.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_pickradius.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_pickradius.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_pickradius.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_pickradius.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_pickradius.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_pickradius.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_pickradius', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_pickradius', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_pickradius(...)' code ##################

        unicode_10215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1183, 8), 'unicode', u'Return the depth of the axis used by the picker')
        # Getting the type of 'self' (line 1184)
        self_10216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 15), 'self')
        # Obtaining the member 'pickradius' of a type (line 1184)
        pickradius_10217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1184, 15), self_10216, 'pickradius')
        # Assigning a type to the variable 'stypy_return_type' (line 1184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1184, 8), 'stypy_return_type', pickradius_10217)
        
        # ################# End of 'get_pickradius(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_pickradius' in the type store
        # Getting the type of 'stypy_return_type' (line 1182)
        stypy_return_type_10218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10218)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_pickradius'
        return stypy_return_type_10218


    @norecursion
    def get_majorticklabels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_majorticklabels'
        module_type_store = module_type_store.open_function_context('get_majorticklabels', 1186, 4, False)
        # Assigning a type to the variable 'self' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_majorticklabels.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_majorticklabels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_majorticklabels.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_majorticklabels.__dict__.__setitem__('stypy_function_name', 'Axis.get_majorticklabels')
        Axis.get_majorticklabels.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_majorticklabels.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_majorticklabels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_majorticklabels.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_majorticklabels.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_majorticklabels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_majorticklabels.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_majorticklabels', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_majorticklabels', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_majorticklabels(...)' code ##################

        unicode_10219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 8), 'unicode', u'Return a list of Text instances for the major ticklabels')
        
        # Assigning a Call to a Name (line 1188):
        
        # Assigning a Call to a Name (line 1188):
        
        # Call to get_major_ticks(...): (line 1188)
        # Processing the call keyword arguments (line 1188)
        kwargs_10222 = {}
        # Getting the type of 'self' (line 1188)
        self_10220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 16), 'self', False)
        # Obtaining the member 'get_major_ticks' of a type (line 1188)
        get_major_ticks_10221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 16), self_10220, 'get_major_ticks')
        # Calling get_major_ticks(args, kwargs) (line 1188)
        get_major_ticks_call_result_10223 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 16), get_major_ticks_10221, *[], **kwargs_10222)
        
        # Assigning a type to the variable 'ticks' (line 1188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 8), 'ticks', get_major_ticks_call_result_10223)
        
        # Assigning a ListComp to a Name (line 1189):
        
        # Assigning a ListComp to a Name (line 1189):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'ticks' (line 1189)
        ticks_10228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 43), 'ticks')
        comprehension_10229 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), ticks_10228)
        # Assigning a type to the variable 'tick' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 19), 'tick', comprehension_10229)
        # Getting the type of 'tick' (line 1189)
        tick_10226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 52), 'tick')
        # Obtaining the member 'label1On' of a type (line 1189)
        label1On_10227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 52), tick_10226, 'label1On')
        # Getting the type of 'tick' (line 1189)
        tick_10224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1189, 19), 'tick')
        # Obtaining the member 'label1' of a type (line 1189)
        label1_10225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1189, 19), tick_10224, 'label1')
        list_10230 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1189, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1189, 19), list_10230, label1_10225)
        # Assigning a type to the variable 'labels1' (line 1189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1189, 8), 'labels1', list_10230)
        
        # Assigning a ListComp to a Name (line 1190):
        
        # Assigning a ListComp to a Name (line 1190):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'ticks' (line 1190)
        ticks_10235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 43), 'ticks')
        comprehension_10236 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1190, 19), ticks_10235)
        # Assigning a type to the variable 'tick' (line 1190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 19), 'tick', comprehension_10236)
        # Getting the type of 'tick' (line 1190)
        tick_10233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 52), 'tick')
        # Obtaining the member 'label2On' of a type (line 1190)
        label2On_10234 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 52), tick_10233, 'label2On')
        # Getting the type of 'tick' (line 1190)
        tick_10231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 19), 'tick')
        # Obtaining the member 'label2' of a type (line 1190)
        label2_10232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 19), tick_10231, 'label2')
        list_10237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1190, 19), list_10237, label2_10232)
        # Assigning a type to the variable 'labels2' (line 1190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 8), 'labels2', list_10237)
        
        # Call to silent_list(...): (line 1191)
        # Processing the call arguments (line 1191)
        unicode_10240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1191, 33), 'unicode', u'Text major ticklabel')
        # Getting the type of 'labels1' (line 1191)
        labels1_10241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 57), 'labels1', False)
        # Getting the type of 'labels2' (line 1191)
        labels2_10242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 67), 'labels2', False)
        # Applying the binary operator '+' (line 1191)
        result_add_10243 = python_operator(stypy.reporting.localization.Localization(__file__, 1191, 57), '+', labels1_10241, labels2_10242)
        
        # Processing the call keyword arguments (line 1191)
        kwargs_10244 = {}
        # Getting the type of 'cbook' (line 1191)
        cbook_10238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 1191)
        silent_list_10239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 15), cbook_10238, 'silent_list')
        # Calling silent_list(args, kwargs) (line 1191)
        silent_list_call_result_10245 = invoke(stypy.reporting.localization.Localization(__file__, 1191, 15), silent_list_10239, *[unicode_10240, result_add_10243], **kwargs_10244)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 8), 'stypy_return_type', silent_list_call_result_10245)
        
        # ################# End of 'get_majorticklabels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_majorticklabels' in the type store
        # Getting the type of 'stypy_return_type' (line 1186)
        stypy_return_type_10246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10246)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_majorticklabels'
        return stypy_return_type_10246


    @norecursion
    def get_minorticklabels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_minorticklabels'
        module_type_store = module_type_store.open_function_context('get_minorticklabels', 1193, 4, False)
        # Assigning a type to the variable 'self' (line 1194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_minorticklabels.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_minorticklabels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_minorticklabels.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_minorticklabels.__dict__.__setitem__('stypy_function_name', 'Axis.get_minorticklabels')
        Axis.get_minorticklabels.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_minorticklabels.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_minorticklabels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_minorticklabels.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_minorticklabels.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_minorticklabels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_minorticklabels.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_minorticklabels', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_minorticklabels', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_minorticklabels(...)' code ##################

        unicode_10247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 8), 'unicode', u'Return a list of Text instances for the minor ticklabels')
        
        # Assigning a Call to a Name (line 1195):
        
        # Assigning a Call to a Name (line 1195):
        
        # Call to get_minor_ticks(...): (line 1195)
        # Processing the call keyword arguments (line 1195)
        kwargs_10250 = {}
        # Getting the type of 'self' (line 1195)
        self_10248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 16), 'self', False)
        # Obtaining the member 'get_minor_ticks' of a type (line 1195)
        get_minor_ticks_10249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 16), self_10248, 'get_minor_ticks')
        # Calling get_minor_ticks(args, kwargs) (line 1195)
        get_minor_ticks_call_result_10251 = invoke(stypy.reporting.localization.Localization(__file__, 1195, 16), get_minor_ticks_10249, *[], **kwargs_10250)
        
        # Assigning a type to the variable 'ticks' (line 1195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 8), 'ticks', get_minor_ticks_call_result_10251)
        
        # Assigning a ListComp to a Name (line 1196):
        
        # Assigning a ListComp to a Name (line 1196):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'ticks' (line 1196)
        ticks_10256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 43), 'ticks')
        comprehension_10257 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1196, 19), ticks_10256)
        # Assigning a type to the variable 'tick' (line 1196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 19), 'tick', comprehension_10257)
        # Getting the type of 'tick' (line 1196)
        tick_10254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 52), 'tick')
        # Obtaining the member 'label1On' of a type (line 1196)
        label1On_10255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1196, 52), tick_10254, 'label1On')
        # Getting the type of 'tick' (line 1196)
        tick_10252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 19), 'tick')
        # Obtaining the member 'label1' of a type (line 1196)
        label1_10253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1196, 19), tick_10252, 'label1')
        list_10258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1196, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1196, 19), list_10258, label1_10253)
        # Assigning a type to the variable 'labels1' (line 1196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 8), 'labels1', list_10258)
        
        # Assigning a ListComp to a Name (line 1197):
        
        # Assigning a ListComp to a Name (line 1197):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'ticks' (line 1197)
        ticks_10263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 43), 'ticks')
        comprehension_10264 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1197, 19), ticks_10263)
        # Assigning a type to the variable 'tick' (line 1197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 19), 'tick', comprehension_10264)
        # Getting the type of 'tick' (line 1197)
        tick_10261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 52), 'tick')
        # Obtaining the member 'label2On' of a type (line 1197)
        label2On_10262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 52), tick_10261, 'label2On')
        # Getting the type of 'tick' (line 1197)
        tick_10259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 19), 'tick')
        # Obtaining the member 'label2' of a type (line 1197)
        label2_10260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 19), tick_10259, 'label2')
        list_10265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1197, 19), list_10265, label2_10260)
        # Assigning a type to the variable 'labels2' (line 1197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'labels2', list_10265)
        
        # Call to silent_list(...): (line 1198)
        # Processing the call arguments (line 1198)
        unicode_10268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 33), 'unicode', u'Text minor ticklabel')
        # Getting the type of 'labels1' (line 1198)
        labels1_10269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 57), 'labels1', False)
        # Getting the type of 'labels2' (line 1198)
        labels2_10270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 67), 'labels2', False)
        # Applying the binary operator '+' (line 1198)
        result_add_10271 = python_operator(stypy.reporting.localization.Localization(__file__, 1198, 57), '+', labels1_10269, labels2_10270)
        
        # Processing the call keyword arguments (line 1198)
        kwargs_10272 = {}
        # Getting the type of 'cbook' (line 1198)
        cbook_10266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 1198)
        silent_list_10267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 15), cbook_10266, 'silent_list')
        # Calling silent_list(args, kwargs) (line 1198)
        silent_list_call_result_10273 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 15), silent_list_10267, *[unicode_10268, result_add_10271], **kwargs_10272)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1198, 8), 'stypy_return_type', silent_list_call_result_10273)
        
        # ################# End of 'get_minorticklabels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_minorticklabels' in the type store
        # Getting the type of 'stypy_return_type' (line 1193)
        stypy_return_type_10274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10274)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_minorticklabels'
        return stypy_return_type_10274


    @norecursion
    def get_ticklabels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1200)
        False_10275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 35), 'False')
        # Getting the type of 'None' (line 1200)
        None_10276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 48), 'None')
        defaults = [False_10275, None_10276]
        # Create a new context for function 'get_ticklabels'
        module_type_store = module_type_store.open_function_context('get_ticklabels', 1200, 4, False)
        # Assigning a type to the variable 'self' (line 1201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_ticklabels.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_ticklabels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_ticklabels.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_ticklabels.__dict__.__setitem__('stypy_function_name', 'Axis.get_ticklabels')
        Axis.get_ticklabels.__dict__.__setitem__('stypy_param_names_list', ['minor', 'which'])
        Axis.get_ticklabels.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_ticklabels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_ticklabels.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_ticklabels.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_ticklabels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_ticklabels.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_ticklabels', ['minor', 'which'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ticklabels', localization, ['minor', 'which'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ticklabels(...)' code ##################

        unicode_10277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1220, (-1)), 'unicode', u"\n        Get the x tick labels as a list of :class:`~matplotlib.text.Text`\n        instances.\n\n        Parameters\n        ----------\n        minor : bool\n           If True return the minor ticklabels,\n           else return the major ticklabels\n\n        which : None, ('minor', 'major', 'both')\n           Overrides `minor`.\n\n           Selects which ticklabels to return\n\n        Returns\n        -------\n        ret : list\n           List of :class:`~matplotlib.text.Text` instances.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 1222)
        # Getting the type of 'which' (line 1222)
        which_10278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 8), 'which')
        # Getting the type of 'None' (line 1222)
        None_10279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 24), 'None')
        
        (may_be_10280, more_types_in_union_10281) = may_not_be_none(which_10278, None_10279)

        if may_be_10280:

            if more_types_in_union_10281:
                # Runtime conditional SSA (line 1222)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Getting the type of 'which' (line 1223)
            which_10282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 15), 'which')
            unicode_10283 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1223, 24), 'unicode', u'minor')
            # Applying the binary operator '==' (line 1223)
            result_eq_10284 = python_operator(stypy.reporting.localization.Localization(__file__, 1223, 15), '==', which_10282, unicode_10283)
            
            # Testing the type of an if condition (line 1223)
            if_condition_10285 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1223, 12), result_eq_10284)
            # Assigning a type to the variable 'if_condition_10285' (line 1223)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 12), 'if_condition_10285', if_condition_10285)
            # SSA begins for if statement (line 1223)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to get_minorticklabels(...): (line 1224)
            # Processing the call keyword arguments (line 1224)
            kwargs_10288 = {}
            # Getting the type of 'self' (line 1224)
            self_10286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 23), 'self', False)
            # Obtaining the member 'get_minorticklabels' of a type (line 1224)
            get_minorticklabels_10287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 23), self_10286, 'get_minorticklabels')
            # Calling get_minorticklabels(args, kwargs) (line 1224)
            get_minorticklabels_call_result_10289 = invoke(stypy.reporting.localization.Localization(__file__, 1224, 23), get_minorticklabels_10287, *[], **kwargs_10288)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1224)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1224, 16), 'stypy_return_type', get_minorticklabels_call_result_10289)
            # SSA branch for the else part of an if statement (line 1223)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'which' (line 1225)
            which_10290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 17), 'which')
            unicode_10291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 26), 'unicode', u'major')
            # Applying the binary operator '==' (line 1225)
            result_eq_10292 = python_operator(stypy.reporting.localization.Localization(__file__, 1225, 17), '==', which_10290, unicode_10291)
            
            # Testing the type of an if condition (line 1225)
            if_condition_10293 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1225, 17), result_eq_10292)
            # Assigning a type to the variable 'if_condition_10293' (line 1225)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1225, 17), 'if_condition_10293', if_condition_10293)
            # SSA begins for if statement (line 1225)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to get_majorticklabels(...): (line 1226)
            # Processing the call keyword arguments (line 1226)
            kwargs_10296 = {}
            # Getting the type of 'self' (line 1226)
            self_10294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 23), 'self', False)
            # Obtaining the member 'get_majorticklabels' of a type (line 1226)
            get_majorticklabels_10295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 23), self_10294, 'get_majorticklabels')
            # Calling get_majorticklabels(args, kwargs) (line 1226)
            get_majorticklabels_call_result_10297 = invoke(stypy.reporting.localization.Localization(__file__, 1226, 23), get_majorticklabels_10295, *[], **kwargs_10296)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1226)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 16), 'stypy_return_type', get_majorticklabels_call_result_10297)
            # SSA branch for the else part of an if statement (line 1225)
            module_type_store.open_ssa_branch('else')
            
            
            # Getting the type of 'which' (line 1227)
            which_10298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 17), 'which')
            unicode_10299 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 26), 'unicode', u'both')
            # Applying the binary operator '==' (line 1227)
            result_eq_10300 = python_operator(stypy.reporting.localization.Localization(__file__, 1227, 17), '==', which_10298, unicode_10299)
            
            # Testing the type of an if condition (line 1227)
            if_condition_10301 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1227, 17), result_eq_10300)
            # Assigning a type to the variable 'if_condition_10301' (line 1227)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1227, 17), 'if_condition_10301', if_condition_10301)
            # SSA begins for if statement (line 1227)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to get_majorticklabels(...): (line 1228)
            # Processing the call keyword arguments (line 1228)
            kwargs_10304 = {}
            # Getting the type of 'self' (line 1228)
            self_10302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 23), 'self', False)
            # Obtaining the member 'get_majorticklabels' of a type (line 1228)
            get_majorticklabels_10303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1228, 23), self_10302, 'get_majorticklabels')
            # Calling get_majorticklabels(args, kwargs) (line 1228)
            get_majorticklabels_call_result_10305 = invoke(stypy.reporting.localization.Localization(__file__, 1228, 23), get_majorticklabels_10303, *[], **kwargs_10304)
            
            
            # Call to get_minorticklabels(...): (line 1228)
            # Processing the call keyword arguments (line 1228)
            kwargs_10308 = {}
            # Getting the type of 'self' (line 1228)
            self_10306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 52), 'self', False)
            # Obtaining the member 'get_minorticklabels' of a type (line 1228)
            get_minorticklabels_10307 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1228, 52), self_10306, 'get_minorticklabels')
            # Calling get_minorticklabels(args, kwargs) (line 1228)
            get_minorticklabels_call_result_10309 = invoke(stypy.reporting.localization.Localization(__file__, 1228, 52), get_minorticklabels_10307, *[], **kwargs_10308)
            
            # Applying the binary operator '+' (line 1228)
            result_add_10310 = python_operator(stypy.reporting.localization.Localization(__file__, 1228, 23), '+', get_majorticklabels_call_result_10305, get_minorticklabels_call_result_10309)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1228)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 16), 'stypy_return_type', result_add_10310)
            # SSA branch for the else part of an if statement (line 1227)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 1230)
            # Processing the call arguments (line 1230)
            unicode_10312 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1230, 33), 'unicode', u"`which` must be one of ('minor', 'major', 'both') not ")
            
            # Call to str(...): (line 1231)
            # Processing the call arguments (line 1231)
            # Getting the type of 'which' (line 1231)
            which_10314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 54), 'which', False)
            # Processing the call keyword arguments (line 1231)
            kwargs_10315 = {}
            # Getting the type of 'str' (line 1231)
            str_10313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 50), 'str', False)
            # Calling str(args, kwargs) (line 1231)
            str_call_result_10316 = invoke(stypy.reporting.localization.Localization(__file__, 1231, 50), str_10313, *[which_10314], **kwargs_10315)
            
            # Applying the binary operator '+' (line 1230)
            result_add_10317 = python_operator(stypy.reporting.localization.Localization(__file__, 1230, 33), '+', unicode_10312, str_call_result_10316)
            
            # Processing the call keyword arguments (line 1230)
            kwargs_10318 = {}
            # Getting the type of 'ValueError' (line 1230)
            ValueError_10311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1230)
            ValueError_call_result_10319 = invoke(stypy.reporting.localization.Localization(__file__, 1230, 22), ValueError_10311, *[result_add_10317], **kwargs_10318)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1230, 16), ValueError_call_result_10319, 'raise parameter', BaseException)
            # SSA join for if statement (line 1227)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1225)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1223)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_10281:
                # SSA join for if statement (line 1222)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'minor' (line 1232)
        minor_10320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1232, 11), 'minor')
        # Testing the type of an if condition (line 1232)
        if_condition_10321 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1232, 8), minor_10320)
        # Assigning a type to the variable 'if_condition_10321' (line 1232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 8), 'if_condition_10321', if_condition_10321)
        # SSA begins for if statement (line 1232)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to get_minorticklabels(...): (line 1233)
        # Processing the call keyword arguments (line 1233)
        kwargs_10324 = {}
        # Getting the type of 'self' (line 1233)
        self_10322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1233, 19), 'self', False)
        # Obtaining the member 'get_minorticklabels' of a type (line 1233)
        get_minorticklabels_10323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1233, 19), self_10322, 'get_minorticklabels')
        # Calling get_minorticklabels(args, kwargs) (line 1233)
        get_minorticklabels_call_result_10325 = invoke(stypy.reporting.localization.Localization(__file__, 1233, 19), get_minorticklabels_10323, *[], **kwargs_10324)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1233, 12), 'stypy_return_type', get_minorticklabels_call_result_10325)
        # SSA join for if statement (line 1232)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to get_majorticklabels(...): (line 1234)
        # Processing the call keyword arguments (line 1234)
        kwargs_10328 = {}
        # Getting the type of 'self' (line 1234)
        self_10326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1234, 15), 'self', False)
        # Obtaining the member 'get_majorticklabels' of a type (line 1234)
        get_majorticklabels_10327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1234, 15), self_10326, 'get_majorticklabels')
        # Calling get_majorticklabels(args, kwargs) (line 1234)
        get_majorticklabels_call_result_10329 = invoke(stypy.reporting.localization.Localization(__file__, 1234, 15), get_majorticklabels_10327, *[], **kwargs_10328)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1234, 8), 'stypy_return_type', get_majorticklabels_call_result_10329)
        
        # ################# End of 'get_ticklabels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ticklabels' in the type store
        # Getting the type of 'stypy_return_type' (line 1200)
        stypy_return_type_10330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1200, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10330)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ticklabels'
        return stypy_return_type_10330


    @norecursion
    def get_majorticklines(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_majorticklines'
        module_type_store = module_type_store.open_function_context('get_majorticklines', 1236, 4, False)
        # Assigning a type to the variable 'self' (line 1237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1237, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_majorticklines.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_majorticklines.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_majorticklines.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_majorticklines.__dict__.__setitem__('stypy_function_name', 'Axis.get_majorticklines')
        Axis.get_majorticklines.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_majorticklines.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_majorticklines.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_majorticklines.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_majorticklines.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_majorticklines.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_majorticklines.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_majorticklines', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_majorticklines', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_majorticklines(...)' code ##################

        unicode_10331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1237, 8), 'unicode', u'Return the major tick lines as a list of Line2D instances')
        
        # Assigning a List to a Name (line 1238):
        
        # Assigning a List to a Name (line 1238):
        
        # Obtaining an instance of the builtin type 'list' (line 1238)
        list_10332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1238)
        
        # Assigning a type to the variable 'lines' (line 1238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 8), 'lines', list_10332)
        
        # Assigning a Call to a Name (line 1239):
        
        # Assigning a Call to a Name (line 1239):
        
        # Call to get_major_ticks(...): (line 1239)
        # Processing the call keyword arguments (line 1239)
        kwargs_10335 = {}
        # Getting the type of 'self' (line 1239)
        self_10333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 16), 'self', False)
        # Obtaining the member 'get_major_ticks' of a type (line 1239)
        get_major_ticks_10334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 16), self_10333, 'get_major_ticks')
        # Calling get_major_ticks(args, kwargs) (line 1239)
        get_major_ticks_call_result_10336 = invoke(stypy.reporting.localization.Localization(__file__, 1239, 16), get_major_ticks_10334, *[], **kwargs_10335)
        
        # Assigning a type to the variable 'ticks' (line 1239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1239, 8), 'ticks', get_major_ticks_call_result_10336)
        
        # Getting the type of 'ticks' (line 1240)
        ticks_10337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 20), 'ticks')
        # Testing the type of a for loop iterable (line 1240)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1240, 8), ticks_10337)
        # Getting the type of the for loop variable (line 1240)
        for_loop_var_10338 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1240, 8), ticks_10337)
        # Assigning a type to the variable 'tick' (line 1240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 8), 'tick', for_loop_var_10338)
        # SSA begins for a for statement (line 1240)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 1241)
        # Processing the call arguments (line 1241)
        # Getting the type of 'tick' (line 1241)
        tick_10341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 25), 'tick', False)
        # Obtaining the member 'tick1line' of a type (line 1241)
        tick1line_10342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 25), tick_10341, 'tick1line')
        # Processing the call keyword arguments (line 1241)
        kwargs_10343 = {}
        # Getting the type of 'lines' (line 1241)
        lines_10339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 12), 'lines', False)
        # Obtaining the member 'append' of a type (line 1241)
        append_10340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 12), lines_10339, 'append')
        # Calling append(args, kwargs) (line 1241)
        append_call_result_10344 = invoke(stypy.reporting.localization.Localization(__file__, 1241, 12), append_10340, *[tick1line_10342], **kwargs_10343)
        
        
        # Call to append(...): (line 1242)
        # Processing the call arguments (line 1242)
        # Getting the type of 'tick' (line 1242)
        tick_10347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 25), 'tick', False)
        # Obtaining the member 'tick2line' of a type (line 1242)
        tick2line_10348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 25), tick_10347, 'tick2line')
        # Processing the call keyword arguments (line 1242)
        kwargs_10349 = {}
        # Getting the type of 'lines' (line 1242)
        lines_10345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1242, 12), 'lines', False)
        # Obtaining the member 'append' of a type (line 1242)
        append_10346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1242, 12), lines_10345, 'append')
        # Calling append(args, kwargs) (line 1242)
        append_call_result_10350 = invoke(stypy.reporting.localization.Localization(__file__, 1242, 12), append_10346, *[tick2line_10348], **kwargs_10349)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to silent_list(...): (line 1243)
        # Processing the call arguments (line 1243)
        unicode_10353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 33), 'unicode', u'Line2D ticklines')
        # Getting the type of 'lines' (line 1243)
        lines_10354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 53), 'lines', False)
        # Processing the call keyword arguments (line 1243)
        kwargs_10355 = {}
        # Getting the type of 'cbook' (line 1243)
        cbook_10351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 1243)
        silent_list_10352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 15), cbook_10351, 'silent_list')
        # Calling silent_list(args, kwargs) (line 1243)
        silent_list_call_result_10356 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 15), silent_list_10352, *[unicode_10353, lines_10354], **kwargs_10355)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 8), 'stypy_return_type', silent_list_call_result_10356)
        
        # ################# End of 'get_majorticklines(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_majorticklines' in the type store
        # Getting the type of 'stypy_return_type' (line 1236)
        stypy_return_type_10357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10357)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_majorticklines'
        return stypy_return_type_10357


    @norecursion
    def get_minorticklines(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_minorticklines'
        module_type_store = module_type_store.open_function_context('get_minorticklines', 1245, 4, False)
        # Assigning a type to the variable 'self' (line 1246)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1246, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_minorticklines.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_minorticklines.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_minorticklines.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_minorticklines.__dict__.__setitem__('stypy_function_name', 'Axis.get_minorticklines')
        Axis.get_minorticklines.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_minorticklines.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_minorticklines.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_minorticklines.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_minorticklines.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_minorticklines.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_minorticklines.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_minorticklines', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_minorticklines', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_minorticklines(...)' code ##################

        unicode_10358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1246, 8), 'unicode', u'Return the minor tick lines as a list of Line2D instances')
        
        # Assigning a List to a Name (line 1247):
        
        # Assigning a List to a Name (line 1247):
        
        # Obtaining an instance of the builtin type 'list' (line 1247)
        list_10359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 16), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1247)
        
        # Assigning a type to the variable 'lines' (line 1247)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1247, 8), 'lines', list_10359)
        
        # Assigning a Call to a Name (line 1248):
        
        # Assigning a Call to a Name (line 1248):
        
        # Call to get_minor_ticks(...): (line 1248)
        # Processing the call keyword arguments (line 1248)
        kwargs_10362 = {}
        # Getting the type of 'self' (line 1248)
        self_10360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 16), 'self', False)
        # Obtaining the member 'get_minor_ticks' of a type (line 1248)
        get_minor_ticks_10361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 16), self_10360, 'get_minor_ticks')
        # Calling get_minor_ticks(args, kwargs) (line 1248)
        get_minor_ticks_call_result_10363 = invoke(stypy.reporting.localization.Localization(__file__, 1248, 16), get_minor_ticks_10361, *[], **kwargs_10362)
        
        # Assigning a type to the variable 'ticks' (line 1248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1248, 8), 'ticks', get_minor_ticks_call_result_10363)
        
        # Getting the type of 'ticks' (line 1249)
        ticks_10364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 20), 'ticks')
        # Testing the type of a for loop iterable (line 1249)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1249, 8), ticks_10364)
        # Getting the type of the for loop variable (line 1249)
        for_loop_var_10365 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1249, 8), ticks_10364)
        # Assigning a type to the variable 'tick' (line 1249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 8), 'tick', for_loop_var_10365)
        # SSA begins for a for statement (line 1249)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to append(...): (line 1250)
        # Processing the call arguments (line 1250)
        # Getting the type of 'tick' (line 1250)
        tick_10368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 25), 'tick', False)
        # Obtaining the member 'tick1line' of a type (line 1250)
        tick1line_10369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 25), tick_10368, 'tick1line')
        # Processing the call keyword arguments (line 1250)
        kwargs_10370 = {}
        # Getting the type of 'lines' (line 1250)
        lines_10366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 12), 'lines', False)
        # Obtaining the member 'append' of a type (line 1250)
        append_10367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 12), lines_10366, 'append')
        # Calling append(args, kwargs) (line 1250)
        append_call_result_10371 = invoke(stypy.reporting.localization.Localization(__file__, 1250, 12), append_10367, *[tick1line_10369], **kwargs_10370)
        
        
        # Call to append(...): (line 1251)
        # Processing the call arguments (line 1251)
        # Getting the type of 'tick' (line 1251)
        tick_10374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 25), 'tick', False)
        # Obtaining the member 'tick2line' of a type (line 1251)
        tick2line_10375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 25), tick_10374, 'tick2line')
        # Processing the call keyword arguments (line 1251)
        kwargs_10376 = {}
        # Getting the type of 'lines' (line 1251)
        lines_10372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 12), 'lines', False)
        # Obtaining the member 'append' of a type (line 1251)
        append_10373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 12), lines_10372, 'append')
        # Calling append(args, kwargs) (line 1251)
        append_call_result_10377 = invoke(stypy.reporting.localization.Localization(__file__, 1251, 12), append_10373, *[tick2line_10375], **kwargs_10376)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to silent_list(...): (line 1252)
        # Processing the call arguments (line 1252)
        unicode_10380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1252, 33), 'unicode', u'Line2D ticklines')
        # Getting the type of 'lines' (line 1252)
        lines_10381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 53), 'lines', False)
        # Processing the call keyword arguments (line 1252)
        kwargs_10382 = {}
        # Getting the type of 'cbook' (line 1252)
        cbook_10378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 15), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 1252)
        silent_list_10379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1252, 15), cbook_10378, 'silent_list')
        # Calling silent_list(args, kwargs) (line 1252)
        silent_list_call_result_10383 = invoke(stypy.reporting.localization.Localization(__file__, 1252, 15), silent_list_10379, *[unicode_10380, lines_10381], **kwargs_10382)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 8), 'stypy_return_type', silent_list_call_result_10383)
        
        # ################# End of 'get_minorticklines(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_minorticklines' in the type store
        # Getting the type of 'stypy_return_type' (line 1245)
        stypy_return_type_10384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10384)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_minorticklines'
        return stypy_return_type_10384


    @norecursion
    def get_ticklines(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1254)
        False_10385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 34), 'False')
        defaults = [False_10385]
        # Create a new context for function 'get_ticklines'
        module_type_store = module_type_store.open_function_context('get_ticklines', 1254, 4, False)
        # Assigning a type to the variable 'self' (line 1255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_ticklines.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_ticklines.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_ticklines.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_ticklines.__dict__.__setitem__('stypy_function_name', 'Axis.get_ticklines')
        Axis.get_ticklines.__dict__.__setitem__('stypy_param_names_list', ['minor'])
        Axis.get_ticklines.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_ticklines.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_ticklines.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_ticklines.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_ticklines.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_ticklines.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_ticklines', ['minor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ticklines', localization, ['minor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ticklines(...)' code ##################

        unicode_10386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1255, 8), 'unicode', u'Return the tick lines as a list of Line2D instances')
        
        # Getting the type of 'minor' (line 1256)
        minor_10387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 11), 'minor')
        # Testing the type of an if condition (line 1256)
        if_condition_10388 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1256, 8), minor_10387)
        # Assigning a type to the variable 'if_condition_10388' (line 1256)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1256, 8), 'if_condition_10388', if_condition_10388)
        # SSA begins for if statement (line 1256)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to get_minorticklines(...): (line 1257)
        # Processing the call keyword arguments (line 1257)
        kwargs_10391 = {}
        # Getting the type of 'self' (line 1257)
        self_10389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 19), 'self', False)
        # Obtaining the member 'get_minorticklines' of a type (line 1257)
        get_minorticklines_10390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1257, 19), self_10389, 'get_minorticklines')
        # Calling get_minorticklines(args, kwargs) (line 1257)
        get_minorticklines_call_result_10392 = invoke(stypy.reporting.localization.Localization(__file__, 1257, 19), get_minorticklines_10390, *[], **kwargs_10391)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 12), 'stypy_return_type', get_minorticklines_call_result_10392)
        # SSA join for if statement (line 1256)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to get_majorticklines(...): (line 1258)
        # Processing the call keyword arguments (line 1258)
        kwargs_10395 = {}
        # Getting the type of 'self' (line 1258)
        self_10393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 15), 'self', False)
        # Obtaining the member 'get_majorticklines' of a type (line 1258)
        get_majorticklines_10394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1258, 15), self_10393, 'get_majorticklines')
        # Calling get_majorticklines(args, kwargs) (line 1258)
        get_majorticklines_call_result_10396 = invoke(stypy.reporting.localization.Localization(__file__, 1258, 15), get_majorticklines_10394, *[], **kwargs_10395)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 8), 'stypy_return_type', get_majorticklines_call_result_10396)
        
        # ################# End of 'get_ticklines(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ticklines' in the type store
        # Getting the type of 'stypy_return_type' (line 1254)
        stypy_return_type_10397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10397)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ticklines'
        return stypy_return_type_10397


    @norecursion
    def get_majorticklocs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_majorticklocs'
        module_type_store = module_type_store.open_function_context('get_majorticklocs', 1260, 4, False)
        # Assigning a type to the variable 'self' (line 1261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1261, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_majorticklocs.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_majorticklocs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_majorticklocs.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_majorticklocs.__dict__.__setitem__('stypy_function_name', 'Axis.get_majorticklocs')
        Axis.get_majorticklocs.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_majorticklocs.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_majorticklocs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_majorticklocs.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_majorticklocs.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_majorticklocs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_majorticklocs.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_majorticklocs', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_majorticklocs', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_majorticklocs(...)' code ##################

        unicode_10398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, 8), 'unicode', u'Get the major tick locations in data coordinates as a numpy array')
        
        # Call to locator(...): (line 1262)
        # Processing the call keyword arguments (line 1262)
        kwargs_10402 = {}
        # Getting the type of 'self' (line 1262)
        self_10399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 15), 'self', False)
        # Obtaining the member 'major' of a type (line 1262)
        major_10400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1262, 15), self_10399, 'major')
        # Obtaining the member 'locator' of a type (line 1262)
        locator_10401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1262, 15), major_10400, 'locator')
        # Calling locator(args, kwargs) (line 1262)
        locator_call_result_10403 = invoke(stypy.reporting.localization.Localization(__file__, 1262, 15), locator_10401, *[], **kwargs_10402)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1262, 8), 'stypy_return_type', locator_call_result_10403)
        
        # ################# End of 'get_majorticklocs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_majorticklocs' in the type store
        # Getting the type of 'stypy_return_type' (line 1260)
        stypy_return_type_10404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1260, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10404)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_majorticklocs'
        return stypy_return_type_10404


    @norecursion
    def get_minorticklocs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_minorticklocs'
        module_type_store = module_type_store.open_function_context('get_minorticklocs', 1264, 4, False)
        # Assigning a type to the variable 'self' (line 1265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1265, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_minorticklocs.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_minorticklocs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_minorticklocs.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_minorticklocs.__dict__.__setitem__('stypy_function_name', 'Axis.get_minorticklocs')
        Axis.get_minorticklocs.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_minorticklocs.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_minorticklocs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_minorticklocs.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_minorticklocs.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_minorticklocs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_minorticklocs.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_minorticklocs', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_minorticklocs', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_minorticklocs(...)' code ##################

        unicode_10405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1265, 8), 'unicode', u'Get the minor tick locations in data coordinates as a numpy array')
        
        # Call to locator(...): (line 1266)
        # Processing the call keyword arguments (line 1266)
        kwargs_10409 = {}
        # Getting the type of 'self' (line 1266)
        self_10406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 15), 'self', False)
        # Obtaining the member 'minor' of a type (line 1266)
        minor_10407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 15), self_10406, 'minor')
        # Obtaining the member 'locator' of a type (line 1266)
        locator_10408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 15), minor_10407, 'locator')
        # Calling locator(args, kwargs) (line 1266)
        locator_call_result_10410 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 15), locator_10408, *[], **kwargs_10409)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 8), 'stypy_return_type', locator_call_result_10410)
        
        # ################# End of 'get_minorticklocs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_minorticklocs' in the type store
        # Getting the type of 'stypy_return_type' (line 1264)
        stypy_return_type_10411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10411)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_minorticklocs'
        return stypy_return_type_10411


    @norecursion
    def get_ticklocs(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1268)
        False_10412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 33), 'False')
        defaults = [False_10412]
        # Create a new context for function 'get_ticklocs'
        module_type_store = module_type_store.open_function_context('get_ticklocs', 1268, 4, False)
        # Assigning a type to the variable 'self' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_ticklocs.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_ticklocs.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_ticklocs.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_ticklocs.__dict__.__setitem__('stypy_function_name', 'Axis.get_ticklocs')
        Axis.get_ticklocs.__dict__.__setitem__('stypy_param_names_list', ['minor'])
        Axis.get_ticklocs.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_ticklocs.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_ticklocs.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_ticklocs.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_ticklocs.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_ticklocs.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_ticklocs', ['minor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ticklocs', localization, ['minor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ticklocs(...)' code ##################

        unicode_10413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1269, 8), 'unicode', u'Get the tick locations in data coordinates as a numpy array')
        
        # Getting the type of 'minor' (line 1270)
        minor_10414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 11), 'minor')
        # Testing the type of an if condition (line 1270)
        if_condition_10415 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1270, 8), minor_10414)
        # Assigning a type to the variable 'if_condition_10415' (line 1270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 8), 'if_condition_10415', if_condition_10415)
        # SSA begins for if statement (line 1270)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to locator(...): (line 1271)
        # Processing the call keyword arguments (line 1271)
        kwargs_10419 = {}
        # Getting the type of 'self' (line 1271)
        self_10416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 19), 'self', False)
        # Obtaining the member 'minor' of a type (line 1271)
        minor_10417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 19), self_10416, 'minor')
        # Obtaining the member 'locator' of a type (line 1271)
        locator_10418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1271, 19), minor_10417, 'locator')
        # Calling locator(args, kwargs) (line 1271)
        locator_call_result_10420 = invoke(stypy.reporting.localization.Localization(__file__, 1271, 19), locator_10418, *[], **kwargs_10419)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 12), 'stypy_return_type', locator_call_result_10420)
        # SSA join for if statement (line 1270)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to locator(...): (line 1272)
        # Processing the call keyword arguments (line 1272)
        kwargs_10424 = {}
        # Getting the type of 'self' (line 1272)
        self_10421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 15), 'self', False)
        # Obtaining the member 'major' of a type (line 1272)
        major_10422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 15), self_10421, 'major')
        # Obtaining the member 'locator' of a type (line 1272)
        locator_10423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 15), major_10422, 'locator')
        # Calling locator(args, kwargs) (line 1272)
        locator_call_result_10425 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 15), locator_10423, *[], **kwargs_10424)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 8), 'stypy_return_type', locator_call_result_10425)
        
        # ################# End of 'get_ticklocs(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ticklocs' in the type store
        # Getting the type of 'stypy_return_type' (line 1268)
        stypy_return_type_10426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1268, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10426)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ticklocs'
        return stypy_return_type_10426


    @norecursion
    def get_ticks_direction(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1274)
        False_10427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 40), 'False')
        defaults = [False_10427]
        # Create a new context for function 'get_ticks_direction'
        module_type_store = module_type_store.open_function_context('get_ticks_direction', 1274, 4, False)
        # Assigning a type to the variable 'self' (line 1275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_ticks_direction.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_ticks_direction.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_ticks_direction.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_ticks_direction.__dict__.__setitem__('stypy_function_name', 'Axis.get_ticks_direction')
        Axis.get_ticks_direction.__dict__.__setitem__('stypy_param_names_list', ['minor'])
        Axis.get_ticks_direction.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_ticks_direction.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_ticks_direction.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_ticks_direction.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_ticks_direction.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_ticks_direction.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_ticks_direction', ['minor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ticks_direction', localization, ['minor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ticks_direction(...)' code ##################

        unicode_10428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1288, (-1)), 'unicode', u'\n        Get the tick directions as a numpy array\n\n        Parameters\n        ----------\n        minor : boolean\n            True to return the minor tick directions,\n            False to return the major tick directions,\n            Default is False\n\n        Returns\n        -------\n        numpy array of tick directions\n        ')
        
        # Getting the type of 'minor' (line 1289)
        minor_10429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 11), 'minor')
        # Testing the type of an if condition (line 1289)
        if_condition_10430 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1289, 8), minor_10429)
        # Assigning a type to the variable 'if_condition_10430' (line 1289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 8), 'if_condition_10430', if_condition_10430)
        # SSA begins for if statement (line 1289)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to array(...): (line 1290)
        # Processing the call arguments (line 1290)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to get_minor_ticks(...): (line 1291)
        # Processing the call keyword arguments (line 1291)
        kwargs_10437 = {}
        # Getting the type of 'self' (line 1291)
        self_10435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 43), 'self', False)
        # Obtaining the member 'get_minor_ticks' of a type (line 1291)
        get_minor_ticks_10436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 43), self_10435, 'get_minor_ticks')
        # Calling get_minor_ticks(args, kwargs) (line 1291)
        get_minor_ticks_call_result_10438 = invoke(stypy.reporting.localization.Localization(__file__, 1291, 43), get_minor_ticks_10436, *[], **kwargs_10437)
        
        comprehension_10439 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1291, 17), get_minor_ticks_call_result_10438)
        # Assigning a type to the variable 'tick' (line 1291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 17), 'tick', comprehension_10439)
        # Getting the type of 'tick' (line 1291)
        tick_10433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 17), 'tick', False)
        # Obtaining the member '_tickdir' of a type (line 1291)
        _tickdir_10434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 17), tick_10433, '_tickdir')
        list_10440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1291, 17), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1291, 17), list_10440, _tickdir_10434)
        # Processing the call keyword arguments (line 1290)
        kwargs_10441 = {}
        # Getting the type of 'np' (line 1290)
        np_10431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 19), 'np', False)
        # Obtaining the member 'array' of a type (line 1290)
        array_10432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1290, 19), np_10431, 'array')
        # Calling array(args, kwargs) (line 1290)
        array_call_result_10442 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 19), array_10432, *[list_10440], **kwargs_10441)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 12), 'stypy_return_type', array_call_result_10442)
        # SSA branch for the else part of an if statement (line 1289)
        module_type_store.open_ssa_branch('else')
        
        # Call to array(...): (line 1293)
        # Processing the call arguments (line 1293)
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to get_major_ticks(...): (line 1294)
        # Processing the call keyword arguments (line 1294)
        kwargs_10449 = {}
        # Getting the type of 'self' (line 1294)
        self_10447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 43), 'self', False)
        # Obtaining the member 'get_major_ticks' of a type (line 1294)
        get_major_ticks_10448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 43), self_10447, 'get_major_ticks')
        # Calling get_major_ticks(args, kwargs) (line 1294)
        get_major_ticks_call_result_10450 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 43), get_major_ticks_10448, *[], **kwargs_10449)
        
        comprehension_10451 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1294, 17), get_major_ticks_call_result_10450)
        # Assigning a type to the variable 'tick' (line 1294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 17), 'tick', comprehension_10451)
        # Getting the type of 'tick' (line 1294)
        tick_10445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 17), 'tick', False)
        # Obtaining the member '_tickdir' of a type (line 1294)
        _tickdir_10446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 17), tick_10445, '_tickdir')
        list_10452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1294, 17), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1294, 17), list_10452, _tickdir_10446)
        # Processing the call keyword arguments (line 1293)
        kwargs_10453 = {}
        # Getting the type of 'np' (line 1293)
        np_10443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 19), 'np', False)
        # Obtaining the member 'array' of a type (line 1293)
        array_10444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 19), np_10443, 'array')
        # Calling array(args, kwargs) (line 1293)
        array_call_result_10454 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 19), array_10444, *[list_10452], **kwargs_10453)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 12), 'stypy_return_type', array_call_result_10454)
        # SSA join for if statement (line 1289)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_ticks_direction(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ticks_direction' in the type store
        # Getting the type of 'stypy_return_type' (line 1274)
        stypy_return_type_10455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10455)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ticks_direction'
        return stypy_return_type_10455


    @norecursion
    def _get_tick(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_tick'
        module_type_store = module_type_store.open_function_context('_get_tick', 1296, 4, False)
        # Assigning a type to the variable 'self' (line 1297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis._get_tick.__dict__.__setitem__('stypy_localization', localization)
        Axis._get_tick.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis._get_tick.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis._get_tick.__dict__.__setitem__('stypy_function_name', 'Axis._get_tick')
        Axis._get_tick.__dict__.__setitem__('stypy_param_names_list', ['major'])
        Axis._get_tick.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis._get_tick.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis._get_tick.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis._get_tick.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis._get_tick.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis._get_tick.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis._get_tick', ['major'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_tick', localization, ['major'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_tick(...)' code ##################

        unicode_10456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 8), 'unicode', u'return the default tick instance')
        
        # Call to NotImplementedError(...): (line 1298)
        # Processing the call arguments (line 1298)
        unicode_10458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 34), 'unicode', u'derived must override')
        # Processing the call keyword arguments (line 1298)
        kwargs_10459 = {}
        # Getting the type of 'NotImplementedError' (line 1298)
        NotImplementedError_10457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1298)
        NotImplementedError_call_result_10460 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 14), NotImplementedError_10457, *[unicode_10458], **kwargs_10459)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1298, 8), NotImplementedError_call_result_10460, 'raise parameter', BaseException)
        
        # ################# End of '_get_tick(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_tick' in the type store
        # Getting the type of 'stypy_return_type' (line 1296)
        stypy_return_type_10461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10461)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_tick'
        return stypy_return_type_10461


    @norecursion
    def _copy_tick_props(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_copy_tick_props'
        module_type_store = module_type_store.open_function_context('_copy_tick_props', 1300, 4, False)
        # Assigning a type to the variable 'self' (line 1301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis._copy_tick_props.__dict__.__setitem__('stypy_localization', localization)
        Axis._copy_tick_props.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis._copy_tick_props.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis._copy_tick_props.__dict__.__setitem__('stypy_function_name', 'Axis._copy_tick_props')
        Axis._copy_tick_props.__dict__.__setitem__('stypy_param_names_list', ['src', 'dest'])
        Axis._copy_tick_props.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis._copy_tick_props.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis._copy_tick_props.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis._copy_tick_props.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis._copy_tick_props.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis._copy_tick_props.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis._copy_tick_props', ['src', 'dest'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_copy_tick_props', localization, ['src', 'dest'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_copy_tick_props(...)' code ##################

        unicode_10462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1301, 8), 'unicode', u'Copy the props from src tick to dest tick')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'src' (line 1302)
        src_10463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 11), 'src')
        # Getting the type of 'None' (line 1302)
        None_10464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 18), 'None')
        # Applying the binary operator 'is' (line 1302)
        result_is__10465 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 11), 'is', src_10463, None_10464)
        
        
        # Getting the type of 'dest' (line 1302)
        dest_10466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 26), 'dest')
        # Getting the type of 'None' (line 1302)
        None_10467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 34), 'None')
        # Applying the binary operator 'is' (line 1302)
        result_is__10468 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 26), 'is', dest_10466, None_10467)
        
        # Applying the binary operator 'or' (line 1302)
        result_or_keyword_10469 = python_operator(stypy.reporting.localization.Localization(__file__, 1302, 11), 'or', result_is__10465, result_is__10468)
        
        # Testing the type of an if condition (line 1302)
        if_condition_10470 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1302, 8), result_or_keyword_10469)
        # Assigning a type to the variable 'if_condition_10470' (line 1302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 8), 'if_condition_10470', if_condition_10470)
        # SSA begins for if statement (line 1302)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1302)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update_from(...): (line 1304)
        # Processing the call arguments (line 1304)
        # Getting the type of 'src' (line 1304)
        src_10474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 32), 'src', False)
        # Obtaining the member 'label1' of a type (line 1304)
        label1_10475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 32), src_10474, 'label1')
        # Processing the call keyword arguments (line 1304)
        kwargs_10476 = {}
        # Getting the type of 'dest' (line 1304)
        dest_10471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 8), 'dest', False)
        # Obtaining the member 'label1' of a type (line 1304)
        label1_10472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 8), dest_10471, 'label1')
        # Obtaining the member 'update_from' of a type (line 1304)
        update_from_10473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1304, 8), label1_10472, 'update_from')
        # Calling update_from(args, kwargs) (line 1304)
        update_from_call_result_10477 = invoke(stypy.reporting.localization.Localization(__file__, 1304, 8), update_from_10473, *[label1_10475], **kwargs_10476)
        
        
        # Call to update_from(...): (line 1305)
        # Processing the call arguments (line 1305)
        # Getting the type of 'src' (line 1305)
        src_10481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 32), 'src', False)
        # Obtaining the member 'label2' of a type (line 1305)
        label2_10482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 32), src_10481, 'label2')
        # Processing the call keyword arguments (line 1305)
        kwargs_10483 = {}
        # Getting the type of 'dest' (line 1305)
        dest_10478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 8), 'dest', False)
        # Obtaining the member 'label2' of a type (line 1305)
        label2_10479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 8), dest_10478, 'label2')
        # Obtaining the member 'update_from' of a type (line 1305)
        update_from_10480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1305, 8), label2_10479, 'update_from')
        # Calling update_from(args, kwargs) (line 1305)
        update_from_call_result_10484 = invoke(stypy.reporting.localization.Localization(__file__, 1305, 8), update_from_10480, *[label2_10482], **kwargs_10483)
        
        
        # Call to update_from(...): (line 1307)
        # Processing the call arguments (line 1307)
        # Getting the type of 'src' (line 1307)
        src_10488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 35), 'src', False)
        # Obtaining the member 'tick1line' of a type (line 1307)
        tick1line_10489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 35), src_10488, 'tick1line')
        # Processing the call keyword arguments (line 1307)
        kwargs_10490 = {}
        # Getting the type of 'dest' (line 1307)
        dest_10485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 8), 'dest', False)
        # Obtaining the member 'tick1line' of a type (line 1307)
        tick1line_10486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 8), dest_10485, 'tick1line')
        # Obtaining the member 'update_from' of a type (line 1307)
        update_from_10487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 8), tick1line_10486, 'update_from')
        # Calling update_from(args, kwargs) (line 1307)
        update_from_call_result_10491 = invoke(stypy.reporting.localization.Localization(__file__, 1307, 8), update_from_10487, *[tick1line_10489], **kwargs_10490)
        
        
        # Call to update_from(...): (line 1308)
        # Processing the call arguments (line 1308)
        # Getting the type of 'src' (line 1308)
        src_10495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 35), 'src', False)
        # Obtaining the member 'tick2line' of a type (line 1308)
        tick2line_10496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 35), src_10495, 'tick2line')
        # Processing the call keyword arguments (line 1308)
        kwargs_10497 = {}
        # Getting the type of 'dest' (line 1308)
        dest_10492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 8), 'dest', False)
        # Obtaining the member 'tick2line' of a type (line 1308)
        tick2line_10493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 8), dest_10492, 'tick2line')
        # Obtaining the member 'update_from' of a type (line 1308)
        update_from_10494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 8), tick2line_10493, 'update_from')
        # Calling update_from(args, kwargs) (line 1308)
        update_from_call_result_10498 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 8), update_from_10494, *[tick2line_10496], **kwargs_10497)
        
        
        # Call to update_from(...): (line 1309)
        # Processing the call arguments (line 1309)
        # Getting the type of 'src' (line 1309)
        src_10502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 34), 'src', False)
        # Obtaining the member 'gridline' of a type (line 1309)
        gridline_10503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 34), src_10502, 'gridline')
        # Processing the call keyword arguments (line 1309)
        kwargs_10504 = {}
        # Getting the type of 'dest' (line 1309)
        dest_10499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 8), 'dest', False)
        # Obtaining the member 'gridline' of a type (line 1309)
        gridline_10500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 8), dest_10499, 'gridline')
        # Obtaining the member 'update_from' of a type (line 1309)
        update_from_10501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 8), gridline_10500, 'update_from')
        # Calling update_from(args, kwargs) (line 1309)
        update_from_call_result_10505 = invoke(stypy.reporting.localization.Localization(__file__, 1309, 8), update_from_10501, *[gridline_10503], **kwargs_10504)
        
        
        # Assigning a Attribute to a Attribute (line 1311):
        
        # Assigning a Attribute to a Attribute (line 1311):
        # Getting the type of 'src' (line 1311)
        src_10506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 23), 'src')
        # Obtaining the member 'tick1On' of a type (line 1311)
        tick1On_10507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 23), src_10506, 'tick1On')
        # Getting the type of 'dest' (line 1311)
        dest_10508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 8), 'dest')
        # Setting the type of the member 'tick1On' of a type (line 1311)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 8), dest_10508, 'tick1On', tick1On_10507)
        
        # Assigning a Attribute to a Attribute (line 1312):
        
        # Assigning a Attribute to a Attribute (line 1312):
        # Getting the type of 'src' (line 1312)
        src_10509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 23), 'src')
        # Obtaining the member 'tick2On' of a type (line 1312)
        tick2On_10510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 23), src_10509, 'tick2On')
        # Getting the type of 'dest' (line 1312)
        dest_10511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 8), 'dest')
        # Setting the type of the member 'tick2On' of a type (line 1312)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 8), dest_10511, 'tick2On', tick2On_10510)
        
        # Assigning a Attribute to a Attribute (line 1313):
        
        # Assigning a Attribute to a Attribute (line 1313):
        # Getting the type of 'src' (line 1313)
        src_10512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 24), 'src')
        # Obtaining the member 'label1On' of a type (line 1313)
        label1On_10513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 24), src_10512, 'label1On')
        # Getting the type of 'dest' (line 1313)
        dest_10514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 8), 'dest')
        # Setting the type of the member 'label1On' of a type (line 1313)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 8), dest_10514, 'label1On', label1On_10513)
        
        # Assigning a Attribute to a Attribute (line 1314):
        
        # Assigning a Attribute to a Attribute (line 1314):
        # Getting the type of 'src' (line 1314)
        src_10515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 24), 'src')
        # Obtaining the member 'label2On' of a type (line 1314)
        label2On_10516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 24), src_10515, 'label2On')
        # Getting the type of 'dest' (line 1314)
        dest_10517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 8), 'dest')
        # Setting the type of the member 'label2On' of a type (line 1314)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 8), dest_10517, 'label2On', label2On_10516)
        
        # ################# End of '_copy_tick_props(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_copy_tick_props' in the type store
        # Getting the type of 'stypy_return_type' (line 1300)
        stypy_return_type_10518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10518)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_copy_tick_props'
        return stypy_return_type_10518


    @norecursion
    def get_label_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_label_text'
        module_type_store = module_type_store.open_function_context('get_label_text', 1316, 4, False)
        # Assigning a type to the variable 'self' (line 1317)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1317, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_label_text.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_label_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_label_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_label_text.__dict__.__setitem__('stypy_function_name', 'Axis.get_label_text')
        Axis.get_label_text.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_label_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_label_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_label_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_label_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_label_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_label_text.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_label_text', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_label_text', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_label_text(...)' code ##################

        unicode_10519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1317, 8), 'unicode', u'Get the text of the label')
        
        # Call to get_text(...): (line 1318)
        # Processing the call keyword arguments (line 1318)
        kwargs_10523 = {}
        # Getting the type of 'self' (line 1318)
        self_10520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 15), 'self', False)
        # Obtaining the member 'label' of a type (line 1318)
        label_10521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 15), self_10520, 'label')
        # Obtaining the member 'get_text' of a type (line 1318)
        get_text_10522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 15), label_10521, 'get_text')
        # Calling get_text(args, kwargs) (line 1318)
        get_text_call_result_10524 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 15), get_text_10522, *[], **kwargs_10523)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 8), 'stypy_return_type', get_text_call_result_10524)
        
        # ################# End of 'get_label_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_label_text' in the type store
        # Getting the type of 'stypy_return_type' (line 1316)
        stypy_return_type_10525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10525)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_label_text'
        return stypy_return_type_10525


    @norecursion
    def get_major_locator(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_major_locator'
        module_type_store = module_type_store.open_function_context('get_major_locator', 1320, 4, False)
        # Assigning a type to the variable 'self' (line 1321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_major_locator.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_major_locator.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_major_locator.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_major_locator.__dict__.__setitem__('stypy_function_name', 'Axis.get_major_locator')
        Axis.get_major_locator.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_major_locator.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_major_locator.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_major_locator.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_major_locator.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_major_locator.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_major_locator.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_major_locator', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_major_locator', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_major_locator(...)' code ##################

        unicode_10526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1321, 8), 'unicode', u'Get the locator of the major ticker')
        # Getting the type of 'self' (line 1322)
        self_10527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 15), 'self')
        # Obtaining the member 'major' of a type (line 1322)
        major_10528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1322, 15), self_10527, 'major')
        # Obtaining the member 'locator' of a type (line 1322)
        locator_10529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1322, 15), major_10528, 'locator')
        # Assigning a type to the variable 'stypy_return_type' (line 1322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1322, 8), 'stypy_return_type', locator_10529)
        
        # ################# End of 'get_major_locator(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_major_locator' in the type store
        # Getting the type of 'stypy_return_type' (line 1320)
        stypy_return_type_10530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10530)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_major_locator'
        return stypy_return_type_10530


    @norecursion
    def get_minor_locator(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_minor_locator'
        module_type_store = module_type_store.open_function_context('get_minor_locator', 1324, 4, False)
        # Assigning a type to the variable 'self' (line 1325)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1325, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_minor_locator.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_minor_locator.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_minor_locator.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_minor_locator.__dict__.__setitem__('stypy_function_name', 'Axis.get_minor_locator')
        Axis.get_minor_locator.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_minor_locator.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_minor_locator.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_minor_locator.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_minor_locator.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_minor_locator.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_minor_locator.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_minor_locator', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_minor_locator', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_minor_locator(...)' code ##################

        unicode_10531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1325, 8), 'unicode', u'Get the locator of the minor ticker')
        # Getting the type of 'self' (line 1326)
        self_10532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 15), 'self')
        # Obtaining the member 'minor' of a type (line 1326)
        minor_10533 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1326, 15), self_10532, 'minor')
        # Obtaining the member 'locator' of a type (line 1326)
        locator_10534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1326, 15), minor_10533, 'locator')
        # Assigning a type to the variable 'stypy_return_type' (line 1326)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 8), 'stypy_return_type', locator_10534)
        
        # ################# End of 'get_minor_locator(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_minor_locator' in the type store
        # Getting the type of 'stypy_return_type' (line 1324)
        stypy_return_type_10535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10535)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_minor_locator'
        return stypy_return_type_10535


    @norecursion
    def get_major_formatter(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_major_formatter'
        module_type_store = module_type_store.open_function_context('get_major_formatter', 1328, 4, False)
        # Assigning a type to the variable 'self' (line 1329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_major_formatter.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_major_formatter.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_major_formatter.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_major_formatter.__dict__.__setitem__('stypy_function_name', 'Axis.get_major_formatter')
        Axis.get_major_formatter.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_major_formatter.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_major_formatter.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_major_formatter.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_major_formatter.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_major_formatter.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_major_formatter.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_major_formatter', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_major_formatter', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_major_formatter(...)' code ##################

        unicode_10536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1329, 8), 'unicode', u'Get the formatter of the major ticker')
        # Getting the type of 'self' (line 1330)
        self_10537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1330, 15), 'self')
        # Obtaining the member 'major' of a type (line 1330)
        major_10538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 15), self_10537, 'major')
        # Obtaining the member 'formatter' of a type (line 1330)
        formatter_10539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1330, 15), major_10538, 'formatter')
        # Assigning a type to the variable 'stypy_return_type' (line 1330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1330, 8), 'stypy_return_type', formatter_10539)
        
        # ################# End of 'get_major_formatter(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_major_formatter' in the type store
        # Getting the type of 'stypy_return_type' (line 1328)
        stypy_return_type_10540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10540)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_major_formatter'
        return stypy_return_type_10540


    @norecursion
    def get_minor_formatter(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_minor_formatter'
        module_type_store = module_type_store.open_function_context('get_minor_formatter', 1332, 4, False)
        # Assigning a type to the variable 'self' (line 1333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_minor_formatter.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_minor_formatter.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_minor_formatter.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_minor_formatter.__dict__.__setitem__('stypy_function_name', 'Axis.get_minor_formatter')
        Axis.get_minor_formatter.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_minor_formatter.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_minor_formatter.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_minor_formatter.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_minor_formatter.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_minor_formatter.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_minor_formatter.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_minor_formatter', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_minor_formatter', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_minor_formatter(...)' code ##################

        unicode_10541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1333, 8), 'unicode', u'Get the formatter of the minor ticker')
        # Getting the type of 'self' (line 1334)
        self_10542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 15), 'self')
        # Obtaining the member 'minor' of a type (line 1334)
        minor_10543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 15), self_10542, 'minor')
        # Obtaining the member 'formatter' of a type (line 1334)
        formatter_10544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1334, 15), minor_10543, 'formatter')
        # Assigning a type to the variable 'stypy_return_type' (line 1334)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 8), 'stypy_return_type', formatter_10544)
        
        # ################# End of 'get_minor_formatter(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_minor_formatter' in the type store
        # Getting the type of 'stypy_return_type' (line 1332)
        stypy_return_type_10545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1332, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10545)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_minor_formatter'
        return stypy_return_type_10545


    @norecursion
    def get_major_ticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1336)
        None_10546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 39), 'None')
        defaults = [None_10546]
        # Create a new context for function 'get_major_ticks'
        module_type_store = module_type_store.open_function_context('get_major_ticks', 1336, 4, False)
        # Assigning a type to the variable 'self' (line 1337)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_major_ticks.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_major_ticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_major_ticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_major_ticks.__dict__.__setitem__('stypy_function_name', 'Axis.get_major_ticks')
        Axis.get_major_ticks.__dict__.__setitem__('stypy_param_names_list', ['numticks'])
        Axis.get_major_ticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_major_ticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_major_ticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_major_ticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_major_ticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_major_ticks.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_major_ticks', ['numticks'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_major_ticks', localization, ['numticks'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_major_ticks(...)' code ##################

        unicode_10547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1337, 8), 'unicode', u'get the tick instances; grow as necessary')
        
        # Type idiom detected: calculating its left and rigth part (line 1338)
        # Getting the type of 'numticks' (line 1338)
        numticks_10548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 11), 'numticks')
        # Getting the type of 'None' (line 1338)
        None_10549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 23), 'None')
        
        (may_be_10550, more_types_in_union_10551) = may_be_none(numticks_10548, None_10549)

        if may_be_10550:

            if more_types_in_union_10551:
                # Runtime conditional SSA (line 1338)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1339):
            
            # Assigning a Call to a Name (line 1339):
            
            # Call to len(...): (line 1339)
            # Processing the call arguments (line 1339)
            
            # Call to (...): (line 1339)
            # Processing the call keyword arguments (line 1339)
            kwargs_10557 = {}
            
            # Call to get_major_locator(...): (line 1339)
            # Processing the call keyword arguments (line 1339)
            kwargs_10555 = {}
            # Getting the type of 'self' (line 1339)
            self_10553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 27), 'self', False)
            # Obtaining the member 'get_major_locator' of a type (line 1339)
            get_major_locator_10554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1339, 27), self_10553, 'get_major_locator')
            # Calling get_major_locator(args, kwargs) (line 1339)
            get_major_locator_call_result_10556 = invoke(stypy.reporting.localization.Localization(__file__, 1339, 27), get_major_locator_10554, *[], **kwargs_10555)
            
            # Calling (args, kwargs) (line 1339)
            _call_result_10558 = invoke(stypy.reporting.localization.Localization(__file__, 1339, 27), get_major_locator_call_result_10556, *[], **kwargs_10557)
            
            # Processing the call keyword arguments (line 1339)
            kwargs_10559 = {}
            # Getting the type of 'len' (line 1339)
            len_10552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1339, 23), 'len', False)
            # Calling len(args, kwargs) (line 1339)
            len_call_result_10560 = invoke(stypy.reporting.localization.Localization(__file__, 1339, 23), len_10552, *[_call_result_10558], **kwargs_10559)
            
            # Assigning a type to the variable 'numticks' (line 1339)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1339, 12), 'numticks', len_call_result_10560)

            if more_types_in_union_10551:
                # SSA join for if statement (line 1338)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to len(...): (line 1340)
        # Processing the call arguments (line 1340)
        # Getting the type of 'self' (line 1340)
        self_10562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 15), 'self', False)
        # Obtaining the member 'majorTicks' of a type (line 1340)
        majorTicks_10563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1340, 15), self_10562, 'majorTicks')
        # Processing the call keyword arguments (line 1340)
        kwargs_10564 = {}
        # Getting the type of 'len' (line 1340)
        len_10561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 11), 'len', False)
        # Calling len(args, kwargs) (line 1340)
        len_call_result_10565 = invoke(stypy.reporting.localization.Localization(__file__, 1340, 11), len_10561, *[majorTicks_10563], **kwargs_10564)
        
        # Getting the type of 'numticks' (line 1340)
        numticks_10566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 34), 'numticks')
        # Applying the binary operator '<' (line 1340)
        result_lt_10567 = python_operator(stypy.reporting.localization.Localization(__file__, 1340, 11), '<', len_call_result_10565, numticks_10566)
        
        # Testing the type of an if condition (line 1340)
        if_condition_10568 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1340, 8), result_lt_10567)
        # Assigning a type to the variable 'if_condition_10568' (line 1340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 8), 'if_condition_10568', if_condition_10568)
        # SSA begins for if statement (line 1340)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to range(...): (line 1342)
        # Processing the call arguments (line 1342)
        # Getting the type of 'numticks' (line 1342)
        numticks_10570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 27), 'numticks', False)
        
        # Call to len(...): (line 1342)
        # Processing the call arguments (line 1342)
        # Getting the type of 'self' (line 1342)
        self_10572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 42), 'self', False)
        # Obtaining the member 'majorTicks' of a type (line 1342)
        majorTicks_10573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1342, 42), self_10572, 'majorTicks')
        # Processing the call keyword arguments (line 1342)
        kwargs_10574 = {}
        # Getting the type of 'len' (line 1342)
        len_10571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 38), 'len', False)
        # Calling len(args, kwargs) (line 1342)
        len_call_result_10575 = invoke(stypy.reporting.localization.Localization(__file__, 1342, 38), len_10571, *[majorTicks_10573], **kwargs_10574)
        
        # Applying the binary operator '-' (line 1342)
        result_sub_10576 = python_operator(stypy.reporting.localization.Localization(__file__, 1342, 27), '-', numticks_10570, len_call_result_10575)
        
        # Processing the call keyword arguments (line 1342)
        kwargs_10577 = {}
        # Getting the type of 'range' (line 1342)
        range_10569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1342, 21), 'range', False)
        # Calling range(args, kwargs) (line 1342)
        range_call_result_10578 = invoke(stypy.reporting.localization.Localization(__file__, 1342, 21), range_10569, *[result_sub_10576], **kwargs_10577)
        
        # Testing the type of a for loop iterable (line 1342)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1342, 12), range_call_result_10578)
        # Getting the type of the for loop variable (line 1342)
        for_loop_var_10579 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1342, 12), range_call_result_10578)
        # Assigning a type to the variable 'i' (line 1342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1342, 12), 'i', for_loop_var_10579)
        # SSA begins for a for statement (line 1342)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1343):
        
        # Assigning a Call to a Name (line 1343):
        
        # Call to _get_tick(...): (line 1343)
        # Processing the call keyword arguments (line 1343)
        # Getting the type of 'True' (line 1343)
        True_10582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 44), 'True', False)
        keyword_10583 = True_10582
        kwargs_10584 = {'major': keyword_10583}
        # Getting the type of 'self' (line 1343)
        self_10580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 23), 'self', False)
        # Obtaining the member '_get_tick' of a type (line 1343)
        _get_tick_10581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1343, 23), self_10580, '_get_tick')
        # Calling _get_tick(args, kwargs) (line 1343)
        _get_tick_call_result_10585 = invoke(stypy.reporting.localization.Localization(__file__, 1343, 23), _get_tick_10581, *[], **kwargs_10584)
        
        # Assigning a type to the variable 'tick' (line 1343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 16), 'tick', _get_tick_call_result_10585)
        
        # Call to append(...): (line 1344)
        # Processing the call arguments (line 1344)
        # Getting the type of 'tick' (line 1344)
        tick_10589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 39), 'tick', False)
        # Processing the call keyword arguments (line 1344)
        kwargs_10590 = {}
        # Getting the type of 'self' (line 1344)
        self_10586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 16), 'self', False)
        # Obtaining the member 'majorTicks' of a type (line 1344)
        majorTicks_10587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1344, 16), self_10586, 'majorTicks')
        # Obtaining the member 'append' of a type (line 1344)
        append_10588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1344, 16), majorTicks_10587, 'append')
        # Calling append(args, kwargs) (line 1344)
        append_call_result_10591 = invoke(stypy.reporting.localization.Localization(__file__, 1344, 16), append_10588, *[tick_10589], **kwargs_10590)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1340)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1346)
        self_10592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 11), 'self')
        # Obtaining the member '_lastNumMajorTicks' of a type (line 1346)
        _lastNumMajorTicks_10593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1346, 11), self_10592, '_lastNumMajorTicks')
        # Getting the type of 'numticks' (line 1346)
        numticks_10594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 37), 'numticks')
        # Applying the binary operator '<' (line 1346)
        result_lt_10595 = python_operator(stypy.reporting.localization.Localization(__file__, 1346, 11), '<', _lastNumMajorTicks_10593, numticks_10594)
        
        # Testing the type of an if condition (line 1346)
        if_condition_10596 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1346, 8), result_lt_10595)
        # Assigning a type to the variable 'if_condition_10596' (line 1346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 8), 'if_condition_10596', if_condition_10596)
        # SSA begins for if statement (line 1346)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1347):
        
        # Assigning a Subscript to a Name (line 1347):
        
        # Obtaining the type of the subscript
        int_10597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1347, 40), 'int')
        # Getting the type of 'self' (line 1347)
        self_10598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 24), 'self')
        # Obtaining the member 'majorTicks' of a type (line 1347)
        majorTicks_10599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 24), self_10598, 'majorTicks')
        # Obtaining the member '__getitem__' of a type (line 1347)
        getitem___10600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 24), majorTicks_10599, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1347)
        subscript_call_result_10601 = invoke(stypy.reporting.localization.Localization(__file__, 1347, 24), getitem___10600, int_10597)
        
        # Assigning a type to the variable 'protoTick' (line 1347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1347, 12), 'protoTick', subscript_call_result_10601)
        
        
        # Call to range(...): (line 1348)
        # Processing the call arguments (line 1348)
        # Getting the type of 'self' (line 1348)
        self_10603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 27), 'self', False)
        # Obtaining the member '_lastNumMajorTicks' of a type (line 1348)
        _lastNumMajorTicks_10604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 27), self_10603, '_lastNumMajorTicks')
        
        # Call to len(...): (line 1348)
        # Processing the call arguments (line 1348)
        # Getting the type of 'self' (line 1348)
        self_10606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 56), 'self', False)
        # Obtaining the member 'majorTicks' of a type (line 1348)
        majorTicks_10607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 56), self_10606, 'majorTicks')
        # Processing the call keyword arguments (line 1348)
        kwargs_10608 = {}
        # Getting the type of 'len' (line 1348)
        len_10605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 52), 'len', False)
        # Calling len(args, kwargs) (line 1348)
        len_call_result_10609 = invoke(stypy.reporting.localization.Localization(__file__, 1348, 52), len_10605, *[majorTicks_10607], **kwargs_10608)
        
        # Processing the call keyword arguments (line 1348)
        kwargs_10610 = {}
        # Getting the type of 'range' (line 1348)
        range_10602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 21), 'range', False)
        # Calling range(args, kwargs) (line 1348)
        range_call_result_10611 = invoke(stypy.reporting.localization.Localization(__file__, 1348, 21), range_10602, *[_lastNumMajorTicks_10604, len_call_result_10609], **kwargs_10610)
        
        # Testing the type of a for loop iterable (line 1348)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1348, 12), range_call_result_10611)
        # Getting the type of the for loop variable (line 1348)
        for_loop_var_10612 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1348, 12), range_call_result_10611)
        # Assigning a type to the variable 'i' (line 1348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1348, 12), 'i', for_loop_var_10612)
        # SSA begins for a for statement (line 1348)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 1349):
        
        # Assigning a Subscript to a Name (line 1349):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1349)
        i_10613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 39), 'i')
        # Getting the type of 'self' (line 1349)
        self_10614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 23), 'self')
        # Obtaining the member 'majorTicks' of a type (line 1349)
        majorTicks_10615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1349, 23), self_10614, 'majorTicks')
        # Obtaining the member '__getitem__' of a type (line 1349)
        getitem___10616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1349, 23), majorTicks_10615, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1349)
        subscript_call_result_10617 = invoke(stypy.reporting.localization.Localization(__file__, 1349, 23), getitem___10616, i_10613)
        
        # Assigning a type to the variable 'tick' (line 1349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1349, 16), 'tick', subscript_call_result_10617)
        
        # Getting the type of 'self' (line 1350)
        self_10618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1350, 19), 'self')
        # Obtaining the member '_gridOnMajor' of a type (line 1350)
        _gridOnMajor_10619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1350, 19), self_10618, '_gridOnMajor')
        # Testing the type of an if condition (line 1350)
        if_condition_10620 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1350, 16), _gridOnMajor_10619)
        # Assigning a type to the variable 'if_condition_10620' (line 1350)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1350, 16), 'if_condition_10620', if_condition_10620)
        # SSA begins for if statement (line 1350)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1351):
        
        # Assigning a Name to a Attribute (line 1351):
        # Getting the type of 'True' (line 1351)
        True_10621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 34), 'True')
        # Getting the type of 'tick' (line 1351)
        tick_10622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 20), 'tick')
        # Setting the type of the member 'gridOn' of a type (line 1351)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1351, 20), tick_10622, 'gridOn', True_10621)
        # SSA join for if statement (line 1350)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _copy_tick_props(...): (line 1352)
        # Processing the call arguments (line 1352)
        # Getting the type of 'protoTick' (line 1352)
        protoTick_10625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 38), 'protoTick', False)
        # Getting the type of 'tick' (line 1352)
        tick_10626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 49), 'tick', False)
        # Processing the call keyword arguments (line 1352)
        kwargs_10627 = {}
        # Getting the type of 'self' (line 1352)
        self_10623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 16), 'self', False)
        # Obtaining the member '_copy_tick_props' of a type (line 1352)
        _copy_tick_props_10624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1352, 16), self_10623, '_copy_tick_props')
        # Calling _copy_tick_props(args, kwargs) (line 1352)
        _copy_tick_props_call_result_10628 = invoke(stypy.reporting.localization.Localization(__file__, 1352, 16), _copy_tick_props_10624, *[protoTick_10625, tick_10626], **kwargs_10627)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1346)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1354):
        
        # Assigning a Name to a Attribute (line 1354):
        # Getting the type of 'numticks' (line 1354)
        numticks_10629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 34), 'numticks')
        # Getting the type of 'self' (line 1354)
        self_10630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 8), 'self')
        # Setting the type of the member '_lastNumMajorTicks' of a type (line 1354)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1354, 8), self_10630, '_lastNumMajorTicks', numticks_10629)
        
        # Assigning a Subscript to a Name (line 1355):
        
        # Assigning a Subscript to a Name (line 1355):
        
        # Obtaining the type of the subscript
        # Getting the type of 'numticks' (line 1355)
        numticks_10631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 33), 'numticks')
        slice_10632 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1355, 16), None, numticks_10631, None)
        # Getting the type of 'self' (line 1355)
        self_10633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 16), 'self')
        # Obtaining the member 'majorTicks' of a type (line 1355)
        majorTicks_10634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 16), self_10633, 'majorTicks')
        # Obtaining the member '__getitem__' of a type (line 1355)
        getitem___10635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 16), majorTicks_10634, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1355)
        subscript_call_result_10636 = invoke(stypy.reporting.localization.Localization(__file__, 1355, 16), getitem___10635, slice_10632)
        
        # Assigning a type to the variable 'ticks' (line 1355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1355, 8), 'ticks', subscript_call_result_10636)
        # Getting the type of 'ticks' (line 1357)
        ticks_10637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1357, 15), 'ticks')
        # Assigning a type to the variable 'stypy_return_type' (line 1357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1357, 8), 'stypy_return_type', ticks_10637)
        
        # ################# End of 'get_major_ticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_major_ticks' in the type store
        # Getting the type of 'stypy_return_type' (line 1336)
        stypy_return_type_10638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10638)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_major_ticks'
        return stypy_return_type_10638


    @norecursion
    def get_minor_ticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1359)
        None_10639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 39), 'None')
        defaults = [None_10639]
        # Create a new context for function 'get_minor_ticks'
        module_type_store = module_type_store.open_function_context('get_minor_ticks', 1359, 4, False)
        # Assigning a type to the variable 'self' (line 1360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1360, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_minor_ticks.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_minor_ticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_minor_ticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_minor_ticks.__dict__.__setitem__('stypy_function_name', 'Axis.get_minor_ticks')
        Axis.get_minor_ticks.__dict__.__setitem__('stypy_param_names_list', ['numticks'])
        Axis.get_minor_ticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_minor_ticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_minor_ticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_minor_ticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_minor_ticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_minor_ticks.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_minor_ticks', ['numticks'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_minor_ticks', localization, ['numticks'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_minor_ticks(...)' code ##################

        unicode_10640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1360, 8), 'unicode', u'get the minor tick instances; grow as necessary')
        
        # Type idiom detected: calculating its left and rigth part (line 1361)
        # Getting the type of 'numticks' (line 1361)
        numticks_10641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 11), 'numticks')
        # Getting the type of 'None' (line 1361)
        None_10642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1361, 23), 'None')
        
        (may_be_10643, more_types_in_union_10644) = may_be_none(numticks_10641, None_10642)

        if may_be_10643:

            if more_types_in_union_10644:
                # Runtime conditional SSA (line 1361)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1362):
            
            # Assigning a Call to a Name (line 1362):
            
            # Call to len(...): (line 1362)
            # Processing the call arguments (line 1362)
            
            # Call to (...): (line 1362)
            # Processing the call keyword arguments (line 1362)
            kwargs_10650 = {}
            
            # Call to get_minor_locator(...): (line 1362)
            # Processing the call keyword arguments (line 1362)
            kwargs_10648 = {}
            # Getting the type of 'self' (line 1362)
            self_10646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 27), 'self', False)
            # Obtaining the member 'get_minor_locator' of a type (line 1362)
            get_minor_locator_10647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1362, 27), self_10646, 'get_minor_locator')
            # Calling get_minor_locator(args, kwargs) (line 1362)
            get_minor_locator_call_result_10649 = invoke(stypy.reporting.localization.Localization(__file__, 1362, 27), get_minor_locator_10647, *[], **kwargs_10648)
            
            # Calling (args, kwargs) (line 1362)
            _call_result_10651 = invoke(stypy.reporting.localization.Localization(__file__, 1362, 27), get_minor_locator_call_result_10649, *[], **kwargs_10650)
            
            # Processing the call keyword arguments (line 1362)
            kwargs_10652 = {}
            # Getting the type of 'len' (line 1362)
            len_10645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1362, 23), 'len', False)
            # Calling len(args, kwargs) (line 1362)
            len_call_result_10653 = invoke(stypy.reporting.localization.Localization(__file__, 1362, 23), len_10645, *[_call_result_10651], **kwargs_10652)
            
            # Assigning a type to the variable 'numticks' (line 1362)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1362, 12), 'numticks', len_call_result_10653)

            if more_types_in_union_10644:
                # SSA join for if statement (line 1361)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to len(...): (line 1364)
        # Processing the call arguments (line 1364)
        # Getting the type of 'self' (line 1364)
        self_10655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 15), 'self', False)
        # Obtaining the member 'minorTicks' of a type (line 1364)
        minorTicks_10656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1364, 15), self_10655, 'minorTicks')
        # Processing the call keyword arguments (line 1364)
        kwargs_10657 = {}
        # Getting the type of 'len' (line 1364)
        len_10654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 11), 'len', False)
        # Calling len(args, kwargs) (line 1364)
        len_call_result_10658 = invoke(stypy.reporting.localization.Localization(__file__, 1364, 11), len_10654, *[minorTicks_10656], **kwargs_10657)
        
        # Getting the type of 'numticks' (line 1364)
        numticks_10659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1364, 34), 'numticks')
        # Applying the binary operator '<' (line 1364)
        result_lt_10660 = python_operator(stypy.reporting.localization.Localization(__file__, 1364, 11), '<', len_call_result_10658, numticks_10659)
        
        # Testing the type of an if condition (line 1364)
        if_condition_10661 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1364, 8), result_lt_10660)
        # Assigning a type to the variable 'if_condition_10661' (line 1364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1364, 8), 'if_condition_10661', if_condition_10661)
        # SSA begins for if statement (line 1364)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to range(...): (line 1366)
        # Processing the call arguments (line 1366)
        # Getting the type of 'numticks' (line 1366)
        numticks_10663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 27), 'numticks', False)
        
        # Call to len(...): (line 1366)
        # Processing the call arguments (line 1366)
        # Getting the type of 'self' (line 1366)
        self_10665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 42), 'self', False)
        # Obtaining the member 'minorTicks' of a type (line 1366)
        minorTicks_10666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1366, 42), self_10665, 'minorTicks')
        # Processing the call keyword arguments (line 1366)
        kwargs_10667 = {}
        # Getting the type of 'len' (line 1366)
        len_10664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 38), 'len', False)
        # Calling len(args, kwargs) (line 1366)
        len_call_result_10668 = invoke(stypy.reporting.localization.Localization(__file__, 1366, 38), len_10664, *[minorTicks_10666], **kwargs_10667)
        
        # Applying the binary operator '-' (line 1366)
        result_sub_10669 = python_operator(stypy.reporting.localization.Localization(__file__, 1366, 27), '-', numticks_10663, len_call_result_10668)
        
        # Processing the call keyword arguments (line 1366)
        kwargs_10670 = {}
        # Getting the type of 'range' (line 1366)
        range_10662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1366, 21), 'range', False)
        # Calling range(args, kwargs) (line 1366)
        range_call_result_10671 = invoke(stypy.reporting.localization.Localization(__file__, 1366, 21), range_10662, *[result_sub_10669], **kwargs_10670)
        
        # Testing the type of a for loop iterable (line 1366)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1366, 12), range_call_result_10671)
        # Getting the type of the for loop variable (line 1366)
        for_loop_var_10672 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1366, 12), range_call_result_10671)
        # Assigning a type to the variable 'i' (line 1366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1366, 12), 'i', for_loop_var_10672)
        # SSA begins for a for statement (line 1366)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1367):
        
        # Assigning a Call to a Name (line 1367):
        
        # Call to _get_tick(...): (line 1367)
        # Processing the call keyword arguments (line 1367)
        # Getting the type of 'False' (line 1367)
        False_10675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 44), 'False', False)
        keyword_10676 = False_10675
        kwargs_10677 = {'major': keyword_10676}
        # Getting the type of 'self' (line 1367)
        self_10673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 23), 'self', False)
        # Obtaining the member '_get_tick' of a type (line 1367)
        _get_tick_10674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 23), self_10673, '_get_tick')
        # Calling _get_tick(args, kwargs) (line 1367)
        _get_tick_call_result_10678 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 23), _get_tick_10674, *[], **kwargs_10677)
        
        # Assigning a type to the variable 'tick' (line 1367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 16), 'tick', _get_tick_call_result_10678)
        
        # Call to append(...): (line 1368)
        # Processing the call arguments (line 1368)
        # Getting the type of 'tick' (line 1368)
        tick_10682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 39), 'tick', False)
        # Processing the call keyword arguments (line 1368)
        kwargs_10683 = {}
        # Getting the type of 'self' (line 1368)
        self_10679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 16), 'self', False)
        # Obtaining the member 'minorTicks' of a type (line 1368)
        minorTicks_10680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 16), self_10679, 'minorTicks')
        # Obtaining the member 'append' of a type (line 1368)
        append_10681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 16), minorTicks_10680, 'append')
        # Calling append(args, kwargs) (line 1368)
        append_call_result_10684 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 16), append_10681, *[tick_10682], **kwargs_10683)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1364)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1370)
        self_10685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 11), 'self')
        # Obtaining the member '_lastNumMinorTicks' of a type (line 1370)
        _lastNumMinorTicks_10686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 11), self_10685, '_lastNumMinorTicks')
        # Getting the type of 'numticks' (line 1370)
        numticks_10687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 37), 'numticks')
        # Applying the binary operator '<' (line 1370)
        result_lt_10688 = python_operator(stypy.reporting.localization.Localization(__file__, 1370, 11), '<', _lastNumMinorTicks_10686, numticks_10687)
        
        # Testing the type of an if condition (line 1370)
        if_condition_10689 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1370, 8), result_lt_10688)
        # Assigning a type to the variable 'if_condition_10689' (line 1370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'if_condition_10689', if_condition_10689)
        # SSA begins for if statement (line 1370)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1371):
        
        # Assigning a Subscript to a Name (line 1371):
        
        # Obtaining the type of the subscript
        int_10690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 40), 'int')
        # Getting the type of 'self' (line 1371)
        self_10691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 24), 'self')
        # Obtaining the member 'minorTicks' of a type (line 1371)
        minorTicks_10692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 24), self_10691, 'minorTicks')
        # Obtaining the member '__getitem__' of a type (line 1371)
        getitem___10693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 24), minorTicks_10692, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1371)
        subscript_call_result_10694 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 24), getitem___10693, int_10690)
        
        # Assigning a type to the variable 'protoTick' (line 1371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 12), 'protoTick', subscript_call_result_10694)
        
        
        # Call to range(...): (line 1372)
        # Processing the call arguments (line 1372)
        # Getting the type of 'self' (line 1372)
        self_10696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 27), 'self', False)
        # Obtaining the member '_lastNumMinorTicks' of a type (line 1372)
        _lastNumMinorTicks_10697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1372, 27), self_10696, '_lastNumMinorTicks')
        
        # Call to len(...): (line 1372)
        # Processing the call arguments (line 1372)
        # Getting the type of 'self' (line 1372)
        self_10699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 56), 'self', False)
        # Obtaining the member 'minorTicks' of a type (line 1372)
        minorTicks_10700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1372, 56), self_10699, 'minorTicks')
        # Processing the call keyword arguments (line 1372)
        kwargs_10701 = {}
        # Getting the type of 'len' (line 1372)
        len_10698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 52), 'len', False)
        # Calling len(args, kwargs) (line 1372)
        len_call_result_10702 = invoke(stypy.reporting.localization.Localization(__file__, 1372, 52), len_10698, *[minorTicks_10700], **kwargs_10701)
        
        # Processing the call keyword arguments (line 1372)
        kwargs_10703 = {}
        # Getting the type of 'range' (line 1372)
        range_10695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 21), 'range', False)
        # Calling range(args, kwargs) (line 1372)
        range_call_result_10704 = invoke(stypy.reporting.localization.Localization(__file__, 1372, 21), range_10695, *[_lastNumMinorTicks_10697, len_call_result_10702], **kwargs_10703)
        
        # Testing the type of a for loop iterable (line 1372)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1372, 12), range_call_result_10704)
        # Getting the type of the for loop variable (line 1372)
        for_loop_var_10705 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1372, 12), range_call_result_10704)
        # Assigning a type to the variable 'i' (line 1372)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 12), 'i', for_loop_var_10705)
        # SSA begins for a for statement (line 1372)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 1373):
        
        # Assigning a Subscript to a Name (line 1373):
        
        # Obtaining the type of the subscript
        # Getting the type of 'i' (line 1373)
        i_10706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 39), 'i')
        # Getting the type of 'self' (line 1373)
        self_10707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 23), 'self')
        # Obtaining the member 'minorTicks' of a type (line 1373)
        minorTicks_10708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1373, 23), self_10707, 'minorTicks')
        # Obtaining the member '__getitem__' of a type (line 1373)
        getitem___10709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1373, 23), minorTicks_10708, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1373)
        subscript_call_result_10710 = invoke(stypy.reporting.localization.Localization(__file__, 1373, 23), getitem___10709, i_10706)
        
        # Assigning a type to the variable 'tick' (line 1373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 16), 'tick', subscript_call_result_10710)
        
        # Getting the type of 'self' (line 1374)
        self_10711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 19), 'self')
        # Obtaining the member '_gridOnMinor' of a type (line 1374)
        _gridOnMinor_10712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1374, 19), self_10711, '_gridOnMinor')
        # Testing the type of an if condition (line 1374)
        if_condition_10713 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1374, 16), _gridOnMinor_10712)
        # Assigning a type to the variable 'if_condition_10713' (line 1374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1374, 16), 'if_condition_10713', if_condition_10713)
        # SSA begins for if statement (line 1374)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1375):
        
        # Assigning a Name to a Attribute (line 1375):
        # Getting the type of 'True' (line 1375)
        True_10714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 34), 'True')
        # Getting the type of 'tick' (line 1375)
        tick_10715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 20), 'tick')
        # Setting the type of the member 'gridOn' of a type (line 1375)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 20), tick_10715, 'gridOn', True_10714)
        # SSA join for if statement (line 1374)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _copy_tick_props(...): (line 1376)
        # Processing the call arguments (line 1376)
        # Getting the type of 'protoTick' (line 1376)
        protoTick_10718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 38), 'protoTick', False)
        # Getting the type of 'tick' (line 1376)
        tick_10719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 49), 'tick', False)
        # Processing the call keyword arguments (line 1376)
        kwargs_10720 = {}
        # Getting the type of 'self' (line 1376)
        self_10716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 16), 'self', False)
        # Obtaining the member '_copy_tick_props' of a type (line 1376)
        _copy_tick_props_10717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1376, 16), self_10716, '_copy_tick_props')
        # Calling _copy_tick_props(args, kwargs) (line 1376)
        _copy_tick_props_call_result_10721 = invoke(stypy.reporting.localization.Localization(__file__, 1376, 16), _copy_tick_props_10717, *[protoTick_10718, tick_10719], **kwargs_10720)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1370)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1378):
        
        # Assigning a Name to a Attribute (line 1378):
        # Getting the type of 'numticks' (line 1378)
        numticks_10722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 34), 'numticks')
        # Getting the type of 'self' (line 1378)
        self_10723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 8), 'self')
        # Setting the type of the member '_lastNumMinorTicks' of a type (line 1378)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 8), self_10723, '_lastNumMinorTicks', numticks_10722)
        
        # Assigning a Subscript to a Name (line 1379):
        
        # Assigning a Subscript to a Name (line 1379):
        
        # Obtaining the type of the subscript
        # Getting the type of 'numticks' (line 1379)
        numticks_10724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 33), 'numticks')
        slice_10725 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1379, 16), None, numticks_10724, None)
        # Getting the type of 'self' (line 1379)
        self_10726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 16), 'self')
        # Obtaining the member 'minorTicks' of a type (line 1379)
        minorTicks_10727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 16), self_10726, 'minorTicks')
        # Obtaining the member '__getitem__' of a type (line 1379)
        getitem___10728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 16), minorTicks_10727, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1379)
        subscript_call_result_10729 = invoke(stypy.reporting.localization.Localization(__file__, 1379, 16), getitem___10728, slice_10725)
        
        # Assigning a type to the variable 'ticks' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'ticks', subscript_call_result_10729)
        # Getting the type of 'ticks' (line 1381)
        ticks_10730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 15), 'ticks')
        # Assigning a type to the variable 'stypy_return_type' (line 1381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'stypy_return_type', ticks_10730)
        
        # ################# End of 'get_minor_ticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_minor_ticks' in the type store
        # Getting the type of 'stypy_return_type' (line 1359)
        stypy_return_type_10731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1359, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10731)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_minor_ticks'
        return stypy_return_type_10731


    @norecursion
    def grid(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1383)
        None_10732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 21), 'None')
        unicode_10733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1383, 33), 'unicode', u'major')
        defaults = [None_10732, unicode_10733]
        # Create a new context for function 'grid'
        module_type_store = module_type_store.open_function_context('grid', 1383, 4, False)
        # Assigning a type to the variable 'self' (line 1384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.grid.__dict__.__setitem__('stypy_localization', localization)
        Axis.grid.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.grid.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.grid.__dict__.__setitem__('stypy_function_name', 'Axis.grid')
        Axis.grid.__dict__.__setitem__('stypy_param_names_list', ['b', 'which'])
        Axis.grid.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.grid.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Axis.grid.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.grid.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.grid.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.grid.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.grid', ['b', 'which'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'grid', localization, ['b', 'which'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'grid(...)' code ##################

        unicode_10734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1395, (-1)), 'unicode', u"\n        Set the axis grid on or off; b is a boolean. Use *which* =\n        'major' | 'minor' | 'both' to set the grid for major or minor ticks.\n\n        If *b* is *None* and len(kwargs)==0, toggle the grid state.  If\n        *kwargs* are supplied, it is assumed you want the grid on and *b*\n        will be set to True.\n\n        *kwargs* are used to set the line properties of the grids, e.g.,\n\n          xax.grid(color='r', linestyle='-', linewidth=2)\n        ")
        
        
        # Call to len(...): (line 1396)
        # Processing the call arguments (line 1396)
        # Getting the type of 'kwargs' (line 1396)
        kwargs_10736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 15), 'kwargs', False)
        # Processing the call keyword arguments (line 1396)
        kwargs_10737 = {}
        # Getting the type of 'len' (line 1396)
        len_10735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 11), 'len', False)
        # Calling len(args, kwargs) (line 1396)
        len_call_result_10738 = invoke(stypy.reporting.localization.Localization(__file__, 1396, 11), len_10735, *[kwargs_10736], **kwargs_10737)
        
        # Testing the type of an if condition (line 1396)
        if_condition_10739 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1396, 8), len_call_result_10738)
        # Assigning a type to the variable 'if_condition_10739' (line 1396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1396, 8), 'if_condition_10739', if_condition_10739)
        # SSA begins for if statement (line 1396)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1397):
        
        # Assigning a Name to a Name (line 1397):
        # Getting the type of 'True' (line 1397)
        True_10740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 16), 'True')
        # Assigning a type to the variable 'b' (line 1397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 12), 'b', True_10740)
        # SSA join for if statement (line 1396)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1398):
        
        # Assigning a Call to a Name (line 1398):
        
        # Call to lower(...): (line 1398)
        # Processing the call keyword arguments (line 1398)
        kwargs_10743 = {}
        # Getting the type of 'which' (line 1398)
        which_10741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 16), 'which', False)
        # Obtaining the member 'lower' of a type (line 1398)
        lower_10742 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1398, 16), which_10741, 'lower')
        # Calling lower(args, kwargs) (line 1398)
        lower_call_result_10744 = invoke(stypy.reporting.localization.Localization(__file__, 1398, 16), lower_10742, *[], **kwargs_10743)
        
        # Assigning a type to the variable 'which' (line 1398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 8), 'which', lower_call_result_10744)
        
        
        # Getting the type of 'which' (line 1399)
        which_10745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 11), 'which')
        
        # Obtaining an instance of the builtin type 'list' (line 1399)
        list_10746 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1399, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1399)
        # Adding element type (line 1399)
        unicode_10747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1399, 21), 'unicode', u'minor')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1399, 20), list_10746, unicode_10747)
        # Adding element type (line 1399)
        unicode_10748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1399, 30), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1399, 20), list_10746, unicode_10748)
        
        # Applying the binary operator 'in' (line 1399)
        result_contains_10749 = python_operator(stypy.reporting.localization.Localization(__file__, 1399, 11), 'in', which_10745, list_10746)
        
        # Testing the type of an if condition (line 1399)
        if_condition_10750 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1399, 8), result_contains_10749)
        # Assigning a type to the variable 'if_condition_10750' (line 1399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1399, 8), 'if_condition_10750', if_condition_10750)
        # SSA begins for if statement (line 1399)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 1400)
        # Getting the type of 'b' (line 1400)
        b_10751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 15), 'b')
        # Getting the type of 'None' (line 1400)
        None_10752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1400, 20), 'None')
        
        (may_be_10753, more_types_in_union_10754) = may_be_none(b_10751, None_10752)

        if may_be_10753:

            if more_types_in_union_10754:
                # Runtime conditional SSA (line 1400)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a UnaryOp to a Attribute (line 1401):
            
            # Assigning a UnaryOp to a Attribute (line 1401):
            
            # Getting the type of 'self' (line 1401)
            self_10755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 40), 'self')
            # Obtaining the member '_gridOnMinor' of a type (line 1401)
            _gridOnMinor_10756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 40), self_10755, '_gridOnMinor')
            # Applying the 'not' unary operator (line 1401)
            result_not__10757 = python_operator(stypy.reporting.localization.Localization(__file__, 1401, 36), 'not', _gridOnMinor_10756)
            
            # Getting the type of 'self' (line 1401)
            self_10758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 16), 'self')
            # Setting the type of the member '_gridOnMinor' of a type (line 1401)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1401, 16), self_10758, '_gridOnMinor', result_not__10757)

            if more_types_in_union_10754:
                # Runtime conditional SSA for else branch (line 1400)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_10753) or more_types_in_union_10754):
            
            # Assigning a Name to a Attribute (line 1403):
            
            # Assigning a Name to a Attribute (line 1403):
            # Getting the type of 'b' (line 1403)
            b_10759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 36), 'b')
            # Getting the type of 'self' (line 1403)
            self_10760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1403, 16), 'self')
            # Setting the type of the member '_gridOnMinor' of a type (line 1403)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1403, 16), self_10760, '_gridOnMinor', b_10759)

            if (may_be_10753 and more_types_in_union_10754):
                # SSA join for if statement (line 1400)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'self' (line 1404)
        self_10761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 24), 'self')
        # Obtaining the member 'minorTicks' of a type (line 1404)
        minorTicks_10762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1404, 24), self_10761, 'minorTicks')
        # Testing the type of a for loop iterable (line 1404)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1404, 12), minorTicks_10762)
        # Getting the type of the for loop variable (line 1404)
        for_loop_var_10763 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1404, 12), minorTicks_10762)
        # Assigning a type to the variable 'tick' (line 1404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 12), 'tick', for_loop_var_10763)
        # SSA begins for a for statement (line 1404)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 1405)
        # Getting the type of 'tick' (line 1405)
        tick_10764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 19), 'tick')
        # Getting the type of 'None' (line 1405)
        None_10765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1405, 27), 'None')
        
        (may_be_10766, more_types_in_union_10767) = may_be_none(tick_10764, None_10765)

        if may_be_10766:

            if more_types_in_union_10767:
                # Runtime conditional SSA (line 1405)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store


            if more_types_in_union_10767:
                # SSA join for if statement (line 1405)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Attribute (line 1407):
        
        # Assigning a Attribute to a Attribute (line 1407):
        # Getting the type of 'self' (line 1407)
        self_10768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 30), 'self')
        # Obtaining the member '_gridOnMinor' of a type (line 1407)
        _gridOnMinor_10769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 30), self_10768, '_gridOnMinor')
        # Getting the type of 'tick' (line 1407)
        tick_10770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1407, 16), 'tick')
        # Setting the type of the member 'gridOn' of a type (line 1407)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1407, 16), tick_10770, 'gridOn', _gridOnMinor_10769)
        
        
        # Call to len(...): (line 1408)
        # Processing the call arguments (line 1408)
        # Getting the type of 'kwargs' (line 1408)
        kwargs_10772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 23), 'kwargs', False)
        # Processing the call keyword arguments (line 1408)
        kwargs_10773 = {}
        # Getting the type of 'len' (line 1408)
        len_10771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1408, 19), 'len', False)
        # Calling len(args, kwargs) (line 1408)
        len_call_result_10774 = invoke(stypy.reporting.localization.Localization(__file__, 1408, 19), len_10771, *[kwargs_10772], **kwargs_10773)
        
        # Testing the type of an if condition (line 1408)
        if_condition_10775 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1408, 16), len_call_result_10774)
        # Assigning a type to the variable 'if_condition_10775' (line 1408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1408, 16), 'if_condition_10775', if_condition_10775)
        # SSA begins for if statement (line 1408)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update(...): (line 1409)
        # Processing the call arguments (line 1409)
        # Getting the type of 'kwargs' (line 1409)
        kwargs_10779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 41), 'kwargs', False)
        # Processing the call keyword arguments (line 1409)
        kwargs_10780 = {}
        # Getting the type of 'tick' (line 1409)
        tick_10776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1409, 20), 'tick', False)
        # Obtaining the member 'gridline' of a type (line 1409)
        gridline_10777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 20), tick_10776, 'gridline')
        # Obtaining the member 'update' of a type (line 1409)
        update_10778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1409, 20), gridline_10777, 'update')
        # Calling update(args, kwargs) (line 1409)
        update_call_result_10781 = invoke(stypy.reporting.localization.Localization(__file__, 1409, 20), update_10778, *[kwargs_10779], **kwargs_10780)
        
        # SSA join for if statement (line 1408)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Subscript (line 1410):
        
        # Assigning a Attribute to a Subscript (line 1410):
        # Getting the type of 'self' (line 1410)
        self_10782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 44), 'self')
        # Obtaining the member '_gridOnMinor' of a type (line 1410)
        _gridOnMinor_10783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1410, 44), self_10782, '_gridOnMinor')
        # Getting the type of 'self' (line 1410)
        self_10784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1410, 12), 'self')
        # Obtaining the member '_minor_tick_kw' of a type (line 1410)
        _minor_tick_kw_10785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1410, 12), self_10784, '_minor_tick_kw')
        unicode_10786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1410, 32), 'unicode', u'gridOn')
        # Storing an element on a container (line 1410)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1410, 12), _minor_tick_kw_10785, (unicode_10786, _gridOnMinor_10783))
        # SSA join for if statement (line 1399)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'which' (line 1411)
        which_10787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1411, 11), 'which')
        
        # Obtaining an instance of the builtin type 'list' (line 1411)
        list_10788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1411, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1411)
        # Adding element type (line 1411)
        unicode_10789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1411, 21), 'unicode', u'major')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1411, 20), list_10788, unicode_10789)
        # Adding element type (line 1411)
        unicode_10790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1411, 30), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1411, 20), list_10788, unicode_10790)
        
        # Applying the binary operator 'in' (line 1411)
        result_contains_10791 = python_operator(stypy.reporting.localization.Localization(__file__, 1411, 11), 'in', which_10787, list_10788)
        
        # Testing the type of an if condition (line 1411)
        if_condition_10792 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1411, 8), result_contains_10791)
        # Assigning a type to the variable 'if_condition_10792' (line 1411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1411, 8), 'if_condition_10792', if_condition_10792)
        # SSA begins for if statement (line 1411)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 1412)
        # Getting the type of 'b' (line 1412)
        b_10793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 15), 'b')
        # Getting the type of 'None' (line 1412)
        None_10794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1412, 20), 'None')
        
        (may_be_10795, more_types_in_union_10796) = may_be_none(b_10793, None_10794)

        if may_be_10795:

            if more_types_in_union_10796:
                # Runtime conditional SSA (line 1412)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a UnaryOp to a Attribute (line 1413):
            
            # Assigning a UnaryOp to a Attribute (line 1413):
            
            # Getting the type of 'self' (line 1413)
            self_10797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 40), 'self')
            # Obtaining the member '_gridOnMajor' of a type (line 1413)
            _gridOnMajor_10798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 40), self_10797, '_gridOnMajor')
            # Applying the 'not' unary operator (line 1413)
            result_not__10799 = python_operator(stypy.reporting.localization.Localization(__file__, 1413, 36), 'not', _gridOnMajor_10798)
            
            # Getting the type of 'self' (line 1413)
            self_10800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1413, 16), 'self')
            # Setting the type of the member '_gridOnMajor' of a type (line 1413)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1413, 16), self_10800, '_gridOnMajor', result_not__10799)

            if more_types_in_union_10796:
                # Runtime conditional SSA for else branch (line 1412)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_10795) or more_types_in_union_10796):
            
            # Assigning a Name to a Attribute (line 1415):
            
            # Assigning a Name to a Attribute (line 1415):
            # Getting the type of 'b' (line 1415)
            b_10801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 36), 'b')
            # Getting the type of 'self' (line 1415)
            self_10802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1415, 16), 'self')
            # Setting the type of the member '_gridOnMajor' of a type (line 1415)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1415, 16), self_10802, '_gridOnMajor', b_10801)

            if (may_be_10795 and more_types_in_union_10796):
                # SSA join for if statement (line 1412)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'self' (line 1416)
        self_10803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1416, 24), 'self')
        # Obtaining the member 'majorTicks' of a type (line 1416)
        majorTicks_10804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1416, 24), self_10803, 'majorTicks')
        # Testing the type of a for loop iterable (line 1416)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1416, 12), majorTicks_10804)
        # Getting the type of the for loop variable (line 1416)
        for_loop_var_10805 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1416, 12), majorTicks_10804)
        # Assigning a type to the variable 'tick' (line 1416)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1416, 12), 'tick', for_loop_var_10805)
        # SSA begins for a for statement (line 1416)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Type idiom detected: calculating its left and rigth part (line 1417)
        # Getting the type of 'tick' (line 1417)
        tick_10806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 19), 'tick')
        # Getting the type of 'None' (line 1417)
        None_10807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1417, 27), 'None')
        
        (may_be_10808, more_types_in_union_10809) = may_be_none(tick_10806, None_10807)

        if may_be_10808:

            if more_types_in_union_10809:
                # Runtime conditional SSA (line 1417)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store


            if more_types_in_union_10809:
                # SSA join for if statement (line 1417)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Attribute (line 1419):
        
        # Assigning a Attribute to a Attribute (line 1419):
        # Getting the type of 'self' (line 1419)
        self_10810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 30), 'self')
        # Obtaining the member '_gridOnMajor' of a type (line 1419)
        _gridOnMajor_10811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 30), self_10810, '_gridOnMajor')
        # Getting the type of 'tick' (line 1419)
        tick_10812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1419, 16), 'tick')
        # Setting the type of the member 'gridOn' of a type (line 1419)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1419, 16), tick_10812, 'gridOn', _gridOnMajor_10811)
        
        
        # Call to len(...): (line 1420)
        # Processing the call arguments (line 1420)
        # Getting the type of 'kwargs' (line 1420)
        kwargs_10814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 23), 'kwargs', False)
        # Processing the call keyword arguments (line 1420)
        kwargs_10815 = {}
        # Getting the type of 'len' (line 1420)
        len_10813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1420, 19), 'len', False)
        # Calling len(args, kwargs) (line 1420)
        len_call_result_10816 = invoke(stypy.reporting.localization.Localization(__file__, 1420, 19), len_10813, *[kwargs_10814], **kwargs_10815)
        
        # Testing the type of an if condition (line 1420)
        if_condition_10817 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1420, 16), len_call_result_10816)
        # Assigning a type to the variable 'if_condition_10817' (line 1420)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1420, 16), 'if_condition_10817', if_condition_10817)
        # SSA begins for if statement (line 1420)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update(...): (line 1421)
        # Processing the call arguments (line 1421)
        # Getting the type of 'kwargs' (line 1421)
        kwargs_10821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 41), 'kwargs', False)
        # Processing the call keyword arguments (line 1421)
        kwargs_10822 = {}
        # Getting the type of 'tick' (line 1421)
        tick_10818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 20), 'tick', False)
        # Obtaining the member 'gridline' of a type (line 1421)
        gridline_10819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 20), tick_10818, 'gridline')
        # Obtaining the member 'update' of a type (line 1421)
        update_10820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 20), gridline_10819, 'update')
        # Calling update(args, kwargs) (line 1421)
        update_call_result_10823 = invoke(stypy.reporting.localization.Localization(__file__, 1421, 20), update_10820, *[kwargs_10821], **kwargs_10822)
        
        # SSA join for if statement (line 1420)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Subscript (line 1422):
        
        # Assigning a Attribute to a Subscript (line 1422):
        # Getting the type of 'self' (line 1422)
        self_10824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 44), 'self')
        # Obtaining the member '_gridOnMajor' of a type (line 1422)
        _gridOnMajor_10825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 44), self_10824, '_gridOnMajor')
        # Getting the type of 'self' (line 1422)
        self_10826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 12), 'self')
        # Obtaining the member '_major_tick_kw' of a type (line 1422)
        _major_tick_kw_10827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 12), self_10826, '_major_tick_kw')
        unicode_10828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1422, 32), 'unicode', u'gridOn')
        # Storing an element on a container (line 1422)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1422, 12), _major_tick_kw_10827, (unicode_10828, _gridOnMajor_10825))
        # SSA join for if statement (line 1411)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1423):
        
        # Assigning a Name to a Attribute (line 1423):
        # Getting the type of 'True' (line 1423)
        True_10829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 21), 'True')
        # Getting the type of 'self' (line 1423)
        self_10830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1423, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1423)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1423, 8), self_10830, 'stale', True_10829)
        
        # ################# End of 'grid(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'grid' in the type store
        # Getting the type of 'stypy_return_type' (line 1383)
        stypy_return_type_10831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10831)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'grid'
        return stypy_return_type_10831


    @norecursion
    def update_units(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'update_units'
        module_type_store = module_type_store.open_function_context('update_units', 1425, 4, False)
        # Assigning a type to the variable 'self' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.update_units.__dict__.__setitem__('stypy_localization', localization)
        Axis.update_units.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.update_units.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.update_units.__dict__.__setitem__('stypy_function_name', 'Axis.update_units')
        Axis.update_units.__dict__.__setitem__('stypy_param_names_list', ['data'])
        Axis.update_units.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.update_units.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.update_units.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.update_units.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.update_units.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.update_units.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.update_units', ['data'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update_units', localization, ['data'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update_units(...)' code ##################

        unicode_10832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1430, (-1)), 'unicode', u'\n        introspect *data* for units converter and update the\n        axis.converter instance if necessary. Return *True*\n        if *data* is registered for unit conversion.\n        ')
        
        # Assigning a Call to a Name (line 1432):
        
        # Assigning a Call to a Name (line 1432):
        
        # Call to get_converter(...): (line 1432)
        # Processing the call arguments (line 1432)
        # Getting the type of 'data' (line 1432)
        data_10836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 50), 'data', False)
        # Processing the call keyword arguments (line 1432)
        kwargs_10837 = {}
        # Getting the type of 'munits' (line 1432)
        munits_10833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 20), 'munits', False)
        # Obtaining the member 'registry' of a type (line 1432)
        registry_10834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 20), munits_10833, 'registry')
        # Obtaining the member 'get_converter' of a type (line 1432)
        get_converter_10835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 20), registry_10834, 'get_converter')
        # Calling get_converter(args, kwargs) (line 1432)
        get_converter_call_result_10838 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 20), get_converter_10835, *[data_10836], **kwargs_10837)
        
        # Assigning a type to the variable 'converter' (line 1432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1432, 8), 'converter', get_converter_call_result_10838)
        
        # Type idiom detected: calculating its left and rigth part (line 1433)
        # Getting the type of 'converter' (line 1433)
        converter_10839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 11), 'converter')
        # Getting the type of 'None' (line 1433)
        None_10840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 24), 'None')
        
        (may_be_10841, more_types_in_union_10842) = may_be_none(converter_10839, None_10840)

        if may_be_10841:

            if more_types_in_union_10842:
                # Runtime conditional SSA (line 1433)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'False' (line 1434)
            False_10843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 19), 'False')
            # Assigning a type to the variable 'stypy_return_type' (line 1434)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1434, 12), 'stypy_return_type', False_10843)

            if more_types_in_union_10842:
                # SSA join for if statement (line 1433)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Compare to a Name (line 1436):
        
        # Assigning a Compare to a Name (line 1436):
        
        # Getting the type of 'self' (line 1436)
        self_10844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 18), 'self')
        # Obtaining the member 'converter' of a type (line 1436)
        converter_10845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1436, 18), self_10844, 'converter')
        # Getting the type of 'converter' (line 1436)
        converter_10846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 36), 'converter')
        # Applying the binary operator '!=' (line 1436)
        result_ne_10847 = python_operator(stypy.reporting.localization.Localization(__file__, 1436, 18), '!=', converter_10845, converter_10846)
        
        # Assigning a type to the variable 'neednew' (line 1436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 8), 'neednew', result_ne_10847)
        
        # Assigning a Name to a Attribute (line 1437):
        
        # Assigning a Name to a Attribute (line 1437):
        # Getting the type of 'converter' (line 1437)
        converter_10848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 25), 'converter')
        # Getting the type of 'self' (line 1437)
        self_10849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1437, 8), 'self')
        # Setting the type of the member 'converter' of a type (line 1437)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1437, 8), self_10849, 'converter', converter_10848)
        
        # Assigning a Call to a Name (line 1438):
        
        # Assigning a Call to a Name (line 1438):
        
        # Call to default_units(...): (line 1438)
        # Processing the call arguments (line 1438)
        # Getting the type of 'data' (line 1438)
        data_10853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 47), 'data', False)
        # Getting the type of 'self' (line 1438)
        self_10854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 53), 'self', False)
        # Processing the call keyword arguments (line 1438)
        kwargs_10855 = {}
        # Getting the type of 'self' (line 1438)
        self_10850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 18), 'self', False)
        # Obtaining the member 'converter' of a type (line 1438)
        converter_10851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 18), self_10850, 'converter')
        # Obtaining the member 'default_units' of a type (line 1438)
        default_units_10852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 18), converter_10851, 'default_units')
        # Calling default_units(args, kwargs) (line 1438)
        default_units_call_result_10856 = invoke(stypy.reporting.localization.Localization(__file__, 1438, 18), default_units_10852, *[data_10853, self_10854], **kwargs_10855)
        
        # Assigning a type to the variable 'default' (line 1438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 8), 'default', default_units_call_result_10856)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'default' (line 1439)
        default_10857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 11), 'default')
        # Getting the type of 'None' (line 1439)
        None_10858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 26), 'None')
        # Applying the binary operator 'isnot' (line 1439)
        result_is_not_10859 = python_operator(stypy.reporting.localization.Localization(__file__, 1439, 11), 'isnot', default_10857, None_10858)
        
        
        # Getting the type of 'self' (line 1439)
        self_10860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 35), 'self')
        # Obtaining the member 'units' of a type (line 1439)
        units_10861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 35), self_10860, 'units')
        # Getting the type of 'None' (line 1439)
        None_10862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 49), 'None')
        # Applying the binary operator 'is' (line 1439)
        result_is__10863 = python_operator(stypy.reporting.localization.Localization(__file__, 1439, 35), 'is', units_10861, None_10862)
        
        # Applying the binary operator 'and' (line 1439)
        result_and_keyword_10864 = python_operator(stypy.reporting.localization.Localization(__file__, 1439, 11), 'and', result_is_not_10859, result_is__10863)
        
        # Testing the type of an if condition (line 1439)
        if_condition_10865 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1439, 8), result_and_keyword_10864)
        # Assigning a type to the variable 'if_condition_10865' (line 1439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 8), 'if_condition_10865', if_condition_10865)
        # SSA begins for if statement (line 1439)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_units(...): (line 1440)
        # Processing the call arguments (line 1440)
        # Getting the type of 'default' (line 1440)
        default_10868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 27), 'default', False)
        # Processing the call keyword arguments (line 1440)
        kwargs_10869 = {}
        # Getting the type of 'self' (line 1440)
        self_10866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 12), 'self', False)
        # Obtaining the member 'set_units' of a type (line 1440)
        set_units_10867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 12), self_10866, 'set_units')
        # Calling set_units(args, kwargs) (line 1440)
        set_units_call_result_10870 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 12), set_units_10867, *[default_10868], **kwargs_10869)
        
        # SSA join for if statement (line 1439)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'neednew' (line 1442)
        neednew_10871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 11), 'neednew')
        # Testing the type of an if condition (line 1442)
        if_condition_10872 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1442, 8), neednew_10871)
        # Assigning a type to the variable 'if_condition_10872' (line 1442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 8), 'if_condition_10872', if_condition_10872)
        # SSA begins for if statement (line 1442)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _update_axisinfo(...): (line 1443)
        # Processing the call keyword arguments (line 1443)
        kwargs_10875 = {}
        # Getting the type of 'self' (line 1443)
        self_10873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 12), 'self', False)
        # Obtaining the member '_update_axisinfo' of a type (line 1443)
        _update_axisinfo_10874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1443, 12), self_10873, '_update_axisinfo')
        # Calling _update_axisinfo(args, kwargs) (line 1443)
        _update_axisinfo_call_result_10876 = invoke(stypy.reporting.localization.Localization(__file__, 1443, 12), _update_axisinfo_10874, *[], **kwargs_10875)
        
        # SSA join for if statement (line 1442)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1444):
        
        # Assigning a Name to a Attribute (line 1444):
        # Getting the type of 'True' (line 1444)
        True_10877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 21), 'True')
        # Getting the type of 'self' (line 1444)
        self_10878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1444)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 8), self_10878, 'stale', True_10877)
        # Getting the type of 'True' (line 1445)
        True_10879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1445, 15), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 1445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 8), 'stypy_return_type', True_10879)
        
        # ################# End of 'update_units(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update_units' in the type store
        # Getting the type of 'stypy_return_type' (line 1425)
        stypy_return_type_10880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_10880)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update_units'
        return stypy_return_type_10880


    @norecursion
    def _update_axisinfo(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_axisinfo'
        module_type_store = module_type_store.open_function_context('_update_axisinfo', 1447, 4, False)
        # Assigning a type to the variable 'self' (line 1448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis._update_axisinfo.__dict__.__setitem__('stypy_localization', localization)
        Axis._update_axisinfo.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis._update_axisinfo.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis._update_axisinfo.__dict__.__setitem__('stypy_function_name', 'Axis._update_axisinfo')
        Axis._update_axisinfo.__dict__.__setitem__('stypy_param_names_list', [])
        Axis._update_axisinfo.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis._update_axisinfo.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis._update_axisinfo.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis._update_axisinfo.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis._update_axisinfo.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis._update_axisinfo.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis._update_axisinfo', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_axisinfo', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_axisinfo(...)' code ##################

        unicode_10881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, (-1)), 'unicode', u'\n        check the axis converter for the stored units to see if the\n        axis info needs to be updated\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1453)
        # Getting the type of 'self' (line 1453)
        self_10882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 11), 'self')
        # Obtaining the member 'converter' of a type (line 1453)
        converter_10883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1453, 11), self_10882, 'converter')
        # Getting the type of 'None' (line 1453)
        None_10884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 29), 'None')
        
        (may_be_10885, more_types_in_union_10886) = may_be_none(converter_10883, None_10884)

        if may_be_10885:

            if more_types_in_union_10886:
                # Runtime conditional SSA (line 1453)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1454)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1454, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_10886:
                # SSA join for if statement (line 1453)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1456):
        
        # Assigning a Call to a Name (line 1456):
        
        # Call to axisinfo(...): (line 1456)
        # Processing the call arguments (line 1456)
        # Getting the type of 'self' (line 1456)
        self_10890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 39), 'self', False)
        # Obtaining the member 'units' of a type (line 1456)
        units_10891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 39), self_10890, 'units')
        # Getting the type of 'self' (line 1456)
        self_10892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 51), 'self', False)
        # Processing the call keyword arguments (line 1456)
        kwargs_10893 = {}
        # Getting the type of 'self' (line 1456)
        self_10887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 15), 'self', False)
        # Obtaining the member 'converter' of a type (line 1456)
        converter_10888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 15), self_10887, 'converter')
        # Obtaining the member 'axisinfo' of a type (line 1456)
        axisinfo_10889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 15), converter_10888, 'axisinfo')
        # Calling axisinfo(args, kwargs) (line 1456)
        axisinfo_call_result_10894 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 15), axisinfo_10889, *[units_10891, self_10892], **kwargs_10893)
        
        # Assigning a type to the variable 'info' (line 1456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 8), 'info', axisinfo_call_result_10894)
        
        # Type idiom detected: calculating its left and rigth part (line 1457)
        # Getting the type of 'info' (line 1457)
        info_10895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 11), 'info')
        # Getting the type of 'None' (line 1457)
        None_10896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1457, 19), 'None')
        
        (may_be_10897, more_types_in_union_10898) = may_be_none(info_10895, None_10896)

        if may_be_10897:

            if more_types_in_union_10898:
                # Runtime conditional SSA (line 1457)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 1458)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_10898:
                # SSA join for if statement (line 1457)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'info' (line 1459)
        info_10899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 11), 'info')
        # Obtaining the member 'majloc' of a type (line 1459)
        majloc_10900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 11), info_10899, 'majloc')
        # Getting the type of 'None' (line 1459)
        None_10901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 30), 'None')
        # Applying the binary operator 'isnot' (line 1459)
        result_is_not_10902 = python_operator(stypy.reporting.localization.Localization(__file__, 1459, 11), 'isnot', majloc_10900, None_10901)
        
        
        # Getting the type of 'self' (line 1460)
        self_10903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 11), 'self')
        # Obtaining the member 'major' of a type (line 1460)
        major_10904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 11), self_10903, 'major')
        # Obtaining the member 'locator' of a type (line 1460)
        locator_10905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 11), major_10904, 'locator')
        # Getting the type of 'info' (line 1460)
        info_10906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 33), 'info')
        # Obtaining the member 'majloc' of a type (line 1460)
        majloc_10907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 33), info_10906, 'majloc')
        # Applying the binary operator '!=' (line 1460)
        result_ne_10908 = python_operator(stypy.reporting.localization.Localization(__file__, 1460, 11), '!=', locator_10905, majloc_10907)
        
        # Applying the binary operator 'and' (line 1459)
        result_and_keyword_10909 = python_operator(stypy.reporting.localization.Localization(__file__, 1459, 11), 'and', result_is_not_10902, result_ne_10908)
        # Getting the type of 'self' (line 1460)
        self_10910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1460, 49), 'self')
        # Obtaining the member 'isDefault_majloc' of a type (line 1460)
        isDefault_majloc_10911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1460, 49), self_10910, 'isDefault_majloc')
        # Applying the binary operator 'and' (line 1459)
        result_and_keyword_10912 = python_operator(stypy.reporting.localization.Localization(__file__, 1459, 11), 'and', result_and_keyword_10909, isDefault_majloc_10911)
        
        # Testing the type of an if condition (line 1459)
        if_condition_10913 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1459, 8), result_and_keyword_10912)
        # Assigning a type to the variable 'if_condition_10913' (line 1459)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1459, 8), 'if_condition_10913', if_condition_10913)
        # SSA begins for if statement (line 1459)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_major_locator(...): (line 1461)
        # Processing the call arguments (line 1461)
        # Getting the type of 'info' (line 1461)
        info_10916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 35), 'info', False)
        # Obtaining the member 'majloc' of a type (line 1461)
        majloc_10917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 35), info_10916, 'majloc')
        # Processing the call keyword arguments (line 1461)
        kwargs_10918 = {}
        # Getting the type of 'self' (line 1461)
        self_10914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 12), 'self', False)
        # Obtaining the member 'set_major_locator' of a type (line 1461)
        set_major_locator_10915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 12), self_10914, 'set_major_locator')
        # Calling set_major_locator(args, kwargs) (line 1461)
        set_major_locator_call_result_10919 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 12), set_major_locator_10915, *[majloc_10917], **kwargs_10918)
        
        
        # Assigning a Name to a Attribute (line 1462):
        
        # Assigning a Name to a Attribute (line 1462):
        # Getting the type of 'True' (line 1462)
        True_10920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 36), 'True')
        # Getting the type of 'self' (line 1462)
        self_10921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 12), 'self')
        # Setting the type of the member 'isDefault_majloc' of a type (line 1462)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1462, 12), self_10921, 'isDefault_majloc', True_10920)
        # SSA join for if statement (line 1459)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'info' (line 1463)
        info_10922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 11), 'info')
        # Obtaining the member 'minloc' of a type (line 1463)
        minloc_10923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 11), info_10922, 'minloc')
        # Getting the type of 'None' (line 1463)
        None_10924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 30), 'None')
        # Applying the binary operator 'isnot' (line 1463)
        result_is_not_10925 = python_operator(stypy.reporting.localization.Localization(__file__, 1463, 11), 'isnot', minloc_10923, None_10924)
        
        
        # Getting the type of 'self' (line 1464)
        self_10926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 11), 'self')
        # Obtaining the member 'minor' of a type (line 1464)
        minor_10927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 11), self_10926, 'minor')
        # Obtaining the member 'locator' of a type (line 1464)
        locator_10928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 11), minor_10927, 'locator')
        # Getting the type of 'info' (line 1464)
        info_10929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 33), 'info')
        # Obtaining the member 'minloc' of a type (line 1464)
        minloc_10930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 33), info_10929, 'minloc')
        # Applying the binary operator '!=' (line 1464)
        result_ne_10931 = python_operator(stypy.reporting.localization.Localization(__file__, 1464, 11), '!=', locator_10928, minloc_10930)
        
        # Applying the binary operator 'and' (line 1463)
        result_and_keyword_10932 = python_operator(stypy.reporting.localization.Localization(__file__, 1463, 11), 'and', result_is_not_10925, result_ne_10931)
        # Getting the type of 'self' (line 1464)
        self_10933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 49), 'self')
        # Obtaining the member 'isDefault_minloc' of a type (line 1464)
        isDefault_minloc_10934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1464, 49), self_10933, 'isDefault_minloc')
        # Applying the binary operator 'and' (line 1463)
        result_and_keyword_10935 = python_operator(stypy.reporting.localization.Localization(__file__, 1463, 11), 'and', result_and_keyword_10932, isDefault_minloc_10934)
        
        # Testing the type of an if condition (line 1463)
        if_condition_10936 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1463, 8), result_and_keyword_10935)
        # Assigning a type to the variable 'if_condition_10936' (line 1463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1463, 8), 'if_condition_10936', if_condition_10936)
        # SSA begins for if statement (line 1463)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_minor_locator(...): (line 1465)
        # Processing the call arguments (line 1465)
        # Getting the type of 'info' (line 1465)
        info_10939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 35), 'info', False)
        # Obtaining the member 'minloc' of a type (line 1465)
        minloc_10940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 35), info_10939, 'minloc')
        # Processing the call keyword arguments (line 1465)
        kwargs_10941 = {}
        # Getting the type of 'self' (line 1465)
        self_10937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 12), 'self', False)
        # Obtaining the member 'set_minor_locator' of a type (line 1465)
        set_minor_locator_10938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 12), self_10937, 'set_minor_locator')
        # Calling set_minor_locator(args, kwargs) (line 1465)
        set_minor_locator_call_result_10942 = invoke(stypy.reporting.localization.Localization(__file__, 1465, 12), set_minor_locator_10938, *[minloc_10940], **kwargs_10941)
        
        
        # Assigning a Name to a Attribute (line 1466):
        
        # Assigning a Name to a Attribute (line 1466):
        # Getting the type of 'True' (line 1466)
        True_10943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 36), 'True')
        # Getting the type of 'self' (line 1466)
        self_10944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 12), 'self')
        # Setting the type of the member 'isDefault_minloc' of a type (line 1466)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1466, 12), self_10944, 'isDefault_minloc', True_10943)
        # SSA join for if statement (line 1463)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'info' (line 1467)
        info_10945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 11), 'info')
        # Obtaining the member 'majfmt' of a type (line 1467)
        majfmt_10946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 11), info_10945, 'majfmt')
        # Getting the type of 'None' (line 1467)
        None_10947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 30), 'None')
        # Applying the binary operator 'isnot' (line 1467)
        result_is_not_10948 = python_operator(stypy.reporting.localization.Localization(__file__, 1467, 11), 'isnot', majfmt_10946, None_10947)
        
        
        # Getting the type of 'self' (line 1468)
        self_10949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 11), 'self')
        # Obtaining the member 'major' of a type (line 1468)
        major_10950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 11), self_10949, 'major')
        # Obtaining the member 'formatter' of a type (line 1468)
        formatter_10951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 11), major_10950, 'formatter')
        # Getting the type of 'info' (line 1468)
        info_10952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 35), 'info')
        # Obtaining the member 'majfmt' of a type (line 1468)
        majfmt_10953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 35), info_10952, 'majfmt')
        # Applying the binary operator '!=' (line 1468)
        result_ne_10954 = python_operator(stypy.reporting.localization.Localization(__file__, 1468, 11), '!=', formatter_10951, majfmt_10953)
        
        # Applying the binary operator 'and' (line 1467)
        result_and_keyword_10955 = python_operator(stypy.reporting.localization.Localization(__file__, 1467, 11), 'and', result_is_not_10948, result_ne_10954)
        # Getting the type of 'self' (line 1468)
        self_10956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 51), 'self')
        # Obtaining the member 'isDefault_majfmt' of a type (line 1468)
        isDefault_majfmt_10957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 51), self_10956, 'isDefault_majfmt')
        # Applying the binary operator 'and' (line 1467)
        result_and_keyword_10958 = python_operator(stypy.reporting.localization.Localization(__file__, 1467, 11), 'and', result_and_keyword_10955, isDefault_majfmt_10957)
        
        # Testing the type of an if condition (line 1467)
        if_condition_10959 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1467, 8), result_and_keyword_10958)
        # Assigning a type to the variable 'if_condition_10959' (line 1467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 8), 'if_condition_10959', if_condition_10959)
        # SSA begins for if statement (line 1467)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_major_formatter(...): (line 1469)
        # Processing the call arguments (line 1469)
        # Getting the type of 'info' (line 1469)
        info_10962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 37), 'info', False)
        # Obtaining the member 'majfmt' of a type (line 1469)
        majfmt_10963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 37), info_10962, 'majfmt')
        # Processing the call keyword arguments (line 1469)
        kwargs_10964 = {}
        # Getting the type of 'self' (line 1469)
        self_10960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 12), 'self', False)
        # Obtaining the member 'set_major_formatter' of a type (line 1469)
        set_major_formatter_10961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 12), self_10960, 'set_major_formatter')
        # Calling set_major_formatter(args, kwargs) (line 1469)
        set_major_formatter_call_result_10965 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 12), set_major_formatter_10961, *[majfmt_10963], **kwargs_10964)
        
        
        # Assigning a Name to a Attribute (line 1470):
        
        # Assigning a Name to a Attribute (line 1470):
        # Getting the type of 'True' (line 1470)
        True_10966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 36), 'True')
        # Getting the type of 'self' (line 1470)
        self_10967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 12), 'self')
        # Setting the type of the member 'isDefault_majfmt' of a type (line 1470)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 12), self_10967, 'isDefault_majfmt', True_10966)
        # SSA join for if statement (line 1467)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'info' (line 1471)
        info_10968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 11), 'info')
        # Obtaining the member 'minfmt' of a type (line 1471)
        minfmt_10969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 11), info_10968, 'minfmt')
        # Getting the type of 'None' (line 1471)
        None_10970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 30), 'None')
        # Applying the binary operator 'isnot' (line 1471)
        result_is_not_10971 = python_operator(stypy.reporting.localization.Localization(__file__, 1471, 11), 'isnot', minfmt_10969, None_10970)
        
        
        # Getting the type of 'self' (line 1472)
        self_10972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 11), 'self')
        # Obtaining the member 'minor' of a type (line 1472)
        minor_10973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 11), self_10972, 'minor')
        # Obtaining the member 'formatter' of a type (line 1472)
        formatter_10974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 11), minor_10973, 'formatter')
        # Getting the type of 'info' (line 1472)
        info_10975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 35), 'info')
        # Obtaining the member 'minfmt' of a type (line 1472)
        minfmt_10976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 35), info_10975, 'minfmt')
        # Applying the binary operator '!=' (line 1472)
        result_ne_10977 = python_operator(stypy.reporting.localization.Localization(__file__, 1472, 11), '!=', formatter_10974, minfmt_10976)
        
        # Applying the binary operator 'and' (line 1471)
        result_and_keyword_10978 = python_operator(stypy.reporting.localization.Localization(__file__, 1471, 11), 'and', result_is_not_10971, result_ne_10977)
        # Getting the type of 'self' (line 1472)
        self_10979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1472, 51), 'self')
        # Obtaining the member 'isDefault_minfmt' of a type (line 1472)
        isDefault_minfmt_10980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1472, 51), self_10979, 'isDefault_minfmt')
        # Applying the binary operator 'and' (line 1471)
        result_and_keyword_10981 = python_operator(stypy.reporting.localization.Localization(__file__, 1471, 11), 'and', result_and_keyword_10978, isDefault_minfmt_10980)
        
        # Testing the type of an if condition (line 1471)
        if_condition_10982 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1471, 8), result_and_keyword_10981)
        # Assigning a type to the variable 'if_condition_10982' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 8), 'if_condition_10982', if_condition_10982)
        # SSA begins for if statement (line 1471)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_minor_formatter(...): (line 1473)
        # Processing the call arguments (line 1473)
        # Getting the type of 'info' (line 1473)
        info_10985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 37), 'info', False)
        # Obtaining the member 'minfmt' of a type (line 1473)
        minfmt_10986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 37), info_10985, 'minfmt')
        # Processing the call keyword arguments (line 1473)
        kwargs_10987 = {}
        # Getting the type of 'self' (line 1473)
        self_10983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 12), 'self', False)
        # Obtaining the member 'set_minor_formatter' of a type (line 1473)
        set_minor_formatter_10984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 12), self_10983, 'set_minor_formatter')
        # Calling set_minor_formatter(args, kwargs) (line 1473)
        set_minor_formatter_call_result_10988 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 12), set_minor_formatter_10984, *[minfmt_10986], **kwargs_10987)
        
        
        # Assigning a Name to a Attribute (line 1474):
        
        # Assigning a Name to a Attribute (line 1474):
        # Getting the type of 'True' (line 1474)
        True_10989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 36), 'True')
        # Getting the type of 'self' (line 1474)
        self_10990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 12), 'self')
        # Setting the type of the member 'isDefault_minfmt' of a type (line 1474)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 12), self_10990, 'isDefault_minfmt', True_10989)
        # SSA join for if statement (line 1471)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'info' (line 1475)
        info_10991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 11), 'info')
        # Obtaining the member 'label' of a type (line 1475)
        label_10992 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 11), info_10991, 'label')
        # Getting the type of 'None' (line 1475)
        None_10993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 29), 'None')
        # Applying the binary operator 'isnot' (line 1475)
        result_is_not_10994 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 11), 'isnot', label_10992, None_10993)
        
        # Getting the type of 'self' (line 1475)
        self_10995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1475, 38), 'self')
        # Obtaining the member 'isDefault_label' of a type (line 1475)
        isDefault_label_10996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1475, 38), self_10995, 'isDefault_label')
        # Applying the binary operator 'and' (line 1475)
        result_and_keyword_10997 = python_operator(stypy.reporting.localization.Localization(__file__, 1475, 11), 'and', result_is_not_10994, isDefault_label_10996)
        
        # Testing the type of an if condition (line 1475)
        if_condition_10998 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1475, 8), result_and_keyword_10997)
        # Assigning a type to the variable 'if_condition_10998' (line 1475)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1475, 8), 'if_condition_10998', if_condition_10998)
        # SSA begins for if statement (line 1475)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_label_text(...): (line 1476)
        # Processing the call arguments (line 1476)
        # Getting the type of 'info' (line 1476)
        info_11001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 32), 'info', False)
        # Obtaining the member 'label' of a type (line 1476)
        label_11002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1476, 32), info_11001, 'label')
        # Processing the call keyword arguments (line 1476)
        kwargs_11003 = {}
        # Getting the type of 'self' (line 1476)
        self_10999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 12), 'self', False)
        # Obtaining the member 'set_label_text' of a type (line 1476)
        set_label_text_11000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1476, 12), self_10999, 'set_label_text')
        # Calling set_label_text(args, kwargs) (line 1476)
        set_label_text_call_result_11004 = invoke(stypy.reporting.localization.Localization(__file__, 1476, 12), set_label_text_11000, *[label_11002], **kwargs_11003)
        
        
        # Assigning a Name to a Attribute (line 1477):
        
        # Assigning a Name to a Attribute (line 1477):
        # Getting the type of 'True' (line 1477)
        True_11005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 35), 'True')
        # Getting the type of 'self' (line 1477)
        self_11006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 12), 'self')
        # Setting the type of the member 'isDefault_label' of a type (line 1477)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 12), self_11006, 'isDefault_label', True_11005)
        # SSA join for if statement (line 1475)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_default_intervals(...): (line 1479)
        # Processing the call keyword arguments (line 1479)
        kwargs_11009 = {}
        # Getting the type of 'self' (line 1479)
        self_11007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 8), 'self', False)
        # Obtaining the member 'set_default_intervals' of a type (line 1479)
        set_default_intervals_11008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 8), self_11007, 'set_default_intervals')
        # Calling set_default_intervals(args, kwargs) (line 1479)
        set_default_intervals_call_result_11010 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 8), set_default_intervals_11008, *[], **kwargs_11009)
        
        
        # ################# End of '_update_axisinfo(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_axisinfo' in the type store
        # Getting the type of 'stypy_return_type' (line 1447)
        stypy_return_type_11011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11011)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_axisinfo'
        return stypy_return_type_11011


    @norecursion
    def have_units(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'have_units'
        module_type_store = module_type_store.open_function_context('have_units', 1481, 4, False)
        # Assigning a type to the variable 'self' (line 1482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.have_units.__dict__.__setitem__('stypy_localization', localization)
        Axis.have_units.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.have_units.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.have_units.__dict__.__setitem__('stypy_function_name', 'Axis.have_units')
        Axis.have_units.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.have_units.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.have_units.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.have_units.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.have_units.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.have_units.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.have_units.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.have_units', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'have_units', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'have_units(...)' code ##################

        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1482)
        self_11012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 15), 'self')
        # Obtaining the member 'converter' of a type (line 1482)
        converter_11013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 15), self_11012, 'converter')
        # Getting the type of 'None' (line 1482)
        None_11014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 37), 'None')
        # Applying the binary operator 'isnot' (line 1482)
        result_is_not_11015 = python_operator(stypy.reporting.localization.Localization(__file__, 1482, 15), 'isnot', converter_11013, None_11014)
        
        
        # Getting the type of 'self' (line 1482)
        self_11016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 45), 'self')
        # Obtaining the member 'units' of a type (line 1482)
        units_11017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 45), self_11016, 'units')
        # Getting the type of 'None' (line 1482)
        None_11018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 63), 'None')
        # Applying the binary operator 'isnot' (line 1482)
        result_is_not_11019 = python_operator(stypy.reporting.localization.Localization(__file__, 1482, 45), 'isnot', units_11017, None_11018)
        
        # Applying the binary operator 'or' (line 1482)
        result_or_keyword_11020 = python_operator(stypy.reporting.localization.Localization(__file__, 1482, 15), 'or', result_is_not_11015, result_is_not_11019)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 8), 'stypy_return_type', result_or_keyword_11020)
        
        # ################# End of 'have_units(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'have_units' in the type store
        # Getting the type of 'stypy_return_type' (line 1481)
        stypy_return_type_11021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11021)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'have_units'
        return stypy_return_type_11021


    @norecursion
    def convert_units(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'convert_units'
        module_type_store = module_type_store.open_function_context('convert_units', 1484, 4, False)
        # Assigning a type to the variable 'self' (line 1485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1485, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.convert_units.__dict__.__setitem__('stypy_localization', localization)
        Axis.convert_units.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.convert_units.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.convert_units.__dict__.__setitem__('stypy_function_name', 'Axis.convert_units')
        Axis.convert_units.__dict__.__setitem__('stypy_param_names_list', ['x'])
        Axis.convert_units.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.convert_units.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.convert_units.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.convert_units.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.convert_units.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.convert_units.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.convert_units', ['x'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'convert_units', localization, ['x'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'convert_units(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1485)
        # Getting the type of 'self' (line 1485)
        self_11022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 11), 'self')
        # Obtaining the member 'converter' of a type (line 1485)
        converter_11023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1485, 11), self_11022, 'converter')
        # Getting the type of 'None' (line 1485)
        None_11024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1485, 29), 'None')
        
        (may_be_11025, more_types_in_union_11026) = may_be_none(converter_11023, None_11024)

        if may_be_11025:

            if more_types_in_union_11026:
                # Runtime conditional SSA (line 1485)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 1486):
            
            # Assigning a Call to a Attribute (line 1486):
            
            # Call to get_converter(...): (line 1486)
            # Processing the call arguments (line 1486)
            # Getting the type of 'x' (line 1486)
            x_11030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 59), 'x', False)
            # Processing the call keyword arguments (line 1486)
            kwargs_11031 = {}
            # Getting the type of 'munits' (line 1486)
            munits_11027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 29), 'munits', False)
            # Obtaining the member 'registry' of a type (line 1486)
            registry_11028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1486, 29), munits_11027, 'registry')
            # Obtaining the member 'get_converter' of a type (line 1486)
            get_converter_11029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1486, 29), registry_11028, 'get_converter')
            # Calling get_converter(args, kwargs) (line 1486)
            get_converter_call_result_11032 = invoke(stypy.reporting.localization.Localization(__file__, 1486, 29), get_converter_11029, *[x_11030], **kwargs_11031)
            
            # Getting the type of 'self' (line 1486)
            self_11033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1486, 12), 'self')
            # Setting the type of the member 'converter' of a type (line 1486)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1486, 12), self_11033, 'converter', get_converter_call_result_11032)

            if more_types_in_union_11026:
                # SSA join for if statement (line 1485)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1488)
        # Getting the type of 'self' (line 1488)
        self_11034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 11), 'self')
        # Obtaining the member 'converter' of a type (line 1488)
        converter_11035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1488, 11), self_11034, 'converter')
        # Getting the type of 'None' (line 1488)
        None_11036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 29), 'None')
        
        (may_be_11037, more_types_in_union_11038) = may_be_none(converter_11035, None_11036)

        if may_be_11037:

            if more_types_in_union_11038:
                # Runtime conditional SSA (line 1488)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'x' (line 1489)
            x_11039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 19), 'x')
            # Assigning a type to the variable 'stypy_return_type' (line 1489)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 12), 'stypy_return_type', x_11039)

            if more_types_in_union_11038:
                # SSA join for if statement (line 1488)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1491):
        
        # Assigning a Call to a Name (line 1491):
        
        # Call to convert(...): (line 1491)
        # Processing the call arguments (line 1491)
        # Getting the type of 'x' (line 1491)
        x_11043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 37), 'x', False)
        # Getting the type of 'self' (line 1491)
        self_11044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 40), 'self', False)
        # Obtaining the member 'units' of a type (line 1491)
        units_11045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 40), self_11044, 'units')
        # Getting the type of 'self' (line 1491)
        self_11046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 52), 'self', False)
        # Processing the call keyword arguments (line 1491)
        kwargs_11047 = {}
        # Getting the type of 'self' (line 1491)
        self_11040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 14), 'self', False)
        # Obtaining the member 'converter' of a type (line 1491)
        converter_11041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 14), self_11040, 'converter')
        # Obtaining the member 'convert' of a type (line 1491)
        convert_11042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1491, 14), converter_11041, 'convert')
        # Calling convert(args, kwargs) (line 1491)
        convert_call_result_11048 = invoke(stypy.reporting.localization.Localization(__file__, 1491, 14), convert_11042, *[x_11043, units_11045, self_11046], **kwargs_11047)
        
        # Assigning a type to the variable 'ret' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 8), 'ret', convert_call_result_11048)
        # Getting the type of 'ret' (line 1492)
        ret_11049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 15), 'ret')
        # Assigning a type to the variable 'stypy_return_type' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 8), 'stypy_return_type', ret_11049)
        
        # ################# End of 'convert_units(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'convert_units' in the type store
        # Getting the type of 'stypy_return_type' (line 1484)
        stypy_return_type_11050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1484, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11050)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'convert_units'
        return stypy_return_type_11050


    @norecursion
    def set_units(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_units'
        module_type_store = module_type_store.open_function_context('set_units', 1494, 4, False)
        # Assigning a type to the variable 'self' (line 1495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1495, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_units.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_units.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_units.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_units.__dict__.__setitem__('stypy_function_name', 'Axis.set_units')
        Axis.set_units.__dict__.__setitem__('stypy_param_names_list', ['u'])
        Axis.set_units.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_units.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_units.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_units.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_units.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_units.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_units', ['u'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_units', localization, ['u'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_units(...)' code ##################

        unicode_11051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1499, (-1)), 'unicode', u'\n        set the units for axis\n\n        ACCEPTS: a units tag\n        ')
        
        # Assigning a Name to a Name (line 1500):
        
        # Assigning a Name to a Name (line 1500):
        # Getting the type of 'False' (line 1500)
        False_11052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 19), 'False')
        # Assigning a type to the variable 'pchanged' (line 1500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 8), 'pchanged', False_11052)
        
        # Type idiom detected: calculating its left and rigth part (line 1501)
        # Getting the type of 'u' (line 1501)
        u_11053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 11), 'u')
        # Getting the type of 'None' (line 1501)
        None_11054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 16), 'None')
        
        (may_be_11055, more_types_in_union_11056) = may_be_none(u_11053, None_11054)

        if may_be_11055:

            if more_types_in_union_11056:
                # Runtime conditional SSA (line 1501)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 1502):
            
            # Assigning a Name to a Attribute (line 1502):
            # Getting the type of 'None' (line 1502)
            None_11057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 25), 'None')
            # Getting the type of 'self' (line 1502)
            self_11058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 12), 'self')
            # Setting the type of the member 'units' of a type (line 1502)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1502, 12), self_11058, 'units', None_11057)
            
            # Assigning a Name to a Name (line 1503):
            
            # Assigning a Name to a Name (line 1503):
            # Getting the type of 'True' (line 1503)
            True_11059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 23), 'True')
            # Assigning a type to the variable 'pchanged' (line 1503)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1503, 12), 'pchanged', True_11059)

            if more_types_in_union_11056:
                # Runtime conditional SSA for else branch (line 1501)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_11055) or more_types_in_union_11056):
            
            
            # Getting the type of 'u' (line 1505)
            u_11060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 15), 'u')
            # Getting the type of 'self' (line 1505)
            self_11061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 20), 'self')
            # Obtaining the member 'units' of a type (line 1505)
            units_11062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1505, 20), self_11061, 'units')
            # Applying the binary operator '!=' (line 1505)
            result_ne_11063 = python_operator(stypy.reporting.localization.Localization(__file__, 1505, 15), '!=', u_11060, units_11062)
            
            # Testing the type of an if condition (line 1505)
            if_condition_11064 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1505, 12), result_ne_11063)
            # Assigning a type to the variable 'if_condition_11064' (line 1505)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1505, 12), 'if_condition_11064', if_condition_11064)
            # SSA begins for if statement (line 1505)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Attribute (line 1506):
            
            # Assigning a Name to a Attribute (line 1506):
            # Getting the type of 'u' (line 1506)
            u_11065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 29), 'u')
            # Getting the type of 'self' (line 1506)
            self_11066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 16), 'self')
            # Setting the type of the member 'units' of a type (line 1506)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 16), self_11066, 'units', u_11065)
            
            # Assigning a Name to a Name (line 1507):
            
            # Assigning a Name to a Name (line 1507):
            # Getting the type of 'True' (line 1507)
            True_11067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 27), 'True')
            # Assigning a type to the variable 'pchanged' (line 1507)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 16), 'pchanged', True_11067)
            # SSA join for if statement (line 1505)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_11055 and more_types_in_union_11056):
                # SSA join for if statement (line 1501)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'pchanged' (line 1508)
        pchanged_11068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 11), 'pchanged')
        # Testing the type of an if condition (line 1508)
        if_condition_11069 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1508, 8), pchanged_11068)
        # Assigning a type to the variable 'if_condition_11069' (line 1508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 8), 'if_condition_11069', if_condition_11069)
        # SSA begins for if statement (line 1508)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _update_axisinfo(...): (line 1509)
        # Processing the call keyword arguments (line 1509)
        kwargs_11072 = {}
        # Getting the type of 'self' (line 1509)
        self_11070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 12), 'self', False)
        # Obtaining the member '_update_axisinfo' of a type (line 1509)
        _update_axisinfo_11071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1509, 12), self_11070, '_update_axisinfo')
        # Calling _update_axisinfo(args, kwargs) (line 1509)
        _update_axisinfo_call_result_11073 = invoke(stypy.reporting.localization.Localization(__file__, 1509, 12), _update_axisinfo_11071, *[], **kwargs_11072)
        
        
        # Call to process(...): (line 1510)
        # Processing the call arguments (line 1510)
        unicode_11077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1510, 35), 'unicode', u'units')
        # Processing the call keyword arguments (line 1510)
        kwargs_11078 = {}
        # Getting the type of 'self' (line 1510)
        self_11074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 12), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1510)
        callbacks_11075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1510, 12), self_11074, 'callbacks')
        # Obtaining the member 'process' of a type (line 1510)
        process_11076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1510, 12), callbacks_11075, 'process')
        # Calling process(args, kwargs) (line 1510)
        process_call_result_11079 = invoke(stypy.reporting.localization.Localization(__file__, 1510, 12), process_11076, *[unicode_11077], **kwargs_11078)
        
        
        # Call to process(...): (line 1511)
        # Processing the call arguments (line 1511)
        unicode_11083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1511, 35), 'unicode', u'units finalize')
        # Processing the call keyword arguments (line 1511)
        kwargs_11084 = {}
        # Getting the type of 'self' (line 1511)
        self_11080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1511, 12), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 1511)
        callbacks_11081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1511, 12), self_11080, 'callbacks')
        # Obtaining the member 'process' of a type (line 1511)
        process_11082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1511, 12), callbacks_11081, 'process')
        # Calling process(args, kwargs) (line 1511)
        process_call_result_11085 = invoke(stypy.reporting.localization.Localization(__file__, 1511, 12), process_11082, *[unicode_11083], **kwargs_11084)
        
        # SSA join for if statement (line 1508)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1512):
        
        # Assigning a Name to a Attribute (line 1512):
        # Getting the type of 'True' (line 1512)
        True_11086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 21), 'True')
        # Getting the type of 'self' (line 1512)
        self_11087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1512)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 8), self_11087, 'stale', True_11086)
        
        # ################# End of 'set_units(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_units' in the type store
        # Getting the type of 'stypy_return_type' (line 1494)
        stypy_return_type_11088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11088)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_units'
        return stypy_return_type_11088


    @norecursion
    def get_units(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_units'
        module_type_store = module_type_store.open_function_context('get_units', 1514, 4, False)
        # Assigning a type to the variable 'self' (line 1515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1515, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_units.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_units.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_units.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_units.__dict__.__setitem__('stypy_function_name', 'Axis.get_units')
        Axis.get_units.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_units.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_units.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_units.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_units.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_units.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_units.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_units', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_units', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_units(...)' code ##################

        unicode_11089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1515, 8), 'unicode', u'return the units for axis')
        # Getting the type of 'self' (line 1516)
        self_11090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 15), 'self')
        # Obtaining the member 'units' of a type (line 1516)
        units_11091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1516, 15), self_11090, 'units')
        # Assigning a type to the variable 'stypy_return_type' (line 1516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1516, 8), 'stypy_return_type', units_11091)
        
        # ################# End of 'get_units(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_units' in the type store
        # Getting the type of 'stypy_return_type' (line 1514)
        stypy_return_type_11092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11092)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_units'
        return stypy_return_type_11092


    @norecursion
    def set_label_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1518)
        None_11093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 45), 'None')
        defaults = [None_11093]
        # Create a new context for function 'set_label_text'
        module_type_store = module_type_store.open_function_context('set_label_text', 1518, 4, False)
        # Assigning a type to the variable 'self' (line 1519)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1519, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_label_text.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_label_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_label_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_label_text.__dict__.__setitem__('stypy_function_name', 'Axis.set_label_text')
        Axis.set_label_text.__dict__.__setitem__('stypy_param_names_list', ['label', 'fontdict'])
        Axis.set_label_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_label_text.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Axis.set_label_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_label_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_label_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_label_text.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_label_text', ['label', 'fontdict'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_label_text', localization, ['label', 'fontdict'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_label_text(...)' code ##################

        unicode_11094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1522, (-1)), 'unicode', u'  Sets the text value of the axis label\n\n        ACCEPTS: A string value for the label\n        ')
        
        # Assigning a Name to a Attribute (line 1523):
        
        # Assigning a Name to a Attribute (line 1523):
        # Getting the type of 'False' (line 1523)
        False_11095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 31), 'False')
        # Getting the type of 'self' (line 1523)
        self_11096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 8), 'self')
        # Setting the type of the member 'isDefault_label' of a type (line 1523)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 8), self_11096, 'isDefault_label', False_11095)
        
        # Call to set_text(...): (line 1524)
        # Processing the call arguments (line 1524)
        # Getting the type of 'label' (line 1524)
        label_11100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 28), 'label', False)
        # Processing the call keyword arguments (line 1524)
        kwargs_11101 = {}
        # Getting the type of 'self' (line 1524)
        self_11097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 8), 'self', False)
        # Obtaining the member 'label' of a type (line 1524)
        label_11098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 8), self_11097, 'label')
        # Obtaining the member 'set_text' of a type (line 1524)
        set_text_11099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 8), label_11098, 'set_text')
        # Calling set_text(args, kwargs) (line 1524)
        set_text_call_result_11102 = invoke(stypy.reporting.localization.Localization(__file__, 1524, 8), set_text_11099, *[label_11100], **kwargs_11101)
        
        
        # Type idiom detected: calculating its left and rigth part (line 1525)
        # Getting the type of 'fontdict' (line 1525)
        fontdict_11103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 8), 'fontdict')
        # Getting the type of 'None' (line 1525)
        None_11104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 27), 'None')
        
        (may_be_11105, more_types_in_union_11106) = may_not_be_none(fontdict_11103, None_11104)

        if may_be_11105:

            if more_types_in_union_11106:
                # Runtime conditional SSA (line 1525)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to update(...): (line 1526)
            # Processing the call arguments (line 1526)
            # Getting the type of 'fontdict' (line 1526)
            fontdict_11110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 30), 'fontdict', False)
            # Processing the call keyword arguments (line 1526)
            kwargs_11111 = {}
            # Getting the type of 'self' (line 1526)
            self_11107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 12), 'self', False)
            # Obtaining the member 'label' of a type (line 1526)
            label_11108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 12), self_11107, 'label')
            # Obtaining the member 'update' of a type (line 1526)
            update_11109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 12), label_11108, 'update')
            # Calling update(args, kwargs) (line 1526)
            update_call_result_11112 = invoke(stypy.reporting.localization.Localization(__file__, 1526, 12), update_11109, *[fontdict_11110], **kwargs_11111)
            

            if more_types_in_union_11106:
                # SSA join for if statement (line 1525)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to update(...): (line 1527)
        # Processing the call arguments (line 1527)
        # Getting the type of 'kwargs' (line 1527)
        kwargs_11116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 26), 'kwargs', False)
        # Processing the call keyword arguments (line 1527)
        kwargs_11117 = {}
        # Getting the type of 'self' (line 1527)
        self_11113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 8), 'self', False)
        # Obtaining the member 'label' of a type (line 1527)
        label_11114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 8), self_11113, 'label')
        # Obtaining the member 'update' of a type (line 1527)
        update_11115 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 8), label_11114, 'update')
        # Calling update(args, kwargs) (line 1527)
        update_call_result_11118 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 8), update_11115, *[kwargs_11116], **kwargs_11117)
        
        
        # Assigning a Name to a Attribute (line 1528):
        
        # Assigning a Name to a Attribute (line 1528):
        # Getting the type of 'True' (line 1528)
        True_11119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 21), 'True')
        # Getting the type of 'self' (line 1528)
        self_11120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1528)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 8), self_11120, 'stale', True_11119)
        # Getting the type of 'self' (line 1529)
        self_11121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 15), 'self')
        # Obtaining the member 'label' of a type (line 1529)
        label_11122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1529, 15), self_11121, 'label')
        # Assigning a type to the variable 'stypy_return_type' (line 1529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 8), 'stypy_return_type', label_11122)
        
        # ################# End of 'set_label_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_label_text' in the type store
        # Getting the type of 'stypy_return_type' (line 1518)
        stypy_return_type_11123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11123)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_label_text'
        return stypy_return_type_11123


    @norecursion
    def set_major_formatter(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_major_formatter'
        module_type_store = module_type_store.open_function_context('set_major_formatter', 1531, 4, False)
        # Assigning a type to the variable 'self' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_major_formatter.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_major_formatter.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_major_formatter.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_major_formatter.__dict__.__setitem__('stypy_function_name', 'Axis.set_major_formatter')
        Axis.set_major_formatter.__dict__.__setitem__('stypy_param_names_list', ['formatter'])
        Axis.set_major_formatter.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_major_formatter.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_major_formatter.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_major_formatter.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_major_formatter.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_major_formatter.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_major_formatter', ['formatter'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_major_formatter', localization, ['formatter'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_major_formatter(...)' code ##################

        unicode_11124 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, (-1)), 'unicode', u'\n        Set the formatter of the major ticker\n\n        ACCEPTS: A :class:`~matplotlib.ticker.Formatter` instance\n        ')
        
        # Assigning a Name to a Attribute (line 1537):
        
        # Assigning a Name to a Attribute (line 1537):
        # Getting the type of 'False' (line 1537)
        False_11125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 32), 'False')
        # Getting the type of 'self' (line 1537)
        self_11126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 8), 'self')
        # Setting the type of the member 'isDefault_majfmt' of a type (line 1537)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 8), self_11126, 'isDefault_majfmt', False_11125)
        
        # Assigning a Name to a Attribute (line 1538):
        
        # Assigning a Name to a Attribute (line 1538):
        # Getting the type of 'formatter' (line 1538)
        formatter_11127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 31), 'formatter')
        # Getting the type of 'self' (line 1538)
        self_11128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 8), 'self')
        # Obtaining the member 'major' of a type (line 1538)
        major_11129 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 8), self_11128, 'major')
        # Setting the type of the member 'formatter' of a type (line 1538)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 8), major_11129, 'formatter', formatter_11127)
        
        # Call to set_axis(...): (line 1539)
        # Processing the call arguments (line 1539)
        # Getting the type of 'self' (line 1539)
        self_11132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 27), 'self', False)
        # Processing the call keyword arguments (line 1539)
        kwargs_11133 = {}
        # Getting the type of 'formatter' (line 1539)
        formatter_11130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 8), 'formatter', False)
        # Obtaining the member 'set_axis' of a type (line 1539)
        set_axis_11131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 8), formatter_11130, 'set_axis')
        # Calling set_axis(args, kwargs) (line 1539)
        set_axis_call_result_11134 = invoke(stypy.reporting.localization.Localization(__file__, 1539, 8), set_axis_11131, *[self_11132], **kwargs_11133)
        
        
        # Assigning a Name to a Attribute (line 1540):
        
        # Assigning a Name to a Attribute (line 1540):
        # Getting the type of 'True' (line 1540)
        True_11135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 21), 'True')
        # Getting the type of 'self' (line 1540)
        self_11136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1540)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1540, 8), self_11136, 'stale', True_11135)
        
        # ################# End of 'set_major_formatter(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_major_formatter' in the type store
        # Getting the type of 'stypy_return_type' (line 1531)
        stypy_return_type_11137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11137)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_major_formatter'
        return stypy_return_type_11137


    @norecursion
    def set_minor_formatter(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_minor_formatter'
        module_type_store = module_type_store.open_function_context('set_minor_formatter', 1542, 4, False)
        # Assigning a type to the variable 'self' (line 1543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_minor_formatter.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_minor_formatter.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_minor_formatter.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_minor_formatter.__dict__.__setitem__('stypy_function_name', 'Axis.set_minor_formatter')
        Axis.set_minor_formatter.__dict__.__setitem__('stypy_param_names_list', ['formatter'])
        Axis.set_minor_formatter.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_minor_formatter.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_minor_formatter.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_minor_formatter.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_minor_formatter.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_minor_formatter.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_minor_formatter', ['formatter'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_minor_formatter', localization, ['formatter'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_minor_formatter(...)' code ##################

        unicode_11138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1547, (-1)), 'unicode', u'\n        Set the formatter of the minor ticker\n\n        ACCEPTS: A :class:`~matplotlib.ticker.Formatter` instance\n        ')
        
        # Assigning a Name to a Attribute (line 1548):
        
        # Assigning a Name to a Attribute (line 1548):
        # Getting the type of 'False' (line 1548)
        False_11139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 32), 'False')
        # Getting the type of 'self' (line 1548)
        self_11140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 8), 'self')
        # Setting the type of the member 'isDefault_minfmt' of a type (line 1548)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 8), self_11140, 'isDefault_minfmt', False_11139)
        
        # Assigning a Name to a Attribute (line 1549):
        
        # Assigning a Name to a Attribute (line 1549):
        # Getting the type of 'formatter' (line 1549)
        formatter_11141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 31), 'formatter')
        # Getting the type of 'self' (line 1549)
        self_11142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 8), 'self')
        # Obtaining the member 'minor' of a type (line 1549)
        minor_11143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 8), self_11142, 'minor')
        # Setting the type of the member 'formatter' of a type (line 1549)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1549, 8), minor_11143, 'formatter', formatter_11141)
        
        # Call to set_axis(...): (line 1550)
        # Processing the call arguments (line 1550)
        # Getting the type of 'self' (line 1550)
        self_11146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 27), 'self', False)
        # Processing the call keyword arguments (line 1550)
        kwargs_11147 = {}
        # Getting the type of 'formatter' (line 1550)
        formatter_11144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 8), 'formatter', False)
        # Obtaining the member 'set_axis' of a type (line 1550)
        set_axis_11145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1550, 8), formatter_11144, 'set_axis')
        # Calling set_axis(args, kwargs) (line 1550)
        set_axis_call_result_11148 = invoke(stypy.reporting.localization.Localization(__file__, 1550, 8), set_axis_11145, *[self_11146], **kwargs_11147)
        
        
        # Assigning a Name to a Attribute (line 1551):
        
        # Assigning a Name to a Attribute (line 1551):
        # Getting the type of 'True' (line 1551)
        True_11149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 21), 'True')
        # Getting the type of 'self' (line 1551)
        self_11150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1551)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 8), self_11150, 'stale', True_11149)
        
        # ################# End of 'set_minor_formatter(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_minor_formatter' in the type store
        # Getting the type of 'stypy_return_type' (line 1542)
        stypy_return_type_11151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11151)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_minor_formatter'
        return stypy_return_type_11151


    @norecursion
    def set_major_locator(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_major_locator'
        module_type_store = module_type_store.open_function_context('set_major_locator', 1553, 4, False)
        # Assigning a type to the variable 'self' (line 1554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1554, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_major_locator.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_major_locator.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_major_locator.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_major_locator.__dict__.__setitem__('stypy_function_name', 'Axis.set_major_locator')
        Axis.set_major_locator.__dict__.__setitem__('stypy_param_names_list', ['locator'])
        Axis.set_major_locator.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_major_locator.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_major_locator.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_major_locator.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_major_locator.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_major_locator.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_major_locator', ['locator'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_major_locator', localization, ['locator'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_major_locator(...)' code ##################

        unicode_11152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1558, (-1)), 'unicode', u'\n        Set the locator of the major ticker\n\n        ACCEPTS: a :class:`~matplotlib.ticker.Locator` instance\n        ')
        
        # Assigning a Name to a Attribute (line 1559):
        
        # Assigning a Name to a Attribute (line 1559):
        # Getting the type of 'False' (line 1559)
        False_11153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 32), 'False')
        # Getting the type of 'self' (line 1559)
        self_11154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 8), 'self')
        # Setting the type of the member 'isDefault_majloc' of a type (line 1559)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1559, 8), self_11154, 'isDefault_majloc', False_11153)
        
        # Assigning a Name to a Attribute (line 1560):
        
        # Assigning a Name to a Attribute (line 1560):
        # Getting the type of 'locator' (line 1560)
        locator_11155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 29), 'locator')
        # Getting the type of 'self' (line 1560)
        self_11156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 8), 'self')
        # Obtaining the member 'major' of a type (line 1560)
        major_11157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1560, 8), self_11156, 'major')
        # Setting the type of the member 'locator' of a type (line 1560)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1560, 8), major_11157, 'locator', locator_11155)
        
        # Call to set_axis(...): (line 1561)
        # Processing the call arguments (line 1561)
        # Getting the type of 'self' (line 1561)
        self_11160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 25), 'self', False)
        # Processing the call keyword arguments (line 1561)
        kwargs_11161 = {}
        # Getting the type of 'locator' (line 1561)
        locator_11158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 8), 'locator', False)
        # Obtaining the member 'set_axis' of a type (line 1561)
        set_axis_11159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1561, 8), locator_11158, 'set_axis')
        # Calling set_axis(args, kwargs) (line 1561)
        set_axis_call_result_11162 = invoke(stypy.reporting.localization.Localization(__file__, 1561, 8), set_axis_11159, *[self_11160], **kwargs_11161)
        
        
        # Assigning a Name to a Attribute (line 1562):
        
        # Assigning a Name to a Attribute (line 1562):
        # Getting the type of 'True' (line 1562)
        True_11163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 21), 'True')
        # Getting the type of 'self' (line 1562)
        self_11164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1562)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1562, 8), self_11164, 'stale', True_11163)
        
        # ################# End of 'set_major_locator(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_major_locator' in the type store
        # Getting the type of 'stypy_return_type' (line 1553)
        stypy_return_type_11165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11165)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_major_locator'
        return stypy_return_type_11165


    @norecursion
    def set_minor_locator(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_minor_locator'
        module_type_store = module_type_store.open_function_context('set_minor_locator', 1564, 4, False)
        # Assigning a type to the variable 'self' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_minor_locator.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_minor_locator.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_minor_locator.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_minor_locator.__dict__.__setitem__('stypy_function_name', 'Axis.set_minor_locator')
        Axis.set_minor_locator.__dict__.__setitem__('stypy_param_names_list', ['locator'])
        Axis.set_minor_locator.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_minor_locator.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_minor_locator.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_minor_locator.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_minor_locator.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_minor_locator.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_minor_locator', ['locator'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_minor_locator', localization, ['locator'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_minor_locator(...)' code ##################

        unicode_11166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1569, (-1)), 'unicode', u'\n        Set the locator of the minor ticker\n\n        ACCEPTS: a :class:`~matplotlib.ticker.Locator` instance\n        ')
        
        # Assigning a Name to a Attribute (line 1570):
        
        # Assigning a Name to a Attribute (line 1570):
        # Getting the type of 'False' (line 1570)
        False_11167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 32), 'False')
        # Getting the type of 'self' (line 1570)
        self_11168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 8), 'self')
        # Setting the type of the member 'isDefault_minloc' of a type (line 1570)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1570, 8), self_11168, 'isDefault_minloc', False_11167)
        
        # Assigning a Name to a Attribute (line 1571):
        
        # Assigning a Name to a Attribute (line 1571):
        # Getting the type of 'locator' (line 1571)
        locator_11169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 29), 'locator')
        # Getting the type of 'self' (line 1571)
        self_11170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1571, 8), 'self')
        # Obtaining the member 'minor' of a type (line 1571)
        minor_11171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 8), self_11170, 'minor')
        # Setting the type of the member 'locator' of a type (line 1571)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1571, 8), minor_11171, 'locator', locator_11169)
        
        # Call to set_axis(...): (line 1572)
        # Processing the call arguments (line 1572)
        # Getting the type of 'self' (line 1572)
        self_11174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 25), 'self', False)
        # Processing the call keyword arguments (line 1572)
        kwargs_11175 = {}
        # Getting the type of 'locator' (line 1572)
        locator_11172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 8), 'locator', False)
        # Obtaining the member 'set_axis' of a type (line 1572)
        set_axis_11173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1572, 8), locator_11172, 'set_axis')
        # Calling set_axis(args, kwargs) (line 1572)
        set_axis_call_result_11176 = invoke(stypy.reporting.localization.Localization(__file__, 1572, 8), set_axis_11173, *[self_11174], **kwargs_11175)
        
        
        # Assigning a Name to a Attribute (line 1573):
        
        # Assigning a Name to a Attribute (line 1573):
        # Getting the type of 'True' (line 1573)
        True_11177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 21), 'True')
        # Getting the type of 'self' (line 1573)
        self_11178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1573)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 8), self_11178, 'stale', True_11177)
        
        # ################# End of 'set_minor_locator(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_minor_locator' in the type store
        # Getting the type of 'stypy_return_type' (line 1564)
        stypy_return_type_11179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1564, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11179)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_minor_locator'
        return stypy_return_type_11179


    @norecursion
    def set_pickradius(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_pickradius'
        module_type_store = module_type_store.open_function_context('set_pickradius', 1575, 4, False)
        # Assigning a type to the variable 'self' (line 1576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1576, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_pickradius.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_pickradius.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_pickradius.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_pickradius.__dict__.__setitem__('stypy_function_name', 'Axis.set_pickradius')
        Axis.set_pickradius.__dict__.__setitem__('stypy_param_names_list', ['pickradius'])
        Axis.set_pickradius.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_pickradius.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_pickradius.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_pickradius.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_pickradius.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_pickradius.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_pickradius', ['pickradius'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_pickradius', localization, ['pickradius'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_pickradius(...)' code ##################

        unicode_11180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1580, (-1)), 'unicode', u'\n        Set the depth of the axis used by the picker\n\n        ACCEPTS: a distance in points\n        ')
        
        # Assigning a Name to a Attribute (line 1581):
        
        # Assigning a Name to a Attribute (line 1581):
        # Getting the type of 'pickradius' (line 1581)
        pickradius_11181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 26), 'pickradius')
        # Getting the type of 'self' (line 1581)
        self_11182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 8), 'self')
        # Setting the type of the member 'pickradius' of a type (line 1581)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1581, 8), self_11182, 'pickradius', pickradius_11181)
        
        # ################# End of 'set_pickradius(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_pickradius' in the type store
        # Getting the type of 'stypy_return_type' (line 1575)
        stypy_return_type_11183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11183)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_pickradius'
        return stypy_return_type_11183


    @norecursion
    def set_ticklabels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_ticklabels'
        module_type_store = module_type_store.open_function_context('set_ticklabels', 1583, 4, False)
        # Assigning a type to the variable 'self' (line 1584)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1584, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_ticklabels.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_ticklabels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_ticklabels.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_ticklabels.__dict__.__setitem__('stypy_function_name', 'Axis.set_ticklabels')
        Axis.set_ticklabels.__dict__.__setitem__('stypy_param_names_list', ['ticklabels'])
        Axis.set_ticklabels.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Axis.set_ticklabels.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Axis.set_ticklabels.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_ticklabels.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_ticklabels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_ticklabels.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_ticklabels', ['ticklabels'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ticklabels', localization, ['ticklabels'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ticklabels(...)' code ##################

        unicode_11184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1599, (-1)), 'unicode', u'\n        Set the text values of the tick labels. Return a list of Text\n        instances.  Use *kwarg* *minor=True* to select minor ticks.\n        All other kwargs are used to update the text object properties.\n        As for get_ticklabels, label1 (left or bottom) is\n        affected for a given tick only if its label1On attribute\n        is True, and similarly for label2.  The list of returned\n        label text objects consists of all such label1 objects followed\n        by all such label2 objects.\n\n        The input *ticklabels* is assumed to match the set of\n        tick locations, regardless of the state of label1On and\n        label2On.\n\n        ACCEPTS: sequence of strings or Text objects\n        ')
        
        # Assigning a List to a Name (line 1600):
        
        # Assigning a List to a Name (line 1600):
        
        # Obtaining an instance of the builtin type 'list' (line 1600)
        list_11185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1600, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1600)
        
        # Assigning a type to the variable 'get_labels' (line 1600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1600, 8), 'get_labels', list_11185)
        
        # Getting the type of 'ticklabels' (line 1601)
        ticklabels_11186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1601, 17), 'ticklabels')
        # Testing the type of a for loop iterable (line 1601)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1601, 8), ticklabels_11186)
        # Getting the type of the for loop variable (line 1601)
        for_loop_var_11187 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1601, 8), ticklabels_11186)
        # Assigning a type to the variable 't' (line 1601)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1601, 8), 't', for_loop_var_11187)
        # SSA begins for a for statement (line 1601)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # SSA begins for try-except statement (line 1604)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to append(...): (line 1605)
        # Processing the call arguments (line 1605)
        
        # Call to get_text(...): (line 1605)
        # Processing the call keyword arguments (line 1605)
        kwargs_11192 = {}
        # Getting the type of 't' (line 1605)
        t_11190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 34), 't', False)
        # Obtaining the member 'get_text' of a type (line 1605)
        get_text_11191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 34), t_11190, 'get_text')
        # Calling get_text(args, kwargs) (line 1605)
        get_text_call_result_11193 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 34), get_text_11191, *[], **kwargs_11192)
        
        # Processing the call keyword arguments (line 1605)
        kwargs_11194 = {}
        # Getting the type of 'get_labels' (line 1605)
        get_labels_11188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1605, 16), 'get_labels', False)
        # Obtaining the member 'append' of a type (line 1605)
        append_11189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1605, 16), get_labels_11188, 'append')
        # Calling append(args, kwargs) (line 1605)
        append_call_result_11195 = invoke(stypy.reporting.localization.Localization(__file__, 1605, 16), append_11189, *[get_text_call_result_11193], **kwargs_11194)
        
        # SSA branch for the except part of a try statement (line 1604)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 1604)
        module_type_store.open_ssa_branch('except')
        
        # Call to append(...): (line 1608)
        # Processing the call arguments (line 1608)
        # Getting the type of 't' (line 1608)
        t_11198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 34), 't', False)
        # Processing the call keyword arguments (line 1608)
        kwargs_11199 = {}
        # Getting the type of 'get_labels' (line 1608)
        get_labels_11196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1608, 16), 'get_labels', False)
        # Obtaining the member 'append' of a type (line 1608)
        append_11197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1608, 16), get_labels_11196, 'append')
        # Calling append(args, kwargs) (line 1608)
        append_call_result_11200 = invoke(stypy.reporting.localization.Localization(__file__, 1608, 16), append_11197, *[t_11198], **kwargs_11199)
        
        # SSA join for try-except statement (line 1604)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 1610):
        
        # Assigning a Name to a Name (line 1610):
        # Getting the type of 'get_labels' (line 1610)
        get_labels_11201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 21), 'get_labels')
        # Assigning a type to the variable 'ticklabels' (line 1610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1610, 8), 'ticklabels', get_labels_11201)
        
        # Assigning a Call to a Name (line 1612):
        
        # Assigning a Call to a Name (line 1612):
        
        # Call to pop(...): (line 1612)
        # Processing the call arguments (line 1612)
        unicode_11204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1612, 27), 'unicode', u'minor')
        # Getting the type of 'False' (line 1612)
        False_11205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 36), 'False', False)
        # Processing the call keyword arguments (line 1612)
        kwargs_11206 = {}
        # Getting the type of 'kwargs' (line 1612)
        kwargs_11202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 16), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 1612)
        pop_11203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1612, 16), kwargs_11202, 'pop')
        # Calling pop(args, kwargs) (line 1612)
        pop_call_result_11207 = invoke(stypy.reporting.localization.Localization(__file__, 1612, 16), pop_11203, *[unicode_11204, False_11205], **kwargs_11206)
        
        # Assigning a type to the variable 'minor' (line 1612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1612, 8), 'minor', pop_call_result_11207)
        
        # Getting the type of 'minor' (line 1613)
        minor_11208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 11), 'minor')
        # Testing the type of an if condition (line 1613)
        if_condition_11209 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1613, 8), minor_11208)
        # Assigning a type to the variable 'if_condition_11209' (line 1613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'if_condition_11209', if_condition_11209)
        # SSA begins for if statement (line 1613)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_minor_formatter(...): (line 1614)
        # Processing the call arguments (line 1614)
        
        # Call to FixedFormatter(...): (line 1614)
        # Processing the call arguments (line 1614)
        # Getting the type of 'ticklabels' (line 1614)
        ticklabels_11214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 60), 'ticklabels', False)
        # Processing the call keyword arguments (line 1614)
        kwargs_11215 = {}
        # Getting the type of 'mticker' (line 1614)
        mticker_11212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 37), 'mticker', False)
        # Obtaining the member 'FixedFormatter' of a type (line 1614)
        FixedFormatter_11213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1614, 37), mticker_11212, 'FixedFormatter')
        # Calling FixedFormatter(args, kwargs) (line 1614)
        FixedFormatter_call_result_11216 = invoke(stypy.reporting.localization.Localization(__file__, 1614, 37), FixedFormatter_11213, *[ticklabels_11214], **kwargs_11215)
        
        # Processing the call keyword arguments (line 1614)
        kwargs_11217 = {}
        # Getting the type of 'self' (line 1614)
        self_11210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 12), 'self', False)
        # Obtaining the member 'set_minor_formatter' of a type (line 1614)
        set_minor_formatter_11211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1614, 12), self_11210, 'set_minor_formatter')
        # Calling set_minor_formatter(args, kwargs) (line 1614)
        set_minor_formatter_call_result_11218 = invoke(stypy.reporting.localization.Localization(__file__, 1614, 12), set_minor_formatter_11211, *[FixedFormatter_call_result_11216], **kwargs_11217)
        
        
        # Assigning a Call to a Name (line 1615):
        
        # Assigning a Call to a Name (line 1615):
        
        # Call to get_minor_ticks(...): (line 1615)
        # Processing the call keyword arguments (line 1615)
        kwargs_11221 = {}
        # Getting the type of 'self' (line 1615)
        self_11219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 20), 'self', False)
        # Obtaining the member 'get_minor_ticks' of a type (line 1615)
        get_minor_ticks_11220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1615, 20), self_11219, 'get_minor_ticks')
        # Calling get_minor_ticks(args, kwargs) (line 1615)
        get_minor_ticks_call_result_11222 = invoke(stypy.reporting.localization.Localization(__file__, 1615, 20), get_minor_ticks_11220, *[], **kwargs_11221)
        
        # Assigning a type to the variable 'ticks' (line 1615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 12), 'ticks', get_minor_ticks_call_result_11222)
        # SSA branch for the else part of an if statement (line 1613)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_major_formatter(...): (line 1617)
        # Processing the call arguments (line 1617)
        
        # Call to FixedFormatter(...): (line 1617)
        # Processing the call arguments (line 1617)
        # Getting the type of 'ticklabels' (line 1617)
        ticklabels_11227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 60), 'ticklabels', False)
        # Processing the call keyword arguments (line 1617)
        kwargs_11228 = {}
        # Getting the type of 'mticker' (line 1617)
        mticker_11225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 37), 'mticker', False)
        # Obtaining the member 'FixedFormatter' of a type (line 1617)
        FixedFormatter_11226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1617, 37), mticker_11225, 'FixedFormatter')
        # Calling FixedFormatter(args, kwargs) (line 1617)
        FixedFormatter_call_result_11229 = invoke(stypy.reporting.localization.Localization(__file__, 1617, 37), FixedFormatter_11226, *[ticklabels_11227], **kwargs_11228)
        
        # Processing the call keyword arguments (line 1617)
        kwargs_11230 = {}
        # Getting the type of 'self' (line 1617)
        self_11223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 12), 'self', False)
        # Obtaining the member 'set_major_formatter' of a type (line 1617)
        set_major_formatter_11224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1617, 12), self_11223, 'set_major_formatter')
        # Calling set_major_formatter(args, kwargs) (line 1617)
        set_major_formatter_call_result_11231 = invoke(stypy.reporting.localization.Localization(__file__, 1617, 12), set_major_formatter_11224, *[FixedFormatter_call_result_11229], **kwargs_11230)
        
        
        # Assigning a Call to a Name (line 1618):
        
        # Assigning a Call to a Name (line 1618):
        
        # Call to get_major_ticks(...): (line 1618)
        # Processing the call keyword arguments (line 1618)
        kwargs_11234 = {}
        # Getting the type of 'self' (line 1618)
        self_11232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 20), 'self', False)
        # Obtaining the member 'get_major_ticks' of a type (line 1618)
        get_major_ticks_11233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1618, 20), self_11232, 'get_major_ticks')
        # Calling get_major_ticks(args, kwargs) (line 1618)
        get_major_ticks_call_result_11235 = invoke(stypy.reporting.localization.Localization(__file__, 1618, 20), get_major_ticks_11233, *[], **kwargs_11234)
        
        # Assigning a type to the variable 'ticks' (line 1618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1618, 12), 'ticks', get_major_ticks_call_result_11235)
        # SSA join for if statement (line 1613)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 1619):
        
        # Assigning a List to a Name (line 1619):
        
        # Obtaining an instance of the builtin type 'list' (line 1619)
        list_11236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1619, 14), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1619)
        
        # Assigning a type to the variable 'ret' (line 1619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1619, 8), 'ret', list_11236)
        
        
        # Call to zip(...): (line 1620)
        # Processing the call arguments (line 1620)
        # Getting the type of 'ticklabels' (line 1620)
        ticklabels_11238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 36), 'ticklabels', False)
        # Getting the type of 'ticks' (line 1620)
        ticks_11239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 48), 'ticks', False)
        # Processing the call keyword arguments (line 1620)
        kwargs_11240 = {}
        # Getting the type of 'zip' (line 1620)
        zip_11237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 32), 'zip', False)
        # Calling zip(args, kwargs) (line 1620)
        zip_call_result_11241 = invoke(stypy.reporting.localization.Localization(__file__, 1620, 32), zip_11237, *[ticklabels_11238, ticks_11239], **kwargs_11240)
        
        # Testing the type of a for loop iterable (line 1620)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1620, 8), zip_call_result_11241)
        # Getting the type of the for loop variable (line 1620)
        for_loop_var_11242 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1620, 8), zip_call_result_11241)
        # Assigning a type to the variable 'tick_label' (line 1620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 8), 'tick_label', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1620, 8), for_loop_var_11242))
        # Assigning a type to the variable 'tick' (line 1620)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 8), 'tick', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1620, 8), for_loop_var_11242))
        # SSA begins for a for statement (line 1620)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_text(...): (line 1622)
        # Processing the call arguments (line 1622)
        # Getting the type of 'tick_label' (line 1622)
        tick_label_11246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 33), 'tick_label', False)
        # Processing the call keyword arguments (line 1622)
        kwargs_11247 = {}
        # Getting the type of 'tick' (line 1622)
        tick_11243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 12), 'tick', False)
        # Obtaining the member 'label1' of a type (line 1622)
        label1_11244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 12), tick_11243, 'label1')
        # Obtaining the member 'set_text' of a type (line 1622)
        set_text_11245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 12), label1_11244, 'set_text')
        # Calling set_text(args, kwargs) (line 1622)
        set_text_call_result_11248 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 12), set_text_11245, *[tick_label_11246], **kwargs_11247)
        
        
        # Call to update(...): (line 1623)
        # Processing the call arguments (line 1623)
        # Getting the type of 'kwargs' (line 1623)
        kwargs_11252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 31), 'kwargs', False)
        # Processing the call keyword arguments (line 1623)
        kwargs_11253 = {}
        # Getting the type of 'tick' (line 1623)
        tick_11249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 12), 'tick', False)
        # Obtaining the member 'label1' of a type (line 1623)
        label1_11250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1623, 12), tick_11249, 'label1')
        # Obtaining the member 'update' of a type (line 1623)
        update_11251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1623, 12), label1_11250, 'update')
        # Calling update(args, kwargs) (line 1623)
        update_call_result_11254 = invoke(stypy.reporting.localization.Localization(__file__, 1623, 12), update_11251, *[kwargs_11252], **kwargs_11253)
        
        
        # Call to set_text(...): (line 1625)
        # Processing the call arguments (line 1625)
        # Getting the type of 'tick_label' (line 1625)
        tick_label_11258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 33), 'tick_label', False)
        # Processing the call keyword arguments (line 1625)
        kwargs_11259 = {}
        # Getting the type of 'tick' (line 1625)
        tick_11255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 12), 'tick', False)
        # Obtaining the member 'label2' of a type (line 1625)
        label2_11256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1625, 12), tick_11255, 'label2')
        # Obtaining the member 'set_text' of a type (line 1625)
        set_text_11257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1625, 12), label2_11256, 'set_text')
        # Calling set_text(args, kwargs) (line 1625)
        set_text_call_result_11260 = invoke(stypy.reporting.localization.Localization(__file__, 1625, 12), set_text_11257, *[tick_label_11258], **kwargs_11259)
        
        
        # Call to update(...): (line 1626)
        # Processing the call arguments (line 1626)
        # Getting the type of 'kwargs' (line 1626)
        kwargs_11264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 31), 'kwargs', False)
        # Processing the call keyword arguments (line 1626)
        kwargs_11265 = {}
        # Getting the type of 'tick' (line 1626)
        tick_11261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 12), 'tick', False)
        # Obtaining the member 'label2' of a type (line 1626)
        label2_11262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1626, 12), tick_11261, 'label2')
        # Obtaining the member 'update' of a type (line 1626)
        update_11263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1626, 12), label2_11262, 'update')
        # Calling update(args, kwargs) (line 1626)
        update_call_result_11266 = invoke(stypy.reporting.localization.Localization(__file__, 1626, 12), update_11263, *[kwargs_11264], **kwargs_11265)
        
        
        # Getting the type of 'tick' (line 1628)
        tick_11267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 15), 'tick')
        # Obtaining the member 'label1On' of a type (line 1628)
        label1On_11268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 15), tick_11267, 'label1On')
        # Testing the type of an if condition (line 1628)
        if_condition_11269 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1628, 12), label1On_11268)
        # Assigning a type to the variable 'if_condition_11269' (line 1628)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'if_condition_11269', if_condition_11269)
        # SSA begins for if statement (line 1628)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1629)
        # Processing the call arguments (line 1629)
        # Getting the type of 'tick' (line 1629)
        tick_11272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 27), 'tick', False)
        # Obtaining the member 'label1' of a type (line 1629)
        label1_11273 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1629, 27), tick_11272, 'label1')
        # Processing the call keyword arguments (line 1629)
        kwargs_11274 = {}
        # Getting the type of 'ret' (line 1629)
        ret_11270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 16), 'ret', False)
        # Obtaining the member 'append' of a type (line 1629)
        append_11271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1629, 16), ret_11270, 'append')
        # Calling append(args, kwargs) (line 1629)
        append_call_result_11275 = invoke(stypy.reporting.localization.Localization(__file__, 1629, 16), append_11271, *[label1_11273], **kwargs_11274)
        
        # SSA join for if statement (line 1628)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'tick' (line 1630)
        tick_11276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 15), 'tick')
        # Obtaining the member 'label2On' of a type (line 1630)
        label2On_11277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1630, 15), tick_11276, 'label2On')
        # Testing the type of an if condition (line 1630)
        if_condition_11278 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1630, 12), label2On_11277)
        # Assigning a type to the variable 'if_condition_11278' (line 1630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1630, 12), 'if_condition_11278', if_condition_11278)
        # SSA begins for if statement (line 1630)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1631)
        # Processing the call arguments (line 1631)
        # Getting the type of 'tick' (line 1631)
        tick_11281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 27), 'tick', False)
        # Obtaining the member 'label2' of a type (line 1631)
        label2_11282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1631, 27), tick_11281, 'label2')
        # Processing the call keyword arguments (line 1631)
        kwargs_11283 = {}
        # Getting the type of 'ret' (line 1631)
        ret_11279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 16), 'ret', False)
        # Obtaining the member 'append' of a type (line 1631)
        append_11280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1631, 16), ret_11279, 'append')
        # Calling append(args, kwargs) (line 1631)
        append_call_result_11284 = invoke(stypy.reporting.localization.Localization(__file__, 1631, 16), append_11280, *[label2_11282], **kwargs_11283)
        
        # SSA join for if statement (line 1630)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1633):
        
        # Assigning a Name to a Attribute (line 1633):
        # Getting the type of 'True' (line 1633)
        True_11285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 21), 'True')
        # Getting the type of 'self' (line 1633)
        self_11286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1633)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1633, 8), self_11286, 'stale', True_11285)
        # Getting the type of 'ret' (line 1634)
        ret_11287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 15), 'ret')
        # Assigning a type to the variable 'stypy_return_type' (line 1634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1634, 8), 'stypy_return_type', ret_11287)
        
        # ################# End of 'set_ticklabels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ticklabels' in the type store
        # Getting the type of 'stypy_return_type' (line 1583)
        stypy_return_type_11288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11288)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ticklabels'
        return stypy_return_type_11288


    @norecursion
    def set_ticks(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1636)
        False_11289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 37), 'False')
        defaults = [False_11289]
        # Create a new context for function 'set_ticks'
        module_type_store = module_type_store.open_function_context('set_ticks', 1636, 4, False)
        # Assigning a type to the variable 'self' (line 1637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_ticks.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_ticks.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_ticks.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_ticks.__dict__.__setitem__('stypy_function_name', 'Axis.set_ticks')
        Axis.set_ticks.__dict__.__setitem__('stypy_param_names_list', ['ticks', 'minor'])
        Axis.set_ticks.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_ticks.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_ticks.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_ticks.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_ticks.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_ticks.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_ticks', ['ticks', 'minor'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ticks', localization, ['ticks', 'minor'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ticks(...)' code ##################

        unicode_11290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1641, (-1)), 'unicode', u'\n        Set the locations of the tick marks from sequence ticks\n\n        ACCEPTS: sequence of floats\n        ')
        
        # Assigning a Call to a Name (line 1643):
        
        # Assigning a Call to a Name (line 1643):
        
        # Call to convert_units(...): (line 1643)
        # Processing the call arguments (line 1643)
        # Getting the type of 'ticks' (line 1643)
        ticks_11293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 35), 'ticks', False)
        # Processing the call keyword arguments (line 1643)
        kwargs_11294 = {}
        # Getting the type of 'self' (line 1643)
        self_11291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 16), 'self', False)
        # Obtaining the member 'convert_units' of a type (line 1643)
        convert_units_11292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1643, 16), self_11291, 'convert_units')
        # Calling convert_units(args, kwargs) (line 1643)
        convert_units_call_result_11295 = invoke(stypy.reporting.localization.Localization(__file__, 1643, 16), convert_units_11292, *[ticks_11293], **kwargs_11294)
        
        # Assigning a type to the variable 'ticks' (line 1643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1643, 8), 'ticks', convert_units_call_result_11295)
        
        
        
        # Call to len(...): (line 1644)
        # Processing the call arguments (line 1644)
        # Getting the type of 'ticks' (line 1644)
        ticks_11297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 15), 'ticks', False)
        # Processing the call keyword arguments (line 1644)
        kwargs_11298 = {}
        # Getting the type of 'len' (line 1644)
        len_11296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1644, 11), 'len', False)
        # Calling len(args, kwargs) (line 1644)
        len_call_result_11299 = invoke(stypy.reporting.localization.Localization(__file__, 1644, 11), len_11296, *[ticks_11297], **kwargs_11298)
        
        int_11300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1644, 24), 'int')
        # Applying the binary operator '>' (line 1644)
        result_gt_11301 = python_operator(stypy.reporting.localization.Localization(__file__, 1644, 11), '>', len_call_result_11299, int_11300)
        
        # Testing the type of an if condition (line 1644)
        if_condition_11302 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1644, 8), result_gt_11301)
        # Assigning a type to the variable 'if_condition_11302' (line 1644)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1644, 8), 'if_condition_11302', if_condition_11302)
        # SSA begins for if statement (line 1644)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1645):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 1645)
        # Processing the call keyword arguments (line 1645)
        kwargs_11305 = {}
        # Getting the type of 'self' (line 1645)
        self_11303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 28), 'self', False)
        # Obtaining the member 'get_view_interval' of a type (line 1645)
        get_view_interval_11304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1645, 28), self_11303, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 1645)
        get_view_interval_call_result_11306 = invoke(stypy.reporting.localization.Localization(__file__, 1645, 28), get_view_interval_11304, *[], **kwargs_11305)
        
        # Assigning a type to the variable 'call_assignment_6991' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 12), 'call_assignment_6991', get_view_interval_call_result_11306)
        
        # Assigning a Call to a Name (line 1645):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 12), 'int')
        # Processing the call keyword arguments
        kwargs_11310 = {}
        # Getting the type of 'call_assignment_6991' (line 1645)
        call_assignment_6991_11307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 12), 'call_assignment_6991', False)
        # Obtaining the member '__getitem__' of a type (line 1645)
        getitem___11308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1645, 12), call_assignment_6991_11307, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11311 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11308, *[int_11309], **kwargs_11310)
        
        # Assigning a type to the variable 'call_assignment_6992' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 12), 'call_assignment_6992', getitem___call_result_11311)
        
        # Assigning a Name to a Name (line 1645):
        # Getting the type of 'call_assignment_6992' (line 1645)
        call_assignment_6992_11312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 12), 'call_assignment_6992')
        # Assigning a type to the variable 'xleft' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 12), 'xleft', call_assignment_6992_11312)
        
        # Assigning a Call to a Name (line 1645):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1645, 12), 'int')
        # Processing the call keyword arguments
        kwargs_11316 = {}
        # Getting the type of 'call_assignment_6991' (line 1645)
        call_assignment_6991_11313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 12), 'call_assignment_6991', False)
        # Obtaining the member '__getitem__' of a type (line 1645)
        getitem___11314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1645, 12), call_assignment_6991_11313, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11317 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11314, *[int_11315], **kwargs_11316)
        
        # Assigning a type to the variable 'call_assignment_6993' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 12), 'call_assignment_6993', getitem___call_result_11317)
        
        # Assigning a Name to a Name (line 1645):
        # Getting the type of 'call_assignment_6993' (line 1645)
        call_assignment_6993_11318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1645, 12), 'call_assignment_6993')
        # Assigning a type to the variable 'xright' (line 1645)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1645, 19), 'xright', call_assignment_6993_11318)
        
        
        # Getting the type of 'xright' (line 1646)
        xright_11319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 15), 'xright')
        # Getting the type of 'xleft' (line 1646)
        xleft_11320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1646, 24), 'xleft')
        # Applying the binary operator '>' (line 1646)
        result_gt_11321 = python_operator(stypy.reporting.localization.Localization(__file__, 1646, 15), '>', xright_11319, xleft_11320)
        
        # Testing the type of an if condition (line 1646)
        if_condition_11322 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1646, 12), result_gt_11321)
        # Assigning a type to the variable 'if_condition_11322' (line 1646)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1646, 12), 'if_condition_11322', if_condition_11322)
        # SSA begins for if statement (line 1646)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_view_interval(...): (line 1647)
        # Processing the call arguments (line 1647)
        
        # Call to min(...): (line 1647)
        # Processing the call arguments (line 1647)
        # Getting the type of 'ticks' (line 1647)
        ticks_11326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 43), 'ticks', False)
        # Processing the call keyword arguments (line 1647)
        kwargs_11327 = {}
        # Getting the type of 'min' (line 1647)
        min_11325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 39), 'min', False)
        # Calling min(args, kwargs) (line 1647)
        min_call_result_11328 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 39), min_11325, *[ticks_11326], **kwargs_11327)
        
        
        # Call to max(...): (line 1647)
        # Processing the call arguments (line 1647)
        # Getting the type of 'ticks' (line 1647)
        ticks_11330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 55), 'ticks', False)
        # Processing the call keyword arguments (line 1647)
        kwargs_11331 = {}
        # Getting the type of 'max' (line 1647)
        max_11329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 51), 'max', False)
        # Calling max(args, kwargs) (line 1647)
        max_call_result_11332 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 51), max_11329, *[ticks_11330], **kwargs_11331)
        
        # Processing the call keyword arguments (line 1647)
        kwargs_11333 = {}
        # Getting the type of 'self' (line 1647)
        self_11323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1647, 16), 'self', False)
        # Obtaining the member 'set_view_interval' of a type (line 1647)
        set_view_interval_11324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1647, 16), self_11323, 'set_view_interval')
        # Calling set_view_interval(args, kwargs) (line 1647)
        set_view_interval_call_result_11334 = invoke(stypy.reporting.localization.Localization(__file__, 1647, 16), set_view_interval_11324, *[min_call_result_11328, max_call_result_11332], **kwargs_11333)
        
        # SSA branch for the else part of an if statement (line 1646)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_view_interval(...): (line 1649)
        # Processing the call arguments (line 1649)
        
        # Call to max(...): (line 1649)
        # Processing the call arguments (line 1649)
        # Getting the type of 'ticks' (line 1649)
        ticks_11338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 43), 'ticks', False)
        # Processing the call keyword arguments (line 1649)
        kwargs_11339 = {}
        # Getting the type of 'max' (line 1649)
        max_11337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 39), 'max', False)
        # Calling max(args, kwargs) (line 1649)
        max_call_result_11340 = invoke(stypy.reporting.localization.Localization(__file__, 1649, 39), max_11337, *[ticks_11338], **kwargs_11339)
        
        
        # Call to min(...): (line 1649)
        # Processing the call arguments (line 1649)
        # Getting the type of 'ticks' (line 1649)
        ticks_11342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 55), 'ticks', False)
        # Processing the call keyword arguments (line 1649)
        kwargs_11343 = {}
        # Getting the type of 'min' (line 1649)
        min_11341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 51), 'min', False)
        # Calling min(args, kwargs) (line 1649)
        min_call_result_11344 = invoke(stypy.reporting.localization.Localization(__file__, 1649, 51), min_11341, *[ticks_11342], **kwargs_11343)
        
        # Processing the call keyword arguments (line 1649)
        kwargs_11345 = {}
        # Getting the type of 'self' (line 1649)
        self_11335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 16), 'self', False)
        # Obtaining the member 'set_view_interval' of a type (line 1649)
        set_view_interval_11336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1649, 16), self_11335, 'set_view_interval')
        # Calling set_view_interval(args, kwargs) (line 1649)
        set_view_interval_call_result_11346 = invoke(stypy.reporting.localization.Localization(__file__, 1649, 16), set_view_interval_11336, *[max_call_result_11340, min_call_result_11344], **kwargs_11345)
        
        # SSA join for if statement (line 1646)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1644)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'minor' (line 1650)
        minor_11347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 11), 'minor')
        # Testing the type of an if condition (line 1650)
        if_condition_11348 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1650, 8), minor_11347)
        # Assigning a type to the variable 'if_condition_11348' (line 1650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1650, 8), 'if_condition_11348', if_condition_11348)
        # SSA begins for if statement (line 1650)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_minor_locator(...): (line 1651)
        # Processing the call arguments (line 1651)
        
        # Call to FixedLocator(...): (line 1651)
        # Processing the call arguments (line 1651)
        # Getting the type of 'ticks' (line 1651)
        ticks_11353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 56), 'ticks', False)
        # Processing the call keyword arguments (line 1651)
        kwargs_11354 = {}
        # Getting the type of 'mticker' (line 1651)
        mticker_11351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 35), 'mticker', False)
        # Obtaining the member 'FixedLocator' of a type (line 1651)
        FixedLocator_11352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 35), mticker_11351, 'FixedLocator')
        # Calling FixedLocator(args, kwargs) (line 1651)
        FixedLocator_call_result_11355 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 35), FixedLocator_11352, *[ticks_11353], **kwargs_11354)
        
        # Processing the call keyword arguments (line 1651)
        kwargs_11356 = {}
        # Getting the type of 'self' (line 1651)
        self_11349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 12), 'self', False)
        # Obtaining the member 'set_minor_locator' of a type (line 1651)
        set_minor_locator_11350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1651, 12), self_11349, 'set_minor_locator')
        # Calling set_minor_locator(args, kwargs) (line 1651)
        set_minor_locator_call_result_11357 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 12), set_minor_locator_11350, *[FixedLocator_call_result_11355], **kwargs_11356)
        
        
        # Call to get_minor_ticks(...): (line 1652)
        # Processing the call arguments (line 1652)
        
        # Call to len(...): (line 1652)
        # Processing the call arguments (line 1652)
        # Getting the type of 'ticks' (line 1652)
        ticks_11361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 44), 'ticks', False)
        # Processing the call keyword arguments (line 1652)
        kwargs_11362 = {}
        # Getting the type of 'len' (line 1652)
        len_11360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 40), 'len', False)
        # Calling len(args, kwargs) (line 1652)
        len_call_result_11363 = invoke(stypy.reporting.localization.Localization(__file__, 1652, 40), len_11360, *[ticks_11361], **kwargs_11362)
        
        # Processing the call keyword arguments (line 1652)
        kwargs_11364 = {}
        # Getting the type of 'self' (line 1652)
        self_11358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 19), 'self', False)
        # Obtaining the member 'get_minor_ticks' of a type (line 1652)
        get_minor_ticks_11359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 19), self_11358, 'get_minor_ticks')
        # Calling get_minor_ticks(args, kwargs) (line 1652)
        get_minor_ticks_call_result_11365 = invoke(stypy.reporting.localization.Localization(__file__, 1652, 19), get_minor_ticks_11359, *[len_call_result_11363], **kwargs_11364)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1652, 12), 'stypy_return_type', get_minor_ticks_call_result_11365)
        # SSA branch for the else part of an if statement (line 1650)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_major_locator(...): (line 1654)
        # Processing the call arguments (line 1654)
        
        # Call to FixedLocator(...): (line 1654)
        # Processing the call arguments (line 1654)
        # Getting the type of 'ticks' (line 1654)
        ticks_11370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 56), 'ticks', False)
        # Processing the call keyword arguments (line 1654)
        kwargs_11371 = {}
        # Getting the type of 'mticker' (line 1654)
        mticker_11368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 35), 'mticker', False)
        # Obtaining the member 'FixedLocator' of a type (line 1654)
        FixedLocator_11369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 35), mticker_11368, 'FixedLocator')
        # Calling FixedLocator(args, kwargs) (line 1654)
        FixedLocator_call_result_11372 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 35), FixedLocator_11369, *[ticks_11370], **kwargs_11371)
        
        # Processing the call keyword arguments (line 1654)
        kwargs_11373 = {}
        # Getting the type of 'self' (line 1654)
        self_11366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 12), 'self', False)
        # Obtaining the member 'set_major_locator' of a type (line 1654)
        set_major_locator_11367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1654, 12), self_11366, 'set_major_locator')
        # Calling set_major_locator(args, kwargs) (line 1654)
        set_major_locator_call_result_11374 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 12), set_major_locator_11367, *[FixedLocator_call_result_11372], **kwargs_11373)
        
        
        # Call to get_major_ticks(...): (line 1655)
        # Processing the call arguments (line 1655)
        
        # Call to len(...): (line 1655)
        # Processing the call arguments (line 1655)
        # Getting the type of 'ticks' (line 1655)
        ticks_11378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 44), 'ticks', False)
        # Processing the call keyword arguments (line 1655)
        kwargs_11379 = {}
        # Getting the type of 'len' (line 1655)
        len_11377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 40), 'len', False)
        # Calling len(args, kwargs) (line 1655)
        len_call_result_11380 = invoke(stypy.reporting.localization.Localization(__file__, 1655, 40), len_11377, *[ticks_11378], **kwargs_11379)
        
        # Processing the call keyword arguments (line 1655)
        kwargs_11381 = {}
        # Getting the type of 'self' (line 1655)
        self_11375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 19), 'self', False)
        # Obtaining the member 'get_major_ticks' of a type (line 1655)
        get_major_ticks_11376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 19), self_11375, 'get_major_ticks')
        # Calling get_major_ticks(args, kwargs) (line 1655)
        get_major_ticks_call_result_11382 = invoke(stypy.reporting.localization.Localization(__file__, 1655, 19), get_major_ticks_11376, *[len_call_result_11380], **kwargs_11381)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1655)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1655, 12), 'stypy_return_type', get_major_ticks_call_result_11382)
        # SSA join for if statement (line 1650)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_ticks(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ticks' in the type store
        # Getting the type of 'stypy_return_type' (line 1636)
        stypy_return_type_11383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11383)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ticks'
        return stypy_return_type_11383


    @norecursion
    def _update_label_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_label_position'
        module_type_store = module_type_store.open_function_context('_update_label_position', 1657, 4, False)
        # Assigning a type to the variable 'self' (line 1658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis._update_label_position.__dict__.__setitem__('stypy_localization', localization)
        Axis._update_label_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis._update_label_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis._update_label_position.__dict__.__setitem__('stypy_function_name', 'Axis._update_label_position')
        Axis._update_label_position.__dict__.__setitem__('stypy_param_names_list', ['bboxes', 'bboxes2'])
        Axis._update_label_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis._update_label_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis._update_label_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis._update_label_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis._update_label_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis._update_label_position.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis._update_label_position', ['bboxes', 'bboxes2'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_label_position', localization, ['bboxes', 'bboxes2'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_label_position(...)' code ##################

        unicode_11384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1661, (-1)), 'unicode', u'\n        Update the label position based on the bounding box enclosing\n        all the ticklabels and axis spine\n        ')
        
        # Call to NotImplementedError(...): (line 1662)
        # Processing the call arguments (line 1662)
        unicode_11386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 1662)
        kwargs_11387 = {}
        # Getting the type of 'NotImplementedError' (line 1662)
        NotImplementedError_11385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1662)
        NotImplementedError_call_result_11388 = invoke(stypy.reporting.localization.Localization(__file__, 1662, 14), NotImplementedError_11385, *[unicode_11386], **kwargs_11387)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1662, 8), NotImplementedError_call_result_11388, 'raise parameter', BaseException)
        
        # ################# End of '_update_label_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_label_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1657)
        stypy_return_type_11389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11389)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_label_position'
        return stypy_return_type_11389


    @norecursion
    def _update_offset_text_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_offset_text_position'
        module_type_store = module_type_store.open_function_context('_update_offset_text_position', 1664, 4, False)
        # Assigning a type to the variable 'self' (line 1665)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1665, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis._update_offset_text_position.__dict__.__setitem__('stypy_localization', localization)
        Axis._update_offset_text_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis._update_offset_text_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis._update_offset_text_position.__dict__.__setitem__('stypy_function_name', 'Axis._update_offset_text_position')
        Axis._update_offset_text_position.__dict__.__setitem__('stypy_param_names_list', ['bboxes', 'bboxes2'])
        Axis._update_offset_text_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis._update_offset_text_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis._update_offset_text_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis._update_offset_text_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis._update_offset_text_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis._update_offset_text_position.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis._update_offset_text_position', ['bboxes', 'bboxes2'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_offset_text_position', localization, ['bboxes', 'bboxes2'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_offset_text_position(...)' code ##################

        unicode_11390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, (-1)), 'unicode', u'\n        Update the label position based on the sequence of bounding\n        boxes of all the ticklabels\n        ')
        
        # Call to NotImplementedError(...): (line 1669)
        # Processing the call arguments (line 1669)
        unicode_11392 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1669, 34), 'unicode', u'Derived must override')
        # Processing the call keyword arguments (line 1669)
        kwargs_11393 = {}
        # Getting the type of 'NotImplementedError' (line 1669)
        NotImplementedError_11391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1669, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1669)
        NotImplementedError_call_result_11394 = invoke(stypy.reporting.localization.Localization(__file__, 1669, 14), NotImplementedError_11391, *[unicode_11392], **kwargs_11393)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1669, 8), NotImplementedError_call_result_11394, 'raise parameter', BaseException)
        
        # ################# End of '_update_offset_text_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_offset_text_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1664)
        stypy_return_type_11395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11395)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_offset_text_position'
        return stypy_return_type_11395


    @norecursion
    def pan(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pan'
        module_type_store = module_type_store.open_function_context('pan', 1671, 4, False)
        # Assigning a type to the variable 'self' (line 1672)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1672, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.pan.__dict__.__setitem__('stypy_localization', localization)
        Axis.pan.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.pan.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.pan.__dict__.__setitem__('stypy_function_name', 'Axis.pan')
        Axis.pan.__dict__.__setitem__('stypy_param_names_list', ['numsteps'])
        Axis.pan.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.pan.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.pan.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.pan.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.pan.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.pan.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.pan', ['numsteps'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pan', localization, ['numsteps'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pan(...)' code ##################

        unicode_11396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 8), 'unicode', u'Pan *numsteps* (can be positive or negative)')
        
        # Call to pan(...): (line 1673)
        # Processing the call arguments (line 1673)
        # Getting the type of 'numsteps' (line 1673)
        numsteps_11401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 31), 'numsteps', False)
        # Processing the call keyword arguments (line 1673)
        kwargs_11402 = {}
        # Getting the type of 'self' (line 1673)
        self_11397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1673, 8), 'self', False)
        # Obtaining the member 'major' of a type (line 1673)
        major_11398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1673, 8), self_11397, 'major')
        # Obtaining the member 'locator' of a type (line 1673)
        locator_11399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1673, 8), major_11398, 'locator')
        # Obtaining the member 'pan' of a type (line 1673)
        pan_11400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1673, 8), locator_11399, 'pan')
        # Calling pan(args, kwargs) (line 1673)
        pan_call_result_11403 = invoke(stypy.reporting.localization.Localization(__file__, 1673, 8), pan_11400, *[numsteps_11401], **kwargs_11402)
        
        
        # ################# End of 'pan(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pan' in the type store
        # Getting the type of 'stypy_return_type' (line 1671)
        stypy_return_type_11404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11404)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pan'
        return stypy_return_type_11404


    @norecursion
    def zoom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'zoom'
        module_type_store = module_type_store.open_function_context('zoom', 1675, 4, False)
        # Assigning a type to the variable 'self' (line 1676)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1676, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.zoom.__dict__.__setitem__('stypy_localization', localization)
        Axis.zoom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.zoom.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.zoom.__dict__.__setitem__('stypy_function_name', 'Axis.zoom')
        Axis.zoom.__dict__.__setitem__('stypy_param_names_list', ['direction'])
        Axis.zoom.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.zoom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.zoom.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.zoom.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.zoom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.zoom.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.zoom', ['direction'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'zoom', localization, ['direction'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'zoom(...)' code ##################

        unicode_11405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1676, 8), 'unicode', u'Zoom in/out on axis; if *direction* is >0 zoom in, else zoom out')
        
        # Call to zoom(...): (line 1677)
        # Processing the call arguments (line 1677)
        # Getting the type of 'direction' (line 1677)
        direction_11410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 32), 'direction', False)
        # Processing the call keyword arguments (line 1677)
        kwargs_11411 = {}
        # Getting the type of 'self' (line 1677)
        self_11406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1677, 8), 'self', False)
        # Obtaining the member 'major' of a type (line 1677)
        major_11407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 8), self_11406, 'major')
        # Obtaining the member 'locator' of a type (line 1677)
        locator_11408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 8), major_11407, 'locator')
        # Obtaining the member 'zoom' of a type (line 1677)
        zoom_11409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1677, 8), locator_11408, 'zoom')
        # Calling zoom(args, kwargs) (line 1677)
        zoom_call_result_11412 = invoke(stypy.reporting.localization.Localization(__file__, 1677, 8), zoom_11409, *[direction_11410], **kwargs_11411)
        
        
        # ################# End of 'zoom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'zoom' in the type store
        # Getting the type of 'stypy_return_type' (line 1675)
        stypy_return_type_11413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1675, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11413)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'zoom'
        return stypy_return_type_11413


    @norecursion
    def axis_date(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1679)
        None_11414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 27), 'None')
        defaults = [None_11414]
        # Create a new context for function 'axis_date'
        module_type_store = module_type_store.open_function_context('axis_date', 1679, 4, False)
        # Assigning a type to the variable 'self' (line 1680)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1680, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.axis_date.__dict__.__setitem__('stypy_localization', localization)
        Axis.axis_date.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.axis_date.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.axis_date.__dict__.__setitem__('stypy_function_name', 'Axis.axis_date')
        Axis.axis_date.__dict__.__setitem__('stypy_param_names_list', ['tz'])
        Axis.axis_date.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.axis_date.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.axis_date.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.axis_date.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.axis_date.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.axis_date.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.axis_date', ['tz'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'axis_date', localization, ['tz'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'axis_date(...)' code ##################

        unicode_11415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, (-1)), 'unicode', u'\n        Sets up x-axis ticks and labels that treat the x data as dates.\n        *tz* is a :class:`tzinfo` instance or a timezone string.\n        This timezone is used to create date labels.\n        ')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1689, 8))
        
        # 'import datetime' statement (line 1689)
        import datetime

        import_module(stypy.reporting.localization.Localization(__file__, 1689, 8), 'datetime', datetime, module_type_store)
        
        
        
        # Call to isinstance(...): (line 1690)
        # Processing the call arguments (line 1690)
        # Getting the type of 'tz' (line 1690)
        tz_11417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 22), 'tz', False)
        # Getting the type of 'six' (line 1690)
        six_11418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 26), 'six', False)
        # Obtaining the member 'string_types' of a type (line 1690)
        string_types_11419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1690, 26), six_11418, 'string_types')
        # Processing the call keyword arguments (line 1690)
        kwargs_11420 = {}
        # Getting the type of 'isinstance' (line 1690)
        isinstance_11416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1690, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1690)
        isinstance_call_result_11421 = invoke(stypy.reporting.localization.Localization(__file__, 1690, 11), isinstance_11416, *[tz_11417, string_types_11419], **kwargs_11420)
        
        # Testing the type of an if condition (line 1690)
        if_condition_11422 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1690, 8), isinstance_call_result_11421)
        # Assigning a type to the variable 'if_condition_11422' (line 1690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1690, 8), 'if_condition_11422', if_condition_11422)
        # SSA begins for if statement (line 1690)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1691, 12))
        
        # 'import pytz' statement (line 1691)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_11423 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1691, 12), 'pytz')

        if (type(import_11423) is not StypyTypeError):

            if (import_11423 != 'pyd_module'):
                __import__(import_11423)
                sys_modules_11424 = sys.modules[import_11423]
                import_module(stypy.reporting.localization.Localization(__file__, 1691, 12), 'pytz', sys_modules_11424.module_type_store, module_type_store)
            else:
                import pytz

                import_module(stypy.reporting.localization.Localization(__file__, 1691, 12), 'pytz', pytz, module_type_store)

        else:
            # Assigning a type to the variable 'pytz' (line 1691)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1691, 12), 'pytz', import_11423)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Assigning a Call to a Name (line 1692):
        
        # Assigning a Call to a Name (line 1692):
        
        # Call to timezone(...): (line 1692)
        # Processing the call arguments (line 1692)
        # Getting the type of 'tz' (line 1692)
        tz_11427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 31), 'tz', False)
        # Processing the call keyword arguments (line 1692)
        kwargs_11428 = {}
        # Getting the type of 'pytz' (line 1692)
        pytz_11425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1692, 17), 'pytz', False)
        # Obtaining the member 'timezone' of a type (line 1692)
        timezone_11426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1692, 17), pytz_11425, 'timezone')
        # Calling timezone(args, kwargs) (line 1692)
        timezone_call_result_11429 = invoke(stypy.reporting.localization.Localization(__file__, 1692, 17), timezone_11426, *[tz_11427], **kwargs_11428)
        
        # Assigning a type to the variable 'tz' (line 1692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1692, 12), 'tz', timezone_call_result_11429)
        # SSA join for if statement (line 1690)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update_units(...): (line 1693)
        # Processing the call arguments (line 1693)
        
        # Call to datetime(...): (line 1693)
        # Processing the call arguments (line 1693)
        int_11434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1693, 44), 'int')
        int_11435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1693, 50), 'int')
        int_11436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1693, 53), 'int')
        int_11437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1693, 56), 'int')
        int_11438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1693, 59), 'int')
        int_11439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1693, 62), 'int')
        int_11440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1693, 65), 'int')
        # Getting the type of 'tz' (line 1693)
        tz_11441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 68), 'tz', False)
        # Processing the call keyword arguments (line 1693)
        kwargs_11442 = {}
        # Getting the type of 'datetime' (line 1693)
        datetime_11432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 26), 'datetime', False)
        # Obtaining the member 'datetime' of a type (line 1693)
        datetime_11433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 26), datetime_11432, 'datetime')
        # Calling datetime(args, kwargs) (line 1693)
        datetime_call_result_11443 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 26), datetime_11433, *[int_11434, int_11435, int_11436, int_11437, int_11438, int_11439, int_11440, tz_11441], **kwargs_11442)
        
        # Processing the call keyword arguments (line 1693)
        kwargs_11444 = {}
        # Getting the type of 'self' (line 1693)
        self_11430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 8), 'self', False)
        # Obtaining the member 'update_units' of a type (line 1693)
        update_units_11431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 8), self_11430, 'update_units')
        # Calling update_units(args, kwargs) (line 1693)
        update_units_call_result_11445 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 8), update_units_11431, *[datetime_call_result_11443], **kwargs_11444)
        
        
        # ################# End of 'axis_date(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'axis_date' in the type store
        # Getting the type of 'stypy_return_type' (line 1679)
        stypy_return_type_11446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11446)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'axis_date'
        return stypy_return_type_11446


    @norecursion
    def get_tick_space(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_tick_space'
        module_type_store = module_type_store.open_function_context('get_tick_space', 1695, 4, False)
        # Assigning a type to the variable 'self' (line 1696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1696, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_tick_space.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_tick_space.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_tick_space.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_tick_space.__dict__.__setitem__('stypy_function_name', 'Axis.get_tick_space')
        Axis.get_tick_space.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_tick_space.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_tick_space.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_tick_space.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_tick_space.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_tick_space.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_tick_space.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_tick_space', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_tick_space', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_tick_space(...)' code ##################

        unicode_11447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1698, (-1)), 'unicode', u'\n        Return the estimated number of ticks that can fit on the axis.\n        ')
        
        # Call to NotImplementedError(...): (line 1700)
        # Processing the call keyword arguments (line 1700)
        kwargs_11449 = {}
        # Getting the type of 'NotImplementedError' (line 1700)
        NotImplementedError_11448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1700)
        NotImplementedError_call_result_11450 = invoke(stypy.reporting.localization.Localization(__file__, 1700, 14), NotImplementedError_11448, *[], **kwargs_11449)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1700, 8), NotImplementedError_call_result_11450, 'raise parameter', BaseException)
        
        # ################# End of 'get_tick_space(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_tick_space' in the type store
        # Getting the type of 'stypy_return_type' (line 1695)
        stypy_return_type_11451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1695, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11451)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_tick_space'
        return stypy_return_type_11451


    @norecursion
    def get_label_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_label_position'
        module_type_store = module_type_store.open_function_context('get_label_position', 1702, 4, False)
        # Assigning a type to the variable 'self' (line 1703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1703, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_label_position.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_label_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_label_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_label_position.__dict__.__setitem__('stypy_function_name', 'Axis.get_label_position')
        Axis.get_label_position.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_label_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_label_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_label_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_label_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_label_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_label_position.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_label_position', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_label_position', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_label_position(...)' code ##################

        unicode_11452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1705, (-1)), 'unicode', u'\n        Return the label position (top or bottom)\n        ')
        # Getting the type of 'self' (line 1706)
        self_11453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 15), 'self')
        # Obtaining the member 'label_position' of a type (line 1706)
        label_position_11454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 15), self_11453, 'label_position')
        # Assigning a type to the variable 'stypy_return_type' (line 1706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1706, 8), 'stypy_return_type', label_position_11454)
        
        # ################# End of 'get_label_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_label_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1702)
        stypy_return_type_11455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1702, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11455)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_label_position'
        return stypy_return_type_11455


    @norecursion
    def set_label_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_label_position'
        module_type_store = module_type_store.open_function_context('set_label_position', 1708, 4, False)
        # Assigning a type to the variable 'self' (line 1709)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.set_label_position.__dict__.__setitem__('stypy_localization', localization)
        Axis.set_label_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.set_label_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.set_label_position.__dict__.__setitem__('stypy_function_name', 'Axis.set_label_position')
        Axis.set_label_position.__dict__.__setitem__('stypy_param_names_list', ['position'])
        Axis.set_label_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.set_label_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.set_label_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.set_label_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.set_label_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.set_label_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.set_label_position', ['position'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_label_position', localization, ['position'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_label_position(...)' code ##################

        unicode_11456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1713, (-1)), 'unicode', u"\n        Set the label position (top or bottom)\n\n        ACCEPTS: [ 'top' | 'bottom' ]\n        ")
        
        # Call to NotImplementedError(...): (line 1714)
        # Processing the call keyword arguments (line 1714)
        kwargs_11458 = {}
        # Getting the type of 'NotImplementedError' (line 1714)
        NotImplementedError_11457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1714, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1714)
        NotImplementedError_call_result_11459 = invoke(stypy.reporting.localization.Localization(__file__, 1714, 14), NotImplementedError_11457, *[], **kwargs_11458)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1714, 8), NotImplementedError_call_result_11459, 'raise parameter', BaseException)
        
        # ################# End of 'set_label_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_label_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1708)
        stypy_return_type_11460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1708, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11460)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_label_position'
        return stypy_return_type_11460


    @norecursion
    def get_minpos(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_minpos'
        module_type_store = module_type_store.open_function_context('get_minpos', 1716, 4, False)
        # Assigning a type to the variable 'self' (line 1717)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1717, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Axis.get_minpos.__dict__.__setitem__('stypy_localization', localization)
        Axis.get_minpos.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Axis.get_minpos.__dict__.__setitem__('stypy_type_store', module_type_store)
        Axis.get_minpos.__dict__.__setitem__('stypy_function_name', 'Axis.get_minpos')
        Axis.get_minpos.__dict__.__setitem__('stypy_param_names_list', [])
        Axis.get_minpos.__dict__.__setitem__('stypy_varargs_param_name', None)
        Axis.get_minpos.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Axis.get_minpos.__dict__.__setitem__('stypy_call_defaults', defaults)
        Axis.get_minpos.__dict__.__setitem__('stypy_call_varargs', varargs)
        Axis.get_minpos.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Axis.get_minpos.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Axis.get_minpos', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_minpos', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_minpos(...)' code ##################

        
        # Call to NotImplementedError(...): (line 1717)
        # Processing the call keyword arguments (line 1717)
        kwargs_11462 = {}
        # Getting the type of 'NotImplementedError' (line 1717)
        NotImplementedError_11461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1717, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1717)
        NotImplementedError_call_result_11463 = invoke(stypy.reporting.localization.Localization(__file__, 1717, 14), NotImplementedError_11461, *[], **kwargs_11462)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1717, 8), NotImplementedError_call_result_11463, 'raise parameter', BaseException)
        
        # ################# End of 'get_minpos(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_minpos' in the type store
        # Getting the type of 'stypy_return_type' (line 1716)
        stypy_return_type_11464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1716, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11464)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_minpos'
        return stypy_return_type_11464


# Assigning a type to the variable 'Axis' (line 628)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 628, 0), 'Axis', Axis)

# Assigning a Num to a Name (line 636):
int_11465 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 20), 'int')
# Getting the type of 'Axis'
Axis_11466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Axis')
# Setting the type of the member 'OFFSETTEXTPAD' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Axis_11466, 'OFFSETTEXTPAD', int_11465)
# Declaration of the 'XAxis' class
# Getting the type of 'Axis' (line 1720)
Axis_11467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 12), 'Axis')

class XAxis(Axis_11467, ):
    
    # Assigning a Str to a Name (line 1721):
    
    # Assigning a Str to a Name (line 1722):

    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 1724, 4, False)
        # Assigning a type to the variable 'self' (line 1725)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1725, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.contains.__dict__.__setitem__('stypy_localization', localization)
        XAxis.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.contains.__dict__.__setitem__('stypy_function_name', 'XAxis.contains')
        XAxis.contains.__dict__.__setitem__('stypy_param_names_list', ['mouseevent'])
        XAxis.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.contains', ['mouseevent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['mouseevent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        unicode_11468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1726, (-1)), 'unicode', u'Test whether the mouse event occurred in the x axis.\n        ')
        
        
        # Call to callable(...): (line 1727)
        # Processing the call arguments (line 1727)
        # Getting the type of 'self' (line 1727)
        self_11470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 20), 'self', False)
        # Obtaining the member '_contains' of a type (line 1727)
        _contains_11471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1727, 20), self_11470, '_contains')
        # Processing the call keyword arguments (line 1727)
        kwargs_11472 = {}
        # Getting the type of 'callable' (line 1727)
        callable_11469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1727, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 1727)
        callable_call_result_11473 = invoke(stypy.reporting.localization.Localization(__file__, 1727, 11), callable_11469, *[_contains_11471], **kwargs_11472)
        
        # Testing the type of an if condition (line 1727)
        if_condition_11474 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1727, 8), callable_call_result_11473)
        # Assigning a type to the variable 'if_condition_11474' (line 1727)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1727, 8), 'if_condition_11474', if_condition_11474)
        # SSA begins for if statement (line 1727)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _contains(...): (line 1728)
        # Processing the call arguments (line 1728)
        # Getting the type of 'self' (line 1728)
        self_11477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 34), 'self', False)
        # Getting the type of 'mouseevent' (line 1728)
        mouseevent_11478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 40), 'mouseevent', False)
        # Processing the call keyword arguments (line 1728)
        kwargs_11479 = {}
        # Getting the type of 'self' (line 1728)
        self_11475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 19), 'self', False)
        # Obtaining the member '_contains' of a type (line 1728)
        _contains_11476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1728, 19), self_11475, '_contains')
        # Calling _contains(args, kwargs) (line 1728)
        _contains_call_result_11480 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 19), _contains_11476, *[self_11477, mouseevent_11478], **kwargs_11479)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1728)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1728, 12), 'stypy_return_type', _contains_call_result_11480)
        # SSA join for if statement (line 1727)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 1730):
        
        # Assigning a Attribute to a Name (line 1730):
        # Getting the type of 'mouseevent' (line 1730)
        mouseevent_11481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 15), 'mouseevent')
        # Obtaining the member 'x' of a type (line 1730)
        x_11482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 15), mouseevent_11481, 'x')
        # Assigning a type to the variable 'tuple_assignment_6994' (line 1730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 8), 'tuple_assignment_6994', x_11482)
        
        # Assigning a Attribute to a Name (line 1730):
        # Getting the type of 'mouseevent' (line 1730)
        mouseevent_11483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 29), 'mouseevent')
        # Obtaining the member 'y' of a type (line 1730)
        y_11484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1730, 29), mouseevent_11483, 'y')
        # Assigning a type to the variable 'tuple_assignment_6995' (line 1730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 8), 'tuple_assignment_6995', y_11484)
        
        # Assigning a Name to a Name (line 1730):
        # Getting the type of 'tuple_assignment_6994' (line 1730)
        tuple_assignment_6994_11485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 8), 'tuple_assignment_6994')
        # Assigning a type to the variable 'x' (line 1730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 8), 'x', tuple_assignment_6994_11485)
        
        # Assigning a Name to a Name (line 1730):
        # Getting the type of 'tuple_assignment_6995' (line 1730)
        tuple_assignment_6995_11486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1730, 8), 'tuple_assignment_6995')
        # Assigning a type to the variable 'y' (line 1730)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1730, 11), 'y', tuple_assignment_6995_11486)
        
        
        # SSA begins for try-except statement (line 1731)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 1732):
        
        # Assigning a Call to a Name (line 1732):
        
        # Call to inverted(...): (line 1732)
        # Processing the call keyword arguments (line 1732)
        kwargs_11491 = {}
        # Getting the type of 'self' (line 1732)
        self_11487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 20), 'self', False)
        # Obtaining the member 'axes' of a type (line 1732)
        axes_11488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1732, 20), self_11487, 'axes')
        # Obtaining the member 'transAxes' of a type (line 1732)
        transAxes_11489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1732, 20), axes_11488, 'transAxes')
        # Obtaining the member 'inverted' of a type (line 1732)
        inverted_11490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1732, 20), transAxes_11489, 'inverted')
        # Calling inverted(args, kwargs) (line 1732)
        inverted_call_result_11492 = invoke(stypy.reporting.localization.Localization(__file__, 1732, 20), inverted_11490, *[], **kwargs_11491)
        
        # Assigning a type to the variable 'trans' (line 1732)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 12), 'trans', inverted_call_result_11492)
        
        # Assigning a Call to a Tuple (line 1733):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1733)
        # Processing the call arguments (line 1733)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1733)
        tuple_11495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1733, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1733)
        # Adding element type (line 1733)
        # Getting the type of 'x' (line 1733)
        x_11496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 50), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1733, 50), tuple_11495, x_11496)
        # Adding element type (line 1733)
        # Getting the type of 'y' (line 1733)
        y_11497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 53), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1733, 50), tuple_11495, y_11497)
        
        # Processing the call keyword arguments (line 1733)
        kwargs_11498 = {}
        # Getting the type of 'trans' (line 1733)
        trans_11493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 27), 'trans', False)
        # Obtaining the member 'transform_point' of a type (line 1733)
        transform_point_11494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1733, 27), trans_11493, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1733)
        transform_point_call_result_11499 = invoke(stypy.reporting.localization.Localization(__file__, 1733, 27), transform_point_11494, *[tuple_11495], **kwargs_11498)
        
        # Assigning a type to the variable 'call_assignment_6996' (line 1733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 12), 'call_assignment_6996', transform_point_call_result_11499)
        
        # Assigning a Call to a Name (line 1733):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1733, 12), 'int')
        # Processing the call keyword arguments
        kwargs_11503 = {}
        # Getting the type of 'call_assignment_6996' (line 1733)
        call_assignment_6996_11500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 12), 'call_assignment_6996', False)
        # Obtaining the member '__getitem__' of a type (line 1733)
        getitem___11501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1733, 12), call_assignment_6996_11500, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11504 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11501, *[int_11502], **kwargs_11503)
        
        # Assigning a type to the variable 'call_assignment_6997' (line 1733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 12), 'call_assignment_6997', getitem___call_result_11504)
        
        # Assigning a Name to a Name (line 1733):
        # Getting the type of 'call_assignment_6997' (line 1733)
        call_assignment_6997_11505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 12), 'call_assignment_6997')
        # Assigning a type to the variable 'xaxes' (line 1733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 12), 'xaxes', call_assignment_6997_11505)
        
        # Assigning a Call to a Name (line 1733):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1733, 12), 'int')
        # Processing the call keyword arguments
        kwargs_11509 = {}
        # Getting the type of 'call_assignment_6996' (line 1733)
        call_assignment_6996_11506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 12), 'call_assignment_6996', False)
        # Obtaining the member '__getitem__' of a type (line 1733)
        getitem___11507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1733, 12), call_assignment_6996_11506, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11510 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11507, *[int_11508], **kwargs_11509)
        
        # Assigning a type to the variable 'call_assignment_6998' (line 1733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 12), 'call_assignment_6998', getitem___call_result_11510)
        
        # Assigning a Name to a Name (line 1733):
        # Getting the type of 'call_assignment_6998' (line 1733)
        call_assignment_6998_11511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1733, 12), 'call_assignment_6998')
        # Assigning a type to the variable 'yaxes' (line 1733)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1733, 19), 'yaxes', call_assignment_6998_11511)
        # SSA branch for the except part of a try statement (line 1731)
        # SSA branch for the except 'ValueError' branch of a try statement (line 1731)
        module_type_store.open_ssa_branch('except')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1735)
        tuple_11512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1735)
        # Adding element type (line 1735)
        # Getting the type of 'False' (line 1735)
        False_11513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1735, 19), 'False')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 19), tuple_11512, False_11513)
        # Adding element type (line 1735)
        
        # Obtaining an instance of the builtin type 'dict' (line 1735)
        dict_11514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1735, 26), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1735)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1735, 19), tuple_11512, dict_11514)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1735)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1735, 12), 'stypy_return_type', tuple_11512)
        # SSA join for try-except statement (line 1731)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1736):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1736)
        # Processing the call arguments (line 1736)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1736)
        tuple_11519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 52), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1736)
        # Adding element type (line 1736)
        int_11520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 52), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1736, 52), tuple_11519, int_11520)
        # Adding element type (line 1736)
        int_11521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1736, 52), tuple_11519, int_11521)
        
        # Processing the call keyword arguments (line 1736)
        kwargs_11522 = {}
        # Getting the type of 'self' (line 1736)
        self_11515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 15), 'self', False)
        # Obtaining the member 'axes' of a type (line 1736)
        axes_11516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 15), self_11515, 'axes')
        # Obtaining the member 'transAxes' of a type (line 1736)
        transAxes_11517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 15), axes_11516, 'transAxes')
        # Obtaining the member 'transform_point' of a type (line 1736)
        transform_point_11518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 15), transAxes_11517, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1736)
        transform_point_call_result_11523 = invoke(stypy.reporting.localization.Localization(__file__, 1736, 15), transform_point_11518, *[tuple_11519], **kwargs_11522)
        
        # Assigning a type to the variable 'call_assignment_6999' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 8), 'call_assignment_6999', transform_point_call_result_11523)
        
        # Assigning a Call to a Name (line 1736):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 8), 'int')
        # Processing the call keyword arguments
        kwargs_11527 = {}
        # Getting the type of 'call_assignment_6999' (line 1736)
        call_assignment_6999_11524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 8), 'call_assignment_6999', False)
        # Obtaining the member '__getitem__' of a type (line 1736)
        getitem___11525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 8), call_assignment_6999_11524, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11528 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11525, *[int_11526], **kwargs_11527)
        
        # Assigning a type to the variable 'call_assignment_7000' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 8), 'call_assignment_7000', getitem___call_result_11528)
        
        # Assigning a Name to a Name (line 1736):
        # Getting the type of 'call_assignment_7000' (line 1736)
        call_assignment_7000_11529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 8), 'call_assignment_7000')
        # Assigning a type to the variable 'l' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 8), 'l', call_assignment_7000_11529)
        
        # Assigning a Call to a Name (line 1736):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1736, 8), 'int')
        # Processing the call keyword arguments
        kwargs_11533 = {}
        # Getting the type of 'call_assignment_6999' (line 1736)
        call_assignment_6999_11530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 8), 'call_assignment_6999', False)
        # Obtaining the member '__getitem__' of a type (line 1736)
        getitem___11531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1736, 8), call_assignment_6999_11530, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11534 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11531, *[int_11532], **kwargs_11533)
        
        # Assigning a type to the variable 'call_assignment_7001' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 8), 'call_assignment_7001', getitem___call_result_11534)
        
        # Assigning a Name to a Name (line 1736):
        # Getting the type of 'call_assignment_7001' (line 1736)
        call_assignment_7001_11535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1736, 8), 'call_assignment_7001')
        # Assigning a type to the variable 'b' (line 1736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1736, 11), 'b', call_assignment_7001_11535)
        
        # Assigning a Call to a Tuple (line 1737):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 1737)
        # Processing the call arguments (line 1737)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1737)
        tuple_11540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 52), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1737)
        # Adding element type (line 1737)
        int_11541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 52), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1737, 52), tuple_11540, int_11541)
        # Adding element type (line 1737)
        int_11542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1737, 52), tuple_11540, int_11542)
        
        # Processing the call keyword arguments (line 1737)
        kwargs_11543 = {}
        # Getting the type of 'self' (line 1737)
        self_11536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 15), 'self', False)
        # Obtaining the member 'axes' of a type (line 1737)
        axes_11537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 15), self_11536, 'axes')
        # Obtaining the member 'transAxes' of a type (line 1737)
        transAxes_11538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 15), axes_11537, 'transAxes')
        # Obtaining the member 'transform_point' of a type (line 1737)
        transform_point_11539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 15), transAxes_11538, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1737)
        transform_point_call_result_11544 = invoke(stypy.reporting.localization.Localization(__file__, 1737, 15), transform_point_11539, *[tuple_11540], **kwargs_11543)
        
        # Assigning a type to the variable 'call_assignment_7002' (line 1737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'call_assignment_7002', transform_point_call_result_11544)
        
        # Assigning a Call to a Name (line 1737):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 8), 'int')
        # Processing the call keyword arguments
        kwargs_11548 = {}
        # Getting the type of 'call_assignment_7002' (line 1737)
        call_assignment_7002_11545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'call_assignment_7002', False)
        # Obtaining the member '__getitem__' of a type (line 1737)
        getitem___11546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 8), call_assignment_7002_11545, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11549 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11546, *[int_11547], **kwargs_11548)
        
        # Assigning a type to the variable 'call_assignment_7003' (line 1737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'call_assignment_7003', getitem___call_result_11549)
        
        # Assigning a Name to a Name (line 1737):
        # Getting the type of 'call_assignment_7003' (line 1737)
        call_assignment_7003_11550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'call_assignment_7003')
        # Assigning a type to the variable 'r' (line 1737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'r', call_assignment_7003_11550)
        
        # Assigning a Call to a Name (line 1737):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1737, 8), 'int')
        # Processing the call keyword arguments
        kwargs_11554 = {}
        # Getting the type of 'call_assignment_7002' (line 1737)
        call_assignment_7002_11551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'call_assignment_7002', False)
        # Obtaining the member '__getitem__' of a type (line 1737)
        getitem___11552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1737, 8), call_assignment_7002_11551, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11555 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11552, *[int_11553], **kwargs_11554)
        
        # Assigning a type to the variable 'call_assignment_7004' (line 1737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'call_assignment_7004', getitem___call_result_11555)
        
        # Assigning a Name to a Name (line 1737):
        # Getting the type of 'call_assignment_7004' (line 1737)
        call_assignment_7004_11556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1737, 8), 'call_assignment_7004')
        # Assigning a type to the variable 't' (line 1737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1737, 11), 't', call_assignment_7004_11556)
        
        # Assigning a BoolOp to a Name (line 1738):
        
        # Assigning a BoolOp to a Name (line 1738):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'xaxes' (line 1738)
        xaxes_11557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 17), 'xaxes')
        int_11558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1738, 26), 'int')
        # Applying the binary operator '>=' (line 1738)
        result_ge_11559 = python_operator(stypy.reporting.localization.Localization(__file__, 1738, 17), '>=', xaxes_11557, int_11558)
        
        
        # Getting the type of 'xaxes' (line 1738)
        xaxes_11560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1738, 32), 'xaxes')
        int_11561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1738, 41), 'int')
        # Applying the binary operator '<=' (line 1738)
        result_le_11562 = python_operator(stypy.reporting.localization.Localization(__file__, 1738, 32), '<=', xaxes_11560, int_11561)
        
        # Applying the binary operator 'and' (line 1738)
        result_and_keyword_11563 = python_operator(stypy.reporting.localization.Localization(__file__, 1738, 17), 'and', result_ge_11559, result_le_11562)
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        # Getting the type of 'y' (line 1739)
        y_11564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 13), 'y')
        # Getting the type of 'b' (line 1739)
        b_11565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 17), 'b')
        # Applying the binary operator '<' (line 1739)
        result_lt_11566 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 13), '<', y_11564, b_11565)
        
        
        # Getting the type of 'y' (line 1739)
        y_11567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 23), 'y')
        # Getting the type of 'b' (line 1739)
        b_11568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 27), 'b')
        # Getting the type of 'self' (line 1739)
        self_11569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1739, 31), 'self')
        # Obtaining the member 'pickradius' of a type (line 1739)
        pickradius_11570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1739, 31), self_11569, 'pickradius')
        # Applying the binary operator '-' (line 1739)
        result_sub_11571 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 27), '-', b_11568, pickradius_11570)
        
        # Applying the binary operator '>' (line 1739)
        result_gt_11572 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 23), '>', y_11567, result_sub_11571)
        
        # Applying the binary operator 'and' (line 1739)
        result_and_keyword_11573 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 13), 'and', result_lt_11566, result_gt_11572)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'y' (line 1740)
        y_11574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 13), 'y')
        # Getting the type of 't' (line 1740)
        t_11575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 17), 't')
        # Applying the binary operator '>' (line 1740)
        result_gt_11576 = python_operator(stypy.reporting.localization.Localization(__file__, 1740, 13), '>', y_11574, t_11575)
        
        
        # Getting the type of 'y' (line 1740)
        y_11577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 23), 'y')
        # Getting the type of 't' (line 1740)
        t_11578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 27), 't')
        # Getting the type of 'self' (line 1740)
        self_11579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1740, 31), 'self')
        # Obtaining the member 'pickradius' of a type (line 1740)
        pickradius_11580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1740, 31), self_11579, 'pickradius')
        # Applying the binary operator '+' (line 1740)
        result_add_11581 = python_operator(stypy.reporting.localization.Localization(__file__, 1740, 27), '+', t_11578, pickradius_11580)
        
        # Applying the binary operator '<' (line 1740)
        result_lt_11582 = python_operator(stypy.reporting.localization.Localization(__file__, 1740, 23), '<', y_11577, result_add_11581)
        
        # Applying the binary operator 'and' (line 1740)
        result_and_keyword_11583 = python_operator(stypy.reporting.localization.Localization(__file__, 1740, 13), 'and', result_gt_11576, result_lt_11582)
        
        # Applying the binary operator 'or' (line 1739)
        result_or_keyword_11584 = python_operator(stypy.reporting.localization.Localization(__file__, 1739, 12), 'or', result_and_keyword_11573, result_and_keyword_11583)
        
        # Applying the binary operator 'and' (line 1738)
        result_and_keyword_11585 = python_operator(stypy.reporting.localization.Localization(__file__, 1738, 17), 'and', result_and_keyword_11563, result_or_keyword_11584)
        
        # Assigning a type to the variable 'inaxis' (line 1738)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1738, 8), 'inaxis', result_and_keyword_11585)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1741)
        tuple_11586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1741, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1741)
        # Adding element type (line 1741)
        # Getting the type of 'inaxis' (line 1741)
        inaxis_11587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1741, 15), 'inaxis')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1741, 15), tuple_11586, inaxis_11587)
        # Adding element type (line 1741)
        
        # Obtaining an instance of the builtin type 'dict' (line 1741)
        dict_11588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1741, 23), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1741)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1741, 15), tuple_11586, dict_11588)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1741)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1741, 8), 'stypy_return_type', tuple_11586)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 1724)
        stypy_return_type_11589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11589)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_11589


    @norecursion
    def _get_tick(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_tick'
        module_type_store = module_type_store.open_function_context('_get_tick', 1743, 4, False)
        # Assigning a type to the variable 'self' (line 1744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis._get_tick.__dict__.__setitem__('stypy_localization', localization)
        XAxis._get_tick.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis._get_tick.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis._get_tick.__dict__.__setitem__('stypy_function_name', 'XAxis._get_tick')
        XAxis._get_tick.__dict__.__setitem__('stypy_param_names_list', ['major'])
        XAxis._get_tick.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis._get_tick.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis._get_tick.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis._get_tick.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis._get_tick.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis._get_tick.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis._get_tick', ['major'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_tick', localization, ['major'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_tick(...)' code ##################

        
        # Getting the type of 'major' (line 1744)
        major_11590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1744, 11), 'major')
        # Testing the type of an if condition (line 1744)
        if_condition_11591 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1744, 8), major_11590)
        # Assigning a type to the variable 'if_condition_11591' (line 1744)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1744, 8), 'if_condition_11591', if_condition_11591)
        # SSA begins for if statement (line 1744)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1745):
        
        # Assigning a Attribute to a Name (line 1745):
        # Getting the type of 'self' (line 1745)
        self_11592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1745, 22), 'self')
        # Obtaining the member '_major_tick_kw' of a type (line 1745)
        _major_tick_kw_11593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1745, 22), self_11592, '_major_tick_kw')
        # Assigning a type to the variable 'tick_kw' (line 1745)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1745, 12), 'tick_kw', _major_tick_kw_11593)
        # SSA branch for the else part of an if statement (line 1744)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 1747):
        
        # Assigning a Attribute to a Name (line 1747):
        # Getting the type of 'self' (line 1747)
        self_11594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1747, 22), 'self')
        # Obtaining the member '_minor_tick_kw' of a type (line 1747)
        _minor_tick_kw_11595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1747, 22), self_11594, '_minor_tick_kw')
        # Assigning a type to the variable 'tick_kw' (line 1747)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1747, 12), 'tick_kw', _minor_tick_kw_11595)
        # SSA join for if statement (line 1744)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to XTick(...): (line 1748)
        # Processing the call arguments (line 1748)
        # Getting the type of 'self' (line 1748)
        self_11597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 21), 'self', False)
        # Obtaining the member 'axes' of a type (line 1748)
        axes_11598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1748, 21), self_11597, 'axes')
        int_11599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1748, 32), 'int')
        unicode_11600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1748, 35), 'unicode', u'')
        # Processing the call keyword arguments (line 1748)
        # Getting the type of 'major' (line 1748)
        major_11601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 45), 'major', False)
        keyword_11602 = major_11601
        # Getting the type of 'tick_kw' (line 1748)
        tick_kw_11603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 54), 'tick_kw', False)
        kwargs_11604 = {'major': keyword_11602, 'tick_kw_11603': tick_kw_11603}
        # Getting the type of 'XTick' (line 1748)
        XTick_11596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1748, 15), 'XTick', False)
        # Calling XTick(args, kwargs) (line 1748)
        XTick_call_result_11605 = invoke(stypy.reporting.localization.Localization(__file__, 1748, 15), XTick_11596, *[axes_11598, int_11599, unicode_11600], **kwargs_11604)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1748)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1748, 8), 'stypy_return_type', XTick_call_result_11605)
        
        # ################# End of '_get_tick(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_tick' in the type store
        # Getting the type of 'stypy_return_type' (line 1743)
        stypy_return_type_11606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1743, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11606)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_tick'
        return stypy_return_type_11606


    @norecursion
    def _get_label(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_label'
        module_type_store = module_type_store.open_function_context('_get_label', 1750, 4, False)
        # Assigning a type to the variable 'self' (line 1751)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1751, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis._get_label.__dict__.__setitem__('stypy_localization', localization)
        XAxis._get_label.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis._get_label.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis._get_label.__dict__.__setitem__('stypy_function_name', 'XAxis._get_label')
        XAxis._get_label.__dict__.__setitem__('stypy_param_names_list', [])
        XAxis._get_label.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis._get_label.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis._get_label.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis._get_label.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis._get_label.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis._get_label.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis._get_label', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_label', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_label(...)' code ##################

        
        # Assigning a Call to a Name (line 1753):
        
        # Assigning a Call to a Name (line 1753):
        
        # Call to Text(...): (line 1753)
        # Processing the call keyword arguments (line 1753)
        float_11609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1753, 29), 'float')
        keyword_11610 = float_11609
        int_11611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1753, 36), 'int')
        keyword_11612 = int_11611
        
        # Call to FontProperties(...): (line 1754)
        # Processing the call keyword arguments (line 1754)
        
        # Obtaining the type of the subscript
        unicode_11615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1755, 45), 'unicode', u'axes.labelsize')
        # Getting the type of 'rcParams' (line 1755)
        rcParams_11616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1755, 36), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1755)
        getitem___11617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1755, 36), rcParams_11616, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1755)
        subscript_call_result_11618 = invoke(stypy.reporting.localization.Localization(__file__, 1755, 36), getitem___11617, unicode_11615)
        
        keyword_11619 = subscript_call_result_11618
        
        # Obtaining the type of the subscript
        unicode_11620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1756, 47), 'unicode', u'axes.labelweight')
        # Getting the type of 'rcParams' (line 1756)
        rcParams_11621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1756, 38), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1756)
        getitem___11622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1756, 38), rcParams_11621, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1756)
        subscript_call_result_11623 = invoke(stypy.reporting.localization.Localization(__file__, 1756, 38), getitem___11622, unicode_11620)
        
        keyword_11624 = subscript_call_result_11623
        kwargs_11625 = {'weight': keyword_11624, 'size': keyword_11619}
        # Getting the type of 'font_manager' (line 1754)
        font_manager_11613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1754, 42), 'font_manager', False)
        # Obtaining the member 'FontProperties' of a type (line 1754)
        FontProperties_11614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1754, 42), font_manager_11613, 'FontProperties')
        # Calling FontProperties(args, kwargs) (line 1754)
        FontProperties_call_result_11626 = invoke(stypy.reporting.localization.Localization(__file__, 1754, 42), FontProperties_11614, *[], **kwargs_11625)
        
        keyword_11627 = FontProperties_call_result_11626
        
        # Obtaining the type of the subscript
        unicode_11628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1757, 42), 'unicode', u'axes.labelcolor')
        # Getting the type of 'rcParams' (line 1757)
        rcParams_11629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1757, 33), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1757)
        getitem___11630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1757, 33), rcParams_11629, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1757)
        subscript_call_result_11631 = invoke(stypy.reporting.localization.Localization(__file__, 1757, 33), getitem___11630, unicode_11628)
        
        keyword_11632 = subscript_call_result_11631
        unicode_11633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1758, 45), 'unicode', u'top')
        keyword_11634 = unicode_11633
        unicode_11635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1759, 47), 'unicode', u'center')
        keyword_11636 = unicode_11635
        kwargs_11637 = {'color': keyword_11632, 'fontproperties': keyword_11627, 'verticalalignment': keyword_11634, 'y': keyword_11612, 'x': keyword_11610, 'horizontalalignment': keyword_11636}
        # Getting the type of 'mtext' (line 1753)
        mtext_11607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1753, 16), 'mtext', False)
        # Obtaining the member 'Text' of a type (line 1753)
        Text_11608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1753, 16), mtext_11607, 'Text')
        # Calling Text(args, kwargs) (line 1753)
        Text_call_result_11638 = invoke(stypy.reporting.localization.Localization(__file__, 1753, 16), Text_11608, *[], **kwargs_11637)
        
        # Assigning a type to the variable 'label' (line 1753)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1753, 8), 'label', Text_call_result_11638)
        
        # Call to set_transform(...): (line 1761)
        # Processing the call arguments (line 1761)
        
        # Call to blended_transform_factory(...): (line 1761)
        # Processing the call arguments (line 1761)
        # Getting the type of 'self' (line 1762)
        self_11643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 12), 'self', False)
        # Obtaining the member 'axes' of a type (line 1762)
        axes_11644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 12), self_11643, 'axes')
        # Obtaining the member 'transAxes' of a type (line 1762)
        transAxes_11645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 12), axes_11644, 'transAxes')
        
        # Call to IdentityTransform(...): (line 1762)
        # Processing the call keyword arguments (line 1762)
        kwargs_11648 = {}
        # Getting the type of 'mtransforms' (line 1762)
        mtransforms_11646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1762, 33), 'mtransforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 1762)
        IdentityTransform_11647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1762, 33), mtransforms_11646, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 1762)
        IdentityTransform_call_result_11649 = invoke(stypy.reporting.localization.Localization(__file__, 1762, 33), IdentityTransform_11647, *[], **kwargs_11648)
        
        # Processing the call keyword arguments (line 1761)
        kwargs_11650 = {}
        # Getting the type of 'mtransforms' (line 1761)
        mtransforms_11641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 28), 'mtransforms', False)
        # Obtaining the member 'blended_transform_factory' of a type (line 1761)
        blended_transform_factory_11642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1761, 28), mtransforms_11641, 'blended_transform_factory')
        # Calling blended_transform_factory(args, kwargs) (line 1761)
        blended_transform_factory_call_result_11651 = invoke(stypy.reporting.localization.Localization(__file__, 1761, 28), blended_transform_factory_11642, *[transAxes_11645, IdentityTransform_call_result_11649], **kwargs_11650)
        
        # Processing the call keyword arguments (line 1761)
        kwargs_11652 = {}
        # Getting the type of 'label' (line 1761)
        label_11639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1761, 8), 'label', False)
        # Obtaining the member 'set_transform' of a type (line 1761)
        set_transform_11640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1761, 8), label_11639, 'set_transform')
        # Calling set_transform(args, kwargs) (line 1761)
        set_transform_call_result_11653 = invoke(stypy.reporting.localization.Localization(__file__, 1761, 8), set_transform_11640, *[blended_transform_factory_call_result_11651], **kwargs_11652)
        
        
        # Call to _set_artist_props(...): (line 1764)
        # Processing the call arguments (line 1764)
        # Getting the type of 'label' (line 1764)
        label_11656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 31), 'label', False)
        # Processing the call keyword arguments (line 1764)
        kwargs_11657 = {}
        # Getting the type of 'self' (line 1764)
        self_11654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1764, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 1764)
        _set_artist_props_11655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1764, 8), self_11654, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 1764)
        _set_artist_props_call_result_11658 = invoke(stypy.reporting.localization.Localization(__file__, 1764, 8), _set_artist_props_11655, *[label_11656], **kwargs_11657)
        
        
        # Assigning a Str to a Attribute (line 1765):
        
        # Assigning a Str to a Attribute (line 1765):
        unicode_11659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1765, 30), 'unicode', u'bottom')
        # Getting the type of 'self' (line 1765)
        self_11660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1765, 8), 'self')
        # Setting the type of the member 'label_position' of a type (line 1765)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1765, 8), self_11660, 'label_position', unicode_11659)
        # Getting the type of 'label' (line 1766)
        label_11661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1766, 15), 'label')
        # Assigning a type to the variable 'stypy_return_type' (line 1766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1766, 8), 'stypy_return_type', label_11661)
        
        # ################# End of '_get_label(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_label' in the type store
        # Getting the type of 'stypy_return_type' (line 1750)
        stypy_return_type_11662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1750, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11662)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_label'
        return stypy_return_type_11662


    @norecursion
    def _get_offset_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_offset_text'
        module_type_store = module_type_store.open_function_context('_get_offset_text', 1768, 4, False)
        # Assigning a type to the variable 'self' (line 1769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1769, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis._get_offset_text.__dict__.__setitem__('stypy_localization', localization)
        XAxis._get_offset_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis._get_offset_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis._get_offset_text.__dict__.__setitem__('stypy_function_name', 'XAxis._get_offset_text')
        XAxis._get_offset_text.__dict__.__setitem__('stypy_param_names_list', [])
        XAxis._get_offset_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis._get_offset_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis._get_offset_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis._get_offset_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis._get_offset_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis._get_offset_text.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis._get_offset_text', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_offset_text', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_offset_text(...)' code ##################

        
        # Assigning a Call to a Name (line 1770):
        
        # Assigning a Call to a Name (line 1770):
        
        # Call to Text(...): (line 1770)
        # Processing the call keyword arguments (line 1770)
        int_11665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1770, 34), 'int')
        keyword_11666 = int_11665
        int_11667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1770, 39), 'int')
        keyword_11668 = int_11667
        
        # Call to FontProperties(...): (line 1771)
        # Processing the call keyword arguments (line 1771)
        
        # Obtaining the type of the subscript
        unicode_11671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1772, 50), 'unicode', u'xtick.labelsize')
        # Getting the type of 'rcParams' (line 1772)
        rcParams_11672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1772, 41), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1772)
        getitem___11673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1772, 41), rcParams_11672, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1772)
        subscript_call_result_11674 = invoke(stypy.reporting.localization.Localization(__file__, 1772, 41), getitem___11673, unicode_11671)
        
        keyword_11675 = subscript_call_result_11674
        kwargs_11676 = {'size': keyword_11675}
        # Getting the type of 'font_manager' (line 1771)
        font_manager_11669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1771, 47), 'font_manager', False)
        # Obtaining the member 'FontProperties' of a type (line 1771)
        FontProperties_11670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1771, 47), font_manager_11669, 'FontProperties')
        # Calling FontProperties(args, kwargs) (line 1771)
        FontProperties_call_result_11677 = invoke(stypy.reporting.localization.Localization(__file__, 1771, 47), FontProperties_11670, *[], **kwargs_11676)
        
        keyword_11678 = FontProperties_call_result_11677
        
        # Obtaining the type of the subscript
        unicode_11679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1773, 47), 'unicode', u'xtick.color')
        # Getting the type of 'rcParams' (line 1773)
        rcParams_11680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1773, 38), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1773)
        getitem___11681 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1773, 38), rcParams_11680, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1773)
        subscript_call_result_11682 = invoke(stypy.reporting.localization.Localization(__file__, 1773, 38), getitem___11681, unicode_11679)
        
        keyword_11683 = subscript_call_result_11682
        unicode_11684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1774, 50), 'unicode', u'top')
        keyword_11685 = unicode_11684
        unicode_11686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1775, 52), 'unicode', u'right')
        keyword_11687 = unicode_11686
        kwargs_11688 = {'color': keyword_11683, 'fontproperties': keyword_11678, 'verticalalignment': keyword_11685, 'y': keyword_11668, 'x': keyword_11666, 'horizontalalignment': keyword_11687}
        # Getting the type of 'mtext' (line 1770)
        mtext_11663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1770, 21), 'mtext', False)
        # Obtaining the member 'Text' of a type (line 1770)
        Text_11664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1770, 21), mtext_11663, 'Text')
        # Calling Text(args, kwargs) (line 1770)
        Text_call_result_11689 = invoke(stypy.reporting.localization.Localization(__file__, 1770, 21), Text_11664, *[], **kwargs_11688)
        
        # Assigning a type to the variable 'offsetText' (line 1770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1770, 8), 'offsetText', Text_call_result_11689)
        
        # Call to set_transform(...): (line 1776)
        # Processing the call arguments (line 1776)
        
        # Call to blended_transform_factory(...): (line 1776)
        # Processing the call arguments (line 1776)
        # Getting the type of 'self' (line 1777)
        self_11694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 12), 'self', False)
        # Obtaining the member 'axes' of a type (line 1777)
        axes_11695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1777, 12), self_11694, 'axes')
        # Obtaining the member 'transAxes' of a type (line 1777)
        transAxes_11696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1777, 12), axes_11695, 'transAxes')
        
        # Call to IdentityTransform(...): (line 1777)
        # Processing the call keyword arguments (line 1777)
        kwargs_11699 = {}
        # Getting the type of 'mtransforms' (line 1777)
        mtransforms_11697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1777, 33), 'mtransforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 1777)
        IdentityTransform_11698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1777, 33), mtransforms_11697, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 1777)
        IdentityTransform_call_result_11700 = invoke(stypy.reporting.localization.Localization(__file__, 1777, 33), IdentityTransform_11698, *[], **kwargs_11699)
        
        # Processing the call keyword arguments (line 1776)
        kwargs_11701 = {}
        # Getting the type of 'mtransforms' (line 1776)
        mtransforms_11692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 33), 'mtransforms', False)
        # Obtaining the member 'blended_transform_factory' of a type (line 1776)
        blended_transform_factory_11693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 33), mtransforms_11692, 'blended_transform_factory')
        # Calling blended_transform_factory(args, kwargs) (line 1776)
        blended_transform_factory_call_result_11702 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 33), blended_transform_factory_11693, *[transAxes_11696, IdentityTransform_call_result_11700], **kwargs_11701)
        
        # Processing the call keyword arguments (line 1776)
        kwargs_11703 = {}
        # Getting the type of 'offsetText' (line 1776)
        offsetText_11690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1776, 8), 'offsetText', False)
        # Obtaining the member 'set_transform' of a type (line 1776)
        set_transform_11691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1776, 8), offsetText_11690, 'set_transform')
        # Calling set_transform(args, kwargs) (line 1776)
        set_transform_call_result_11704 = invoke(stypy.reporting.localization.Localization(__file__, 1776, 8), set_transform_11691, *[blended_transform_factory_call_result_11702], **kwargs_11703)
        
        
        # Call to _set_artist_props(...): (line 1779)
        # Processing the call arguments (line 1779)
        # Getting the type of 'offsetText' (line 1779)
        offsetText_11707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 31), 'offsetText', False)
        # Processing the call keyword arguments (line 1779)
        kwargs_11708 = {}
        # Getting the type of 'self' (line 1779)
        self_11705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 1779)
        _set_artist_props_11706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1779, 8), self_11705, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 1779)
        _set_artist_props_call_result_11709 = invoke(stypy.reporting.localization.Localization(__file__, 1779, 8), _set_artist_props_11706, *[offsetText_11707], **kwargs_11708)
        
        
        # Assigning a Str to a Attribute (line 1780):
        
        # Assigning a Str to a Attribute (line 1780):
        unicode_11710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1780, 36), 'unicode', u'bottom')
        # Getting the type of 'self' (line 1780)
        self_11711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 8), 'self')
        # Setting the type of the member 'offset_text_position' of a type (line 1780)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1780, 8), self_11711, 'offset_text_position', unicode_11710)
        # Getting the type of 'offsetText' (line 1781)
        offsetText_11712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 15), 'offsetText')
        # Assigning a type to the variable 'stypy_return_type' (line 1781)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1781, 8), 'stypy_return_type', offsetText_11712)
        
        # ################# End of '_get_offset_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_offset_text' in the type store
        # Getting the type of 'stypy_return_type' (line 1768)
        stypy_return_type_11713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1768, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11713)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_offset_text'
        return stypy_return_type_11713


    @norecursion
    def _get_pixel_distance_along_axis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_pixel_distance_along_axis'
        module_type_store = module_type_store.open_function_context('_get_pixel_distance_along_axis', 1783, 4, False)
        # Assigning a type to the variable 'self' (line 1784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_localization', localization)
        XAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_function_name', 'XAxis._get_pixel_distance_along_axis')
        XAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_param_names_list', ['where', 'perturb'])
        XAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis._get_pixel_distance_along_axis', ['where', 'perturb'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_pixel_distance_along_axis', localization, ['where', 'perturb'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_pixel_distance_along_axis(...)' code ##################

        unicode_11714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1793, (-1)), 'unicode', u'\n        Returns the amount, in data coordinates, that a single pixel\n        corresponds to in the locality given by "where", which is also given\n        in data coordinates, and is an x coordinate. "perturb" is the amount\n        to perturb the pixel.  Usually +0.5 or -0.5.\n\n        Implementing this routine for an axis is optional; if present, it will\n        ensure that no ticks are lost due to round-off at the extreme ends of\n        an axis.\n        ')
        
        
        # Getting the type of 'self' (line 1800)
        self_11715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 11), 'self')
        # Obtaining the member 'axes' of a type (line 1800)
        axes_11716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 11), self_11715, 'axes')
        # Obtaining the member 'name' of a type (line 1800)
        name_11717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 11), axes_11716, 'name')
        unicode_11718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1800, 29), 'unicode', u'polar')
        # Applying the binary operator '==' (line 1800)
        result_eq_11719 = python_operator(stypy.reporting.localization.Localization(__file__, 1800, 11), '==', name_11717, unicode_11718)
        
        # Testing the type of an if condition (line 1800)
        if_condition_11720 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1800, 8), result_eq_11719)
        # Assigning a type to the variable 'if_condition_11720' (line 1800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 8), 'if_condition_11720', if_condition_11720)
        # SSA begins for if statement (line 1800)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        float_11721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1801, 19), 'float')
        # Assigning a type to the variable 'stypy_return_type' (line 1801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 12), 'stypy_return_type', float_11721)
        # SSA join for if statement (line 1800)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 1808):
        
        # Assigning a Attribute to a Name (line 1808):
        # Getting the type of 'self' (line 1808)
        self_11722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 16), 'self')
        # Obtaining the member 'axes' of a type (line 1808)
        axes_11723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 16), self_11722, 'axes')
        # Obtaining the member 'transData' of a type (line 1808)
        transData_11724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 16), axes_11723, 'transData')
        # Assigning a type to the variable 'trans' (line 1808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1808, 8), 'trans', transData_11724)
        
        # Assigning a Call to a Name (line 1810):
        
        # Assigning a Call to a Name (line 1810):
        
        # Call to inverted(...): (line 1810)
        # Processing the call keyword arguments (line 1810)
        kwargs_11727 = {}
        # Getting the type of 'trans' (line 1810)
        trans_11725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 19), 'trans', False)
        # Obtaining the member 'inverted' of a type (line 1810)
        inverted_11726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1810, 19), trans_11725, 'inverted')
        # Calling inverted(args, kwargs) (line 1810)
        inverted_call_result_11728 = invoke(stypy.reporting.localization.Localization(__file__, 1810, 19), inverted_11726, *[], **kwargs_11727)
        
        # Assigning a type to the variable 'transinv' (line 1810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1810, 8), 'transinv', inverted_call_result_11728)
        
        # Assigning a Call to a Name (line 1811):
        
        # Assigning a Call to a Name (line 1811):
        
        # Call to transform_point(...): (line 1811)
        # Processing the call arguments (line 1811)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1811)
        tuple_11731 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1811)
        # Adding element type (line 1811)
        # Getting the type of 'where' (line 1811)
        where_11732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 37), 'where', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1811, 37), tuple_11731, where_11732)
        # Adding element type (line 1811)
        float_11733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 44), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1811, 37), tuple_11731, float_11733)
        
        # Processing the call keyword arguments (line 1811)
        kwargs_11734 = {}
        # Getting the type of 'trans' (line 1811)
        trans_11729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 14), 'trans', False)
        # Obtaining the member 'transform_point' of a type (line 1811)
        transform_point_11730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 14), trans_11729, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1811)
        transform_point_call_result_11735 = invoke(stypy.reporting.localization.Localization(__file__, 1811, 14), transform_point_11730, *[tuple_11731], **kwargs_11734)
        
        # Assigning a type to the variable 'pix' (line 1811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 8), 'pix', transform_point_call_result_11735)
        
        # Assigning a Call to a Name (line 1813):
        
        # Assigning a Call to a Name (line 1813):
        
        # Call to transform_point(...): (line 1813)
        # Processing the call arguments (line 1813)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1813)
        tuple_11738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1813)
        # Adding element type (line 1813)
        
        # Obtaining the type of the subscript
        int_11739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 44), 'int')
        # Getting the type of 'pix' (line 1813)
        pix_11740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 40), 'pix', False)
        # Obtaining the member '__getitem__' of a type (line 1813)
        getitem___11741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 40), pix_11740, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1813)
        subscript_call_result_11742 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 40), getitem___11741, int_11739)
        
        # Getting the type of 'perturb' (line 1813)
        perturb_11743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 49), 'perturb', False)
        # Applying the binary operator '+' (line 1813)
        result_add_11744 = python_operator(stypy.reporting.localization.Localization(__file__, 1813, 40), '+', subscript_call_result_11742, perturb_11743)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1813, 40), tuple_11738, result_add_11744)
        # Adding element type (line 1813)
        
        # Obtaining the type of the subscript
        int_11745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1813, 62), 'int')
        # Getting the type of 'pix' (line 1813)
        pix_11746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 58), 'pix', False)
        # Obtaining the member '__getitem__' of a type (line 1813)
        getitem___11747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 58), pix_11746, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1813)
        subscript_call_result_11748 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 58), getitem___11747, int_11745)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1813, 40), tuple_11738, subscript_call_result_11748)
        
        # Processing the call keyword arguments (line 1813)
        kwargs_11749 = {}
        # Getting the type of 'transinv' (line 1813)
        transinv_11736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 14), 'transinv', False)
        # Obtaining the member 'transform_point' of a type (line 1813)
        transform_point_11737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1813, 14), transinv_11736, 'transform_point')
        # Calling transform_point(args, kwargs) (line 1813)
        transform_point_call_result_11750 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 14), transform_point_11737, *[tuple_11738], **kwargs_11749)
        
        # Assigning a type to the variable 'ptp' (line 1813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 8), 'ptp', transform_point_call_result_11750)
        
        # Assigning a Call to a Name (line 1814):
        
        # Assigning a Call to a Name (line 1814):
        
        # Call to abs(...): (line 1814)
        # Processing the call arguments (line 1814)
        
        # Obtaining the type of the subscript
        int_11752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1814, 21), 'int')
        # Getting the type of 'ptp' (line 1814)
        ptp_11753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 17), 'ptp', False)
        # Obtaining the member '__getitem__' of a type (line 1814)
        getitem___11754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 17), ptp_11753, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1814)
        subscript_call_result_11755 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 17), getitem___11754, int_11752)
        
        # Getting the type of 'where' (line 1814)
        where_11756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 26), 'where', False)
        # Applying the binary operator '-' (line 1814)
        result_sub_11757 = python_operator(stypy.reporting.localization.Localization(__file__, 1814, 17), '-', subscript_call_result_11755, where_11756)
        
        # Processing the call keyword arguments (line 1814)
        kwargs_11758 = {}
        # Getting the type of 'abs' (line 1814)
        abs_11751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 13), 'abs', False)
        # Calling abs(args, kwargs) (line 1814)
        abs_call_result_11759 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 13), abs_11751, *[result_sub_11757], **kwargs_11758)
        
        # Assigning a type to the variable 'dx' (line 1814)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'dx', abs_call_result_11759)
        # Getting the type of 'dx' (line 1816)
        dx_11760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 15), 'dx')
        # Assigning a type to the variable 'stypy_return_type' (line 1816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 8), 'stypy_return_type', dx_11760)
        
        # ################# End of '_get_pixel_distance_along_axis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_pixel_distance_along_axis' in the type store
        # Getting the type of 'stypy_return_type' (line 1783)
        stypy_return_type_11761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11761)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_pixel_distance_along_axis'
        return stypy_return_type_11761


    @norecursion
    def set_label_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_label_position'
        module_type_store = module_type_store.open_function_context('set_label_position', 1818, 4, False)
        # Assigning a type to the variable 'self' (line 1819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.set_label_position.__dict__.__setitem__('stypy_localization', localization)
        XAxis.set_label_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.set_label_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.set_label_position.__dict__.__setitem__('stypy_function_name', 'XAxis.set_label_position')
        XAxis.set_label_position.__dict__.__setitem__('stypy_param_names_list', ['position'])
        XAxis.set_label_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.set_label_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.set_label_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.set_label_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.set_label_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.set_label_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.set_label_position', ['position'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_label_position', localization, ['position'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_label_position(...)' code ##################

        unicode_11762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1823, (-1)), 'unicode', u"\n        Set the label position (top or bottom)\n\n        ACCEPTS: [ 'top' | 'bottom' ]\n        ")
        
        
        # Getting the type of 'position' (line 1824)
        position_11763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 11), 'position')
        unicode_11764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1824, 23), 'unicode', u'top')
        # Applying the binary operator '==' (line 1824)
        result_eq_11765 = python_operator(stypy.reporting.localization.Localization(__file__, 1824, 11), '==', position_11763, unicode_11764)
        
        # Testing the type of an if condition (line 1824)
        if_condition_11766 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1824, 8), result_eq_11765)
        # Assigning a type to the variable 'if_condition_11766' (line 1824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1824, 8), 'if_condition_11766', if_condition_11766)
        # SSA begins for if statement (line 1824)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_verticalalignment(...): (line 1825)
        # Processing the call arguments (line 1825)
        unicode_11770 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1825, 45), 'unicode', u'baseline')
        # Processing the call keyword arguments (line 1825)
        kwargs_11771 = {}
        # Getting the type of 'self' (line 1825)
        self_11767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 12), 'self', False)
        # Obtaining the member 'label' of a type (line 1825)
        label_11768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 12), self_11767, 'label')
        # Obtaining the member 'set_verticalalignment' of a type (line 1825)
        set_verticalalignment_11769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1825, 12), label_11768, 'set_verticalalignment')
        # Calling set_verticalalignment(args, kwargs) (line 1825)
        set_verticalalignment_call_result_11772 = invoke(stypy.reporting.localization.Localization(__file__, 1825, 12), set_verticalalignment_11769, *[unicode_11770], **kwargs_11771)
        
        # SSA branch for the else part of an if statement (line 1824)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'position' (line 1826)
        position_11773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 13), 'position')
        unicode_11774 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1826, 25), 'unicode', u'bottom')
        # Applying the binary operator '==' (line 1826)
        result_eq_11775 = python_operator(stypy.reporting.localization.Localization(__file__, 1826, 13), '==', position_11773, unicode_11774)
        
        # Testing the type of an if condition (line 1826)
        if_condition_11776 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1826, 13), result_eq_11775)
        # Assigning a type to the variable 'if_condition_11776' (line 1826)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1826, 13), 'if_condition_11776', if_condition_11776)
        # SSA begins for if statement (line 1826)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_verticalalignment(...): (line 1827)
        # Processing the call arguments (line 1827)
        unicode_11780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1827, 45), 'unicode', u'top')
        # Processing the call keyword arguments (line 1827)
        kwargs_11781 = {}
        # Getting the type of 'self' (line 1827)
        self_11777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1827, 12), 'self', False)
        # Obtaining the member 'label' of a type (line 1827)
        label_11778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 12), self_11777, 'label')
        # Obtaining the member 'set_verticalalignment' of a type (line 1827)
        set_verticalalignment_11779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1827, 12), label_11778, 'set_verticalalignment')
        # Calling set_verticalalignment(args, kwargs) (line 1827)
        set_verticalalignment_call_result_11782 = invoke(stypy.reporting.localization.Localization(__file__, 1827, 12), set_verticalalignment_11779, *[unicode_11780], **kwargs_11781)
        
        # SSA branch for the else part of an if statement (line 1826)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 1829):
        
        # Assigning a Str to a Name (line 1829):
        unicode_11783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1829, 18), 'unicode', u"Position accepts only [ 'top' | 'bottom' ]")
        # Assigning a type to the variable 'msg' (line 1829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1829, 12), 'msg', unicode_11783)
        
        # Call to ValueError(...): (line 1830)
        # Processing the call arguments (line 1830)
        # Getting the type of 'msg' (line 1830)
        msg_11785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 29), 'msg', False)
        # Processing the call keyword arguments (line 1830)
        kwargs_11786 = {}
        # Getting the type of 'ValueError' (line 1830)
        ValueError_11784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1830, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1830)
        ValueError_call_result_11787 = invoke(stypy.reporting.localization.Localization(__file__, 1830, 18), ValueError_11784, *[msg_11785], **kwargs_11786)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1830, 12), ValueError_call_result_11787, 'raise parameter', BaseException)
        # SSA join for if statement (line 1826)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1824)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1831):
        
        # Assigning a Name to a Attribute (line 1831):
        # Getting the type of 'position' (line 1831)
        position_11788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 30), 'position')
        # Getting the type of 'self' (line 1831)
        self_11789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1831, 8), 'self')
        # Setting the type of the member 'label_position' of a type (line 1831)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1831, 8), self_11789, 'label_position', position_11788)
        
        # Assigning a Name to a Attribute (line 1832):
        
        # Assigning a Name to a Attribute (line 1832):
        # Getting the type of 'True' (line 1832)
        True_11790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 21), 'True')
        # Getting the type of 'self' (line 1832)
        self_11791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1832)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1832, 8), self_11791, 'stale', True_11790)
        
        # ################# End of 'set_label_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_label_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1818)
        stypy_return_type_11792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11792)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_label_position'
        return stypy_return_type_11792


    @norecursion
    def _update_label_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_label_position'
        module_type_store = module_type_store.open_function_context('_update_label_position', 1834, 4, False)
        # Assigning a type to the variable 'self' (line 1835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1835, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis._update_label_position.__dict__.__setitem__('stypy_localization', localization)
        XAxis._update_label_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis._update_label_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis._update_label_position.__dict__.__setitem__('stypy_function_name', 'XAxis._update_label_position')
        XAxis._update_label_position.__dict__.__setitem__('stypy_param_names_list', ['bboxes', 'bboxes2'])
        XAxis._update_label_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis._update_label_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis._update_label_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis._update_label_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis._update_label_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis._update_label_position.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis._update_label_position', ['bboxes', 'bboxes2'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_label_position', localization, ['bboxes', 'bboxes2'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_label_position(...)' code ##################

        unicode_11793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1838, (-1)), 'unicode', u'\n        Update the label position based on the bounding box enclosing\n        all the ticklabels and axis spine\n        ')
        
        
        # Getting the type of 'self' (line 1839)
        self_11794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 15), 'self')
        # Obtaining the member '_autolabelpos' of a type (line 1839)
        _autolabelpos_11795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1839, 15), self_11794, '_autolabelpos')
        # Applying the 'not' unary operator (line 1839)
        result_not__11796 = python_operator(stypy.reporting.localization.Localization(__file__, 1839, 11), 'not', _autolabelpos_11795)
        
        # Testing the type of an if condition (line 1839)
        if_condition_11797 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1839, 8), result_not__11796)
        # Assigning a type to the variable 'if_condition_11797' (line 1839)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 8), 'if_condition_11797', if_condition_11797)
        # SSA begins for if statement (line 1839)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1839)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1841):
        
        # Assigning a Call to a Name:
        
        # Call to get_position(...): (line 1841)
        # Processing the call keyword arguments (line 1841)
        kwargs_11801 = {}
        # Getting the type of 'self' (line 1841)
        self_11798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 15), 'self', False)
        # Obtaining the member 'label' of a type (line 1841)
        label_11799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1841, 15), self_11798, 'label')
        # Obtaining the member 'get_position' of a type (line 1841)
        get_position_11800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1841, 15), label_11799, 'get_position')
        # Calling get_position(args, kwargs) (line 1841)
        get_position_call_result_11802 = invoke(stypy.reporting.localization.Localization(__file__, 1841, 15), get_position_11800, *[], **kwargs_11801)
        
        # Assigning a type to the variable 'call_assignment_7005' (line 1841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 8), 'call_assignment_7005', get_position_call_result_11802)
        
        # Assigning a Call to a Name (line 1841):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 8), 'int')
        # Processing the call keyword arguments
        kwargs_11806 = {}
        # Getting the type of 'call_assignment_7005' (line 1841)
        call_assignment_7005_11803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 8), 'call_assignment_7005', False)
        # Obtaining the member '__getitem__' of a type (line 1841)
        getitem___11804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1841, 8), call_assignment_7005_11803, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11807 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11804, *[int_11805], **kwargs_11806)
        
        # Assigning a type to the variable 'call_assignment_7006' (line 1841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 8), 'call_assignment_7006', getitem___call_result_11807)
        
        # Assigning a Name to a Name (line 1841):
        # Getting the type of 'call_assignment_7006' (line 1841)
        call_assignment_7006_11808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 8), 'call_assignment_7006')
        # Assigning a type to the variable 'x' (line 1841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 8), 'x', call_assignment_7006_11808)
        
        # Assigning a Call to a Name (line 1841):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1841, 8), 'int')
        # Processing the call keyword arguments
        kwargs_11812 = {}
        # Getting the type of 'call_assignment_7005' (line 1841)
        call_assignment_7005_11809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 8), 'call_assignment_7005', False)
        # Obtaining the member '__getitem__' of a type (line 1841)
        getitem___11810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1841, 8), call_assignment_7005_11809, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11813 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11810, *[int_11811], **kwargs_11812)
        
        # Assigning a type to the variable 'call_assignment_7007' (line 1841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 8), 'call_assignment_7007', getitem___call_result_11813)
        
        # Assigning a Name to a Name (line 1841):
        # Getting the type of 'call_assignment_7007' (line 1841)
        call_assignment_7007_11814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1841, 8), 'call_assignment_7007')
        # Assigning a type to the variable 'y' (line 1841)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1841, 11), 'y', call_assignment_7007_11814)
        
        
        # Getting the type of 'self' (line 1842)
        self_11815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 11), 'self')
        # Obtaining the member 'label_position' of a type (line 1842)
        label_position_11816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1842, 11), self_11815, 'label_position')
        unicode_11817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1842, 34), 'unicode', u'bottom')
        # Applying the binary operator '==' (line 1842)
        result_eq_11818 = python_operator(stypy.reporting.localization.Localization(__file__, 1842, 11), '==', label_position_11816, unicode_11817)
        
        # Testing the type of an if condition (line 1842)
        if_condition_11819 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1842, 8), result_eq_11818)
        # Assigning a type to the variable 'if_condition_11819' (line 1842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 8), 'if_condition_11819', if_condition_11819)
        # SSA begins for if statement (line 1842)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 1843)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 1844):
        
        # Assigning a Subscript to a Name (line 1844):
        
        # Obtaining the type of the subscript
        unicode_11820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1844, 41), 'unicode', u'bottom')
        # Getting the type of 'self' (line 1844)
        self_11821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 24), 'self')
        # Obtaining the member 'axes' of a type (line 1844)
        axes_11822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1844, 24), self_11821, 'axes')
        # Obtaining the member 'spines' of a type (line 1844)
        spines_11823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1844, 24), axes_11822, 'spines')
        # Obtaining the member '__getitem__' of a type (line 1844)
        getitem___11824 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1844, 24), spines_11823, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1844)
        subscript_call_result_11825 = invoke(stypy.reporting.localization.Localization(__file__, 1844, 24), getitem___11824, unicode_11820)
        
        # Assigning a type to the variable 'spine' (line 1844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1844, 16), 'spine', subscript_call_result_11825)
        
        # Assigning a Call to a Name (line 1845):
        
        # Assigning a Call to a Name (line 1845):
        
        # Call to get_extents(...): (line 1845)
        # Processing the call keyword arguments (line 1845)
        kwargs_11838 = {}
        
        # Call to transform_path(...): (line 1845)
        # Processing the call arguments (line 1845)
        
        # Call to get_path(...): (line 1846)
        # Processing the call keyword arguments (line 1846)
        kwargs_11833 = {}
        # Getting the type of 'spine' (line 1846)
        spine_11831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 20), 'spine', False)
        # Obtaining the member 'get_path' of a type (line 1846)
        get_path_11832 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1846, 20), spine_11831, 'get_path')
        # Calling get_path(args, kwargs) (line 1846)
        get_path_call_result_11834 = invoke(stypy.reporting.localization.Localization(__file__, 1846, 20), get_path_11832, *[], **kwargs_11833)
        
        # Processing the call keyword arguments (line 1845)
        kwargs_11835 = {}
        
        # Call to get_transform(...): (line 1845)
        # Processing the call keyword arguments (line 1845)
        kwargs_11828 = {}
        # Getting the type of 'spine' (line 1845)
        spine_11826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1845, 28), 'spine', False)
        # Obtaining the member 'get_transform' of a type (line 1845)
        get_transform_11827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 28), spine_11826, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1845)
        get_transform_call_result_11829 = invoke(stypy.reporting.localization.Localization(__file__, 1845, 28), get_transform_11827, *[], **kwargs_11828)
        
        # Obtaining the member 'transform_path' of a type (line 1845)
        transform_path_11830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 28), get_transform_call_result_11829, 'transform_path')
        # Calling transform_path(args, kwargs) (line 1845)
        transform_path_call_result_11836 = invoke(stypy.reporting.localization.Localization(__file__, 1845, 28), transform_path_11830, *[get_path_call_result_11834], **kwargs_11835)
        
        # Obtaining the member 'get_extents' of a type (line 1845)
        get_extents_11837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1845, 28), transform_path_call_result_11836, 'get_extents')
        # Calling get_extents(args, kwargs) (line 1845)
        get_extents_call_result_11839 = invoke(stypy.reporting.localization.Localization(__file__, 1845, 28), get_extents_11837, *[], **kwargs_11838)
        
        # Assigning a type to the variable 'spinebbox' (line 1845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1845, 16), 'spinebbox', get_extents_call_result_11839)
        # SSA branch for the except part of a try statement (line 1843)
        # SSA branch for the except 'KeyError' branch of a try statement (line 1843)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Attribute to a Name (line 1849):
        
        # Assigning a Attribute to a Name (line 1849):
        # Getting the type of 'self' (line 1849)
        self_11840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1849, 28), 'self')
        # Obtaining the member 'axes' of a type (line 1849)
        axes_11841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 28), self_11840, 'axes')
        # Obtaining the member 'bbox' of a type (line 1849)
        bbox_11842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1849, 28), axes_11841, 'bbox')
        # Assigning a type to the variable 'spinebbox' (line 1849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1849, 16), 'spinebbox', bbox_11842)
        # SSA join for try-except statement (line 1843)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1850):
        
        # Assigning a Call to a Name (line 1850):
        
        # Call to union(...): (line 1850)
        # Processing the call arguments (line 1850)
        # Getting the type of 'bboxes' (line 1850)
        bboxes_11846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 42), 'bboxes', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1850)
        list_11847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1850, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1850)
        # Adding element type (line 1850)
        # Getting the type of 'spinebbox' (line 1850)
        spinebbox_11848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 52), 'spinebbox', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1850, 51), list_11847, spinebbox_11848)
        
        # Applying the binary operator '+' (line 1850)
        result_add_11849 = python_operator(stypy.reporting.localization.Localization(__file__, 1850, 42), '+', bboxes_11846, list_11847)
        
        # Processing the call keyword arguments (line 1850)
        kwargs_11850 = {}
        # Getting the type of 'mtransforms' (line 1850)
        mtransforms_11843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 19), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 1850)
        Bbox_11844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1850, 19), mtransforms_11843, 'Bbox')
        # Obtaining the member 'union' of a type (line 1850)
        union_11845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1850, 19), Bbox_11844, 'union')
        # Calling union(args, kwargs) (line 1850)
        union_call_result_11851 = invoke(stypy.reporting.localization.Localization(__file__, 1850, 19), union_11845, *[result_add_11849], **kwargs_11850)
        
        # Assigning a type to the variable 'bbox' (line 1850)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1850, 12), 'bbox', union_call_result_11851)
        
        # Assigning a Attribute to a Name (line 1851):
        
        # Assigning a Attribute to a Name (line 1851):
        # Getting the type of 'bbox' (line 1851)
        bbox_11852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1851, 21), 'bbox')
        # Obtaining the member 'y0' of a type (line 1851)
        y0_11853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1851, 21), bbox_11852, 'y0')
        # Assigning a type to the variable 'bottom' (line 1851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 12), 'bottom', y0_11853)
        
        # Call to set_position(...): (line 1853)
        # Processing the call arguments (line 1853)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1854)
        tuple_11857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1854)
        # Adding element type (line 1854)
        # Getting the type of 'x' (line 1854)
        x_11858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 17), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1854, 17), tuple_11857, x_11858)
        # Adding element type (line 1854)
        # Getting the type of 'bottom' (line 1854)
        bottom_11859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 20), 'bottom', False)
        # Getting the type of 'self' (line 1854)
        self_11860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 29), 'self', False)
        # Obtaining the member 'labelpad' of a type (line 1854)
        labelpad_11861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 29), self_11860, 'labelpad')
        # Getting the type of 'self' (line 1854)
        self_11862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1854, 45), 'self', False)
        # Obtaining the member 'figure' of a type (line 1854)
        figure_11863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 45), self_11862, 'figure')
        # Obtaining the member 'dpi' of a type (line 1854)
        dpi_11864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1854, 45), figure_11863, 'dpi')
        # Applying the binary operator '*' (line 1854)
        result_mul_11865 = python_operator(stypy.reporting.localization.Localization(__file__, 1854, 29), '*', labelpad_11861, dpi_11864)
        
        float_11866 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1854, 63), 'float')
        # Applying the binary operator 'div' (line 1854)
        result_div_11867 = python_operator(stypy.reporting.localization.Localization(__file__, 1854, 61), 'div', result_mul_11865, float_11866)
        
        # Applying the binary operator '-' (line 1854)
        result_sub_11868 = python_operator(stypy.reporting.localization.Localization(__file__, 1854, 20), '-', bottom_11859, result_div_11867)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1854, 17), tuple_11857, result_sub_11868)
        
        # Processing the call keyword arguments (line 1853)
        kwargs_11869 = {}
        # Getting the type of 'self' (line 1853)
        self_11854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1853, 12), 'self', False)
        # Obtaining the member 'label' of a type (line 1853)
        label_11855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1853, 12), self_11854, 'label')
        # Obtaining the member 'set_position' of a type (line 1853)
        set_position_11856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1853, 12), label_11855, 'set_position')
        # Calling set_position(args, kwargs) (line 1853)
        set_position_call_result_11870 = invoke(stypy.reporting.localization.Localization(__file__, 1853, 12), set_position_11856, *[tuple_11857], **kwargs_11869)
        
        # SSA branch for the else part of an if statement (line 1842)
        module_type_store.open_ssa_branch('else')
        
        
        # SSA begins for try-except statement (line 1858)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 1859):
        
        # Assigning a Subscript to a Name (line 1859):
        
        # Obtaining the type of the subscript
        unicode_11871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1859, 41), 'unicode', u'top')
        # Getting the type of 'self' (line 1859)
        self_11872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1859, 24), 'self')
        # Obtaining the member 'axes' of a type (line 1859)
        axes_11873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1859, 24), self_11872, 'axes')
        # Obtaining the member 'spines' of a type (line 1859)
        spines_11874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1859, 24), axes_11873, 'spines')
        # Obtaining the member '__getitem__' of a type (line 1859)
        getitem___11875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1859, 24), spines_11874, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1859)
        subscript_call_result_11876 = invoke(stypy.reporting.localization.Localization(__file__, 1859, 24), getitem___11875, unicode_11871)
        
        # Assigning a type to the variable 'spine' (line 1859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1859, 16), 'spine', subscript_call_result_11876)
        
        # Assigning a Call to a Name (line 1860):
        
        # Assigning a Call to a Name (line 1860):
        
        # Call to get_extents(...): (line 1860)
        # Processing the call keyword arguments (line 1860)
        kwargs_11889 = {}
        
        # Call to transform_path(...): (line 1860)
        # Processing the call arguments (line 1860)
        
        # Call to get_path(...): (line 1861)
        # Processing the call keyword arguments (line 1861)
        kwargs_11884 = {}
        # Getting the type of 'spine' (line 1861)
        spine_11882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 20), 'spine', False)
        # Obtaining the member 'get_path' of a type (line 1861)
        get_path_11883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1861, 20), spine_11882, 'get_path')
        # Calling get_path(args, kwargs) (line 1861)
        get_path_call_result_11885 = invoke(stypy.reporting.localization.Localization(__file__, 1861, 20), get_path_11883, *[], **kwargs_11884)
        
        # Processing the call keyword arguments (line 1860)
        kwargs_11886 = {}
        
        # Call to get_transform(...): (line 1860)
        # Processing the call keyword arguments (line 1860)
        kwargs_11879 = {}
        # Getting the type of 'spine' (line 1860)
        spine_11877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1860, 28), 'spine', False)
        # Obtaining the member 'get_transform' of a type (line 1860)
        get_transform_11878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1860, 28), spine_11877, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1860)
        get_transform_call_result_11880 = invoke(stypy.reporting.localization.Localization(__file__, 1860, 28), get_transform_11878, *[], **kwargs_11879)
        
        # Obtaining the member 'transform_path' of a type (line 1860)
        transform_path_11881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1860, 28), get_transform_call_result_11880, 'transform_path')
        # Calling transform_path(args, kwargs) (line 1860)
        transform_path_call_result_11887 = invoke(stypy.reporting.localization.Localization(__file__, 1860, 28), transform_path_11881, *[get_path_call_result_11885], **kwargs_11886)
        
        # Obtaining the member 'get_extents' of a type (line 1860)
        get_extents_11888 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1860, 28), transform_path_call_result_11887, 'get_extents')
        # Calling get_extents(args, kwargs) (line 1860)
        get_extents_call_result_11890 = invoke(stypy.reporting.localization.Localization(__file__, 1860, 28), get_extents_11888, *[], **kwargs_11889)
        
        # Assigning a type to the variable 'spinebbox' (line 1860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1860, 16), 'spinebbox', get_extents_call_result_11890)
        # SSA branch for the except part of a try statement (line 1858)
        # SSA branch for the except 'KeyError' branch of a try statement (line 1858)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Attribute to a Name (line 1864):
        
        # Assigning a Attribute to a Name (line 1864):
        # Getting the type of 'self' (line 1864)
        self_11891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1864, 28), 'self')
        # Obtaining the member 'axes' of a type (line 1864)
        axes_11892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1864, 28), self_11891, 'axes')
        # Obtaining the member 'bbox' of a type (line 1864)
        bbox_11893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1864, 28), axes_11892, 'bbox')
        # Assigning a type to the variable 'spinebbox' (line 1864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1864, 16), 'spinebbox', bbox_11893)
        # SSA join for try-except statement (line 1858)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1865):
        
        # Assigning a Call to a Name (line 1865):
        
        # Call to union(...): (line 1865)
        # Processing the call arguments (line 1865)
        # Getting the type of 'bboxes2' (line 1865)
        bboxes2_11897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 42), 'bboxes2', False)
        
        # Obtaining an instance of the builtin type 'list' (line 1865)
        list_11898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1865, 52), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1865)
        # Adding element type (line 1865)
        # Getting the type of 'spinebbox' (line 1865)
        spinebbox_11899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 53), 'spinebbox', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1865, 52), list_11898, spinebbox_11899)
        
        # Applying the binary operator '+' (line 1865)
        result_add_11900 = python_operator(stypy.reporting.localization.Localization(__file__, 1865, 42), '+', bboxes2_11897, list_11898)
        
        # Processing the call keyword arguments (line 1865)
        kwargs_11901 = {}
        # Getting the type of 'mtransforms' (line 1865)
        mtransforms_11894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 19), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 1865)
        Bbox_11895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1865, 19), mtransforms_11894, 'Bbox')
        # Obtaining the member 'union' of a type (line 1865)
        union_11896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1865, 19), Bbox_11895, 'union')
        # Calling union(args, kwargs) (line 1865)
        union_call_result_11902 = invoke(stypy.reporting.localization.Localization(__file__, 1865, 19), union_11896, *[result_add_11900], **kwargs_11901)
        
        # Assigning a type to the variable 'bbox' (line 1865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 12), 'bbox', union_call_result_11902)
        
        # Assigning a Attribute to a Name (line 1866):
        
        # Assigning a Attribute to a Name (line 1866):
        # Getting the type of 'bbox' (line 1866)
        bbox_11903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 18), 'bbox')
        # Obtaining the member 'y1' of a type (line 1866)
        y1_11904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 18), bbox_11903, 'y1')
        # Assigning a type to the variable 'top' (line 1866)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1866, 12), 'top', y1_11904)
        
        # Call to set_position(...): (line 1868)
        # Processing the call arguments (line 1868)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1869)
        tuple_11908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1869)
        # Adding element type (line 1869)
        # Getting the type of 'x' (line 1869)
        x_11909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 17), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1869, 17), tuple_11908, x_11909)
        # Adding element type (line 1869)
        # Getting the type of 'top' (line 1869)
        top_11910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 20), 'top', False)
        # Getting the type of 'self' (line 1869)
        self_11911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 26), 'self', False)
        # Obtaining the member 'labelpad' of a type (line 1869)
        labelpad_11912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 26), self_11911, 'labelpad')
        # Getting the type of 'self' (line 1869)
        self_11913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 42), 'self', False)
        # Obtaining the member 'figure' of a type (line 1869)
        figure_11914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 42), self_11913, 'figure')
        # Obtaining the member 'dpi' of a type (line 1869)
        dpi_11915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 42), figure_11914, 'dpi')
        # Applying the binary operator '*' (line 1869)
        result_mul_11916 = python_operator(stypy.reporting.localization.Localization(__file__, 1869, 26), '*', labelpad_11912, dpi_11915)
        
        float_11917 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1869, 60), 'float')
        # Applying the binary operator 'div' (line 1869)
        result_div_11918 = python_operator(stypy.reporting.localization.Localization(__file__, 1869, 58), 'div', result_mul_11916, float_11917)
        
        # Applying the binary operator '+' (line 1869)
        result_add_11919 = python_operator(stypy.reporting.localization.Localization(__file__, 1869, 20), '+', top_11910, result_div_11918)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1869, 17), tuple_11908, result_add_11919)
        
        # Processing the call keyword arguments (line 1868)
        kwargs_11920 = {}
        # Getting the type of 'self' (line 1868)
        self_11905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 12), 'self', False)
        # Obtaining the member 'label' of a type (line 1868)
        label_11906 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 12), self_11905, 'label')
        # Obtaining the member 'set_position' of a type (line 1868)
        set_position_11907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 12), label_11906, 'set_position')
        # Calling set_position(args, kwargs) (line 1868)
        set_position_call_result_11921 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 12), set_position_11907, *[tuple_11908], **kwargs_11920)
        
        # SSA join for if statement (line 1842)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_update_label_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_label_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1834)
        stypy_return_type_11922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1834, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11922)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_label_position'
        return stypy_return_type_11922


    @norecursion
    def _update_offset_text_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_offset_text_position'
        module_type_store = module_type_store.open_function_context('_update_offset_text_position', 1872, 4, False)
        # Assigning a type to the variable 'self' (line 1873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1873, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis._update_offset_text_position.__dict__.__setitem__('stypy_localization', localization)
        XAxis._update_offset_text_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis._update_offset_text_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis._update_offset_text_position.__dict__.__setitem__('stypy_function_name', 'XAxis._update_offset_text_position')
        XAxis._update_offset_text_position.__dict__.__setitem__('stypy_param_names_list', ['bboxes', 'bboxes2'])
        XAxis._update_offset_text_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis._update_offset_text_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis._update_offset_text_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis._update_offset_text_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis._update_offset_text_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis._update_offset_text_position.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis._update_offset_text_position', ['bboxes', 'bboxes2'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_offset_text_position', localization, ['bboxes', 'bboxes2'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_offset_text_position(...)' code ##################

        unicode_11923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, (-1)), 'unicode', u'\n        Update the offset_text position based on the sequence of bounding\n        boxes of all the ticklabels\n        ')
        
        # Assigning a Call to a Tuple (line 1877):
        
        # Assigning a Call to a Name:
        
        # Call to get_position(...): (line 1877)
        # Processing the call keyword arguments (line 1877)
        kwargs_11927 = {}
        # Getting the type of 'self' (line 1877)
        self_11924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 15), 'self', False)
        # Obtaining the member 'offsetText' of a type (line 1877)
        offsetText_11925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 15), self_11924, 'offsetText')
        # Obtaining the member 'get_position' of a type (line 1877)
        get_position_11926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 15), offsetText_11925, 'get_position')
        # Calling get_position(args, kwargs) (line 1877)
        get_position_call_result_11928 = invoke(stypy.reporting.localization.Localization(__file__, 1877, 15), get_position_11926, *[], **kwargs_11927)
        
        # Assigning a type to the variable 'call_assignment_7008' (line 1877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'call_assignment_7008', get_position_call_result_11928)
        
        # Assigning a Call to a Name (line 1877):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 8), 'int')
        # Processing the call keyword arguments
        kwargs_11932 = {}
        # Getting the type of 'call_assignment_7008' (line 1877)
        call_assignment_7008_11929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'call_assignment_7008', False)
        # Obtaining the member '__getitem__' of a type (line 1877)
        getitem___11930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 8), call_assignment_7008_11929, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11933 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11930, *[int_11931], **kwargs_11932)
        
        # Assigning a type to the variable 'call_assignment_7009' (line 1877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'call_assignment_7009', getitem___call_result_11933)
        
        # Assigning a Name to a Name (line 1877):
        # Getting the type of 'call_assignment_7009' (line 1877)
        call_assignment_7009_11934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'call_assignment_7009')
        # Assigning a type to the variable 'x' (line 1877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'x', call_assignment_7009_11934)
        
        # Assigning a Call to a Name (line 1877):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 8), 'int')
        # Processing the call keyword arguments
        kwargs_11938 = {}
        # Getting the type of 'call_assignment_7008' (line 1877)
        call_assignment_7008_11935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'call_assignment_7008', False)
        # Obtaining the member '__getitem__' of a type (line 1877)
        getitem___11936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1877, 8), call_assignment_7008_11935, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11939 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11936, *[int_11937], **kwargs_11938)
        
        # Assigning a type to the variable 'call_assignment_7010' (line 1877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'call_assignment_7010', getitem___call_result_11939)
        
        # Assigning a Name to a Name (line 1877):
        # Getting the type of 'call_assignment_7010' (line 1877)
        call_assignment_7010_11940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1877, 8), 'call_assignment_7010')
        # Assigning a type to the variable 'y' (line 1877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 11), 'y', call_assignment_7010_11940)
        
        
        
        # Call to len(...): (line 1878)
        # Processing the call arguments (line 1878)
        # Getting the type of 'bboxes' (line 1878)
        bboxes_11942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 19), 'bboxes', False)
        # Processing the call keyword arguments (line 1878)
        kwargs_11943 = {}
        # Getting the type of 'len' (line 1878)
        len_11941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1878, 15), 'len', False)
        # Calling len(args, kwargs) (line 1878)
        len_call_result_11944 = invoke(stypy.reporting.localization.Localization(__file__, 1878, 15), len_11941, *[bboxes_11942], **kwargs_11943)
        
        # Applying the 'not' unary operator (line 1878)
        result_not__11945 = python_operator(stypy.reporting.localization.Localization(__file__, 1878, 11), 'not', len_call_result_11944)
        
        # Testing the type of an if condition (line 1878)
        if_condition_11946 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1878, 8), result_not__11945)
        # Assigning a type to the variable 'if_condition_11946' (line 1878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1878, 8), 'if_condition_11946', if_condition_11946)
        # SSA begins for if statement (line 1878)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1879):
        
        # Assigning a Attribute to a Name (line 1879):
        # Getting the type of 'self' (line 1879)
        self_11947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1879, 21), 'self')
        # Obtaining the member 'axes' of a type (line 1879)
        axes_11948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 21), self_11947, 'axes')
        # Obtaining the member 'bbox' of a type (line 1879)
        bbox_11949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 21), axes_11948, 'bbox')
        # Obtaining the member 'ymin' of a type (line 1879)
        ymin_11950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1879, 21), bbox_11949, 'ymin')
        # Assigning a type to the variable 'bottom' (line 1879)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1879, 12), 'bottom', ymin_11950)
        # SSA branch for the else part of an if statement (line 1878)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1881):
        
        # Assigning a Call to a Name (line 1881):
        
        # Call to union(...): (line 1881)
        # Processing the call arguments (line 1881)
        # Getting the type of 'bboxes' (line 1881)
        bboxes_11954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 42), 'bboxes', False)
        # Processing the call keyword arguments (line 1881)
        kwargs_11955 = {}
        # Getting the type of 'mtransforms' (line 1881)
        mtransforms_11951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1881, 19), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 1881)
        Bbox_11952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1881, 19), mtransforms_11951, 'Bbox')
        # Obtaining the member 'union' of a type (line 1881)
        union_11953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1881, 19), Bbox_11952, 'union')
        # Calling union(args, kwargs) (line 1881)
        union_call_result_11956 = invoke(stypy.reporting.localization.Localization(__file__, 1881, 19), union_11953, *[bboxes_11954], **kwargs_11955)
        
        # Assigning a type to the variable 'bbox' (line 1881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1881, 12), 'bbox', union_call_result_11956)
        
        # Assigning a Attribute to a Name (line 1882):
        
        # Assigning a Attribute to a Name (line 1882):
        # Getting the type of 'bbox' (line 1882)
        bbox_11957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1882, 21), 'bbox')
        # Obtaining the member 'y0' of a type (line 1882)
        y0_11958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1882, 21), bbox_11957, 'y0')
        # Assigning a type to the variable 'bottom' (line 1882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1882, 12), 'bottom', y0_11958)
        # SSA join for if statement (line 1878)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_position(...): (line 1883)
        # Processing the call arguments (line 1883)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1884)
        tuple_11962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1884, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1884)
        # Adding element type (line 1884)
        # Getting the type of 'x' (line 1884)
        x_11963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 13), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1884, 13), tuple_11962, x_11963)
        # Adding element type (line 1884)
        # Getting the type of 'bottom' (line 1884)
        bottom_11964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 16), 'bottom', False)
        # Getting the type of 'self' (line 1884)
        self_11965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 25), 'self', False)
        # Obtaining the member 'OFFSETTEXTPAD' of a type (line 1884)
        OFFSETTEXTPAD_11966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1884, 25), self_11965, 'OFFSETTEXTPAD')
        # Getting the type of 'self' (line 1884)
        self_11967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1884, 46), 'self', False)
        # Obtaining the member 'figure' of a type (line 1884)
        figure_11968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1884, 46), self_11967, 'figure')
        # Obtaining the member 'dpi' of a type (line 1884)
        dpi_11969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1884, 46), figure_11968, 'dpi')
        # Applying the binary operator '*' (line 1884)
        result_mul_11970 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 25), '*', OFFSETTEXTPAD_11966, dpi_11969)
        
        float_11971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1884, 64), 'float')
        # Applying the binary operator 'div' (line 1884)
        result_div_11972 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 62), 'div', result_mul_11970, float_11971)
        
        # Applying the binary operator '-' (line 1884)
        result_sub_11973 = python_operator(stypy.reporting.localization.Localization(__file__, 1884, 16), '-', bottom_11964, result_div_11972)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1884, 13), tuple_11962, result_sub_11973)
        
        # Processing the call keyword arguments (line 1883)
        kwargs_11974 = {}
        # Getting the type of 'self' (line 1883)
        self_11959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1883, 8), 'self', False)
        # Obtaining the member 'offsetText' of a type (line 1883)
        offsetText_11960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1883, 8), self_11959, 'offsetText')
        # Obtaining the member 'set_position' of a type (line 1883)
        set_position_11961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1883, 8), offsetText_11960, 'set_position')
        # Calling set_position(args, kwargs) (line 1883)
        set_position_call_result_11975 = invoke(stypy.reporting.localization.Localization(__file__, 1883, 8), set_position_11961, *[tuple_11962], **kwargs_11974)
        
        
        # ################# End of '_update_offset_text_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_offset_text_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1872)
        stypy_return_type_11976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_11976)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_offset_text_position'
        return stypy_return_type_11976


    @norecursion
    def get_text_heights(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_text_heights'
        module_type_store = module_type_store.open_function_context('get_text_heights', 1887, 4, False)
        # Assigning a type to the variable 'self' (line 1888)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1888, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.get_text_heights.__dict__.__setitem__('stypy_localization', localization)
        XAxis.get_text_heights.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.get_text_heights.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.get_text_heights.__dict__.__setitem__('stypy_function_name', 'XAxis.get_text_heights')
        XAxis.get_text_heights.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        XAxis.get_text_heights.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.get_text_heights.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.get_text_heights.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.get_text_heights.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.get_text_heights.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.get_text_heights.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.get_text_heights', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_text_heights', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_text_heights(...)' code ##################

        unicode_11977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1891, (-1)), 'unicode', u'\n        Returns the amount of space one should reserve for text\n        above and below the axes.  Returns a tuple (above, below)\n        ')
        
        # Assigning a Call to a Tuple (line 1892):
        
        # Assigning a Call to a Name:
        
        # Call to get_ticklabel_extents(...): (line 1892)
        # Processing the call arguments (line 1892)
        # Getting the type of 'renderer' (line 1892)
        renderer_11980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 49), 'renderer', False)
        # Processing the call keyword arguments (line 1892)
        kwargs_11981 = {}
        # Getting the type of 'self' (line 1892)
        self_11978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 22), 'self', False)
        # Obtaining the member 'get_ticklabel_extents' of a type (line 1892)
        get_ticklabel_extents_11979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 22), self_11978, 'get_ticklabel_extents')
        # Calling get_ticklabel_extents(args, kwargs) (line 1892)
        get_ticklabel_extents_call_result_11982 = invoke(stypy.reporting.localization.Localization(__file__, 1892, 22), get_ticklabel_extents_11979, *[renderer_11980], **kwargs_11981)
        
        # Assigning a type to the variable 'call_assignment_7011' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'call_assignment_7011', get_ticklabel_extents_call_result_11982)
        
        # Assigning a Call to a Name (line 1892):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 8), 'int')
        # Processing the call keyword arguments
        kwargs_11986 = {}
        # Getting the type of 'call_assignment_7011' (line 1892)
        call_assignment_7011_11983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'call_assignment_7011', False)
        # Obtaining the member '__getitem__' of a type (line 1892)
        getitem___11984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 8), call_assignment_7011_11983, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11987 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11984, *[int_11985], **kwargs_11986)
        
        # Assigning a type to the variable 'call_assignment_7012' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'call_assignment_7012', getitem___call_result_11987)
        
        # Assigning a Name to a Name (line 1892):
        # Getting the type of 'call_assignment_7012' (line 1892)
        call_assignment_7012_11988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'call_assignment_7012')
        # Assigning a type to the variable 'bbox' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'bbox', call_assignment_7012_11988)
        
        # Assigning a Call to a Name (line 1892):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_11991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1892, 8), 'int')
        # Processing the call keyword arguments
        kwargs_11992 = {}
        # Getting the type of 'call_assignment_7011' (line 1892)
        call_assignment_7011_11989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'call_assignment_7011', False)
        # Obtaining the member '__getitem__' of a type (line 1892)
        getitem___11990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1892, 8), call_assignment_7011_11989, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_11993 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___11990, *[int_11991], **kwargs_11992)
        
        # Assigning a type to the variable 'call_assignment_7013' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'call_assignment_7013', getitem___call_result_11993)
        
        # Assigning a Name to a Name (line 1892):
        # Getting the type of 'call_assignment_7013' (line 1892)
        call_assignment_7013_11994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1892, 8), 'call_assignment_7013')
        # Assigning a type to the variable 'bbox2' (line 1892)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1892, 14), 'bbox2', call_assignment_7013_11994)
        
        # Assigning a Call to a Name (line 1894):
        
        # Assigning a Call to a Name (line 1894):
        
        # Call to get_pad_pixels(...): (line 1894)
        # Processing the call keyword arguments (line 1894)
        kwargs_12001 = {}
        
        # Obtaining the type of the subscript
        int_11995 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1894, 36), 'int')
        # Getting the type of 'self' (line 1894)
        self_11996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1894, 20), 'self', False)
        # Obtaining the member 'majorTicks' of a type (line 1894)
        majorTicks_11997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1894, 20), self_11996, 'majorTicks')
        # Obtaining the member '__getitem__' of a type (line 1894)
        getitem___11998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1894, 20), majorTicks_11997, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1894)
        subscript_call_result_11999 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 20), getitem___11998, int_11995)
        
        # Obtaining the member 'get_pad_pixels' of a type (line 1894)
        get_pad_pixels_12000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1894, 20), subscript_call_result_11999, 'get_pad_pixels')
        # Calling get_pad_pixels(args, kwargs) (line 1894)
        get_pad_pixels_call_result_12002 = invoke(stypy.reporting.localization.Localization(__file__, 1894, 20), get_pad_pixels_12000, *[], **kwargs_12001)
        
        # Assigning a type to the variable 'padPixels' (line 1894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1894, 8), 'padPixels', get_pad_pixels_call_result_12002)
        
        # Assigning a Num to a Name (line 1896):
        
        # Assigning a Num to a Name (line 1896):
        float_12003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1896, 16), 'float')
        # Assigning a type to the variable 'above' (line 1896)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1896, 8), 'above', float_12003)
        
        # Getting the type of 'bbox2' (line 1897)
        bbox2_12004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1897, 11), 'bbox2')
        # Obtaining the member 'height' of a type (line 1897)
        height_12005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1897, 11), bbox2_12004, 'height')
        # Testing the type of an if condition (line 1897)
        if_condition_12006 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1897, 8), height_12005)
        # Assigning a type to the variable 'if_condition_12006' (line 1897)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1897, 8), 'if_condition_12006', if_condition_12006)
        # SSA begins for if statement (line 1897)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'above' (line 1898)
        above_12007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 12), 'above')
        # Getting the type of 'bbox2' (line 1898)
        bbox2_12008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 21), 'bbox2')
        # Obtaining the member 'height' of a type (line 1898)
        height_12009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1898, 21), bbox2_12008, 'height')
        # Getting the type of 'padPixels' (line 1898)
        padPixels_12010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1898, 36), 'padPixels')
        # Applying the binary operator '+' (line 1898)
        result_add_12011 = python_operator(stypy.reporting.localization.Localization(__file__, 1898, 21), '+', height_12009, padPixels_12010)
        
        # Applying the binary operator '+=' (line 1898)
        result_iadd_12012 = python_operator(stypy.reporting.localization.Localization(__file__, 1898, 12), '+=', above_12007, result_add_12011)
        # Assigning a type to the variable 'above' (line 1898)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1898, 12), 'above', result_iadd_12012)
        
        # SSA join for if statement (line 1897)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 1899):
        
        # Assigning a Num to a Name (line 1899):
        float_12013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1899, 16), 'float')
        # Assigning a type to the variable 'below' (line 1899)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1899, 8), 'below', float_12013)
        
        # Getting the type of 'bbox' (line 1900)
        bbox_12014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1900, 11), 'bbox')
        # Obtaining the member 'height' of a type (line 1900)
        height_12015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1900, 11), bbox_12014, 'height')
        # Testing the type of an if condition (line 1900)
        if_condition_12016 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1900, 8), height_12015)
        # Assigning a type to the variable 'if_condition_12016' (line 1900)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1900, 8), 'if_condition_12016', if_condition_12016)
        # SSA begins for if statement (line 1900)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'below' (line 1901)
        below_12017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 12), 'below')
        # Getting the type of 'bbox' (line 1901)
        bbox_12018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 21), 'bbox')
        # Obtaining the member 'height' of a type (line 1901)
        height_12019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1901, 21), bbox_12018, 'height')
        # Getting the type of 'padPixels' (line 1901)
        padPixels_12020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1901, 35), 'padPixels')
        # Applying the binary operator '+' (line 1901)
        result_add_12021 = python_operator(stypy.reporting.localization.Localization(__file__, 1901, 21), '+', height_12019, padPixels_12020)
        
        # Applying the binary operator '+=' (line 1901)
        result_iadd_12022 = python_operator(stypy.reporting.localization.Localization(__file__, 1901, 12), '+=', below_12017, result_add_12021)
        # Assigning a type to the variable 'below' (line 1901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1901, 12), 'below', result_iadd_12022)
        
        # SSA join for if statement (line 1900)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to get_label_position(...): (line 1903)
        # Processing the call keyword arguments (line 1903)
        kwargs_12025 = {}
        # Getting the type of 'self' (line 1903)
        self_12023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1903, 11), 'self', False)
        # Obtaining the member 'get_label_position' of a type (line 1903)
        get_label_position_12024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1903, 11), self_12023, 'get_label_position')
        # Calling get_label_position(args, kwargs) (line 1903)
        get_label_position_call_result_12026 = invoke(stypy.reporting.localization.Localization(__file__, 1903, 11), get_label_position_12024, *[], **kwargs_12025)
        
        unicode_12027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1903, 40), 'unicode', u'top')
        # Applying the binary operator '==' (line 1903)
        result_eq_12028 = python_operator(stypy.reporting.localization.Localization(__file__, 1903, 11), '==', get_label_position_call_result_12026, unicode_12027)
        
        # Testing the type of an if condition (line 1903)
        if_condition_12029 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1903, 8), result_eq_12028)
        # Assigning a type to the variable 'if_condition_12029' (line 1903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1903, 8), 'if_condition_12029', if_condition_12029)
        # SSA begins for if statement (line 1903)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'above' (line 1904)
        above_12030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 12), 'above')
        
        # Call to get_window_extent(...): (line 1904)
        # Processing the call arguments (line 1904)
        # Getting the type of 'renderer' (line 1904)
        renderer_12034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 50), 'renderer', False)
        # Processing the call keyword arguments (line 1904)
        kwargs_12035 = {}
        # Getting the type of 'self' (line 1904)
        self_12031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 21), 'self', False)
        # Obtaining the member 'label' of a type (line 1904)
        label_12032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1904, 21), self_12031, 'label')
        # Obtaining the member 'get_window_extent' of a type (line 1904)
        get_window_extent_12033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1904, 21), label_12032, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1904)
        get_window_extent_call_result_12036 = invoke(stypy.reporting.localization.Localization(__file__, 1904, 21), get_window_extent_12033, *[renderer_12034], **kwargs_12035)
        
        # Obtaining the member 'height' of a type (line 1904)
        height_12037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1904, 21), get_window_extent_call_result_12036, 'height')
        # Getting the type of 'padPixels' (line 1904)
        padPixels_12038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1904, 69), 'padPixels')
        # Applying the binary operator '+' (line 1904)
        result_add_12039 = python_operator(stypy.reporting.localization.Localization(__file__, 1904, 21), '+', height_12037, padPixels_12038)
        
        # Applying the binary operator '+=' (line 1904)
        result_iadd_12040 = python_operator(stypy.reporting.localization.Localization(__file__, 1904, 12), '+=', above_12030, result_add_12039)
        # Assigning a type to the variable 'above' (line 1904)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1904, 12), 'above', result_iadd_12040)
        
        # SSA branch for the else part of an if statement (line 1903)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'below' (line 1906)
        below_12041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 12), 'below')
        
        # Call to get_window_extent(...): (line 1906)
        # Processing the call arguments (line 1906)
        # Getting the type of 'renderer' (line 1906)
        renderer_12045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 50), 'renderer', False)
        # Processing the call keyword arguments (line 1906)
        kwargs_12046 = {}
        # Getting the type of 'self' (line 1906)
        self_12042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 21), 'self', False)
        # Obtaining the member 'label' of a type (line 1906)
        label_12043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1906, 21), self_12042, 'label')
        # Obtaining the member 'get_window_extent' of a type (line 1906)
        get_window_extent_12044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1906, 21), label_12043, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1906)
        get_window_extent_call_result_12047 = invoke(stypy.reporting.localization.Localization(__file__, 1906, 21), get_window_extent_12044, *[renderer_12045], **kwargs_12046)
        
        # Obtaining the member 'height' of a type (line 1906)
        height_12048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1906, 21), get_window_extent_call_result_12047, 'height')
        # Getting the type of 'padPixels' (line 1906)
        padPixels_12049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1906, 69), 'padPixels')
        # Applying the binary operator '+' (line 1906)
        result_add_12050 = python_operator(stypy.reporting.localization.Localization(__file__, 1906, 21), '+', height_12048, padPixels_12049)
        
        # Applying the binary operator '+=' (line 1906)
        result_iadd_12051 = python_operator(stypy.reporting.localization.Localization(__file__, 1906, 12), '+=', below_12041, result_add_12050)
        # Assigning a type to the variable 'below' (line 1906)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1906, 12), 'below', result_iadd_12051)
        
        # SSA join for if statement (line 1903)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1907)
        tuple_12052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1907, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1907)
        # Adding element type (line 1907)
        # Getting the type of 'above' (line 1907)
        above_12053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 15), 'above')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 15), tuple_12052, above_12053)
        # Adding element type (line 1907)
        # Getting the type of 'below' (line 1907)
        below_12054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1907, 22), 'below')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1907, 15), tuple_12052, below_12054)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1907, 8), 'stypy_return_type', tuple_12052)
        
        # ################# End of 'get_text_heights(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_text_heights' in the type store
        # Getting the type of 'stypy_return_type' (line 1887)
        stypy_return_type_12055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1887, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12055)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_text_heights'
        return stypy_return_type_12055


    @norecursion
    def set_ticks_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_ticks_position'
        module_type_store = module_type_store.open_function_context('set_ticks_position', 1909, 4, False)
        # Assigning a type to the variable 'self' (line 1910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1910, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.set_ticks_position.__dict__.__setitem__('stypy_localization', localization)
        XAxis.set_ticks_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.set_ticks_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.set_ticks_position.__dict__.__setitem__('stypy_function_name', 'XAxis.set_ticks_position')
        XAxis.set_ticks_position.__dict__.__setitem__('stypy_param_names_list', ['position'])
        XAxis.set_ticks_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.set_ticks_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.set_ticks_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.set_ticks_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.set_ticks_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.set_ticks_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.set_ticks_position', ['position'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ticks_position', localization, ['position'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ticks_position(...)' code ##################

        unicode_12056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, (-1)), 'unicode', u"\n        Set the ticks position (top, bottom, both, default or none)\n        both sets the ticks to appear on both positions, but does not\n        change the tick labels.  'default' resets the tick positions to\n        the default: ticks on both positions, labels at bottom.  'none'\n        can be used if you don't want any ticks. 'none' and 'both'\n        affect only the ticks, not the labels.\n\n        ACCEPTS: [ 'top' | 'bottom' | 'both' | 'default' | 'none' ]\n        ")
        
        
        # Getting the type of 'position' (line 1920)
        position_12057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1920, 11), 'position')
        unicode_12058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1920, 23), 'unicode', u'top')
        # Applying the binary operator '==' (line 1920)
        result_eq_12059 = python_operator(stypy.reporting.localization.Localization(__file__, 1920, 11), '==', position_12057, unicode_12058)
        
        # Testing the type of an if condition (line 1920)
        if_condition_12060 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1920, 8), result_eq_12059)
        # Assigning a type to the variable 'if_condition_12060' (line 1920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1920, 8), 'if_condition_12060', if_condition_12060)
        # SSA begins for if statement (line 1920)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_tick_params(...): (line 1921)
        # Processing the call keyword arguments (line 1921)
        unicode_12063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1921, 39), 'unicode', u'both')
        keyword_12064 = unicode_12063
        # Getting the type of 'True' (line 1921)
        True_12065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 51), 'True', False)
        keyword_12066 = True_12065
        # Getting the type of 'True' (line 1921)
        True_12067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 66), 'True', False)
        keyword_12068 = True_12067
        # Getting the type of 'False' (line 1922)
        False_12069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 40), 'False', False)
        keyword_12070 = False_12069
        # Getting the type of 'False' (line 1922)
        False_12071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 59), 'False', False)
        keyword_12072 = False_12071
        kwargs_12073 = {'top': keyword_12066, 'labeltop': keyword_12068, 'labelbottom': keyword_12072, 'which': keyword_12064, 'bottom': keyword_12070}
        # Getting the type of 'self' (line 1921)
        self_12061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 12), 'self', False)
        # Obtaining the member 'set_tick_params' of a type (line 1921)
        set_tick_params_12062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1921, 12), self_12061, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 1921)
        set_tick_params_call_result_12074 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 12), set_tick_params_12062, *[], **kwargs_12073)
        
        # SSA branch for the else part of an if statement (line 1920)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'position' (line 1923)
        position_12075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 13), 'position')
        unicode_12076 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1923, 25), 'unicode', u'bottom')
        # Applying the binary operator '==' (line 1923)
        result_eq_12077 = python_operator(stypy.reporting.localization.Localization(__file__, 1923, 13), '==', position_12075, unicode_12076)
        
        # Testing the type of an if condition (line 1923)
        if_condition_12078 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1923, 13), result_eq_12077)
        # Assigning a type to the variable 'if_condition_12078' (line 1923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1923, 13), 'if_condition_12078', if_condition_12078)
        # SSA begins for if statement (line 1923)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_tick_params(...): (line 1924)
        # Processing the call keyword arguments (line 1924)
        unicode_12081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1924, 39), 'unicode', u'both')
        keyword_12082 = unicode_12081
        # Getting the type of 'False' (line 1924)
        False_12083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 51), 'False', False)
        keyword_12084 = False_12083
        # Getting the type of 'False' (line 1924)
        False_12085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 67), 'False', False)
        keyword_12086 = False_12085
        # Getting the type of 'True' (line 1925)
        True_12087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 40), 'True', False)
        keyword_12088 = True_12087
        # Getting the type of 'True' (line 1925)
        True_12089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 58), 'True', False)
        keyword_12090 = True_12089
        kwargs_12091 = {'top': keyword_12084, 'labeltop': keyword_12086, 'labelbottom': keyword_12090, 'which': keyword_12082, 'bottom': keyword_12088}
        # Getting the type of 'self' (line 1924)
        self_12079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 12), 'self', False)
        # Obtaining the member 'set_tick_params' of a type (line 1924)
        set_tick_params_12080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1924, 12), self_12079, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 1924)
        set_tick_params_call_result_12092 = invoke(stypy.reporting.localization.Localization(__file__, 1924, 12), set_tick_params_12080, *[], **kwargs_12091)
        
        # SSA branch for the else part of an if statement (line 1923)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'position' (line 1926)
        position_12093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 13), 'position')
        unicode_12094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1926, 25), 'unicode', u'both')
        # Applying the binary operator '==' (line 1926)
        result_eq_12095 = python_operator(stypy.reporting.localization.Localization(__file__, 1926, 13), '==', position_12093, unicode_12094)
        
        # Testing the type of an if condition (line 1926)
        if_condition_12096 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1926, 13), result_eq_12095)
        # Assigning a type to the variable 'if_condition_12096' (line 1926)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1926, 13), 'if_condition_12096', if_condition_12096)
        # SSA begins for if statement (line 1926)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_tick_params(...): (line 1927)
        # Processing the call keyword arguments (line 1927)
        unicode_12099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1927, 39), 'unicode', u'both')
        keyword_12100 = unicode_12099
        # Getting the type of 'True' (line 1927)
        True_12101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 51), 'True', False)
        keyword_12102 = True_12101
        # Getting the type of 'True' (line 1928)
        True_12103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 40), 'True', False)
        keyword_12104 = True_12103
        kwargs_12105 = {'top': keyword_12102, 'which': keyword_12100, 'bottom': keyword_12104}
        # Getting the type of 'self' (line 1927)
        self_12097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1927, 12), 'self', False)
        # Obtaining the member 'set_tick_params' of a type (line 1927)
        set_tick_params_12098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1927, 12), self_12097, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 1927)
        set_tick_params_call_result_12106 = invoke(stypy.reporting.localization.Localization(__file__, 1927, 12), set_tick_params_12098, *[], **kwargs_12105)
        
        # SSA branch for the else part of an if statement (line 1926)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'position' (line 1929)
        position_12107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1929, 13), 'position')
        unicode_12108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1929, 25), 'unicode', u'none')
        # Applying the binary operator '==' (line 1929)
        result_eq_12109 = python_operator(stypy.reporting.localization.Localization(__file__, 1929, 13), '==', position_12107, unicode_12108)
        
        # Testing the type of an if condition (line 1929)
        if_condition_12110 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1929, 13), result_eq_12109)
        # Assigning a type to the variable 'if_condition_12110' (line 1929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1929, 13), 'if_condition_12110', if_condition_12110)
        # SSA begins for if statement (line 1929)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_tick_params(...): (line 1930)
        # Processing the call keyword arguments (line 1930)
        unicode_12113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1930, 39), 'unicode', u'both')
        keyword_12114 = unicode_12113
        # Getting the type of 'False' (line 1930)
        False_12115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 51), 'False', False)
        keyword_12116 = False_12115
        # Getting the type of 'False' (line 1931)
        False_12117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1931, 40), 'False', False)
        keyword_12118 = False_12117
        kwargs_12119 = {'top': keyword_12116, 'which': keyword_12114, 'bottom': keyword_12118}
        # Getting the type of 'self' (line 1930)
        self_12111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1930, 12), 'self', False)
        # Obtaining the member 'set_tick_params' of a type (line 1930)
        set_tick_params_12112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1930, 12), self_12111, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 1930)
        set_tick_params_call_result_12120 = invoke(stypy.reporting.localization.Localization(__file__, 1930, 12), set_tick_params_12112, *[], **kwargs_12119)
        
        # SSA branch for the else part of an if statement (line 1929)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'position' (line 1932)
        position_12121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1932, 13), 'position')
        unicode_12122 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1932, 25), 'unicode', u'default')
        # Applying the binary operator '==' (line 1932)
        result_eq_12123 = python_operator(stypy.reporting.localization.Localization(__file__, 1932, 13), '==', position_12121, unicode_12122)
        
        # Testing the type of an if condition (line 1932)
        if_condition_12124 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1932, 13), result_eq_12123)
        # Assigning a type to the variable 'if_condition_12124' (line 1932)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1932, 13), 'if_condition_12124', if_condition_12124)
        # SSA begins for if statement (line 1932)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_tick_params(...): (line 1933)
        # Processing the call keyword arguments (line 1933)
        unicode_12127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1933, 39), 'unicode', u'both')
        keyword_12128 = unicode_12127
        # Getting the type of 'True' (line 1933)
        True_12129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 51), 'True', False)
        keyword_12130 = True_12129
        # Getting the type of 'False' (line 1933)
        False_12131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 66), 'False', False)
        keyword_12132 = False_12131
        # Getting the type of 'True' (line 1934)
        True_12133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 40), 'True', False)
        keyword_12134 = True_12133
        # Getting the type of 'True' (line 1934)
        True_12135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1934, 58), 'True', False)
        keyword_12136 = True_12135
        kwargs_12137 = {'top': keyword_12130, 'labeltop': keyword_12132, 'labelbottom': keyword_12136, 'which': keyword_12128, 'bottom': keyword_12134}
        # Getting the type of 'self' (line 1933)
        self_12125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1933, 12), 'self', False)
        # Obtaining the member 'set_tick_params' of a type (line 1933)
        set_tick_params_12126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1933, 12), self_12125, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 1933)
        set_tick_params_call_result_12138 = invoke(stypy.reporting.localization.Localization(__file__, 1933, 12), set_tick_params_12126, *[], **kwargs_12137)
        
        # SSA branch for the else part of an if statement (line 1932)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1936)
        # Processing the call arguments (line 1936)
        unicode_12140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1936, 29), 'unicode', u'invalid position: %s')
        # Getting the type of 'position' (line 1936)
        position_12141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 54), 'position', False)
        # Applying the binary operator '%' (line 1936)
        result_mod_12142 = python_operator(stypy.reporting.localization.Localization(__file__, 1936, 29), '%', unicode_12140, position_12141)
        
        # Processing the call keyword arguments (line 1936)
        kwargs_12143 = {}
        # Getting the type of 'ValueError' (line 1936)
        ValueError_12139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1936, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1936)
        ValueError_call_result_12144 = invoke(stypy.reporting.localization.Localization(__file__, 1936, 18), ValueError_12139, *[result_mod_12142], **kwargs_12143)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1936, 12), ValueError_call_result_12144, 'raise parameter', BaseException)
        # SSA join for if statement (line 1932)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1929)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1926)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1923)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1920)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1937):
        
        # Assigning a Name to a Attribute (line 1937):
        # Getting the type of 'True' (line 1937)
        True_12145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 21), 'True')
        # Getting the type of 'self' (line 1937)
        self_12146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1937, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1937)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1937, 8), self_12146, 'stale', True_12145)
        
        # ################# End of 'set_ticks_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ticks_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1909)
        stypy_return_type_12147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1909, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12147)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ticks_position'
        return stypy_return_type_12147


    @norecursion
    def tick_top(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_top'
        module_type_store = module_type_store.open_function_context('tick_top', 1939, 4, False)
        # Assigning a type to the variable 'self' (line 1940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1940, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.tick_top.__dict__.__setitem__('stypy_localization', localization)
        XAxis.tick_top.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.tick_top.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.tick_top.__dict__.__setitem__('stypy_function_name', 'XAxis.tick_top')
        XAxis.tick_top.__dict__.__setitem__('stypy_param_names_list', [])
        XAxis.tick_top.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.tick_top.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.tick_top.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.tick_top.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.tick_top.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.tick_top.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.tick_top', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_top', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_top(...)' code ##################

        unicode_12148 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1940, 8), 'unicode', u'use ticks only on top')
        
        # Call to set_ticks_position(...): (line 1941)
        # Processing the call arguments (line 1941)
        unicode_12151 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1941, 32), 'unicode', u'top')
        # Processing the call keyword arguments (line 1941)
        kwargs_12152 = {}
        # Getting the type of 'self' (line 1941)
        self_12149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1941, 8), 'self', False)
        # Obtaining the member 'set_ticks_position' of a type (line 1941)
        set_ticks_position_12150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1941, 8), self_12149, 'set_ticks_position')
        # Calling set_ticks_position(args, kwargs) (line 1941)
        set_ticks_position_call_result_12153 = invoke(stypy.reporting.localization.Localization(__file__, 1941, 8), set_ticks_position_12150, *[unicode_12151], **kwargs_12152)
        
        
        # ################# End of 'tick_top(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_top' in the type store
        # Getting the type of 'stypy_return_type' (line 1939)
        stypy_return_type_12154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12154)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_top'
        return stypy_return_type_12154


    @norecursion
    def tick_bottom(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_bottom'
        module_type_store = module_type_store.open_function_context('tick_bottom', 1943, 4, False)
        # Assigning a type to the variable 'self' (line 1944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1944, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.tick_bottom.__dict__.__setitem__('stypy_localization', localization)
        XAxis.tick_bottom.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.tick_bottom.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.tick_bottom.__dict__.__setitem__('stypy_function_name', 'XAxis.tick_bottom')
        XAxis.tick_bottom.__dict__.__setitem__('stypy_param_names_list', [])
        XAxis.tick_bottom.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.tick_bottom.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.tick_bottom.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.tick_bottom.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.tick_bottom.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.tick_bottom.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.tick_bottom', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_bottom', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_bottom(...)' code ##################

        unicode_12155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1944, 8), 'unicode', u'use ticks only on bottom')
        
        # Call to set_ticks_position(...): (line 1945)
        # Processing the call arguments (line 1945)
        unicode_12158 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1945, 32), 'unicode', u'bottom')
        # Processing the call keyword arguments (line 1945)
        kwargs_12159 = {}
        # Getting the type of 'self' (line 1945)
        self_12156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 8), 'self', False)
        # Obtaining the member 'set_ticks_position' of a type (line 1945)
        set_ticks_position_12157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1945, 8), self_12156, 'set_ticks_position')
        # Calling set_ticks_position(args, kwargs) (line 1945)
        set_ticks_position_call_result_12160 = invoke(stypy.reporting.localization.Localization(__file__, 1945, 8), set_ticks_position_12157, *[unicode_12158], **kwargs_12159)
        
        
        # ################# End of 'tick_bottom(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_bottom' in the type store
        # Getting the type of 'stypy_return_type' (line 1943)
        stypy_return_type_12161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12161)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_bottom'
        return stypy_return_type_12161


    @norecursion
    def get_ticks_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_ticks_position'
        module_type_store = module_type_store.open_function_context('get_ticks_position', 1947, 4, False)
        # Assigning a type to the variable 'self' (line 1948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1948, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.get_ticks_position.__dict__.__setitem__('stypy_localization', localization)
        XAxis.get_ticks_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.get_ticks_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.get_ticks_position.__dict__.__setitem__('stypy_function_name', 'XAxis.get_ticks_position')
        XAxis.get_ticks_position.__dict__.__setitem__('stypy_param_names_list', [])
        XAxis.get_ticks_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.get_ticks_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.get_ticks_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.get_ticks_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.get_ticks_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.get_ticks_position.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.get_ticks_position', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ticks_position', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ticks_position(...)' code ##################

        unicode_12162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1950, (-1)), 'unicode', u'\n        Return the ticks position (top, bottom, default or unknown)\n        ')
        
        # Assigning a Subscript to a Name (line 1951):
        
        # Assigning a Subscript to a Name (line 1951):
        
        # Obtaining the type of the subscript
        int_12163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1951, 31), 'int')
        # Getting the type of 'self' (line 1951)
        self_12164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1951, 15), 'self')
        # Obtaining the member 'majorTicks' of a type (line 1951)
        majorTicks_12165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1951, 15), self_12164, 'majorTicks')
        # Obtaining the member '__getitem__' of a type (line 1951)
        getitem___12166 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1951, 15), majorTicks_12165, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1951)
        subscript_call_result_12167 = invoke(stypy.reporting.localization.Localization(__file__, 1951, 15), getitem___12166, int_12163)
        
        # Assigning a type to the variable 'majt' (line 1951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1951, 8), 'majt', subscript_call_result_12167)
        
        # Assigning a Subscript to a Name (line 1952):
        
        # Assigning a Subscript to a Name (line 1952):
        
        # Obtaining the type of the subscript
        int_12168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1952, 29), 'int')
        # Getting the type of 'self' (line 1952)
        self_12169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 13), 'self')
        # Obtaining the member 'minorTicks' of a type (line 1952)
        minorTicks_12170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 13), self_12169, 'minorTicks')
        # Obtaining the member '__getitem__' of a type (line 1952)
        getitem___12171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1952, 13), minorTicks_12170, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1952)
        subscript_call_result_12172 = invoke(stypy.reporting.localization.Localization(__file__, 1952, 13), getitem___12171, int_12168)
        
        # Assigning a type to the variable 'mT' (line 1952)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1952, 8), 'mT', subscript_call_result_12172)
        
        # Assigning a BoolOp to a Name (line 1954):
        
        # Assigning a BoolOp to a Name (line 1954):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'majt' (line 1954)
        majt_12173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1954, 25), 'majt')
        # Obtaining the member 'tick1On' of a type (line 1954)
        tick1On_12174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1954, 25), majt_12173, 'tick1On')
        # Applying the 'not' unary operator (line 1954)
        result_not__12175 = python_operator(stypy.reporting.localization.Localization(__file__, 1954, 21), 'not', tick1On_12174)
        
        # Getting the type of 'majt' (line 1954)
        majt_12176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1954, 43), 'majt')
        # Obtaining the member 'tick2On' of a type (line 1954)
        tick2On_12177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1954, 43), majt_12176, 'tick2On')
        # Applying the binary operator 'and' (line 1954)
        result_and_keyword_12178 = python_operator(stypy.reporting.localization.Localization(__file__, 1954, 20), 'and', result_not__12175, tick2On_12177)
        
        # Getting the type of 'majt' (line 1955)
        majt_12179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1955, 25), 'majt')
        # Obtaining the member 'label1On' of a type (line 1955)
        label1On_12180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1955, 25), majt_12179, 'label1On')
        # Applying the 'not' unary operator (line 1955)
        result_not__12181 = python_operator(stypy.reporting.localization.Localization(__file__, 1955, 21), 'not', label1On_12180)
        
        # Applying the binary operator 'and' (line 1954)
        result_and_keyword_12182 = python_operator(stypy.reporting.localization.Localization(__file__, 1954, 20), 'and', result_and_keyword_12178, result_not__12181)
        # Getting the type of 'majt' (line 1955)
        majt_12183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1955, 44), 'majt')
        # Obtaining the member 'label2On' of a type (line 1955)
        label2On_12184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1955, 44), majt_12183, 'label2On')
        # Applying the binary operator 'and' (line 1954)
        result_and_keyword_12185 = python_operator(stypy.reporting.localization.Localization(__file__, 1954, 20), 'and', result_and_keyword_12182, label2On_12184)
        
        # Assigning a type to the variable 'majorTop' (line 1954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1954, 8), 'majorTop', result_and_keyword_12185)
        
        # Assigning a BoolOp to a Name (line 1956):
        
        # Assigning a BoolOp to a Name (line 1956):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'mT' (line 1956)
        mT_12186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 25), 'mT')
        # Obtaining the member 'tick1On' of a type (line 1956)
        tick1On_12187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1956, 25), mT_12186, 'tick1On')
        # Applying the 'not' unary operator (line 1956)
        result_not__12188 = python_operator(stypy.reporting.localization.Localization(__file__, 1956, 21), 'not', tick1On_12187)
        
        # Getting the type of 'mT' (line 1956)
        mT_12189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1956, 41), 'mT')
        # Obtaining the member 'tick2On' of a type (line 1956)
        tick2On_12190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1956, 41), mT_12189, 'tick2On')
        # Applying the binary operator 'and' (line 1956)
        result_and_keyword_12191 = python_operator(stypy.reporting.localization.Localization(__file__, 1956, 20), 'and', result_not__12188, tick2On_12190)
        
        # Getting the type of 'mT' (line 1957)
        mT_12192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 25), 'mT')
        # Obtaining the member 'label1On' of a type (line 1957)
        label1On_12193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1957, 25), mT_12192, 'label1On')
        # Applying the 'not' unary operator (line 1957)
        result_not__12194 = python_operator(stypy.reporting.localization.Localization(__file__, 1957, 21), 'not', label1On_12193)
        
        # Applying the binary operator 'and' (line 1956)
        result_and_keyword_12195 = python_operator(stypy.reporting.localization.Localization(__file__, 1956, 20), 'and', result_and_keyword_12191, result_not__12194)
        # Getting the type of 'mT' (line 1957)
        mT_12196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1957, 42), 'mT')
        # Obtaining the member 'label2On' of a type (line 1957)
        label2On_12197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1957, 42), mT_12196, 'label2On')
        # Applying the binary operator 'and' (line 1956)
        result_and_keyword_12198 = python_operator(stypy.reporting.localization.Localization(__file__, 1956, 20), 'and', result_and_keyword_12195, label2On_12197)
        
        # Assigning a type to the variable 'minorTop' (line 1956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1956, 8), 'minorTop', result_and_keyword_12198)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'majorTop' (line 1958)
        majorTop_12199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 11), 'majorTop')
        # Getting the type of 'minorTop' (line 1958)
        minorTop_12200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1958, 24), 'minorTop')
        # Applying the binary operator 'and' (line 1958)
        result_and_keyword_12201 = python_operator(stypy.reporting.localization.Localization(__file__, 1958, 11), 'and', majorTop_12199, minorTop_12200)
        
        # Testing the type of an if condition (line 1958)
        if_condition_12202 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1958, 8), result_and_keyword_12201)
        # Assigning a type to the variable 'if_condition_12202' (line 1958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1958, 8), 'if_condition_12202', if_condition_12202)
        # SSA begins for if statement (line 1958)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_12203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1959, 19), 'unicode', u'top')
        # Assigning a type to the variable 'stypy_return_type' (line 1959)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1959, 12), 'stypy_return_type', unicode_12203)
        # SSA join for if statement (line 1958)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BoolOp to a Name (line 1961):
        
        # Assigning a BoolOp to a Name (line 1961):
        
        # Evaluating a boolean operation
        # Getting the type of 'majt' (line 1961)
        majt_12204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 23), 'majt')
        # Obtaining the member 'tick1On' of a type (line 1961)
        tick1On_12205 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1961, 23), majt_12204, 'tick1On')
        
        # Getting the type of 'majt' (line 1961)
        majt_12206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 45), 'majt')
        # Obtaining the member 'tick2On' of a type (line 1961)
        tick2On_12207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1961, 45), majt_12206, 'tick2On')
        # Applying the 'not' unary operator (line 1961)
        result_not__12208 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 41), 'not', tick2On_12207)
        
        # Applying the binary operator 'and' (line 1961)
        result_and_keyword_12209 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 23), 'and', tick1On_12205, result_not__12208)
        # Getting the type of 'majt' (line 1962)
        majt_12210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 23), 'majt')
        # Obtaining the member 'label1On' of a type (line 1962)
        label1On_12211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1962, 23), majt_12210, 'label1On')
        # Applying the binary operator 'and' (line 1961)
        result_and_keyword_12212 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 23), 'and', result_and_keyword_12209, label1On_12211)
        
        # Getting the type of 'majt' (line 1962)
        majt_12213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 46), 'majt')
        # Obtaining the member 'label2On' of a type (line 1962)
        label2On_12214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1962, 46), majt_12213, 'label2On')
        # Applying the 'not' unary operator (line 1962)
        result_not__12215 = python_operator(stypy.reporting.localization.Localization(__file__, 1962, 42), 'not', label2On_12214)
        
        # Applying the binary operator 'and' (line 1961)
        result_and_keyword_12216 = python_operator(stypy.reporting.localization.Localization(__file__, 1961, 23), 'and', result_and_keyword_12212, result_not__12215)
        
        # Assigning a type to the variable 'MajorBottom' (line 1961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1961, 8), 'MajorBottom', result_and_keyword_12216)
        
        # Assigning a BoolOp to a Name (line 1963):
        
        # Assigning a BoolOp to a Name (line 1963):
        
        # Evaluating a boolean operation
        # Getting the type of 'mT' (line 1963)
        mT_12217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 23), 'mT')
        # Obtaining the member 'tick1On' of a type (line 1963)
        tick1On_12218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 23), mT_12217, 'tick1On')
        
        # Getting the type of 'mT' (line 1963)
        mT_12219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 43), 'mT')
        # Obtaining the member 'tick2On' of a type (line 1963)
        tick2On_12220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 43), mT_12219, 'tick2On')
        # Applying the 'not' unary operator (line 1963)
        result_not__12221 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 39), 'not', tick2On_12220)
        
        # Applying the binary operator 'and' (line 1963)
        result_and_keyword_12222 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 23), 'and', tick1On_12218, result_not__12221)
        # Getting the type of 'mT' (line 1964)
        mT_12223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 23), 'mT')
        # Obtaining the member 'label1On' of a type (line 1964)
        label1On_12224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1964, 23), mT_12223, 'label1On')
        # Applying the binary operator 'and' (line 1963)
        result_and_keyword_12225 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 23), 'and', result_and_keyword_12222, label1On_12224)
        
        # Getting the type of 'mT' (line 1964)
        mT_12226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1964, 44), 'mT')
        # Obtaining the member 'label2On' of a type (line 1964)
        label2On_12227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1964, 44), mT_12226, 'label2On')
        # Applying the 'not' unary operator (line 1964)
        result_not__12228 = python_operator(stypy.reporting.localization.Localization(__file__, 1964, 40), 'not', label2On_12227)
        
        # Applying the binary operator 'and' (line 1963)
        result_and_keyword_12229 = python_operator(stypy.reporting.localization.Localization(__file__, 1963, 23), 'and', result_and_keyword_12225, result_not__12228)
        
        # Assigning a type to the variable 'MinorBottom' (line 1963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1963, 8), 'MinorBottom', result_and_keyword_12229)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'MajorBottom' (line 1965)
        MajorBottom_12230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 11), 'MajorBottom')
        # Getting the type of 'MinorBottom' (line 1965)
        MinorBottom_12231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 27), 'MinorBottom')
        # Applying the binary operator 'and' (line 1965)
        result_and_keyword_12232 = python_operator(stypy.reporting.localization.Localization(__file__, 1965, 11), 'and', MajorBottom_12230, MinorBottom_12231)
        
        # Testing the type of an if condition (line 1965)
        if_condition_12233 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1965, 8), result_and_keyword_12232)
        # Assigning a type to the variable 'if_condition_12233' (line 1965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1965, 8), 'if_condition_12233', if_condition_12233)
        # SSA begins for if statement (line 1965)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_12234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1966, 19), 'unicode', u'bottom')
        # Assigning a type to the variable 'stypy_return_type' (line 1966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1966, 12), 'stypy_return_type', unicode_12234)
        # SSA join for if statement (line 1965)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BoolOp to a Name (line 1968):
        
        # Assigning a BoolOp to a Name (line 1968):
        
        # Evaluating a boolean operation
        # Getting the type of 'majt' (line 1968)
        majt_12235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 24), 'majt')
        # Obtaining the member 'tick1On' of a type (line 1968)
        tick1On_12236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1968, 24), majt_12235, 'tick1On')
        # Getting the type of 'majt' (line 1968)
        majt_12237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 41), 'majt')
        # Obtaining the member 'tick2On' of a type (line 1968)
        tick2On_12238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1968, 41), majt_12237, 'tick2On')
        # Applying the binary operator 'and' (line 1968)
        result_and_keyword_12239 = python_operator(stypy.reporting.localization.Localization(__file__, 1968, 24), 'and', tick1On_12236, tick2On_12238)
        # Getting the type of 'majt' (line 1969)
        majt_12240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 24), 'majt')
        # Obtaining the member 'label1On' of a type (line 1969)
        label1On_12241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1969, 24), majt_12240, 'label1On')
        # Applying the binary operator 'and' (line 1968)
        result_and_keyword_12242 = python_operator(stypy.reporting.localization.Localization(__file__, 1968, 24), 'and', result_and_keyword_12239, label1On_12241)
        
        # Getting the type of 'majt' (line 1969)
        majt_12243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1969, 47), 'majt')
        # Obtaining the member 'label2On' of a type (line 1969)
        label2On_12244 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1969, 47), majt_12243, 'label2On')
        # Applying the 'not' unary operator (line 1969)
        result_not__12245 = python_operator(stypy.reporting.localization.Localization(__file__, 1969, 43), 'not', label2On_12244)
        
        # Applying the binary operator 'and' (line 1968)
        result_and_keyword_12246 = python_operator(stypy.reporting.localization.Localization(__file__, 1968, 24), 'and', result_and_keyword_12242, result_not__12245)
        
        # Assigning a type to the variable 'majorDefault' (line 1968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1968, 8), 'majorDefault', result_and_keyword_12246)
        
        # Assigning a BoolOp to a Name (line 1970):
        
        # Assigning a BoolOp to a Name (line 1970):
        
        # Evaluating a boolean operation
        # Getting the type of 'mT' (line 1970)
        mT_12247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 24), 'mT')
        # Obtaining the member 'tick1On' of a type (line 1970)
        tick1On_12248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1970, 24), mT_12247, 'tick1On')
        # Getting the type of 'mT' (line 1970)
        mT_12249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 39), 'mT')
        # Obtaining the member 'tick2On' of a type (line 1970)
        tick2On_12250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1970, 39), mT_12249, 'tick2On')
        # Applying the binary operator 'and' (line 1970)
        result_and_keyword_12251 = python_operator(stypy.reporting.localization.Localization(__file__, 1970, 24), 'and', tick1On_12248, tick2On_12250)
        # Getting the type of 'mT' (line 1971)
        mT_12252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 24), 'mT')
        # Obtaining the member 'label1On' of a type (line 1971)
        label1On_12253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1971, 24), mT_12252, 'label1On')
        # Applying the binary operator 'and' (line 1970)
        result_and_keyword_12254 = python_operator(stypy.reporting.localization.Localization(__file__, 1970, 24), 'and', result_and_keyword_12251, label1On_12253)
        
        # Getting the type of 'mT' (line 1971)
        mT_12255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 45), 'mT')
        # Obtaining the member 'label2On' of a type (line 1971)
        label2On_12256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1971, 45), mT_12255, 'label2On')
        # Applying the 'not' unary operator (line 1971)
        result_not__12257 = python_operator(stypy.reporting.localization.Localization(__file__, 1971, 41), 'not', label2On_12256)
        
        # Applying the binary operator 'and' (line 1970)
        result_and_keyword_12258 = python_operator(stypy.reporting.localization.Localization(__file__, 1970, 24), 'and', result_and_keyword_12254, result_not__12257)
        
        # Assigning a type to the variable 'minorDefault' (line 1970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 8), 'minorDefault', result_and_keyword_12258)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'majorDefault' (line 1972)
        majorDefault_12259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 11), 'majorDefault')
        # Getting the type of 'minorDefault' (line 1972)
        minorDefault_12260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1972, 28), 'minorDefault')
        # Applying the binary operator 'and' (line 1972)
        result_and_keyword_12261 = python_operator(stypy.reporting.localization.Localization(__file__, 1972, 11), 'and', majorDefault_12259, minorDefault_12260)
        
        # Testing the type of an if condition (line 1972)
        if_condition_12262 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1972, 8), result_and_keyword_12261)
        # Assigning a type to the variable 'if_condition_12262' (line 1972)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1972, 8), 'if_condition_12262', if_condition_12262)
        # SSA begins for if statement (line 1972)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_12263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1973, 19), 'unicode', u'default')
        # Assigning a type to the variable 'stypy_return_type' (line 1973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 12), 'stypy_return_type', unicode_12263)
        # SSA join for if statement (line 1972)
        module_type_store = module_type_store.join_ssa_context()
        
        unicode_12264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1975, 15), 'unicode', u'unknown')
        # Assigning a type to the variable 'stypy_return_type' (line 1975)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1975, 8), 'stypy_return_type', unicode_12264)
        
        # ################# End of 'get_ticks_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ticks_position' in the type store
        # Getting the type of 'stypy_return_type' (line 1947)
        stypy_return_type_12265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12265)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ticks_position'
        return stypy_return_type_12265


    @norecursion
    def get_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_view_interval'
        module_type_store = module_type_store.open_function_context('get_view_interval', 1977, 4, False)
        # Assigning a type to the variable 'self' (line 1978)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1978, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.get_view_interval.__dict__.__setitem__('stypy_localization', localization)
        XAxis.get_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.get_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.get_view_interval.__dict__.__setitem__('stypy_function_name', 'XAxis.get_view_interval')
        XAxis.get_view_interval.__dict__.__setitem__('stypy_param_names_list', [])
        XAxis.get_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.get_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.get_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.get_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.get_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.get_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.get_view_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_view_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_view_interval(...)' code ##################

        unicode_12266 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1978, 8), 'unicode', u'return the Interval instance for this axis view limits')
        # Getting the type of 'self' (line 1979)
        self_12267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1979, 15), 'self')
        # Obtaining the member 'axes' of a type (line 1979)
        axes_12268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1979, 15), self_12267, 'axes')
        # Obtaining the member 'viewLim' of a type (line 1979)
        viewLim_12269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1979, 15), axes_12268, 'viewLim')
        # Obtaining the member 'intervalx' of a type (line 1979)
        intervalx_12270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1979, 15), viewLim_12269, 'intervalx')
        # Assigning a type to the variable 'stypy_return_type' (line 1979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1979, 8), 'stypy_return_type', intervalx_12270)
        
        # ################# End of 'get_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 1977)
        stypy_return_type_12271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1977, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12271)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_view_interval'
        return stypy_return_type_12271


    @norecursion
    def set_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1981)
        False_12272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 51), 'False')
        defaults = [False_12272]
        # Create a new context for function 'set_view_interval'
        module_type_store = module_type_store.open_function_context('set_view_interval', 1981, 4, False)
        # Assigning a type to the variable 'self' (line 1982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1982, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.set_view_interval.__dict__.__setitem__('stypy_localization', localization)
        XAxis.set_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.set_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.set_view_interval.__dict__.__setitem__('stypy_function_name', 'XAxis.set_view_interval')
        XAxis.set_view_interval.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax', 'ignore'])
        XAxis.set_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.set_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.set_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.set_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.set_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.set_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.set_view_interval', ['vmin', 'vmax', 'ignore'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_view_interval', localization, ['vmin', 'vmax', 'ignore'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_view_interval(...)' code ##################

        unicode_12273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1990, (-1)), 'unicode', u'\n        If *ignore* is *False*, the order of vmin, vmax\n        does not matter; the original axis orientation will\n        be preserved. In addition, the view limits can be\n        expanded, but will not be reduced.  This method is\n        for mpl internal use; for normal use, see\n        :meth:`~matplotlib.axes.Axes.set_xlim`.\n\n        ')
        
        # Getting the type of 'ignore' (line 1991)
        ignore_12274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1991, 11), 'ignore')
        # Testing the type of an if condition (line 1991)
        if_condition_12275 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1991, 8), ignore_12274)
        # Assigning a type to the variable 'if_condition_12275' (line 1991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1991, 8), 'if_condition_12275', if_condition_12275)
        # SSA begins for if statement (line 1991)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 1992):
        
        # Assigning a Tuple to a Attribute (line 1992):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1992)
        tuple_12276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1992, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1992)
        # Adding element type (line 1992)
        # Getting the type of 'vmin' (line 1992)
        vmin_12277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 42), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1992, 42), tuple_12276, vmin_12277)
        # Adding element type (line 1992)
        # Getting the type of 'vmax' (line 1992)
        vmax_12278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 48), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1992, 42), tuple_12276, vmax_12278)
        
        # Getting the type of 'self' (line 1992)
        self_12279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1992, 12), 'self')
        # Obtaining the member 'axes' of a type (line 1992)
        axes_12280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1992, 12), self_12279, 'axes')
        # Obtaining the member 'viewLim' of a type (line 1992)
        viewLim_12281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1992, 12), axes_12280, 'viewLim')
        # Setting the type of the member 'intervalx' of a type (line 1992)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1992, 12), viewLim_12281, 'intervalx', tuple_12276)
        # SSA branch for the else part of an if statement (line 1991)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 1994):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 1994)
        # Processing the call keyword arguments (line 1994)
        kwargs_12284 = {}
        # Getting the type of 'self' (line 1994)
        self_12282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 25), 'self', False)
        # Obtaining the member 'get_view_interval' of a type (line 1994)
        get_view_interval_12283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 25), self_12282, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 1994)
        get_view_interval_call_result_12285 = invoke(stypy.reporting.localization.Localization(__file__, 1994, 25), get_view_interval_12283, *[], **kwargs_12284)
        
        # Assigning a type to the variable 'call_assignment_7014' (line 1994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 12), 'call_assignment_7014', get_view_interval_call_result_12285)
        
        # Assigning a Call to a Name (line 1994):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_12288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1994, 12), 'int')
        # Processing the call keyword arguments
        kwargs_12289 = {}
        # Getting the type of 'call_assignment_7014' (line 1994)
        call_assignment_7014_12286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 12), 'call_assignment_7014', False)
        # Obtaining the member '__getitem__' of a type (line 1994)
        getitem___12287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 12), call_assignment_7014_12286, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_12290 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___12287, *[int_12288], **kwargs_12289)
        
        # Assigning a type to the variable 'call_assignment_7015' (line 1994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 12), 'call_assignment_7015', getitem___call_result_12290)
        
        # Assigning a Name to a Name (line 1994):
        # Getting the type of 'call_assignment_7015' (line 1994)
        call_assignment_7015_12291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 12), 'call_assignment_7015')
        # Assigning a type to the variable 'Vmin' (line 1994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 12), 'Vmin', call_assignment_7015_12291)
        
        # Assigning a Call to a Name (line 1994):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_12294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1994, 12), 'int')
        # Processing the call keyword arguments
        kwargs_12295 = {}
        # Getting the type of 'call_assignment_7014' (line 1994)
        call_assignment_7014_12292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 12), 'call_assignment_7014', False)
        # Obtaining the member '__getitem__' of a type (line 1994)
        getitem___12293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1994, 12), call_assignment_7014_12292, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_12296 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___12293, *[int_12294], **kwargs_12295)
        
        # Assigning a type to the variable 'call_assignment_7016' (line 1994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 12), 'call_assignment_7016', getitem___call_result_12296)
        
        # Assigning a Name to a Name (line 1994):
        # Getting the type of 'call_assignment_7016' (line 1994)
        call_assignment_7016_12297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1994, 12), 'call_assignment_7016')
        # Assigning a type to the variable 'Vmax' (line 1994)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 18), 'Vmax', call_assignment_7016_12297)
        
        
        # Getting the type of 'Vmin' (line 1995)
        Vmin_12298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 15), 'Vmin')
        # Getting the type of 'Vmax' (line 1995)
        Vmax_12299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1995, 22), 'Vmax')
        # Applying the binary operator '<' (line 1995)
        result_lt_12300 = python_operator(stypy.reporting.localization.Localization(__file__, 1995, 15), '<', Vmin_12298, Vmax_12299)
        
        # Testing the type of an if condition (line 1995)
        if_condition_12301 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1995, 12), result_lt_12300)
        # Assigning a type to the variable 'if_condition_12301' (line 1995)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1995, 12), 'if_condition_12301', if_condition_12301)
        # SSA begins for if statement (line 1995)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 1996):
        
        # Assigning a Tuple to a Attribute (line 1996):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1996)
        tuple_12302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1996, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1996)
        # Adding element type (line 1996)
        
        # Call to min(...): (line 1996)
        # Processing the call arguments (line 1996)
        # Getting the type of 'vmin' (line 1996)
        vmin_12304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 51), 'vmin', False)
        # Getting the type of 'vmax' (line 1996)
        vmax_12305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 57), 'vmax', False)
        # Getting the type of 'Vmin' (line 1996)
        Vmin_12306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 63), 'Vmin', False)
        # Processing the call keyword arguments (line 1996)
        kwargs_12307 = {}
        # Getting the type of 'min' (line 1996)
        min_12303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 47), 'min', False)
        # Calling min(args, kwargs) (line 1996)
        min_call_result_12308 = invoke(stypy.reporting.localization.Localization(__file__, 1996, 47), min_12303, *[vmin_12304, vmax_12305, Vmin_12306], **kwargs_12307)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1996, 47), tuple_12302, min_call_result_12308)
        # Adding element type (line 1996)
        
        # Call to max(...): (line 1997)
        # Processing the call arguments (line 1997)
        # Getting the type of 'vmin' (line 1997)
        vmin_12310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 51), 'vmin', False)
        # Getting the type of 'vmax' (line 1997)
        vmax_12311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 57), 'vmax', False)
        # Getting the type of 'Vmax' (line 1997)
        Vmax_12312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 63), 'Vmax', False)
        # Processing the call keyword arguments (line 1997)
        kwargs_12313 = {}
        # Getting the type of 'max' (line 1997)
        max_12309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 47), 'max', False)
        # Calling max(args, kwargs) (line 1997)
        max_call_result_12314 = invoke(stypy.reporting.localization.Localization(__file__, 1997, 47), max_12309, *[vmin_12310, vmax_12311, Vmax_12312], **kwargs_12313)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1996, 47), tuple_12302, max_call_result_12314)
        
        # Getting the type of 'self' (line 1996)
        self_12315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1996, 16), 'self')
        # Obtaining the member 'axes' of a type (line 1996)
        axes_12316 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1996, 16), self_12315, 'axes')
        # Obtaining the member 'viewLim' of a type (line 1996)
        viewLim_12317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1996, 16), axes_12316, 'viewLim')
        # Setting the type of the member 'intervalx' of a type (line 1996)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1996, 16), viewLim_12317, 'intervalx', tuple_12302)
        # SSA branch for the else part of an if statement (line 1995)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Attribute (line 1999):
        
        # Assigning a Tuple to a Attribute (line 1999):
        
        # Obtaining an instance of the builtin type 'tuple' (line 1999)
        tuple_12318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1999, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1999)
        # Adding element type (line 1999)
        
        # Call to max(...): (line 1999)
        # Processing the call arguments (line 1999)
        # Getting the type of 'vmin' (line 1999)
        vmin_12320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 51), 'vmin', False)
        # Getting the type of 'vmax' (line 1999)
        vmax_12321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 57), 'vmax', False)
        # Getting the type of 'Vmin' (line 1999)
        Vmin_12322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 63), 'Vmin', False)
        # Processing the call keyword arguments (line 1999)
        kwargs_12323 = {}
        # Getting the type of 'max' (line 1999)
        max_12319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 47), 'max', False)
        # Calling max(args, kwargs) (line 1999)
        max_call_result_12324 = invoke(stypy.reporting.localization.Localization(__file__, 1999, 47), max_12319, *[vmin_12320, vmax_12321, Vmin_12322], **kwargs_12323)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1999, 47), tuple_12318, max_call_result_12324)
        # Adding element type (line 1999)
        
        # Call to min(...): (line 2000)
        # Processing the call arguments (line 2000)
        # Getting the type of 'vmin' (line 2000)
        vmin_12326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 51), 'vmin', False)
        # Getting the type of 'vmax' (line 2000)
        vmax_12327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 57), 'vmax', False)
        # Getting the type of 'Vmax' (line 2000)
        Vmax_12328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 63), 'Vmax', False)
        # Processing the call keyword arguments (line 2000)
        kwargs_12329 = {}
        # Getting the type of 'min' (line 2000)
        min_12325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2000, 47), 'min', False)
        # Calling min(args, kwargs) (line 2000)
        min_call_result_12330 = invoke(stypy.reporting.localization.Localization(__file__, 2000, 47), min_12325, *[vmin_12326, vmax_12327, Vmax_12328], **kwargs_12329)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1999, 47), tuple_12318, min_call_result_12330)
        
        # Getting the type of 'self' (line 1999)
        self_12331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 16), 'self')
        # Obtaining the member 'axes' of a type (line 1999)
        axes_12332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1999, 16), self_12331, 'axes')
        # Obtaining the member 'viewLim' of a type (line 1999)
        viewLim_12333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1999, 16), axes_12332, 'viewLim')
        # Setting the type of the member 'intervalx' of a type (line 1999)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1999, 16), viewLim_12333, 'intervalx', tuple_12318)
        # SSA join for if statement (line 1995)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1991)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'set_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 1981)
        stypy_return_type_12334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1981, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12334)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_view_interval'
        return stypy_return_type_12334


    @norecursion
    def get_minpos(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_minpos'
        module_type_store = module_type_store.open_function_context('get_minpos', 2002, 4, False)
        # Assigning a type to the variable 'self' (line 2003)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2003, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.get_minpos.__dict__.__setitem__('stypy_localization', localization)
        XAxis.get_minpos.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.get_minpos.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.get_minpos.__dict__.__setitem__('stypy_function_name', 'XAxis.get_minpos')
        XAxis.get_minpos.__dict__.__setitem__('stypy_param_names_list', [])
        XAxis.get_minpos.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.get_minpos.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.get_minpos.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.get_minpos.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.get_minpos.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.get_minpos.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.get_minpos', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_minpos', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_minpos(...)' code ##################

        # Getting the type of 'self' (line 2003)
        self_12335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 15), 'self')
        # Obtaining the member 'axes' of a type (line 2003)
        axes_12336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2003, 15), self_12335, 'axes')
        # Obtaining the member 'dataLim' of a type (line 2003)
        dataLim_12337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2003, 15), axes_12336, 'dataLim')
        # Obtaining the member 'minposx' of a type (line 2003)
        minposx_12338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2003, 15), dataLim_12337, 'minposx')
        # Assigning a type to the variable 'stypy_return_type' (line 2003)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2003, 8), 'stypy_return_type', minposx_12338)
        
        # ################# End of 'get_minpos(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_minpos' in the type store
        # Getting the type of 'stypy_return_type' (line 2002)
        stypy_return_type_12339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12339)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_minpos'
        return stypy_return_type_12339


    @norecursion
    def get_data_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_data_interval'
        module_type_store = module_type_store.open_function_context('get_data_interval', 2005, 4, False)
        # Assigning a type to the variable 'self' (line 2006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2006, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.get_data_interval.__dict__.__setitem__('stypy_localization', localization)
        XAxis.get_data_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.get_data_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.get_data_interval.__dict__.__setitem__('stypy_function_name', 'XAxis.get_data_interval')
        XAxis.get_data_interval.__dict__.__setitem__('stypy_param_names_list', [])
        XAxis.get_data_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.get_data_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.get_data_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.get_data_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.get_data_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.get_data_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.get_data_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_data_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_data_interval(...)' code ##################

        unicode_12340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2006, 8), 'unicode', u'return the Interval instance for this axis data limits')
        # Getting the type of 'self' (line 2007)
        self_12341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 15), 'self')
        # Obtaining the member 'axes' of a type (line 2007)
        axes_12342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2007, 15), self_12341, 'axes')
        # Obtaining the member 'dataLim' of a type (line 2007)
        dataLim_12343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2007, 15), axes_12342, 'dataLim')
        # Obtaining the member 'intervalx' of a type (line 2007)
        intervalx_12344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2007, 15), dataLim_12343, 'intervalx')
        # Assigning a type to the variable 'stypy_return_type' (line 2007)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2007, 8), 'stypy_return_type', intervalx_12344)
        
        # ################# End of 'get_data_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_data_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 2005)
        stypy_return_type_12345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12345)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_data_interval'
        return stypy_return_type_12345


    @norecursion
    def set_data_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 2009)
        False_12346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 51), 'False')
        defaults = [False_12346]
        # Create a new context for function 'set_data_interval'
        module_type_store = module_type_store.open_function_context('set_data_interval', 2009, 4, False)
        # Assigning a type to the variable 'self' (line 2010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2010, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.set_data_interval.__dict__.__setitem__('stypy_localization', localization)
        XAxis.set_data_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.set_data_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.set_data_interval.__dict__.__setitem__('stypy_function_name', 'XAxis.set_data_interval')
        XAxis.set_data_interval.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax', 'ignore'])
        XAxis.set_data_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.set_data_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.set_data_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.set_data_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.set_data_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.set_data_interval.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.set_data_interval', ['vmin', 'vmax', 'ignore'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data_interval', localization, ['vmin', 'vmax', 'ignore'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data_interval(...)' code ##################

        unicode_12347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2010, 8), 'unicode', u'set the axis data limits')
        
        # Getting the type of 'ignore' (line 2011)
        ignore_12348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 11), 'ignore')
        # Testing the type of an if condition (line 2011)
        if_condition_12349 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2011, 8), ignore_12348)
        # Assigning a type to the variable 'if_condition_12349' (line 2011)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2011, 8), 'if_condition_12349', if_condition_12349)
        # SSA begins for if statement (line 2011)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 2012):
        
        # Assigning a Tuple to a Attribute (line 2012):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2012)
        tuple_12350 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2012, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2012)
        # Adding element type (line 2012)
        # Getting the type of 'vmin' (line 2012)
        vmin_12351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 42), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2012, 42), tuple_12350, vmin_12351)
        # Adding element type (line 2012)
        # Getting the type of 'vmax' (line 2012)
        vmax_12352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 48), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2012, 42), tuple_12350, vmax_12352)
        
        # Getting the type of 'self' (line 2012)
        self_12353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2012, 12), 'self')
        # Obtaining the member 'axes' of a type (line 2012)
        axes_12354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2012, 12), self_12353, 'axes')
        # Obtaining the member 'dataLim' of a type (line 2012)
        dataLim_12355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2012, 12), axes_12354, 'dataLim')
        # Setting the type of the member 'intervalx' of a type (line 2012)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2012, 12), dataLim_12355, 'intervalx', tuple_12350)
        # SSA branch for the else part of an if statement (line 2011)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 2014):
        
        # Assigning a Call to a Name:
        
        # Call to get_data_interval(...): (line 2014)
        # Processing the call keyword arguments (line 2014)
        kwargs_12358 = {}
        # Getting the type of 'self' (line 2014)
        self_12356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2014, 25), 'self', False)
        # Obtaining the member 'get_data_interval' of a type (line 2014)
        get_data_interval_12357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2014, 25), self_12356, 'get_data_interval')
        # Calling get_data_interval(args, kwargs) (line 2014)
        get_data_interval_call_result_12359 = invoke(stypy.reporting.localization.Localization(__file__, 2014, 25), get_data_interval_12357, *[], **kwargs_12358)
        
        # Assigning a type to the variable 'call_assignment_7017' (line 2014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2014, 12), 'call_assignment_7017', get_data_interval_call_result_12359)
        
        # Assigning a Call to a Name (line 2014):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_12362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2014, 12), 'int')
        # Processing the call keyword arguments
        kwargs_12363 = {}
        # Getting the type of 'call_assignment_7017' (line 2014)
        call_assignment_7017_12360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2014, 12), 'call_assignment_7017', False)
        # Obtaining the member '__getitem__' of a type (line 2014)
        getitem___12361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2014, 12), call_assignment_7017_12360, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_12364 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___12361, *[int_12362], **kwargs_12363)
        
        # Assigning a type to the variable 'call_assignment_7018' (line 2014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2014, 12), 'call_assignment_7018', getitem___call_result_12364)
        
        # Assigning a Name to a Name (line 2014):
        # Getting the type of 'call_assignment_7018' (line 2014)
        call_assignment_7018_12365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2014, 12), 'call_assignment_7018')
        # Assigning a type to the variable 'Vmin' (line 2014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2014, 12), 'Vmin', call_assignment_7018_12365)
        
        # Assigning a Call to a Name (line 2014):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_12368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2014, 12), 'int')
        # Processing the call keyword arguments
        kwargs_12369 = {}
        # Getting the type of 'call_assignment_7017' (line 2014)
        call_assignment_7017_12366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2014, 12), 'call_assignment_7017', False)
        # Obtaining the member '__getitem__' of a type (line 2014)
        getitem___12367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2014, 12), call_assignment_7017_12366, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_12370 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___12367, *[int_12368], **kwargs_12369)
        
        # Assigning a type to the variable 'call_assignment_7019' (line 2014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2014, 12), 'call_assignment_7019', getitem___call_result_12370)
        
        # Assigning a Name to a Name (line 2014):
        # Getting the type of 'call_assignment_7019' (line 2014)
        call_assignment_7019_12371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2014, 12), 'call_assignment_7019')
        # Assigning a type to the variable 'Vmax' (line 2014)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2014, 18), 'Vmax', call_assignment_7019_12371)
        
        # Assigning a Tuple to a Attribute (line 2015):
        
        # Assigning a Tuple to a Attribute (line 2015):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2015)
        tuple_12372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2015, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2015)
        # Adding element type (line 2015)
        
        # Call to min(...): (line 2015)
        # Processing the call arguments (line 2015)
        # Getting the type of 'vmin' (line 2015)
        vmin_12374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 46), 'vmin', False)
        # Getting the type of 'Vmin' (line 2015)
        Vmin_12375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 52), 'Vmin', False)
        # Processing the call keyword arguments (line 2015)
        kwargs_12376 = {}
        # Getting the type of 'min' (line 2015)
        min_12373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 42), 'min', False)
        # Calling min(args, kwargs) (line 2015)
        min_call_result_12377 = invoke(stypy.reporting.localization.Localization(__file__, 2015, 42), min_12373, *[vmin_12374, Vmin_12375], **kwargs_12376)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2015, 42), tuple_12372, min_call_result_12377)
        # Adding element type (line 2015)
        
        # Call to max(...): (line 2015)
        # Processing the call arguments (line 2015)
        # Getting the type of 'vmax' (line 2015)
        vmax_12379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 63), 'vmax', False)
        # Getting the type of 'Vmax' (line 2015)
        Vmax_12380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 69), 'Vmax', False)
        # Processing the call keyword arguments (line 2015)
        kwargs_12381 = {}
        # Getting the type of 'max' (line 2015)
        max_12378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 59), 'max', False)
        # Calling max(args, kwargs) (line 2015)
        max_call_result_12382 = invoke(stypy.reporting.localization.Localization(__file__, 2015, 59), max_12378, *[vmax_12379, Vmax_12380], **kwargs_12381)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2015, 42), tuple_12372, max_call_result_12382)
        
        # Getting the type of 'self' (line 2015)
        self_12383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2015, 12), 'self')
        # Obtaining the member 'axes' of a type (line 2015)
        axes_12384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2015, 12), self_12383, 'axes')
        # Obtaining the member 'dataLim' of a type (line 2015)
        dataLim_12385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2015, 12), axes_12384, 'dataLim')
        # Setting the type of the member 'intervalx' of a type (line 2015)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2015, 12), dataLim_12385, 'intervalx', tuple_12372)
        # SSA join for if statement (line 2011)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2016):
        
        # Assigning a Name to a Attribute (line 2016):
        # Getting the type of 'True' (line 2016)
        True_12386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 21), 'True')
        # Getting the type of 'self' (line 2016)
        self_12387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2016, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2016)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2016, 8), self_12387, 'stale', True_12386)
        
        # ################# End of 'set_data_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 2009)
        stypy_return_type_12388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2009, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12388)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data_interval'
        return stypy_return_type_12388


    @norecursion
    def set_default_intervals(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_default_intervals'
        module_type_store = module_type_store.open_function_context('set_default_intervals', 2018, 4, False)
        # Assigning a type to the variable 'self' (line 2019)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2019, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.set_default_intervals.__dict__.__setitem__('stypy_localization', localization)
        XAxis.set_default_intervals.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.set_default_intervals.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.set_default_intervals.__dict__.__setitem__('stypy_function_name', 'XAxis.set_default_intervals')
        XAxis.set_default_intervals.__dict__.__setitem__('stypy_param_names_list', [])
        XAxis.set_default_intervals.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.set_default_intervals.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.set_default_intervals.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.set_default_intervals.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.set_default_intervals.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.set_default_intervals.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.set_default_intervals', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_default_intervals', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_default_intervals(...)' code ##################

        unicode_12389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2019, 8), 'unicode', u'set the default limits for the axis interval if they are not mutated')
        
        # Assigning a Tuple to a Tuple (line 2020):
        
        # Assigning a Num to a Name (line 2020):
        float_12390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2020, 21), 'float')
        # Assigning a type to the variable 'tuple_assignment_7020' (line 2020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2020, 8), 'tuple_assignment_7020', float_12390)
        
        # Assigning a Num to a Name (line 2020):
        float_12391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2020, 25), 'float')
        # Assigning a type to the variable 'tuple_assignment_7021' (line 2020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2020, 8), 'tuple_assignment_7021', float_12391)
        
        # Assigning a Name to a Name (line 2020):
        # Getting the type of 'tuple_assignment_7020' (line 2020)
        tuple_assignment_7020_12392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 8), 'tuple_assignment_7020')
        # Assigning a type to the variable 'xmin' (line 2020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2020, 8), 'xmin', tuple_assignment_7020_12392)
        
        # Assigning a Name to a Name (line 2020):
        # Getting the type of 'tuple_assignment_7021' (line 2020)
        tuple_assignment_7021_12393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2020, 8), 'tuple_assignment_7021')
        # Assigning a type to the variable 'xmax' (line 2020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2020, 14), 'xmax', tuple_assignment_7021_12393)
        
        # Assigning a Call to a Name (line 2021):
        
        # Assigning a Call to a Name (line 2021):
        
        # Call to mutatedx(...): (line 2021)
        # Processing the call keyword arguments (line 2021)
        kwargs_12398 = {}
        # Getting the type of 'self' (line 2021)
        self_12394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2021, 22), 'self', False)
        # Obtaining the member 'axes' of a type (line 2021)
        axes_12395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2021, 22), self_12394, 'axes')
        # Obtaining the member 'dataLim' of a type (line 2021)
        dataLim_12396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2021, 22), axes_12395, 'dataLim')
        # Obtaining the member 'mutatedx' of a type (line 2021)
        mutatedx_12397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2021, 22), dataLim_12396, 'mutatedx')
        # Calling mutatedx(args, kwargs) (line 2021)
        mutatedx_call_result_12399 = invoke(stypy.reporting.localization.Localization(__file__, 2021, 22), mutatedx_12397, *[], **kwargs_12398)
        
        # Assigning a type to the variable 'dataMutated' (line 2021)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2021, 8), 'dataMutated', mutatedx_call_result_12399)
        
        # Assigning a Call to a Name (line 2022):
        
        # Assigning a Call to a Name (line 2022):
        
        # Call to mutatedx(...): (line 2022)
        # Processing the call keyword arguments (line 2022)
        kwargs_12404 = {}
        # Getting the type of 'self' (line 2022)
        self_12400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2022, 22), 'self', False)
        # Obtaining the member 'axes' of a type (line 2022)
        axes_12401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2022, 22), self_12400, 'axes')
        # Obtaining the member 'viewLim' of a type (line 2022)
        viewLim_12402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2022, 22), axes_12401, 'viewLim')
        # Obtaining the member 'mutatedx' of a type (line 2022)
        mutatedx_12403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2022, 22), viewLim_12402, 'mutatedx')
        # Calling mutatedx(args, kwargs) (line 2022)
        mutatedx_call_result_12405 = invoke(stypy.reporting.localization.Localization(__file__, 2022, 22), mutatedx_12403, *[], **kwargs_12404)
        
        # Assigning a type to the variable 'viewMutated' (line 2022)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2022, 8), 'viewMutated', mutatedx_call_result_12405)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'dataMutated' (line 2023)
        dataMutated_12406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 15), 'dataMutated')
        # Applying the 'not' unary operator (line 2023)
        result_not__12407 = python_operator(stypy.reporting.localization.Localization(__file__, 2023, 11), 'not', dataMutated_12406)
        
        
        # Getting the type of 'viewMutated' (line 2023)
        viewMutated_12408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2023, 34), 'viewMutated')
        # Applying the 'not' unary operator (line 2023)
        result_not__12409 = python_operator(stypy.reporting.localization.Localization(__file__, 2023, 30), 'not', viewMutated_12408)
        
        # Applying the binary operator 'or' (line 2023)
        result_or_keyword_12410 = python_operator(stypy.reporting.localization.Localization(__file__, 2023, 11), 'or', result_not__12407, result_not__12409)
        
        # Testing the type of an if condition (line 2023)
        if_condition_12411 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2023, 8), result_or_keyword_12410)
        # Assigning a type to the variable 'if_condition_12411' (line 2023)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2023, 8), 'if_condition_12411', if_condition_12411)
        # SSA begins for if statement (line 2023)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 2024)
        self_12412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 15), 'self')
        # Obtaining the member 'converter' of a type (line 2024)
        converter_12413 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2024, 15), self_12412, 'converter')
        # Getting the type of 'None' (line 2024)
        None_12414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2024, 37), 'None')
        # Applying the binary operator 'isnot' (line 2024)
        result_is_not_12415 = python_operator(stypy.reporting.localization.Localization(__file__, 2024, 15), 'isnot', converter_12413, None_12414)
        
        # Testing the type of an if condition (line 2024)
        if_condition_12416 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2024, 12), result_is_not_12415)
        # Assigning a type to the variable 'if_condition_12416' (line 2024)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2024, 12), 'if_condition_12416', if_condition_12416)
        # SSA begins for if statement (line 2024)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2025):
        
        # Assigning a Call to a Name (line 2025):
        
        # Call to axisinfo(...): (line 2025)
        # Processing the call arguments (line 2025)
        # Getting the type of 'self' (line 2025)
        self_12420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2025, 47), 'self', False)
        # Obtaining the member 'units' of a type (line 2025)
        units_12421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2025, 47), self_12420, 'units')
        # Getting the type of 'self' (line 2025)
        self_12422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2025, 59), 'self', False)
        # Processing the call keyword arguments (line 2025)
        kwargs_12423 = {}
        # Getting the type of 'self' (line 2025)
        self_12417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2025, 23), 'self', False)
        # Obtaining the member 'converter' of a type (line 2025)
        converter_12418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2025, 23), self_12417, 'converter')
        # Obtaining the member 'axisinfo' of a type (line 2025)
        axisinfo_12419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2025, 23), converter_12418, 'axisinfo')
        # Calling axisinfo(args, kwargs) (line 2025)
        axisinfo_call_result_12424 = invoke(stypy.reporting.localization.Localization(__file__, 2025, 23), axisinfo_12419, *[units_12421, self_12422], **kwargs_12423)
        
        # Assigning a type to the variable 'info' (line 2025)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2025, 16), 'info', axisinfo_call_result_12424)
        
        
        # Getting the type of 'info' (line 2026)
        info_12425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 19), 'info')
        # Obtaining the member 'default_limits' of a type (line 2026)
        default_limits_12426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2026, 19), info_12425, 'default_limits')
        # Getting the type of 'None' (line 2026)
        None_12427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2026, 46), 'None')
        # Applying the binary operator 'isnot' (line 2026)
        result_is_not_12428 = python_operator(stypy.reporting.localization.Localization(__file__, 2026, 19), 'isnot', default_limits_12426, None_12427)
        
        # Testing the type of an if condition (line 2026)
        if_condition_12429 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2026, 16), result_is_not_12428)
        # Assigning a type to the variable 'if_condition_12429' (line 2026)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2026, 16), 'if_condition_12429', if_condition_12429)
        # SSA begins for if statement (line 2026)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 2027):
        
        # Assigning a Subscript to a Name (line 2027):
        
        # Obtaining the type of the subscript
        int_12430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2027, 20), 'int')
        # Getting the type of 'info' (line 2027)
        info_12431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 37), 'info')
        # Obtaining the member 'default_limits' of a type (line 2027)
        default_limits_12432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2027, 37), info_12431, 'default_limits')
        # Obtaining the member '__getitem__' of a type (line 2027)
        getitem___12433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2027, 20), default_limits_12432, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2027)
        subscript_call_result_12434 = invoke(stypy.reporting.localization.Localization(__file__, 2027, 20), getitem___12433, int_12430)
        
        # Assigning a type to the variable 'tuple_var_assignment_7022' (line 2027)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2027, 20), 'tuple_var_assignment_7022', subscript_call_result_12434)
        
        # Assigning a Subscript to a Name (line 2027):
        
        # Obtaining the type of the subscript
        int_12435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2027, 20), 'int')
        # Getting the type of 'info' (line 2027)
        info_12436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 37), 'info')
        # Obtaining the member 'default_limits' of a type (line 2027)
        default_limits_12437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2027, 37), info_12436, 'default_limits')
        # Obtaining the member '__getitem__' of a type (line 2027)
        getitem___12438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2027, 20), default_limits_12437, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2027)
        subscript_call_result_12439 = invoke(stypy.reporting.localization.Localization(__file__, 2027, 20), getitem___12438, int_12435)
        
        # Assigning a type to the variable 'tuple_var_assignment_7023' (line 2027)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2027, 20), 'tuple_var_assignment_7023', subscript_call_result_12439)
        
        # Assigning a Name to a Name (line 2027):
        # Getting the type of 'tuple_var_assignment_7022' (line 2027)
        tuple_var_assignment_7022_12440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 20), 'tuple_var_assignment_7022')
        # Assigning a type to the variable 'valmin' (line 2027)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2027, 20), 'valmin', tuple_var_assignment_7022_12440)
        
        # Assigning a Name to a Name (line 2027):
        # Getting the type of 'tuple_var_assignment_7023' (line 2027)
        tuple_var_assignment_7023_12441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2027, 20), 'tuple_var_assignment_7023')
        # Assigning a type to the variable 'valmax' (line 2027)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2027, 28), 'valmax', tuple_var_assignment_7023_12441)
        
        # Assigning a Call to a Name (line 2028):
        
        # Assigning a Call to a Name (line 2028):
        
        # Call to convert(...): (line 2028)
        # Processing the call arguments (line 2028)
        # Getting the type of 'valmin' (line 2028)
        valmin_12445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 50), 'valmin', False)
        # Getting the type of 'self' (line 2028)
        self_12446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 58), 'self', False)
        # Obtaining the member 'units' of a type (line 2028)
        units_12447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2028, 58), self_12446, 'units')
        # Getting the type of 'self' (line 2028)
        self_12448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 70), 'self', False)
        # Processing the call keyword arguments (line 2028)
        kwargs_12449 = {}
        # Getting the type of 'self' (line 2028)
        self_12442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2028, 27), 'self', False)
        # Obtaining the member 'converter' of a type (line 2028)
        converter_12443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2028, 27), self_12442, 'converter')
        # Obtaining the member 'convert' of a type (line 2028)
        convert_12444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2028, 27), converter_12443, 'convert')
        # Calling convert(args, kwargs) (line 2028)
        convert_call_result_12450 = invoke(stypy.reporting.localization.Localization(__file__, 2028, 27), convert_12444, *[valmin_12445, units_12447, self_12448], **kwargs_12449)
        
        # Assigning a type to the variable 'xmin' (line 2028)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2028, 20), 'xmin', convert_call_result_12450)
        
        # Assigning a Call to a Name (line 2029):
        
        # Assigning a Call to a Name (line 2029):
        
        # Call to convert(...): (line 2029)
        # Processing the call arguments (line 2029)
        # Getting the type of 'valmax' (line 2029)
        valmax_12454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 50), 'valmax', False)
        # Getting the type of 'self' (line 2029)
        self_12455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 58), 'self', False)
        # Obtaining the member 'units' of a type (line 2029)
        units_12456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2029, 58), self_12455, 'units')
        # Getting the type of 'self' (line 2029)
        self_12457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 70), 'self', False)
        # Processing the call keyword arguments (line 2029)
        kwargs_12458 = {}
        # Getting the type of 'self' (line 2029)
        self_12451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2029, 27), 'self', False)
        # Obtaining the member 'converter' of a type (line 2029)
        converter_12452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2029, 27), self_12451, 'converter')
        # Obtaining the member 'convert' of a type (line 2029)
        convert_12453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2029, 27), converter_12452, 'convert')
        # Calling convert(args, kwargs) (line 2029)
        convert_call_result_12459 = invoke(stypy.reporting.localization.Localization(__file__, 2029, 27), convert_12453, *[valmax_12454, units_12456, self_12457], **kwargs_12458)
        
        # Assigning a type to the variable 'xmax' (line 2029)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2029, 20), 'xmax', convert_call_result_12459)
        # SSA join for if statement (line 2026)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2024)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'dataMutated' (line 2030)
        dataMutated_12460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2030, 19), 'dataMutated')
        # Applying the 'not' unary operator (line 2030)
        result_not__12461 = python_operator(stypy.reporting.localization.Localization(__file__, 2030, 15), 'not', dataMutated_12460)
        
        # Testing the type of an if condition (line 2030)
        if_condition_12462 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2030, 12), result_not__12461)
        # Assigning a type to the variable 'if_condition_12462' (line 2030)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2030, 12), 'if_condition_12462', if_condition_12462)
        # SSA begins for if statement (line 2030)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 2031):
        
        # Assigning a Tuple to a Attribute (line 2031):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2031)
        tuple_12463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2031, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2031)
        # Adding element type (line 2031)
        # Getting the type of 'xmin' (line 2031)
        xmin_12464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 46), 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2031, 46), tuple_12463, xmin_12464)
        # Adding element type (line 2031)
        # Getting the type of 'xmax' (line 2031)
        xmax_12465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 52), 'xmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2031, 46), tuple_12463, xmax_12465)
        
        # Getting the type of 'self' (line 2031)
        self_12466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2031, 16), 'self')
        # Obtaining the member 'axes' of a type (line 2031)
        axes_12467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2031, 16), self_12466, 'axes')
        # Obtaining the member 'dataLim' of a type (line 2031)
        dataLim_12468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2031, 16), axes_12467, 'dataLim')
        # Setting the type of the member 'intervalx' of a type (line 2031)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2031, 16), dataLim_12468, 'intervalx', tuple_12463)
        # SSA join for if statement (line 2030)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'viewMutated' (line 2032)
        viewMutated_12469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2032, 19), 'viewMutated')
        # Applying the 'not' unary operator (line 2032)
        result_not__12470 = python_operator(stypy.reporting.localization.Localization(__file__, 2032, 15), 'not', viewMutated_12469)
        
        # Testing the type of an if condition (line 2032)
        if_condition_12471 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2032, 12), result_not__12470)
        # Assigning a type to the variable 'if_condition_12471' (line 2032)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2032, 12), 'if_condition_12471', if_condition_12471)
        # SSA begins for if statement (line 2032)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 2033):
        
        # Assigning a Tuple to a Attribute (line 2033):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2033)
        tuple_12472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2033, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2033)
        # Adding element type (line 2033)
        # Getting the type of 'xmin' (line 2033)
        xmin_12473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2033, 46), 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2033, 46), tuple_12472, xmin_12473)
        # Adding element type (line 2033)
        # Getting the type of 'xmax' (line 2033)
        xmax_12474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2033, 52), 'xmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2033, 46), tuple_12472, xmax_12474)
        
        # Getting the type of 'self' (line 2033)
        self_12475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2033, 16), 'self')
        # Obtaining the member 'axes' of a type (line 2033)
        axes_12476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2033, 16), self_12475, 'axes')
        # Obtaining the member 'viewLim' of a type (line 2033)
        viewLim_12477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2033, 16), axes_12476, 'viewLim')
        # Setting the type of the member 'intervalx' of a type (line 2033)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2033, 16), viewLim_12477, 'intervalx', tuple_12472)
        # SSA join for if statement (line 2032)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2023)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2034):
        
        # Assigning a Name to a Attribute (line 2034):
        # Getting the type of 'True' (line 2034)
        True_12478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 21), 'True')
        # Getting the type of 'self' (line 2034)
        self_12479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2034, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2034)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2034, 8), self_12479, 'stale', True_12478)
        
        # ################# End of 'set_default_intervals(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_default_intervals' in the type store
        # Getting the type of 'stypy_return_type' (line 2018)
        stypy_return_type_12480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2018, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12480)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_default_intervals'
        return stypy_return_type_12480


    @norecursion
    def get_tick_space(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_tick_space'
        module_type_store = module_type_store.open_function_context('get_tick_space', 2036, 4, False)
        # Assigning a type to the variable 'self' (line 2037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2037, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        XAxis.get_tick_space.__dict__.__setitem__('stypy_localization', localization)
        XAxis.get_tick_space.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        XAxis.get_tick_space.__dict__.__setitem__('stypy_type_store', module_type_store)
        XAxis.get_tick_space.__dict__.__setitem__('stypy_function_name', 'XAxis.get_tick_space')
        XAxis.get_tick_space.__dict__.__setitem__('stypy_param_names_list', [])
        XAxis.get_tick_space.__dict__.__setitem__('stypy_varargs_param_name', None)
        XAxis.get_tick_space.__dict__.__setitem__('stypy_kwargs_param_name', None)
        XAxis.get_tick_space.__dict__.__setitem__('stypy_call_defaults', defaults)
        XAxis.get_tick_space.__dict__.__setitem__('stypy_call_varargs', varargs)
        XAxis.get_tick_space.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        XAxis.get_tick_space.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.get_tick_space', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_tick_space', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_tick_space(...)' code ##################

        
        # Assigning a Call to a Name (line 2037):
        
        # Assigning a Call to a Name (line 2037):
        
        # Call to transform(...): (line 2037)
        # Processing the call arguments (line 2037)
        
        # Obtaining an instance of the builtin type 'list' (line 2037)
        list_12485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2037, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2037)
        # Adding element type (line 2037)
        
        # Obtaining an instance of the builtin type 'list' (line 2037)
        list_12486 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2037, 46), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2037)
        # Adding element type (line 2037)
        int_12487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2037, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2037, 46), list_12486, int_12487)
        # Adding element type (line 2037)
        int_12488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2037, 50), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2037, 46), list_12486, int_12488)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2037, 45), list_12485, list_12486)
        # Adding element type (line 2037)
        
        # Obtaining an instance of the builtin type 'list' (line 2037)
        list_12489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2037, 54), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2037)
        # Adding element type (line 2037)
        int_12490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2037, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2037, 54), list_12489, int_12490)
        # Adding element type (line 2037)
        int_12491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2037, 58), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2037, 54), list_12489, int_12491)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2037, 45), list_12485, list_12489)
        
        # Processing the call keyword arguments (line 2037)
        kwargs_12492 = {}
        # Getting the type of 'self' (line 2037)
        self_12481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2037, 15), 'self', False)
        # Obtaining the member 'axes' of a type (line 2037)
        axes_12482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2037, 15), self_12481, 'axes')
        # Obtaining the member 'transAxes' of a type (line 2037)
        transAxes_12483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2037, 15), axes_12482, 'transAxes')
        # Obtaining the member 'transform' of a type (line 2037)
        transform_12484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2037, 15), transAxes_12483, 'transform')
        # Calling transform(args, kwargs) (line 2037)
        transform_call_result_12493 = invoke(stypy.reporting.localization.Localization(__file__, 2037, 15), transform_12484, *[list_12485], **kwargs_12492)
        
        # Assigning a type to the variable 'ends' (line 2037)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2037, 8), 'ends', transform_call_result_12493)
        
        # Assigning a BinOp to a Name (line 2038):
        
        # Assigning a BinOp to a Name (line 2038):
        
        # Obtaining the type of the subscript
        int_12494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2038, 27), 'int')
        
        # Obtaining the type of the subscript
        int_12495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2038, 24), 'int')
        # Getting the type of 'ends' (line 2038)
        ends_12496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 19), 'ends')
        # Obtaining the member '__getitem__' of a type (line 2038)
        getitem___12497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 19), ends_12496, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2038)
        subscript_call_result_12498 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 19), getitem___12497, int_12495)
        
        # Obtaining the member '__getitem__' of a type (line 2038)
        getitem___12499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 19), subscript_call_result_12498, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2038)
        subscript_call_result_12500 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 19), getitem___12499, int_12494)
        
        
        # Obtaining the type of the subscript
        int_12501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2038, 40), 'int')
        
        # Obtaining the type of the subscript
        int_12502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2038, 37), 'int')
        # Getting the type of 'ends' (line 2038)
        ends_12503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 32), 'ends')
        # Obtaining the member '__getitem__' of a type (line 2038)
        getitem___12504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 32), ends_12503, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2038)
        subscript_call_result_12505 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 32), getitem___12504, int_12502)
        
        # Obtaining the member '__getitem__' of a type (line 2038)
        getitem___12506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 32), subscript_call_result_12505, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2038)
        subscript_call_result_12507 = invoke(stypy.reporting.localization.Localization(__file__, 2038, 32), getitem___12506, int_12501)
        
        # Applying the binary operator '-' (line 2038)
        result_sub_12508 = python_operator(stypy.reporting.localization.Localization(__file__, 2038, 19), '-', subscript_call_result_12500, subscript_call_result_12507)
        
        # Getting the type of 'self' (line 2038)
        self_12509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2038, 46), 'self')
        # Obtaining the member 'axes' of a type (line 2038)
        axes_12510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 46), self_12509, 'axes')
        # Obtaining the member 'figure' of a type (line 2038)
        figure_12511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 46), axes_12510, 'figure')
        # Obtaining the member 'dpi' of a type (line 2038)
        dpi_12512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2038, 46), figure_12511, 'dpi')
        # Applying the binary operator 'div' (line 2038)
        result_div_12513 = python_operator(stypy.reporting.localization.Localization(__file__, 2038, 18), 'div', result_sub_12508, dpi_12512)
        
        float_12514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2038, 70), 'float')
        # Applying the binary operator '*' (line 2038)
        result_mul_12515 = python_operator(stypy.reporting.localization.Localization(__file__, 2038, 17), '*', result_div_12513, float_12514)
        
        # Assigning a type to the variable 'length' (line 2038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2038, 8), 'length', result_mul_12515)
        
        # Assigning a Call to a Name (line 2039):
        
        # Assigning a Call to a Name (line 2039):
        
        # Call to _get_tick(...): (line 2039)
        # Processing the call arguments (line 2039)
        # Getting the type of 'True' (line 2039)
        True_12518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 30), 'True', False)
        # Processing the call keyword arguments (line 2039)
        kwargs_12519 = {}
        # Getting the type of 'self' (line 2039)
        self_12516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 15), 'self', False)
        # Obtaining the member '_get_tick' of a type (line 2039)
        _get_tick_12517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2039, 15), self_12516, '_get_tick')
        # Calling _get_tick(args, kwargs) (line 2039)
        _get_tick_call_result_12520 = invoke(stypy.reporting.localization.Localization(__file__, 2039, 15), _get_tick_12517, *[True_12518], **kwargs_12519)
        
        # Assigning a type to the variable 'tick' (line 2039)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2039, 8), 'tick', _get_tick_call_result_12520)
        
        # Assigning a BinOp to a Name (line 2042):
        
        # Assigning a BinOp to a Name (line 2042):
        
        # Call to get_size(...): (line 2042)
        # Processing the call keyword arguments (line 2042)
        kwargs_12524 = {}
        # Getting the type of 'tick' (line 2042)
        tick_12521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2042, 15), 'tick', False)
        # Obtaining the member 'label1' of a type (line 2042)
        label1_12522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2042, 15), tick_12521, 'label1')
        # Obtaining the member 'get_size' of a type (line 2042)
        get_size_12523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2042, 15), label1_12522, 'get_size')
        # Calling get_size(args, kwargs) (line 2042)
        get_size_call_result_12525 = invoke(stypy.reporting.localization.Localization(__file__, 2042, 15), get_size_12523, *[], **kwargs_12524)
        
        int_12526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2042, 40), 'int')
        # Applying the binary operator '*' (line 2042)
        result_mul_12527 = python_operator(stypy.reporting.localization.Localization(__file__, 2042, 15), '*', get_size_call_result_12525, int_12526)
        
        # Assigning a type to the variable 'size' (line 2042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2042, 8), 'size', result_mul_12527)
        
        
        # Getting the type of 'size' (line 2043)
        size_12528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 11), 'size')
        int_12529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2043, 18), 'int')
        # Applying the binary operator '>' (line 2043)
        result_gt_12530 = python_operator(stypy.reporting.localization.Localization(__file__, 2043, 11), '>', size_12528, int_12529)
        
        # Testing the type of an if condition (line 2043)
        if_condition_12531 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2043, 8), result_gt_12530)
        # Assigning a type to the variable 'if_condition_12531' (line 2043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2043, 8), 'if_condition_12531', if_condition_12531)
        # SSA begins for if statement (line 2043)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to int(...): (line 2044)
        # Processing the call arguments (line 2044)
        
        # Call to floor(...): (line 2044)
        # Processing the call arguments (line 2044)
        # Getting the type of 'length' (line 2044)
        length_12535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 32), 'length', False)
        # Getting the type of 'size' (line 2044)
        size_12536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 41), 'size', False)
        # Applying the binary operator 'div' (line 2044)
        result_div_12537 = python_operator(stypy.reporting.localization.Localization(__file__, 2044, 32), 'div', length_12535, size_12536)
        
        # Processing the call keyword arguments (line 2044)
        kwargs_12538 = {}
        # Getting the type of 'np' (line 2044)
        np_12533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 23), 'np', False)
        # Obtaining the member 'floor' of a type (line 2044)
        floor_12534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2044, 23), np_12533, 'floor')
        # Calling floor(args, kwargs) (line 2044)
        floor_call_result_12539 = invoke(stypy.reporting.localization.Localization(__file__, 2044, 23), floor_12534, *[result_div_12537], **kwargs_12538)
        
        # Processing the call keyword arguments (line 2044)
        kwargs_12540 = {}
        # Getting the type of 'int' (line 2044)
        int_12532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 19), 'int', False)
        # Calling int(args, kwargs) (line 2044)
        int_call_result_12541 = invoke(stypy.reporting.localization.Localization(__file__, 2044, 19), int_12532, *[floor_call_result_12539], **kwargs_12540)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2044, 12), 'stypy_return_type', int_call_result_12541)
        # SSA branch for the else part of an if statement (line 2043)
        module_type_store.open_ssa_branch('else')
        int_12542 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2046, 19), 'int')
        int_12543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2046, 22), 'int')
        # Applying the binary operator '**' (line 2046)
        result_pow_12544 = python_operator(stypy.reporting.localization.Localization(__file__, 2046, 19), '**', int_12542, int_12543)
        
        int_12545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2046, 27), 'int')
        # Applying the binary operator '-' (line 2046)
        result_sub_12546 = python_operator(stypy.reporting.localization.Localization(__file__, 2046, 19), '-', result_pow_12544, int_12545)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2046)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2046, 12), 'stypy_return_type', result_sub_12546)
        # SSA join for if statement (line 2043)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_tick_space(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_tick_space' in the type store
        # Getting the type of 'stypy_return_type' (line 2036)
        stypy_return_type_12547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2036, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12547)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_tick_space'
        return stypy_return_type_12547


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1720, 0, False)
        # Assigning a type to the variable 'self' (line 1721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1721, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'XAxis.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'XAxis' (line 1720)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 0), 'XAxis', XAxis)

# Assigning a Str to a Name (line 1721):
unicode_12548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 15), 'unicode', u'xaxis')
# Getting the type of 'XAxis'
XAxis_12549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'XAxis')
# Setting the type of the member '__name__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), XAxis_12549, '__name__', unicode_12548)

# Assigning a Str to a Name (line 1722):
unicode_12550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 16), 'unicode', u'x')
# Getting the type of 'XAxis'
XAxis_12551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'XAxis')
# Setting the type of the member 'axis_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), XAxis_12551, 'axis_name', unicode_12550)
# Declaration of the 'YAxis' class
# Getting the type of 'Axis' (line 2049)
Axis_12552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 12), 'Axis')

class YAxis(Axis_12552, ):
    
    # Assigning a Str to a Name (line 2050):
    
    # Assigning a Str to a Name (line 2051):

    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 2053, 4, False)
        # Assigning a type to the variable 'self' (line 2054)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2054, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.contains.__dict__.__setitem__('stypy_localization', localization)
        YAxis.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.contains.__dict__.__setitem__('stypy_function_name', 'YAxis.contains')
        YAxis.contains.__dict__.__setitem__('stypy_param_names_list', ['mouseevent'])
        YAxis.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.contains', ['mouseevent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['mouseevent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        unicode_12553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, (-1)), 'unicode', u'Test whether the mouse event occurred in the y axis.\n\n        Returns *True* | *False*\n        ')
        
        
        # Call to callable(...): (line 2058)
        # Processing the call arguments (line 2058)
        # Getting the type of 'self' (line 2058)
        self_12555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 20), 'self', False)
        # Obtaining the member '_contains' of a type (line 2058)
        _contains_12556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2058, 20), self_12555, '_contains')
        # Processing the call keyword arguments (line 2058)
        kwargs_12557 = {}
        # Getting the type of 'callable' (line 2058)
        callable_12554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2058, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 2058)
        callable_call_result_12558 = invoke(stypy.reporting.localization.Localization(__file__, 2058, 11), callable_12554, *[_contains_12556], **kwargs_12557)
        
        # Testing the type of an if condition (line 2058)
        if_condition_12559 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2058, 8), callable_call_result_12558)
        # Assigning a type to the variable 'if_condition_12559' (line 2058)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2058, 8), 'if_condition_12559', if_condition_12559)
        # SSA begins for if statement (line 2058)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _contains(...): (line 2059)
        # Processing the call arguments (line 2059)
        # Getting the type of 'self' (line 2059)
        self_12562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 34), 'self', False)
        # Getting the type of 'mouseevent' (line 2059)
        mouseevent_12563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 40), 'mouseevent', False)
        # Processing the call keyword arguments (line 2059)
        kwargs_12564 = {}
        # Getting the type of 'self' (line 2059)
        self_12560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2059, 19), 'self', False)
        # Obtaining the member '_contains' of a type (line 2059)
        _contains_12561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2059, 19), self_12560, '_contains')
        # Calling _contains(args, kwargs) (line 2059)
        _contains_call_result_12565 = invoke(stypy.reporting.localization.Localization(__file__, 2059, 19), _contains_12561, *[self_12562, mouseevent_12563], **kwargs_12564)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2059, 12), 'stypy_return_type', _contains_call_result_12565)
        # SSA join for if statement (line 2058)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 2061):
        
        # Assigning a Attribute to a Name (line 2061):
        # Getting the type of 'mouseevent' (line 2061)
        mouseevent_12566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 15), 'mouseevent')
        # Obtaining the member 'x' of a type (line 2061)
        x_12567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2061, 15), mouseevent_12566, 'x')
        # Assigning a type to the variable 'tuple_assignment_7024' (line 2061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2061, 8), 'tuple_assignment_7024', x_12567)
        
        # Assigning a Attribute to a Name (line 2061):
        # Getting the type of 'mouseevent' (line 2061)
        mouseevent_12568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 29), 'mouseevent')
        # Obtaining the member 'y' of a type (line 2061)
        y_12569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2061, 29), mouseevent_12568, 'y')
        # Assigning a type to the variable 'tuple_assignment_7025' (line 2061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2061, 8), 'tuple_assignment_7025', y_12569)
        
        # Assigning a Name to a Name (line 2061):
        # Getting the type of 'tuple_assignment_7024' (line 2061)
        tuple_assignment_7024_12570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 8), 'tuple_assignment_7024')
        # Assigning a type to the variable 'x' (line 2061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2061, 8), 'x', tuple_assignment_7024_12570)
        
        # Assigning a Name to a Name (line 2061):
        # Getting the type of 'tuple_assignment_7025' (line 2061)
        tuple_assignment_7025_12571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2061, 8), 'tuple_assignment_7025')
        # Assigning a type to the variable 'y' (line 2061)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2061, 11), 'y', tuple_assignment_7025_12571)
        
        
        # SSA begins for try-except statement (line 2062)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 2063):
        
        # Assigning a Call to a Name (line 2063):
        
        # Call to inverted(...): (line 2063)
        # Processing the call keyword arguments (line 2063)
        kwargs_12576 = {}
        # Getting the type of 'self' (line 2063)
        self_12572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 20), 'self', False)
        # Obtaining the member 'axes' of a type (line 2063)
        axes_12573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2063, 20), self_12572, 'axes')
        # Obtaining the member 'transAxes' of a type (line 2063)
        transAxes_12574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2063, 20), axes_12573, 'transAxes')
        # Obtaining the member 'inverted' of a type (line 2063)
        inverted_12575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2063, 20), transAxes_12574, 'inverted')
        # Calling inverted(args, kwargs) (line 2063)
        inverted_call_result_12577 = invoke(stypy.reporting.localization.Localization(__file__, 2063, 20), inverted_12575, *[], **kwargs_12576)
        
        # Assigning a type to the variable 'trans' (line 2063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2063, 12), 'trans', inverted_call_result_12577)
        
        # Assigning a Call to a Tuple (line 2064):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 2064)
        # Processing the call arguments (line 2064)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2064)
        tuple_12580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2064, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2064)
        # Adding element type (line 2064)
        # Getting the type of 'x' (line 2064)
        x_12581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 50), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2064, 50), tuple_12580, x_12581)
        # Adding element type (line 2064)
        # Getting the type of 'y' (line 2064)
        y_12582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 53), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2064, 50), tuple_12580, y_12582)
        
        # Processing the call keyword arguments (line 2064)
        kwargs_12583 = {}
        # Getting the type of 'trans' (line 2064)
        trans_12578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 27), 'trans', False)
        # Obtaining the member 'transform_point' of a type (line 2064)
        transform_point_12579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2064, 27), trans_12578, 'transform_point')
        # Calling transform_point(args, kwargs) (line 2064)
        transform_point_call_result_12584 = invoke(stypy.reporting.localization.Localization(__file__, 2064, 27), transform_point_12579, *[tuple_12580], **kwargs_12583)
        
        # Assigning a type to the variable 'call_assignment_7026' (line 2064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2064, 12), 'call_assignment_7026', transform_point_call_result_12584)
        
        # Assigning a Call to a Name (line 2064):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_12587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2064, 12), 'int')
        # Processing the call keyword arguments
        kwargs_12588 = {}
        # Getting the type of 'call_assignment_7026' (line 2064)
        call_assignment_7026_12585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 12), 'call_assignment_7026', False)
        # Obtaining the member '__getitem__' of a type (line 2064)
        getitem___12586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2064, 12), call_assignment_7026_12585, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_12589 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___12586, *[int_12587], **kwargs_12588)
        
        # Assigning a type to the variable 'call_assignment_7027' (line 2064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2064, 12), 'call_assignment_7027', getitem___call_result_12589)
        
        # Assigning a Name to a Name (line 2064):
        # Getting the type of 'call_assignment_7027' (line 2064)
        call_assignment_7027_12590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 12), 'call_assignment_7027')
        # Assigning a type to the variable 'xaxes' (line 2064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2064, 12), 'xaxes', call_assignment_7027_12590)
        
        # Assigning a Call to a Name (line 2064):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_12593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2064, 12), 'int')
        # Processing the call keyword arguments
        kwargs_12594 = {}
        # Getting the type of 'call_assignment_7026' (line 2064)
        call_assignment_7026_12591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 12), 'call_assignment_7026', False)
        # Obtaining the member '__getitem__' of a type (line 2064)
        getitem___12592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2064, 12), call_assignment_7026_12591, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_12595 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___12592, *[int_12593], **kwargs_12594)
        
        # Assigning a type to the variable 'call_assignment_7028' (line 2064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2064, 12), 'call_assignment_7028', getitem___call_result_12595)
        
        # Assigning a Name to a Name (line 2064):
        # Getting the type of 'call_assignment_7028' (line 2064)
        call_assignment_7028_12596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2064, 12), 'call_assignment_7028')
        # Assigning a type to the variable 'yaxes' (line 2064)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2064, 19), 'yaxes', call_assignment_7028_12596)
        # SSA branch for the except part of a try statement (line 2062)
        # SSA branch for the except 'ValueError' branch of a try statement (line 2062)
        module_type_store.open_ssa_branch('except')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2066)
        tuple_12597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2066, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2066)
        # Adding element type (line 2066)
        # Getting the type of 'False' (line 2066)
        False_12598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2066, 19), 'False')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2066, 19), tuple_12597, False_12598)
        # Adding element type (line 2066)
        
        # Obtaining an instance of the builtin type 'dict' (line 2066)
        dict_12599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2066, 26), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2066)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2066, 19), tuple_12597, dict_12599)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2066, 12), 'stypy_return_type', tuple_12597)
        # SSA join for try-except statement (line 2062)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 2067):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 2067)
        # Processing the call arguments (line 2067)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2067)
        tuple_12604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2067, 52), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2067)
        # Adding element type (line 2067)
        int_12605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2067, 52), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2067, 52), tuple_12604, int_12605)
        # Adding element type (line 2067)
        int_12606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2067, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2067, 52), tuple_12604, int_12606)
        
        # Processing the call keyword arguments (line 2067)
        kwargs_12607 = {}
        # Getting the type of 'self' (line 2067)
        self_12600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 15), 'self', False)
        # Obtaining the member 'axes' of a type (line 2067)
        axes_12601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2067, 15), self_12600, 'axes')
        # Obtaining the member 'transAxes' of a type (line 2067)
        transAxes_12602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2067, 15), axes_12601, 'transAxes')
        # Obtaining the member 'transform_point' of a type (line 2067)
        transform_point_12603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2067, 15), transAxes_12602, 'transform_point')
        # Calling transform_point(args, kwargs) (line 2067)
        transform_point_call_result_12608 = invoke(stypy.reporting.localization.Localization(__file__, 2067, 15), transform_point_12603, *[tuple_12604], **kwargs_12607)
        
        # Assigning a type to the variable 'call_assignment_7029' (line 2067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'call_assignment_7029', transform_point_call_result_12608)
        
        # Assigning a Call to a Name (line 2067):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_12611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2067, 8), 'int')
        # Processing the call keyword arguments
        kwargs_12612 = {}
        # Getting the type of 'call_assignment_7029' (line 2067)
        call_assignment_7029_12609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'call_assignment_7029', False)
        # Obtaining the member '__getitem__' of a type (line 2067)
        getitem___12610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2067, 8), call_assignment_7029_12609, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_12613 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___12610, *[int_12611], **kwargs_12612)
        
        # Assigning a type to the variable 'call_assignment_7030' (line 2067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'call_assignment_7030', getitem___call_result_12613)
        
        # Assigning a Name to a Name (line 2067):
        # Getting the type of 'call_assignment_7030' (line 2067)
        call_assignment_7030_12614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'call_assignment_7030')
        # Assigning a type to the variable 'l' (line 2067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'l', call_assignment_7030_12614)
        
        # Assigning a Call to a Name (line 2067):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_12617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2067, 8), 'int')
        # Processing the call keyword arguments
        kwargs_12618 = {}
        # Getting the type of 'call_assignment_7029' (line 2067)
        call_assignment_7029_12615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'call_assignment_7029', False)
        # Obtaining the member '__getitem__' of a type (line 2067)
        getitem___12616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2067, 8), call_assignment_7029_12615, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_12619 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___12616, *[int_12617], **kwargs_12618)
        
        # Assigning a type to the variable 'call_assignment_7031' (line 2067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'call_assignment_7031', getitem___call_result_12619)
        
        # Assigning a Name to a Name (line 2067):
        # Getting the type of 'call_assignment_7031' (line 2067)
        call_assignment_7031_12620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 8), 'call_assignment_7031')
        # Assigning a type to the variable 'b' (line 2067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2067, 11), 'b', call_assignment_7031_12620)
        
        # Assigning a Call to a Tuple (line 2068):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 2068)
        # Processing the call arguments (line 2068)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2068)
        tuple_12625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 52), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2068)
        # Adding element type (line 2068)
        int_12626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 52), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 52), tuple_12625, int_12626)
        # Adding element type (line 2068)
        int_12627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2068, 52), tuple_12625, int_12627)
        
        # Processing the call keyword arguments (line 2068)
        kwargs_12628 = {}
        # Getting the type of 'self' (line 2068)
        self_12621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 15), 'self', False)
        # Obtaining the member 'axes' of a type (line 2068)
        axes_12622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2068, 15), self_12621, 'axes')
        # Obtaining the member 'transAxes' of a type (line 2068)
        transAxes_12623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2068, 15), axes_12622, 'transAxes')
        # Obtaining the member 'transform_point' of a type (line 2068)
        transform_point_12624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2068, 15), transAxes_12623, 'transform_point')
        # Calling transform_point(args, kwargs) (line 2068)
        transform_point_call_result_12629 = invoke(stypy.reporting.localization.Localization(__file__, 2068, 15), transform_point_12624, *[tuple_12625], **kwargs_12628)
        
        # Assigning a type to the variable 'call_assignment_7032' (line 2068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'call_assignment_7032', transform_point_call_result_12629)
        
        # Assigning a Call to a Name (line 2068):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_12632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 8), 'int')
        # Processing the call keyword arguments
        kwargs_12633 = {}
        # Getting the type of 'call_assignment_7032' (line 2068)
        call_assignment_7032_12630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'call_assignment_7032', False)
        # Obtaining the member '__getitem__' of a type (line 2068)
        getitem___12631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2068, 8), call_assignment_7032_12630, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_12634 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___12631, *[int_12632], **kwargs_12633)
        
        # Assigning a type to the variable 'call_assignment_7033' (line 2068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'call_assignment_7033', getitem___call_result_12634)
        
        # Assigning a Name to a Name (line 2068):
        # Getting the type of 'call_assignment_7033' (line 2068)
        call_assignment_7033_12635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'call_assignment_7033')
        # Assigning a type to the variable 'r' (line 2068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'r', call_assignment_7033_12635)
        
        # Assigning a Call to a Name (line 2068):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_12638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2068, 8), 'int')
        # Processing the call keyword arguments
        kwargs_12639 = {}
        # Getting the type of 'call_assignment_7032' (line 2068)
        call_assignment_7032_12636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'call_assignment_7032', False)
        # Obtaining the member '__getitem__' of a type (line 2068)
        getitem___12637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2068, 8), call_assignment_7032_12636, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_12640 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___12637, *[int_12638], **kwargs_12639)
        
        # Assigning a type to the variable 'call_assignment_7034' (line 2068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'call_assignment_7034', getitem___call_result_12640)
        
        # Assigning a Name to a Name (line 2068):
        # Getting the type of 'call_assignment_7034' (line 2068)
        call_assignment_7034_12641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 8), 'call_assignment_7034')
        # Assigning a type to the variable 't' (line 2068)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2068, 11), 't', call_assignment_7034_12641)
        
        # Assigning a BoolOp to a Name (line 2069):
        
        # Assigning a BoolOp to a Name (line 2069):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'yaxes' (line 2069)
        yaxes_12642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 17), 'yaxes')
        int_12643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2069, 26), 'int')
        # Applying the binary operator '>=' (line 2069)
        result_ge_12644 = python_operator(stypy.reporting.localization.Localization(__file__, 2069, 17), '>=', yaxes_12642, int_12643)
        
        
        # Getting the type of 'yaxes' (line 2069)
        yaxes_12645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2069, 32), 'yaxes')
        int_12646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2069, 41), 'int')
        # Applying the binary operator '<=' (line 2069)
        result_le_12647 = python_operator(stypy.reporting.localization.Localization(__file__, 2069, 32), '<=', yaxes_12645, int_12646)
        
        # Applying the binary operator 'and' (line 2069)
        result_and_keyword_12648 = python_operator(stypy.reporting.localization.Localization(__file__, 2069, 17), 'and', result_ge_12644, result_le_12647)
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x' (line 2070)
        x_12649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 13), 'x')
        # Getting the type of 'l' (line 2070)
        l_12650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 17), 'l')
        # Applying the binary operator '<' (line 2070)
        result_lt_12651 = python_operator(stypy.reporting.localization.Localization(__file__, 2070, 13), '<', x_12649, l_12650)
        
        
        # Getting the type of 'x' (line 2070)
        x_12652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 23), 'x')
        # Getting the type of 'l' (line 2070)
        l_12653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 27), 'l')
        # Getting the type of 'self' (line 2070)
        self_12654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 31), 'self')
        # Obtaining the member 'pickradius' of a type (line 2070)
        pickradius_12655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2070, 31), self_12654, 'pickradius')
        # Applying the binary operator '-' (line 2070)
        result_sub_12656 = python_operator(stypy.reporting.localization.Localization(__file__, 2070, 27), '-', l_12653, pickradius_12655)
        
        # Applying the binary operator '>' (line 2070)
        result_gt_12657 = python_operator(stypy.reporting.localization.Localization(__file__, 2070, 23), '>', x_12652, result_sub_12656)
        
        # Applying the binary operator 'and' (line 2070)
        result_and_keyword_12658 = python_operator(stypy.reporting.localization.Localization(__file__, 2070, 13), 'and', result_lt_12651, result_gt_12657)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x' (line 2071)
        x_12659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 13), 'x')
        # Getting the type of 'r' (line 2071)
        r_12660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 17), 'r')
        # Applying the binary operator '>' (line 2071)
        result_gt_12661 = python_operator(stypy.reporting.localization.Localization(__file__, 2071, 13), '>', x_12659, r_12660)
        
        
        # Getting the type of 'x' (line 2071)
        x_12662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 23), 'x')
        # Getting the type of 'r' (line 2071)
        r_12663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 27), 'r')
        # Getting the type of 'self' (line 2071)
        self_12664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2071, 31), 'self')
        # Obtaining the member 'pickradius' of a type (line 2071)
        pickradius_12665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2071, 31), self_12664, 'pickradius')
        # Applying the binary operator '+' (line 2071)
        result_add_12666 = python_operator(stypy.reporting.localization.Localization(__file__, 2071, 27), '+', r_12663, pickradius_12665)
        
        # Applying the binary operator '<' (line 2071)
        result_lt_12667 = python_operator(stypy.reporting.localization.Localization(__file__, 2071, 23), '<', x_12662, result_add_12666)
        
        # Applying the binary operator 'and' (line 2071)
        result_and_keyword_12668 = python_operator(stypy.reporting.localization.Localization(__file__, 2071, 13), 'and', result_gt_12661, result_lt_12667)
        
        # Applying the binary operator 'or' (line 2070)
        result_or_keyword_12669 = python_operator(stypy.reporting.localization.Localization(__file__, 2070, 12), 'or', result_and_keyword_12658, result_and_keyword_12668)
        
        # Applying the binary operator 'and' (line 2069)
        result_and_keyword_12670 = python_operator(stypy.reporting.localization.Localization(__file__, 2069, 17), 'and', result_and_keyword_12648, result_or_keyword_12669)
        
        # Assigning a type to the variable 'inaxis' (line 2069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2069, 8), 'inaxis', result_and_keyword_12670)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2072)
        tuple_12671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2072, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2072)
        # Adding element type (line 2072)
        # Getting the type of 'inaxis' (line 2072)
        inaxis_12672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2072, 15), 'inaxis')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2072, 15), tuple_12671, inaxis_12672)
        # Adding element type (line 2072)
        
        # Obtaining an instance of the builtin type 'dict' (line 2072)
        dict_12673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2072, 23), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 2072)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2072, 15), tuple_12671, dict_12673)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2072, 8), 'stypy_return_type', tuple_12671)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 2053)
        stypy_return_type_12674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2053, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12674)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_12674


    @norecursion
    def _get_tick(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_tick'
        module_type_store = module_type_store.open_function_context('_get_tick', 2074, 4, False)
        # Assigning a type to the variable 'self' (line 2075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis._get_tick.__dict__.__setitem__('stypy_localization', localization)
        YAxis._get_tick.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis._get_tick.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis._get_tick.__dict__.__setitem__('stypy_function_name', 'YAxis._get_tick')
        YAxis._get_tick.__dict__.__setitem__('stypy_param_names_list', ['major'])
        YAxis._get_tick.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis._get_tick.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis._get_tick.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis._get_tick.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis._get_tick.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis._get_tick.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis._get_tick', ['major'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_tick', localization, ['major'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_tick(...)' code ##################

        
        # Getting the type of 'major' (line 2075)
        major_12675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2075, 11), 'major')
        # Testing the type of an if condition (line 2075)
        if_condition_12676 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2075, 8), major_12675)
        # Assigning a type to the variable 'if_condition_12676' (line 2075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2075, 8), 'if_condition_12676', if_condition_12676)
        # SSA begins for if statement (line 2075)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 2076):
        
        # Assigning a Attribute to a Name (line 2076):
        # Getting the type of 'self' (line 2076)
        self_12677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2076, 22), 'self')
        # Obtaining the member '_major_tick_kw' of a type (line 2076)
        _major_tick_kw_12678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2076, 22), self_12677, '_major_tick_kw')
        # Assigning a type to the variable 'tick_kw' (line 2076)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2076, 12), 'tick_kw', _major_tick_kw_12678)
        # SSA branch for the else part of an if statement (line 2075)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 2078):
        
        # Assigning a Attribute to a Name (line 2078):
        # Getting the type of 'self' (line 2078)
        self_12679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2078, 22), 'self')
        # Obtaining the member '_minor_tick_kw' of a type (line 2078)
        _minor_tick_kw_12680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2078, 22), self_12679, '_minor_tick_kw')
        # Assigning a type to the variable 'tick_kw' (line 2078)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2078, 12), 'tick_kw', _minor_tick_kw_12680)
        # SSA join for if statement (line 2075)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to YTick(...): (line 2079)
        # Processing the call arguments (line 2079)
        # Getting the type of 'self' (line 2079)
        self_12682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 21), 'self', False)
        # Obtaining the member 'axes' of a type (line 2079)
        axes_12683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2079, 21), self_12682, 'axes')
        int_12684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2079, 32), 'int')
        unicode_12685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2079, 35), 'unicode', u'')
        # Processing the call keyword arguments (line 2079)
        # Getting the type of 'major' (line 2079)
        major_12686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 45), 'major', False)
        keyword_12687 = major_12686
        # Getting the type of 'tick_kw' (line 2079)
        tick_kw_12688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 54), 'tick_kw', False)
        kwargs_12689 = {'tick_kw_12688': tick_kw_12688, 'major': keyword_12687}
        # Getting the type of 'YTick' (line 2079)
        YTick_12681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2079, 15), 'YTick', False)
        # Calling YTick(args, kwargs) (line 2079)
        YTick_call_result_12690 = invoke(stypy.reporting.localization.Localization(__file__, 2079, 15), YTick_12681, *[axes_12683, int_12684, unicode_12685], **kwargs_12689)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2079)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2079, 8), 'stypy_return_type', YTick_call_result_12690)
        
        # ################# End of '_get_tick(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_tick' in the type store
        # Getting the type of 'stypy_return_type' (line 2074)
        stypy_return_type_12691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2074, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12691)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_tick'
        return stypy_return_type_12691


    @norecursion
    def _get_label(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_label'
        module_type_store = module_type_store.open_function_context('_get_label', 2081, 4, False)
        # Assigning a type to the variable 'self' (line 2082)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2082, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis._get_label.__dict__.__setitem__('stypy_localization', localization)
        YAxis._get_label.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis._get_label.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis._get_label.__dict__.__setitem__('stypy_function_name', 'YAxis._get_label')
        YAxis._get_label.__dict__.__setitem__('stypy_param_names_list', [])
        YAxis._get_label.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis._get_label.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis._get_label.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis._get_label.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis._get_label.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis._get_label.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis._get_label', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_label', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_label(...)' code ##################

        
        # Assigning a Call to a Name (line 2084):
        
        # Assigning a Call to a Name (line 2084):
        
        # Call to Text(...): (line 2084)
        # Processing the call keyword arguments (line 2084)
        int_12694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, 29), 'int')
        keyword_12695 = int_12694
        float_12696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2084, 34), 'float')
        keyword_12697 = float_12696
        
        # Call to FontProperties(...): (line 2086)
        # Processing the call keyword arguments (line 2086)
        
        # Obtaining the type of the subscript
        unicode_12700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2087, 45), 'unicode', u'axes.labelsize')
        # Getting the type of 'rcParams' (line 2087)
        rcParams_12701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2087, 36), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 2087)
        getitem___12702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2087, 36), rcParams_12701, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2087)
        subscript_call_result_12703 = invoke(stypy.reporting.localization.Localization(__file__, 2087, 36), getitem___12702, unicode_12700)
        
        keyword_12704 = subscript_call_result_12703
        
        # Obtaining the type of the subscript
        unicode_12705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2088, 47), 'unicode', u'axes.labelweight')
        # Getting the type of 'rcParams' (line 2088)
        rcParams_12706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2088, 38), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 2088)
        getitem___12707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2088, 38), rcParams_12706, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2088)
        subscript_call_result_12708 = invoke(stypy.reporting.localization.Localization(__file__, 2088, 38), getitem___12707, unicode_12705)
        
        keyword_12709 = subscript_call_result_12708
        kwargs_12710 = {'weight': keyword_12709, 'size': keyword_12704}
        # Getting the type of 'font_manager' (line 2086)
        font_manager_12698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2086, 42), 'font_manager', False)
        # Obtaining the member 'FontProperties' of a type (line 2086)
        FontProperties_12699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2086, 42), font_manager_12698, 'FontProperties')
        # Calling FontProperties(args, kwargs) (line 2086)
        FontProperties_call_result_12711 = invoke(stypy.reporting.localization.Localization(__file__, 2086, 42), FontProperties_12699, *[], **kwargs_12710)
        
        keyword_12712 = FontProperties_call_result_12711
        
        # Obtaining the type of the subscript
        unicode_12713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2089, 42), 'unicode', u'axes.labelcolor')
        # Getting the type of 'rcParams' (line 2089)
        rcParams_12714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2089, 33), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 2089)
        getitem___12715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2089, 33), rcParams_12714, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2089)
        subscript_call_result_12716 = invoke(stypy.reporting.localization.Localization(__file__, 2089, 33), getitem___12715, unicode_12713)
        
        keyword_12717 = subscript_call_result_12716
        unicode_12718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2090, 45), 'unicode', u'bottom')
        keyword_12719 = unicode_12718
        unicode_12720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2091, 47), 'unicode', u'center')
        keyword_12721 = unicode_12720
        unicode_12722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2092, 36), 'unicode', u'vertical')
        keyword_12723 = unicode_12722
        unicode_12724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2093, 41), 'unicode', u'anchor')
        keyword_12725 = unicode_12724
        kwargs_12726 = {'rotation_mode': keyword_12725, 'color': keyword_12717, 'fontproperties': keyword_12712, 'verticalalignment': keyword_12719, 'y': keyword_12697, 'x': keyword_12695, 'rotation': keyword_12723, 'horizontalalignment': keyword_12721}
        # Getting the type of 'mtext' (line 2084)
        mtext_12692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2084, 16), 'mtext', False)
        # Obtaining the member 'Text' of a type (line 2084)
        Text_12693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2084, 16), mtext_12692, 'Text')
        # Calling Text(args, kwargs) (line 2084)
        Text_call_result_12727 = invoke(stypy.reporting.localization.Localization(__file__, 2084, 16), Text_12693, *[], **kwargs_12726)
        
        # Assigning a type to the variable 'label' (line 2084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2084, 8), 'label', Text_call_result_12727)
        
        # Call to set_transform(...): (line 2094)
        # Processing the call arguments (line 2094)
        
        # Call to blended_transform_factory(...): (line 2094)
        # Processing the call arguments (line 2094)
        
        # Call to IdentityTransform(...): (line 2095)
        # Processing the call keyword arguments (line 2095)
        kwargs_12734 = {}
        # Getting the type of 'mtransforms' (line 2095)
        mtransforms_12732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 12), 'mtransforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 2095)
        IdentityTransform_12733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2095, 12), mtransforms_12732, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 2095)
        IdentityTransform_call_result_12735 = invoke(stypy.reporting.localization.Localization(__file__, 2095, 12), IdentityTransform_12733, *[], **kwargs_12734)
        
        # Getting the type of 'self' (line 2095)
        self_12736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2095, 45), 'self', False)
        # Obtaining the member 'axes' of a type (line 2095)
        axes_12737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2095, 45), self_12736, 'axes')
        # Obtaining the member 'transAxes' of a type (line 2095)
        transAxes_12738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2095, 45), axes_12737, 'transAxes')
        # Processing the call keyword arguments (line 2094)
        kwargs_12739 = {}
        # Getting the type of 'mtransforms' (line 2094)
        mtransforms_12730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 28), 'mtransforms', False)
        # Obtaining the member 'blended_transform_factory' of a type (line 2094)
        blended_transform_factory_12731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 28), mtransforms_12730, 'blended_transform_factory')
        # Calling blended_transform_factory(args, kwargs) (line 2094)
        blended_transform_factory_call_result_12740 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 28), blended_transform_factory_12731, *[IdentityTransform_call_result_12735, transAxes_12738], **kwargs_12739)
        
        # Processing the call keyword arguments (line 2094)
        kwargs_12741 = {}
        # Getting the type of 'label' (line 2094)
        label_12728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2094, 8), 'label', False)
        # Obtaining the member 'set_transform' of a type (line 2094)
        set_transform_12729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2094, 8), label_12728, 'set_transform')
        # Calling set_transform(args, kwargs) (line 2094)
        set_transform_call_result_12742 = invoke(stypy.reporting.localization.Localization(__file__, 2094, 8), set_transform_12729, *[blended_transform_factory_call_result_12740], **kwargs_12741)
        
        
        # Call to _set_artist_props(...): (line 2097)
        # Processing the call arguments (line 2097)
        # Getting the type of 'label' (line 2097)
        label_12745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 31), 'label', False)
        # Processing the call keyword arguments (line 2097)
        kwargs_12746 = {}
        # Getting the type of 'self' (line 2097)
        self_12743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2097, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 2097)
        _set_artist_props_12744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2097, 8), self_12743, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 2097)
        _set_artist_props_call_result_12747 = invoke(stypy.reporting.localization.Localization(__file__, 2097, 8), _set_artist_props_12744, *[label_12745], **kwargs_12746)
        
        
        # Assigning a Str to a Attribute (line 2098):
        
        # Assigning a Str to a Attribute (line 2098):
        unicode_12748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2098, 30), 'unicode', u'left')
        # Getting the type of 'self' (line 2098)
        self_12749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2098, 8), 'self')
        # Setting the type of the member 'label_position' of a type (line 2098)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2098, 8), self_12749, 'label_position', unicode_12748)
        # Getting the type of 'label' (line 2099)
        label_12750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2099, 15), 'label')
        # Assigning a type to the variable 'stypy_return_type' (line 2099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2099, 8), 'stypy_return_type', label_12750)
        
        # ################# End of '_get_label(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_label' in the type store
        # Getting the type of 'stypy_return_type' (line 2081)
        stypy_return_type_12751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2081, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12751)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_label'
        return stypy_return_type_12751


    @norecursion
    def _get_offset_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_offset_text'
        module_type_store = module_type_store.open_function_context('_get_offset_text', 2101, 4, False)
        # Assigning a type to the variable 'self' (line 2102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2102, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis._get_offset_text.__dict__.__setitem__('stypy_localization', localization)
        YAxis._get_offset_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis._get_offset_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis._get_offset_text.__dict__.__setitem__('stypy_function_name', 'YAxis._get_offset_text')
        YAxis._get_offset_text.__dict__.__setitem__('stypy_param_names_list', [])
        YAxis._get_offset_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis._get_offset_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis._get_offset_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis._get_offset_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis._get_offset_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis._get_offset_text.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis._get_offset_text', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_offset_text', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_offset_text(...)' code ##################

        
        # Assigning a Call to a Name (line 2103):
        
        # Assigning a Call to a Name (line 2103):
        
        # Call to Text(...): (line 2103)
        # Processing the call keyword arguments (line 2103)
        int_12754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2103, 34), 'int')
        keyword_12755 = int_12754
        float_12756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2103, 39), 'float')
        keyword_12757 = float_12756
        
        # Call to FontProperties(...): (line 2104)
        # Processing the call keyword arguments (line 2104)
        
        # Obtaining the type of the subscript
        unicode_12760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2105, 50), 'unicode', u'ytick.labelsize')
        # Getting the type of 'rcParams' (line 2105)
        rcParams_12761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2105, 41), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 2105)
        getitem___12762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2105, 41), rcParams_12761, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2105)
        subscript_call_result_12763 = invoke(stypy.reporting.localization.Localization(__file__, 2105, 41), getitem___12762, unicode_12760)
        
        keyword_12764 = subscript_call_result_12763
        kwargs_12765 = {'size': keyword_12764}
        # Getting the type of 'font_manager' (line 2104)
        font_manager_12758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2104, 47), 'font_manager', False)
        # Obtaining the member 'FontProperties' of a type (line 2104)
        FontProperties_12759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2104, 47), font_manager_12758, 'FontProperties')
        # Calling FontProperties(args, kwargs) (line 2104)
        FontProperties_call_result_12766 = invoke(stypy.reporting.localization.Localization(__file__, 2104, 47), FontProperties_12759, *[], **kwargs_12765)
        
        keyword_12767 = FontProperties_call_result_12766
        
        # Obtaining the type of the subscript
        unicode_12768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2107, 47), 'unicode', u'ytick.color')
        # Getting the type of 'rcParams' (line 2107)
        rcParams_12769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2107, 38), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 2107)
        getitem___12770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2107, 38), rcParams_12769, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2107)
        subscript_call_result_12771 = invoke(stypy.reporting.localization.Localization(__file__, 2107, 38), getitem___12770, unicode_12768)
        
        keyword_12772 = subscript_call_result_12771
        unicode_12773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2108, 50), 'unicode', u'baseline')
        keyword_12774 = unicode_12773
        unicode_12775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2109, 52), 'unicode', u'left')
        keyword_12776 = unicode_12775
        kwargs_12777 = {'color': keyword_12772, 'fontproperties': keyword_12767, 'verticalalignment': keyword_12774, 'y': keyword_12757, 'x': keyword_12755, 'horizontalalignment': keyword_12776}
        # Getting the type of 'mtext' (line 2103)
        mtext_12752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2103, 21), 'mtext', False)
        # Obtaining the member 'Text' of a type (line 2103)
        Text_12753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2103, 21), mtext_12752, 'Text')
        # Calling Text(args, kwargs) (line 2103)
        Text_call_result_12778 = invoke(stypy.reporting.localization.Localization(__file__, 2103, 21), Text_12753, *[], **kwargs_12777)
        
        # Assigning a type to the variable 'offsetText' (line 2103)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2103, 8), 'offsetText', Text_call_result_12778)
        
        # Call to set_transform(...): (line 2110)
        # Processing the call arguments (line 2110)
        
        # Call to blended_transform_factory(...): (line 2110)
        # Processing the call arguments (line 2110)
        # Getting the type of 'self' (line 2111)
        self_12783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 12), 'self', False)
        # Obtaining the member 'axes' of a type (line 2111)
        axes_12784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2111, 12), self_12783, 'axes')
        # Obtaining the member 'transAxes' of a type (line 2111)
        transAxes_12785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2111, 12), axes_12784, 'transAxes')
        
        # Call to IdentityTransform(...): (line 2111)
        # Processing the call keyword arguments (line 2111)
        kwargs_12788 = {}
        # Getting the type of 'mtransforms' (line 2111)
        mtransforms_12786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2111, 33), 'mtransforms', False)
        # Obtaining the member 'IdentityTransform' of a type (line 2111)
        IdentityTransform_12787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2111, 33), mtransforms_12786, 'IdentityTransform')
        # Calling IdentityTransform(args, kwargs) (line 2111)
        IdentityTransform_call_result_12789 = invoke(stypy.reporting.localization.Localization(__file__, 2111, 33), IdentityTransform_12787, *[], **kwargs_12788)
        
        # Processing the call keyword arguments (line 2110)
        kwargs_12790 = {}
        # Getting the type of 'mtransforms' (line 2110)
        mtransforms_12781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 33), 'mtransforms', False)
        # Obtaining the member 'blended_transform_factory' of a type (line 2110)
        blended_transform_factory_12782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2110, 33), mtransforms_12781, 'blended_transform_factory')
        # Calling blended_transform_factory(args, kwargs) (line 2110)
        blended_transform_factory_call_result_12791 = invoke(stypy.reporting.localization.Localization(__file__, 2110, 33), blended_transform_factory_12782, *[transAxes_12785, IdentityTransform_call_result_12789], **kwargs_12790)
        
        # Processing the call keyword arguments (line 2110)
        kwargs_12792 = {}
        # Getting the type of 'offsetText' (line 2110)
        offsetText_12779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2110, 8), 'offsetText', False)
        # Obtaining the member 'set_transform' of a type (line 2110)
        set_transform_12780 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2110, 8), offsetText_12779, 'set_transform')
        # Calling set_transform(args, kwargs) (line 2110)
        set_transform_call_result_12793 = invoke(stypy.reporting.localization.Localization(__file__, 2110, 8), set_transform_12780, *[blended_transform_factory_call_result_12791], **kwargs_12792)
        
        
        # Call to _set_artist_props(...): (line 2113)
        # Processing the call arguments (line 2113)
        # Getting the type of 'offsetText' (line 2113)
        offsetText_12796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 31), 'offsetText', False)
        # Processing the call keyword arguments (line 2113)
        kwargs_12797 = {}
        # Getting the type of 'self' (line 2113)
        self_12794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 2113)
        _set_artist_props_12795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2113, 8), self_12794, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 2113)
        _set_artist_props_call_result_12798 = invoke(stypy.reporting.localization.Localization(__file__, 2113, 8), _set_artist_props_12795, *[offsetText_12796], **kwargs_12797)
        
        
        # Assigning a Str to a Attribute (line 2114):
        
        # Assigning a Str to a Attribute (line 2114):
        unicode_12799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2114, 36), 'unicode', u'left')
        # Getting the type of 'self' (line 2114)
        self_12800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2114, 8), 'self')
        # Setting the type of the member 'offset_text_position' of a type (line 2114)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2114, 8), self_12800, 'offset_text_position', unicode_12799)
        # Getting the type of 'offsetText' (line 2115)
        offsetText_12801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2115, 15), 'offsetText')
        # Assigning a type to the variable 'stypy_return_type' (line 2115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2115, 8), 'stypy_return_type', offsetText_12801)
        
        # ################# End of '_get_offset_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_offset_text' in the type store
        # Getting the type of 'stypy_return_type' (line 2101)
        stypy_return_type_12802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2101, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12802)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_offset_text'
        return stypy_return_type_12802


    @norecursion
    def _get_pixel_distance_along_axis(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_pixel_distance_along_axis'
        module_type_store = module_type_store.open_function_context('_get_pixel_distance_along_axis', 2117, 4, False)
        # Assigning a type to the variable 'self' (line 2118)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2118, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_localization', localization)
        YAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_function_name', 'YAxis._get_pixel_distance_along_axis')
        YAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_param_names_list', ['where', 'perturb'])
        YAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis._get_pixel_distance_along_axis.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis._get_pixel_distance_along_axis', ['where', 'perturb'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_pixel_distance_along_axis', localization, ['where', 'perturb'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_pixel_distance_along_axis(...)' code ##################

        unicode_12803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2128, (-1)), 'unicode', u'\n        Returns the amount, in data coordinates, that a single pixel\n        corresponds to in the locality given by *where*, which is also given\n        in data coordinates, and is a y coordinate.\n\n        *perturb* is the amount to perturb the pixel.  Usually +0.5 or -0.5.\n\n        Implementing this routine for an axis is optional; if present, it will\n        ensure that no ticks are lost due to round-off at the extreme ends of\n        an axis.\n        ')
        
        # Assigning a Attribute to a Name (line 2135):
        
        # Assigning a Attribute to a Name (line 2135):
        # Getting the type of 'self' (line 2135)
        self_12804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 16), 'self')
        # Obtaining the member 'axes' of a type (line 2135)
        axes_12805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 16), self_12804, 'axes')
        # Obtaining the member 'transData' of a type (line 2135)
        transData_12806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 16), axes_12805, 'transData')
        # Assigning a type to the variable 'trans' (line 2135)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2135, 8), 'trans', transData_12806)
        
        # Assigning a Call to a Name (line 2137):
        
        # Assigning a Call to a Name (line 2137):
        
        # Call to inverted(...): (line 2137)
        # Processing the call keyword arguments (line 2137)
        kwargs_12809 = {}
        # Getting the type of 'trans' (line 2137)
        trans_12807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2137, 19), 'trans', False)
        # Obtaining the member 'inverted' of a type (line 2137)
        inverted_12808 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2137, 19), trans_12807, 'inverted')
        # Calling inverted(args, kwargs) (line 2137)
        inverted_call_result_12810 = invoke(stypy.reporting.localization.Localization(__file__, 2137, 19), inverted_12808, *[], **kwargs_12809)
        
        # Assigning a type to the variable 'transinv' (line 2137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2137, 8), 'transinv', inverted_call_result_12810)
        
        # Assigning a Call to a Name (line 2138):
        
        # Assigning a Call to a Name (line 2138):
        
        # Call to transform_point(...): (line 2138)
        # Processing the call arguments (line 2138)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2138)
        tuple_12813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2138, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2138)
        # Adding element type (line 2138)
        float_12814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2138, 37), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2138, 37), tuple_12813, float_12814)
        # Adding element type (line 2138)
        # Getting the type of 'where' (line 2138)
        where_12815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 44), 'where', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2138, 37), tuple_12813, where_12815)
        
        # Processing the call keyword arguments (line 2138)
        kwargs_12816 = {}
        # Getting the type of 'trans' (line 2138)
        trans_12811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2138, 14), 'trans', False)
        # Obtaining the member 'transform_point' of a type (line 2138)
        transform_point_12812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2138, 14), trans_12811, 'transform_point')
        # Calling transform_point(args, kwargs) (line 2138)
        transform_point_call_result_12817 = invoke(stypy.reporting.localization.Localization(__file__, 2138, 14), transform_point_12812, *[tuple_12813], **kwargs_12816)
        
        # Assigning a type to the variable 'pix' (line 2138)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2138, 8), 'pix', transform_point_call_result_12817)
        
        # Assigning a Call to a Name (line 2140):
        
        # Assigning a Call to a Name (line 2140):
        
        # Call to transform_point(...): (line 2140)
        # Processing the call arguments (line 2140)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2140)
        tuple_12820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2140, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2140)
        # Adding element type (line 2140)
        
        # Obtaining the type of the subscript
        int_12821 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2140, 44), 'int')
        # Getting the type of 'pix' (line 2140)
        pix_12822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 40), 'pix', False)
        # Obtaining the member '__getitem__' of a type (line 2140)
        getitem___12823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2140, 40), pix_12822, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2140)
        subscript_call_result_12824 = invoke(stypy.reporting.localization.Localization(__file__, 2140, 40), getitem___12823, int_12821)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2140, 40), tuple_12820, subscript_call_result_12824)
        # Adding element type (line 2140)
        
        # Obtaining the type of the subscript
        int_12825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2140, 52), 'int')
        # Getting the type of 'pix' (line 2140)
        pix_12826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 48), 'pix', False)
        # Obtaining the member '__getitem__' of a type (line 2140)
        getitem___12827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2140, 48), pix_12826, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2140)
        subscript_call_result_12828 = invoke(stypy.reporting.localization.Localization(__file__, 2140, 48), getitem___12827, int_12825)
        
        # Getting the type of 'perturb' (line 2140)
        perturb_12829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 57), 'perturb', False)
        # Applying the binary operator '+' (line 2140)
        result_add_12830 = python_operator(stypy.reporting.localization.Localization(__file__, 2140, 48), '+', subscript_call_result_12828, perturb_12829)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2140, 40), tuple_12820, result_add_12830)
        
        # Processing the call keyword arguments (line 2140)
        kwargs_12831 = {}
        # Getting the type of 'transinv' (line 2140)
        transinv_12818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2140, 14), 'transinv', False)
        # Obtaining the member 'transform_point' of a type (line 2140)
        transform_point_12819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2140, 14), transinv_12818, 'transform_point')
        # Calling transform_point(args, kwargs) (line 2140)
        transform_point_call_result_12832 = invoke(stypy.reporting.localization.Localization(__file__, 2140, 14), transform_point_12819, *[tuple_12820], **kwargs_12831)
        
        # Assigning a type to the variable 'ptp' (line 2140)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2140, 8), 'ptp', transform_point_call_result_12832)
        
        # Assigning a Call to a Name (line 2141):
        
        # Assigning a Call to a Name (line 2141):
        
        # Call to abs(...): (line 2141)
        # Processing the call arguments (line 2141)
        
        # Obtaining the type of the subscript
        int_12834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 21), 'int')
        # Getting the type of 'ptp' (line 2141)
        ptp_12835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 17), 'ptp', False)
        # Obtaining the member '__getitem__' of a type (line 2141)
        getitem___12836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2141, 17), ptp_12835, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2141)
        subscript_call_result_12837 = invoke(stypy.reporting.localization.Localization(__file__, 2141, 17), getitem___12836, int_12834)
        
        # Getting the type of 'where' (line 2141)
        where_12838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 26), 'where', False)
        # Applying the binary operator '-' (line 2141)
        result_sub_12839 = python_operator(stypy.reporting.localization.Localization(__file__, 2141, 17), '-', subscript_call_result_12837, where_12838)
        
        # Processing the call keyword arguments (line 2141)
        kwargs_12840 = {}
        # Getting the type of 'abs' (line 2141)
        abs_12833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2141, 13), 'abs', False)
        # Calling abs(args, kwargs) (line 2141)
        abs_call_result_12841 = invoke(stypy.reporting.localization.Localization(__file__, 2141, 13), abs_12833, *[result_sub_12839], **kwargs_12840)
        
        # Assigning a type to the variable 'dy' (line 2141)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2141, 8), 'dy', abs_call_result_12841)
        # Getting the type of 'dy' (line 2142)
        dy_12842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2142, 15), 'dy')
        # Assigning a type to the variable 'stypy_return_type' (line 2142)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2142, 8), 'stypy_return_type', dy_12842)
        
        # ################# End of '_get_pixel_distance_along_axis(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_pixel_distance_along_axis' in the type store
        # Getting the type of 'stypy_return_type' (line 2117)
        stypy_return_type_12843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2117, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12843)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_pixel_distance_along_axis'
        return stypy_return_type_12843


    @norecursion
    def set_label_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_label_position'
        module_type_store = module_type_store.open_function_context('set_label_position', 2144, 4, False)
        # Assigning a type to the variable 'self' (line 2145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2145, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.set_label_position.__dict__.__setitem__('stypy_localization', localization)
        YAxis.set_label_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.set_label_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.set_label_position.__dict__.__setitem__('stypy_function_name', 'YAxis.set_label_position')
        YAxis.set_label_position.__dict__.__setitem__('stypy_param_names_list', ['position'])
        YAxis.set_label_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.set_label_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.set_label_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.set_label_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.set_label_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.set_label_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.set_label_position', ['position'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_label_position', localization, ['position'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_label_position(...)' code ##################

        unicode_12844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2149, (-1)), 'unicode', u"\n        Set the label position (left or right)\n\n        ACCEPTS: [ 'left' | 'right' ]\n        ")
        
        # Call to set_rotation_mode(...): (line 2150)
        # Processing the call arguments (line 2150)
        unicode_12848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2150, 37), 'unicode', u'anchor')
        # Processing the call keyword arguments (line 2150)
        kwargs_12849 = {}
        # Getting the type of 'self' (line 2150)
        self_12845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 8), 'self', False)
        # Obtaining the member 'label' of a type (line 2150)
        label_12846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2150, 8), self_12845, 'label')
        # Obtaining the member 'set_rotation_mode' of a type (line 2150)
        set_rotation_mode_12847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2150, 8), label_12846, 'set_rotation_mode')
        # Calling set_rotation_mode(args, kwargs) (line 2150)
        set_rotation_mode_call_result_12850 = invoke(stypy.reporting.localization.Localization(__file__, 2150, 8), set_rotation_mode_12847, *[unicode_12848], **kwargs_12849)
        
        
        # Call to set_horizontalalignment(...): (line 2151)
        # Processing the call arguments (line 2151)
        unicode_12854 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2151, 43), 'unicode', u'center')
        # Processing the call keyword arguments (line 2151)
        kwargs_12855 = {}
        # Getting the type of 'self' (line 2151)
        self_12851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 8), 'self', False)
        # Obtaining the member 'label' of a type (line 2151)
        label_12852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2151, 8), self_12851, 'label')
        # Obtaining the member 'set_horizontalalignment' of a type (line 2151)
        set_horizontalalignment_12853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2151, 8), label_12852, 'set_horizontalalignment')
        # Calling set_horizontalalignment(args, kwargs) (line 2151)
        set_horizontalalignment_call_result_12856 = invoke(stypy.reporting.localization.Localization(__file__, 2151, 8), set_horizontalalignment_12853, *[unicode_12854], **kwargs_12855)
        
        
        
        # Getting the type of 'position' (line 2152)
        position_12857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 11), 'position')
        unicode_12858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2152, 23), 'unicode', u'left')
        # Applying the binary operator '==' (line 2152)
        result_eq_12859 = python_operator(stypy.reporting.localization.Localization(__file__, 2152, 11), '==', position_12857, unicode_12858)
        
        # Testing the type of an if condition (line 2152)
        if_condition_12860 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2152, 8), result_eq_12859)
        # Assigning a type to the variable 'if_condition_12860' (line 2152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2152, 8), 'if_condition_12860', if_condition_12860)
        # SSA begins for if statement (line 2152)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_verticalalignment(...): (line 2153)
        # Processing the call arguments (line 2153)
        unicode_12864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2153, 45), 'unicode', u'bottom')
        # Processing the call keyword arguments (line 2153)
        kwargs_12865 = {}
        # Getting the type of 'self' (line 2153)
        self_12861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2153, 12), 'self', False)
        # Obtaining the member 'label' of a type (line 2153)
        label_12862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2153, 12), self_12861, 'label')
        # Obtaining the member 'set_verticalalignment' of a type (line 2153)
        set_verticalalignment_12863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2153, 12), label_12862, 'set_verticalalignment')
        # Calling set_verticalalignment(args, kwargs) (line 2153)
        set_verticalalignment_call_result_12866 = invoke(stypy.reporting.localization.Localization(__file__, 2153, 12), set_verticalalignment_12863, *[unicode_12864], **kwargs_12865)
        
        # SSA branch for the else part of an if statement (line 2152)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'position' (line 2154)
        position_12867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2154, 13), 'position')
        unicode_12868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2154, 25), 'unicode', u'right')
        # Applying the binary operator '==' (line 2154)
        result_eq_12869 = python_operator(stypy.reporting.localization.Localization(__file__, 2154, 13), '==', position_12867, unicode_12868)
        
        # Testing the type of an if condition (line 2154)
        if_condition_12870 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2154, 13), result_eq_12869)
        # Assigning a type to the variable 'if_condition_12870' (line 2154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2154, 13), 'if_condition_12870', if_condition_12870)
        # SSA begins for if statement (line 2154)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_verticalalignment(...): (line 2155)
        # Processing the call arguments (line 2155)
        unicode_12874 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2155, 45), 'unicode', u'top')
        # Processing the call keyword arguments (line 2155)
        kwargs_12875 = {}
        # Getting the type of 'self' (line 2155)
        self_12871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 12), 'self', False)
        # Obtaining the member 'label' of a type (line 2155)
        label_12872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2155, 12), self_12871, 'label')
        # Obtaining the member 'set_verticalalignment' of a type (line 2155)
        set_verticalalignment_12873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2155, 12), label_12872, 'set_verticalalignment')
        # Calling set_verticalalignment(args, kwargs) (line 2155)
        set_verticalalignment_call_result_12876 = invoke(stypy.reporting.localization.Localization(__file__, 2155, 12), set_verticalalignment_12873, *[unicode_12874], **kwargs_12875)
        
        # SSA branch for the else part of an if statement (line 2154)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 2157):
        
        # Assigning a Str to a Name (line 2157):
        unicode_12877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2157, 18), 'unicode', u"Position accepts only [ 'left' | 'right' ]")
        # Assigning a type to the variable 'msg' (line 2157)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2157, 12), 'msg', unicode_12877)
        
        # Call to ValueError(...): (line 2158)
        # Processing the call arguments (line 2158)
        # Getting the type of 'msg' (line 2158)
        msg_12879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 29), 'msg', False)
        # Processing the call keyword arguments (line 2158)
        kwargs_12880 = {}
        # Getting the type of 'ValueError' (line 2158)
        ValueError_12878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2158)
        ValueError_call_result_12881 = invoke(stypy.reporting.localization.Localization(__file__, 2158, 18), ValueError_12878, *[msg_12879], **kwargs_12880)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2158, 12), ValueError_call_result_12881, 'raise parameter', BaseException)
        # SSA join for if statement (line 2154)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2152)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2159):
        
        # Assigning a Name to a Attribute (line 2159):
        # Getting the type of 'position' (line 2159)
        position_12882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 30), 'position')
        # Getting the type of 'self' (line 2159)
        self_12883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 8), 'self')
        # Setting the type of the member 'label_position' of a type (line 2159)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2159, 8), self_12883, 'label_position', position_12882)
        
        # Assigning a Name to a Attribute (line 2160):
        
        # Assigning a Name to a Attribute (line 2160):
        # Getting the type of 'True' (line 2160)
        True_12884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 21), 'True')
        # Getting the type of 'self' (line 2160)
        self_12885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2160)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2160, 8), self_12885, 'stale', True_12884)
        
        # ################# End of 'set_label_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_label_position' in the type store
        # Getting the type of 'stypy_return_type' (line 2144)
        stypy_return_type_12886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2144, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_12886)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_label_position'
        return stypy_return_type_12886


    @norecursion
    def _update_label_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_label_position'
        module_type_store = module_type_store.open_function_context('_update_label_position', 2162, 4, False)
        # Assigning a type to the variable 'self' (line 2163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2163, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis._update_label_position.__dict__.__setitem__('stypy_localization', localization)
        YAxis._update_label_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis._update_label_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis._update_label_position.__dict__.__setitem__('stypy_function_name', 'YAxis._update_label_position')
        YAxis._update_label_position.__dict__.__setitem__('stypy_param_names_list', ['bboxes', 'bboxes2'])
        YAxis._update_label_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis._update_label_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis._update_label_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis._update_label_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis._update_label_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis._update_label_position.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis._update_label_position', ['bboxes', 'bboxes2'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_label_position', localization, ['bboxes', 'bboxes2'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_label_position(...)' code ##################

        unicode_12887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2166, (-1)), 'unicode', u'\n        Update the label position based on the bounding box enclosing\n        all the ticklabels and axis spine\n        ')
        
        
        # Getting the type of 'self' (line 2167)
        self_12888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2167, 15), 'self')
        # Obtaining the member '_autolabelpos' of a type (line 2167)
        _autolabelpos_12889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2167, 15), self_12888, '_autolabelpos')
        # Applying the 'not' unary operator (line 2167)
        result_not__12890 = python_operator(stypy.reporting.localization.Localization(__file__, 2167, 11), 'not', _autolabelpos_12889)
        
        # Testing the type of an if condition (line 2167)
        if_condition_12891 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2167, 8), result_not__12890)
        # Assigning a type to the variable 'if_condition_12891' (line 2167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2167, 8), 'if_condition_12891', if_condition_12891)
        # SSA begins for if statement (line 2167)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 2168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2168, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 2167)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 2169):
        
        # Assigning a Call to a Name:
        
        # Call to get_position(...): (line 2169)
        # Processing the call keyword arguments (line 2169)
        kwargs_12895 = {}
        # Getting the type of 'self' (line 2169)
        self_12892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 15), 'self', False)
        # Obtaining the member 'label' of a type (line 2169)
        label_12893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 15), self_12892, 'label')
        # Obtaining the member 'get_position' of a type (line 2169)
        get_position_12894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 15), label_12893, 'get_position')
        # Calling get_position(args, kwargs) (line 2169)
        get_position_call_result_12896 = invoke(stypy.reporting.localization.Localization(__file__, 2169, 15), get_position_12894, *[], **kwargs_12895)
        
        # Assigning a type to the variable 'call_assignment_7035' (line 2169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 8), 'call_assignment_7035', get_position_call_result_12896)
        
        # Assigning a Call to a Name (line 2169):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_12899 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2169, 8), 'int')
        # Processing the call keyword arguments
        kwargs_12900 = {}
        # Getting the type of 'call_assignment_7035' (line 2169)
        call_assignment_7035_12897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 8), 'call_assignment_7035', False)
        # Obtaining the member '__getitem__' of a type (line 2169)
        getitem___12898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 8), call_assignment_7035_12897, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_12901 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___12898, *[int_12899], **kwargs_12900)
        
        # Assigning a type to the variable 'call_assignment_7036' (line 2169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 8), 'call_assignment_7036', getitem___call_result_12901)
        
        # Assigning a Name to a Name (line 2169):
        # Getting the type of 'call_assignment_7036' (line 2169)
        call_assignment_7036_12902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 8), 'call_assignment_7036')
        # Assigning a type to the variable 'x' (line 2169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 8), 'x', call_assignment_7036_12902)
        
        # Assigning a Call to a Name (line 2169):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_12905 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2169, 8), 'int')
        # Processing the call keyword arguments
        kwargs_12906 = {}
        # Getting the type of 'call_assignment_7035' (line 2169)
        call_assignment_7035_12903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 8), 'call_assignment_7035', False)
        # Obtaining the member '__getitem__' of a type (line 2169)
        getitem___12904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2169, 8), call_assignment_7035_12903, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_12907 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___12904, *[int_12905], **kwargs_12906)
        
        # Assigning a type to the variable 'call_assignment_7037' (line 2169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 8), 'call_assignment_7037', getitem___call_result_12907)
        
        # Assigning a Name to a Name (line 2169):
        # Getting the type of 'call_assignment_7037' (line 2169)
        call_assignment_7037_12908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 8), 'call_assignment_7037')
        # Assigning a type to the variable 'y' (line 2169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 11), 'y', call_assignment_7037_12908)
        
        
        # Getting the type of 'self' (line 2170)
        self_12909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 11), 'self')
        # Obtaining the member 'label_position' of a type (line 2170)
        label_position_12910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2170, 11), self_12909, 'label_position')
        unicode_12911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2170, 34), 'unicode', u'left')
        # Applying the binary operator '==' (line 2170)
        result_eq_12912 = python_operator(stypy.reporting.localization.Localization(__file__, 2170, 11), '==', label_position_12910, unicode_12911)
        
        # Testing the type of an if condition (line 2170)
        if_condition_12913 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2170, 8), result_eq_12912)
        # Assigning a type to the variable 'if_condition_12913' (line 2170)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2170, 8), 'if_condition_12913', if_condition_12913)
        # SSA begins for if statement (line 2170)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 2171)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 2172):
        
        # Assigning a Subscript to a Name (line 2172):
        
        # Obtaining the type of the subscript
        unicode_12914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2172, 41), 'unicode', u'left')
        # Getting the type of 'self' (line 2172)
        self_12915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 24), 'self')
        # Obtaining the member 'axes' of a type (line 2172)
        axes_12916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2172, 24), self_12915, 'axes')
        # Obtaining the member 'spines' of a type (line 2172)
        spines_12917 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2172, 24), axes_12916, 'spines')
        # Obtaining the member '__getitem__' of a type (line 2172)
        getitem___12918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2172, 24), spines_12917, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2172)
        subscript_call_result_12919 = invoke(stypy.reporting.localization.Localization(__file__, 2172, 24), getitem___12918, unicode_12914)
        
        # Assigning a type to the variable 'spine' (line 2172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2172, 16), 'spine', subscript_call_result_12919)
        
        # Assigning a Call to a Name (line 2173):
        
        # Assigning a Call to a Name (line 2173):
        
        # Call to get_extents(...): (line 2173)
        # Processing the call keyword arguments (line 2173)
        kwargs_12932 = {}
        
        # Call to transform_path(...): (line 2173)
        # Processing the call arguments (line 2173)
        
        # Call to get_path(...): (line 2174)
        # Processing the call keyword arguments (line 2174)
        kwargs_12927 = {}
        # Getting the type of 'spine' (line 2174)
        spine_12925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2174, 20), 'spine', False)
        # Obtaining the member 'get_path' of a type (line 2174)
        get_path_12926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2174, 20), spine_12925, 'get_path')
        # Calling get_path(args, kwargs) (line 2174)
        get_path_call_result_12928 = invoke(stypy.reporting.localization.Localization(__file__, 2174, 20), get_path_12926, *[], **kwargs_12927)
        
        # Processing the call keyword arguments (line 2173)
        kwargs_12929 = {}
        
        # Call to get_transform(...): (line 2173)
        # Processing the call keyword arguments (line 2173)
        kwargs_12922 = {}
        # Getting the type of 'spine' (line 2173)
        spine_12920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 28), 'spine', False)
        # Obtaining the member 'get_transform' of a type (line 2173)
        get_transform_12921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2173, 28), spine_12920, 'get_transform')
        # Calling get_transform(args, kwargs) (line 2173)
        get_transform_call_result_12923 = invoke(stypy.reporting.localization.Localization(__file__, 2173, 28), get_transform_12921, *[], **kwargs_12922)
        
        # Obtaining the member 'transform_path' of a type (line 2173)
        transform_path_12924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2173, 28), get_transform_call_result_12923, 'transform_path')
        # Calling transform_path(args, kwargs) (line 2173)
        transform_path_call_result_12930 = invoke(stypy.reporting.localization.Localization(__file__, 2173, 28), transform_path_12924, *[get_path_call_result_12928], **kwargs_12929)
        
        # Obtaining the member 'get_extents' of a type (line 2173)
        get_extents_12931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2173, 28), transform_path_call_result_12930, 'get_extents')
        # Calling get_extents(args, kwargs) (line 2173)
        get_extents_call_result_12933 = invoke(stypy.reporting.localization.Localization(__file__, 2173, 28), get_extents_12931, *[], **kwargs_12932)
        
        # Assigning a type to the variable 'spinebbox' (line 2173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2173, 16), 'spinebbox', get_extents_call_result_12933)
        # SSA branch for the except part of a try statement (line 2171)
        # SSA branch for the except 'KeyError' branch of a try statement (line 2171)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Attribute to a Name (line 2177):
        
        # Assigning a Attribute to a Name (line 2177):
        # Getting the type of 'self' (line 2177)
        self_12934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 28), 'self')
        # Obtaining the member 'axes' of a type (line 2177)
        axes_12935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2177, 28), self_12934, 'axes')
        # Obtaining the member 'bbox' of a type (line 2177)
        bbox_12936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2177, 28), axes_12935, 'bbox')
        # Assigning a type to the variable 'spinebbox' (line 2177)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2177, 16), 'spinebbox', bbox_12936)
        # SSA join for try-except statement (line 2171)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2178):
        
        # Assigning a Call to a Name (line 2178):
        
        # Call to union(...): (line 2178)
        # Processing the call arguments (line 2178)
        # Getting the type of 'bboxes' (line 2178)
        bboxes_12940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 42), 'bboxes', False)
        
        # Obtaining an instance of the builtin type 'list' (line 2178)
        list_12941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2178, 51), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2178)
        # Adding element type (line 2178)
        # Getting the type of 'spinebbox' (line 2178)
        spinebbox_12942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 52), 'spinebbox', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2178, 51), list_12941, spinebbox_12942)
        
        # Applying the binary operator '+' (line 2178)
        result_add_12943 = python_operator(stypy.reporting.localization.Localization(__file__, 2178, 42), '+', bboxes_12940, list_12941)
        
        # Processing the call keyword arguments (line 2178)
        kwargs_12944 = {}
        # Getting the type of 'mtransforms' (line 2178)
        mtransforms_12937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 19), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 2178)
        Bbox_12938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2178, 19), mtransforms_12937, 'Bbox')
        # Obtaining the member 'union' of a type (line 2178)
        union_12939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2178, 19), Bbox_12938, 'union')
        # Calling union(args, kwargs) (line 2178)
        union_call_result_12945 = invoke(stypy.reporting.localization.Localization(__file__, 2178, 19), union_12939, *[result_add_12943], **kwargs_12944)
        
        # Assigning a type to the variable 'bbox' (line 2178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 12), 'bbox', union_call_result_12945)
        
        # Assigning a Attribute to a Name (line 2179):
        
        # Assigning a Attribute to a Name (line 2179):
        # Getting the type of 'bbox' (line 2179)
        bbox_12946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2179, 19), 'bbox')
        # Obtaining the member 'x0' of a type (line 2179)
        x0_12947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2179, 19), bbox_12946, 'x0')
        # Assigning a type to the variable 'left' (line 2179)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2179, 12), 'left', x0_12947)
        
        # Call to set_position(...): (line 2181)
        # Processing the call arguments (line 2181)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2182)
        tuple_12951 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2182)
        # Adding element type (line 2182)
        # Getting the type of 'left' (line 2182)
        left_12952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 17), 'left', False)
        # Getting the type of 'self' (line 2182)
        self_12953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 24), 'self', False)
        # Obtaining the member 'labelpad' of a type (line 2182)
        labelpad_12954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 24), self_12953, 'labelpad')
        # Getting the type of 'self' (line 2182)
        self_12955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 40), 'self', False)
        # Obtaining the member 'figure' of a type (line 2182)
        figure_12956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 40), self_12955, 'figure')
        # Obtaining the member 'dpi' of a type (line 2182)
        dpi_12957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 40), figure_12956, 'dpi')
        # Applying the binary operator '*' (line 2182)
        result_mul_12958 = python_operator(stypy.reporting.localization.Localization(__file__, 2182, 24), '*', labelpad_12954, dpi_12957)
        
        float_12959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2182, 58), 'float')
        # Applying the binary operator 'div' (line 2182)
        result_div_12960 = python_operator(stypy.reporting.localization.Localization(__file__, 2182, 56), 'div', result_mul_12958, float_12959)
        
        # Applying the binary operator '-' (line 2182)
        result_sub_12961 = python_operator(stypy.reporting.localization.Localization(__file__, 2182, 17), '-', left_12952, result_div_12960)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2182, 17), tuple_12951, result_sub_12961)
        # Adding element type (line 2182)
        # Getting the type of 'y' (line 2182)
        y_12962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 64), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2182, 17), tuple_12951, y_12962)
        
        # Processing the call keyword arguments (line 2181)
        kwargs_12963 = {}
        # Getting the type of 'self' (line 2181)
        self_12948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 12), 'self', False)
        # Obtaining the member 'label' of a type (line 2181)
        label_12949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 12), self_12948, 'label')
        # Obtaining the member 'set_position' of a type (line 2181)
        set_position_12950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2181, 12), label_12949, 'set_position')
        # Calling set_position(args, kwargs) (line 2181)
        set_position_call_result_12964 = invoke(stypy.reporting.localization.Localization(__file__, 2181, 12), set_position_12950, *[tuple_12951], **kwargs_12963)
        
        # SSA branch for the else part of an if statement (line 2170)
        module_type_store.open_ssa_branch('else')
        
        
        # SSA begins for try-except statement (line 2186)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Subscript to a Name (line 2187):
        
        # Assigning a Subscript to a Name (line 2187):
        
        # Obtaining the type of the subscript
        unicode_12965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2187, 41), 'unicode', u'right')
        # Getting the type of 'self' (line 2187)
        self_12966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2187, 24), 'self')
        # Obtaining the member 'axes' of a type (line 2187)
        axes_12967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2187, 24), self_12966, 'axes')
        # Obtaining the member 'spines' of a type (line 2187)
        spines_12968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2187, 24), axes_12967, 'spines')
        # Obtaining the member '__getitem__' of a type (line 2187)
        getitem___12969 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2187, 24), spines_12968, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2187)
        subscript_call_result_12970 = invoke(stypy.reporting.localization.Localization(__file__, 2187, 24), getitem___12969, unicode_12965)
        
        # Assigning a type to the variable 'spine' (line 2187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2187, 16), 'spine', subscript_call_result_12970)
        
        # Assigning a Call to a Name (line 2188):
        
        # Assigning a Call to a Name (line 2188):
        
        # Call to get_extents(...): (line 2188)
        # Processing the call keyword arguments (line 2188)
        kwargs_12983 = {}
        
        # Call to transform_path(...): (line 2188)
        # Processing the call arguments (line 2188)
        
        # Call to get_path(...): (line 2189)
        # Processing the call keyword arguments (line 2189)
        kwargs_12978 = {}
        # Getting the type of 'spine' (line 2189)
        spine_12976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2189, 20), 'spine', False)
        # Obtaining the member 'get_path' of a type (line 2189)
        get_path_12977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2189, 20), spine_12976, 'get_path')
        # Calling get_path(args, kwargs) (line 2189)
        get_path_call_result_12979 = invoke(stypy.reporting.localization.Localization(__file__, 2189, 20), get_path_12977, *[], **kwargs_12978)
        
        # Processing the call keyword arguments (line 2188)
        kwargs_12980 = {}
        
        # Call to get_transform(...): (line 2188)
        # Processing the call keyword arguments (line 2188)
        kwargs_12973 = {}
        # Getting the type of 'spine' (line 2188)
        spine_12971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2188, 28), 'spine', False)
        # Obtaining the member 'get_transform' of a type (line 2188)
        get_transform_12972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 28), spine_12971, 'get_transform')
        # Calling get_transform(args, kwargs) (line 2188)
        get_transform_call_result_12974 = invoke(stypy.reporting.localization.Localization(__file__, 2188, 28), get_transform_12972, *[], **kwargs_12973)
        
        # Obtaining the member 'transform_path' of a type (line 2188)
        transform_path_12975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 28), get_transform_call_result_12974, 'transform_path')
        # Calling transform_path(args, kwargs) (line 2188)
        transform_path_call_result_12981 = invoke(stypy.reporting.localization.Localization(__file__, 2188, 28), transform_path_12975, *[get_path_call_result_12979], **kwargs_12980)
        
        # Obtaining the member 'get_extents' of a type (line 2188)
        get_extents_12982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2188, 28), transform_path_call_result_12981, 'get_extents')
        # Calling get_extents(args, kwargs) (line 2188)
        get_extents_call_result_12984 = invoke(stypy.reporting.localization.Localization(__file__, 2188, 28), get_extents_12982, *[], **kwargs_12983)
        
        # Assigning a type to the variable 'spinebbox' (line 2188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2188, 16), 'spinebbox', get_extents_call_result_12984)
        # SSA branch for the except part of a try statement (line 2186)
        # SSA branch for the except 'KeyError' branch of a try statement (line 2186)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Attribute to a Name (line 2192):
        
        # Assigning a Attribute to a Name (line 2192):
        # Getting the type of 'self' (line 2192)
        self_12985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2192, 28), 'self')
        # Obtaining the member 'axes' of a type (line 2192)
        axes_12986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2192, 28), self_12985, 'axes')
        # Obtaining the member 'bbox' of a type (line 2192)
        bbox_12987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2192, 28), axes_12986, 'bbox')
        # Assigning a type to the variable 'spinebbox' (line 2192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2192, 16), 'spinebbox', bbox_12987)
        # SSA join for try-except statement (line 2186)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 2193):
        
        # Assigning a Call to a Name (line 2193):
        
        # Call to union(...): (line 2193)
        # Processing the call arguments (line 2193)
        # Getting the type of 'bboxes2' (line 2193)
        bboxes2_12991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 42), 'bboxes2', False)
        
        # Obtaining an instance of the builtin type 'list' (line 2193)
        list_12992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2193, 52), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2193)
        # Adding element type (line 2193)
        # Getting the type of 'spinebbox' (line 2193)
        spinebbox_12993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 53), 'spinebbox', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2193, 52), list_12992, spinebbox_12993)
        
        # Applying the binary operator '+' (line 2193)
        result_add_12994 = python_operator(stypy.reporting.localization.Localization(__file__, 2193, 42), '+', bboxes2_12991, list_12992)
        
        # Processing the call keyword arguments (line 2193)
        kwargs_12995 = {}
        # Getting the type of 'mtransforms' (line 2193)
        mtransforms_12988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2193, 19), 'mtransforms', False)
        # Obtaining the member 'Bbox' of a type (line 2193)
        Bbox_12989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2193, 19), mtransforms_12988, 'Bbox')
        # Obtaining the member 'union' of a type (line 2193)
        union_12990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2193, 19), Bbox_12989, 'union')
        # Calling union(args, kwargs) (line 2193)
        union_call_result_12996 = invoke(stypy.reporting.localization.Localization(__file__, 2193, 19), union_12990, *[result_add_12994], **kwargs_12995)
        
        # Assigning a type to the variable 'bbox' (line 2193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2193, 12), 'bbox', union_call_result_12996)
        
        # Assigning a Attribute to a Name (line 2194):
        
        # Assigning a Attribute to a Name (line 2194):
        # Getting the type of 'bbox' (line 2194)
        bbox_12997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2194, 20), 'bbox')
        # Obtaining the member 'x1' of a type (line 2194)
        x1_12998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2194, 20), bbox_12997, 'x1')
        # Assigning a type to the variable 'right' (line 2194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2194, 12), 'right', x1_12998)
        
        # Call to set_position(...): (line 2196)
        # Processing the call arguments (line 2196)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2197)
        tuple_13002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2197)
        # Adding element type (line 2197)
        # Getting the type of 'right' (line 2197)
        right_13003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 17), 'right', False)
        # Getting the type of 'self' (line 2197)
        self_13004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 25), 'self', False)
        # Obtaining the member 'labelpad' of a type (line 2197)
        labelpad_13005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 25), self_13004, 'labelpad')
        # Getting the type of 'self' (line 2197)
        self_13006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 41), 'self', False)
        # Obtaining the member 'figure' of a type (line 2197)
        figure_13007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 41), self_13006, 'figure')
        # Obtaining the member 'dpi' of a type (line 2197)
        dpi_13008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2197, 41), figure_13007, 'dpi')
        # Applying the binary operator '*' (line 2197)
        result_mul_13009 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 25), '*', labelpad_13005, dpi_13008)
        
        float_13010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2197, 59), 'float')
        # Applying the binary operator 'div' (line 2197)
        result_div_13011 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 57), 'div', result_mul_13009, float_13010)
        
        # Applying the binary operator '+' (line 2197)
        result_add_13012 = python_operator(stypy.reporting.localization.Localization(__file__, 2197, 17), '+', right_13003, result_div_13011)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2197, 17), tuple_13002, result_add_13012)
        # Adding element type (line 2197)
        # Getting the type of 'y' (line 2197)
        y_13013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2197, 65), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2197, 17), tuple_13002, y_13013)
        
        # Processing the call keyword arguments (line 2196)
        kwargs_13014 = {}
        # Getting the type of 'self' (line 2196)
        self_12999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2196, 12), 'self', False)
        # Obtaining the member 'label' of a type (line 2196)
        label_13000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2196, 12), self_12999, 'label')
        # Obtaining the member 'set_position' of a type (line 2196)
        set_position_13001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2196, 12), label_13000, 'set_position')
        # Calling set_position(args, kwargs) (line 2196)
        set_position_call_result_13015 = invoke(stypy.reporting.localization.Localization(__file__, 2196, 12), set_position_13001, *[tuple_13002], **kwargs_13014)
        
        # SSA join for if statement (line 2170)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_update_label_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_label_position' in the type store
        # Getting the type of 'stypy_return_type' (line 2162)
        stypy_return_type_13016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13016)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_label_position'
        return stypy_return_type_13016


    @norecursion
    def _update_offset_text_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_offset_text_position'
        module_type_store = module_type_store.open_function_context('_update_offset_text_position', 2200, 4, False)
        # Assigning a type to the variable 'self' (line 2201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2201, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis._update_offset_text_position.__dict__.__setitem__('stypy_localization', localization)
        YAxis._update_offset_text_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis._update_offset_text_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis._update_offset_text_position.__dict__.__setitem__('stypy_function_name', 'YAxis._update_offset_text_position')
        YAxis._update_offset_text_position.__dict__.__setitem__('stypy_param_names_list', ['bboxes', 'bboxes2'])
        YAxis._update_offset_text_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis._update_offset_text_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis._update_offset_text_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis._update_offset_text_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis._update_offset_text_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis._update_offset_text_position.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis._update_offset_text_position', ['bboxes', 'bboxes2'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_offset_text_position', localization, ['bboxes', 'bboxes2'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_offset_text_position(...)' code ##################

        unicode_13017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2204, (-1)), 'unicode', u'\n        Update the offset_text position based on the sequence of bounding\n        boxes of all the ticklabels\n        ')
        
        # Assigning a Call to a Tuple (line 2205):
        
        # Assigning a Call to a Name:
        
        # Call to get_position(...): (line 2205)
        # Processing the call keyword arguments (line 2205)
        kwargs_13021 = {}
        # Getting the type of 'self' (line 2205)
        self_13018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 15), 'self', False)
        # Obtaining the member 'offsetText' of a type (line 2205)
        offsetText_13019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2205, 15), self_13018, 'offsetText')
        # Obtaining the member 'get_position' of a type (line 2205)
        get_position_13020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2205, 15), offsetText_13019, 'get_position')
        # Calling get_position(args, kwargs) (line 2205)
        get_position_call_result_13022 = invoke(stypy.reporting.localization.Localization(__file__, 2205, 15), get_position_13020, *[], **kwargs_13021)
        
        # Assigning a type to the variable 'call_assignment_7038' (line 2205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 8), 'call_assignment_7038', get_position_call_result_13022)
        
        # Assigning a Call to a Name (line 2205):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_13025 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2205, 8), 'int')
        # Processing the call keyword arguments
        kwargs_13026 = {}
        # Getting the type of 'call_assignment_7038' (line 2205)
        call_assignment_7038_13023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 8), 'call_assignment_7038', False)
        # Obtaining the member '__getitem__' of a type (line 2205)
        getitem___13024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2205, 8), call_assignment_7038_13023, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_13027 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___13024, *[int_13025], **kwargs_13026)
        
        # Assigning a type to the variable 'call_assignment_7039' (line 2205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 8), 'call_assignment_7039', getitem___call_result_13027)
        
        # Assigning a Name to a Name (line 2205):
        # Getting the type of 'call_assignment_7039' (line 2205)
        call_assignment_7039_13028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 8), 'call_assignment_7039')
        # Assigning a type to the variable 'x' (line 2205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 8), 'x', call_assignment_7039_13028)
        
        # Assigning a Call to a Name (line 2205):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_13031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2205, 8), 'int')
        # Processing the call keyword arguments
        kwargs_13032 = {}
        # Getting the type of 'call_assignment_7038' (line 2205)
        call_assignment_7038_13029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 8), 'call_assignment_7038', False)
        # Obtaining the member '__getitem__' of a type (line 2205)
        getitem___13030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2205, 8), call_assignment_7038_13029, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_13033 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___13030, *[int_13031], **kwargs_13032)
        
        # Assigning a type to the variable 'call_assignment_7040' (line 2205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 8), 'call_assignment_7040', getitem___call_result_13033)
        
        # Assigning a Name to a Name (line 2205):
        # Getting the type of 'call_assignment_7040' (line 2205)
        call_assignment_7040_13034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 8), 'call_assignment_7040')
        # Assigning a type to the variable 'y' (line 2205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2205, 11), 'y', call_assignment_7040_13034)
        
        # Assigning a Attribute to a Name (line 2206):
        
        # Assigning a Attribute to a Name (line 2206):
        # Getting the type of 'self' (line 2206)
        self_13035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2206, 14), 'self')
        # Obtaining the member 'axes' of a type (line 2206)
        axes_13036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2206, 14), self_13035, 'axes')
        # Obtaining the member 'bbox' of a type (line 2206)
        bbox_13037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2206, 14), axes_13036, 'bbox')
        # Obtaining the member 'ymax' of a type (line 2206)
        ymax_13038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2206, 14), bbox_13037, 'ymax')
        # Assigning a type to the variable 'top' (line 2206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2206, 8), 'top', ymax_13038)
        
        # Call to set_position(...): (line 2207)
        # Processing the call arguments (line 2207)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2208)
        tuple_13042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2208, 13), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2208)
        # Adding element type (line 2208)
        # Getting the type of 'x' (line 2208)
        x_13043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 13), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2208, 13), tuple_13042, x_13043)
        # Adding element type (line 2208)
        # Getting the type of 'top' (line 2208)
        top_13044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 16), 'top', False)
        # Getting the type of 'self' (line 2208)
        self_13045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 22), 'self', False)
        # Obtaining the member 'OFFSETTEXTPAD' of a type (line 2208)
        OFFSETTEXTPAD_13046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2208, 22), self_13045, 'OFFSETTEXTPAD')
        # Getting the type of 'self' (line 2208)
        self_13047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2208, 43), 'self', False)
        # Obtaining the member 'figure' of a type (line 2208)
        figure_13048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2208, 43), self_13047, 'figure')
        # Obtaining the member 'dpi' of a type (line 2208)
        dpi_13049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2208, 43), figure_13048, 'dpi')
        # Applying the binary operator '*' (line 2208)
        result_mul_13050 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 22), '*', OFFSETTEXTPAD_13046, dpi_13049)
        
        float_13051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2208, 61), 'float')
        # Applying the binary operator 'div' (line 2208)
        result_div_13052 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 59), 'div', result_mul_13050, float_13051)
        
        # Applying the binary operator '+' (line 2208)
        result_add_13053 = python_operator(stypy.reporting.localization.Localization(__file__, 2208, 16), '+', top_13044, result_div_13052)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2208, 13), tuple_13042, result_add_13053)
        
        # Processing the call keyword arguments (line 2207)
        kwargs_13054 = {}
        # Getting the type of 'self' (line 2207)
        self_13039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 8), 'self', False)
        # Obtaining the member 'offsetText' of a type (line 2207)
        offsetText_13040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2207, 8), self_13039, 'offsetText')
        # Obtaining the member 'set_position' of a type (line 2207)
        set_position_13041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2207, 8), offsetText_13040, 'set_position')
        # Calling set_position(args, kwargs) (line 2207)
        set_position_call_result_13055 = invoke(stypy.reporting.localization.Localization(__file__, 2207, 8), set_position_13041, *[tuple_13042], **kwargs_13054)
        
        
        # ################# End of '_update_offset_text_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_offset_text_position' in the type store
        # Getting the type of 'stypy_return_type' (line 2200)
        stypy_return_type_13056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2200, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13056)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_offset_text_position'
        return stypy_return_type_13056


    @norecursion
    def set_offset_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_offset_position'
        module_type_store = module_type_store.open_function_context('set_offset_position', 2211, 4, False)
        # Assigning a type to the variable 'self' (line 2212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2212, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.set_offset_position.__dict__.__setitem__('stypy_localization', localization)
        YAxis.set_offset_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.set_offset_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.set_offset_position.__dict__.__setitem__('stypy_function_name', 'YAxis.set_offset_position')
        YAxis.set_offset_position.__dict__.__setitem__('stypy_param_names_list', ['position'])
        YAxis.set_offset_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.set_offset_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.set_offset_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.set_offset_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.set_offset_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.set_offset_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.set_offset_position', ['position'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_offset_position', localization, ['position'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_offset_position(...)' code ##################

        
        # Assigning a Call to a Tuple (line 2212):
        
        # Assigning a Call to a Name:
        
        # Call to get_position(...): (line 2212)
        # Processing the call keyword arguments (line 2212)
        kwargs_13060 = {}
        # Getting the type of 'self' (line 2212)
        self_13057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 15), 'self', False)
        # Obtaining the member 'offsetText' of a type (line 2212)
        offsetText_13058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2212, 15), self_13057, 'offsetText')
        # Obtaining the member 'get_position' of a type (line 2212)
        get_position_13059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2212, 15), offsetText_13058, 'get_position')
        # Calling get_position(args, kwargs) (line 2212)
        get_position_call_result_13061 = invoke(stypy.reporting.localization.Localization(__file__, 2212, 15), get_position_13059, *[], **kwargs_13060)
        
        # Assigning a type to the variable 'call_assignment_7041' (line 2212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2212, 8), 'call_assignment_7041', get_position_call_result_13061)
        
        # Assigning a Call to a Name (line 2212):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_13064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2212, 8), 'int')
        # Processing the call keyword arguments
        kwargs_13065 = {}
        # Getting the type of 'call_assignment_7041' (line 2212)
        call_assignment_7041_13062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 8), 'call_assignment_7041', False)
        # Obtaining the member '__getitem__' of a type (line 2212)
        getitem___13063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2212, 8), call_assignment_7041_13062, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_13066 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___13063, *[int_13064], **kwargs_13065)
        
        # Assigning a type to the variable 'call_assignment_7042' (line 2212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2212, 8), 'call_assignment_7042', getitem___call_result_13066)
        
        # Assigning a Name to a Name (line 2212):
        # Getting the type of 'call_assignment_7042' (line 2212)
        call_assignment_7042_13067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 8), 'call_assignment_7042')
        # Assigning a type to the variable 'x' (line 2212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2212, 8), 'x', call_assignment_7042_13067)
        
        # Assigning a Call to a Name (line 2212):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_13070 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2212, 8), 'int')
        # Processing the call keyword arguments
        kwargs_13071 = {}
        # Getting the type of 'call_assignment_7041' (line 2212)
        call_assignment_7041_13068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 8), 'call_assignment_7041', False)
        # Obtaining the member '__getitem__' of a type (line 2212)
        getitem___13069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2212, 8), call_assignment_7041_13068, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_13072 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___13069, *[int_13070], **kwargs_13071)
        
        # Assigning a type to the variable 'call_assignment_7043' (line 2212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2212, 8), 'call_assignment_7043', getitem___call_result_13072)
        
        # Assigning a Name to a Name (line 2212):
        # Getting the type of 'call_assignment_7043' (line 2212)
        call_assignment_7043_13073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2212, 8), 'call_assignment_7043')
        # Assigning a type to the variable 'y' (line 2212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2212, 11), 'y', call_assignment_7043_13073)
        
        
        # Getting the type of 'position' (line 2213)
        position_13074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2213, 11), 'position')
        unicode_13075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2213, 23), 'unicode', u'left')
        # Applying the binary operator '==' (line 2213)
        result_eq_13076 = python_operator(stypy.reporting.localization.Localization(__file__, 2213, 11), '==', position_13074, unicode_13075)
        
        # Testing the type of an if condition (line 2213)
        if_condition_13077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2213, 8), result_eq_13076)
        # Assigning a type to the variable 'if_condition_13077' (line 2213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2213, 8), 'if_condition_13077', if_condition_13077)
        # SSA begins for if statement (line 2213)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 2214):
        
        # Assigning a Num to a Name (line 2214):
        int_13078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2214, 16), 'int')
        # Assigning a type to the variable 'x' (line 2214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2214, 12), 'x', int_13078)
        # SSA branch for the else part of an if statement (line 2213)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'position' (line 2215)
        position_13079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2215, 13), 'position')
        unicode_13080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2215, 25), 'unicode', u'right')
        # Applying the binary operator '==' (line 2215)
        result_eq_13081 = python_operator(stypy.reporting.localization.Localization(__file__, 2215, 13), '==', position_13079, unicode_13080)
        
        # Testing the type of an if condition (line 2215)
        if_condition_13082 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2215, 13), result_eq_13081)
        # Assigning a type to the variable 'if_condition_13082' (line 2215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2215, 13), 'if_condition_13082', if_condition_13082)
        # SSA begins for if statement (line 2215)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 2216):
        
        # Assigning a Num to a Name (line 2216):
        int_13083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2216, 16), 'int')
        # Assigning a type to the variable 'x' (line 2216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2216, 12), 'x', int_13083)
        # SSA branch for the else part of an if statement (line 2215)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 2218):
        
        # Assigning a Str to a Name (line 2218):
        unicode_13084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2218, 18), 'unicode', u"Position accepts only [ 'left' | 'right' ]")
        # Assigning a type to the variable 'msg' (line 2218)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2218, 12), 'msg', unicode_13084)
        
        # Call to ValueError(...): (line 2219)
        # Processing the call arguments (line 2219)
        # Getting the type of 'msg' (line 2219)
        msg_13086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 29), 'msg', False)
        # Processing the call keyword arguments (line 2219)
        kwargs_13087 = {}
        # Getting the type of 'ValueError' (line 2219)
        ValueError_13085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2219, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2219)
        ValueError_call_result_13088 = invoke(stypy.reporting.localization.Localization(__file__, 2219, 18), ValueError_13085, *[msg_13086], **kwargs_13087)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2219, 12), ValueError_call_result_13088, 'raise parameter', BaseException)
        # SSA join for if statement (line 2215)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2213)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_ha(...): (line 2221)
        # Processing the call arguments (line 2221)
        # Getting the type of 'position' (line 2221)
        position_13092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 31), 'position', False)
        # Processing the call keyword arguments (line 2221)
        kwargs_13093 = {}
        # Getting the type of 'self' (line 2221)
        self_13089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 8), 'self', False)
        # Obtaining the member 'offsetText' of a type (line 2221)
        offsetText_13090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 8), self_13089, 'offsetText')
        # Obtaining the member 'set_ha' of a type (line 2221)
        set_ha_13091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 8), offsetText_13090, 'set_ha')
        # Calling set_ha(args, kwargs) (line 2221)
        set_ha_call_result_13094 = invoke(stypy.reporting.localization.Localization(__file__, 2221, 8), set_ha_13091, *[position_13092], **kwargs_13093)
        
        
        # Call to set_position(...): (line 2222)
        # Processing the call arguments (line 2222)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2222)
        tuple_13098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2222, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2222)
        # Adding element type (line 2222)
        # Getting the type of 'x' (line 2222)
        x_13099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 38), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2222, 38), tuple_13098, x_13099)
        # Adding element type (line 2222)
        # Getting the type of 'y' (line 2222)
        y_13100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 41), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2222, 38), tuple_13098, y_13100)
        
        # Processing the call keyword arguments (line 2222)
        kwargs_13101 = {}
        # Getting the type of 'self' (line 2222)
        self_13095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2222, 8), 'self', False)
        # Obtaining the member 'offsetText' of a type (line 2222)
        offsetText_13096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2222, 8), self_13095, 'offsetText')
        # Obtaining the member 'set_position' of a type (line 2222)
        set_position_13097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2222, 8), offsetText_13096, 'set_position')
        # Calling set_position(args, kwargs) (line 2222)
        set_position_call_result_13102 = invoke(stypy.reporting.localization.Localization(__file__, 2222, 8), set_position_13097, *[tuple_13098], **kwargs_13101)
        
        
        # Assigning a Name to a Attribute (line 2223):
        
        # Assigning a Name to a Attribute (line 2223):
        # Getting the type of 'True' (line 2223)
        True_13103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 21), 'True')
        # Getting the type of 'self' (line 2223)
        self_13104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2223)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2223, 8), self_13104, 'stale', True_13103)
        
        # ################# End of 'set_offset_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_offset_position' in the type store
        # Getting the type of 'stypy_return_type' (line 2211)
        stypy_return_type_13105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2211, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13105)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_offset_position'
        return stypy_return_type_13105


    @norecursion
    def get_text_widths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_text_widths'
        module_type_store = module_type_store.open_function_context('get_text_widths', 2225, 4, False)
        # Assigning a type to the variable 'self' (line 2226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.get_text_widths.__dict__.__setitem__('stypy_localization', localization)
        YAxis.get_text_widths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.get_text_widths.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.get_text_widths.__dict__.__setitem__('stypy_function_name', 'YAxis.get_text_widths')
        YAxis.get_text_widths.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        YAxis.get_text_widths.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.get_text_widths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.get_text_widths.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.get_text_widths.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.get_text_widths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.get_text_widths.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.get_text_widths', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_text_widths', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_text_widths(...)' code ##################

        
        # Assigning a Call to a Tuple (line 2226):
        
        # Assigning a Call to a Name:
        
        # Call to get_ticklabel_extents(...): (line 2226)
        # Processing the call arguments (line 2226)
        # Getting the type of 'renderer' (line 2226)
        renderer_13108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 49), 'renderer', False)
        # Processing the call keyword arguments (line 2226)
        kwargs_13109 = {}
        # Getting the type of 'self' (line 2226)
        self_13106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 22), 'self', False)
        # Obtaining the member 'get_ticklabel_extents' of a type (line 2226)
        get_ticklabel_extents_13107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2226, 22), self_13106, 'get_ticklabel_extents')
        # Calling get_ticklabel_extents(args, kwargs) (line 2226)
        get_ticklabel_extents_call_result_13110 = invoke(stypy.reporting.localization.Localization(__file__, 2226, 22), get_ticklabel_extents_13107, *[renderer_13108], **kwargs_13109)
        
        # Assigning a type to the variable 'call_assignment_7044' (line 2226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 8), 'call_assignment_7044', get_ticklabel_extents_call_result_13110)
        
        # Assigning a Call to a Name (line 2226):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_13113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, 8), 'int')
        # Processing the call keyword arguments
        kwargs_13114 = {}
        # Getting the type of 'call_assignment_7044' (line 2226)
        call_assignment_7044_13111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 8), 'call_assignment_7044', False)
        # Obtaining the member '__getitem__' of a type (line 2226)
        getitem___13112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2226, 8), call_assignment_7044_13111, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_13115 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___13112, *[int_13113], **kwargs_13114)
        
        # Assigning a type to the variable 'call_assignment_7045' (line 2226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 8), 'call_assignment_7045', getitem___call_result_13115)
        
        # Assigning a Name to a Name (line 2226):
        # Getting the type of 'call_assignment_7045' (line 2226)
        call_assignment_7045_13116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 8), 'call_assignment_7045')
        # Assigning a type to the variable 'bbox' (line 2226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 8), 'bbox', call_assignment_7045_13116)
        
        # Assigning a Call to a Name (line 2226):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_13119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2226, 8), 'int')
        # Processing the call keyword arguments
        kwargs_13120 = {}
        # Getting the type of 'call_assignment_7044' (line 2226)
        call_assignment_7044_13117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 8), 'call_assignment_7044', False)
        # Obtaining the member '__getitem__' of a type (line 2226)
        getitem___13118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2226, 8), call_assignment_7044_13117, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_13121 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___13118, *[int_13119], **kwargs_13120)
        
        # Assigning a type to the variable 'call_assignment_7046' (line 2226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 8), 'call_assignment_7046', getitem___call_result_13121)
        
        # Assigning a Name to a Name (line 2226):
        # Getting the type of 'call_assignment_7046' (line 2226)
        call_assignment_7046_13122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 8), 'call_assignment_7046')
        # Assigning a type to the variable 'bbox2' (line 2226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2226, 14), 'bbox2', call_assignment_7046_13122)
        
        # Assigning a Call to a Name (line 2228):
        
        # Assigning a Call to a Name (line 2228):
        
        # Call to get_pad_pixels(...): (line 2228)
        # Processing the call keyword arguments (line 2228)
        kwargs_13129 = {}
        
        # Obtaining the type of the subscript
        int_13123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2228, 36), 'int')
        # Getting the type of 'self' (line 2228)
        self_13124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2228, 20), 'self', False)
        # Obtaining the member 'majorTicks' of a type (line 2228)
        majorTicks_13125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 20), self_13124, 'majorTicks')
        # Obtaining the member '__getitem__' of a type (line 2228)
        getitem___13126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 20), majorTicks_13125, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2228)
        subscript_call_result_13127 = invoke(stypy.reporting.localization.Localization(__file__, 2228, 20), getitem___13126, int_13123)
        
        # Obtaining the member 'get_pad_pixels' of a type (line 2228)
        get_pad_pixels_13128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2228, 20), subscript_call_result_13127, 'get_pad_pixels')
        # Calling get_pad_pixels(args, kwargs) (line 2228)
        get_pad_pixels_call_result_13130 = invoke(stypy.reporting.localization.Localization(__file__, 2228, 20), get_pad_pixels_13128, *[], **kwargs_13129)
        
        # Assigning a type to the variable 'padPixels' (line 2228)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2228, 8), 'padPixels', get_pad_pixels_call_result_13130)
        
        # Assigning a Num to a Name (line 2230):
        
        # Assigning a Num to a Name (line 2230):
        float_13131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2230, 15), 'float')
        # Assigning a type to the variable 'left' (line 2230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2230, 8), 'left', float_13131)
        
        # Getting the type of 'bbox' (line 2231)
        bbox_13132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 11), 'bbox')
        # Obtaining the member 'width' of a type (line 2231)
        width_13133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2231, 11), bbox_13132, 'width')
        # Testing the type of an if condition (line 2231)
        if_condition_13134 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2231, 8), width_13133)
        # Assigning a type to the variable 'if_condition_13134' (line 2231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 8), 'if_condition_13134', if_condition_13134)
        # SSA begins for if statement (line 2231)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'left' (line 2232)
        left_13135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'left')
        # Getting the type of 'bbox' (line 2232)
        bbox_13136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 20), 'bbox')
        # Obtaining the member 'width' of a type (line 2232)
        width_13137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2232, 20), bbox_13136, 'width')
        # Getting the type of 'padPixels' (line 2232)
        padPixels_13138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2232, 33), 'padPixels')
        # Applying the binary operator '+' (line 2232)
        result_add_13139 = python_operator(stypy.reporting.localization.Localization(__file__, 2232, 20), '+', width_13137, padPixels_13138)
        
        # Applying the binary operator '+=' (line 2232)
        result_iadd_13140 = python_operator(stypy.reporting.localization.Localization(__file__, 2232, 12), '+=', left_13135, result_add_13139)
        # Assigning a type to the variable 'left' (line 2232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2232, 12), 'left', result_iadd_13140)
        
        # SSA join for if statement (line 2231)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 2233):
        
        # Assigning a Num to a Name (line 2233):
        float_13141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2233, 16), 'float')
        # Assigning a type to the variable 'right' (line 2233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2233, 8), 'right', float_13141)
        
        # Getting the type of 'bbox2' (line 2234)
        bbox2_13142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2234, 11), 'bbox2')
        # Obtaining the member 'width' of a type (line 2234)
        width_13143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2234, 11), bbox2_13142, 'width')
        # Testing the type of an if condition (line 2234)
        if_condition_13144 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2234, 8), width_13143)
        # Assigning a type to the variable 'if_condition_13144' (line 2234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2234, 8), 'if_condition_13144', if_condition_13144)
        # SSA begins for if statement (line 2234)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'right' (line 2235)
        right_13145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'right')
        # Getting the type of 'bbox2' (line 2235)
        bbox2_13146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 21), 'bbox2')
        # Obtaining the member 'width' of a type (line 2235)
        width_13147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2235, 21), bbox2_13146, 'width')
        # Getting the type of 'padPixels' (line 2235)
        padPixels_13148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2235, 35), 'padPixels')
        # Applying the binary operator '+' (line 2235)
        result_add_13149 = python_operator(stypy.reporting.localization.Localization(__file__, 2235, 21), '+', width_13147, padPixels_13148)
        
        # Applying the binary operator '+=' (line 2235)
        result_iadd_13150 = python_operator(stypy.reporting.localization.Localization(__file__, 2235, 12), '+=', right_13145, result_add_13149)
        # Assigning a type to the variable 'right' (line 2235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2235, 12), 'right', result_iadd_13150)
        
        # SSA join for if statement (line 2234)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to get_label_position(...): (line 2237)
        # Processing the call keyword arguments (line 2237)
        kwargs_13153 = {}
        # Getting the type of 'self' (line 2237)
        self_13151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2237, 11), 'self', False)
        # Obtaining the member 'get_label_position' of a type (line 2237)
        get_label_position_13152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2237, 11), self_13151, 'get_label_position')
        # Calling get_label_position(args, kwargs) (line 2237)
        get_label_position_call_result_13154 = invoke(stypy.reporting.localization.Localization(__file__, 2237, 11), get_label_position_13152, *[], **kwargs_13153)
        
        unicode_13155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2237, 40), 'unicode', u'left')
        # Applying the binary operator '==' (line 2237)
        result_eq_13156 = python_operator(stypy.reporting.localization.Localization(__file__, 2237, 11), '==', get_label_position_call_result_13154, unicode_13155)
        
        # Testing the type of an if condition (line 2237)
        if_condition_13157 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2237, 8), result_eq_13156)
        # Assigning a type to the variable 'if_condition_13157' (line 2237)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2237, 8), 'if_condition_13157', if_condition_13157)
        # SSA begins for if statement (line 2237)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'left' (line 2238)
        left_13158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 12), 'left')
        
        # Call to get_window_extent(...): (line 2238)
        # Processing the call arguments (line 2238)
        # Getting the type of 'renderer' (line 2238)
        renderer_13162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 49), 'renderer', False)
        # Processing the call keyword arguments (line 2238)
        kwargs_13163 = {}
        # Getting the type of 'self' (line 2238)
        self_13159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 20), 'self', False)
        # Obtaining the member 'label' of a type (line 2238)
        label_13160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2238, 20), self_13159, 'label')
        # Obtaining the member 'get_window_extent' of a type (line 2238)
        get_window_extent_13161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2238, 20), label_13160, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 2238)
        get_window_extent_call_result_13164 = invoke(stypy.reporting.localization.Localization(__file__, 2238, 20), get_window_extent_13161, *[renderer_13162], **kwargs_13163)
        
        # Obtaining the member 'width' of a type (line 2238)
        width_13165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2238, 20), get_window_extent_call_result_13164, 'width')
        # Getting the type of 'padPixels' (line 2238)
        padPixels_13166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 67), 'padPixels')
        # Applying the binary operator '+' (line 2238)
        result_add_13167 = python_operator(stypy.reporting.localization.Localization(__file__, 2238, 20), '+', width_13165, padPixels_13166)
        
        # Applying the binary operator '+=' (line 2238)
        result_iadd_13168 = python_operator(stypy.reporting.localization.Localization(__file__, 2238, 12), '+=', left_13158, result_add_13167)
        # Assigning a type to the variable 'left' (line 2238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2238, 12), 'left', result_iadd_13168)
        
        # SSA branch for the else part of an if statement (line 2237)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'right' (line 2240)
        right_13169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 12), 'right')
        
        # Call to get_window_extent(...): (line 2240)
        # Processing the call arguments (line 2240)
        # Getting the type of 'renderer' (line 2240)
        renderer_13173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 50), 'renderer', False)
        # Processing the call keyword arguments (line 2240)
        kwargs_13174 = {}
        # Getting the type of 'self' (line 2240)
        self_13170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 21), 'self', False)
        # Obtaining the member 'label' of a type (line 2240)
        label_13171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2240, 21), self_13170, 'label')
        # Obtaining the member 'get_window_extent' of a type (line 2240)
        get_window_extent_13172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2240, 21), label_13171, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 2240)
        get_window_extent_call_result_13175 = invoke(stypy.reporting.localization.Localization(__file__, 2240, 21), get_window_extent_13172, *[renderer_13173], **kwargs_13174)
        
        # Obtaining the member 'width' of a type (line 2240)
        width_13176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2240, 21), get_window_extent_call_result_13175, 'width')
        # Getting the type of 'padPixels' (line 2240)
        padPixels_13177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2240, 68), 'padPixels')
        # Applying the binary operator '+' (line 2240)
        result_add_13178 = python_operator(stypy.reporting.localization.Localization(__file__, 2240, 21), '+', width_13176, padPixels_13177)
        
        # Applying the binary operator '+=' (line 2240)
        result_iadd_13179 = python_operator(stypy.reporting.localization.Localization(__file__, 2240, 12), '+=', right_13169, result_add_13178)
        # Assigning a type to the variable 'right' (line 2240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2240, 12), 'right', result_iadd_13179)
        
        # SSA join for if statement (line 2237)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 2241)
        tuple_13180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2241, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2241)
        # Adding element type (line 2241)
        # Getting the type of 'left' (line 2241)
        left_13181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 15), 'left')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2241, 15), tuple_13180, left_13181)
        # Adding element type (line 2241)
        # Getting the type of 'right' (line 2241)
        right_13182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 21), 'right')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2241, 15), tuple_13180, right_13182)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2241, 8), 'stypy_return_type', tuple_13180)
        
        # ################# End of 'get_text_widths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_text_widths' in the type store
        # Getting the type of 'stypy_return_type' (line 2225)
        stypy_return_type_13183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2225, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13183)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_text_widths'
        return stypy_return_type_13183


    @norecursion
    def set_ticks_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_ticks_position'
        module_type_store = module_type_store.open_function_context('set_ticks_position', 2243, 4, False)
        # Assigning a type to the variable 'self' (line 2244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2244, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.set_ticks_position.__dict__.__setitem__('stypy_localization', localization)
        YAxis.set_ticks_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.set_ticks_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.set_ticks_position.__dict__.__setitem__('stypy_function_name', 'YAxis.set_ticks_position')
        YAxis.set_ticks_position.__dict__.__setitem__('stypy_param_names_list', ['position'])
        YAxis.set_ticks_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.set_ticks_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.set_ticks_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.set_ticks_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.set_ticks_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.set_ticks_position.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.set_ticks_position', ['position'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_ticks_position', localization, ['position'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_ticks_position(...)' code ##################

        unicode_13184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2253, (-1)), 'unicode', u"\n        Set the ticks position (left, right, both, default or none)\n        'both' sets the ticks to appear on both positions, but does not\n        change the tick labels.  'default' resets the tick positions to\n        the default: ticks on both positions, labels at left.  'none'\n        can be used if you don't want any ticks. 'none' and 'both'\n        affect only the ticks, not the labels.\n\n        ACCEPTS: [ 'left' | 'right' | 'both' | 'default' | 'none' ]\n        ")
        
        
        # Getting the type of 'position' (line 2254)
        position_13185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2254, 11), 'position')
        unicode_13186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2254, 23), 'unicode', u'right')
        # Applying the binary operator '==' (line 2254)
        result_eq_13187 = python_operator(stypy.reporting.localization.Localization(__file__, 2254, 11), '==', position_13185, unicode_13186)
        
        # Testing the type of an if condition (line 2254)
        if_condition_13188 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2254, 8), result_eq_13187)
        # Assigning a type to the variable 'if_condition_13188' (line 2254)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2254, 8), 'if_condition_13188', if_condition_13188)
        # SSA begins for if statement (line 2254)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_tick_params(...): (line 2255)
        # Processing the call keyword arguments (line 2255)
        unicode_13191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2255, 39), 'unicode', u'both')
        keyword_13192 = unicode_13191
        # Getting the type of 'True' (line 2255)
        True_13193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 53), 'True', False)
        keyword_13194 = True_13193
        # Getting the type of 'True' (line 2255)
        True_13195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 70), 'True', False)
        keyword_13196 = True_13195
        # Getting the type of 'False' (line 2256)
        False_13197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 38), 'False', False)
        keyword_13198 = False_13197
        # Getting the type of 'False' (line 2256)
        False_13199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2256, 55), 'False', False)
        keyword_13200 = False_13199
        kwargs_13201 = {'labelleft': keyword_13200, 'right': keyword_13194, 'labelright': keyword_13196, 'which': keyword_13192, 'left': keyword_13198}
        # Getting the type of 'self' (line 2255)
        self_13189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2255, 12), 'self', False)
        # Obtaining the member 'set_tick_params' of a type (line 2255)
        set_tick_params_13190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2255, 12), self_13189, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 2255)
        set_tick_params_call_result_13202 = invoke(stypy.reporting.localization.Localization(__file__, 2255, 12), set_tick_params_13190, *[], **kwargs_13201)
        
        
        # Call to set_offset_position(...): (line 2257)
        # Processing the call arguments (line 2257)
        # Getting the type of 'position' (line 2257)
        position_13205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 37), 'position', False)
        # Processing the call keyword arguments (line 2257)
        kwargs_13206 = {}
        # Getting the type of 'self' (line 2257)
        self_13203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2257, 12), 'self', False)
        # Obtaining the member 'set_offset_position' of a type (line 2257)
        set_offset_position_13204 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2257, 12), self_13203, 'set_offset_position')
        # Calling set_offset_position(args, kwargs) (line 2257)
        set_offset_position_call_result_13207 = invoke(stypy.reporting.localization.Localization(__file__, 2257, 12), set_offset_position_13204, *[position_13205], **kwargs_13206)
        
        # SSA branch for the else part of an if statement (line 2254)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'position' (line 2258)
        position_13208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2258, 13), 'position')
        unicode_13209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2258, 25), 'unicode', u'left')
        # Applying the binary operator '==' (line 2258)
        result_eq_13210 = python_operator(stypy.reporting.localization.Localization(__file__, 2258, 13), '==', position_13208, unicode_13209)
        
        # Testing the type of an if condition (line 2258)
        if_condition_13211 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2258, 13), result_eq_13210)
        # Assigning a type to the variable 'if_condition_13211' (line 2258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2258, 13), 'if_condition_13211', if_condition_13211)
        # SSA begins for if statement (line 2258)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_tick_params(...): (line 2259)
        # Processing the call keyword arguments (line 2259)
        unicode_13214 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2259, 39), 'unicode', u'both')
        keyword_13215 = unicode_13214
        # Getting the type of 'False' (line 2259)
        False_13216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 53), 'False', False)
        keyword_13217 = False_13216
        # Getting the type of 'False' (line 2259)
        False_13218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 71), 'False', False)
        keyword_13219 = False_13218
        # Getting the type of 'True' (line 2260)
        True_13220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 38), 'True', False)
        keyword_13221 = True_13220
        # Getting the type of 'True' (line 2260)
        True_13222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2260, 54), 'True', False)
        keyword_13223 = True_13222
        kwargs_13224 = {'labelleft': keyword_13223, 'right': keyword_13217, 'labelright': keyword_13219, 'which': keyword_13215, 'left': keyword_13221}
        # Getting the type of 'self' (line 2259)
        self_13212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2259, 12), 'self', False)
        # Obtaining the member 'set_tick_params' of a type (line 2259)
        set_tick_params_13213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2259, 12), self_13212, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 2259)
        set_tick_params_call_result_13225 = invoke(stypy.reporting.localization.Localization(__file__, 2259, 12), set_tick_params_13213, *[], **kwargs_13224)
        
        
        # Call to set_offset_position(...): (line 2261)
        # Processing the call arguments (line 2261)
        # Getting the type of 'position' (line 2261)
        position_13228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 37), 'position', False)
        # Processing the call keyword arguments (line 2261)
        kwargs_13229 = {}
        # Getting the type of 'self' (line 2261)
        self_13226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2261, 12), 'self', False)
        # Obtaining the member 'set_offset_position' of a type (line 2261)
        set_offset_position_13227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2261, 12), self_13226, 'set_offset_position')
        # Calling set_offset_position(args, kwargs) (line 2261)
        set_offset_position_call_result_13230 = invoke(stypy.reporting.localization.Localization(__file__, 2261, 12), set_offset_position_13227, *[position_13228], **kwargs_13229)
        
        # SSA branch for the else part of an if statement (line 2258)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'position' (line 2262)
        position_13231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2262, 13), 'position')
        unicode_13232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2262, 25), 'unicode', u'both')
        # Applying the binary operator '==' (line 2262)
        result_eq_13233 = python_operator(stypy.reporting.localization.Localization(__file__, 2262, 13), '==', position_13231, unicode_13232)
        
        # Testing the type of an if condition (line 2262)
        if_condition_13234 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2262, 13), result_eq_13233)
        # Assigning a type to the variable 'if_condition_13234' (line 2262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2262, 13), 'if_condition_13234', if_condition_13234)
        # SSA begins for if statement (line 2262)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_tick_params(...): (line 2263)
        # Processing the call keyword arguments (line 2263)
        unicode_13237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2263, 39), 'unicode', u'both')
        keyword_13238 = unicode_13237
        # Getting the type of 'True' (line 2263)
        True_13239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 53), 'True', False)
        keyword_13240 = True_13239
        # Getting the type of 'True' (line 2264)
        True_13241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2264, 38), 'True', False)
        keyword_13242 = True_13241
        kwargs_13243 = {'right': keyword_13240, 'which': keyword_13238, 'left': keyword_13242}
        # Getting the type of 'self' (line 2263)
        self_13235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2263, 12), 'self', False)
        # Obtaining the member 'set_tick_params' of a type (line 2263)
        set_tick_params_13236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2263, 12), self_13235, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 2263)
        set_tick_params_call_result_13244 = invoke(stypy.reporting.localization.Localization(__file__, 2263, 12), set_tick_params_13236, *[], **kwargs_13243)
        
        # SSA branch for the else part of an if statement (line 2262)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'position' (line 2265)
        position_13245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2265, 13), 'position')
        unicode_13246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2265, 25), 'unicode', u'none')
        # Applying the binary operator '==' (line 2265)
        result_eq_13247 = python_operator(stypy.reporting.localization.Localization(__file__, 2265, 13), '==', position_13245, unicode_13246)
        
        # Testing the type of an if condition (line 2265)
        if_condition_13248 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2265, 13), result_eq_13247)
        # Assigning a type to the variable 'if_condition_13248' (line 2265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2265, 13), 'if_condition_13248', if_condition_13248)
        # SSA begins for if statement (line 2265)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_tick_params(...): (line 2266)
        # Processing the call keyword arguments (line 2266)
        unicode_13251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2266, 39), 'unicode', u'both')
        keyword_13252 = unicode_13251
        # Getting the type of 'False' (line 2266)
        False_13253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 53), 'False', False)
        keyword_13254 = False_13253
        # Getting the type of 'False' (line 2267)
        False_13255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2267, 38), 'False', False)
        keyword_13256 = False_13255
        kwargs_13257 = {'right': keyword_13254, 'which': keyword_13252, 'left': keyword_13256}
        # Getting the type of 'self' (line 2266)
        self_13249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2266, 12), 'self', False)
        # Obtaining the member 'set_tick_params' of a type (line 2266)
        set_tick_params_13250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2266, 12), self_13249, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 2266)
        set_tick_params_call_result_13258 = invoke(stypy.reporting.localization.Localization(__file__, 2266, 12), set_tick_params_13250, *[], **kwargs_13257)
        
        # SSA branch for the else part of an if statement (line 2265)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'position' (line 2268)
        position_13259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 13), 'position')
        unicode_13260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2268, 25), 'unicode', u'default')
        # Applying the binary operator '==' (line 2268)
        result_eq_13261 = python_operator(stypy.reporting.localization.Localization(__file__, 2268, 13), '==', position_13259, unicode_13260)
        
        # Testing the type of an if condition (line 2268)
        if_condition_13262 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2268, 13), result_eq_13261)
        # Assigning a type to the variable 'if_condition_13262' (line 2268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2268, 13), 'if_condition_13262', if_condition_13262)
        # SSA begins for if statement (line 2268)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_tick_params(...): (line 2269)
        # Processing the call keyword arguments (line 2269)
        unicode_13265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 39), 'unicode', u'both')
        keyword_13266 = unicode_13265
        # Getting the type of 'True' (line 2269)
        True_13267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 53), 'True', False)
        keyword_13268 = True_13267
        # Getting the type of 'False' (line 2269)
        False_13269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 70), 'False', False)
        keyword_13270 = False_13269
        # Getting the type of 'True' (line 2270)
        True_13271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 38), 'True', False)
        keyword_13272 = True_13271
        # Getting the type of 'True' (line 2270)
        True_13273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 54), 'True', False)
        keyword_13274 = True_13273
        kwargs_13275 = {'labelleft': keyword_13274, 'right': keyword_13268, 'labelright': keyword_13270, 'which': keyword_13266, 'left': keyword_13272}
        # Getting the type of 'self' (line 2269)
        self_13263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 12), 'self', False)
        # Obtaining the member 'set_tick_params' of a type (line 2269)
        set_tick_params_13264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2269, 12), self_13263, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 2269)
        set_tick_params_call_result_13276 = invoke(stypy.reporting.localization.Localization(__file__, 2269, 12), set_tick_params_13264, *[], **kwargs_13275)
        
        # SSA branch for the else part of an if statement (line 2268)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 2272)
        # Processing the call arguments (line 2272)
        unicode_13278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2272, 29), 'unicode', u'invalid position: %s')
        # Getting the type of 'position' (line 2272)
        position_13279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 54), 'position', False)
        # Applying the binary operator '%' (line 2272)
        result_mod_13280 = python_operator(stypy.reporting.localization.Localization(__file__, 2272, 29), '%', unicode_13278, position_13279)
        
        # Processing the call keyword arguments (line 2272)
        kwargs_13281 = {}
        # Getting the type of 'ValueError' (line 2272)
        ValueError_13277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2272, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 2272)
        ValueError_call_result_13282 = invoke(stypy.reporting.localization.Localization(__file__, 2272, 18), ValueError_13277, *[result_mod_13280], **kwargs_13281)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2272, 12), ValueError_call_result_13282, 'raise parameter', BaseException)
        # SSA join for if statement (line 2268)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2265)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2262)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2258)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2254)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2273):
        
        # Assigning a Name to a Attribute (line 2273):
        # Getting the type of 'True' (line 2273)
        True_13283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 21), 'True')
        # Getting the type of 'self' (line 2273)
        self_13284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2273)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2273, 8), self_13284, 'stale', True_13283)
        
        # ################# End of 'set_ticks_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_ticks_position' in the type store
        # Getting the type of 'stypy_return_type' (line 2243)
        stypy_return_type_13285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2243, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13285)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_ticks_position'
        return stypy_return_type_13285


    @norecursion
    def tick_right(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_right'
        module_type_store = module_type_store.open_function_context('tick_right', 2275, 4, False)
        # Assigning a type to the variable 'self' (line 2276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2276, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.tick_right.__dict__.__setitem__('stypy_localization', localization)
        YAxis.tick_right.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.tick_right.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.tick_right.__dict__.__setitem__('stypy_function_name', 'YAxis.tick_right')
        YAxis.tick_right.__dict__.__setitem__('stypy_param_names_list', [])
        YAxis.tick_right.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.tick_right.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.tick_right.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.tick_right.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.tick_right.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.tick_right.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.tick_right', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_right', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_right(...)' code ##################

        unicode_13286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2276, 8), 'unicode', u'use ticks only on right')
        
        # Call to set_ticks_position(...): (line 2277)
        # Processing the call arguments (line 2277)
        unicode_13289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2277, 32), 'unicode', u'right')
        # Processing the call keyword arguments (line 2277)
        kwargs_13290 = {}
        # Getting the type of 'self' (line 2277)
        self_13287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 8), 'self', False)
        # Obtaining the member 'set_ticks_position' of a type (line 2277)
        set_ticks_position_13288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2277, 8), self_13287, 'set_ticks_position')
        # Calling set_ticks_position(args, kwargs) (line 2277)
        set_ticks_position_call_result_13291 = invoke(stypy.reporting.localization.Localization(__file__, 2277, 8), set_ticks_position_13288, *[unicode_13289], **kwargs_13290)
        
        
        # ################# End of 'tick_right(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_right' in the type store
        # Getting the type of 'stypy_return_type' (line 2275)
        stypy_return_type_13292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2275, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13292)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_right'
        return stypy_return_type_13292


    @norecursion
    def tick_left(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'tick_left'
        module_type_store = module_type_store.open_function_context('tick_left', 2279, 4, False)
        # Assigning a type to the variable 'self' (line 2280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2280, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.tick_left.__dict__.__setitem__('stypy_localization', localization)
        YAxis.tick_left.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.tick_left.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.tick_left.__dict__.__setitem__('stypy_function_name', 'YAxis.tick_left')
        YAxis.tick_left.__dict__.__setitem__('stypy_param_names_list', [])
        YAxis.tick_left.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.tick_left.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.tick_left.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.tick_left.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.tick_left.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.tick_left.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.tick_left', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tick_left', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tick_left(...)' code ##################

        unicode_13293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2280, 8), 'unicode', u'use ticks only on left')
        
        # Call to set_ticks_position(...): (line 2281)
        # Processing the call arguments (line 2281)
        unicode_13296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2281, 32), 'unicode', u'left')
        # Processing the call keyword arguments (line 2281)
        kwargs_13297 = {}
        # Getting the type of 'self' (line 2281)
        self_13294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2281, 8), 'self', False)
        # Obtaining the member 'set_ticks_position' of a type (line 2281)
        set_ticks_position_13295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2281, 8), self_13294, 'set_ticks_position')
        # Calling set_ticks_position(args, kwargs) (line 2281)
        set_ticks_position_call_result_13298 = invoke(stypy.reporting.localization.Localization(__file__, 2281, 8), set_ticks_position_13295, *[unicode_13296], **kwargs_13297)
        
        
        # ################# End of 'tick_left(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tick_left' in the type store
        # Getting the type of 'stypy_return_type' (line 2279)
        stypy_return_type_13299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13299)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tick_left'
        return stypy_return_type_13299


    @norecursion
    def get_ticks_position(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_ticks_position'
        module_type_store = module_type_store.open_function_context('get_ticks_position', 2283, 4, False)
        # Assigning a type to the variable 'self' (line 2284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2284, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.get_ticks_position.__dict__.__setitem__('stypy_localization', localization)
        YAxis.get_ticks_position.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.get_ticks_position.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.get_ticks_position.__dict__.__setitem__('stypy_function_name', 'YAxis.get_ticks_position')
        YAxis.get_ticks_position.__dict__.__setitem__('stypy_param_names_list', [])
        YAxis.get_ticks_position.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.get_ticks_position.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.get_ticks_position.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.get_ticks_position.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.get_ticks_position.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.get_ticks_position.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.get_ticks_position', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_ticks_position', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_ticks_position(...)' code ##################

        unicode_13300 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2286, (-1)), 'unicode', u'\n        Return the ticks position (left, right, both or unknown)\n        ')
        
        # Assigning a Subscript to a Name (line 2287):
        
        # Assigning a Subscript to a Name (line 2287):
        
        # Obtaining the type of the subscript
        int_13301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2287, 31), 'int')
        # Getting the type of 'self' (line 2287)
        self_13302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2287, 15), 'self')
        # Obtaining the member 'majorTicks' of a type (line 2287)
        majorTicks_13303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2287, 15), self_13302, 'majorTicks')
        # Obtaining the member '__getitem__' of a type (line 2287)
        getitem___13304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2287, 15), majorTicks_13303, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2287)
        subscript_call_result_13305 = invoke(stypy.reporting.localization.Localization(__file__, 2287, 15), getitem___13304, int_13301)
        
        # Assigning a type to the variable 'majt' (line 2287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2287, 8), 'majt', subscript_call_result_13305)
        
        # Assigning a Subscript to a Name (line 2288):
        
        # Assigning a Subscript to a Name (line 2288):
        
        # Obtaining the type of the subscript
        int_13306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2288, 29), 'int')
        # Getting the type of 'self' (line 2288)
        self_13307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2288, 13), 'self')
        # Obtaining the member 'minorTicks' of a type (line 2288)
        minorTicks_13308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2288, 13), self_13307, 'minorTicks')
        # Obtaining the member '__getitem__' of a type (line 2288)
        getitem___13309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2288, 13), minorTicks_13308, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2288)
        subscript_call_result_13310 = invoke(stypy.reporting.localization.Localization(__file__, 2288, 13), getitem___13309, int_13306)
        
        # Assigning a type to the variable 'mT' (line 2288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2288, 8), 'mT', subscript_call_result_13310)
        
        # Assigning a BoolOp to a Name (line 2290):
        
        # Assigning a BoolOp to a Name (line 2290):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'majt' (line 2290)
        majt_13311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 27), 'majt')
        # Obtaining the member 'tick1On' of a type (line 2290)
        tick1On_13312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2290, 27), majt_13311, 'tick1On')
        # Applying the 'not' unary operator (line 2290)
        result_not__13313 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 23), 'not', tick1On_13312)
        
        # Getting the type of 'majt' (line 2290)
        majt_13314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2290, 45), 'majt')
        # Obtaining the member 'tick2On' of a type (line 2290)
        tick2On_13315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2290, 45), majt_13314, 'tick2On')
        # Applying the binary operator 'and' (line 2290)
        result_and_keyword_13316 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 22), 'and', result_not__13313, tick2On_13315)
        
        # Getting the type of 'majt' (line 2291)
        majt_13317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 27), 'majt')
        # Obtaining the member 'label1On' of a type (line 2291)
        label1On_13318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2291, 27), majt_13317, 'label1On')
        # Applying the 'not' unary operator (line 2291)
        result_not__13319 = python_operator(stypy.reporting.localization.Localization(__file__, 2291, 23), 'not', label1On_13318)
        
        # Applying the binary operator 'and' (line 2290)
        result_and_keyword_13320 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 22), 'and', result_and_keyword_13316, result_not__13319)
        # Getting the type of 'majt' (line 2291)
        majt_13321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2291, 46), 'majt')
        # Obtaining the member 'label2On' of a type (line 2291)
        label2On_13322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2291, 46), majt_13321, 'label2On')
        # Applying the binary operator 'and' (line 2290)
        result_and_keyword_13323 = python_operator(stypy.reporting.localization.Localization(__file__, 2290, 22), 'and', result_and_keyword_13320, label2On_13322)
        
        # Assigning a type to the variable 'majorRight' (line 2290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2290, 8), 'majorRight', result_and_keyword_13323)
        
        # Assigning a BoolOp to a Name (line 2292):
        
        # Assigning a BoolOp to a Name (line 2292):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'mT' (line 2292)
        mT_13324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 27), 'mT')
        # Obtaining the member 'tick1On' of a type (line 2292)
        tick1On_13325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2292, 27), mT_13324, 'tick1On')
        # Applying the 'not' unary operator (line 2292)
        result_not__13326 = python_operator(stypy.reporting.localization.Localization(__file__, 2292, 23), 'not', tick1On_13325)
        
        # Getting the type of 'mT' (line 2292)
        mT_13327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2292, 43), 'mT')
        # Obtaining the member 'tick2On' of a type (line 2292)
        tick2On_13328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2292, 43), mT_13327, 'tick2On')
        # Applying the binary operator 'and' (line 2292)
        result_and_keyword_13329 = python_operator(stypy.reporting.localization.Localization(__file__, 2292, 22), 'and', result_not__13326, tick2On_13328)
        
        # Getting the type of 'mT' (line 2293)
        mT_13330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 27), 'mT')
        # Obtaining the member 'label1On' of a type (line 2293)
        label1On_13331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 27), mT_13330, 'label1On')
        # Applying the 'not' unary operator (line 2293)
        result_not__13332 = python_operator(stypy.reporting.localization.Localization(__file__, 2293, 23), 'not', label1On_13331)
        
        # Applying the binary operator 'and' (line 2292)
        result_and_keyword_13333 = python_operator(stypy.reporting.localization.Localization(__file__, 2292, 22), 'and', result_and_keyword_13329, result_not__13332)
        # Getting the type of 'mT' (line 2293)
        mT_13334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2293, 44), 'mT')
        # Obtaining the member 'label2On' of a type (line 2293)
        label2On_13335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2293, 44), mT_13334, 'label2On')
        # Applying the binary operator 'and' (line 2292)
        result_and_keyword_13336 = python_operator(stypy.reporting.localization.Localization(__file__, 2292, 22), 'and', result_and_keyword_13333, label2On_13335)
        
        # Assigning a type to the variable 'minorRight' (line 2292)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2292, 8), 'minorRight', result_and_keyword_13336)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'majorRight' (line 2294)
        majorRight_13337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 11), 'majorRight')
        # Getting the type of 'minorRight' (line 2294)
        minorRight_13338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2294, 26), 'minorRight')
        # Applying the binary operator 'and' (line 2294)
        result_and_keyword_13339 = python_operator(stypy.reporting.localization.Localization(__file__, 2294, 11), 'and', majorRight_13337, minorRight_13338)
        
        # Testing the type of an if condition (line 2294)
        if_condition_13340 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2294, 8), result_and_keyword_13339)
        # Assigning a type to the variable 'if_condition_13340' (line 2294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2294, 8), 'if_condition_13340', if_condition_13340)
        # SSA begins for if statement (line 2294)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_13341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2295, 19), 'unicode', u'right')
        # Assigning a type to the variable 'stypy_return_type' (line 2295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 12), 'stypy_return_type', unicode_13341)
        # SSA join for if statement (line 2294)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BoolOp to a Name (line 2297):
        
        # Assigning a BoolOp to a Name (line 2297):
        
        # Evaluating a boolean operation
        # Getting the type of 'majt' (line 2297)
        majt_13342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 21), 'majt')
        # Obtaining the member 'tick1On' of a type (line 2297)
        tick1On_13343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2297, 21), majt_13342, 'tick1On')
        
        # Getting the type of 'majt' (line 2297)
        majt_13344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 43), 'majt')
        # Obtaining the member 'tick2On' of a type (line 2297)
        tick2On_13345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2297, 43), majt_13344, 'tick2On')
        # Applying the 'not' unary operator (line 2297)
        result_not__13346 = python_operator(stypy.reporting.localization.Localization(__file__, 2297, 39), 'not', tick2On_13345)
        
        # Applying the binary operator 'and' (line 2297)
        result_and_keyword_13347 = python_operator(stypy.reporting.localization.Localization(__file__, 2297, 21), 'and', tick1On_13343, result_not__13346)
        # Getting the type of 'majt' (line 2298)
        majt_13348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 21), 'majt')
        # Obtaining the member 'label1On' of a type (line 2298)
        label1On_13349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2298, 21), majt_13348, 'label1On')
        # Applying the binary operator 'and' (line 2297)
        result_and_keyword_13350 = python_operator(stypy.reporting.localization.Localization(__file__, 2297, 21), 'and', result_and_keyword_13347, label1On_13349)
        
        # Getting the type of 'majt' (line 2298)
        majt_13351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2298, 44), 'majt')
        # Obtaining the member 'label2On' of a type (line 2298)
        label2On_13352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2298, 44), majt_13351, 'label2On')
        # Applying the 'not' unary operator (line 2298)
        result_not__13353 = python_operator(stypy.reporting.localization.Localization(__file__, 2298, 40), 'not', label2On_13352)
        
        # Applying the binary operator 'and' (line 2297)
        result_and_keyword_13354 = python_operator(stypy.reporting.localization.Localization(__file__, 2297, 21), 'and', result_and_keyword_13350, result_not__13353)
        
        # Assigning a type to the variable 'majorLeft' (line 2297)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2297, 8), 'majorLeft', result_and_keyword_13354)
        
        # Assigning a BoolOp to a Name (line 2299):
        
        # Assigning a BoolOp to a Name (line 2299):
        
        # Evaluating a boolean operation
        # Getting the type of 'mT' (line 2299)
        mT_13355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 21), 'mT')
        # Obtaining the member 'tick1On' of a type (line 2299)
        tick1On_13356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 21), mT_13355, 'tick1On')
        
        # Getting the type of 'mT' (line 2299)
        mT_13357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 41), 'mT')
        # Obtaining the member 'tick2On' of a type (line 2299)
        tick2On_13358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2299, 41), mT_13357, 'tick2On')
        # Applying the 'not' unary operator (line 2299)
        result_not__13359 = python_operator(stypy.reporting.localization.Localization(__file__, 2299, 37), 'not', tick2On_13358)
        
        # Applying the binary operator 'and' (line 2299)
        result_and_keyword_13360 = python_operator(stypy.reporting.localization.Localization(__file__, 2299, 21), 'and', tick1On_13356, result_not__13359)
        # Getting the type of 'mT' (line 2300)
        mT_13361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 21), 'mT')
        # Obtaining the member 'label1On' of a type (line 2300)
        label1On_13362 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2300, 21), mT_13361, 'label1On')
        # Applying the binary operator 'and' (line 2299)
        result_and_keyword_13363 = python_operator(stypy.reporting.localization.Localization(__file__, 2299, 21), 'and', result_and_keyword_13360, label1On_13362)
        
        # Getting the type of 'mT' (line 2300)
        mT_13364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 42), 'mT')
        # Obtaining the member 'label2On' of a type (line 2300)
        label2On_13365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2300, 42), mT_13364, 'label2On')
        # Applying the 'not' unary operator (line 2300)
        result_not__13366 = python_operator(stypy.reporting.localization.Localization(__file__, 2300, 38), 'not', label2On_13365)
        
        # Applying the binary operator 'and' (line 2299)
        result_and_keyword_13367 = python_operator(stypy.reporting.localization.Localization(__file__, 2299, 21), 'and', result_and_keyword_13363, result_not__13366)
        
        # Assigning a type to the variable 'minorLeft' (line 2299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2299, 8), 'minorLeft', result_and_keyword_13367)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'majorLeft' (line 2301)
        majorLeft_13368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 11), 'majorLeft')
        # Getting the type of 'minorLeft' (line 2301)
        minorLeft_13369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 25), 'minorLeft')
        # Applying the binary operator 'and' (line 2301)
        result_and_keyword_13370 = python_operator(stypy.reporting.localization.Localization(__file__, 2301, 11), 'and', majorLeft_13368, minorLeft_13369)
        
        # Testing the type of an if condition (line 2301)
        if_condition_13371 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2301, 8), result_and_keyword_13370)
        # Assigning a type to the variable 'if_condition_13371' (line 2301)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 8), 'if_condition_13371', if_condition_13371)
        # SSA begins for if statement (line 2301)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_13372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2302, 19), 'unicode', u'left')
        # Assigning a type to the variable 'stypy_return_type' (line 2302)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2302, 12), 'stypy_return_type', unicode_13372)
        # SSA join for if statement (line 2301)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BoolOp to a Name (line 2304):
        
        # Assigning a BoolOp to a Name (line 2304):
        
        # Evaluating a boolean operation
        # Getting the type of 'majt' (line 2304)
        majt_13373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 24), 'majt')
        # Obtaining the member 'tick1On' of a type (line 2304)
        tick1On_13374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 24), majt_13373, 'tick1On')
        # Getting the type of 'majt' (line 2304)
        majt_13375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 41), 'majt')
        # Obtaining the member 'tick2On' of a type (line 2304)
        tick2On_13376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2304, 41), majt_13375, 'tick2On')
        # Applying the binary operator 'and' (line 2304)
        result_and_keyword_13377 = python_operator(stypy.reporting.localization.Localization(__file__, 2304, 24), 'and', tick1On_13374, tick2On_13376)
        # Getting the type of 'majt' (line 2305)
        majt_13378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 24), 'majt')
        # Obtaining the member 'label1On' of a type (line 2305)
        label1On_13379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2305, 24), majt_13378, 'label1On')
        # Applying the binary operator 'and' (line 2304)
        result_and_keyword_13380 = python_operator(stypy.reporting.localization.Localization(__file__, 2304, 24), 'and', result_and_keyword_13377, label1On_13379)
        
        # Getting the type of 'majt' (line 2305)
        majt_13381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2305, 47), 'majt')
        # Obtaining the member 'label2On' of a type (line 2305)
        label2On_13382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2305, 47), majt_13381, 'label2On')
        # Applying the 'not' unary operator (line 2305)
        result_not__13383 = python_operator(stypy.reporting.localization.Localization(__file__, 2305, 43), 'not', label2On_13382)
        
        # Applying the binary operator 'and' (line 2304)
        result_and_keyword_13384 = python_operator(stypy.reporting.localization.Localization(__file__, 2304, 24), 'and', result_and_keyword_13380, result_not__13383)
        
        # Assigning a type to the variable 'majorDefault' (line 2304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 8), 'majorDefault', result_and_keyword_13384)
        
        # Assigning a BoolOp to a Name (line 2306):
        
        # Assigning a BoolOp to a Name (line 2306):
        
        # Evaluating a boolean operation
        # Getting the type of 'mT' (line 2306)
        mT_13385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 24), 'mT')
        # Obtaining the member 'tick1On' of a type (line 2306)
        tick1On_13386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2306, 24), mT_13385, 'tick1On')
        # Getting the type of 'mT' (line 2306)
        mT_13387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 39), 'mT')
        # Obtaining the member 'tick2On' of a type (line 2306)
        tick2On_13388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2306, 39), mT_13387, 'tick2On')
        # Applying the binary operator 'and' (line 2306)
        result_and_keyword_13389 = python_operator(stypy.reporting.localization.Localization(__file__, 2306, 24), 'and', tick1On_13386, tick2On_13388)
        # Getting the type of 'mT' (line 2307)
        mT_13390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 24), 'mT')
        # Obtaining the member 'label1On' of a type (line 2307)
        label1On_13391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 24), mT_13390, 'label1On')
        # Applying the binary operator 'and' (line 2306)
        result_and_keyword_13392 = python_operator(stypy.reporting.localization.Localization(__file__, 2306, 24), 'and', result_and_keyword_13389, label1On_13391)
        
        # Getting the type of 'mT' (line 2307)
        mT_13393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2307, 45), 'mT')
        # Obtaining the member 'label2On' of a type (line 2307)
        label2On_13394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2307, 45), mT_13393, 'label2On')
        # Applying the 'not' unary operator (line 2307)
        result_not__13395 = python_operator(stypy.reporting.localization.Localization(__file__, 2307, 41), 'not', label2On_13394)
        
        # Applying the binary operator 'and' (line 2306)
        result_and_keyword_13396 = python_operator(stypy.reporting.localization.Localization(__file__, 2306, 24), 'and', result_and_keyword_13392, result_not__13395)
        
        # Assigning a type to the variable 'minorDefault' (line 2306)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2306, 8), 'minorDefault', result_and_keyword_13396)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'majorDefault' (line 2308)
        majorDefault_13397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 11), 'majorDefault')
        # Getting the type of 'minorDefault' (line 2308)
        minorDefault_13398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2308, 28), 'minorDefault')
        # Applying the binary operator 'and' (line 2308)
        result_and_keyword_13399 = python_operator(stypy.reporting.localization.Localization(__file__, 2308, 11), 'and', majorDefault_13397, minorDefault_13398)
        
        # Testing the type of an if condition (line 2308)
        if_condition_13400 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2308, 8), result_and_keyword_13399)
        # Assigning a type to the variable 'if_condition_13400' (line 2308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2308, 8), 'if_condition_13400', if_condition_13400)
        # SSA begins for if statement (line 2308)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        unicode_13401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2309, 19), 'unicode', u'default')
        # Assigning a type to the variable 'stypy_return_type' (line 2309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2309, 12), 'stypy_return_type', unicode_13401)
        # SSA join for if statement (line 2308)
        module_type_store = module_type_store.join_ssa_context()
        
        unicode_13402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2311, 15), 'unicode', u'unknown')
        # Assigning a type to the variable 'stypy_return_type' (line 2311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2311, 8), 'stypy_return_type', unicode_13402)
        
        # ################# End of 'get_ticks_position(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_ticks_position' in the type store
        # Getting the type of 'stypy_return_type' (line 2283)
        stypy_return_type_13403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2283, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13403)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_ticks_position'
        return stypy_return_type_13403


    @norecursion
    def get_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_view_interval'
        module_type_store = module_type_store.open_function_context('get_view_interval', 2313, 4, False)
        # Assigning a type to the variable 'self' (line 2314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2314, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.get_view_interval.__dict__.__setitem__('stypy_localization', localization)
        YAxis.get_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.get_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.get_view_interval.__dict__.__setitem__('stypy_function_name', 'YAxis.get_view_interval')
        YAxis.get_view_interval.__dict__.__setitem__('stypy_param_names_list', [])
        YAxis.get_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.get_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.get_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.get_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.get_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.get_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.get_view_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_view_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_view_interval(...)' code ##################

        unicode_13404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2314, 8), 'unicode', u'return the Interval instance for this axis view limits')
        # Getting the type of 'self' (line 2315)
        self_13405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2315, 15), 'self')
        # Obtaining the member 'axes' of a type (line 2315)
        axes_13406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2315, 15), self_13405, 'axes')
        # Obtaining the member 'viewLim' of a type (line 2315)
        viewLim_13407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2315, 15), axes_13406, 'viewLim')
        # Obtaining the member 'intervaly' of a type (line 2315)
        intervaly_13408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2315, 15), viewLim_13407, 'intervaly')
        # Assigning a type to the variable 'stypy_return_type' (line 2315)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2315, 8), 'stypy_return_type', intervaly_13408)
        
        # ################# End of 'get_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 2313)
        stypy_return_type_13409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2313, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13409)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_view_interval'
        return stypy_return_type_13409


    @norecursion
    def set_view_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 2317)
        False_13410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 51), 'False')
        defaults = [False_13410]
        # Create a new context for function 'set_view_interval'
        module_type_store = module_type_store.open_function_context('set_view_interval', 2317, 4, False)
        # Assigning a type to the variable 'self' (line 2318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2318, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.set_view_interval.__dict__.__setitem__('stypy_localization', localization)
        YAxis.set_view_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.set_view_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.set_view_interval.__dict__.__setitem__('stypy_function_name', 'YAxis.set_view_interval')
        YAxis.set_view_interval.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax', 'ignore'])
        YAxis.set_view_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.set_view_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.set_view_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.set_view_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.set_view_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.set_view_interval.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.set_view_interval', ['vmin', 'vmax', 'ignore'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_view_interval', localization, ['vmin', 'vmax', 'ignore'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_view_interval(...)' code ##################

        unicode_13411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2326, (-1)), 'unicode', u'\n        If *ignore* is *False*, the order of vmin, vmax\n        does not matter; the original axis orientation will\n        be preserved. In addition, the view limits can be\n        expanded, but will not be reduced.  This method is\n        for mpl internal use; for normal use, see\n        :meth:`~matplotlib.axes.Axes.set_ylim`.\n\n        ')
        
        # Getting the type of 'ignore' (line 2327)
        ignore_13412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2327, 11), 'ignore')
        # Testing the type of an if condition (line 2327)
        if_condition_13413 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2327, 8), ignore_13412)
        # Assigning a type to the variable 'if_condition_13413' (line 2327)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2327, 8), 'if_condition_13413', if_condition_13413)
        # SSA begins for if statement (line 2327)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 2328):
        
        # Assigning a Tuple to a Attribute (line 2328):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2328)
        tuple_13414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2328, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2328)
        # Adding element type (line 2328)
        # Getting the type of 'vmin' (line 2328)
        vmin_13415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 42), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2328, 42), tuple_13414, vmin_13415)
        # Adding element type (line 2328)
        # Getting the type of 'vmax' (line 2328)
        vmax_13416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 48), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2328, 42), tuple_13414, vmax_13416)
        
        # Getting the type of 'self' (line 2328)
        self_13417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2328, 12), 'self')
        # Obtaining the member 'axes' of a type (line 2328)
        axes_13418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2328, 12), self_13417, 'axes')
        # Obtaining the member 'viewLim' of a type (line 2328)
        viewLim_13419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2328, 12), axes_13418, 'viewLim')
        # Setting the type of the member 'intervaly' of a type (line 2328)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2328, 12), viewLim_13419, 'intervaly', tuple_13414)
        # SSA branch for the else part of an if statement (line 2327)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 2330):
        
        # Assigning a Call to a Name:
        
        # Call to get_view_interval(...): (line 2330)
        # Processing the call keyword arguments (line 2330)
        kwargs_13422 = {}
        # Getting the type of 'self' (line 2330)
        self_13420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 25), 'self', False)
        # Obtaining the member 'get_view_interval' of a type (line 2330)
        get_view_interval_13421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2330, 25), self_13420, 'get_view_interval')
        # Calling get_view_interval(args, kwargs) (line 2330)
        get_view_interval_call_result_13423 = invoke(stypy.reporting.localization.Localization(__file__, 2330, 25), get_view_interval_13421, *[], **kwargs_13422)
        
        # Assigning a type to the variable 'call_assignment_7047' (line 2330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'call_assignment_7047', get_view_interval_call_result_13423)
        
        # Assigning a Call to a Name (line 2330):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_13426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2330, 12), 'int')
        # Processing the call keyword arguments
        kwargs_13427 = {}
        # Getting the type of 'call_assignment_7047' (line 2330)
        call_assignment_7047_13424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'call_assignment_7047', False)
        # Obtaining the member '__getitem__' of a type (line 2330)
        getitem___13425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2330, 12), call_assignment_7047_13424, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_13428 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___13425, *[int_13426], **kwargs_13427)
        
        # Assigning a type to the variable 'call_assignment_7048' (line 2330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'call_assignment_7048', getitem___call_result_13428)
        
        # Assigning a Name to a Name (line 2330):
        # Getting the type of 'call_assignment_7048' (line 2330)
        call_assignment_7048_13429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'call_assignment_7048')
        # Assigning a type to the variable 'Vmin' (line 2330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'Vmin', call_assignment_7048_13429)
        
        # Assigning a Call to a Name (line 2330):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_13432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2330, 12), 'int')
        # Processing the call keyword arguments
        kwargs_13433 = {}
        # Getting the type of 'call_assignment_7047' (line 2330)
        call_assignment_7047_13430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'call_assignment_7047', False)
        # Obtaining the member '__getitem__' of a type (line 2330)
        getitem___13431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2330, 12), call_assignment_7047_13430, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_13434 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___13431, *[int_13432], **kwargs_13433)
        
        # Assigning a type to the variable 'call_assignment_7049' (line 2330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'call_assignment_7049', getitem___call_result_13434)
        
        # Assigning a Name to a Name (line 2330):
        # Getting the type of 'call_assignment_7049' (line 2330)
        call_assignment_7049_13435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2330, 12), 'call_assignment_7049')
        # Assigning a type to the variable 'Vmax' (line 2330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2330, 18), 'Vmax', call_assignment_7049_13435)
        
        
        # Getting the type of 'Vmin' (line 2331)
        Vmin_13436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2331, 15), 'Vmin')
        # Getting the type of 'Vmax' (line 2331)
        Vmax_13437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2331, 22), 'Vmax')
        # Applying the binary operator '<' (line 2331)
        result_lt_13438 = python_operator(stypy.reporting.localization.Localization(__file__, 2331, 15), '<', Vmin_13436, Vmax_13437)
        
        # Testing the type of an if condition (line 2331)
        if_condition_13439 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2331, 12), result_lt_13438)
        # Assigning a type to the variable 'if_condition_13439' (line 2331)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2331, 12), 'if_condition_13439', if_condition_13439)
        # SSA begins for if statement (line 2331)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 2332):
        
        # Assigning a Tuple to a Attribute (line 2332):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2332)
        tuple_13440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2332, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2332)
        # Adding element type (line 2332)
        
        # Call to min(...): (line 2332)
        # Processing the call arguments (line 2332)
        # Getting the type of 'vmin' (line 2332)
        vmin_13442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 51), 'vmin', False)
        # Getting the type of 'vmax' (line 2332)
        vmax_13443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 57), 'vmax', False)
        # Getting the type of 'Vmin' (line 2332)
        Vmin_13444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 63), 'Vmin', False)
        # Processing the call keyword arguments (line 2332)
        kwargs_13445 = {}
        # Getting the type of 'min' (line 2332)
        min_13441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 47), 'min', False)
        # Calling min(args, kwargs) (line 2332)
        min_call_result_13446 = invoke(stypy.reporting.localization.Localization(__file__, 2332, 47), min_13441, *[vmin_13442, vmax_13443, Vmin_13444], **kwargs_13445)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2332, 47), tuple_13440, min_call_result_13446)
        # Adding element type (line 2332)
        
        # Call to max(...): (line 2333)
        # Processing the call arguments (line 2333)
        # Getting the type of 'vmin' (line 2333)
        vmin_13448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 51), 'vmin', False)
        # Getting the type of 'vmax' (line 2333)
        vmax_13449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 57), 'vmax', False)
        # Getting the type of 'Vmax' (line 2333)
        Vmax_13450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 63), 'Vmax', False)
        # Processing the call keyword arguments (line 2333)
        kwargs_13451 = {}
        # Getting the type of 'max' (line 2333)
        max_13447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2333, 47), 'max', False)
        # Calling max(args, kwargs) (line 2333)
        max_call_result_13452 = invoke(stypy.reporting.localization.Localization(__file__, 2333, 47), max_13447, *[vmin_13448, vmax_13449, Vmax_13450], **kwargs_13451)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2332, 47), tuple_13440, max_call_result_13452)
        
        # Getting the type of 'self' (line 2332)
        self_13453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2332, 16), 'self')
        # Obtaining the member 'axes' of a type (line 2332)
        axes_13454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 16), self_13453, 'axes')
        # Obtaining the member 'viewLim' of a type (line 2332)
        viewLim_13455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 16), axes_13454, 'viewLim')
        # Setting the type of the member 'intervaly' of a type (line 2332)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2332, 16), viewLim_13455, 'intervaly', tuple_13440)
        # SSA branch for the else part of an if statement (line 2331)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Tuple to a Attribute (line 2335):
        
        # Assigning a Tuple to a Attribute (line 2335):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2335)
        tuple_13456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2335, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2335)
        # Adding element type (line 2335)
        
        # Call to max(...): (line 2335)
        # Processing the call arguments (line 2335)
        # Getting the type of 'vmin' (line 2335)
        vmin_13458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 51), 'vmin', False)
        # Getting the type of 'vmax' (line 2335)
        vmax_13459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 57), 'vmax', False)
        # Getting the type of 'Vmin' (line 2335)
        Vmin_13460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 63), 'Vmin', False)
        # Processing the call keyword arguments (line 2335)
        kwargs_13461 = {}
        # Getting the type of 'max' (line 2335)
        max_13457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 47), 'max', False)
        # Calling max(args, kwargs) (line 2335)
        max_call_result_13462 = invoke(stypy.reporting.localization.Localization(__file__, 2335, 47), max_13457, *[vmin_13458, vmax_13459, Vmin_13460], **kwargs_13461)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2335, 47), tuple_13456, max_call_result_13462)
        # Adding element type (line 2335)
        
        # Call to min(...): (line 2336)
        # Processing the call arguments (line 2336)
        # Getting the type of 'vmin' (line 2336)
        vmin_13464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 51), 'vmin', False)
        # Getting the type of 'vmax' (line 2336)
        vmax_13465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 57), 'vmax', False)
        # Getting the type of 'Vmax' (line 2336)
        Vmax_13466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 63), 'Vmax', False)
        # Processing the call keyword arguments (line 2336)
        kwargs_13467 = {}
        # Getting the type of 'min' (line 2336)
        min_13463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2336, 47), 'min', False)
        # Calling min(args, kwargs) (line 2336)
        min_call_result_13468 = invoke(stypy.reporting.localization.Localization(__file__, 2336, 47), min_13463, *[vmin_13464, vmax_13465, Vmax_13466], **kwargs_13467)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2335, 47), tuple_13456, min_call_result_13468)
        
        # Getting the type of 'self' (line 2335)
        self_13469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2335, 16), 'self')
        # Obtaining the member 'axes' of a type (line 2335)
        axes_13470 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2335, 16), self_13469, 'axes')
        # Obtaining the member 'viewLim' of a type (line 2335)
        viewLim_13471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2335, 16), axes_13470, 'viewLim')
        # Setting the type of the member 'intervaly' of a type (line 2335)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2335, 16), viewLim_13471, 'intervaly', tuple_13456)
        # SSA join for if statement (line 2331)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2327)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2337):
        
        # Assigning a Name to a Attribute (line 2337):
        # Getting the type of 'True' (line 2337)
        True_13472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 21), 'True')
        # Getting the type of 'self' (line 2337)
        self_13473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2337, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2337)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2337, 8), self_13473, 'stale', True_13472)
        
        # ################# End of 'set_view_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_view_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 2317)
        stypy_return_type_13474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2317, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13474)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_view_interval'
        return stypy_return_type_13474


    @norecursion
    def get_minpos(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_minpos'
        module_type_store = module_type_store.open_function_context('get_minpos', 2339, 4, False)
        # Assigning a type to the variable 'self' (line 2340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2340, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.get_minpos.__dict__.__setitem__('stypy_localization', localization)
        YAxis.get_minpos.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.get_minpos.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.get_minpos.__dict__.__setitem__('stypy_function_name', 'YAxis.get_minpos')
        YAxis.get_minpos.__dict__.__setitem__('stypy_param_names_list', [])
        YAxis.get_minpos.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.get_minpos.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.get_minpos.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.get_minpos.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.get_minpos.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.get_minpos.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.get_minpos', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_minpos', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_minpos(...)' code ##################

        # Getting the type of 'self' (line 2340)
        self_13475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2340, 15), 'self')
        # Obtaining the member 'axes' of a type (line 2340)
        axes_13476 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 15), self_13475, 'axes')
        # Obtaining the member 'dataLim' of a type (line 2340)
        dataLim_13477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 15), axes_13476, 'dataLim')
        # Obtaining the member 'minposy' of a type (line 2340)
        minposy_13478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2340, 15), dataLim_13477, 'minposy')
        # Assigning a type to the variable 'stypy_return_type' (line 2340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2340, 8), 'stypy_return_type', minposy_13478)
        
        # ################# End of 'get_minpos(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_minpos' in the type store
        # Getting the type of 'stypy_return_type' (line 2339)
        stypy_return_type_13479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2339, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13479)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_minpos'
        return stypy_return_type_13479


    @norecursion
    def get_data_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_data_interval'
        module_type_store = module_type_store.open_function_context('get_data_interval', 2342, 4, False)
        # Assigning a type to the variable 'self' (line 2343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2343, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.get_data_interval.__dict__.__setitem__('stypy_localization', localization)
        YAxis.get_data_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.get_data_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.get_data_interval.__dict__.__setitem__('stypy_function_name', 'YAxis.get_data_interval')
        YAxis.get_data_interval.__dict__.__setitem__('stypy_param_names_list', [])
        YAxis.get_data_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.get_data_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.get_data_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.get_data_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.get_data_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.get_data_interval.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.get_data_interval', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_data_interval', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_data_interval(...)' code ##################

        unicode_13480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2343, 8), 'unicode', u'return the Interval instance for this axis data limits')
        # Getting the type of 'self' (line 2344)
        self_13481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2344, 15), 'self')
        # Obtaining the member 'axes' of a type (line 2344)
        axes_13482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 15), self_13481, 'axes')
        # Obtaining the member 'dataLim' of a type (line 2344)
        dataLim_13483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 15), axes_13482, 'dataLim')
        # Obtaining the member 'intervaly' of a type (line 2344)
        intervaly_13484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2344, 15), dataLim_13483, 'intervaly')
        # Assigning a type to the variable 'stypy_return_type' (line 2344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2344, 8), 'stypy_return_type', intervaly_13484)
        
        # ################# End of 'get_data_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_data_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 2342)
        stypy_return_type_13485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2342, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13485)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_data_interval'
        return stypy_return_type_13485


    @norecursion
    def set_data_interval(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 2346)
        False_13486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 51), 'False')
        defaults = [False_13486]
        # Create a new context for function 'set_data_interval'
        module_type_store = module_type_store.open_function_context('set_data_interval', 2346, 4, False)
        # Assigning a type to the variable 'self' (line 2347)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2347, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.set_data_interval.__dict__.__setitem__('stypy_localization', localization)
        YAxis.set_data_interval.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.set_data_interval.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.set_data_interval.__dict__.__setitem__('stypy_function_name', 'YAxis.set_data_interval')
        YAxis.set_data_interval.__dict__.__setitem__('stypy_param_names_list', ['vmin', 'vmax', 'ignore'])
        YAxis.set_data_interval.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.set_data_interval.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.set_data_interval.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.set_data_interval.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.set_data_interval.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.set_data_interval.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.set_data_interval', ['vmin', 'vmax', 'ignore'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data_interval', localization, ['vmin', 'vmax', 'ignore'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data_interval(...)' code ##################

        unicode_13487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2347, 8), 'unicode', u'set the axis data limits')
        
        # Getting the type of 'ignore' (line 2348)
        ignore_13488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2348, 11), 'ignore')
        # Testing the type of an if condition (line 2348)
        if_condition_13489 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2348, 8), ignore_13488)
        # Assigning a type to the variable 'if_condition_13489' (line 2348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2348, 8), 'if_condition_13489', if_condition_13489)
        # SSA begins for if statement (line 2348)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 2349):
        
        # Assigning a Tuple to a Attribute (line 2349):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2349)
        tuple_13490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2349, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2349)
        # Adding element type (line 2349)
        # Getting the type of 'vmin' (line 2349)
        vmin_13491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2349, 42), 'vmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2349, 42), tuple_13490, vmin_13491)
        # Adding element type (line 2349)
        # Getting the type of 'vmax' (line 2349)
        vmax_13492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2349, 48), 'vmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2349, 42), tuple_13490, vmax_13492)
        
        # Getting the type of 'self' (line 2349)
        self_13493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2349, 12), 'self')
        # Obtaining the member 'axes' of a type (line 2349)
        axes_13494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2349, 12), self_13493, 'axes')
        # Obtaining the member 'dataLim' of a type (line 2349)
        dataLim_13495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2349, 12), axes_13494, 'dataLim')
        # Setting the type of the member 'intervaly' of a type (line 2349)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2349, 12), dataLim_13495, 'intervaly', tuple_13490)
        # SSA branch for the else part of an if statement (line 2348)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 2351):
        
        # Assigning a Call to a Name:
        
        # Call to get_data_interval(...): (line 2351)
        # Processing the call keyword arguments (line 2351)
        kwargs_13498 = {}
        # Getting the type of 'self' (line 2351)
        self_13496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 25), 'self', False)
        # Obtaining the member 'get_data_interval' of a type (line 2351)
        get_data_interval_13497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 25), self_13496, 'get_data_interval')
        # Calling get_data_interval(args, kwargs) (line 2351)
        get_data_interval_call_result_13499 = invoke(stypy.reporting.localization.Localization(__file__, 2351, 25), get_data_interval_13497, *[], **kwargs_13498)
        
        # Assigning a type to the variable 'call_assignment_7050' (line 2351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 12), 'call_assignment_7050', get_data_interval_call_result_13499)
        
        # Assigning a Call to a Name (line 2351):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_13502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2351, 12), 'int')
        # Processing the call keyword arguments
        kwargs_13503 = {}
        # Getting the type of 'call_assignment_7050' (line 2351)
        call_assignment_7050_13500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 12), 'call_assignment_7050', False)
        # Obtaining the member '__getitem__' of a type (line 2351)
        getitem___13501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 12), call_assignment_7050_13500, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_13504 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___13501, *[int_13502], **kwargs_13503)
        
        # Assigning a type to the variable 'call_assignment_7051' (line 2351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 12), 'call_assignment_7051', getitem___call_result_13504)
        
        # Assigning a Name to a Name (line 2351):
        # Getting the type of 'call_assignment_7051' (line 2351)
        call_assignment_7051_13505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 12), 'call_assignment_7051')
        # Assigning a type to the variable 'Vmin' (line 2351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 12), 'Vmin', call_assignment_7051_13505)
        
        # Assigning a Call to a Name (line 2351):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_13508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2351, 12), 'int')
        # Processing the call keyword arguments
        kwargs_13509 = {}
        # Getting the type of 'call_assignment_7050' (line 2351)
        call_assignment_7050_13506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 12), 'call_assignment_7050', False)
        # Obtaining the member '__getitem__' of a type (line 2351)
        getitem___13507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2351, 12), call_assignment_7050_13506, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_13510 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___13507, *[int_13508], **kwargs_13509)
        
        # Assigning a type to the variable 'call_assignment_7052' (line 2351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 12), 'call_assignment_7052', getitem___call_result_13510)
        
        # Assigning a Name to a Name (line 2351):
        # Getting the type of 'call_assignment_7052' (line 2351)
        call_assignment_7052_13511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2351, 12), 'call_assignment_7052')
        # Assigning a type to the variable 'Vmax' (line 2351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2351, 18), 'Vmax', call_assignment_7052_13511)
        
        # Assigning a Tuple to a Attribute (line 2352):
        
        # Assigning a Tuple to a Attribute (line 2352):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2352)
        tuple_13512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2352, 42), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2352)
        # Adding element type (line 2352)
        
        # Call to min(...): (line 2352)
        # Processing the call arguments (line 2352)
        # Getting the type of 'vmin' (line 2352)
        vmin_13514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 46), 'vmin', False)
        # Getting the type of 'Vmin' (line 2352)
        Vmin_13515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 52), 'Vmin', False)
        # Processing the call keyword arguments (line 2352)
        kwargs_13516 = {}
        # Getting the type of 'min' (line 2352)
        min_13513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 42), 'min', False)
        # Calling min(args, kwargs) (line 2352)
        min_call_result_13517 = invoke(stypy.reporting.localization.Localization(__file__, 2352, 42), min_13513, *[vmin_13514, Vmin_13515], **kwargs_13516)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2352, 42), tuple_13512, min_call_result_13517)
        # Adding element type (line 2352)
        
        # Call to max(...): (line 2352)
        # Processing the call arguments (line 2352)
        # Getting the type of 'vmax' (line 2352)
        vmax_13519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 63), 'vmax', False)
        # Getting the type of 'Vmax' (line 2352)
        Vmax_13520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 69), 'Vmax', False)
        # Processing the call keyword arguments (line 2352)
        kwargs_13521 = {}
        # Getting the type of 'max' (line 2352)
        max_13518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 59), 'max', False)
        # Calling max(args, kwargs) (line 2352)
        max_call_result_13522 = invoke(stypy.reporting.localization.Localization(__file__, 2352, 59), max_13518, *[vmax_13519, Vmax_13520], **kwargs_13521)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2352, 42), tuple_13512, max_call_result_13522)
        
        # Getting the type of 'self' (line 2352)
        self_13523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2352, 12), 'self')
        # Obtaining the member 'axes' of a type (line 2352)
        axes_13524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2352, 12), self_13523, 'axes')
        # Obtaining the member 'dataLim' of a type (line 2352)
        dataLim_13525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2352, 12), axes_13524, 'dataLim')
        # Setting the type of the member 'intervaly' of a type (line 2352)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2352, 12), dataLim_13525, 'intervaly', tuple_13512)
        # SSA join for if statement (line 2348)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2353):
        
        # Assigning a Name to a Attribute (line 2353):
        # Getting the type of 'True' (line 2353)
        True_13526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 21), 'True')
        # Getting the type of 'self' (line 2353)
        self_13527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2353, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2353)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2353, 8), self_13527, 'stale', True_13526)
        
        # ################# End of 'set_data_interval(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data_interval' in the type store
        # Getting the type of 'stypy_return_type' (line 2346)
        stypy_return_type_13528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2346, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13528)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data_interval'
        return stypy_return_type_13528


    @norecursion
    def set_default_intervals(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_default_intervals'
        module_type_store = module_type_store.open_function_context('set_default_intervals', 2355, 4, False)
        # Assigning a type to the variable 'self' (line 2356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2356, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.set_default_intervals.__dict__.__setitem__('stypy_localization', localization)
        YAxis.set_default_intervals.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.set_default_intervals.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.set_default_intervals.__dict__.__setitem__('stypy_function_name', 'YAxis.set_default_intervals')
        YAxis.set_default_intervals.__dict__.__setitem__('stypy_param_names_list', [])
        YAxis.set_default_intervals.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.set_default_intervals.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.set_default_intervals.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.set_default_intervals.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.set_default_intervals.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.set_default_intervals.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.set_default_intervals', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_default_intervals', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_default_intervals(...)' code ##################

        unicode_13529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2356, 8), 'unicode', u'set the default limits for the axis interval if they are not mutated')
        
        # Assigning a Tuple to a Tuple (line 2357):
        
        # Assigning a Num to a Name (line 2357):
        float_13530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2357, 21), 'float')
        # Assigning a type to the variable 'tuple_assignment_7053' (line 2357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2357, 8), 'tuple_assignment_7053', float_13530)
        
        # Assigning a Num to a Name (line 2357):
        float_13531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2357, 25), 'float')
        # Assigning a type to the variable 'tuple_assignment_7054' (line 2357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2357, 8), 'tuple_assignment_7054', float_13531)
        
        # Assigning a Name to a Name (line 2357):
        # Getting the type of 'tuple_assignment_7053' (line 2357)
        tuple_assignment_7053_13532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 8), 'tuple_assignment_7053')
        # Assigning a type to the variable 'ymin' (line 2357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2357, 8), 'ymin', tuple_assignment_7053_13532)
        
        # Assigning a Name to a Name (line 2357):
        # Getting the type of 'tuple_assignment_7054' (line 2357)
        tuple_assignment_7054_13533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2357, 8), 'tuple_assignment_7054')
        # Assigning a type to the variable 'ymax' (line 2357)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2357, 14), 'ymax', tuple_assignment_7054_13533)
        
        # Assigning a Call to a Name (line 2358):
        
        # Assigning a Call to a Name (line 2358):
        
        # Call to mutatedy(...): (line 2358)
        # Processing the call keyword arguments (line 2358)
        kwargs_13538 = {}
        # Getting the type of 'self' (line 2358)
        self_13534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2358, 22), 'self', False)
        # Obtaining the member 'axes' of a type (line 2358)
        axes_13535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2358, 22), self_13534, 'axes')
        # Obtaining the member 'dataLim' of a type (line 2358)
        dataLim_13536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2358, 22), axes_13535, 'dataLim')
        # Obtaining the member 'mutatedy' of a type (line 2358)
        mutatedy_13537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2358, 22), dataLim_13536, 'mutatedy')
        # Calling mutatedy(args, kwargs) (line 2358)
        mutatedy_call_result_13539 = invoke(stypy.reporting.localization.Localization(__file__, 2358, 22), mutatedy_13537, *[], **kwargs_13538)
        
        # Assigning a type to the variable 'dataMutated' (line 2358)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2358, 8), 'dataMutated', mutatedy_call_result_13539)
        
        # Assigning a Call to a Name (line 2359):
        
        # Assigning a Call to a Name (line 2359):
        
        # Call to mutatedy(...): (line 2359)
        # Processing the call keyword arguments (line 2359)
        kwargs_13544 = {}
        # Getting the type of 'self' (line 2359)
        self_13540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 22), 'self', False)
        # Obtaining the member 'axes' of a type (line 2359)
        axes_13541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2359, 22), self_13540, 'axes')
        # Obtaining the member 'viewLim' of a type (line 2359)
        viewLim_13542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2359, 22), axes_13541, 'viewLim')
        # Obtaining the member 'mutatedy' of a type (line 2359)
        mutatedy_13543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2359, 22), viewLim_13542, 'mutatedy')
        # Calling mutatedy(args, kwargs) (line 2359)
        mutatedy_call_result_13545 = invoke(stypy.reporting.localization.Localization(__file__, 2359, 22), mutatedy_13543, *[], **kwargs_13544)
        
        # Assigning a type to the variable 'viewMutated' (line 2359)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2359, 8), 'viewMutated', mutatedy_call_result_13545)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'dataMutated' (line 2360)
        dataMutated_13546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2360, 15), 'dataMutated')
        # Applying the 'not' unary operator (line 2360)
        result_not__13547 = python_operator(stypy.reporting.localization.Localization(__file__, 2360, 11), 'not', dataMutated_13546)
        
        
        # Getting the type of 'viewMutated' (line 2360)
        viewMutated_13548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2360, 34), 'viewMutated')
        # Applying the 'not' unary operator (line 2360)
        result_not__13549 = python_operator(stypy.reporting.localization.Localization(__file__, 2360, 30), 'not', viewMutated_13548)
        
        # Applying the binary operator 'or' (line 2360)
        result_or_keyword_13550 = python_operator(stypy.reporting.localization.Localization(__file__, 2360, 11), 'or', result_not__13547, result_not__13549)
        
        # Testing the type of an if condition (line 2360)
        if_condition_13551 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2360, 8), result_or_keyword_13550)
        # Assigning a type to the variable 'if_condition_13551' (line 2360)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2360, 8), 'if_condition_13551', if_condition_13551)
        # SSA begins for if statement (line 2360)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 2361)
        self_13552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2361, 15), 'self')
        # Obtaining the member 'converter' of a type (line 2361)
        converter_13553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2361, 15), self_13552, 'converter')
        # Getting the type of 'None' (line 2361)
        None_13554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2361, 37), 'None')
        # Applying the binary operator 'isnot' (line 2361)
        result_is_not_13555 = python_operator(stypy.reporting.localization.Localization(__file__, 2361, 15), 'isnot', converter_13553, None_13554)
        
        # Testing the type of an if condition (line 2361)
        if_condition_13556 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2361, 12), result_is_not_13555)
        # Assigning a type to the variable 'if_condition_13556' (line 2361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2361, 12), 'if_condition_13556', if_condition_13556)
        # SSA begins for if statement (line 2361)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 2362):
        
        # Assigning a Call to a Name (line 2362):
        
        # Call to axisinfo(...): (line 2362)
        # Processing the call arguments (line 2362)
        # Getting the type of 'self' (line 2362)
        self_13560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 47), 'self', False)
        # Obtaining the member 'units' of a type (line 2362)
        units_13561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2362, 47), self_13560, 'units')
        # Getting the type of 'self' (line 2362)
        self_13562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 59), 'self', False)
        # Processing the call keyword arguments (line 2362)
        kwargs_13563 = {}
        # Getting the type of 'self' (line 2362)
        self_13557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 23), 'self', False)
        # Obtaining the member 'converter' of a type (line 2362)
        converter_13558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2362, 23), self_13557, 'converter')
        # Obtaining the member 'axisinfo' of a type (line 2362)
        axisinfo_13559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2362, 23), converter_13558, 'axisinfo')
        # Calling axisinfo(args, kwargs) (line 2362)
        axisinfo_call_result_13564 = invoke(stypy.reporting.localization.Localization(__file__, 2362, 23), axisinfo_13559, *[units_13561, self_13562], **kwargs_13563)
        
        # Assigning a type to the variable 'info' (line 2362)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2362, 16), 'info', axisinfo_call_result_13564)
        
        
        # Getting the type of 'info' (line 2363)
        info_13565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2363, 19), 'info')
        # Obtaining the member 'default_limits' of a type (line 2363)
        default_limits_13566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2363, 19), info_13565, 'default_limits')
        # Getting the type of 'None' (line 2363)
        None_13567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2363, 46), 'None')
        # Applying the binary operator 'isnot' (line 2363)
        result_is_not_13568 = python_operator(stypy.reporting.localization.Localization(__file__, 2363, 19), 'isnot', default_limits_13566, None_13567)
        
        # Testing the type of an if condition (line 2363)
        if_condition_13569 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2363, 16), result_is_not_13568)
        # Assigning a type to the variable 'if_condition_13569' (line 2363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2363, 16), 'if_condition_13569', if_condition_13569)
        # SSA begins for if statement (line 2363)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 2364):
        
        # Assigning a Subscript to a Name (line 2364):
        
        # Obtaining the type of the subscript
        int_13570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2364, 20), 'int')
        # Getting the type of 'info' (line 2364)
        info_13571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 37), 'info')
        # Obtaining the member 'default_limits' of a type (line 2364)
        default_limits_13572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2364, 37), info_13571, 'default_limits')
        # Obtaining the member '__getitem__' of a type (line 2364)
        getitem___13573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2364, 20), default_limits_13572, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2364)
        subscript_call_result_13574 = invoke(stypy.reporting.localization.Localization(__file__, 2364, 20), getitem___13573, int_13570)
        
        # Assigning a type to the variable 'tuple_var_assignment_7055' (line 2364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2364, 20), 'tuple_var_assignment_7055', subscript_call_result_13574)
        
        # Assigning a Subscript to a Name (line 2364):
        
        # Obtaining the type of the subscript
        int_13575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2364, 20), 'int')
        # Getting the type of 'info' (line 2364)
        info_13576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 37), 'info')
        # Obtaining the member 'default_limits' of a type (line 2364)
        default_limits_13577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2364, 37), info_13576, 'default_limits')
        # Obtaining the member '__getitem__' of a type (line 2364)
        getitem___13578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2364, 20), default_limits_13577, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2364)
        subscript_call_result_13579 = invoke(stypy.reporting.localization.Localization(__file__, 2364, 20), getitem___13578, int_13575)
        
        # Assigning a type to the variable 'tuple_var_assignment_7056' (line 2364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2364, 20), 'tuple_var_assignment_7056', subscript_call_result_13579)
        
        # Assigning a Name to a Name (line 2364):
        # Getting the type of 'tuple_var_assignment_7055' (line 2364)
        tuple_var_assignment_7055_13580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 20), 'tuple_var_assignment_7055')
        # Assigning a type to the variable 'valmin' (line 2364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2364, 20), 'valmin', tuple_var_assignment_7055_13580)
        
        # Assigning a Name to a Name (line 2364):
        # Getting the type of 'tuple_var_assignment_7056' (line 2364)
        tuple_var_assignment_7056_13581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 20), 'tuple_var_assignment_7056')
        # Assigning a type to the variable 'valmax' (line 2364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2364, 28), 'valmax', tuple_var_assignment_7056_13581)
        
        # Assigning a Call to a Name (line 2365):
        
        # Assigning a Call to a Name (line 2365):
        
        # Call to convert(...): (line 2365)
        # Processing the call arguments (line 2365)
        # Getting the type of 'valmin' (line 2365)
        valmin_13585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 50), 'valmin', False)
        # Getting the type of 'self' (line 2365)
        self_13586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 58), 'self', False)
        # Obtaining the member 'units' of a type (line 2365)
        units_13587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2365, 58), self_13586, 'units')
        # Getting the type of 'self' (line 2365)
        self_13588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 70), 'self', False)
        # Processing the call keyword arguments (line 2365)
        kwargs_13589 = {}
        # Getting the type of 'self' (line 2365)
        self_13582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 27), 'self', False)
        # Obtaining the member 'converter' of a type (line 2365)
        converter_13583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2365, 27), self_13582, 'converter')
        # Obtaining the member 'convert' of a type (line 2365)
        convert_13584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2365, 27), converter_13583, 'convert')
        # Calling convert(args, kwargs) (line 2365)
        convert_call_result_13590 = invoke(stypy.reporting.localization.Localization(__file__, 2365, 27), convert_13584, *[valmin_13585, units_13587, self_13588], **kwargs_13589)
        
        # Assigning a type to the variable 'ymin' (line 2365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2365, 20), 'ymin', convert_call_result_13590)
        
        # Assigning a Call to a Name (line 2366):
        
        # Assigning a Call to a Name (line 2366):
        
        # Call to convert(...): (line 2366)
        # Processing the call arguments (line 2366)
        # Getting the type of 'valmax' (line 2366)
        valmax_13594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 50), 'valmax', False)
        # Getting the type of 'self' (line 2366)
        self_13595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 58), 'self', False)
        # Obtaining the member 'units' of a type (line 2366)
        units_13596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2366, 58), self_13595, 'units')
        # Getting the type of 'self' (line 2366)
        self_13597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 70), 'self', False)
        # Processing the call keyword arguments (line 2366)
        kwargs_13598 = {}
        # Getting the type of 'self' (line 2366)
        self_13591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2366, 27), 'self', False)
        # Obtaining the member 'converter' of a type (line 2366)
        converter_13592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2366, 27), self_13591, 'converter')
        # Obtaining the member 'convert' of a type (line 2366)
        convert_13593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2366, 27), converter_13592, 'convert')
        # Calling convert(args, kwargs) (line 2366)
        convert_call_result_13599 = invoke(stypy.reporting.localization.Localization(__file__, 2366, 27), convert_13593, *[valmax_13594, units_13596, self_13597], **kwargs_13598)
        
        # Assigning a type to the variable 'ymax' (line 2366)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2366, 20), 'ymax', convert_call_result_13599)
        # SSA join for if statement (line 2363)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2361)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'dataMutated' (line 2367)
        dataMutated_13600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 19), 'dataMutated')
        # Applying the 'not' unary operator (line 2367)
        result_not__13601 = python_operator(stypy.reporting.localization.Localization(__file__, 2367, 15), 'not', dataMutated_13600)
        
        # Testing the type of an if condition (line 2367)
        if_condition_13602 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2367, 12), result_not__13601)
        # Assigning a type to the variable 'if_condition_13602' (line 2367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2367, 12), 'if_condition_13602', if_condition_13602)
        # SSA begins for if statement (line 2367)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 2368):
        
        # Assigning a Tuple to a Attribute (line 2368):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2368)
        tuple_13603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2368, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2368)
        # Adding element type (line 2368)
        # Getting the type of 'ymin' (line 2368)
        ymin_13604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 46), 'ymin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2368, 46), tuple_13603, ymin_13604)
        # Adding element type (line 2368)
        # Getting the type of 'ymax' (line 2368)
        ymax_13605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 52), 'ymax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2368, 46), tuple_13603, ymax_13605)
        
        # Getting the type of 'self' (line 2368)
        self_13606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 16), 'self')
        # Obtaining the member 'axes' of a type (line 2368)
        axes_13607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2368, 16), self_13606, 'axes')
        # Obtaining the member 'dataLim' of a type (line 2368)
        dataLim_13608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2368, 16), axes_13607, 'dataLim')
        # Setting the type of the member 'intervaly' of a type (line 2368)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2368, 16), dataLim_13608, 'intervaly', tuple_13603)
        # SSA join for if statement (line 2367)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'viewMutated' (line 2369)
        viewMutated_13609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 19), 'viewMutated')
        # Applying the 'not' unary operator (line 2369)
        result_not__13610 = python_operator(stypy.reporting.localization.Localization(__file__, 2369, 15), 'not', viewMutated_13609)
        
        # Testing the type of an if condition (line 2369)
        if_condition_13611 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2369, 12), result_not__13610)
        # Assigning a type to the variable 'if_condition_13611' (line 2369)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 12), 'if_condition_13611', if_condition_13611)
        # SSA begins for if statement (line 2369)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Attribute (line 2370):
        
        # Assigning a Tuple to a Attribute (line 2370):
        
        # Obtaining an instance of the builtin type 'tuple' (line 2370)
        tuple_13612 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2370, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2370)
        # Adding element type (line 2370)
        # Getting the type of 'ymin' (line 2370)
        ymin_13613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 46), 'ymin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2370, 46), tuple_13612, ymin_13613)
        # Adding element type (line 2370)
        # Getting the type of 'ymax' (line 2370)
        ymax_13614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 52), 'ymax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2370, 46), tuple_13612, ymax_13614)
        
        # Getting the type of 'self' (line 2370)
        self_13615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 16), 'self')
        # Obtaining the member 'axes' of a type (line 2370)
        axes_13616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2370, 16), self_13615, 'axes')
        # Obtaining the member 'viewLim' of a type (line 2370)
        viewLim_13617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2370, 16), axes_13616, 'viewLim')
        # Setting the type of the member 'intervaly' of a type (line 2370)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2370, 16), viewLim_13617, 'intervaly', tuple_13612)
        # SSA join for if statement (line 2369)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2360)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 2371):
        
        # Assigning a Name to a Attribute (line 2371):
        # Getting the type of 'True' (line 2371)
        True_13618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 21), 'True')
        # Getting the type of 'self' (line 2371)
        self_13619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2371, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 2371)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2371, 8), self_13619, 'stale', True_13618)
        
        # ################# End of 'set_default_intervals(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_default_intervals' in the type store
        # Getting the type of 'stypy_return_type' (line 2355)
        stypy_return_type_13620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2355, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13620)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_default_intervals'
        return stypy_return_type_13620


    @norecursion
    def get_tick_space(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_tick_space'
        module_type_store = module_type_store.open_function_context('get_tick_space', 2373, 4, False)
        # Assigning a type to the variable 'self' (line 2374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2374, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        YAxis.get_tick_space.__dict__.__setitem__('stypy_localization', localization)
        YAxis.get_tick_space.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        YAxis.get_tick_space.__dict__.__setitem__('stypy_type_store', module_type_store)
        YAxis.get_tick_space.__dict__.__setitem__('stypy_function_name', 'YAxis.get_tick_space')
        YAxis.get_tick_space.__dict__.__setitem__('stypy_param_names_list', [])
        YAxis.get_tick_space.__dict__.__setitem__('stypy_varargs_param_name', None)
        YAxis.get_tick_space.__dict__.__setitem__('stypy_kwargs_param_name', None)
        YAxis.get_tick_space.__dict__.__setitem__('stypy_call_defaults', defaults)
        YAxis.get_tick_space.__dict__.__setitem__('stypy_call_varargs', varargs)
        YAxis.get_tick_space.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        YAxis.get_tick_space.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.get_tick_space', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_tick_space', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_tick_space(...)' code ##################

        
        # Assigning a Call to a Name (line 2374):
        
        # Assigning a Call to a Name (line 2374):
        
        # Call to transform(...): (line 2374)
        # Processing the call arguments (line 2374)
        
        # Obtaining an instance of the builtin type 'list' (line 2374)
        list_13625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2374, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2374)
        # Adding element type (line 2374)
        
        # Obtaining an instance of the builtin type 'list' (line 2374)
        list_13626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2374, 46), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2374)
        # Adding element type (line 2374)
        int_13627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2374, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2374, 46), list_13626, int_13627)
        # Adding element type (line 2374)
        int_13628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2374, 50), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2374, 46), list_13626, int_13628)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2374, 45), list_13625, list_13626)
        # Adding element type (line 2374)
        
        # Obtaining an instance of the builtin type 'list' (line 2374)
        list_13629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2374, 54), 'list')
        # Adding type elements to the builtin type 'list' instance (line 2374)
        # Adding element type (line 2374)
        int_13630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2374, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2374, 54), list_13629, int_13630)
        # Adding element type (line 2374)
        int_13631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2374, 58), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2374, 54), list_13629, int_13631)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2374, 45), list_13625, list_13629)
        
        # Processing the call keyword arguments (line 2374)
        kwargs_13632 = {}
        # Getting the type of 'self' (line 2374)
        self_13621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 15), 'self', False)
        # Obtaining the member 'axes' of a type (line 2374)
        axes_13622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2374, 15), self_13621, 'axes')
        # Obtaining the member 'transAxes' of a type (line 2374)
        transAxes_13623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2374, 15), axes_13622, 'transAxes')
        # Obtaining the member 'transform' of a type (line 2374)
        transform_13624 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2374, 15), transAxes_13623, 'transform')
        # Calling transform(args, kwargs) (line 2374)
        transform_call_result_13633 = invoke(stypy.reporting.localization.Localization(__file__, 2374, 15), transform_13624, *[list_13625], **kwargs_13632)
        
        # Assigning a type to the variable 'ends' (line 2374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2374, 8), 'ends', transform_call_result_13633)
        
        # Assigning a BinOp to a Name (line 2375):
        
        # Assigning a BinOp to a Name (line 2375):
        
        # Obtaining the type of the subscript
        int_13634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2375, 27), 'int')
        
        # Obtaining the type of the subscript
        int_13635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2375, 24), 'int')
        # Getting the type of 'ends' (line 2375)
        ends_13636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 19), 'ends')
        # Obtaining the member '__getitem__' of a type (line 2375)
        getitem___13637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2375, 19), ends_13636, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2375)
        subscript_call_result_13638 = invoke(stypy.reporting.localization.Localization(__file__, 2375, 19), getitem___13637, int_13635)
        
        # Obtaining the member '__getitem__' of a type (line 2375)
        getitem___13639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2375, 19), subscript_call_result_13638, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2375)
        subscript_call_result_13640 = invoke(stypy.reporting.localization.Localization(__file__, 2375, 19), getitem___13639, int_13634)
        
        
        # Obtaining the type of the subscript
        int_13641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2375, 40), 'int')
        
        # Obtaining the type of the subscript
        int_13642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2375, 37), 'int')
        # Getting the type of 'ends' (line 2375)
        ends_13643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 32), 'ends')
        # Obtaining the member '__getitem__' of a type (line 2375)
        getitem___13644 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2375, 32), ends_13643, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2375)
        subscript_call_result_13645 = invoke(stypy.reporting.localization.Localization(__file__, 2375, 32), getitem___13644, int_13642)
        
        # Obtaining the member '__getitem__' of a type (line 2375)
        getitem___13646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2375, 32), subscript_call_result_13645, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2375)
        subscript_call_result_13647 = invoke(stypy.reporting.localization.Localization(__file__, 2375, 32), getitem___13646, int_13641)
        
        # Applying the binary operator '-' (line 2375)
        result_sub_13648 = python_operator(stypy.reporting.localization.Localization(__file__, 2375, 19), '-', subscript_call_result_13640, subscript_call_result_13647)
        
        # Getting the type of 'self' (line 2375)
        self_13649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 46), 'self')
        # Obtaining the member 'axes' of a type (line 2375)
        axes_13650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2375, 46), self_13649, 'axes')
        # Obtaining the member 'figure' of a type (line 2375)
        figure_13651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2375, 46), axes_13650, 'figure')
        # Obtaining the member 'dpi' of a type (line 2375)
        dpi_13652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2375, 46), figure_13651, 'dpi')
        # Applying the binary operator 'div' (line 2375)
        result_div_13653 = python_operator(stypy.reporting.localization.Localization(__file__, 2375, 18), 'div', result_sub_13648, dpi_13652)
        
        float_13654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2375, 70), 'float')
        # Applying the binary operator '*' (line 2375)
        result_mul_13655 = python_operator(stypy.reporting.localization.Localization(__file__, 2375, 17), '*', result_div_13653, float_13654)
        
        # Assigning a type to the variable 'length' (line 2375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2375, 8), 'length', result_mul_13655)
        
        # Assigning a Call to a Name (line 2376):
        
        # Assigning a Call to a Name (line 2376):
        
        # Call to _get_tick(...): (line 2376)
        # Processing the call arguments (line 2376)
        # Getting the type of 'True' (line 2376)
        True_13658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2376, 30), 'True', False)
        # Processing the call keyword arguments (line 2376)
        kwargs_13659 = {}
        # Getting the type of 'self' (line 2376)
        self_13656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2376, 15), 'self', False)
        # Obtaining the member '_get_tick' of a type (line 2376)
        _get_tick_13657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2376, 15), self_13656, '_get_tick')
        # Calling _get_tick(args, kwargs) (line 2376)
        _get_tick_call_result_13660 = invoke(stypy.reporting.localization.Localization(__file__, 2376, 15), _get_tick_13657, *[True_13658], **kwargs_13659)
        
        # Assigning a type to the variable 'tick' (line 2376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2376, 8), 'tick', _get_tick_call_result_13660)
        
        # Assigning a BinOp to a Name (line 2378):
        
        # Assigning a BinOp to a Name (line 2378):
        
        # Call to get_size(...): (line 2378)
        # Processing the call keyword arguments (line 2378)
        kwargs_13664 = {}
        # Getting the type of 'tick' (line 2378)
        tick_13661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 15), 'tick', False)
        # Obtaining the member 'label1' of a type (line 2378)
        label1_13662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2378, 15), tick_13661, 'label1')
        # Obtaining the member 'get_size' of a type (line 2378)
        get_size_13663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2378, 15), label1_13662, 'get_size')
        # Calling get_size(args, kwargs) (line 2378)
        get_size_call_result_13665 = invoke(stypy.reporting.localization.Localization(__file__, 2378, 15), get_size_13663, *[], **kwargs_13664)
        
        float_13666 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2378, 40), 'float')
        # Applying the binary operator '*' (line 2378)
        result_mul_13667 = python_operator(stypy.reporting.localization.Localization(__file__, 2378, 15), '*', get_size_call_result_13665, float_13666)
        
        # Assigning a type to the variable 'size' (line 2378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2378, 8), 'size', result_mul_13667)
        
        
        # Getting the type of 'size' (line 2379)
        size_13668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2379, 11), 'size')
        int_13669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2379, 18), 'int')
        # Applying the binary operator '>' (line 2379)
        result_gt_13670 = python_operator(stypy.reporting.localization.Localization(__file__, 2379, 11), '>', size_13668, int_13669)
        
        # Testing the type of an if condition (line 2379)
        if_condition_13671 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2379, 8), result_gt_13670)
        # Assigning a type to the variable 'if_condition_13671' (line 2379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2379, 8), 'if_condition_13671', if_condition_13671)
        # SSA begins for if statement (line 2379)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to int(...): (line 2380)
        # Processing the call arguments (line 2380)
        
        # Call to floor(...): (line 2380)
        # Processing the call arguments (line 2380)
        # Getting the type of 'length' (line 2380)
        length_13675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2380, 32), 'length', False)
        # Getting the type of 'size' (line 2380)
        size_13676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2380, 41), 'size', False)
        # Applying the binary operator 'div' (line 2380)
        result_div_13677 = python_operator(stypy.reporting.localization.Localization(__file__, 2380, 32), 'div', length_13675, size_13676)
        
        # Processing the call keyword arguments (line 2380)
        kwargs_13678 = {}
        # Getting the type of 'np' (line 2380)
        np_13673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2380, 23), 'np', False)
        # Obtaining the member 'floor' of a type (line 2380)
        floor_13674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2380, 23), np_13673, 'floor')
        # Calling floor(args, kwargs) (line 2380)
        floor_call_result_13679 = invoke(stypy.reporting.localization.Localization(__file__, 2380, 23), floor_13674, *[result_div_13677], **kwargs_13678)
        
        # Processing the call keyword arguments (line 2380)
        kwargs_13680 = {}
        # Getting the type of 'int' (line 2380)
        int_13672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2380, 19), 'int', False)
        # Calling int(args, kwargs) (line 2380)
        int_call_result_13681 = invoke(stypy.reporting.localization.Localization(__file__, 2380, 19), int_13672, *[floor_call_result_13679], **kwargs_13680)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2380)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2380, 12), 'stypy_return_type', int_call_result_13681)
        # SSA branch for the else part of an if statement (line 2379)
        module_type_store.open_ssa_branch('else')
        int_13682 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 19), 'int')
        int_13683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 22), 'int')
        # Applying the binary operator '**' (line 2382)
        result_pow_13684 = python_operator(stypy.reporting.localization.Localization(__file__, 2382, 19), '**', int_13682, int_13683)
        
        int_13685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 27), 'int')
        # Applying the binary operator '-' (line 2382)
        result_sub_13686 = python_operator(stypy.reporting.localization.Localization(__file__, 2382, 19), '-', result_pow_13684, int_13685)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 12), 'stypy_return_type', result_sub_13686)
        # SSA join for if statement (line 2379)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_tick_space(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_tick_space' in the type store
        # Getting the type of 'stypy_return_type' (line 2373)
        stypy_return_type_13687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2373, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_13687)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_tick_space'
        return stypy_return_type_13687


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 2049, 0, False)
        # Assigning a type to the variable 'self' (line 2050)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2050, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'YAxis.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'YAxis' (line 2049)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2049, 0), 'YAxis', YAxis)

# Assigning a Str to a Name (line 2050):
unicode_13688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2050, 15), 'unicode', u'yaxis')
# Getting the type of 'YAxis'
YAxis_13689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'YAxis')
# Setting the type of the member '__name__' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), YAxis_13689, '__name__', unicode_13688)

# Assigning a Str to a Name (line 2051):
unicode_13690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2051, 16), 'unicode', u'y')
# Getting the type of 'YAxis'
YAxis_13691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'YAxis')
# Setting the type of the member 'axis_name' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), YAxis_13691, 'axis_name', unicode_13690)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
