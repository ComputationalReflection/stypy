
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: The figure module provides the top-level
3: :class:`~matplotlib.artist.Artist`, the :class:`Figure`, which
4: contains all the plot elements.  The following classes are defined
5: 
6: :class:`SubplotParams`
7:     control the default spacing of the subplots
8: 
9: :class:`Figure`
10:     top level container for all plot elements
11: 
12: '''
13: 
14: from __future__ import (absolute_import, division, print_function,
15:                         unicode_literals)
16: 
17: import six
18: 
19: import warnings
20: 
21: import numpy as np
22: 
23: from matplotlib import rcParams
24: from matplotlib import docstring
25: from matplotlib import __version__ as _mpl_version
26: 
27: import matplotlib.artist as martist
28: from matplotlib.artist import Artist, allow_rasterization
29: 
30: import matplotlib.cbook as cbook
31: 
32: from matplotlib.cbook import Stack, iterable
33: 
34: from matplotlib import image as mimage
35: from matplotlib.image import FigureImage
36: 
37: import matplotlib.colorbar as cbar
38: 
39: from matplotlib.axes import Axes, SubplotBase, subplot_class_factory
40: from matplotlib.blocking_input import BlockingMouseInput, BlockingKeyMouseInput
41: from matplotlib.gridspec import GridSpec
42: from matplotlib.legend import Legend
43: from matplotlib.patches import Rectangle
44: from matplotlib.projections import (get_projection_names,
45:                                     process_projection_requirements)
46: from matplotlib.text import Text, _process_text_args
47: from matplotlib.transforms import (Affine2D, Bbox, BboxTransformTo,
48:                                    TransformedBbox)
49: from matplotlib.backend_bases import NonGuiException
50: 
51: docstring.interpd.update(projection_names=get_projection_names())
52: 
53: 
54: def _stale_figure_callback(self, val):
55:     if self.figure:
56:         self.figure.stale = val
57: 
58: 
59: class AxesStack(Stack):
60:     '''
61:     Specialization of the Stack to handle all tracking of Axes in a Figure.
62:     This stack stores ``key, (ind, axes)`` pairs, where:
63: 
64:         * **key** should be a hash of the args and kwargs
65:           used in generating the Axes.
66:         * **ind** is a serial number for tracking the order
67:           in which axes were added.
68: 
69:     The AxesStack is a callable, where ``ax_stack()`` returns
70:     the current axes. Alternatively the :meth:`current_key_axes` will
71:     return the current key and associated axes.
72: 
73:     '''
74:     def __init__(self):
75:         Stack.__init__(self)
76:         self._ind = 0
77: 
78:     def as_list(self):
79:         '''
80:         Return a list of the Axes instances that have been added to the figure
81:         '''
82:         ia_list = [a for k, a in self._elements]
83:         ia_list.sort()
84:         return [a for i, a in ia_list]
85: 
86:     def get(self, key):
87:         '''
88:         Return the Axes instance that was added with *key*.
89:         If it is not present, return None.
90:         '''
91:         item = dict(self._elements).get(key)
92:         if item is None:
93:             return None
94:         cbook.warn_deprecated(
95:             "2.1",
96:             "Adding an axes using the same arguments as a previous axes "
97:             "currently reuses the earlier instance.  In a future version, "
98:             "a new instance will always be created and returned.  Meanwhile, "
99:             "this warning can be suppressed, and the future behavior ensured, "
100:             "by passing a unique label to each axes instance.")
101:         return item[1]
102: 
103:     def _entry_from_axes(self, e):
104:         ind, k = {a: (ind, k) for k, (ind, a) in self._elements}[e]
105:         return (k, (ind, e))
106: 
107:     def remove(self, a):
108:         '''Remove the axes from the stack.'''
109:         Stack.remove(self, self._entry_from_axes(a))
110: 
111:     def bubble(self, a):
112:         '''
113:         Move the given axes, which must already exist in the
114:         stack, to the top.
115:         '''
116:         return Stack.bubble(self, self._entry_from_axes(a))
117: 
118:     def add(self, key, a):
119:         '''
120:         Add Axes *a*, with key *key*, to the stack, and return the stack.
121: 
122:         If *key* is unhashable, replace it by a unique, arbitrary object.
123: 
124:         If *a* is already on the stack, don't add it again, but
125:         return *None*.
126:         '''
127:         # All the error checking may be unnecessary; but this method
128:         # is called so seldom that the overhead is negligible.
129:         if not isinstance(a, Axes):
130:             raise ValueError("second argument, {!r}, is not an Axes".format(a))
131:         try:
132:             hash(key)
133:         except TypeError:
134:             key = object()
135: 
136:         a_existing = self.get(key)
137:         if a_existing is not None:
138:             Stack.remove(self, (key, a_existing))
139:             warnings.warn(
140:                 "key {!r} already existed; Axes is being replaced".format(key))
141:             # I don't think the above should ever happen.
142: 
143:         if a in self:
144:             return None
145:         self._ind += 1
146:         return Stack.push(self, (key, (self._ind, a)))
147: 
148:     def current_key_axes(self):
149:         '''
150:         Return a tuple of ``(key, axes)`` for the active axes.
151: 
152:         If no axes exists on the stack, then returns ``(None, None)``.
153: 
154:         '''
155:         if not len(self._elements):
156:             return self._default, self._default
157:         else:
158:             key, (index, axes) = self._elements[self._pos]
159:             return key, axes
160: 
161:     def __call__(self):
162:         return self.current_key_axes()[1]
163: 
164:     def __contains__(self, a):
165:         return a in self.as_list()
166: 
167: 
168: class SubplotParams(object):
169:     '''
170:     A class to hold the parameters for a subplot
171:     '''
172:     def __init__(self, left=None, bottom=None, right=None, top=None,
173:                  wspace=None, hspace=None):
174:         '''
175:         All dimensions are fraction of the figure width or height.
176:         All values default to their rc params
177: 
178:         The following attributes are available
179: 
180:         left  : 0.125
181:             The left side of the subplots of the figure
182: 
183:         right : 0.9
184:             The right side of the subplots of the figure
185: 
186:         bottom : 0.1
187:             The bottom of the subplots of the figure
188: 
189:         top : 0.9
190:             The top of the subplots of the figure
191: 
192:         wspace : 0.2
193:             The amount of width reserved for blank space between subplots,
194:             expressed as a fraction of the average axis width
195: 
196:         hspace : 0.2
197:             The amount of height reserved for white space between subplots,
198:             expressed as a fraction of the average axis height
199:         '''
200: 
201:         self.validate = True
202:         self.update(left, bottom, right, top, wspace, hspace)
203: 
204:     def update(self, left=None, bottom=None, right=None, top=None,
205:                wspace=None, hspace=None):
206:         '''
207:         Update the current values.  If any kwarg is None, default to
208:         the current value, if set, otherwise to rc
209: 
210:         '''
211: 
212:         thisleft = getattr(self, 'left', None)
213:         thisright = getattr(self, 'right', None)
214:         thistop = getattr(self, 'top', None)
215:         thisbottom = getattr(self, 'bottom', None)
216:         thiswspace = getattr(self, 'wspace', None)
217:         thishspace = getattr(self, 'hspace', None)
218: 
219:         self._update_this('left', left)
220:         self._update_this('right', right)
221:         self._update_this('bottom', bottom)
222:         self._update_this('top', top)
223:         self._update_this('wspace', wspace)
224:         self._update_this('hspace', hspace)
225: 
226:         def reset():
227:             self.left = thisleft
228:             self.right = thisright
229:             self.top = thistop
230:             self.bottom = thisbottom
231:             self.wspace = thiswspace
232:             self.hspace = thishspace
233: 
234:         if self.validate:
235:             if self.left >= self.right:
236:                 reset()
237:                 raise ValueError('left cannot be >= right')
238: 
239:             if self.bottom >= self.top:
240:                 reset()
241:                 raise ValueError('bottom cannot be >= top')
242: 
243:     def _update_this(self, s, val):
244:         if val is None:
245:             val = getattr(self, s, None)
246:             if val is None:
247:                 key = 'figure.subplot.' + s
248:                 val = rcParams[key]
249: 
250:         setattr(self, s, val)
251: 
252: 
253: class Figure(Artist):
254: 
255:     '''
256:     The Figure instance supports callbacks through a *callbacks*
257:     attribute which is a :class:`matplotlib.cbook.CallbackRegistry`
258:     instance.  The events you can connect to are 'dpi_changed', and
259:     the callback will be called with ``func(fig)`` where fig is the
260:     :class:`Figure` instance.
261: 
262:     *patch*
263:        The figure patch is drawn by a
264:        :class:`matplotlib.patches.Rectangle` instance
265: 
266:     *suppressComposite*
267:        For multiple figure images, the figure will make composite
268:        images depending on the renderer option_image_nocomposite
269:        function.  If suppressComposite is True|False, this will
270:        override the renderer.
271:     '''
272: 
273:     def __str__(self):
274:         return "Figure(%gx%g)" % tuple(self.bbox.size)
275: 
276:     def __init__(self,
277:                  figsize=None,  # defaults to rc figure.figsize
278:                  dpi=None,  # defaults to rc figure.dpi
279:                  facecolor=None,  # defaults to rc figure.facecolor
280:                  edgecolor=None,  # defaults to rc figure.edgecolor
281:                  linewidth=0.0,  # the default linewidth of the frame
282:                  frameon=None,  # whether or not to draw the figure frame
283:                  subplotpars=None,  # default to rc
284:                  tight_layout=None,  # default to rc figure.autolayout
285:                  ):
286:         '''
287:         *figsize*
288:             w,h tuple in inches
289: 
290:         *dpi*
291:             Dots per inch
292: 
293:         *facecolor*
294:             The figure patch facecolor; defaults to rc ``figure.facecolor``
295: 
296:         *edgecolor*
297:             The figure patch edge color; defaults to rc ``figure.edgecolor``
298: 
299:         *linewidth*
300:             The figure patch edge linewidth; the default linewidth of the frame
301: 
302:         *frameon*
303:             If *False*, suppress drawing the figure frame
304: 
305:         *subplotpars*
306:             A :class:`SubplotParams` instance, defaults to rc
307: 
308:         *tight_layout*
309:             If *False* use *subplotpars*; if *True* adjust subplot
310:             parameters using :meth:`tight_layout` with default padding.
311:             When providing a dict containing the keys `pad`, `w_pad`, `h_pad`
312:             and `rect`, the default :meth:`tight_layout` paddings will be
313:             overridden.
314:             Defaults to rc ``figure.autolayout``.
315:         '''
316:         Artist.__init__(self)
317:         # remove the non-figure artist _axes property
318:         # as it makes no sense for a figure to be _in_ an axes
319:         # this is used by the property methods in the artist base class
320:         # which are over-ridden in this class
321:         del self._axes
322:         self.callbacks = cbook.CallbackRegistry()
323: 
324:         if figsize is None:
325:             figsize = rcParams['figure.figsize']
326:         if dpi is None:
327:             dpi = rcParams['figure.dpi']
328:         if facecolor is None:
329:             facecolor = rcParams['figure.facecolor']
330:         if edgecolor is None:
331:             edgecolor = rcParams['figure.edgecolor']
332:         if frameon is None:
333:             frameon = rcParams['figure.frameon']
334: 
335:         if not np.isfinite(figsize).all():
336:             raise ValueError('figure size must be finite not '
337:                              '{}'.format(figsize))
338:         self.bbox_inches = Bbox.from_bounds(0, 0, *figsize)
339: 
340:         self.dpi_scale_trans = Affine2D().scale(dpi, dpi)
341:         # do not use property as it will trigger
342:         self._dpi = dpi
343:         self.bbox = TransformedBbox(self.bbox_inches, self.dpi_scale_trans)
344: 
345:         self.frameon = frameon
346: 
347:         self.transFigure = BboxTransformTo(self.bbox)
348: 
349:         self.patch = Rectangle(
350:             xy=(0, 0), width=1, height=1,
351:             facecolor=facecolor, edgecolor=edgecolor, linewidth=linewidth)
352:         self._set_artist_props(self.patch)
353:         self.patch.set_aa(False)
354: 
355:         self._hold = rcParams['axes.hold']
356:         if self._hold is None:
357:             self._hold = True
358: 
359:         self.canvas = None
360:         self._suptitle = None
361: 
362:         if subplotpars is None:
363:             subplotpars = SubplotParams()
364: 
365:         self.subplotpars = subplotpars
366:         self.set_tight_layout(tight_layout)
367: 
368:         self._axstack = AxesStack()  # track all figure axes and current axes
369:         self.clf()
370:         self._cachedRenderer = None
371: 
372:     @property
373:     @cbook.deprecated("2.1", alternative="Figure.patch")
374:     def figurePatch(self):
375:         return self.patch
376: 
377:     # TODO: I'd like to dynamically add the _repr_html_ method
378:     # to the figure in the right context, but then IPython doesn't
379:     # use it, for some reason.
380: 
381:     def _repr_html_(self):
382:         # We can't use "isinstance" here, because then we'd end up importing
383:         # webagg unconditiionally.
384:         if (self.canvas is not None and
385:             'WebAgg' in self.canvas.__class__.__name__):
386:             from matplotlib.backends import backend_webagg
387:             return backend_webagg.ipython_inline_display(self)
388: 
389:     def show(self, warn=True):
390:         '''
391:         If using a GUI backend with pyplot, display the figure window.
392: 
393:         If the figure was not created using
394:         :func:`~matplotlib.pyplot.figure`, it will lack a
395:         :class:`~matplotlib.backend_bases.FigureManagerBase`, and
396:         will raise an AttributeError.
397: 
398:         For non-GUI backends, this does nothing, in which case
399:         a warning will be issued if *warn* is True (default).
400:         '''
401:         try:
402:             manager = getattr(self.canvas, 'manager')
403:         except AttributeError as err:
404:             raise AttributeError("%s\n"
405:                                  "Figure.show works only "
406:                                  "for figures managed by pyplot, normally "
407:                                  "created by pyplot.figure()." % err)
408: 
409:         if manager is not None:
410:             try:
411:                 manager.show()
412:                 return
413:             except NonGuiException:
414:                 pass
415:         if warn:
416:             import warnings
417:             warnings.warn(
418:                 "matplotlib is currently using a non-GUI backend, "
419:                 "so cannot show the figure")
420: 
421:     def _get_axes(self):
422:         return self._axstack.as_list()
423: 
424:     axes = property(fget=_get_axes, doc="Read-only: list of axes in Figure")
425: 
426:     def _get_dpi(self):
427:         return self._dpi
428: 
429:     def _set_dpi(self, dpi, forward=True):
430:         '''
431:         The forward kwarg is passed on to set_size_inches
432:         '''
433:         self._dpi = dpi
434:         self.dpi_scale_trans.clear().scale(dpi, dpi)
435:         w, h = self.get_size_inches()
436:         self.set_size_inches(w, h, forward=forward)
437:         self.callbacks.process('dpi_changed', self)
438: 
439:     dpi = property(_get_dpi, _set_dpi)
440: 
441:     def get_tight_layout(self):
442:         '''
443:         Return the Boolean flag, True to use :meth:`tight_layout` when drawing.
444:         '''
445:         return self._tight
446: 
447:     def set_tight_layout(self, tight):
448:         '''
449:         Set whether :meth:`tight_layout` is used upon drawing.
450:         If None, the rcParams['figure.autolayout'] value will be set.
451: 
452:         When providing a dict containing the keys `pad`, `w_pad`, `h_pad`
453:         and `rect`, the default :meth:`tight_layout` paddings will be
454:         overridden.
455: 
456:         ACCEPTS: [True | False | dict | None ]
457:         '''
458:         if tight is None:
459:             tight = rcParams['figure.autolayout']
460:         self._tight = bool(tight)
461:         self._tight_parameters = tight if isinstance(tight, dict) else {}
462:         self.stale = True
463: 
464:     def autofmt_xdate(self, bottom=0.2, rotation=30, ha='right', which=None):
465:         '''
466:         Date ticklabels often overlap, so it is useful to rotate them
467:         and right align them.  Also, a common use case is a number of
468:         subplots with shared xaxes where the x-axis is date data.  The
469:         ticklabels are often long, and it helps to rotate them on the
470:         bottom subplot and turn them off on other subplots, as well as
471:         turn off xlabels.
472: 
473:         Parameters
474:         ----------
475: 
476:         bottom : scalar
477:             The bottom of the subplots for :meth:`subplots_adjust`
478: 
479:         rotation : angle in degrees
480:             The rotation of the xtick labels
481: 
482:         ha : string
483:             The horizontal alignment of the xticklabels
484: 
485:         which : {None, 'major', 'minor', 'both'}
486:             Selects which ticklabels to rotate (default is None which works
487:             same as major)
488:         '''
489:         allsubplots = all(hasattr(ax, 'is_last_row') for ax in self.axes)
490:         if len(self.axes) == 1:
491:             for label in self.axes[0].get_xticklabels(which=which):
492:                 label.set_ha(ha)
493:                 label.set_rotation(rotation)
494:         else:
495:             if allsubplots:
496:                 for ax in self.get_axes():
497:                     if ax.is_last_row():
498:                         for label in ax.get_xticklabels(which=which):
499:                             label.set_ha(ha)
500:                             label.set_rotation(rotation)
501:                     else:
502:                         for label in ax.get_xticklabels(which=which):
503:                             label.set_visible(False)
504:                         ax.set_xlabel('')
505: 
506:         if allsubplots:
507:             self.subplots_adjust(bottom=bottom)
508:         self.stale = True
509: 
510:     def get_children(self):
511:         'get a list of artists contained in the figure'
512:         children = [self.patch]
513:         children.extend(self.artists)
514:         children.extend(self.axes)
515:         children.extend(self.lines)
516:         children.extend(self.patches)
517:         children.extend(self.texts)
518:         children.extend(self.images)
519:         children.extend(self.legends)
520:         return children
521: 
522:     def contains(self, mouseevent):
523:         '''
524:         Test whether the mouse event occurred on the figure.
525: 
526:         Returns True, {}.
527:         '''
528:         if callable(self._contains):
529:             return self._contains(self, mouseevent)
530:         inside = self.bbox.contains(mouseevent.x, mouseevent.y)
531:         return inside, {}
532: 
533:     def get_window_extent(self, *args, **kwargs):
534:         'get the figure bounding box in display space; kwargs are void'
535:         return self.bbox
536: 
537:     def suptitle(self, t, **kwargs):
538:         '''
539:         Add a centered title to the figure.
540: 
541:         kwargs are :class:`matplotlib.text.Text` properties.  Using figure
542:         coordinates, the defaults are:
543: 
544:           x : 0.5
545:             The x location of the text in figure coords
546: 
547:           y : 0.98
548:             The y location of the text in figure coords
549: 
550:           horizontalalignment : 'center'
551:             The horizontal alignment of the text
552: 
553:           verticalalignment : 'top'
554:             The vertical alignment of the text
555: 
556:         If the `fontproperties` keyword argument is given then the
557:         rcParams defaults for `fontsize` (`figure.titlesize`) and
558:         `fontweight` (`figure.titleweight`) will be ignored in favour
559:         of the `FontProperties` defaults.
560: 
561:         A :class:`matplotlib.text.Text` instance is returned.
562: 
563:         Example::
564: 
565:           fig.suptitle('this is the figure title', fontsize=12)
566:         '''
567:         x = kwargs.pop('x', 0.5)
568:         y = kwargs.pop('y', 0.98)
569: 
570:         if ('horizontalalignment' not in kwargs) and ('ha' not in kwargs):
571:             kwargs['horizontalalignment'] = 'center'
572:         if ('verticalalignment' not in kwargs) and ('va' not in kwargs):
573:             kwargs['verticalalignment'] = 'top'
574: 
575:         if 'fontproperties' not in kwargs:
576:             if 'fontsize' not in kwargs and 'size' not in kwargs:
577:                 kwargs['size'] = rcParams['figure.titlesize']
578:             if 'fontweight' not in kwargs and 'weight' not in kwargs:
579:                 kwargs['weight'] = rcParams['figure.titleweight']
580: 
581:         sup = self.text(x, y, t, **kwargs)
582:         if self._suptitle is not None:
583:             self._suptitle.set_text(t)
584:             self._suptitle.set_position((x, y))
585:             self._suptitle.update_from(sup)
586:             sup.remove()
587:         else:
588:             self._suptitle = sup
589: 
590:         self.stale = True
591:         return self._suptitle
592: 
593:     def set_canvas(self, canvas):
594:         '''
595:         Set the canvas that contains the figure
596: 
597:         ACCEPTS: a FigureCanvas instance
598:         '''
599:         self.canvas = canvas
600: 
601:     @cbook.deprecated("2.0")
602:     def hold(self, b=None):
603:         '''
604:         Set the hold state.  If hold is None (default), toggle the
605:         hold state.  Else set the hold state to boolean value b.
606: 
607:         e.g.::
608: 
609:             hold()      # toggle hold
610:             hold(True)  # hold is on
611:             hold(False) # hold is off
612: 
613:         All "hold" machinery is deprecated.
614:         '''
615:         if b is None:
616:             self._hold = not self._hold
617:         else:
618:             self._hold = b
619: 
620:     def figimage(self, X,
621:                  xo=0,
622:                  yo=0,
623:                  alpha=None,
624:                  norm=None,
625:                  cmap=None,
626:                  vmin=None,
627:                  vmax=None,
628:                  origin=None,
629:                  resize=False,
630:                  **kwargs):
631:         '''
632:         Adds a non-resampled image to the figure.
633: 
634:         call signatures::
635: 
636:           figimage(X, **kwargs)
637: 
638:         adds a non-resampled array *X* to the figure.
639: 
640:         ::
641: 
642:           figimage(X, xo, yo)
643: 
644:         with pixel offsets *xo*, *yo*,
645: 
646:         *X* must be a float array:
647: 
648:         * If *X* is MxN, assume luminance (grayscale)
649:         * If *X* is MxNx3, assume RGB
650:         * If *X* is MxNx4, assume RGBA
651: 
652:         Optional keyword arguments:
653: 
654:           =========   =========================================================
655:           Keyword     Description
656:           =========   =========================================================
657:           resize      a boolean, True or False. If "True", then re-size the
658:                       Figure to match the given image size.
659:           xo or yo    An integer, the *x* and *y* image offset in pixels
660:           cmap        a :class:`matplotlib.colors.Colormap` instance, e.g.,
661:                       cm.jet. If *None*, default to the rc ``image.cmap``
662:                       value
663:           norm        a :class:`matplotlib.colors.Normalize` instance. The
664:                       default is normalization().  This scales luminance -> 0-1
665:           vmin|vmax   are used to scale a luminance image to 0-1.  If either
666:                       is *None*, the min and max of the luminance values will
667:                       be used.  Note if you pass a norm instance, the settings
668:                       for *vmin* and *vmax* will be ignored.
669:           alpha       the alpha blending value, default is *None*
670:           origin      [ 'upper' | 'lower' ] Indicates where the [0,0] index of
671:                       the array is in the upper left or lower left corner of
672:                       the axes. Defaults to the rc image.origin value
673:           =========   =========================================================
674: 
675:         figimage complements the axes image
676:         (:meth:`~matplotlib.axes.Axes.imshow`) which will be resampled
677:         to fit the current axes.  If you want a resampled image to
678:         fill the entire figure, you can define an
679:         :class:`~matplotlib.axes.Axes` with extent [0,0,1,1].
680: 
681:         An :class:`matplotlib.image.FigureImage` instance is returned.
682: 
683:         Additional kwargs are Artist kwargs passed on to
684:         :class:`~matplotlib.image.FigureImage`
685:         '''
686: 
687:         if not self._hold:
688:             self.clf()
689: 
690:         if resize:
691:             dpi = self.get_dpi()
692:             figsize = [x / float(dpi) for x in (X.shape[1], X.shape[0])]
693:             self.set_size_inches(figsize, forward=True)
694: 
695:         im = FigureImage(self, cmap, norm, xo, yo, origin, **kwargs)
696:         im.stale_callback = _stale_figure_callback
697: 
698:         im.set_array(X)
699:         im.set_alpha(alpha)
700:         if norm is None:
701:             im.set_clim(vmin, vmax)
702:         self.images.append(im)
703:         im._remove_method = lambda h: self.images.remove(h)
704:         self.stale = True
705:         return im
706: 
707:     def set_size_inches(self, w, h=None, forward=True):
708:         '''Set the figure size in inches (1in == 2.54cm)
709: 
710:         Usage ::
711: 
712:              fig.set_size_inches(w, h)  # OR
713:              fig.set_size_inches((w, h))
714: 
715:         optional kwarg *forward=True* will cause the canvas size to be
716:         automatically updated; e.g., you can resize the figure window
717:         from the shell
718: 
719:         ACCEPTS: a w, h tuple with w, h in inches
720: 
721:         See Also
722:         --------
723: 
724:         matplotlib.Figure.get_size_inches
725:         '''
726: 
727:         # the width and height have been passed in as a tuple to the first
728:         # argument, so unpack them
729:         if h is None:
730:             w, h = w
731:         if not all(np.isfinite(_) for _ in (w, h)):
732:             raise ValueError('figure size must be finite not '
733:                              '({}, {})'.format(w, h))
734:         self.bbox_inches.p1 = w, h
735: 
736:         if forward:
737:             canvas = getattr(self, 'canvas')
738:             if canvas is not None:
739:                 ratio = getattr(self.canvas, '_dpi_ratio', 1)
740:                 dpival = self.dpi / ratio
741:                 canvasw = w * dpival
742:                 canvash = h * dpival
743:                 manager = getattr(self.canvas, 'manager', None)
744:                 if manager is not None:
745:                     manager.resize(int(canvasw), int(canvash))
746:         self.stale = True
747: 
748:     def get_size_inches(self):
749:         '''
750:         Returns the current size of the figure in inches (1in == 2.54cm)
751:         as an numpy array.
752: 
753:         Returns
754:         -------
755:         size : ndarray
756:            The size of the figure in inches
757: 
758:         See Also
759:         --------
760: 
761:         matplotlib.Figure.set_size_inches
762:         '''
763:         return np.array(self.bbox_inches.p1)
764: 
765:     def get_edgecolor(self):
766:         'Get the edge color of the Figure rectangle'
767:         return self.patch.get_edgecolor()
768: 
769:     def get_facecolor(self):
770:         'Get the face color of the Figure rectangle'
771:         return self.patch.get_facecolor()
772: 
773:     def get_figwidth(self):
774:         'Return the figwidth as a float'
775:         return self.bbox_inches.width
776: 
777:     def get_figheight(self):
778:         'Return the figheight as a float'
779:         return self.bbox_inches.height
780: 
781:     def get_dpi(self):
782:         'Return the dpi as a float'
783:         return self.dpi
784: 
785:     def get_frameon(self):
786:         'get the boolean indicating frameon'
787:         return self.frameon
788: 
789:     def set_edgecolor(self, color):
790:         '''
791:         Set the edge color of the Figure rectangle
792: 
793:         ACCEPTS: any matplotlib color - see help(colors)
794:         '''
795:         self.patch.set_edgecolor(color)
796: 
797:     def set_facecolor(self, color):
798:         '''
799:         Set the face color of the Figure rectangle
800: 
801:         ACCEPTS: any matplotlib color - see help(colors)
802:         '''
803:         self.patch.set_facecolor(color)
804: 
805:     def set_dpi(self, val):
806:         '''
807:         Set the dots-per-inch of the figure
808: 
809:         ACCEPTS: float
810:         '''
811:         self.dpi = val
812:         self.stale = True
813: 
814:     def set_figwidth(self, val, forward=False):
815:         '''
816:         Set the width of the figure in inches
817: 
818:         ACCEPTS: float
819:         '''
820:         self.set_size_inches(val, self.get_figheight(), forward=forward)
821: 
822:     def set_figheight(self, val, forward=False):
823:         '''
824:         Set the height of the figure in inches
825: 
826:         ACCEPTS: float
827:         '''
828:         self.set_size_inches(self.get_figwidth(), val, forward=forward)
829: 
830:     def set_frameon(self, b):
831:         '''
832:         Set whether the figure frame (background) is displayed or invisible
833: 
834:         ACCEPTS: boolean
835:         '''
836:         self.frameon = b
837:         self.stale = True
838: 
839:     def delaxes(self, a):
840:         'remove a from the figure and update the current axes'
841:         self._axstack.remove(a)
842:         for func in self._axobservers:
843:             func(self)
844:         self.stale = True
845: 
846:     def _make_key(self, *args, **kwargs):
847:         'make a hashable key out of args and kwargs'
848: 
849:         def fixitems(items):
850:             #items may have arrays and lists in them, so convert them
851:             # to tuples for the key
852:             ret = []
853:             for k, v in items:
854:                 # some objects can define __getitem__ without being
855:                 # iterable and in those cases the conversion to tuples
856:                 # will fail. So instead of using the iterable(v) function
857:                 # we simply try and convert to a tuple, and proceed if not.
858:                 try:
859:                     v = tuple(v)
860:                 except Exception:
861:                     pass
862:                 ret.append((k, v))
863:             return tuple(ret)
864: 
865:         def fixlist(args):
866:             ret = []
867:             for a in args:
868:                 if iterable(a):
869:                     a = tuple(a)
870:                 ret.append(a)
871:             return tuple(ret)
872: 
873:         key = fixlist(args), fixitems(six.iteritems(kwargs))
874:         return key
875: 
876:     def add_axes(self, *args, **kwargs):
877:         '''
878:         Add an axes at position *rect* [*left*, *bottom*, *width*,
879:         *height*] where all quantities are in fractions of figure
880:         width and height.
881: 
882:         Parameters
883:         ----------
884:         rect : sequence of float
885:             A 4-length sequence of [left, bottom, width, height] quantities.
886: 
887:         projection :
888:             ['aitoff' | 'hammer' | 'lambert' | 'mollweide' | \
889: 'polar' | 'rectilinear'], optional
890:             The projection type of the axes.
891: 
892:         polar : boolean, optional
893:             If True, equivalent to projection='polar'.
894: 
895:         This method also takes the keyword arguments for
896:         :class:`~matplotlib.axes.Axes`.
897: 
898:         Returns
899:         ------
900:         axes : Axes
901:             The added axes.
902: 
903:         Examples
904:         --------
905:         A simple example::
906: 
907:             rect = l,b,w,h
908:             fig.add_axes(rect)
909:             fig.add_axes(rect, frameon=False, facecolor='g')
910:             fig.add_axes(rect, polar=True)
911:             fig.add_axes(rect, projection='polar')
912:             fig.add_axes(ax)
913: 
914:         If the figure already has an axes with the same parameters, then it
915:         will simply make that axes current and return it.  This behavior
916:         has been deprecated as of Matplotlib 2.1.  Meanwhile, if you do
917:         not want this behavior (i.e., you want to force the creation of a
918:         new Axes), you must use a unique set of args and kwargs.  The axes
919:         :attr:`~matplotlib.axes.Axes.label` attribute has been exposed for this
920:         purpose: if you want two axes that are otherwise identical to be added
921:         to the figure, make sure you give them unique labels::
922: 
923:             fig.add_axes(rect, label='axes1')
924:             fig.add_axes(rect, label='axes2')
925: 
926:         In rare circumstances, add_axes may be called with a single
927:         argument, an Axes instance already created in the present
928:         figure but not in the figure's list of axes.  For example,
929:         if an axes has been removed with :meth:`delaxes`, it can
930:         be restored with::
931: 
932:             fig.add_axes(ax)
933: 
934:         In all cases, the :class:`~matplotlib.axes.Axes` instance
935:         will be returned.
936:         '''
937:         if not len(args):
938:             return
939: 
940:         # shortcut the projection "key" modifications later on, if an axes
941:         # with the exact args/kwargs exists, return it immediately.
942:         key = self._make_key(*args, **kwargs)
943:         ax = self._axstack.get(key)
944:         if ax is not None:
945:             self.sca(ax)
946:             return ax
947: 
948:         if isinstance(args[0], Axes):
949:             a = args[0]
950:             if a.get_figure() is not self:
951:                 msg = "The Axes must have been created in the present figure"
952:                 raise ValueError(msg)
953:         else:
954:             rect = args[0]
955:             if not np.isfinite(rect).all():
956:                 raise ValueError('all entries in rect must be finite '
957:                                  'not {}'.format(rect))
958:             projection_class, kwargs, key = process_projection_requirements(
959:                 self, *args, **kwargs)
960: 
961:             # check that an axes of this type doesn't already exist, if it
962:             # does, set it as active and return it
963:             ax = self._axstack.get(key)
964:             if isinstance(ax, projection_class):
965:                 self.sca(ax)
966:                 return ax
967: 
968:             # create the new axes using the axes class given
969:             a = projection_class(self, rect, **kwargs)
970: 
971:         self._axstack.add(key, a)
972:         self.sca(a)
973:         a._remove_method = self.__remove_ax
974:         self.stale = True
975:         a.stale_callback = _stale_figure_callback
976:         return a
977: 
978:     def add_subplot(self, *args, **kwargs):
979:         '''
980:         Add a subplot.
981: 
982:         Parameters
983:         ----------
984:         *args
985:             Either a 3-digit integer or three separate integers
986:             describing the position of the subplot. If the three
987:             integers are I, J, and K, the subplot is the Ith plot on a
988:             grid with J rows and K columns.
989: 
990:         projection : ['aitoff' | 'hammer' | 'lambert' | \
991: 'mollweide', 'polar' | 'rectilinear'], optional
992:             The projection type of the axes.
993: 
994:         polar : boolean, optional
995:             If True, equivalent to projection='polar'.
996: 
997:         This method also takes the keyword arguments for
998:         :class:`~matplotlib.axes.Axes`.
999: 
1000:         Returns
1001:         -------
1002:         axes : Axes
1003:             The axes of the subplot.
1004: 
1005:         Notes
1006:         -----
1007:         If the figure already has a subplot with key (*args*,
1008:         *kwargs*) then it will simply make that subplot current and
1009:         return it.  This behavior is deprecated.
1010: 
1011:         Examples
1012:         --------
1013:             fig.add_subplot(111)
1014: 
1015:             # equivalent but more general
1016:             fig.add_subplot(1, 1, 1)
1017: 
1018:             # add subplot with red background
1019:             fig.add_subplot(212, facecolor='r')
1020: 
1021:             # add a polar subplot
1022:             fig.add_subplot(111, projection='polar')
1023: 
1024:             # add Subplot instance sub
1025:             fig.add_subplot(sub)
1026: 
1027:         See Also
1028:         --------
1029:         matplotlib.pyplot.subplot : for an explanation of the args.
1030:         '''
1031:         if not len(args):
1032:             return
1033: 
1034:         if len(args) == 1 and isinstance(args[0], int):
1035:             if not 100 <= args[0] <= 999:
1036:                 raise ValueError("Integer subplot specification must be a "
1037:                                  "three-digit number, not {}".format(args[0]))
1038:             args = tuple(map(int, str(args[0])))
1039: 
1040:         if isinstance(args[0], SubplotBase):
1041: 
1042:             a = args[0]
1043:             if a.get_figure() is not self:
1044:                 msg = ("The Subplot must have been created in the present "
1045:                        "figure")
1046:                 raise ValueError(msg)
1047:             # make a key for the subplot (which includes the axes object id
1048:             # in the hash)
1049:             key = self._make_key(*args, **kwargs)
1050:         else:
1051:             projection_class, kwargs, key = process_projection_requirements(
1052:                 self, *args, **kwargs)
1053: 
1054:             # try to find the axes with this key in the stack
1055:             ax = self._axstack.get(key)
1056: 
1057:             if ax is not None:
1058:                 if isinstance(ax, projection_class):
1059:                     # the axes already existed, so set it as active & return
1060:                     self.sca(ax)
1061:                     return ax
1062:                 else:
1063:                     # Undocumented convenience behavior:
1064:                     # subplot(111); subplot(111, projection='polar')
1065:                     # will replace the first with the second.
1066:                     # Without this, add_subplot would be simpler and
1067:                     # more similar to add_axes.
1068:                     self._axstack.remove(ax)
1069: 
1070:             a = subplot_class_factory(projection_class)(self, *args, **kwargs)
1071: 
1072:         self._axstack.add(key, a)
1073:         self.sca(a)
1074:         a._remove_method = self.__remove_ax
1075:         self.stale = True
1076:         a.stale_callback = _stale_figure_callback
1077:         return a
1078: 
1079:     def subplots(self, nrows=1, ncols=1, sharex=False, sharey=False,
1080:                  squeeze=True, subplot_kw=None, gridspec_kw=None):
1081:         '''
1082:         Add a set of subplots to this figure.
1083: 
1084:         Parameters
1085:         ----------
1086:         nrows, ncols : int, default: 1
1087:             Number of rows/cols of the subplot grid.
1088: 
1089:         sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False
1090:             Controls sharing of properties among x (`sharex`) or y (`sharey`)
1091:             axes:
1092: 
1093:                 - True or 'all': x- or y-axis will be shared among all
1094:                   subplots.
1095:                 - False or 'none': each subplot x- or y-axis will be
1096:                   independent.
1097:                 - 'row': each subplot row will share an x- or y-axis.
1098:                 - 'col': each subplot column will share an x- or y-axis.
1099: 
1100:             When subplots have a shared x-axis along a column, only the x tick
1101:             labels of the bottom subplot are visible.  Similarly, when
1102:             subplots have a shared y-axis along a row, only the y tick labels
1103:             of the first column subplot are visible.
1104: 
1105:         squeeze : bool, default: True
1106:             - If True, extra dimensions are squeezed out from the returned
1107:               axis object:
1108: 
1109:                 - if only one subplot is constructed (nrows=ncols=1), the
1110:                   resulting single Axes object is returned as a scalar.
1111:                 - for Nx1 or 1xN subplots, the returned object is a 1D numpy
1112:                   object array of Axes objects are returned as numpy 1D
1113:                   arrays.
1114:                 - for NxM, subplots with N>1 and M>1 are returned as a 2D
1115:                   arrays.
1116: 
1117:             - If False, no squeezing at all is done: the returned Axes object
1118:               is always a 2D array containing Axes instances, even if it ends
1119:               up being 1x1.
1120: 
1121:         subplot_kw : dict, default: {}
1122:             Dict with keywords passed to the
1123:             :meth:`~matplotlib.figure.Figure.add_subplot` call used to create
1124:             each subplots.
1125: 
1126:         gridspec_kw : dict, default: {}
1127:             Dict with keywords passed to the
1128:             :class:`~matplotlib.gridspec.GridSpec` constructor used to create
1129:             the grid the subplots are placed on.
1130: 
1131:         Returns
1132:         -------
1133:         ax : single Axes object or array of Axes objects
1134:             The added axes.  The dimensions of the resulting array can be
1135:             controlled with the squeeze keyword, see above.
1136: 
1137:         See Also
1138:         --------
1139:         pyplot.subplots : pyplot API; docstring includes examples.
1140:         '''
1141: 
1142:         # for backwards compatibility
1143:         if isinstance(sharex, bool):
1144:             sharex = "all" if sharex else "none"
1145:         if isinstance(sharey, bool):
1146:             sharey = "all" if sharey else "none"
1147:         share_values = ["all", "row", "col", "none"]
1148:         if sharex not in share_values:
1149:             # This check was added because it is very easy to type
1150:             # `subplots(1, 2, 1)` when `subplot(1, 2, 1)` was intended.
1151:             # In most cases, no error will ever occur, but mysterious behavior
1152:             # will result because what was intended to be the subplot index is
1153:             # instead treated as a bool for sharex.
1154:             if isinstance(sharex, int):
1155:                 warnings.warn(
1156:                     "sharex argument to subplots() was an integer. "
1157:                     "Did you intend to use subplot() (without 's')?")
1158: 
1159:             raise ValueError("sharex [%s] must be one of %s" %
1160:                              (sharex, share_values))
1161:         if sharey not in share_values:
1162:             raise ValueError("sharey [%s] must be one of %s" %
1163:                              (sharey, share_values))
1164:         if subplot_kw is None:
1165:             subplot_kw = {}
1166:         if gridspec_kw is None:
1167:             gridspec_kw = {}
1168: 
1169:         gs = GridSpec(nrows, ncols, **gridspec_kw)
1170: 
1171:         # Create array to hold all axes.
1172:         axarr = np.empty((nrows, ncols), dtype=object)
1173:         for row in range(nrows):
1174:             for col in range(ncols):
1175:                 shared_with = {"none": None, "all": axarr[0, 0],
1176:                                "row": axarr[row, 0], "col": axarr[0, col]}
1177:                 subplot_kw["sharex"] = shared_with[sharex]
1178:                 subplot_kw["sharey"] = shared_with[sharey]
1179:                 axarr[row, col] = self.add_subplot(gs[row, col], **subplot_kw)
1180: 
1181:         # turn off redundant tick labeling
1182:         if sharex in ["col", "all"]:
1183:             # turn off all but the bottom row
1184:             for ax in axarr[:-1, :].flat:
1185:                 ax.xaxis.set_tick_params(which='both',
1186:                                          labelbottom=False, labeltop=False)
1187:                 ax.xaxis.offsetText.set_visible(False)
1188:         if sharey in ["row", "all"]:
1189:             # turn off all but the first column
1190:             for ax in axarr[:, 1:].flat:
1191:                 ax.yaxis.set_tick_params(which='both',
1192:                                          labelleft=False, labelright=False)
1193:                 ax.yaxis.offsetText.set_visible(False)
1194: 
1195:         if squeeze:
1196:             # Discarding unneeded dimensions that equal 1.  If we only have one
1197:             # subplot, just return it instead of a 1-element array.
1198:             return axarr.item() if axarr.size == 1 else axarr.squeeze()
1199:         else:
1200:             # Returned axis array will be always 2-d, even if nrows=ncols=1.
1201:             return axarr
1202: 
1203:     def __remove_ax(self, ax):
1204:         def _reset_loc_form(axis):
1205:             axis.set_major_formatter(axis.get_major_formatter())
1206:             axis.set_major_locator(axis.get_major_locator())
1207:             axis.set_minor_formatter(axis.get_minor_formatter())
1208:             axis.set_minor_locator(axis.get_minor_locator())
1209: 
1210:         def _break_share_link(ax, grouper):
1211:             siblings = grouper.get_siblings(ax)
1212:             if len(siblings) > 1:
1213:                 grouper.remove(ax)
1214:                 for last_ax in siblings:
1215:                     if ax is last_ax:
1216:                         continue
1217:                     return last_ax
1218:             return None
1219: 
1220:         self.delaxes(ax)
1221:         last_ax = _break_share_link(ax, ax._shared_y_axes)
1222:         if last_ax is not None:
1223:             _reset_loc_form(last_ax.yaxis)
1224: 
1225:         last_ax = _break_share_link(ax, ax._shared_x_axes)
1226:         if last_ax is not None:
1227:             _reset_loc_form(last_ax.xaxis)
1228: 
1229:     def clf(self, keep_observers=False):
1230:         '''
1231:         Clear the figure.
1232: 
1233:         Set *keep_observers* to True if, for example,
1234:         a gui widget is tracking the axes in the figure.
1235:         '''
1236:         self.suppressComposite = None
1237:         self.callbacks = cbook.CallbackRegistry()
1238: 
1239:         for ax in tuple(self.axes):  # Iterate over the copy.
1240:             ax.cla()
1241:             self.delaxes(ax)         # removes ax from self._axstack
1242: 
1243:         toolbar = getattr(self.canvas, 'toolbar', None)
1244:         if toolbar is not None:
1245:             toolbar.update()
1246:         self._axstack.clear()
1247:         self.artists = []
1248:         self.lines = []
1249:         self.patches = []
1250:         self.texts = []
1251:         self.images = []
1252:         self.legends = []
1253:         if not keep_observers:
1254:             self._axobservers = []
1255:         self._suptitle = None
1256:         self.stale = True
1257: 
1258:     def clear(self, keep_observers=False):
1259:         '''
1260:         Clear the figure -- synonym for :meth:`clf`.
1261:         '''
1262:         self.clf(keep_observers=keep_observers)
1263: 
1264:     @allow_rasterization
1265:     def draw(self, renderer):
1266:         '''
1267:         Render the figure using :class:`matplotlib.backend_bases.RendererBase`
1268:         instance *renderer*.
1269:         '''
1270: 
1271:         # draw the figure bounding box, perhaps none for white figure
1272:         if not self.get_visible():
1273:             return
1274: 
1275:         artists = sorted(
1276:             (artist for artist in (self.patches + self.lines + self.artists
1277:                                    + self.images + self.axes + self.texts
1278:                                    + self.legends)
1279:              if not artist.get_animated()),
1280:             key=lambda artist: artist.get_zorder())
1281: 
1282:         try:
1283:             renderer.open_group('figure')
1284:             if self.get_tight_layout() and self.axes:
1285:                 try:
1286:                     self.tight_layout(renderer, **self._tight_parameters)
1287:                 except ValueError:
1288:                     pass
1289:                     # ValueError can occur when resizing a window.
1290: 
1291:             if self.frameon:
1292:                 self.patch.draw(renderer)
1293: 
1294:             mimage._draw_list_compositing_images(
1295:                 renderer, self, artists, self.suppressComposite)
1296: 
1297:             renderer.close_group('figure')
1298:         finally:
1299:             self.stale = False
1300: 
1301:         self._cachedRenderer = renderer
1302:         self.canvas.draw_event(renderer)
1303: 
1304:     def draw_artist(self, a):
1305:         '''
1306:         draw :class:`matplotlib.artist.Artist` instance *a* only --
1307:         this is available only after the figure is drawn
1308:         '''
1309:         if self._cachedRenderer is None:
1310:             msg = ('draw_artist can only be used after an initial draw which'
1311:                    ' caches the render')
1312:             raise AttributeError(msg)
1313:         a.draw(self._cachedRenderer)
1314: 
1315:     def get_axes(self):
1316:         return self.axes
1317: 
1318:     def legend(self, *args, **kwargs):
1319:         '''
1320:         Place a legend on the figure.
1321: 
1322:         To make a legend from existing artists on every axes::
1323: 
1324:           legend()
1325: 
1326:         To make a legend for a list of lines and labels::
1327: 
1328:           legend( (line1, line2, line3),
1329:                   ('label1', 'label2', 'label3'),
1330:                   'upper right')
1331: 
1332:         Parameters
1333:         ----------
1334:         loc : string or integer
1335:             The location of the legend. Possible codes are:
1336: 
1337:                 ===============   =============
1338:                 Location String   Location Code
1339:                 ===============   =============
1340:                 'upper right'     1
1341:                 'upper left'      2
1342:                 'lower left'      3
1343:                 'lower right'     4
1344:                 'right'           5
1345:                 'center left'     6
1346:                 'center right'    7
1347:                 'lower center'    8
1348:                 'upper center'    9
1349:                 'center'          10
1350:                 ===============   =============
1351: 
1352:             *loc* can also be an (x,y) tuple in figure coords, which specifies
1353:             the lower left of the legend box. In figure coords (0,0) is the
1354:             bottom left of the figure, and (1,1) is the top right.
1355: 
1356:         prop : None or FontProperties or dict
1357:             A :class:`matplotlib.font_manager.FontProperties` instance. If
1358:             *prop* is a dictionary, a new instance will be created with *prop*.
1359:             If *None*, use rc settings.
1360: 
1361:         numpoints : integer
1362:             The number of points in the legend line, default is 4
1363: 
1364:         scatterpoints : integer
1365:             The number of points in the legend line, default is 4
1366: 
1367:         scatteryoffsets : list of floats
1368:             A list of yoffsets for scatter symbols in legend
1369: 
1370:         markerscale : None or scalar
1371:             The relative size of legend markers vs. original. If *None*, use rc
1372:             settings.
1373: 
1374:         markerfirst : bool
1375:             If *True*, legend marker is placed to the left of the legend label.
1376:             If *False*, legend marker is placed to the right of the legend
1377:             label.
1378:             Default is *True*.
1379: 
1380:         frameon : None or bool
1381:             Control whether the legend should be drawn on a patch (frame).
1382:             Default is *None* which will take the value from the
1383:             ``legend.frameon`` :data:`rcParam<matplotlib.rcParams>`.
1384: 
1385:         fancybox : None or bool
1386:             If *True*, draw a frame with a round fancybox. If *None*, use rc
1387:             settings.
1388: 
1389:         shadow : None or bool
1390:             If *True*, draw a shadow behind legend. If *None*, use rc settings.
1391: 
1392:         framealpha : None or float
1393:             Control the alpha transparency of the legend's background.
1394:             Default is *None* which will take the value from the
1395:             ``legend.framealpha`` :data:`rcParam<matplotlib.rcParams>`.
1396: 
1397:         facecolor : None or "inherit" or a color spec
1398:             Control the legend's background color.
1399:             Default is *None* which will take the value from the
1400:             ``legend.facecolor`` :data:`rcParam<matplotlib.rcParams>`.
1401:             If ``"inherit"``, it will take the ``axes.facecolor``
1402:             :data:`rcParam<matplotlib.rcParams>`.
1403: 
1404:         edgecolor : None or "inherit" or a color spec
1405:             Control the legend's background patch edge color.
1406:             Default is *None* which will take the value from the
1407:             ``legend.edgecolor`` :data:`rcParam<matplotlib.rcParams>`.
1408:             If ``"inherit"``, it will take the ``axes.edgecolor``
1409:             :data:`rcParam<matplotlib.rcParams>`.
1410: 
1411:         ncol : integer
1412:             Number of columns. Default is 1.
1413: 
1414:         mode : "expand" or None
1415:             If mode is "expand", the legend will be horizontally expanded
1416:             to fill the axes area (or *bbox_to_anchor*)
1417: 
1418:         title : string
1419:             The legend title
1420: 
1421:         borderpad : float or None
1422:             The fractional whitespace inside the legend border, measured in
1423:             font-size units.
1424:             Default is *None* which will take the value from the
1425:             ``legend.borderpad`` :data:`rcParam<matplotlib.rcParams>`.
1426: 
1427:         labelspacing : float or None
1428:             The vertical space between the legend entries, measured in
1429:             font-size units.
1430:             Default is *None* which will take the value from the
1431:             ``legend.labelspacing`` :data:`rcParam<matplotlib.rcParams>`.
1432: 
1433:         handlelength : float or None
1434:             The length of the legend handles, measured in font-size units.
1435:             Default is *None* which will take the value from the
1436:             ``legend.handlelength`` :data:`rcParam<matplotlib.rcParams>`.
1437: 
1438:         handletextpad : float or None
1439:             The padding between the legend handle and text, measured in
1440:             font-size units.
1441:             Default is *None* which will take the value from the
1442:             ``legend.handletextpad`` :data:`rcParam<matplotlib.rcParams>`.
1443: 
1444:         borderaxespad : float or None
1445:             The padding between the axes and legend border, measured in
1446:             font-size units.
1447:             Default is *None* which will take the value from the
1448:             ``legend.borderaxespad`` :data:`rcParam<matplotlib.rcParams>`.
1449: 
1450:         columnspacing : float or None
1451:             The spacing between columns, measured in font-size units.
1452:             Default is *None* which will take the value from the
1453:             ``legend.columnspacing`` :data:`rcParam<matplotlib.rcParams>`.
1454: 
1455:         Returns
1456:         -------
1457:         :class:`matplotlib.legend.Legend` instance
1458: 
1459:         Notes
1460:         -----
1461:         Not all kinds of artist are supported by the legend command. See
1462:         :ref:`sphx_glr_tutorials_intermediate_legend_guide.py` for details.
1463:         '''
1464: 
1465:         # If no arguments given, collect up all the artists on the figure
1466:         if len(args) == 0:
1467:             handles = []
1468:             labels = []
1469: 
1470:             def in_handles(h, l):
1471:                 # Method to check if we already have a given handle and label.
1472:                 # Consider two handles to be the same if they share a label,
1473:                 # color, facecolor, and edgecolor.
1474: 
1475:                 # Loop through each handle and label already collected
1476:                 for f_h, f_l in zip(handles, labels):
1477:                     if f_l != l:
1478:                         continue
1479:                     if type(f_h) != type(h):
1480:                         continue
1481:                     try:
1482:                         if f_h.get_color() != h.get_color():
1483:                             continue
1484:                     except AttributeError:
1485:                         pass
1486:                     try:
1487:                         if f_h.get_facecolor() != h.get_facecolor():
1488:                             continue
1489:                     except AttributeError:
1490:                         pass
1491:                     try:
1492:                         if f_h.get_edgecolor() != h.get_edgecolor():
1493:                             continue
1494:                     except AttributeError:
1495:                         pass
1496:                     return True
1497:                 return False
1498: 
1499:             for ax in self.axes:
1500:                 ax_handles, ax_labels = ax.get_legend_handles_labels()
1501:                 for h, l in zip(ax_handles, ax_labels):
1502:                     if not in_handles(h, l):
1503:                         handles.append(h)
1504:                         labels.append(l)
1505:             if len(handles) == 0:
1506:                 warnings.warn("No labeled objects found. "
1507:                               "Use label='...' kwarg on individual plots.")
1508:                 return None
1509: 
1510:         elif len(args) == 2:
1511:             # LINES, LABELS
1512:             handles, labels = args
1513: 
1514:         elif len(args) == 3:
1515:             # LINES, LABELS, LOC
1516:             handles, labels, loc = args
1517:             kwargs['loc'] = loc
1518: 
1519:         else:
1520:             raise TypeError('Invalid number of arguments passed to legend. '
1521:                             'Please specify either 0 args, 2 args '
1522:                             '(artist handles, figure labels) or 3 args '
1523:                             '(artist handles, figure labels, legend location)')
1524: 
1525:         l = Legend(self, handles, labels, **kwargs)
1526:         self.legends.append(l)
1527:         l._remove_method = lambda h: self.legends.remove(h)
1528:         self.stale = True
1529:         return l
1530: 
1531:     @docstring.dedent_interpd
1532:     def text(self, x, y, s, *args, **kwargs):
1533:         '''
1534:         Add text to figure.
1535: 
1536:         Call signature::
1537: 
1538:           text(x, y, s, fontdict=None, **kwargs)
1539: 
1540:         Add text to figure at location *x*, *y* (relative 0-1
1541:         coords). See :func:`~matplotlib.pyplot.text` for the meaning
1542:         of the other arguments.
1543: 
1544:         kwargs control the :class:`~matplotlib.text.Text` properties:
1545: 
1546:         %(Text)s
1547:         '''
1548: 
1549:         override = _process_text_args({}, *args, **kwargs)
1550:         t = Text(x=x, y=y, text=s)
1551: 
1552:         t.update(override)
1553:         self._set_artist_props(t)
1554:         self.texts.append(t)
1555:         t._remove_method = lambda h: self.texts.remove(h)
1556:         self.stale = True
1557:         return t
1558: 
1559:     def _set_artist_props(self, a):
1560:         if a != self:
1561:             a.set_figure(self)
1562:         a.stale_callback = _stale_figure_callback
1563:         a.set_transform(self.transFigure)
1564: 
1565:     @docstring.dedent_interpd
1566:     def gca(self, **kwargs):
1567:         '''
1568:         Get the current axes, creating one if necessary
1569: 
1570:         The following kwargs are supported for ensuring the returned axes
1571:         adheres to the given projection etc., and for axes creation if
1572:         the active axes does not exist:
1573: 
1574:         %(Axes)s
1575: 
1576:         '''
1577:         ckey, cax = self._axstack.current_key_axes()
1578:         # if there exists an axes on the stack see if it maches
1579:         # the desired axes configuration
1580:         if cax is not None:
1581: 
1582:             # if no kwargs are given just return the current axes
1583:             # this is a convenience for gca() on axes such as polar etc.
1584:             if not kwargs:
1585:                 return cax
1586: 
1587:             # if the user has specified particular projection detail
1588:             # then build up a key which can represent this
1589:             else:
1590:                 # we don't want to modify the original kwargs
1591:                 # so take a copy so that we can do what we like to it
1592:                 kwargs_copy = kwargs.copy()
1593:                 projection_class, _, key = process_projection_requirements(
1594:                     self, **kwargs_copy)
1595: 
1596:                 # let the returned axes have any gridspec by removing it from
1597:                 # the key
1598:                 ckey = ckey[1:]
1599:                 key = key[1:]
1600: 
1601:                 # if the cax matches this key then return the axes, otherwise
1602:                 # continue and a new axes will be created
1603:                 if key == ckey and isinstance(cax, projection_class):
1604:                     return cax
1605:                 else:
1606:                     warnings.warn('Requested projection is different from '
1607:                                   'current axis projection, creating new axis '
1608:                                   'with requested projection.', stacklevel=2)
1609: 
1610:         # no axes found, so create one which spans the figure
1611:         return self.add_subplot(1, 1, 1, **kwargs)
1612: 
1613:     def sca(self, a):
1614:         'Set the current axes to be a and return a'
1615:         self._axstack.bubble(a)
1616:         for func in self._axobservers:
1617:             func(self)
1618:         return a
1619: 
1620:     def _gci(self):
1621:         '''
1622:         helper for :func:`~matplotlib.pyplot.gci`;
1623:         do not use elsewhere.
1624:         '''
1625:         # Look first for an image in the current Axes:
1626:         cax = self._axstack.current_key_axes()[1]
1627:         if cax is None:
1628:             return None
1629:         im = cax._gci()
1630:         if im is not None:
1631:             return im
1632: 
1633:         # If there is no image in the current Axes, search for
1634:         # one in a previously created Axes.  Whether this makes
1635:         # sense is debatable, but it is the documented behavior.
1636:         for ax in reversed(self.axes):
1637:             im = ax._gci()
1638:             if im is not None:
1639:                 return im
1640:         return None
1641: 
1642:     def __getstate__(self):
1643:         state = super(Figure, self).__getstate__()
1644:         # the axobservers cannot currently be pickled.
1645:         # Additionally, the canvas cannot currently be pickled, but this has
1646:         # the benefit of meaning that a figure can be detached from one canvas,
1647:         # and re-attached to another.
1648:         for attr_to_pop in ('_axobservers', 'show',
1649:                             'canvas', '_cachedRenderer'):
1650:             state.pop(attr_to_pop, None)
1651: 
1652:         # add version information to the state
1653:         state['__mpl_version__'] = _mpl_version
1654: 
1655:         # check to see if the figure has a manager and whether it is registered
1656:         # with pyplot
1657:         if getattr(self.canvas, 'manager', None) is not None:
1658:             manager = self.canvas.manager
1659:             import matplotlib._pylab_helpers
1660:             if manager in list(six.itervalues(
1661:                     matplotlib._pylab_helpers.Gcf.figs)):
1662:                 state['_restore_to_pylab'] = True
1663: 
1664:         return state
1665: 
1666:     def __setstate__(self, state):
1667:         version = state.pop('__mpl_version__')
1668:         restore_to_pylab = state.pop('_restore_to_pylab', False)
1669: 
1670:         if version != _mpl_version:
1671:             import warnings
1672:             warnings.warn("This figure was saved with matplotlib version %s "
1673:                           "and is unlikely to function correctly." %
1674:                           (version, ))
1675: 
1676:         self.__dict__ = state
1677: 
1678:         # re-initialise some of the unstored state information
1679:         self._axobservers = []
1680:         self.canvas = None
1681: 
1682:         if restore_to_pylab:
1683:             # lazy import to avoid circularity
1684:             import matplotlib.pyplot as plt
1685:             import matplotlib._pylab_helpers as pylab_helpers
1686:             allnums = plt.get_fignums()
1687:             num = max(allnums) + 1 if allnums else 1
1688:             mgr = plt._backend_mod.new_figure_manager_given_figure(num, self)
1689: 
1690:             # XXX The following is a copy and paste from pyplot. Consider
1691:             # factoring to pylab_helpers
1692: 
1693:             if self.get_label():
1694:                 mgr.set_window_title(self.get_label())
1695: 
1696:             # make this figure current on button press event
1697:             def make_active(event):
1698:                 pylab_helpers.Gcf.set_active(mgr)
1699: 
1700:             mgr._cidgcf = mgr.canvas.mpl_connect('button_press_event',
1701:                                                  make_active)
1702: 
1703:             pylab_helpers.Gcf.set_active(mgr)
1704:             self.number = num
1705: 
1706:             plt.draw_if_interactive()
1707:         self.stale = True
1708: 
1709:     def add_axobserver(self, func):
1710:         'whenever the axes state change, ``func(self)`` will be called'
1711:         self._axobservers.append(func)
1712: 
1713:     def savefig(self, fname, **kwargs):
1714:         '''
1715:         Save the current figure.
1716: 
1717:         Call signature::
1718: 
1719:           savefig(fname, dpi=None, facecolor='w', edgecolor='w',
1720:                   orientation='portrait', papertype=None, format=None,
1721:                   transparent=False, bbox_inches=None, pad_inches=0.1,
1722:                   frameon=None)
1723: 
1724:         The output formats available depend on the backend being used.
1725: 
1726:         Arguments:
1727: 
1728:           *fname*:
1729:             A string containing a path to a filename, or a Python
1730:             file-like object, or possibly some backend-dependent object
1731:             such as :class:`~matplotlib.backends.backend_pdf.PdfPages`.
1732: 
1733:             If *format* is *None* and *fname* is a string, the output
1734:             format is deduced from the extension of the filename. If
1735:             the filename has no extension, the value of the rc parameter
1736:             ``savefig.format`` is used.
1737: 
1738:             If *fname* is not a string, remember to specify *format* to
1739:             ensure that the correct backend is used.
1740: 
1741:         Keyword arguments:
1742: 
1743:           *dpi*: [ *None* | ``scalar > 0`` | 'figure']
1744:             The resolution in dots per inch.  If *None* it will default to
1745:             the value ``savefig.dpi`` in the matplotlibrc file. If 'figure'
1746:             it will set the dpi to be the value of the figure.
1747: 
1748:           *facecolor*, *edgecolor*:
1749:             the colors of the figure rectangle
1750: 
1751:           *orientation*: [ 'landscape' | 'portrait' ]
1752:             not supported on all backends; currently only on postscript output
1753: 
1754:           *papertype*:
1755:             One of 'letter', 'legal', 'executive', 'ledger', 'a0' through
1756:             'a10', 'b0' through 'b10'. Only supported for postscript
1757:             output.
1758: 
1759:           *format*:
1760:             One of the file extensions supported by the active
1761:             backend.  Most backends support png, pdf, ps, eps and svg.
1762: 
1763:           *transparent*:
1764:             If *True*, the axes patches will all be transparent; the
1765:             figure patch will also be transparent unless facecolor
1766:             and/or edgecolor are specified via kwargs.
1767:             This is useful, for example, for displaying
1768:             a plot on top of a colored background on a web page.  The
1769:             transparency of these patches will be restored to their
1770:             original values upon exit of this function.
1771: 
1772:           *frameon*:
1773:             If *True*, the figure patch will be colored, if *False*, the
1774:             figure background will be transparent.  If not provided, the
1775:             rcParam 'savefig.frameon' will be used.
1776: 
1777:           *bbox_inches*:
1778:             Bbox in inches. Only the given portion of the figure is
1779:             saved. If 'tight', try to figure out the tight bbox of
1780:             the figure.
1781: 
1782:           *pad_inches*:
1783:             Amount of padding around the figure when bbox_inches is
1784:             'tight'.
1785: 
1786:           *bbox_extra_artists*:
1787:             A list of extra artists that will be considered when the
1788:             tight bbox is calculated.
1789: 
1790:         '''
1791:         kwargs.setdefault('dpi', rcParams['savefig.dpi'])
1792:         frameon = kwargs.pop('frameon', rcParams['savefig.frameon'])
1793:         transparent = kwargs.pop('transparent',
1794:                                  rcParams['savefig.transparent'])
1795: 
1796:         if transparent:
1797:             kwargs.setdefault('facecolor', 'none')
1798:             kwargs.setdefault('edgecolor', 'none')
1799:             original_axes_colors = []
1800:             for ax in self.axes:
1801:                 patch = ax.patch
1802:                 original_axes_colors.append((patch.get_facecolor(),
1803:                                              patch.get_edgecolor()))
1804:                 patch.set_facecolor('none')
1805:                 patch.set_edgecolor('none')
1806:         else:
1807:             kwargs.setdefault('facecolor', rcParams['savefig.facecolor'])
1808:             kwargs.setdefault('edgecolor', rcParams['savefig.edgecolor'])
1809: 
1810:         if frameon:
1811:             original_frameon = self.get_frameon()
1812:             self.set_frameon(frameon)
1813: 
1814:         self.canvas.print_figure(fname, **kwargs)
1815: 
1816:         if frameon:
1817:             self.set_frameon(original_frameon)
1818: 
1819:         if transparent:
1820:             for ax, cc in zip(self.axes, original_axes_colors):
1821:                 ax.patch.set_facecolor(cc[0])
1822:                 ax.patch.set_edgecolor(cc[1])
1823: 
1824:     @docstring.dedent_interpd
1825:     def colorbar(self, mappable, cax=None, ax=None, use_gridspec=True, **kw):
1826:         '''
1827:         Create a colorbar for a ScalarMappable instance, *mappable*.
1828: 
1829:         Documentation for the pylab thin wrapper:
1830:         %(colorbar_doc)s
1831:         '''
1832:         if ax is None:
1833:             ax = self.gca()
1834: 
1835:         # Store the value of gca so that we can set it back later on.
1836:         current_ax = self.gca()
1837: 
1838:         if cax is None:
1839:             if use_gridspec and isinstance(ax, SubplotBase):
1840:                 cax, kw = cbar.make_axes_gridspec(ax, **kw)
1841:             else:
1842:                 cax, kw = cbar.make_axes(ax, **kw)
1843:         cax._hold = True
1844:         cb = cbar.colorbar_factory(cax, mappable, **kw)
1845: 
1846:         self.sca(current_ax)
1847:         self.stale = True
1848:         return cb
1849: 
1850:     def subplots_adjust(self, *args, **kwargs):
1851:         '''
1852:         Call signature::
1853: 
1854:           subplots_adjust(left=None, bottom=None, right=None, top=None,
1855:                               wspace=None, hspace=None)
1856: 
1857:         Update the :class:`SubplotParams` with *kwargs* (defaulting to rc when
1858:         *None*) and update the subplot locations
1859: 
1860:         '''
1861:         self.subplotpars.update(*args, **kwargs)
1862:         for ax in self.axes:
1863:             if not isinstance(ax, SubplotBase):
1864:                 # Check if sharing a subplots axis
1865:                 if isinstance(ax._sharex, SubplotBase):
1866:                     ax._sharex.update_params()
1867:                     ax.set_position(ax._sharex.figbox)
1868:                 elif isinstance(ax._sharey, SubplotBase):
1869:                     ax._sharey.update_params()
1870:                     ax.set_position(ax._sharey.figbox)
1871:             else:
1872:                 ax.update_params()
1873:                 ax.set_position(ax.figbox)
1874:         self.stale = True
1875: 
1876:     def ginput(self, n=1, timeout=30, show_clicks=True, mouse_add=1,
1877:                mouse_pop=3, mouse_stop=2):
1878:         '''
1879:         Blocking call to interact with a figure.
1880: 
1881:         Wait until the user clicks *n* times on the figure, and return the
1882:         coordinates of each click in a list.
1883: 
1884:         The buttons used for the various actions (adding points, removing
1885:         points, terminating the inputs) can be overridden via the
1886:         arguments *mouse_add*, *mouse_pop* and *mouse_stop*, that give
1887:         the associated mouse button: 1 for left, 2 for middle, 3 for
1888:         right.
1889: 
1890:         Parameters
1891:         ----------
1892:         n : int, optional, default: 1
1893:             Number of mouse clicks to accumulate. If negative, accumulate
1894:             clicks until the input is terminated manually.
1895:         timeout : scalar, optional, default: 30
1896:             Number of seconds to wait before timing out. If zero or negative
1897:             will never timeout.
1898:         show_clicks : bool, optional, default: False
1899:             If True, show a red cross at the location of each click.
1900:         mouse_add : int, one of (1, 2, 3), optional, default: 1 (left click)
1901:             Mouse button used to add points.
1902:         mouse_pop : int, one of (1, 2, 3), optional, default: 3 (right click)
1903:             Mouse button used to remove the most recently added point.
1904:         mouse_stop : int, one of (1, 2, 3), optional, default: 2 (middle click)
1905:             Mouse button used to stop input.
1906: 
1907:         Returns
1908:         -------
1909:         points : list of tuples
1910:             A list of the clicked (x, y) coordinates.
1911: 
1912:         Notes
1913:         -----
1914:         The keyboard can also be used to select points in case your mouse
1915:         does not have one or more of the buttons.  The delete and backspace
1916:         keys act like right clicking (i.e., remove last point), the enter key
1917:         terminates input and any other key (not already used by the window
1918:         manager) selects a point.
1919:         '''
1920: 
1921:         blocking_mouse_input = BlockingMouseInput(self,
1922:                                                   mouse_add=mouse_add,
1923:                                                   mouse_pop=mouse_pop,
1924:                                                   mouse_stop=mouse_stop)
1925:         return blocking_mouse_input(n=n, timeout=timeout,
1926:                                     show_clicks=show_clicks)
1927: 
1928:     def waitforbuttonpress(self, timeout=-1):
1929:         '''
1930:         Blocking call to interact with the figure.
1931: 
1932:         This will return True is a key was pressed, False if a mouse
1933:         button was pressed and None if *timeout* was reached without
1934:         either being pressed.
1935: 
1936:         If *timeout* is negative, does not timeout.
1937:         '''
1938: 
1939:         blocking_input = BlockingKeyMouseInput(self)
1940:         return blocking_input(timeout=timeout)
1941: 
1942:     def get_default_bbox_extra_artists(self):
1943:         bbox_artists = [artist for artist in self.get_children()
1944:                         if artist.get_visible()]
1945:         for ax in self.axes:
1946:             if ax.get_visible():
1947:                 bbox_artists.extend(ax.get_default_bbox_extra_artists())
1948:         # we don't want the figure's patch to influence the bbox calculation
1949:         bbox_artists.remove(self.patch)
1950:         return bbox_artists
1951: 
1952:     def get_tightbbox(self, renderer):
1953:         '''
1954:         Return a (tight) bounding box of the figure in inches.
1955: 
1956:         It only accounts axes title, axis labels, and axis
1957:         ticklabels. Needs improvement.
1958:         '''
1959: 
1960:         bb = []
1961:         for ax in self.axes:
1962:             if ax.get_visible():
1963:                 bb.append(ax.get_tightbbox(renderer))
1964: 
1965:         if len(bb) == 0:
1966:             return self.bbox_inches
1967: 
1968:         _bbox = Bbox.union([b for b in bb if b.width != 0 or b.height != 0])
1969: 
1970:         bbox_inches = TransformedBbox(_bbox,
1971:                                       Affine2D().scale(1. / self.dpi))
1972: 
1973:         return bbox_inches
1974: 
1975:     def tight_layout(self, renderer=None, pad=1.08, h_pad=None, w_pad=None,
1976:                      rect=None):
1977:         '''
1978:         Adjust subplot parameters to give specified padding.
1979: 
1980:         Parameters:
1981: 
1982:           pad : float
1983:             padding between the figure edge and the edges of subplots,
1984:             as a fraction of the font-size.
1985:           h_pad, w_pad : float
1986:             padding (height/width) between edges of adjacent subplots.
1987:             Defaults to `pad_inches`.
1988:           rect : if rect is given, it is interpreted as a rectangle
1989:             (left, bottom, right, top) in the normalized figure
1990:             coordinate that the whole subplots area (including
1991:             labels) will fit into. Default is (0, 0, 1, 1).
1992:         '''
1993: 
1994:         from .tight_layout import (
1995:             get_renderer, get_subplotspec_list, get_tight_layout_figure)
1996: 
1997:         subplotspec_list = get_subplotspec_list(self.axes)
1998:         if None in subplotspec_list:
1999:             warnings.warn("This figure includes Axes that are not compatible "
2000:                           "with tight_layout, so results might be incorrect.")
2001: 
2002:         if renderer is None:
2003:             renderer = get_renderer(self)
2004: 
2005:         kwargs = get_tight_layout_figure(
2006:             self, self.axes, subplotspec_list, renderer,
2007:             pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)
2008:         self.subplots_adjust(**kwargs)
2009: 
2010: 
2011: def figaspect(arg):
2012:     '''
2013:     Create a figure with specified aspect ratio.  If *arg* is a number,
2014:     use that aspect ratio.  If *arg* is an array, figaspect will
2015:     determine the width and height for a figure that would fit array
2016:     preserving aspect ratio.  The figure width, height in inches are
2017:     returned.  Be sure to create an axes with equal with and height,
2018:     e.g.,
2019: 
2020:     Example usage::
2021: 
2022:       # make a figure twice as tall as it is wide
2023:       w, h = figaspect(2.)
2024:       fig = Figure(figsize=(w,h))
2025:       ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
2026:       ax.imshow(A, **kwargs)
2027: 
2028: 
2029:       # make a figure with the proper aspect for an array
2030:       A = rand(5,3)
2031:       w, h = figaspect(A)
2032:       fig = Figure(figsize=(w,h))
2033:       ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])
2034:       ax.imshow(A, **kwargs)
2035: 
2036:     Thanks to Fernando Perez for this function
2037:     '''
2038: 
2039:     isarray = hasattr(arg, 'shape') and not np.isscalar(arg)
2040: 
2041:     # min/max sizes to respect when autoscaling.  If John likes the idea, they
2042:     # could become rc parameters, for now they're hardwired.
2043:     figsize_min = np.array((4.0, 2.0))  # min length for width/height
2044:     figsize_max = np.array((16.0, 16.0))  # max length for width/height
2045: 
2046:     # Extract the aspect ratio of the array
2047:     if isarray:
2048:         nr, nc = arg.shape[:2]
2049:         arr_ratio = float(nr) / nc
2050:     else:
2051:         arr_ratio = float(arg)
2052: 
2053:     # Height of user figure defaults
2054:     fig_height = rcParams['figure.figsize'][1]
2055: 
2056:     # New size for the figure, keeping the aspect ratio of the caller
2057:     newsize = np.array((fig_height / arr_ratio, fig_height))
2058: 
2059:     # Sanity checks, don't drop either dimension below figsize_min
2060:     newsize /= min(1.0, *(newsize / figsize_min))
2061: 
2062:     # Avoid humongous windows as well
2063:     newsize /= max(1.0, *(newsize / figsize_max))
2064: 
2065:     # Finally, if we have a really funky aspect ratio, break it but respect
2066:     # the min/max dimensions (we don't want figures 10 feet tall!)
2067:     newsize = np.clip(newsize, figsize_min, figsize_max)
2068:     return newsize
2069: 
2070: docstring.interpd.update(Figure=martist.kwdoc(Figure))
2071: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_50803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 12, (-1)), 'unicode', u'\nThe figure module provides the top-level\n:class:`~matplotlib.artist.Artist`, the :class:`Figure`, which\ncontains all the plot elements.  The following classes are defined\n\n:class:`SubplotParams`\n    control the default spacing of the subplots\n\n:class:`Figure`\n    top level container for all plot elements\n\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'import six' statement (line 17)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50804 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'six')

if (type(import_50804) is not StypyTypeError):

    if (import_50804 != 'pyd_module'):
        __import__(import_50804)
        sys_modules_50805 = sys.modules[import_50804]
        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'six', sys_modules_50805.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'six', import_50804)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'import warnings' statement (line 19)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'import numpy' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50806 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'numpy')

if (type(import_50806) is not StypyTypeError):

    if (import_50806 != 'pyd_module'):
        __import__(import_50806)
        sys_modules_50807 = sys.modules[import_50806]
        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'np', sys_modules_50807.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'numpy', import_50806)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'from matplotlib import rcParams' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50808 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib')

if (type(import_50808) is not StypyTypeError):

    if (import_50808 != 'pyd_module'):
        __import__(import_50808)
        sys_modules_50809 = sys.modules[import_50808]
        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib', sys_modules_50809.module_type_store, module_type_store, ['rcParams'])
        nest_module(stypy.reporting.localization.Localization(__file__, 23, 0), __file__, sys_modules_50809, sys_modules_50809.module_type_store, module_type_store)
    else:
        from matplotlib import rcParams

        import_from_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib', None, module_type_store, ['rcParams'], [rcParams])

else:
    # Assigning a type to the variable 'matplotlib' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib', import_50808)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'from matplotlib import docstring' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50810 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib')

if (type(import_50810) is not StypyTypeError):

    if (import_50810 != 'pyd_module'):
        __import__(import_50810)
        sys_modules_50811 = sys.modules[import_50810]
        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib', sys_modules_50811.module_type_store, module_type_store, ['docstring'])
        nest_module(stypy.reporting.localization.Localization(__file__, 24, 0), __file__, sys_modules_50811, sys_modules_50811.module_type_store, module_type_store)
    else:
        from matplotlib import docstring

        import_from_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib', None, module_type_store, ['docstring'], [docstring])

else:
    # Assigning a type to the variable 'matplotlib' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib', import_50810)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'from matplotlib import _mpl_version' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50812 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib')

if (type(import_50812) is not StypyTypeError):

    if (import_50812 != 'pyd_module'):
        __import__(import_50812)
        sys_modules_50813 = sys.modules[import_50812]
        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib', sys_modules_50813.module_type_store, module_type_store, ['__version__'])
        nest_module(stypy.reporting.localization.Localization(__file__, 25, 0), __file__, sys_modules_50813, sys_modules_50813.module_type_store, module_type_store)
    else:
        from matplotlib import __version__ as _mpl_version

        import_from_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib', None, module_type_store, ['__version__'], [_mpl_version])

else:
    # Assigning a type to the variable 'matplotlib' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib', import_50812)

# Adding an alias
module_type_store.add_alias('_mpl_version', '__version__')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'import matplotlib.artist' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50814 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.artist')

if (type(import_50814) is not StypyTypeError):

    if (import_50814 != 'pyd_module'):
        __import__(import_50814)
        sys_modules_50815 = sys.modules[import_50814]
        import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'martist', sys_modules_50815.module_type_store, module_type_store)
    else:
        import matplotlib.artist as martist

        import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'martist', matplotlib.artist, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.artist', import_50814)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'from matplotlib.artist import Artist, allow_rasterization' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50816 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.artist')

if (type(import_50816) is not StypyTypeError):

    if (import_50816 != 'pyd_module'):
        __import__(import_50816)
        sys_modules_50817 = sys.modules[import_50816]
        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.artist', sys_modules_50817.module_type_store, module_type_store, ['Artist', 'allow_rasterization'])
        nest_module(stypy.reporting.localization.Localization(__file__, 28, 0), __file__, sys_modules_50817, sys_modules_50817.module_type_store, module_type_store)
    else:
        from matplotlib.artist import Artist, allow_rasterization

        import_from_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.artist', None, module_type_store, ['Artist', 'allow_rasterization'], [Artist, allow_rasterization])

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.artist', import_50816)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'import matplotlib.cbook' statement (line 30)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50818 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.cbook')

if (type(import_50818) is not StypyTypeError):

    if (import_50818 != 'pyd_module'):
        __import__(import_50818)
        sys_modules_50819 = sys.modules[import_50818]
        import_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'cbook', sys_modules_50819.module_type_store, module_type_store)
    else:
        import matplotlib.cbook as cbook

        import_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'cbook', matplotlib.cbook, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib.cbook', import_50818)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'from matplotlib.cbook import Stack, iterable' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50820 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.cbook')

if (type(import_50820) is not StypyTypeError):

    if (import_50820 != 'pyd_module'):
        __import__(import_50820)
        sys_modules_50821 = sys.modules[import_50820]
        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.cbook', sys_modules_50821.module_type_store, module_type_store, ['Stack', 'iterable'])
        nest_module(stypy.reporting.localization.Localization(__file__, 32, 0), __file__, sys_modules_50821, sys_modules_50821.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import Stack, iterable

        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.cbook', None, module_type_store, ['Stack', 'iterable'], [Stack, iterable])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.cbook', import_50820)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 34, 0))

# 'from matplotlib import mimage' statement (line 34)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50822 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib')

if (type(import_50822) is not StypyTypeError):

    if (import_50822 != 'pyd_module'):
        __import__(import_50822)
        sys_modules_50823 = sys.modules[import_50822]
        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib', sys_modules_50823.module_type_store, module_type_store, ['image'])
        nest_module(stypy.reporting.localization.Localization(__file__, 34, 0), __file__, sys_modules_50823, sys_modules_50823.module_type_store, module_type_store)
    else:
        from matplotlib import image as mimage

        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib', None, module_type_store, ['image'], [mimage])

else:
    # Assigning a type to the variable 'matplotlib' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib', import_50822)

# Adding an alias
module_type_store.add_alias('mimage', 'image')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 35, 0))

# 'from matplotlib.image import FigureImage' statement (line 35)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50824 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib.image')

if (type(import_50824) is not StypyTypeError):

    if (import_50824 != 'pyd_module'):
        __import__(import_50824)
        sys_modules_50825 = sys.modules[import_50824]
        import_from_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib.image', sys_modules_50825.module_type_store, module_type_store, ['FigureImage'])
        nest_module(stypy.reporting.localization.Localization(__file__, 35, 0), __file__, sys_modules_50825, sys_modules_50825.module_type_store, module_type_store)
    else:
        from matplotlib.image import FigureImage

        import_from_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib.image', None, module_type_store, ['FigureImage'], [FigureImage])

else:
    # Assigning a type to the variable 'matplotlib.image' (line 35)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib.image', import_50824)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 37, 0))

# 'import matplotlib.colorbar' statement (line 37)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50826 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.colorbar')

if (type(import_50826) is not StypyTypeError):

    if (import_50826 != 'pyd_module'):
        __import__(import_50826)
        sys_modules_50827 = sys.modules[import_50826]
        import_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'cbar', sys_modules_50827.module_type_store, module_type_store)
    else:
        import matplotlib.colorbar as cbar

        import_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'cbar', matplotlib.colorbar, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.colorbar' (line 37)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.colorbar', import_50826)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 39, 0))

# 'from matplotlib.axes import Axes, SubplotBase, subplot_class_factory' statement (line 39)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50828 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.axes')

if (type(import_50828) is not StypyTypeError):

    if (import_50828 != 'pyd_module'):
        __import__(import_50828)
        sys_modules_50829 = sys.modules[import_50828]
        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.axes', sys_modules_50829.module_type_store, module_type_store, ['Axes', 'SubplotBase', 'subplot_class_factory'])
        nest_module(stypy.reporting.localization.Localization(__file__, 39, 0), __file__, sys_modules_50829, sys_modules_50829.module_type_store, module_type_store)
    else:
        from matplotlib.axes import Axes, SubplotBase, subplot_class_factory

        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.axes', None, module_type_store, ['Axes', 'SubplotBase', 'subplot_class_factory'], [Axes, SubplotBase, subplot_class_factory])

else:
    # Assigning a type to the variable 'matplotlib.axes' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.axes', import_50828)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 40, 0))

# 'from matplotlib.blocking_input import BlockingMouseInput, BlockingKeyMouseInput' statement (line 40)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50830 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.blocking_input')

if (type(import_50830) is not StypyTypeError):

    if (import_50830 != 'pyd_module'):
        __import__(import_50830)
        sys_modules_50831 = sys.modules[import_50830]
        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.blocking_input', sys_modules_50831.module_type_store, module_type_store, ['BlockingMouseInput', 'BlockingKeyMouseInput'])
        nest_module(stypy.reporting.localization.Localization(__file__, 40, 0), __file__, sys_modules_50831, sys_modules_50831.module_type_store, module_type_store)
    else:
        from matplotlib.blocking_input import BlockingMouseInput, BlockingKeyMouseInput

        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.blocking_input', None, module_type_store, ['BlockingMouseInput', 'BlockingKeyMouseInput'], [BlockingMouseInput, BlockingKeyMouseInput])

else:
    # Assigning a type to the variable 'matplotlib.blocking_input' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.blocking_input', import_50830)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 41, 0))

# 'from matplotlib.gridspec import GridSpec' statement (line 41)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50832 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.gridspec')

if (type(import_50832) is not StypyTypeError):

    if (import_50832 != 'pyd_module'):
        __import__(import_50832)
        sys_modules_50833 = sys.modules[import_50832]
        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.gridspec', sys_modules_50833.module_type_store, module_type_store, ['GridSpec'])
        nest_module(stypy.reporting.localization.Localization(__file__, 41, 0), __file__, sys_modules_50833, sys_modules_50833.module_type_store, module_type_store)
    else:
        from matplotlib.gridspec import GridSpec

        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.gridspec', None, module_type_store, ['GridSpec'], [GridSpec])

else:
    # Assigning a type to the variable 'matplotlib.gridspec' (line 41)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib.gridspec', import_50832)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 42, 0))

# 'from matplotlib.legend import Legend' statement (line 42)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50834 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib.legend')

if (type(import_50834) is not StypyTypeError):

    if (import_50834 != 'pyd_module'):
        __import__(import_50834)
        sys_modules_50835 = sys.modules[import_50834]
        import_from_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib.legend', sys_modules_50835.module_type_store, module_type_store, ['Legend'])
        nest_module(stypy.reporting.localization.Localization(__file__, 42, 0), __file__, sys_modules_50835, sys_modules_50835.module_type_store, module_type_store)
    else:
        from matplotlib.legend import Legend

        import_from_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib.legend', None, module_type_store, ['Legend'], [Legend])

else:
    # Assigning a type to the variable 'matplotlib.legend' (line 42)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib.legend', import_50834)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 43, 0))

# 'from matplotlib.patches import Rectangle' statement (line 43)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50836 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 43, 0), 'matplotlib.patches')

if (type(import_50836) is not StypyTypeError):

    if (import_50836 != 'pyd_module'):
        __import__(import_50836)
        sys_modules_50837 = sys.modules[import_50836]
        import_from_module(stypy.reporting.localization.Localization(__file__, 43, 0), 'matplotlib.patches', sys_modules_50837.module_type_store, module_type_store, ['Rectangle'])
        nest_module(stypy.reporting.localization.Localization(__file__, 43, 0), __file__, sys_modules_50837, sys_modules_50837.module_type_store, module_type_store)
    else:
        from matplotlib.patches import Rectangle

        import_from_module(stypy.reporting.localization.Localization(__file__, 43, 0), 'matplotlib.patches', None, module_type_store, ['Rectangle'], [Rectangle])

else:
    # Assigning a type to the variable 'matplotlib.patches' (line 43)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'matplotlib.patches', import_50836)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 44, 0))

# 'from matplotlib.projections import get_projection_names, process_projection_requirements' statement (line 44)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50838 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.projections')

if (type(import_50838) is not StypyTypeError):

    if (import_50838 != 'pyd_module'):
        __import__(import_50838)
        sys_modules_50839 = sys.modules[import_50838]
        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.projections', sys_modules_50839.module_type_store, module_type_store, ['get_projection_names', 'process_projection_requirements'])
        nest_module(stypy.reporting.localization.Localization(__file__, 44, 0), __file__, sys_modules_50839, sys_modules_50839.module_type_store, module_type_store)
    else:
        from matplotlib.projections import get_projection_names, process_projection_requirements

        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.projections', None, module_type_store, ['get_projection_names', 'process_projection_requirements'], [get_projection_names, process_projection_requirements])

else:
    # Assigning a type to the variable 'matplotlib.projections' (line 44)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.projections', import_50838)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 46, 0))

# 'from matplotlib.text import Text, _process_text_args' statement (line 46)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50840 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 46, 0), 'matplotlib.text')

if (type(import_50840) is not StypyTypeError):

    if (import_50840 != 'pyd_module'):
        __import__(import_50840)
        sys_modules_50841 = sys.modules[import_50840]
        import_from_module(stypy.reporting.localization.Localization(__file__, 46, 0), 'matplotlib.text', sys_modules_50841.module_type_store, module_type_store, ['Text', '_process_text_args'])
        nest_module(stypy.reporting.localization.Localization(__file__, 46, 0), __file__, sys_modules_50841, sys_modules_50841.module_type_store, module_type_store)
    else:
        from matplotlib.text import Text, _process_text_args

        import_from_module(stypy.reporting.localization.Localization(__file__, 46, 0), 'matplotlib.text', None, module_type_store, ['Text', '_process_text_args'], [Text, _process_text_args])

else:
    # Assigning a type to the variable 'matplotlib.text' (line 46)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 0), 'matplotlib.text', import_50840)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 47, 0))

# 'from matplotlib.transforms import Affine2D, Bbox, BboxTransformTo, TransformedBbox' statement (line 47)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50842 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'matplotlib.transforms')

if (type(import_50842) is not StypyTypeError):

    if (import_50842 != 'pyd_module'):
        __import__(import_50842)
        sys_modules_50843 = sys.modules[import_50842]
        import_from_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'matplotlib.transforms', sys_modules_50843.module_type_store, module_type_store, ['Affine2D', 'Bbox', 'BboxTransformTo', 'TransformedBbox'])
        nest_module(stypy.reporting.localization.Localization(__file__, 47, 0), __file__, sys_modules_50843, sys_modules_50843.module_type_store, module_type_store)
    else:
        from matplotlib.transforms import Affine2D, Bbox, BboxTransformTo, TransformedBbox

        import_from_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'matplotlib.transforms', None, module_type_store, ['Affine2D', 'Bbox', 'BboxTransformTo', 'TransformedBbox'], [Affine2D, Bbox, BboxTransformTo, TransformedBbox])

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 47)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 0), 'matplotlib.transforms', import_50842)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 49, 0))

# 'from matplotlib.backend_bases import NonGuiException' statement (line 49)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_50844 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 49, 0), 'matplotlib.backend_bases')

if (type(import_50844) is not StypyTypeError):

    if (import_50844 != 'pyd_module'):
        __import__(import_50844)
        sys_modules_50845 = sys.modules[import_50844]
        import_from_module(stypy.reporting.localization.Localization(__file__, 49, 0), 'matplotlib.backend_bases', sys_modules_50845.module_type_store, module_type_store, ['NonGuiException'])
        nest_module(stypy.reporting.localization.Localization(__file__, 49, 0), __file__, sys_modules_50845, sys_modules_50845.module_type_store, module_type_store)
    else:
        from matplotlib.backend_bases import NonGuiException

        import_from_module(stypy.reporting.localization.Localization(__file__, 49, 0), 'matplotlib.backend_bases', None, module_type_store, ['NonGuiException'], [NonGuiException])

else:
    # Assigning a type to the variable 'matplotlib.backend_bases' (line 49)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 0), 'matplotlib.backend_bases', import_50844)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')


# Call to update(...): (line 51)
# Processing the call keyword arguments (line 51)

# Call to get_projection_names(...): (line 51)
# Processing the call keyword arguments (line 51)
kwargs_50850 = {}
# Getting the type of 'get_projection_names' (line 51)
get_projection_names_50849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 42), 'get_projection_names', False)
# Calling get_projection_names(args, kwargs) (line 51)
get_projection_names_call_result_50851 = invoke(stypy.reporting.localization.Localization(__file__, 51, 42), get_projection_names_50849, *[], **kwargs_50850)

keyword_50852 = get_projection_names_call_result_50851
kwargs_50853 = {'projection_names': keyword_50852}
# Getting the type of 'docstring' (line 51)
docstring_50846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 51)
interpd_50847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 0), docstring_50846, 'interpd')
# Obtaining the member 'update' of a type (line 51)
update_50848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 0), interpd_50847, 'update')
# Calling update(args, kwargs) (line 51)
update_call_result_50854 = invoke(stypy.reporting.localization.Localization(__file__, 51, 0), update_50848, *[], **kwargs_50853)


@norecursion
def _stale_figure_callback(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_stale_figure_callback'
    module_type_store = module_type_store.open_function_context('_stale_figure_callback', 54, 0, False)
    
    # Passed parameters checking function
    _stale_figure_callback.stypy_localization = localization
    _stale_figure_callback.stypy_type_of_self = None
    _stale_figure_callback.stypy_type_store = module_type_store
    _stale_figure_callback.stypy_function_name = '_stale_figure_callback'
    _stale_figure_callback.stypy_param_names_list = ['self', 'val']
    _stale_figure_callback.stypy_varargs_param_name = None
    _stale_figure_callback.stypy_kwargs_param_name = None
    _stale_figure_callback.stypy_call_defaults = defaults
    _stale_figure_callback.stypy_call_varargs = varargs
    _stale_figure_callback.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_stale_figure_callback', ['self', 'val'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_stale_figure_callback', localization, ['self', 'val'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_stale_figure_callback(...)' code ##################

    
    # Getting the type of 'self' (line 55)
    self_50855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 7), 'self')
    # Obtaining the member 'figure' of a type (line 55)
    figure_50856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 55, 7), self_50855, 'figure')
    # Testing the type of an if condition (line 55)
    if_condition_50857 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 55, 4), figure_50856)
    # Assigning a type to the variable 'if_condition_50857' (line 55)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 55, 4), 'if_condition_50857', if_condition_50857)
    # SSA begins for if statement (line 55)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Attribute (line 56):
    
    # Assigning a Name to a Attribute (line 56):
    
    # Assigning a Name to a Attribute (line 56):
    # Getting the type of 'val' (line 56)
    val_50858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 28), 'val')
    # Getting the type of 'self' (line 56)
    self_50859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 8), 'self')
    # Obtaining the member 'figure' of a type (line 56)
    figure_50860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 56, 8), self_50859, 'figure')
    # Setting the type of the member 'stale' of a type (line 56)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 56, 8), figure_50860, 'stale', val_50858)
    # SSA join for if statement (line 55)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_stale_figure_callback(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_stale_figure_callback' in the type store
    # Getting the type of 'stypy_return_type' (line 54)
    stypy_return_type_50861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_50861)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_stale_figure_callback'
    return stypy_return_type_50861

# Assigning a type to the variable '_stale_figure_callback' (line 54)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 54, 0), '_stale_figure_callback', _stale_figure_callback)
# Declaration of the 'AxesStack' class
# Getting the type of 'Stack' (line 59)
Stack_50862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 16), 'Stack')

class AxesStack(Stack_50862, ):
    unicode_50863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 73, (-1)), 'unicode', u'\n    Specialization of the Stack to handle all tracking of Axes in a Figure.\n    This stack stores ``key, (ind, axes)`` pairs, where:\n\n        * **key** should be a hash of the args and kwargs\n          used in generating the Axes.\n        * **ind** is a serial number for tracking the order\n          in which axes were added.\n\n    The AxesStack is a callable, where ``ax_stack()`` returns\n    the current axes. Alternatively the :meth:`current_key_axes` will\n    return the current key and associated axes.\n\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 74, 4, False)
        # Assigning a type to the variable 'self' (line 75)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 75, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesStack.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        
        # Call to __init__(...): (line 75)
        # Processing the call arguments (line 75)
        # Getting the type of 'self' (line 75)
        self_50866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 23), 'self', False)
        # Processing the call keyword arguments (line 75)
        kwargs_50867 = {}
        # Getting the type of 'Stack' (line 75)
        Stack_50864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 75, 8), 'Stack', False)
        # Obtaining the member '__init__' of a type (line 75)
        init___50865 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 75, 8), Stack_50864, '__init__')
        # Calling __init__(args, kwargs) (line 75)
        init___call_result_50868 = invoke(stypy.reporting.localization.Localization(__file__, 75, 8), init___50865, *[self_50866], **kwargs_50867)
        
        
        # Assigning a Num to a Attribute (line 76):
        
        # Assigning a Num to a Attribute (line 76):
        
        # Assigning a Num to a Attribute (line 76):
        int_50869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, 20), 'int')
        # Getting the type of 'self' (line 76)
        self_50870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 76, 8), 'self')
        # Setting the type of the member '_ind' of a type (line 76)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 76, 8), self_50870, '_ind', int_50869)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def as_list(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'as_list'
        module_type_store = module_type_store.open_function_context('as_list', 78, 4, False)
        # Assigning a type to the variable 'self' (line 79)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 79, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesStack.as_list.__dict__.__setitem__('stypy_localization', localization)
        AxesStack.as_list.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesStack.as_list.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesStack.as_list.__dict__.__setitem__('stypy_function_name', 'AxesStack.as_list')
        AxesStack.as_list.__dict__.__setitem__('stypy_param_names_list', [])
        AxesStack.as_list.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesStack.as_list.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesStack.as_list.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesStack.as_list.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesStack.as_list.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesStack.as_list.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesStack.as_list', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'as_list', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'as_list(...)' code ##################

        unicode_50871 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, (-1)), 'unicode', u'\n        Return a list of the Axes instances that have been added to the figure\n        ')
        
        # Assigning a ListComp to a Name (line 82):
        
        # Assigning a ListComp to a Name (line 82):
        
        # Assigning a ListComp to a Name (line 82):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 82)
        self_50873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 33), 'self')
        # Obtaining the member '_elements' of a type (line 82)
        _elements_50874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 82, 33), self_50873, '_elements')
        comprehension_50875 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 82, 19), _elements_50874)
        # Assigning a type to the variable 'k' (line 82)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 19), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 82, 19), comprehension_50875))
        # Assigning a type to the variable 'a' (line 82)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 19), 'a', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 82, 19), comprehension_50875))
        # Getting the type of 'a' (line 82)
        a_50872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 82, 19), 'a')
        list_50876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 82, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 82, 19), list_50876, a_50872)
        # Assigning a type to the variable 'ia_list' (line 82)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 8), 'ia_list', list_50876)
        
        # Call to sort(...): (line 83)
        # Processing the call keyword arguments (line 83)
        kwargs_50879 = {}
        # Getting the type of 'ia_list' (line 83)
        ia_list_50877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 8), 'ia_list', False)
        # Obtaining the member 'sort' of a type (line 83)
        sort_50878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 83, 8), ia_list_50877, 'sort')
        # Calling sort(args, kwargs) (line 83)
        sort_call_result_50880 = invoke(stypy.reporting.localization.Localization(__file__, 83, 8), sort_50878, *[], **kwargs_50879)
        
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'ia_list' (line 84)
        ia_list_50882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 30), 'ia_list')
        comprehension_50883 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 16), ia_list_50882)
        # Assigning a type to the variable 'i' (line 84)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 16), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 16), comprehension_50883))
        # Assigning a type to the variable 'a' (line 84)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 16), 'a', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 16), comprehension_50883))
        # Getting the type of 'a' (line 84)
        a_50881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 16), 'a')
        list_50884 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 16), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 16), list_50884, a_50881)
        # Assigning a type to the variable 'stypy_return_type' (line 84)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 84, 8), 'stypy_return_type', list_50884)
        
        # ################# End of 'as_list(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'as_list' in the type store
        # Getting the type of 'stypy_return_type' (line 78)
        stypy_return_type_50885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50885)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'as_list'
        return stypy_return_type_50885


    @norecursion
    def get(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get'
        module_type_store = module_type_store.open_function_context('get', 86, 4, False)
        # Assigning a type to the variable 'self' (line 87)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesStack.get.__dict__.__setitem__('stypy_localization', localization)
        AxesStack.get.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesStack.get.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesStack.get.__dict__.__setitem__('stypy_function_name', 'AxesStack.get')
        AxesStack.get.__dict__.__setitem__('stypy_param_names_list', ['key'])
        AxesStack.get.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesStack.get.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesStack.get.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesStack.get.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesStack.get.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesStack.get.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesStack.get', ['key'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get', localization, ['key'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get(...)' code ##################

        unicode_50886 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, (-1)), 'unicode', u'\n        Return the Axes instance that was added with *key*.\n        If it is not present, return None.\n        ')
        
        # Assigning a Call to a Name (line 91):
        
        # Assigning a Call to a Name (line 91):
        
        # Assigning a Call to a Name (line 91):
        
        # Call to get(...): (line 91)
        # Processing the call arguments (line 91)
        # Getting the type of 'key' (line 91)
        key_50893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 40), 'key', False)
        # Processing the call keyword arguments (line 91)
        kwargs_50894 = {}
        
        # Call to dict(...): (line 91)
        # Processing the call arguments (line 91)
        # Getting the type of 'self' (line 91)
        self_50888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 20), 'self', False)
        # Obtaining the member '_elements' of a type (line 91)
        _elements_50889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 20), self_50888, '_elements')
        # Processing the call keyword arguments (line 91)
        kwargs_50890 = {}
        # Getting the type of 'dict' (line 91)
        dict_50887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 15), 'dict', False)
        # Calling dict(args, kwargs) (line 91)
        dict_call_result_50891 = invoke(stypy.reporting.localization.Localization(__file__, 91, 15), dict_50887, *[_elements_50889], **kwargs_50890)
        
        # Obtaining the member 'get' of a type (line 91)
        get_50892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 15), dict_call_result_50891, 'get')
        # Calling get(args, kwargs) (line 91)
        get_call_result_50895 = invoke(stypy.reporting.localization.Localization(__file__, 91, 15), get_50892, *[key_50893], **kwargs_50894)
        
        # Assigning a type to the variable 'item' (line 91)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 8), 'item', get_call_result_50895)
        
        # Type idiom detected: calculating its left and rigth part (line 92)
        # Getting the type of 'item' (line 92)
        item_50896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 11), 'item')
        # Getting the type of 'None' (line 92)
        None_50897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 19), 'None')
        
        (may_be_50898, more_types_in_union_50899) = may_be_none(item_50896, None_50897)

        if may_be_50898:

            if more_types_in_union_50899:
                # Runtime conditional SSA (line 92)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'None' (line 93)
            None_50900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 93, 19), 'None')
            # Assigning a type to the variable 'stypy_return_type' (line 93)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 12), 'stypy_return_type', None_50900)

            if more_types_in_union_50899:
                # SSA join for if statement (line 92)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to warn_deprecated(...): (line 94)
        # Processing the call arguments (line 94)
        unicode_50903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 12), 'unicode', u'2.1')
        unicode_50904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 12), 'unicode', u'Adding an axes using the same arguments as a previous axes currently reuses the earlier instance.  In a future version, a new instance will always be created and returned.  Meanwhile, this warning can be suppressed, and the future behavior ensured, by passing a unique label to each axes instance.')
        # Processing the call keyword arguments (line 94)
        kwargs_50905 = {}
        # Getting the type of 'cbook' (line 94)
        cbook_50901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 8), 'cbook', False)
        # Obtaining the member 'warn_deprecated' of a type (line 94)
        warn_deprecated_50902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 94, 8), cbook_50901, 'warn_deprecated')
        # Calling warn_deprecated(args, kwargs) (line 94)
        warn_deprecated_call_result_50906 = invoke(stypy.reporting.localization.Localization(__file__, 94, 8), warn_deprecated_50902, *[unicode_50903, unicode_50904], **kwargs_50905)
        
        
        # Obtaining the type of the subscript
        int_50907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 101, 20), 'int')
        # Getting the type of 'item' (line 101)
        item_50908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 15), 'item')
        # Obtaining the member '__getitem__' of a type (line 101)
        getitem___50909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 101, 15), item_50908, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 101)
        subscript_call_result_50910 = invoke(stypy.reporting.localization.Localization(__file__, 101, 15), getitem___50909, int_50907)
        
        # Assigning a type to the variable 'stypy_return_type' (line 101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 8), 'stypy_return_type', subscript_call_result_50910)
        
        # ################# End of 'get(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get' in the type store
        # Getting the type of 'stypy_return_type' (line 86)
        stypy_return_type_50911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 86, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50911)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get'
        return stypy_return_type_50911


    @norecursion
    def _entry_from_axes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_entry_from_axes'
        module_type_store = module_type_store.open_function_context('_entry_from_axes', 103, 4, False)
        # Assigning a type to the variable 'self' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesStack._entry_from_axes.__dict__.__setitem__('stypy_localization', localization)
        AxesStack._entry_from_axes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesStack._entry_from_axes.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesStack._entry_from_axes.__dict__.__setitem__('stypy_function_name', 'AxesStack._entry_from_axes')
        AxesStack._entry_from_axes.__dict__.__setitem__('stypy_param_names_list', ['e'])
        AxesStack._entry_from_axes.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesStack._entry_from_axes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesStack._entry_from_axes.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesStack._entry_from_axes.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesStack._entry_from_axes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesStack._entry_from_axes.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesStack._entry_from_axes', ['e'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_entry_from_axes', localization, ['e'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_entry_from_axes(...)' code ##################

        
        # Assigning a Subscript to a Tuple (line 104):
        
        # Assigning a Subscript to a Name (line 104):
        
        # Assigning a Subscript to a Name (line 104):
        
        # Obtaining the type of the subscript
        int_50912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 8), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'e' (line 104)
        e_50913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 65), 'e')
        # Calculating dict comprehension
        module_type_store = module_type_store.open_function_context('dict comprehension expression', 104, 18, True)
        # Calculating comprehension expression
        # Getting the type of 'self' (line 104)
        self_50918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 49), 'self')
        # Obtaining the member '_elements' of a type (line 104)
        _elements_50919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 49), self_50918, '_elements')
        comprehension_50920 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 18), _elements_50919)
        # Assigning a type to the variable 'k' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 18), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 18), comprehension_50920))
        # Assigning a type to the variable 'tuple_50921' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 18), 'tuple_50921', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 18), comprehension_50920))
        
        # Obtaining an instance of the builtin type 'tuple' (line 104)
        tuple_50921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 104)
        # Adding element type (line 104)ind
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 38), tuple_50921, )
        # Adding element type (line 104)a
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 38), tuple_50921, )
        
        # Assigning a type to the variable 'k' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 18), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 18), comprehension_50920))
        # Assigning a type to the variable 'tuple_50921' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 18), 'tuple_50921', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 18), comprehension_50920))
        # Getting the type of 'a' (line 104)
        a_50914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 18), 'a')
        
        # Obtaining an instance of the builtin type 'tuple' (line 104)
        tuple_50915 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 104)
        # Adding element type (line 104)
        # Getting the type of 'ind' (line 104)
        ind_50916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 22), 'ind')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 22), tuple_50915, ind_50916)
        # Adding element type (line 104)
        # Getting the type of 'k' (line 104)
        k_50917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 27), 'k')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 22), tuple_50915, k_50917)
        
        dict_50922 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 18), 'dict')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 18), dict_50922, (a_50914, tuple_50915))
        # Obtaining the member '__getitem__' of a type (line 104)
        getitem___50923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 18), dict_50922, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 104)
        subscript_call_result_50924 = invoke(stypy.reporting.localization.Localization(__file__, 104, 18), getitem___50923, e_50913)
        
        # Obtaining the member '__getitem__' of a type (line 104)
        getitem___50925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 8), subscript_call_result_50924, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 104)
        subscript_call_result_50926 = invoke(stypy.reporting.localization.Localization(__file__, 104, 8), getitem___50925, int_50912)
        
        # Assigning a type to the variable 'tuple_var_assignment_50761' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 8), 'tuple_var_assignment_50761', subscript_call_result_50926)
        
        # Assigning a Subscript to a Name (line 104):
        
        # Assigning a Subscript to a Name (line 104):
        
        # Obtaining the type of the subscript
        int_50927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 8), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'e' (line 104)
        e_50928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 65), 'e')
        # Calculating dict comprehension
        module_type_store = module_type_store.open_function_context('dict comprehension expression', 104, 18, True)
        # Calculating comprehension expression
        # Getting the type of 'self' (line 104)
        self_50933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 49), 'self')
        # Obtaining the member '_elements' of a type (line 104)
        _elements_50934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 49), self_50933, '_elements')
        comprehension_50935 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 18), _elements_50934)
        # Assigning a type to the variable 'k' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 18), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 18), comprehension_50935))
        # Assigning a type to the variable 'tuple_50936' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 18), 'tuple_50936', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 18), comprehension_50935))
        
        # Obtaining an instance of the builtin type 'tuple' (line 104)
        tuple_50936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 38), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 104)
        # Adding element type (line 104)ind
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 38), tuple_50936, )
        # Adding element type (line 104)a
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 38), tuple_50936, )
        
        # Assigning a type to the variable 'k' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 18), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 18), comprehension_50935))
        # Assigning a type to the variable 'tuple_50936' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 18), 'tuple_50936', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 18), comprehension_50935))
        # Getting the type of 'a' (line 104)
        a_50929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 18), 'a')
        
        # Obtaining an instance of the builtin type 'tuple' (line 104)
        tuple_50930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 104)
        # Adding element type (line 104)
        # Getting the type of 'ind' (line 104)
        ind_50931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 22), 'ind')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 22), tuple_50930, ind_50931)
        # Adding element type (line 104)
        # Getting the type of 'k' (line 104)
        k_50932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 27), 'k')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 22), tuple_50930, k_50932)
        
        dict_50937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 18), 'dict')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 18), dict_50937, (a_50929, tuple_50930))
        # Obtaining the member '__getitem__' of a type (line 104)
        getitem___50938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 18), dict_50937, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 104)
        subscript_call_result_50939 = invoke(stypy.reporting.localization.Localization(__file__, 104, 18), getitem___50938, e_50928)
        
        # Obtaining the member '__getitem__' of a type (line 104)
        getitem___50940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 104, 8), subscript_call_result_50939, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 104)
        subscript_call_result_50941 = invoke(stypy.reporting.localization.Localization(__file__, 104, 8), getitem___50940, int_50927)
        
        # Assigning a type to the variable 'tuple_var_assignment_50762' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 8), 'tuple_var_assignment_50762', subscript_call_result_50941)
        
        # Assigning a Name to a Name (line 104):
        
        # Assigning a Name to a Name (line 104):
        # Getting the type of 'tuple_var_assignment_50761' (line 104)
        tuple_var_assignment_50761_50942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 8), 'tuple_var_assignment_50761')
        # Assigning a type to the variable 'ind' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 8), 'ind', tuple_var_assignment_50761_50942)
        
        # Assigning a Name to a Name (line 104):
        
        # Assigning a Name to a Name (line 104):
        # Getting the type of 'tuple_var_assignment_50762' (line 104)
        tuple_var_assignment_50762_50943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 8), 'tuple_var_assignment_50762')
        # Assigning a type to the variable 'k' (line 104)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 13), 'k', tuple_var_assignment_50762_50943)
        
        # Obtaining an instance of the builtin type 'tuple' (line 105)
        tuple_50944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 105)
        # Adding element type (line 105)
        # Getting the type of 'k' (line 105)
        k_50945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 16), 'k')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 16), tuple_50944, k_50945)
        # Adding element type (line 105)
        
        # Obtaining an instance of the builtin type 'tuple' (line 105)
        tuple_50946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 105)
        # Adding element type (line 105)
        # Getting the type of 'ind' (line 105)
        ind_50947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 20), 'ind')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 20), tuple_50946, ind_50947)
        # Adding element type (line 105)
        # Getting the type of 'e' (line 105)
        e_50948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 25), 'e')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 20), tuple_50946, e_50948)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 16), tuple_50944, tuple_50946)
        
        # Assigning a type to the variable 'stypy_return_type' (line 105)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 8), 'stypy_return_type', tuple_50944)
        
        # ################# End of '_entry_from_axes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_entry_from_axes' in the type store
        # Getting the type of 'stypy_return_type' (line 103)
        stypy_return_type_50949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50949)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_entry_from_axes'
        return stypy_return_type_50949


    @norecursion
    def remove(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'remove'
        module_type_store = module_type_store.open_function_context('remove', 107, 4, False)
        # Assigning a type to the variable 'self' (line 108)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 108, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesStack.remove.__dict__.__setitem__('stypy_localization', localization)
        AxesStack.remove.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesStack.remove.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesStack.remove.__dict__.__setitem__('stypy_function_name', 'AxesStack.remove')
        AxesStack.remove.__dict__.__setitem__('stypy_param_names_list', ['a'])
        AxesStack.remove.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesStack.remove.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesStack.remove.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesStack.remove.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesStack.remove.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesStack.remove.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesStack.remove', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'remove', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'remove(...)' code ##################

        unicode_50950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 108, 8), 'unicode', u'Remove the axes from the stack.')
        
        # Call to remove(...): (line 109)
        # Processing the call arguments (line 109)
        # Getting the type of 'self' (line 109)
        self_50953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 21), 'self', False)
        
        # Call to _entry_from_axes(...): (line 109)
        # Processing the call arguments (line 109)
        # Getting the type of 'a' (line 109)
        a_50956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 49), 'a', False)
        # Processing the call keyword arguments (line 109)
        kwargs_50957 = {}
        # Getting the type of 'self' (line 109)
        self_50954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 27), 'self', False)
        # Obtaining the member '_entry_from_axes' of a type (line 109)
        _entry_from_axes_50955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 27), self_50954, '_entry_from_axes')
        # Calling _entry_from_axes(args, kwargs) (line 109)
        _entry_from_axes_call_result_50958 = invoke(stypy.reporting.localization.Localization(__file__, 109, 27), _entry_from_axes_50955, *[a_50956], **kwargs_50957)
        
        # Processing the call keyword arguments (line 109)
        kwargs_50959 = {}
        # Getting the type of 'Stack' (line 109)
        Stack_50951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 8), 'Stack', False)
        # Obtaining the member 'remove' of a type (line 109)
        remove_50952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 8), Stack_50951, 'remove')
        # Calling remove(args, kwargs) (line 109)
        remove_call_result_50960 = invoke(stypy.reporting.localization.Localization(__file__, 109, 8), remove_50952, *[self_50953, _entry_from_axes_call_result_50958], **kwargs_50959)
        
        
        # ################# End of 'remove(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'remove' in the type store
        # Getting the type of 'stypy_return_type' (line 107)
        stypy_return_type_50961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50961)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'remove'
        return stypy_return_type_50961


    @norecursion
    def bubble(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'bubble'
        module_type_store = module_type_store.open_function_context('bubble', 111, 4, False)
        # Assigning a type to the variable 'self' (line 112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesStack.bubble.__dict__.__setitem__('stypy_localization', localization)
        AxesStack.bubble.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesStack.bubble.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesStack.bubble.__dict__.__setitem__('stypy_function_name', 'AxesStack.bubble')
        AxesStack.bubble.__dict__.__setitem__('stypy_param_names_list', ['a'])
        AxesStack.bubble.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesStack.bubble.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesStack.bubble.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesStack.bubble.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesStack.bubble.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesStack.bubble.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesStack.bubble', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'bubble', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'bubble(...)' code ##################

        unicode_50962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 115, (-1)), 'unicode', u'\n        Move the given axes, which must already exist in the\n        stack, to the top.\n        ')
        
        # Call to bubble(...): (line 116)
        # Processing the call arguments (line 116)
        # Getting the type of 'self' (line 116)
        self_50965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 28), 'self', False)
        
        # Call to _entry_from_axes(...): (line 116)
        # Processing the call arguments (line 116)
        # Getting the type of 'a' (line 116)
        a_50968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 56), 'a', False)
        # Processing the call keyword arguments (line 116)
        kwargs_50969 = {}
        # Getting the type of 'self' (line 116)
        self_50966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 34), 'self', False)
        # Obtaining the member '_entry_from_axes' of a type (line 116)
        _entry_from_axes_50967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 116, 34), self_50966, '_entry_from_axes')
        # Calling _entry_from_axes(args, kwargs) (line 116)
        _entry_from_axes_call_result_50970 = invoke(stypy.reporting.localization.Localization(__file__, 116, 34), _entry_from_axes_50967, *[a_50968], **kwargs_50969)
        
        # Processing the call keyword arguments (line 116)
        kwargs_50971 = {}
        # Getting the type of 'Stack' (line 116)
        Stack_50963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 15), 'Stack', False)
        # Obtaining the member 'bubble' of a type (line 116)
        bubble_50964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 116, 15), Stack_50963, 'bubble')
        # Calling bubble(args, kwargs) (line 116)
        bubble_call_result_50972 = invoke(stypy.reporting.localization.Localization(__file__, 116, 15), bubble_50964, *[self_50965, _entry_from_axes_call_result_50970], **kwargs_50971)
        
        # Assigning a type to the variable 'stypy_return_type' (line 116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 8), 'stypy_return_type', bubble_call_result_50972)
        
        # ################# End of 'bubble(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'bubble' in the type store
        # Getting the type of 'stypy_return_type' (line 111)
        stypy_return_type_50973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 111, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_50973)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'bubble'
        return stypy_return_type_50973


    @norecursion
    def add(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add'
        module_type_store = module_type_store.open_function_context('add', 118, 4, False)
        # Assigning a type to the variable 'self' (line 119)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesStack.add.__dict__.__setitem__('stypy_localization', localization)
        AxesStack.add.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesStack.add.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesStack.add.__dict__.__setitem__('stypy_function_name', 'AxesStack.add')
        AxesStack.add.__dict__.__setitem__('stypy_param_names_list', ['key', 'a'])
        AxesStack.add.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesStack.add.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesStack.add.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesStack.add.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesStack.add.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesStack.add.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesStack.add', ['key', 'a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add', localization, ['key', 'a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add(...)' code ##################

        unicode_50974 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, (-1)), 'unicode', u"\n        Add Axes *a*, with key *key*, to the stack, and return the stack.\n\n        If *key* is unhashable, replace it by a unique, arbitrary object.\n\n        If *a* is already on the stack, don't add it again, but\n        return *None*.\n        ")
        
        
        
        # Call to isinstance(...): (line 129)
        # Processing the call arguments (line 129)
        # Getting the type of 'a' (line 129)
        a_50976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 26), 'a', False)
        # Getting the type of 'Axes' (line 129)
        Axes_50977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 29), 'Axes', False)
        # Processing the call keyword arguments (line 129)
        kwargs_50978 = {}
        # Getting the type of 'isinstance' (line 129)
        isinstance_50975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 129, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 129)
        isinstance_call_result_50979 = invoke(stypy.reporting.localization.Localization(__file__, 129, 15), isinstance_50975, *[a_50976, Axes_50977], **kwargs_50978)
        
        # Applying the 'not' unary operator (line 129)
        result_not__50980 = python_operator(stypy.reporting.localization.Localization(__file__, 129, 11), 'not', isinstance_call_result_50979)
        
        # Testing the type of an if condition (line 129)
        if_condition_50981 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 129, 8), result_not__50980)
        # Assigning a type to the variable 'if_condition_50981' (line 129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 129, 8), 'if_condition_50981', if_condition_50981)
        # SSA begins for if statement (line 129)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 130)
        # Processing the call arguments (line 130)
        
        # Call to format(...): (line 130)
        # Processing the call arguments (line 130)
        # Getting the type of 'a' (line 130)
        a_50985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 76), 'a', False)
        # Processing the call keyword arguments (line 130)
        kwargs_50986 = {}
        unicode_50983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 29), 'unicode', u'second argument, {!r}, is not an Axes')
        # Obtaining the member 'format' of a type (line 130)
        format_50984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 130, 29), unicode_50983, 'format')
        # Calling format(args, kwargs) (line 130)
        format_call_result_50987 = invoke(stypy.reporting.localization.Localization(__file__, 130, 29), format_50984, *[a_50985], **kwargs_50986)
        
        # Processing the call keyword arguments (line 130)
        kwargs_50988 = {}
        # Getting the type of 'ValueError' (line 130)
        ValueError_50982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 130)
        ValueError_call_result_50989 = invoke(stypy.reporting.localization.Localization(__file__, 130, 18), ValueError_50982, *[format_call_result_50987], **kwargs_50988)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 130, 12), ValueError_call_result_50989, 'raise parameter', BaseException)
        # SSA join for if statement (line 129)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # SSA begins for try-except statement (line 131)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to hash(...): (line 132)
        # Processing the call arguments (line 132)
        # Getting the type of 'key' (line 132)
        key_50991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 17), 'key', False)
        # Processing the call keyword arguments (line 132)
        kwargs_50992 = {}
        # Getting the type of 'hash' (line 132)
        hash_50990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 132, 12), 'hash', False)
        # Calling hash(args, kwargs) (line 132)
        hash_call_result_50993 = invoke(stypy.reporting.localization.Localization(__file__, 132, 12), hash_50990, *[key_50991], **kwargs_50992)
        
        # SSA branch for the except part of a try statement (line 131)
        # SSA branch for the except 'TypeError' branch of a try statement (line 131)
        module_type_store.open_ssa_branch('except')
        
        # Assigning a Call to a Name (line 134):
        
        # Assigning a Call to a Name (line 134):
        
        # Assigning a Call to a Name (line 134):
        
        # Call to object(...): (line 134)
        # Processing the call keyword arguments (line 134)
        kwargs_50995 = {}
        # Getting the type of 'object' (line 134)
        object_50994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 18), 'object', False)
        # Calling object(args, kwargs) (line 134)
        object_call_result_50996 = invoke(stypy.reporting.localization.Localization(__file__, 134, 18), object_50994, *[], **kwargs_50995)
        
        # Assigning a type to the variable 'key' (line 134)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 134, 12), 'key', object_call_result_50996)
        # SSA join for try-except statement (line 131)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 136):
        
        # Assigning a Call to a Name (line 136):
        
        # Assigning a Call to a Name (line 136):
        
        # Call to get(...): (line 136)
        # Processing the call arguments (line 136)
        # Getting the type of 'key' (line 136)
        key_50999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 30), 'key', False)
        # Processing the call keyword arguments (line 136)
        kwargs_51000 = {}
        # Getting the type of 'self' (line 136)
        self_50997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 21), 'self', False)
        # Obtaining the member 'get' of a type (line 136)
        get_50998 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 136, 21), self_50997, 'get')
        # Calling get(args, kwargs) (line 136)
        get_call_result_51001 = invoke(stypy.reporting.localization.Localization(__file__, 136, 21), get_50998, *[key_50999], **kwargs_51000)
        
        # Assigning a type to the variable 'a_existing' (line 136)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 8), 'a_existing', get_call_result_51001)
        
        # Type idiom detected: calculating its left and rigth part (line 137)
        # Getting the type of 'a_existing' (line 137)
        a_existing_51002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 8), 'a_existing')
        # Getting the type of 'None' (line 137)
        None_51003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 29), 'None')
        
        (may_be_51004, more_types_in_union_51005) = may_not_be_none(a_existing_51002, None_51003)

        if may_be_51004:

            if more_types_in_union_51005:
                # Runtime conditional SSA (line 137)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to remove(...): (line 138)
            # Processing the call arguments (line 138)
            # Getting the type of 'self' (line 138)
            self_51008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 25), 'self', False)
            
            # Obtaining an instance of the builtin type 'tuple' (line 138)
            tuple_51009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 138, 32), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 138)
            # Adding element type (line 138)
            # Getting the type of 'key' (line 138)
            key_51010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 32), 'key', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 138, 32), tuple_51009, key_51010)
            # Adding element type (line 138)
            # Getting the type of 'a_existing' (line 138)
            a_existing_51011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 37), 'a_existing', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 138, 32), tuple_51009, a_existing_51011)
            
            # Processing the call keyword arguments (line 138)
            kwargs_51012 = {}
            # Getting the type of 'Stack' (line 138)
            Stack_51006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 12), 'Stack', False)
            # Obtaining the member 'remove' of a type (line 138)
            remove_51007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 12), Stack_51006, 'remove')
            # Calling remove(args, kwargs) (line 138)
            remove_call_result_51013 = invoke(stypy.reporting.localization.Localization(__file__, 138, 12), remove_51007, *[self_51008, tuple_51009], **kwargs_51012)
            
            
            # Call to warn(...): (line 139)
            # Processing the call arguments (line 139)
            
            # Call to format(...): (line 140)
            # Processing the call arguments (line 140)
            # Getting the type of 'key' (line 140)
            key_51018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 74), 'key', False)
            # Processing the call keyword arguments (line 140)
            kwargs_51019 = {}
            unicode_51016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 140, 16), 'unicode', u'key {!r} already existed; Axes is being replaced')
            # Obtaining the member 'format' of a type (line 140)
            format_51017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 140, 16), unicode_51016, 'format')
            # Calling format(args, kwargs) (line 140)
            format_call_result_51020 = invoke(stypy.reporting.localization.Localization(__file__, 140, 16), format_51017, *[key_51018], **kwargs_51019)
            
            # Processing the call keyword arguments (line 139)
            kwargs_51021 = {}
            # Getting the type of 'warnings' (line 139)
            warnings_51014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 12), 'warnings', False)
            # Obtaining the member 'warn' of a type (line 139)
            warn_51015 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 139, 12), warnings_51014, 'warn')
            # Calling warn(args, kwargs) (line 139)
            warn_call_result_51022 = invoke(stypy.reporting.localization.Localization(__file__, 139, 12), warn_51015, *[format_call_result_51020], **kwargs_51021)
            

            if more_types_in_union_51005:
                # SSA join for if statement (line 137)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'a' (line 143)
        a_51023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 11), 'a')
        # Getting the type of 'self' (line 143)
        self_51024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 143, 16), 'self')
        # Applying the binary operator 'in' (line 143)
        result_contains_51025 = python_operator(stypy.reporting.localization.Localization(__file__, 143, 11), 'in', a_51023, self_51024)
        
        # Testing the type of an if condition (line 143)
        if_condition_51026 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 143, 8), result_contains_51025)
        # Assigning a type to the variable 'if_condition_51026' (line 143)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 8), 'if_condition_51026', if_condition_51026)
        # SSA begins for if statement (line 143)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'None' (line 144)
        None_51027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 12), 'stypy_return_type', None_51027)
        # SSA join for if statement (line 143)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 145)
        self_51028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 8), 'self')
        # Obtaining the member '_ind' of a type (line 145)
        _ind_51029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 8), self_51028, '_ind')
        int_51030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 145, 21), 'int')
        # Applying the binary operator '+=' (line 145)
        result_iadd_51031 = python_operator(stypy.reporting.localization.Localization(__file__, 145, 8), '+=', _ind_51029, int_51030)
        # Getting the type of 'self' (line 145)
        self_51032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 8), 'self')
        # Setting the type of the member '_ind' of a type (line 145)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 145, 8), self_51032, '_ind', result_iadd_51031)
        
        
        # Call to push(...): (line 146)
        # Processing the call arguments (line 146)
        # Getting the type of 'self' (line 146)
        self_51035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 26), 'self', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 146)
        tuple_51036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 146)
        # Adding element type (line 146)
        # Getting the type of 'key' (line 146)
        key_51037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 33), 'key', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 146, 33), tuple_51036, key_51037)
        # Adding element type (line 146)
        
        # Obtaining an instance of the builtin type 'tuple' (line 146)
        tuple_51038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 146)
        # Adding element type (line 146)
        # Getting the type of 'self' (line 146)
        self_51039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 39), 'self', False)
        # Obtaining the member '_ind' of a type (line 146)
        _ind_51040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 39), self_51039, '_ind')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 146, 39), tuple_51038, _ind_51040)
        # Adding element type (line 146)
        # Getting the type of 'a' (line 146)
        a_51041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 50), 'a', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 146, 39), tuple_51038, a_51041)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 146, 33), tuple_51036, tuple_51038)
        
        # Processing the call keyword arguments (line 146)
        kwargs_51042 = {}
        # Getting the type of 'Stack' (line 146)
        Stack_51033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 15), 'Stack', False)
        # Obtaining the member 'push' of a type (line 146)
        push_51034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 15), Stack_51033, 'push')
        # Calling push(args, kwargs) (line 146)
        push_call_result_51043 = invoke(stypy.reporting.localization.Localization(__file__, 146, 15), push_51034, *[self_51035, tuple_51036], **kwargs_51042)
        
        # Assigning a type to the variable 'stypy_return_type' (line 146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 8), 'stypy_return_type', push_call_result_51043)
        
        # ################# End of 'add(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add' in the type store
        # Getting the type of 'stypy_return_type' (line 118)
        stypy_return_type_51044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 118, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51044)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add'
        return stypy_return_type_51044


    @norecursion
    def current_key_axes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'current_key_axes'
        module_type_store = module_type_store.open_function_context('current_key_axes', 148, 4, False)
        # Assigning a type to the variable 'self' (line 149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 149, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesStack.current_key_axes.__dict__.__setitem__('stypy_localization', localization)
        AxesStack.current_key_axes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesStack.current_key_axes.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesStack.current_key_axes.__dict__.__setitem__('stypy_function_name', 'AxesStack.current_key_axes')
        AxesStack.current_key_axes.__dict__.__setitem__('stypy_param_names_list', [])
        AxesStack.current_key_axes.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesStack.current_key_axes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesStack.current_key_axes.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesStack.current_key_axes.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesStack.current_key_axes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesStack.current_key_axes.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesStack.current_key_axes', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'current_key_axes', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'current_key_axes(...)' code ##################

        unicode_51045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, (-1)), 'unicode', u'\n        Return a tuple of ``(key, axes)`` for the active axes.\n\n        If no axes exists on the stack, then returns ``(None, None)``.\n\n        ')
        
        
        
        # Call to len(...): (line 155)
        # Processing the call arguments (line 155)
        # Getting the type of 'self' (line 155)
        self_51047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 19), 'self', False)
        # Obtaining the member '_elements' of a type (line 155)
        _elements_51048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 19), self_51047, '_elements')
        # Processing the call keyword arguments (line 155)
        kwargs_51049 = {}
        # Getting the type of 'len' (line 155)
        len_51046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 15), 'len', False)
        # Calling len(args, kwargs) (line 155)
        len_call_result_51050 = invoke(stypy.reporting.localization.Localization(__file__, 155, 15), len_51046, *[_elements_51048], **kwargs_51049)
        
        # Applying the 'not' unary operator (line 155)
        result_not__51051 = python_operator(stypy.reporting.localization.Localization(__file__, 155, 11), 'not', len_call_result_51050)
        
        # Testing the type of an if condition (line 155)
        if_condition_51052 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 155, 8), result_not__51051)
        # Assigning a type to the variable 'if_condition_51052' (line 155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 155, 8), 'if_condition_51052', if_condition_51052)
        # SSA begins for if statement (line 155)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 156)
        tuple_51053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 156)
        # Adding element type (line 156)
        # Getting the type of 'self' (line 156)
        self_51054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 19), 'self')
        # Obtaining the member '_default' of a type (line 156)
        _default_51055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 19), self_51054, '_default')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 156, 19), tuple_51053, _default_51055)
        # Adding element type (line 156)
        # Getting the type of 'self' (line 156)
        self_51056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 34), 'self')
        # Obtaining the member '_default' of a type (line 156)
        _default_51057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 34), self_51056, '_default')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 156, 19), tuple_51053, _default_51057)
        
        # Assigning a type to the variable 'stypy_return_type' (line 156)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 12), 'stypy_return_type', tuple_51053)
        # SSA branch for the else part of an if statement (line 155)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Tuple (line 158):
        
        # Assigning a Subscript to a Name (line 158):
        
        # Assigning a Subscript to a Name (line 158):
        
        # Obtaining the type of the subscript
        int_51058 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 158, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 158)
        self_51059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 48), 'self')
        # Obtaining the member '_pos' of a type (line 158)
        _pos_51060 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 48), self_51059, '_pos')
        # Getting the type of 'self' (line 158)
        self_51061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 33), 'self')
        # Obtaining the member '_elements' of a type (line 158)
        _elements_51062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 33), self_51061, '_elements')
        # Obtaining the member '__getitem__' of a type (line 158)
        getitem___51063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 33), _elements_51062, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 158)
        subscript_call_result_51064 = invoke(stypy.reporting.localization.Localization(__file__, 158, 33), getitem___51063, _pos_51060)
        
        # Obtaining the member '__getitem__' of a type (line 158)
        getitem___51065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 12), subscript_call_result_51064, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 158)
        subscript_call_result_51066 = invoke(stypy.reporting.localization.Localization(__file__, 158, 12), getitem___51065, int_51058)
        
        # Assigning a type to the variable 'tuple_var_assignment_50763' (line 158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'tuple_var_assignment_50763', subscript_call_result_51066)
        
        # Assigning a Subscript to a Name (line 158):
        
        # Assigning a Subscript to a Name (line 158):
        
        # Obtaining the type of the subscript
        int_51067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 158, 12), 'int')
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 158)
        self_51068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 48), 'self')
        # Obtaining the member '_pos' of a type (line 158)
        _pos_51069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 48), self_51068, '_pos')
        # Getting the type of 'self' (line 158)
        self_51070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 33), 'self')
        # Obtaining the member '_elements' of a type (line 158)
        _elements_51071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 33), self_51070, '_elements')
        # Obtaining the member '__getitem__' of a type (line 158)
        getitem___51072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 33), _elements_51071, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 158)
        subscript_call_result_51073 = invoke(stypy.reporting.localization.Localization(__file__, 158, 33), getitem___51072, _pos_51069)
        
        # Obtaining the member '__getitem__' of a type (line 158)
        getitem___51074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 12), subscript_call_result_51073, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 158)
        subscript_call_result_51075 = invoke(stypy.reporting.localization.Localization(__file__, 158, 12), getitem___51074, int_51067)
        
        # Assigning a type to the variable 'tuple_var_assignment_50764' (line 158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'tuple_var_assignment_50764', subscript_call_result_51075)
        
        # Assigning a Name to a Name (line 158):
        
        # Assigning a Name to a Name (line 158):
        # Getting the type of 'tuple_var_assignment_50763' (line 158)
        tuple_var_assignment_50763_51076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'tuple_var_assignment_50763')
        # Assigning a type to the variable 'key' (line 158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'key', tuple_var_assignment_50763_51076)
        
        # Assigning a Name to a Tuple (line 158):
        
        # Assigning a Subscript to a Name (line 158):
        
        # Obtaining the type of the subscript
        int_51077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 158, 12), 'int')
        # Getting the type of 'tuple_var_assignment_50764' (line 158)
        tuple_var_assignment_50764_51078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'tuple_var_assignment_50764')
        # Obtaining the member '__getitem__' of a type (line 158)
        getitem___51079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 12), tuple_var_assignment_50764_51078, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 158)
        subscript_call_result_51080 = invoke(stypy.reporting.localization.Localization(__file__, 158, 12), getitem___51079, int_51077)
        
        # Assigning a type to the variable 'tuple_var_assignment_50801' (line 158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'tuple_var_assignment_50801', subscript_call_result_51080)
        
        # Assigning a Subscript to a Name (line 158):
        
        # Obtaining the type of the subscript
        int_51081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 158, 12), 'int')
        # Getting the type of 'tuple_var_assignment_50764' (line 158)
        tuple_var_assignment_50764_51082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'tuple_var_assignment_50764')
        # Obtaining the member '__getitem__' of a type (line 158)
        getitem___51083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 12), tuple_var_assignment_50764_51082, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 158)
        subscript_call_result_51084 = invoke(stypy.reporting.localization.Localization(__file__, 158, 12), getitem___51083, int_51081)
        
        # Assigning a type to the variable 'tuple_var_assignment_50802' (line 158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'tuple_var_assignment_50802', subscript_call_result_51084)
        
        # Assigning a Name to a Name (line 158):
        # Getting the type of 'tuple_var_assignment_50801' (line 158)
        tuple_var_assignment_50801_51085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'tuple_var_assignment_50801')
        # Assigning a type to the variable 'index' (line 158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 18), 'index', tuple_var_assignment_50801_51085)
        
        # Assigning a Name to a Name (line 158):
        # Getting the type of 'tuple_var_assignment_50802' (line 158)
        tuple_var_assignment_50802_51086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'tuple_var_assignment_50802')
        # Assigning a type to the variable 'axes' (line 158)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 25), 'axes', tuple_var_assignment_50802_51086)
        
        # Obtaining an instance of the builtin type 'tuple' (line 159)
        tuple_51087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 159)
        # Adding element type (line 159)
        # Getting the type of 'key' (line 159)
        key_51088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 19), 'key')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 19), tuple_51087, key_51088)
        # Adding element type (line 159)
        # Getting the type of 'axes' (line 159)
        axes_51089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 24), 'axes')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 159, 19), tuple_51087, axes_51089)
        
        # Assigning a type to the variable 'stypy_return_type' (line 159)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 159, 12), 'stypy_return_type', tuple_51087)
        # SSA join for if statement (line 155)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'current_key_axes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'current_key_axes' in the type store
        # Getting the type of 'stypy_return_type' (line 148)
        stypy_return_type_51090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51090)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'current_key_axes'
        return stypy_return_type_51090


    @norecursion
    def __call__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__call__'
        module_type_store = module_type_store.open_function_context('__call__', 161, 4, False)
        # Assigning a type to the variable 'self' (line 162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesStack.__call__.__dict__.__setitem__('stypy_localization', localization)
        AxesStack.__call__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesStack.__call__.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesStack.__call__.__dict__.__setitem__('stypy_function_name', 'AxesStack.__call__')
        AxesStack.__call__.__dict__.__setitem__('stypy_param_names_list', [])
        AxesStack.__call__.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesStack.__call__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesStack.__call__.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesStack.__call__.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesStack.__call__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesStack.__call__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesStack.__call__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__call__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__call__(...)' code ##################

        
        # Obtaining the type of the subscript
        int_51091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 39), 'int')
        
        # Call to current_key_axes(...): (line 162)
        # Processing the call keyword arguments (line 162)
        kwargs_51094 = {}
        # Getting the type of 'self' (line 162)
        self_51092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 15), 'self', False)
        # Obtaining the member 'current_key_axes' of a type (line 162)
        current_key_axes_51093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 15), self_51092, 'current_key_axes')
        # Calling current_key_axes(args, kwargs) (line 162)
        current_key_axes_call_result_51095 = invoke(stypy.reporting.localization.Localization(__file__, 162, 15), current_key_axes_51093, *[], **kwargs_51094)
        
        # Obtaining the member '__getitem__' of a type (line 162)
        getitem___51096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 15), current_key_axes_call_result_51095, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 162)
        subscript_call_result_51097 = invoke(stypy.reporting.localization.Localization(__file__, 162, 15), getitem___51096, int_51091)
        
        # Assigning a type to the variable 'stypy_return_type' (line 162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 8), 'stypy_return_type', subscript_call_result_51097)
        
        # ################# End of '__call__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__call__' in the type store
        # Getting the type of 'stypy_return_type' (line 161)
        stypy_return_type_51098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51098)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__call__'
        return stypy_return_type_51098


    @norecursion
    def __contains__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__contains__'
        module_type_store = module_type_store.open_function_context('__contains__', 164, 4, False)
        # Assigning a type to the variable 'self' (line 165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesStack.__contains__.__dict__.__setitem__('stypy_localization', localization)
        AxesStack.__contains__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesStack.__contains__.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesStack.__contains__.__dict__.__setitem__('stypy_function_name', 'AxesStack.__contains__')
        AxesStack.__contains__.__dict__.__setitem__('stypy_param_names_list', ['a'])
        AxesStack.__contains__.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesStack.__contains__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesStack.__contains__.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesStack.__contains__.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesStack.__contains__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesStack.__contains__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesStack.__contains__', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__contains__', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__contains__(...)' code ##################

        
        # Getting the type of 'a' (line 165)
        a_51099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 15), 'a')
        
        # Call to as_list(...): (line 165)
        # Processing the call keyword arguments (line 165)
        kwargs_51102 = {}
        # Getting the type of 'self' (line 165)
        self_51100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 20), 'self', False)
        # Obtaining the member 'as_list' of a type (line 165)
        as_list_51101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 165, 20), self_51100, 'as_list')
        # Calling as_list(args, kwargs) (line 165)
        as_list_call_result_51103 = invoke(stypy.reporting.localization.Localization(__file__, 165, 20), as_list_51101, *[], **kwargs_51102)
        
        # Applying the binary operator 'in' (line 165)
        result_contains_51104 = python_operator(stypy.reporting.localization.Localization(__file__, 165, 15), 'in', a_51099, as_list_call_result_51103)
        
        # Assigning a type to the variable 'stypy_return_type' (line 165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 8), 'stypy_return_type', result_contains_51104)
        
        # ################# End of '__contains__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__contains__' in the type store
        # Getting the type of 'stypy_return_type' (line 164)
        stypy_return_type_51105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51105)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__contains__'
        return stypy_return_type_51105


# Assigning a type to the variable 'AxesStack' (line 59)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 59, 0), 'AxesStack', AxesStack)
# Declaration of the 'SubplotParams' class

class SubplotParams(object, ):
    unicode_51106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, (-1)), 'unicode', u'\n    A class to hold the parameters for a subplot\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 172)
        None_51107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 28), 'None')
        # Getting the type of 'None' (line 172)
        None_51108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 41), 'None')
        # Getting the type of 'None' (line 172)
        None_51109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 53), 'None')
        # Getting the type of 'None' (line 172)
        None_51110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 63), 'None')
        # Getting the type of 'None' (line 173)
        None_51111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 24), 'None')
        # Getting the type of 'None' (line 173)
        None_51112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 37), 'None')
        defaults = [None_51107, None_51108, None_51109, None_51110, None_51111, None_51112]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 172, 4, False)
        # Assigning a type to the variable 'self' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SubplotParams.__init__', ['left', 'bottom', 'right', 'top', 'wspace', 'hspace'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['left', 'bottom', 'right', 'top', 'wspace', 'hspace'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_51113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 199, (-1)), 'unicode', u'\n        All dimensions are fraction of the figure width or height.\n        All values default to their rc params\n\n        The following attributes are available\n\n        left  : 0.125\n            The left side of the subplots of the figure\n\n        right : 0.9\n            The right side of the subplots of the figure\n\n        bottom : 0.1\n            The bottom of the subplots of the figure\n\n        top : 0.9\n            The top of the subplots of the figure\n\n        wspace : 0.2\n            The amount of width reserved for blank space between subplots,\n            expressed as a fraction of the average axis width\n\n        hspace : 0.2\n            The amount of height reserved for white space between subplots,\n            expressed as a fraction of the average axis height\n        ')
        
        # Assigning a Name to a Attribute (line 201):
        
        # Assigning a Name to a Attribute (line 201):
        
        # Assigning a Name to a Attribute (line 201):
        # Getting the type of 'True' (line 201)
        True_51114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 24), 'True')
        # Getting the type of 'self' (line 201)
        self_51115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 8), 'self')
        # Setting the type of the member 'validate' of a type (line 201)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 201, 8), self_51115, 'validate', True_51114)
        
        # Call to update(...): (line 202)
        # Processing the call arguments (line 202)
        # Getting the type of 'left' (line 202)
        left_51118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 20), 'left', False)
        # Getting the type of 'bottom' (line 202)
        bottom_51119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 26), 'bottom', False)
        # Getting the type of 'right' (line 202)
        right_51120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 34), 'right', False)
        # Getting the type of 'top' (line 202)
        top_51121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 41), 'top', False)
        # Getting the type of 'wspace' (line 202)
        wspace_51122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 46), 'wspace', False)
        # Getting the type of 'hspace' (line 202)
        hspace_51123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 54), 'hspace', False)
        # Processing the call keyword arguments (line 202)
        kwargs_51124 = {}
        # Getting the type of 'self' (line 202)
        self_51116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 202)
        update_51117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 202, 8), self_51116, 'update')
        # Calling update(args, kwargs) (line 202)
        update_call_result_51125 = invoke(stypy.reporting.localization.Localization(__file__, 202, 8), update_51117, *[left_51118, bottom_51119, right_51120, top_51121, wspace_51122, hspace_51123], **kwargs_51124)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def update(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 204)
        None_51126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 26), 'None')
        # Getting the type of 'None' (line 204)
        None_51127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 39), 'None')
        # Getting the type of 'None' (line 204)
        None_51128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 51), 'None')
        # Getting the type of 'None' (line 204)
        None_51129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 61), 'None')
        # Getting the type of 'None' (line 205)
        None_51130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 22), 'None')
        # Getting the type of 'None' (line 205)
        None_51131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 35), 'None')
        defaults = [None_51126, None_51127, None_51128, None_51129, None_51130, None_51131]
        # Create a new context for function 'update'
        module_type_store = module_type_store.open_function_context('update', 204, 4, False)
        # Assigning a type to the variable 'self' (line 205)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SubplotParams.update.__dict__.__setitem__('stypy_localization', localization)
        SubplotParams.update.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SubplotParams.update.__dict__.__setitem__('stypy_type_store', module_type_store)
        SubplotParams.update.__dict__.__setitem__('stypy_function_name', 'SubplotParams.update')
        SubplotParams.update.__dict__.__setitem__('stypy_param_names_list', ['left', 'bottom', 'right', 'top', 'wspace', 'hspace'])
        SubplotParams.update.__dict__.__setitem__('stypy_varargs_param_name', None)
        SubplotParams.update.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SubplotParams.update.__dict__.__setitem__('stypy_call_defaults', defaults)
        SubplotParams.update.__dict__.__setitem__('stypy_call_varargs', varargs)
        SubplotParams.update.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SubplotParams.update.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SubplotParams.update', ['left', 'bottom', 'right', 'top', 'wspace', 'hspace'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'update', localization, ['left', 'bottom', 'right', 'top', 'wspace', 'hspace'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'update(...)' code ##################

        unicode_51132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 210, (-1)), 'unicode', u'\n        Update the current values.  If any kwarg is None, default to\n        the current value, if set, otherwise to rc\n\n        ')
        
        # Assigning a Call to a Name (line 212):
        
        # Assigning a Call to a Name (line 212):
        
        # Assigning a Call to a Name (line 212):
        
        # Call to getattr(...): (line 212)
        # Processing the call arguments (line 212)
        # Getting the type of 'self' (line 212)
        self_51134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 27), 'self', False)
        unicode_51135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 212, 33), 'unicode', u'left')
        # Getting the type of 'None' (line 212)
        None_51136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 41), 'None', False)
        # Processing the call keyword arguments (line 212)
        kwargs_51137 = {}
        # Getting the type of 'getattr' (line 212)
        getattr_51133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 19), 'getattr', False)
        # Calling getattr(args, kwargs) (line 212)
        getattr_call_result_51138 = invoke(stypy.reporting.localization.Localization(__file__, 212, 19), getattr_51133, *[self_51134, unicode_51135, None_51136], **kwargs_51137)
        
        # Assigning a type to the variable 'thisleft' (line 212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 8), 'thisleft', getattr_call_result_51138)
        
        # Assigning a Call to a Name (line 213):
        
        # Assigning a Call to a Name (line 213):
        
        # Assigning a Call to a Name (line 213):
        
        # Call to getattr(...): (line 213)
        # Processing the call arguments (line 213)
        # Getting the type of 'self' (line 213)
        self_51140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 28), 'self', False)
        unicode_51141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 213, 34), 'unicode', u'right')
        # Getting the type of 'None' (line 213)
        None_51142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 43), 'None', False)
        # Processing the call keyword arguments (line 213)
        kwargs_51143 = {}
        # Getting the type of 'getattr' (line 213)
        getattr_51139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 213, 20), 'getattr', False)
        # Calling getattr(args, kwargs) (line 213)
        getattr_call_result_51144 = invoke(stypy.reporting.localization.Localization(__file__, 213, 20), getattr_51139, *[self_51140, unicode_51141, None_51142], **kwargs_51143)
        
        # Assigning a type to the variable 'thisright' (line 213)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 213, 8), 'thisright', getattr_call_result_51144)
        
        # Assigning a Call to a Name (line 214):
        
        # Assigning a Call to a Name (line 214):
        
        # Assigning a Call to a Name (line 214):
        
        # Call to getattr(...): (line 214)
        # Processing the call arguments (line 214)
        # Getting the type of 'self' (line 214)
        self_51146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 26), 'self', False)
        unicode_51147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 214, 32), 'unicode', u'top')
        # Getting the type of 'None' (line 214)
        None_51148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 39), 'None', False)
        # Processing the call keyword arguments (line 214)
        kwargs_51149 = {}
        # Getting the type of 'getattr' (line 214)
        getattr_51145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 214, 18), 'getattr', False)
        # Calling getattr(args, kwargs) (line 214)
        getattr_call_result_51150 = invoke(stypy.reporting.localization.Localization(__file__, 214, 18), getattr_51145, *[self_51146, unicode_51147, None_51148], **kwargs_51149)
        
        # Assigning a type to the variable 'thistop' (line 214)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 214, 8), 'thistop', getattr_call_result_51150)
        
        # Assigning a Call to a Name (line 215):
        
        # Assigning a Call to a Name (line 215):
        
        # Assigning a Call to a Name (line 215):
        
        # Call to getattr(...): (line 215)
        # Processing the call arguments (line 215)
        # Getting the type of 'self' (line 215)
        self_51152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 29), 'self', False)
        unicode_51153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 215, 35), 'unicode', u'bottom')
        # Getting the type of 'None' (line 215)
        None_51154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 45), 'None', False)
        # Processing the call keyword arguments (line 215)
        kwargs_51155 = {}
        # Getting the type of 'getattr' (line 215)
        getattr_51151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 21), 'getattr', False)
        # Calling getattr(args, kwargs) (line 215)
        getattr_call_result_51156 = invoke(stypy.reporting.localization.Localization(__file__, 215, 21), getattr_51151, *[self_51152, unicode_51153, None_51154], **kwargs_51155)
        
        # Assigning a type to the variable 'thisbottom' (line 215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 8), 'thisbottom', getattr_call_result_51156)
        
        # Assigning a Call to a Name (line 216):
        
        # Assigning a Call to a Name (line 216):
        
        # Assigning a Call to a Name (line 216):
        
        # Call to getattr(...): (line 216)
        # Processing the call arguments (line 216)
        # Getting the type of 'self' (line 216)
        self_51158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 29), 'self', False)
        unicode_51159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 216, 35), 'unicode', u'wspace')
        # Getting the type of 'None' (line 216)
        None_51160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 45), 'None', False)
        # Processing the call keyword arguments (line 216)
        kwargs_51161 = {}
        # Getting the type of 'getattr' (line 216)
        getattr_51157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 216, 21), 'getattr', False)
        # Calling getattr(args, kwargs) (line 216)
        getattr_call_result_51162 = invoke(stypy.reporting.localization.Localization(__file__, 216, 21), getattr_51157, *[self_51158, unicode_51159, None_51160], **kwargs_51161)
        
        # Assigning a type to the variable 'thiswspace' (line 216)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 216, 8), 'thiswspace', getattr_call_result_51162)
        
        # Assigning a Call to a Name (line 217):
        
        # Assigning a Call to a Name (line 217):
        
        # Assigning a Call to a Name (line 217):
        
        # Call to getattr(...): (line 217)
        # Processing the call arguments (line 217)
        # Getting the type of 'self' (line 217)
        self_51164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 29), 'self', False)
        unicode_51165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 217, 35), 'unicode', u'hspace')
        # Getting the type of 'None' (line 217)
        None_51166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 45), 'None', False)
        # Processing the call keyword arguments (line 217)
        kwargs_51167 = {}
        # Getting the type of 'getattr' (line 217)
        getattr_51163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 21), 'getattr', False)
        # Calling getattr(args, kwargs) (line 217)
        getattr_call_result_51168 = invoke(stypy.reporting.localization.Localization(__file__, 217, 21), getattr_51163, *[self_51164, unicode_51165, None_51166], **kwargs_51167)
        
        # Assigning a type to the variable 'thishspace' (line 217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'thishspace', getattr_call_result_51168)
        
        # Call to _update_this(...): (line 219)
        # Processing the call arguments (line 219)
        unicode_51171 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 219, 26), 'unicode', u'left')
        # Getting the type of 'left' (line 219)
        left_51172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 34), 'left', False)
        # Processing the call keyword arguments (line 219)
        kwargs_51173 = {}
        # Getting the type of 'self' (line 219)
        self_51169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 8), 'self', False)
        # Obtaining the member '_update_this' of a type (line 219)
        _update_this_51170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 8), self_51169, '_update_this')
        # Calling _update_this(args, kwargs) (line 219)
        _update_this_call_result_51174 = invoke(stypy.reporting.localization.Localization(__file__, 219, 8), _update_this_51170, *[unicode_51171, left_51172], **kwargs_51173)
        
        
        # Call to _update_this(...): (line 220)
        # Processing the call arguments (line 220)
        unicode_51177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, 26), 'unicode', u'right')
        # Getting the type of 'right' (line 220)
        right_51178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 35), 'right', False)
        # Processing the call keyword arguments (line 220)
        kwargs_51179 = {}
        # Getting the type of 'self' (line 220)
        self_51175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 220, 8), 'self', False)
        # Obtaining the member '_update_this' of a type (line 220)
        _update_this_51176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 220, 8), self_51175, '_update_this')
        # Calling _update_this(args, kwargs) (line 220)
        _update_this_call_result_51180 = invoke(stypy.reporting.localization.Localization(__file__, 220, 8), _update_this_51176, *[unicode_51177, right_51178], **kwargs_51179)
        
        
        # Call to _update_this(...): (line 221)
        # Processing the call arguments (line 221)
        unicode_51183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 221, 26), 'unicode', u'bottom')
        # Getting the type of 'bottom' (line 221)
        bottom_51184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 36), 'bottom', False)
        # Processing the call keyword arguments (line 221)
        kwargs_51185 = {}
        # Getting the type of 'self' (line 221)
        self_51181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'self', False)
        # Obtaining the member '_update_this' of a type (line 221)
        _update_this_51182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 8), self_51181, '_update_this')
        # Calling _update_this(args, kwargs) (line 221)
        _update_this_call_result_51186 = invoke(stypy.reporting.localization.Localization(__file__, 221, 8), _update_this_51182, *[unicode_51183, bottom_51184], **kwargs_51185)
        
        
        # Call to _update_this(...): (line 222)
        # Processing the call arguments (line 222)
        unicode_51189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 222, 26), 'unicode', u'top')
        # Getting the type of 'top' (line 222)
        top_51190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 33), 'top', False)
        # Processing the call keyword arguments (line 222)
        kwargs_51191 = {}
        # Getting the type of 'self' (line 222)
        self_51187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 8), 'self', False)
        # Obtaining the member '_update_this' of a type (line 222)
        _update_this_51188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 8), self_51187, '_update_this')
        # Calling _update_this(args, kwargs) (line 222)
        _update_this_call_result_51192 = invoke(stypy.reporting.localization.Localization(__file__, 222, 8), _update_this_51188, *[unicode_51189, top_51190], **kwargs_51191)
        
        
        # Call to _update_this(...): (line 223)
        # Processing the call arguments (line 223)
        unicode_51195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 223, 26), 'unicode', u'wspace')
        # Getting the type of 'wspace' (line 223)
        wspace_51196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 36), 'wspace', False)
        # Processing the call keyword arguments (line 223)
        kwargs_51197 = {}
        # Getting the type of 'self' (line 223)
        self_51193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 8), 'self', False)
        # Obtaining the member '_update_this' of a type (line 223)
        _update_this_51194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 8), self_51193, '_update_this')
        # Calling _update_this(args, kwargs) (line 223)
        _update_this_call_result_51198 = invoke(stypy.reporting.localization.Localization(__file__, 223, 8), _update_this_51194, *[unicode_51195, wspace_51196], **kwargs_51197)
        
        
        # Call to _update_this(...): (line 224)
        # Processing the call arguments (line 224)
        unicode_51201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 224, 26), 'unicode', u'hspace')
        # Getting the type of 'hspace' (line 224)
        hspace_51202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 36), 'hspace', False)
        # Processing the call keyword arguments (line 224)
        kwargs_51203 = {}
        # Getting the type of 'self' (line 224)
        self_51199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 8), 'self', False)
        # Obtaining the member '_update_this' of a type (line 224)
        _update_this_51200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 224, 8), self_51199, '_update_this')
        # Calling _update_this(args, kwargs) (line 224)
        _update_this_call_result_51204 = invoke(stypy.reporting.localization.Localization(__file__, 224, 8), _update_this_51200, *[unicode_51201, hspace_51202], **kwargs_51203)
        

        @norecursion
        def reset(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'reset'
            module_type_store = module_type_store.open_function_context('reset', 226, 8, False)
            
            # Passed parameters checking function
            reset.stypy_localization = localization
            reset.stypy_type_of_self = None
            reset.stypy_type_store = module_type_store
            reset.stypy_function_name = 'reset'
            reset.stypy_param_names_list = []
            reset.stypy_varargs_param_name = None
            reset.stypy_kwargs_param_name = None
            reset.stypy_call_defaults = defaults
            reset.stypy_call_varargs = varargs
            reset.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'reset', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'reset', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'reset(...)' code ##################

            
            # Assigning a Name to a Attribute (line 227):
            
            # Assigning a Name to a Attribute (line 227):
            
            # Assigning a Name to a Attribute (line 227):
            # Getting the type of 'thisleft' (line 227)
            thisleft_51205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 24), 'thisleft')
            # Getting the type of 'self' (line 227)
            self_51206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 12), 'self')
            # Setting the type of the member 'left' of a type (line 227)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 12), self_51206, 'left', thisleft_51205)
            
            # Assigning a Name to a Attribute (line 228):
            
            # Assigning a Name to a Attribute (line 228):
            
            # Assigning a Name to a Attribute (line 228):
            # Getting the type of 'thisright' (line 228)
            thisright_51207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 25), 'thisright')
            # Getting the type of 'self' (line 228)
            self_51208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 12), 'self')
            # Setting the type of the member 'right' of a type (line 228)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 12), self_51208, 'right', thisright_51207)
            
            # Assigning a Name to a Attribute (line 229):
            
            # Assigning a Name to a Attribute (line 229):
            
            # Assigning a Name to a Attribute (line 229):
            # Getting the type of 'thistop' (line 229)
            thistop_51209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 23), 'thistop')
            # Getting the type of 'self' (line 229)
            self_51210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 12), 'self')
            # Setting the type of the member 'top' of a type (line 229)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 12), self_51210, 'top', thistop_51209)
            
            # Assigning a Name to a Attribute (line 230):
            
            # Assigning a Name to a Attribute (line 230):
            
            # Assigning a Name to a Attribute (line 230):
            # Getting the type of 'thisbottom' (line 230)
            thisbottom_51211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 26), 'thisbottom')
            # Getting the type of 'self' (line 230)
            self_51212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 12), 'self')
            # Setting the type of the member 'bottom' of a type (line 230)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 12), self_51212, 'bottom', thisbottom_51211)
            
            # Assigning a Name to a Attribute (line 231):
            
            # Assigning a Name to a Attribute (line 231):
            
            # Assigning a Name to a Attribute (line 231):
            # Getting the type of 'thiswspace' (line 231)
            thiswspace_51213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 26), 'thiswspace')
            # Getting the type of 'self' (line 231)
            self_51214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 12), 'self')
            # Setting the type of the member 'wspace' of a type (line 231)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 12), self_51214, 'wspace', thiswspace_51213)
            
            # Assigning a Name to a Attribute (line 232):
            
            # Assigning a Name to a Attribute (line 232):
            
            # Assigning a Name to a Attribute (line 232):
            # Getting the type of 'thishspace' (line 232)
            thishspace_51215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 26), 'thishspace')
            # Getting the type of 'self' (line 232)
            self_51216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 12), 'self')
            # Setting the type of the member 'hspace' of a type (line 232)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 12), self_51216, 'hspace', thishspace_51215)
            
            # ################# End of 'reset(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'reset' in the type store
            # Getting the type of 'stypy_return_type' (line 226)
            stypy_return_type_51217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_51217)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'reset'
            return stypy_return_type_51217

        # Assigning a type to the variable 'reset' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 8), 'reset', reset)
        
        # Getting the type of 'self' (line 234)
        self_51218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 11), 'self')
        # Obtaining the member 'validate' of a type (line 234)
        validate_51219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 234, 11), self_51218, 'validate')
        # Testing the type of an if condition (line 234)
        if_condition_51220 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 234, 8), validate_51219)
        # Assigning a type to the variable 'if_condition_51220' (line 234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 8), 'if_condition_51220', if_condition_51220)
        # SSA begins for if statement (line 234)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 235)
        self_51221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 15), 'self')
        # Obtaining the member 'left' of a type (line 235)
        left_51222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 15), self_51221, 'left')
        # Getting the type of 'self' (line 235)
        self_51223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 28), 'self')
        # Obtaining the member 'right' of a type (line 235)
        right_51224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 28), self_51223, 'right')
        # Applying the binary operator '>=' (line 235)
        result_ge_51225 = python_operator(stypy.reporting.localization.Localization(__file__, 235, 15), '>=', left_51222, right_51224)
        
        # Testing the type of an if condition (line 235)
        if_condition_51226 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 235, 12), result_ge_51225)
        # Assigning a type to the variable 'if_condition_51226' (line 235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 12), 'if_condition_51226', if_condition_51226)
        # SSA begins for if statement (line 235)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to reset(...): (line 236)
        # Processing the call keyword arguments (line 236)
        kwargs_51228 = {}
        # Getting the type of 'reset' (line 236)
        reset_51227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 236, 16), 'reset', False)
        # Calling reset(args, kwargs) (line 236)
        reset_call_result_51229 = invoke(stypy.reporting.localization.Localization(__file__, 236, 16), reset_51227, *[], **kwargs_51228)
        
        
        # Call to ValueError(...): (line 237)
        # Processing the call arguments (line 237)
        unicode_51231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 237, 33), 'unicode', u'left cannot be >= right')
        # Processing the call keyword arguments (line 237)
        kwargs_51232 = {}
        # Getting the type of 'ValueError' (line 237)
        ValueError_51230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 237)
        ValueError_call_result_51233 = invoke(stypy.reporting.localization.Localization(__file__, 237, 22), ValueError_51230, *[unicode_51231], **kwargs_51232)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 237, 16), ValueError_call_result_51233, 'raise parameter', BaseException)
        # SSA join for if statement (line 235)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 239)
        self_51234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 15), 'self')
        # Obtaining the member 'bottom' of a type (line 239)
        bottom_51235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 15), self_51234, 'bottom')
        # Getting the type of 'self' (line 239)
        self_51236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 239, 30), 'self')
        # Obtaining the member 'top' of a type (line 239)
        top_51237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 239, 30), self_51236, 'top')
        # Applying the binary operator '>=' (line 239)
        result_ge_51238 = python_operator(stypy.reporting.localization.Localization(__file__, 239, 15), '>=', bottom_51235, top_51237)
        
        # Testing the type of an if condition (line 239)
        if_condition_51239 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 239, 12), result_ge_51238)
        # Assigning a type to the variable 'if_condition_51239' (line 239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 239, 12), 'if_condition_51239', if_condition_51239)
        # SSA begins for if statement (line 239)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to reset(...): (line 240)
        # Processing the call keyword arguments (line 240)
        kwargs_51241 = {}
        # Getting the type of 'reset' (line 240)
        reset_51240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 16), 'reset', False)
        # Calling reset(args, kwargs) (line 240)
        reset_call_result_51242 = invoke(stypy.reporting.localization.Localization(__file__, 240, 16), reset_51240, *[], **kwargs_51241)
        
        
        # Call to ValueError(...): (line 241)
        # Processing the call arguments (line 241)
        unicode_51244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 241, 33), 'unicode', u'bottom cannot be >= top')
        # Processing the call keyword arguments (line 241)
        kwargs_51245 = {}
        # Getting the type of 'ValueError' (line 241)
        ValueError_51243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 241)
        ValueError_call_result_51246 = invoke(stypy.reporting.localization.Localization(__file__, 241, 22), ValueError_51243, *[unicode_51244], **kwargs_51245)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 241, 16), ValueError_call_result_51246, 'raise parameter', BaseException)
        # SSA join for if statement (line 239)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 234)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'update(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'update' in the type store
        # Getting the type of 'stypy_return_type' (line 204)
        stypy_return_type_51247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51247)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'update'
        return stypy_return_type_51247


    @norecursion
    def _update_this(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_update_this'
        module_type_store = module_type_store.open_function_context('_update_this', 243, 4, False)
        # Assigning a type to the variable 'self' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        SubplotParams._update_this.__dict__.__setitem__('stypy_localization', localization)
        SubplotParams._update_this.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        SubplotParams._update_this.__dict__.__setitem__('stypy_type_store', module_type_store)
        SubplotParams._update_this.__dict__.__setitem__('stypy_function_name', 'SubplotParams._update_this')
        SubplotParams._update_this.__dict__.__setitem__('stypy_param_names_list', ['s', 'val'])
        SubplotParams._update_this.__dict__.__setitem__('stypy_varargs_param_name', None)
        SubplotParams._update_this.__dict__.__setitem__('stypy_kwargs_param_name', None)
        SubplotParams._update_this.__dict__.__setitem__('stypy_call_defaults', defaults)
        SubplotParams._update_this.__dict__.__setitem__('stypy_call_varargs', varargs)
        SubplotParams._update_this.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        SubplotParams._update_this.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'SubplotParams._update_this', ['s', 'val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_update_this', localization, ['s', 'val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_update_this(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 244)
        # Getting the type of 'val' (line 244)
        val_51248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 11), 'val')
        # Getting the type of 'None' (line 244)
        None_51249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 244, 18), 'None')
        
        (may_be_51250, more_types_in_union_51251) = may_be_none(val_51248, None_51249)

        if may_be_51250:

            if more_types_in_union_51251:
                # Runtime conditional SSA (line 244)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 245):
            
            # Assigning a Call to a Name (line 245):
            
            # Assigning a Call to a Name (line 245):
            
            # Call to getattr(...): (line 245)
            # Processing the call arguments (line 245)
            # Getting the type of 'self' (line 245)
            self_51253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 26), 'self', False)
            # Getting the type of 's' (line 245)
            s_51254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 32), 's', False)
            # Getting the type of 'None' (line 245)
            None_51255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 35), 'None', False)
            # Processing the call keyword arguments (line 245)
            kwargs_51256 = {}
            # Getting the type of 'getattr' (line 245)
            getattr_51252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 18), 'getattr', False)
            # Calling getattr(args, kwargs) (line 245)
            getattr_call_result_51257 = invoke(stypy.reporting.localization.Localization(__file__, 245, 18), getattr_51252, *[self_51253, s_51254, None_51255], **kwargs_51256)
            
            # Assigning a type to the variable 'val' (line 245)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 245, 12), 'val', getattr_call_result_51257)
            
            # Type idiom detected: calculating its left and rigth part (line 246)
            # Getting the type of 'val' (line 246)
            val_51258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 15), 'val')
            # Getting the type of 'None' (line 246)
            None_51259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 22), 'None')
            
            (may_be_51260, more_types_in_union_51261) = may_be_none(val_51258, None_51259)

            if may_be_51260:

                if more_types_in_union_51261:
                    # Runtime conditional SSA (line 246)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Assigning a BinOp to a Name (line 247):
                
                # Assigning a BinOp to a Name (line 247):
                
                # Assigning a BinOp to a Name (line 247):
                unicode_51262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, 22), 'unicode', u'figure.subplot.')
                # Getting the type of 's' (line 247)
                s_51263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 247, 42), 's')
                # Applying the binary operator '+' (line 247)
                result_add_51264 = python_operator(stypy.reporting.localization.Localization(__file__, 247, 22), '+', unicode_51262, s_51263)
                
                # Assigning a type to the variable 'key' (line 247)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 247, 16), 'key', result_add_51264)
                
                # Assigning a Subscript to a Name (line 248):
                
                # Assigning a Subscript to a Name (line 248):
                
                # Assigning a Subscript to a Name (line 248):
                
                # Obtaining the type of the subscript
                # Getting the type of 'key' (line 248)
                key_51265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 31), 'key')
                # Getting the type of 'rcParams' (line 248)
                rcParams_51266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 22), 'rcParams')
                # Obtaining the member '__getitem__' of a type (line 248)
                getitem___51267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 22), rcParams_51266, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 248)
                subscript_call_result_51268 = invoke(stypy.reporting.localization.Localization(__file__, 248, 22), getitem___51267, key_51265)
                
                # Assigning a type to the variable 'val' (line 248)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 16), 'val', subscript_call_result_51268)

                if more_types_in_union_51261:
                    # SSA join for if statement (line 246)
                    module_type_store = module_type_store.join_ssa_context()


            

            if more_types_in_union_51251:
                # SSA join for if statement (line 244)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to setattr(...): (line 250)
        # Processing the call arguments (line 250)
        # Getting the type of 'self' (line 250)
        self_51270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 16), 'self', False)
        # Getting the type of 's' (line 250)
        s_51271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 22), 's', False)
        # Getting the type of 'val' (line 250)
        val_51272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 25), 'val', False)
        # Processing the call keyword arguments (line 250)
        kwargs_51273 = {}
        # Getting the type of 'setattr' (line 250)
        setattr_51269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 8), 'setattr', False)
        # Calling setattr(args, kwargs) (line 250)
        setattr_call_result_51274 = invoke(stypy.reporting.localization.Localization(__file__, 250, 8), setattr_51269, *[self_51270, s_51271, val_51272], **kwargs_51273)
        
        
        # ################# End of '_update_this(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_update_this' in the type store
        # Getting the type of 'stypy_return_type' (line 243)
        stypy_return_type_51275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51275)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_update_this'
        return stypy_return_type_51275


# Assigning a type to the variable 'SubplotParams' (line 168)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 0), 'SubplotParams', SubplotParams)
# Declaration of the 'Figure' class
# Getting the type of 'Artist' (line 253)
Artist_51276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 13), 'Artist')

class Figure(Artist_51276, ):
    unicode_51277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 271, (-1)), 'unicode', u"\n    The Figure instance supports callbacks through a *callbacks*\n    attribute which is a :class:`matplotlib.cbook.CallbackRegistry`\n    instance.  The events you can connect to are 'dpi_changed', and\n    the callback will be called with ``func(fig)`` where fig is the\n    :class:`Figure` instance.\n\n    *patch*\n       The figure patch is drawn by a\n       :class:`matplotlib.patches.Rectangle` instance\n\n    *suppressComposite*\n       For multiple figure images, the figure will make composite\n       images depending on the renderer option_image_nocomposite\n       function.  If suppressComposite is True|False, this will\n       override the renderer.\n    ")

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 273, 4, False)
        # Assigning a type to the variable 'self' (line 274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        Figure.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.stypy__str__.__dict__.__setitem__('stypy_function_name', 'Figure.stypy__str__')
        Figure.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_51278 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 274, 15), 'unicode', u'Figure(%gx%g)')
        
        # Call to tuple(...): (line 274)
        # Processing the call arguments (line 274)
        # Getting the type of 'self' (line 274)
        self_51280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 39), 'self', False)
        # Obtaining the member 'bbox' of a type (line 274)
        bbox_51281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 39), self_51280, 'bbox')
        # Obtaining the member 'size' of a type (line 274)
        size_51282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 274, 39), bbox_51281, 'size')
        # Processing the call keyword arguments (line 274)
        kwargs_51283 = {}
        # Getting the type of 'tuple' (line 274)
        tuple_51279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 33), 'tuple', False)
        # Calling tuple(args, kwargs) (line 274)
        tuple_call_result_51284 = invoke(stypy.reporting.localization.Localization(__file__, 274, 33), tuple_51279, *[size_51282], **kwargs_51283)
        
        # Applying the binary operator '%' (line 274)
        result_mod_51285 = python_operator(stypy.reporting.localization.Localization(__file__, 274, 15), '%', unicode_51278, tuple_call_result_51284)
        
        # Assigning a type to the variable 'stypy_return_type' (line 274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 8), 'stypy_return_type', result_mod_51285)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 273)
        stypy_return_type_51286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51286)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_51286


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 277)
        None_51287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 25), 'None')
        # Getting the type of 'None' (line 278)
        None_51288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 21), 'None')
        # Getting the type of 'None' (line 279)
        None_51289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 27), 'None')
        # Getting the type of 'None' (line 280)
        None_51290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 280, 27), 'None')
        float_51291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 281, 27), 'float')
        # Getting the type of 'None' (line 282)
        None_51292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 25), 'None')
        # Getting the type of 'None' (line 283)
        None_51293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 283, 29), 'None')
        # Getting the type of 'None' (line 284)
        None_51294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 30), 'None')
        defaults = [None_51287, None_51288, None_51289, None_51290, float_51291, None_51292, None_51293, None_51294]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 276, 4, False)
        # Assigning a type to the variable 'self' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.__init__', ['figsize', 'dpi', 'facecolor', 'edgecolor', 'linewidth', 'frameon', 'subplotpars', 'tight_layout'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['figsize', 'dpi', 'facecolor', 'edgecolor', 'linewidth', 'frameon', 'subplotpars', 'tight_layout'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_51295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 315, (-1)), 'unicode', u'\n        *figsize*\n            w,h tuple in inches\n\n        *dpi*\n            Dots per inch\n\n        *facecolor*\n            The figure patch facecolor; defaults to rc ``figure.facecolor``\n\n        *edgecolor*\n            The figure patch edge color; defaults to rc ``figure.edgecolor``\n\n        *linewidth*\n            The figure patch edge linewidth; the default linewidth of the frame\n\n        *frameon*\n            If *False*, suppress drawing the figure frame\n\n        *subplotpars*\n            A :class:`SubplotParams` instance, defaults to rc\n\n        *tight_layout*\n            If *False* use *subplotpars*; if *True* adjust subplot\n            parameters using :meth:`tight_layout` with default padding.\n            When providing a dict containing the keys `pad`, `w_pad`, `h_pad`\n            and `rect`, the default :meth:`tight_layout` paddings will be\n            overridden.\n            Defaults to rc ``figure.autolayout``.\n        ')
        
        # Call to __init__(...): (line 316)
        # Processing the call arguments (line 316)
        # Getting the type of 'self' (line 316)
        self_51298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 24), 'self', False)
        # Processing the call keyword arguments (line 316)
        kwargs_51299 = {}
        # Getting the type of 'Artist' (line 316)
        Artist_51296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'Artist', False)
        # Obtaining the member '__init__' of a type (line 316)
        init___51297 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 316, 8), Artist_51296, '__init__')
        # Calling __init__(args, kwargs) (line 316)
        init___call_result_51300 = invoke(stypy.reporting.localization.Localization(__file__, 316, 8), init___51297, *[self_51298], **kwargs_51299)
        
        # Deleting a member
        # Getting the type of 'self' (line 321)
        self_51301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 8), 'self')
        module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 321, 8), self_51301, '_axes')
        
        # Assigning a Call to a Attribute (line 322):
        
        # Assigning a Call to a Attribute (line 322):
        
        # Assigning a Call to a Attribute (line 322):
        
        # Call to CallbackRegistry(...): (line 322)
        # Processing the call keyword arguments (line 322)
        kwargs_51304 = {}
        # Getting the type of 'cbook' (line 322)
        cbook_51302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 25), 'cbook', False)
        # Obtaining the member 'CallbackRegistry' of a type (line 322)
        CallbackRegistry_51303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 25), cbook_51302, 'CallbackRegistry')
        # Calling CallbackRegistry(args, kwargs) (line 322)
        CallbackRegistry_call_result_51305 = invoke(stypy.reporting.localization.Localization(__file__, 322, 25), CallbackRegistry_51303, *[], **kwargs_51304)
        
        # Getting the type of 'self' (line 322)
        self_51306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 'self')
        # Setting the type of the member 'callbacks' of a type (line 322)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 322, 8), self_51306, 'callbacks', CallbackRegistry_call_result_51305)
        
        # Type idiom detected: calculating its left and rigth part (line 324)
        # Getting the type of 'figsize' (line 324)
        figsize_51307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 11), 'figsize')
        # Getting the type of 'None' (line 324)
        None_51308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 22), 'None')
        
        (may_be_51309, more_types_in_union_51310) = may_be_none(figsize_51307, None_51308)

        if may_be_51309:

            if more_types_in_union_51310:
                # Runtime conditional SSA (line 324)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 325):
            
            # Assigning a Subscript to a Name (line 325):
            
            # Assigning a Subscript to a Name (line 325):
            
            # Obtaining the type of the subscript
            unicode_51311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 325, 31), 'unicode', u'figure.figsize')
            # Getting the type of 'rcParams' (line 325)
            rcParams_51312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 22), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 325)
            getitem___51313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 22), rcParams_51312, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 325)
            subscript_call_result_51314 = invoke(stypy.reporting.localization.Localization(__file__, 325, 22), getitem___51313, unicode_51311)
            
            # Assigning a type to the variable 'figsize' (line 325)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 12), 'figsize', subscript_call_result_51314)

            if more_types_in_union_51310:
                # SSA join for if statement (line 324)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 326)
        # Getting the type of 'dpi' (line 326)
        dpi_51315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 11), 'dpi')
        # Getting the type of 'None' (line 326)
        None_51316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 18), 'None')
        
        (may_be_51317, more_types_in_union_51318) = may_be_none(dpi_51315, None_51316)

        if may_be_51317:

            if more_types_in_union_51318:
                # Runtime conditional SSA (line 326)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 327):
            
            # Assigning a Subscript to a Name (line 327):
            
            # Assigning a Subscript to a Name (line 327):
            
            # Obtaining the type of the subscript
            unicode_51319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 327, 27), 'unicode', u'figure.dpi')
            # Getting the type of 'rcParams' (line 327)
            rcParams_51320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 18), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 327)
            getitem___51321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 18), rcParams_51320, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 327)
            subscript_call_result_51322 = invoke(stypy.reporting.localization.Localization(__file__, 327, 18), getitem___51321, unicode_51319)
            
            # Assigning a type to the variable 'dpi' (line 327)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 12), 'dpi', subscript_call_result_51322)

            if more_types_in_union_51318:
                # SSA join for if statement (line 326)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 328)
        # Getting the type of 'facecolor' (line 328)
        facecolor_51323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 11), 'facecolor')
        # Getting the type of 'None' (line 328)
        None_51324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 24), 'None')
        
        (may_be_51325, more_types_in_union_51326) = may_be_none(facecolor_51323, None_51324)

        if may_be_51325:

            if more_types_in_union_51326:
                # Runtime conditional SSA (line 328)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 329):
            
            # Assigning a Subscript to a Name (line 329):
            
            # Assigning a Subscript to a Name (line 329):
            
            # Obtaining the type of the subscript
            unicode_51327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 329, 33), 'unicode', u'figure.facecolor')
            # Getting the type of 'rcParams' (line 329)
            rcParams_51328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 24), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 329)
            getitem___51329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 329, 24), rcParams_51328, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 329)
            subscript_call_result_51330 = invoke(stypy.reporting.localization.Localization(__file__, 329, 24), getitem___51329, unicode_51327)
            
            # Assigning a type to the variable 'facecolor' (line 329)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 12), 'facecolor', subscript_call_result_51330)

            if more_types_in_union_51326:
                # SSA join for if statement (line 328)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 330)
        # Getting the type of 'edgecolor' (line 330)
        edgecolor_51331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 11), 'edgecolor')
        # Getting the type of 'None' (line 330)
        None_51332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 24), 'None')
        
        (may_be_51333, more_types_in_union_51334) = may_be_none(edgecolor_51331, None_51332)

        if may_be_51333:

            if more_types_in_union_51334:
                # Runtime conditional SSA (line 330)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 331):
            
            # Assigning a Subscript to a Name (line 331):
            
            # Assigning a Subscript to a Name (line 331):
            
            # Obtaining the type of the subscript
            unicode_51335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 331, 33), 'unicode', u'figure.edgecolor')
            # Getting the type of 'rcParams' (line 331)
            rcParams_51336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 24), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 331)
            getitem___51337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 24), rcParams_51336, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 331)
            subscript_call_result_51338 = invoke(stypy.reporting.localization.Localization(__file__, 331, 24), getitem___51337, unicode_51335)
            
            # Assigning a type to the variable 'edgecolor' (line 331)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 12), 'edgecolor', subscript_call_result_51338)

            if more_types_in_union_51334:
                # SSA join for if statement (line 330)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 332)
        # Getting the type of 'frameon' (line 332)
        frameon_51339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 11), 'frameon')
        # Getting the type of 'None' (line 332)
        None_51340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 22), 'None')
        
        (may_be_51341, more_types_in_union_51342) = may_be_none(frameon_51339, None_51340)

        if may_be_51341:

            if more_types_in_union_51342:
                # Runtime conditional SSA (line 332)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 333):
            
            # Assigning a Subscript to a Name (line 333):
            
            # Assigning a Subscript to a Name (line 333):
            
            # Obtaining the type of the subscript
            unicode_51343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 333, 31), 'unicode', u'figure.frameon')
            # Getting the type of 'rcParams' (line 333)
            rcParams_51344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 22), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 333)
            getitem___51345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 22), rcParams_51344, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 333)
            subscript_call_result_51346 = invoke(stypy.reporting.localization.Localization(__file__, 333, 22), getitem___51345, unicode_51343)
            
            # Assigning a type to the variable 'frameon' (line 333)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 333, 12), 'frameon', subscript_call_result_51346)

            if more_types_in_union_51342:
                # SSA join for if statement (line 332)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to all(...): (line 335)
        # Processing the call keyword arguments (line 335)
        kwargs_51353 = {}
        
        # Call to isfinite(...): (line 335)
        # Processing the call arguments (line 335)
        # Getting the type of 'figsize' (line 335)
        figsize_51349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 27), 'figsize', False)
        # Processing the call keyword arguments (line 335)
        kwargs_51350 = {}
        # Getting the type of 'np' (line 335)
        np_51347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 335, 15), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 335)
        isfinite_51348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 15), np_51347, 'isfinite')
        # Calling isfinite(args, kwargs) (line 335)
        isfinite_call_result_51351 = invoke(stypy.reporting.localization.Localization(__file__, 335, 15), isfinite_51348, *[figsize_51349], **kwargs_51350)
        
        # Obtaining the member 'all' of a type (line 335)
        all_51352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 335, 15), isfinite_call_result_51351, 'all')
        # Calling all(args, kwargs) (line 335)
        all_call_result_51354 = invoke(stypy.reporting.localization.Localization(__file__, 335, 15), all_51352, *[], **kwargs_51353)
        
        # Applying the 'not' unary operator (line 335)
        result_not__51355 = python_operator(stypy.reporting.localization.Localization(__file__, 335, 11), 'not', all_call_result_51354)
        
        # Testing the type of an if condition (line 335)
        if_condition_51356 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 335, 8), result_not__51355)
        # Assigning a type to the variable 'if_condition_51356' (line 335)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 335, 8), 'if_condition_51356', if_condition_51356)
        # SSA begins for if statement (line 335)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 336)
        # Processing the call arguments (line 336)
        
        # Call to format(...): (line 336)
        # Processing the call arguments (line 336)
        # Getting the type of 'figsize' (line 337)
        figsize_51360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 337, 41), 'figsize', False)
        # Processing the call keyword arguments (line 336)
        kwargs_51361 = {}
        unicode_51358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 336, 29), 'unicode', u'figure size must be finite not {}')
        # Obtaining the member 'format' of a type (line 336)
        format_51359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 336, 29), unicode_51358, 'format')
        # Calling format(args, kwargs) (line 336)
        format_call_result_51362 = invoke(stypy.reporting.localization.Localization(__file__, 336, 29), format_51359, *[figsize_51360], **kwargs_51361)
        
        # Processing the call keyword arguments (line 336)
        kwargs_51363 = {}
        # Getting the type of 'ValueError' (line 336)
        ValueError_51357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 336, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 336)
        ValueError_call_result_51364 = invoke(stypy.reporting.localization.Localization(__file__, 336, 18), ValueError_51357, *[format_call_result_51362], **kwargs_51363)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 336, 12), ValueError_call_result_51364, 'raise parameter', BaseException)
        # SSA join for if statement (line 335)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 338):
        
        # Assigning a Call to a Attribute (line 338):
        
        # Assigning a Call to a Attribute (line 338):
        
        # Call to from_bounds(...): (line 338)
        # Processing the call arguments (line 338)
        int_51367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 338, 44), 'int')
        int_51368 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 338, 47), 'int')
        # Getting the type of 'figsize' (line 338)
        figsize_51369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 51), 'figsize', False)
        # Processing the call keyword arguments (line 338)
        kwargs_51370 = {}
        # Getting the type of 'Bbox' (line 338)
        Bbox_51365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 27), 'Bbox', False)
        # Obtaining the member 'from_bounds' of a type (line 338)
        from_bounds_51366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 27), Bbox_51365, 'from_bounds')
        # Calling from_bounds(args, kwargs) (line 338)
        from_bounds_call_result_51371 = invoke(stypy.reporting.localization.Localization(__file__, 338, 27), from_bounds_51366, *[int_51367, int_51368, figsize_51369], **kwargs_51370)
        
        # Getting the type of 'self' (line 338)
        self_51372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 8), 'self')
        # Setting the type of the member 'bbox_inches' of a type (line 338)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 338, 8), self_51372, 'bbox_inches', from_bounds_call_result_51371)
        
        # Assigning a Call to a Attribute (line 340):
        
        # Assigning a Call to a Attribute (line 340):
        
        # Assigning a Call to a Attribute (line 340):
        
        # Call to scale(...): (line 340)
        # Processing the call arguments (line 340)
        # Getting the type of 'dpi' (line 340)
        dpi_51377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 48), 'dpi', False)
        # Getting the type of 'dpi' (line 340)
        dpi_51378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 53), 'dpi', False)
        # Processing the call keyword arguments (line 340)
        kwargs_51379 = {}
        
        # Call to Affine2D(...): (line 340)
        # Processing the call keyword arguments (line 340)
        kwargs_51374 = {}
        # Getting the type of 'Affine2D' (line 340)
        Affine2D_51373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 31), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 340)
        Affine2D_call_result_51375 = invoke(stypy.reporting.localization.Localization(__file__, 340, 31), Affine2D_51373, *[], **kwargs_51374)
        
        # Obtaining the member 'scale' of a type (line 340)
        scale_51376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 31), Affine2D_call_result_51375, 'scale')
        # Calling scale(args, kwargs) (line 340)
        scale_call_result_51380 = invoke(stypy.reporting.localization.Localization(__file__, 340, 31), scale_51376, *[dpi_51377, dpi_51378], **kwargs_51379)
        
        # Getting the type of 'self' (line 340)
        self_51381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 8), 'self')
        # Setting the type of the member 'dpi_scale_trans' of a type (line 340)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 8), self_51381, 'dpi_scale_trans', scale_call_result_51380)
        
        # Assigning a Name to a Attribute (line 342):
        
        # Assigning a Name to a Attribute (line 342):
        
        # Assigning a Name to a Attribute (line 342):
        # Getting the type of 'dpi' (line 342)
        dpi_51382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 20), 'dpi')
        # Getting the type of 'self' (line 342)
        self_51383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 8), 'self')
        # Setting the type of the member '_dpi' of a type (line 342)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 8), self_51383, '_dpi', dpi_51382)
        
        # Assigning a Call to a Attribute (line 343):
        
        # Assigning a Call to a Attribute (line 343):
        
        # Assigning a Call to a Attribute (line 343):
        
        # Call to TransformedBbox(...): (line 343)
        # Processing the call arguments (line 343)
        # Getting the type of 'self' (line 343)
        self_51385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 36), 'self', False)
        # Obtaining the member 'bbox_inches' of a type (line 343)
        bbox_inches_51386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 36), self_51385, 'bbox_inches')
        # Getting the type of 'self' (line 343)
        self_51387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 54), 'self', False)
        # Obtaining the member 'dpi_scale_trans' of a type (line 343)
        dpi_scale_trans_51388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 54), self_51387, 'dpi_scale_trans')
        # Processing the call keyword arguments (line 343)
        kwargs_51389 = {}
        # Getting the type of 'TransformedBbox' (line 343)
        TransformedBbox_51384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 20), 'TransformedBbox', False)
        # Calling TransformedBbox(args, kwargs) (line 343)
        TransformedBbox_call_result_51390 = invoke(stypy.reporting.localization.Localization(__file__, 343, 20), TransformedBbox_51384, *[bbox_inches_51386, dpi_scale_trans_51388], **kwargs_51389)
        
        # Getting the type of 'self' (line 343)
        self_51391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'self')
        # Setting the type of the member 'bbox' of a type (line 343)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 343, 8), self_51391, 'bbox', TransformedBbox_call_result_51390)
        
        # Assigning a Name to a Attribute (line 345):
        
        # Assigning a Name to a Attribute (line 345):
        
        # Assigning a Name to a Attribute (line 345):
        # Getting the type of 'frameon' (line 345)
        frameon_51392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 23), 'frameon')
        # Getting the type of 'self' (line 345)
        self_51393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 8), 'self')
        # Setting the type of the member 'frameon' of a type (line 345)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 345, 8), self_51393, 'frameon', frameon_51392)
        
        # Assigning a Call to a Attribute (line 347):
        
        # Assigning a Call to a Attribute (line 347):
        
        # Assigning a Call to a Attribute (line 347):
        
        # Call to BboxTransformTo(...): (line 347)
        # Processing the call arguments (line 347)
        # Getting the type of 'self' (line 347)
        self_51395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 43), 'self', False)
        # Obtaining the member 'bbox' of a type (line 347)
        bbox_51396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 347, 43), self_51395, 'bbox')
        # Processing the call keyword arguments (line 347)
        kwargs_51397 = {}
        # Getting the type of 'BboxTransformTo' (line 347)
        BboxTransformTo_51394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 27), 'BboxTransformTo', False)
        # Calling BboxTransformTo(args, kwargs) (line 347)
        BboxTransformTo_call_result_51398 = invoke(stypy.reporting.localization.Localization(__file__, 347, 27), BboxTransformTo_51394, *[bbox_51396], **kwargs_51397)
        
        # Getting the type of 'self' (line 347)
        self_51399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 8), 'self')
        # Setting the type of the member 'transFigure' of a type (line 347)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 347, 8), self_51399, 'transFigure', BboxTransformTo_call_result_51398)
        
        # Assigning a Call to a Attribute (line 349):
        
        # Assigning a Call to a Attribute (line 349):
        
        # Assigning a Call to a Attribute (line 349):
        
        # Call to Rectangle(...): (line 349)
        # Processing the call keyword arguments (line 349)
        
        # Obtaining an instance of the builtin type 'tuple' (line 350)
        tuple_51401 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 350)
        # Adding element type (line 350)
        int_51402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 16), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 350, 16), tuple_51401, int_51402)
        # Adding element type (line 350)
        int_51403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 19), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 350, 16), tuple_51401, int_51403)
        
        keyword_51404 = tuple_51401
        int_51405 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 29), 'int')
        keyword_51406 = int_51405
        int_51407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 350, 39), 'int')
        keyword_51408 = int_51407
        # Getting the type of 'facecolor' (line 351)
        facecolor_51409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 22), 'facecolor', False)
        keyword_51410 = facecolor_51409
        # Getting the type of 'edgecolor' (line 351)
        edgecolor_51411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 43), 'edgecolor', False)
        keyword_51412 = edgecolor_51411
        # Getting the type of 'linewidth' (line 351)
        linewidth_51413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 64), 'linewidth', False)
        keyword_51414 = linewidth_51413
        kwargs_51415 = {'edgecolor': keyword_51412, 'facecolor': keyword_51410, 'height': keyword_51408, 'width': keyword_51406, 'xy': keyword_51404, 'linewidth': keyword_51414}
        # Getting the type of 'Rectangle' (line 349)
        Rectangle_51400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 21), 'Rectangle', False)
        # Calling Rectangle(args, kwargs) (line 349)
        Rectangle_call_result_51416 = invoke(stypy.reporting.localization.Localization(__file__, 349, 21), Rectangle_51400, *[], **kwargs_51415)
        
        # Getting the type of 'self' (line 349)
        self_51417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'self')
        # Setting the type of the member 'patch' of a type (line 349)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 8), self_51417, 'patch', Rectangle_call_result_51416)
        
        # Call to _set_artist_props(...): (line 352)
        # Processing the call arguments (line 352)
        # Getting the type of 'self' (line 352)
        self_51420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 31), 'self', False)
        # Obtaining the member 'patch' of a type (line 352)
        patch_51421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 31), self_51420, 'patch')
        # Processing the call keyword arguments (line 352)
        kwargs_51422 = {}
        # Getting the type of 'self' (line 352)
        self_51418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 352)
        _set_artist_props_51419 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 8), self_51418, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 352)
        _set_artist_props_call_result_51423 = invoke(stypy.reporting.localization.Localization(__file__, 352, 8), _set_artist_props_51419, *[patch_51421], **kwargs_51422)
        
        
        # Call to set_aa(...): (line 353)
        # Processing the call arguments (line 353)
        # Getting the type of 'False' (line 353)
        False_51427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 26), 'False', False)
        # Processing the call keyword arguments (line 353)
        kwargs_51428 = {}
        # Getting the type of 'self' (line 353)
        self_51424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 353)
        patch_51425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 8), self_51424, 'patch')
        # Obtaining the member 'set_aa' of a type (line 353)
        set_aa_51426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 8), patch_51425, 'set_aa')
        # Calling set_aa(args, kwargs) (line 353)
        set_aa_call_result_51429 = invoke(stypy.reporting.localization.Localization(__file__, 353, 8), set_aa_51426, *[False_51427], **kwargs_51428)
        
        
        # Assigning a Subscript to a Attribute (line 355):
        
        # Assigning a Subscript to a Attribute (line 355):
        
        # Assigning a Subscript to a Attribute (line 355):
        
        # Obtaining the type of the subscript
        unicode_51430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 30), 'unicode', u'axes.hold')
        # Getting the type of 'rcParams' (line 355)
        rcParams_51431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 21), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 355)
        getitem___51432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 21), rcParams_51431, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 355)
        subscript_call_result_51433 = invoke(stypy.reporting.localization.Localization(__file__, 355, 21), getitem___51432, unicode_51430)
        
        # Getting the type of 'self' (line 355)
        self_51434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 'self')
        # Setting the type of the member '_hold' of a type (line 355)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 8), self_51434, '_hold', subscript_call_result_51433)
        
        # Type idiom detected: calculating its left and rigth part (line 356)
        # Getting the type of 'self' (line 356)
        self_51435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 11), 'self')
        # Obtaining the member '_hold' of a type (line 356)
        _hold_51436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 11), self_51435, '_hold')
        # Getting the type of 'None' (line 356)
        None_51437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 25), 'None')
        
        (may_be_51438, more_types_in_union_51439) = may_be_none(_hold_51436, None_51437)

        if may_be_51438:

            if more_types_in_union_51439:
                # Runtime conditional SSA (line 356)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 357):
            
            # Assigning a Name to a Attribute (line 357):
            
            # Assigning a Name to a Attribute (line 357):
            # Getting the type of 'True' (line 357)
            True_51440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 25), 'True')
            # Getting the type of 'self' (line 357)
            self_51441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 357, 12), 'self')
            # Setting the type of the member '_hold' of a type (line 357)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 357, 12), self_51441, '_hold', True_51440)

            if more_types_in_union_51439:
                # SSA join for if statement (line 356)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 359):
        
        # Assigning a Name to a Attribute (line 359):
        
        # Assigning a Name to a Attribute (line 359):
        # Getting the type of 'None' (line 359)
        None_51442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 22), 'None')
        # Getting the type of 'self' (line 359)
        self_51443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 359)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 8), self_51443, 'canvas', None_51442)
        
        # Assigning a Name to a Attribute (line 360):
        
        # Assigning a Name to a Attribute (line 360):
        
        # Assigning a Name to a Attribute (line 360):
        # Getting the type of 'None' (line 360)
        None_51444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 25), 'None')
        # Getting the type of 'self' (line 360)
        self_51445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 360, 8), 'self')
        # Setting the type of the member '_suptitle' of a type (line 360)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 360, 8), self_51445, '_suptitle', None_51444)
        
        # Type idiom detected: calculating its left and rigth part (line 362)
        # Getting the type of 'subplotpars' (line 362)
        subplotpars_51446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 11), 'subplotpars')
        # Getting the type of 'None' (line 362)
        None_51447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 362, 26), 'None')
        
        (may_be_51448, more_types_in_union_51449) = may_be_none(subplotpars_51446, None_51447)

        if may_be_51448:

            if more_types_in_union_51449:
                # Runtime conditional SSA (line 362)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 363):
            
            # Assigning a Call to a Name (line 363):
            
            # Assigning a Call to a Name (line 363):
            
            # Call to SubplotParams(...): (line 363)
            # Processing the call keyword arguments (line 363)
            kwargs_51451 = {}
            # Getting the type of 'SubplotParams' (line 363)
            SubplotParams_51450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 26), 'SubplotParams', False)
            # Calling SubplotParams(args, kwargs) (line 363)
            SubplotParams_call_result_51452 = invoke(stypy.reporting.localization.Localization(__file__, 363, 26), SubplotParams_51450, *[], **kwargs_51451)
            
            # Assigning a type to the variable 'subplotpars' (line 363)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 12), 'subplotpars', SubplotParams_call_result_51452)

            if more_types_in_union_51449:
                # SSA join for if statement (line 362)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 365):
        
        # Assigning a Name to a Attribute (line 365):
        
        # Assigning a Name to a Attribute (line 365):
        # Getting the type of 'subplotpars' (line 365)
        subplotpars_51453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 27), 'subplotpars')
        # Getting the type of 'self' (line 365)
        self_51454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 8), 'self')
        # Setting the type of the member 'subplotpars' of a type (line 365)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 8), self_51454, 'subplotpars', subplotpars_51453)
        
        # Call to set_tight_layout(...): (line 366)
        # Processing the call arguments (line 366)
        # Getting the type of 'tight_layout' (line 366)
        tight_layout_51457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 30), 'tight_layout', False)
        # Processing the call keyword arguments (line 366)
        kwargs_51458 = {}
        # Getting the type of 'self' (line 366)
        self_51455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 366, 8), 'self', False)
        # Obtaining the member 'set_tight_layout' of a type (line 366)
        set_tight_layout_51456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 366, 8), self_51455, 'set_tight_layout')
        # Calling set_tight_layout(args, kwargs) (line 366)
        set_tight_layout_call_result_51459 = invoke(stypy.reporting.localization.Localization(__file__, 366, 8), set_tight_layout_51456, *[tight_layout_51457], **kwargs_51458)
        
        
        # Assigning a Call to a Attribute (line 368):
        
        # Assigning a Call to a Attribute (line 368):
        
        # Assigning a Call to a Attribute (line 368):
        
        # Call to AxesStack(...): (line 368)
        # Processing the call keyword arguments (line 368)
        kwargs_51461 = {}
        # Getting the type of 'AxesStack' (line 368)
        AxesStack_51460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 24), 'AxesStack', False)
        # Calling AxesStack(args, kwargs) (line 368)
        AxesStack_call_result_51462 = invoke(stypy.reporting.localization.Localization(__file__, 368, 24), AxesStack_51460, *[], **kwargs_51461)
        
        # Getting the type of 'self' (line 368)
        self_51463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 368, 8), 'self')
        # Setting the type of the member '_axstack' of a type (line 368)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 368, 8), self_51463, '_axstack', AxesStack_call_result_51462)
        
        # Call to clf(...): (line 369)
        # Processing the call keyword arguments (line 369)
        kwargs_51466 = {}
        # Getting the type of 'self' (line 369)
        self_51464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 8), 'self', False)
        # Obtaining the member 'clf' of a type (line 369)
        clf_51465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 369, 8), self_51464, 'clf')
        # Calling clf(args, kwargs) (line 369)
        clf_call_result_51467 = invoke(stypy.reporting.localization.Localization(__file__, 369, 8), clf_51465, *[], **kwargs_51466)
        
        
        # Assigning a Name to a Attribute (line 370):
        
        # Assigning a Name to a Attribute (line 370):
        
        # Assigning a Name to a Attribute (line 370):
        # Getting the type of 'None' (line 370)
        None_51468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 31), 'None')
        # Getting the type of 'self' (line 370)
        self_51469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 8), 'self')
        # Setting the type of the member '_cachedRenderer' of a type (line 370)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 8), self_51469, '_cachedRenderer', None_51468)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def figurePatch(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'figurePatch'
        module_type_store = module_type_store.open_function_context('figurePatch', 372, 4, False)
        # Assigning a type to the variable 'self' (line 373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 373, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.figurePatch.__dict__.__setitem__('stypy_localization', localization)
        Figure.figurePatch.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.figurePatch.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.figurePatch.__dict__.__setitem__('stypy_function_name', 'Figure.figurePatch')
        Figure.figurePatch.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.figurePatch.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.figurePatch.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.figurePatch.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.figurePatch.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.figurePatch.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.figurePatch.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.figurePatch', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'figurePatch', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'figurePatch(...)' code ##################

        # Getting the type of 'self' (line 375)
        self_51470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 375, 15), 'self')
        # Obtaining the member 'patch' of a type (line 375)
        patch_51471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 375, 15), self_51470, 'patch')
        # Assigning a type to the variable 'stypy_return_type' (line 375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 375, 8), 'stypy_return_type', patch_51471)
        
        # ################# End of 'figurePatch(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'figurePatch' in the type store
        # Getting the type of 'stypy_return_type' (line 372)
        stypy_return_type_51472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 372, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51472)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'figurePatch'
        return stypy_return_type_51472


    @norecursion
    def _repr_html_(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_repr_html_'
        module_type_store = module_type_store.open_function_context('_repr_html_', 381, 4, False)
        # Assigning a type to the variable 'self' (line 382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure._repr_html_.__dict__.__setitem__('stypy_localization', localization)
        Figure._repr_html_.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure._repr_html_.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure._repr_html_.__dict__.__setitem__('stypy_function_name', 'Figure._repr_html_')
        Figure._repr_html_.__dict__.__setitem__('stypy_param_names_list', [])
        Figure._repr_html_.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure._repr_html_.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure._repr_html_.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure._repr_html_.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure._repr_html_.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure._repr_html_.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure._repr_html_', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_repr_html_', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_repr_html_(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 384)
        self_51473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 12), 'self')
        # Obtaining the member 'canvas' of a type (line 384)
        canvas_51474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 384, 12), self_51473, 'canvas')
        # Getting the type of 'None' (line 384)
        None_51475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 31), 'None')
        # Applying the binary operator 'isnot' (line 384)
        result_is_not_51476 = python_operator(stypy.reporting.localization.Localization(__file__, 384, 12), 'isnot', canvas_51474, None_51475)
        
        
        unicode_51477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 12), 'unicode', u'WebAgg')
        # Getting the type of 'self' (line 385)
        self_51478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 24), 'self')
        # Obtaining the member 'canvas' of a type (line 385)
        canvas_51479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 24), self_51478, 'canvas')
        # Obtaining the member '__class__' of a type (line 385)
        class___51480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 24), canvas_51479, '__class__')
        # Obtaining the member '__name__' of a type (line 385)
        name___51481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 24), class___51480, '__name__')
        # Applying the binary operator 'in' (line 385)
        result_contains_51482 = python_operator(stypy.reporting.localization.Localization(__file__, 385, 12), 'in', unicode_51477, name___51481)
        
        # Applying the binary operator 'and' (line 384)
        result_and_keyword_51483 = python_operator(stypy.reporting.localization.Localization(__file__, 384, 12), 'and', result_is_not_51476, result_contains_51482)
        
        # Testing the type of an if condition (line 384)
        if_condition_51484 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 384, 8), result_and_keyword_51483)
        # Assigning a type to the variable 'if_condition_51484' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 8), 'if_condition_51484', if_condition_51484)
        # SSA begins for if statement (line 384)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 386, 12))
        
        # 'from matplotlib.backends import backend_webagg' statement (line 386)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_51485 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 386, 12), 'matplotlib.backends')

        if (type(import_51485) is not StypyTypeError):

            if (import_51485 != 'pyd_module'):
                __import__(import_51485)
                sys_modules_51486 = sys.modules[import_51485]
                import_from_module(stypy.reporting.localization.Localization(__file__, 386, 12), 'matplotlib.backends', sys_modules_51486.module_type_store, module_type_store, ['backend_webagg'])
                nest_module(stypy.reporting.localization.Localization(__file__, 386, 12), __file__, sys_modules_51486, sys_modules_51486.module_type_store, module_type_store)
            else:
                from matplotlib.backends import backend_webagg

                import_from_module(stypy.reporting.localization.Localization(__file__, 386, 12), 'matplotlib.backends', None, module_type_store, ['backend_webagg'], [backend_webagg])

        else:
            # Assigning a type to the variable 'matplotlib.backends' (line 386)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 12), 'matplotlib.backends', import_51485)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to ipython_inline_display(...): (line 387)
        # Processing the call arguments (line 387)
        # Getting the type of 'self' (line 387)
        self_51489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 57), 'self', False)
        # Processing the call keyword arguments (line 387)
        kwargs_51490 = {}
        # Getting the type of 'backend_webagg' (line 387)
        backend_webagg_51487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 19), 'backend_webagg', False)
        # Obtaining the member 'ipython_inline_display' of a type (line 387)
        ipython_inline_display_51488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 387, 19), backend_webagg_51487, 'ipython_inline_display')
        # Calling ipython_inline_display(args, kwargs) (line 387)
        ipython_inline_display_call_result_51491 = invoke(stypy.reporting.localization.Localization(__file__, 387, 19), ipython_inline_display_51488, *[self_51489], **kwargs_51490)
        
        # Assigning a type to the variable 'stypy_return_type' (line 387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 387, 12), 'stypy_return_type', ipython_inline_display_call_result_51491)
        # SSA join for if statement (line 384)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_repr_html_(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_repr_html_' in the type store
        # Getting the type of 'stypy_return_type' (line 381)
        stypy_return_type_51492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51492)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_repr_html_'
        return stypy_return_type_51492


    @norecursion
    def show(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 389)
        True_51493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 24), 'True')
        defaults = [True_51493]
        # Create a new context for function 'show'
        module_type_store = module_type_store.open_function_context('show', 389, 4, False)
        # Assigning a type to the variable 'self' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.show.__dict__.__setitem__('stypy_localization', localization)
        Figure.show.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.show.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.show.__dict__.__setitem__('stypy_function_name', 'Figure.show')
        Figure.show.__dict__.__setitem__('stypy_param_names_list', ['warn'])
        Figure.show.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.show.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.show.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.show.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.show.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.show.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.show', ['warn'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'show', localization, ['warn'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'show(...)' code ##################

        unicode_51494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, (-1)), 'unicode', u'\n        If using a GUI backend with pyplot, display the figure window.\n\n        If the figure was not created using\n        :func:`~matplotlib.pyplot.figure`, it will lack a\n        :class:`~matplotlib.backend_bases.FigureManagerBase`, and\n        will raise an AttributeError.\n\n        For non-GUI backends, this does nothing, in which case\n        a warning will be issued if *warn* is True (default).\n        ')
        
        
        # SSA begins for try-except statement (line 401)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Assigning a Call to a Name (line 402):
        
        # Assigning a Call to a Name (line 402):
        
        # Assigning a Call to a Name (line 402):
        
        # Call to getattr(...): (line 402)
        # Processing the call arguments (line 402)
        # Getting the type of 'self' (line 402)
        self_51496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 30), 'self', False)
        # Obtaining the member 'canvas' of a type (line 402)
        canvas_51497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 402, 30), self_51496, 'canvas')
        unicode_51498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 402, 43), 'unicode', u'manager')
        # Processing the call keyword arguments (line 402)
        kwargs_51499 = {}
        # Getting the type of 'getattr' (line 402)
        getattr_51495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 22), 'getattr', False)
        # Calling getattr(args, kwargs) (line 402)
        getattr_call_result_51500 = invoke(stypy.reporting.localization.Localization(__file__, 402, 22), getattr_51495, *[canvas_51497, unicode_51498], **kwargs_51499)
        
        # Assigning a type to the variable 'manager' (line 402)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 402, 12), 'manager', getattr_call_result_51500)
        # SSA branch for the except part of a try statement (line 401)
        # SSA branch for the except 'AttributeError' branch of a try statement (line 401)
        # Storing handler type
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'AttributeError' (line 403)
        AttributeError_51501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 15), 'AttributeError')
        # Assigning a type to the variable 'err' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'err', AttributeError_51501)
        
        # Call to AttributeError(...): (line 404)
        # Processing the call arguments (line 404)
        unicode_51503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 33), 'unicode', u'%s\nFigure.show works only for figures managed by pyplot, normally created by pyplot.figure().')
        # Getting the type of 'err' (line 407)
        err_51504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 65), 'err', False)
        # Applying the binary operator '%' (line 404)
        result_mod_51505 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 33), '%', unicode_51503, err_51504)
        
        # Processing the call keyword arguments (line 404)
        kwargs_51506 = {}
        # Getting the type of 'AttributeError' (line 404)
        AttributeError_51502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 18), 'AttributeError', False)
        # Calling AttributeError(args, kwargs) (line 404)
        AttributeError_call_result_51507 = invoke(stypy.reporting.localization.Localization(__file__, 404, 18), AttributeError_51502, *[result_mod_51505], **kwargs_51506)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 404, 12), AttributeError_call_result_51507, 'raise parameter', BaseException)
        # SSA join for try-except statement (line 401)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 409)
        # Getting the type of 'manager' (line 409)
        manager_51508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 8), 'manager')
        # Getting the type of 'None' (line 409)
        None_51509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 26), 'None')
        
        (may_be_51510, more_types_in_union_51511) = may_not_be_none(manager_51508, None_51509)

        if may_be_51510:

            if more_types_in_union_51511:
                # Runtime conditional SSA (line 409)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # SSA begins for try-except statement (line 410)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Call to show(...): (line 411)
            # Processing the call keyword arguments (line 411)
            kwargs_51514 = {}
            # Getting the type of 'manager' (line 411)
            manager_51512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 16), 'manager', False)
            # Obtaining the member 'show' of a type (line 411)
            show_51513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 16), manager_51512, 'show')
            # Calling show(args, kwargs) (line 411)
            show_call_result_51515 = invoke(stypy.reporting.localization.Localization(__file__, 411, 16), show_51513, *[], **kwargs_51514)
            
            # Assigning a type to the variable 'stypy_return_type' (line 412)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 16), 'stypy_return_type', types.NoneType)
            # SSA branch for the except part of a try statement (line 410)
            # SSA branch for the except 'NonGuiException' branch of a try statement (line 410)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA join for try-except statement (line 410)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_51511:
                # SSA join for if statement (line 409)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'warn' (line 415)
        warn_51516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 11), 'warn')
        # Testing the type of an if condition (line 415)
        if_condition_51517 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 415, 8), warn_51516)
        # Assigning a type to the variable 'if_condition_51517' (line 415)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 415, 8), 'if_condition_51517', if_condition_51517)
        # SSA begins for if statement (line 415)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 416, 12))
        
        # 'import warnings' statement (line 416)
        import warnings

        import_module(stypy.reporting.localization.Localization(__file__, 416, 12), 'warnings', warnings, module_type_store)
        
        
        # Call to warn(...): (line 417)
        # Processing the call arguments (line 417)
        unicode_51520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 16), 'unicode', u'matplotlib is currently using a non-GUI backend, so cannot show the figure')
        # Processing the call keyword arguments (line 417)
        kwargs_51521 = {}
        # Getting the type of 'warnings' (line 417)
        warnings_51518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 417)
        warn_51519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 417, 12), warnings_51518, 'warn')
        # Calling warn(args, kwargs) (line 417)
        warn_call_result_51522 = invoke(stypy.reporting.localization.Localization(__file__, 417, 12), warn_51519, *[unicode_51520], **kwargs_51521)
        
        # SSA join for if statement (line 415)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'show(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'show' in the type store
        # Getting the type of 'stypy_return_type' (line 389)
        stypy_return_type_51523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51523)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'show'
        return stypy_return_type_51523


    @norecursion
    def _get_axes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_axes'
        module_type_store = module_type_store.open_function_context('_get_axes', 421, 4, False)
        # Assigning a type to the variable 'self' (line 422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure._get_axes.__dict__.__setitem__('stypy_localization', localization)
        Figure._get_axes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure._get_axes.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure._get_axes.__dict__.__setitem__('stypy_function_name', 'Figure._get_axes')
        Figure._get_axes.__dict__.__setitem__('stypy_param_names_list', [])
        Figure._get_axes.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure._get_axes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure._get_axes.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure._get_axes.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure._get_axes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure._get_axes.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure._get_axes', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_axes', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_axes(...)' code ##################

        
        # Call to as_list(...): (line 422)
        # Processing the call keyword arguments (line 422)
        kwargs_51527 = {}
        # Getting the type of 'self' (line 422)
        self_51524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 15), 'self', False)
        # Obtaining the member '_axstack' of a type (line 422)
        _axstack_51525 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 15), self_51524, '_axstack')
        # Obtaining the member 'as_list' of a type (line 422)
        as_list_51526 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 15), _axstack_51525, 'as_list')
        # Calling as_list(args, kwargs) (line 422)
        as_list_call_result_51528 = invoke(stypy.reporting.localization.Localization(__file__, 422, 15), as_list_51526, *[], **kwargs_51527)
        
        # Assigning a type to the variable 'stypy_return_type' (line 422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 8), 'stypy_return_type', as_list_call_result_51528)
        
        # ################# End of '_get_axes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_axes' in the type store
        # Getting the type of 'stypy_return_type' (line 421)
        stypy_return_type_51529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51529)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_axes'
        return stypy_return_type_51529

    
    # Assigning a Call to a Name (line 424):
    
    # Assigning a Call to a Name (line 424):

    @norecursion
    def _get_dpi(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_dpi'
        module_type_store = module_type_store.open_function_context('_get_dpi', 426, 4, False)
        # Assigning a type to the variable 'self' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure._get_dpi.__dict__.__setitem__('stypy_localization', localization)
        Figure._get_dpi.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure._get_dpi.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure._get_dpi.__dict__.__setitem__('stypy_function_name', 'Figure._get_dpi')
        Figure._get_dpi.__dict__.__setitem__('stypy_param_names_list', [])
        Figure._get_dpi.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure._get_dpi.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure._get_dpi.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure._get_dpi.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure._get_dpi.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure._get_dpi.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure._get_dpi', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_dpi', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_dpi(...)' code ##################

        # Getting the type of 'self' (line 427)
        self_51530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 15), 'self')
        # Obtaining the member '_dpi' of a type (line 427)
        _dpi_51531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 15), self_51530, '_dpi')
        # Assigning a type to the variable 'stypy_return_type' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 8), 'stypy_return_type', _dpi_51531)
        
        # ################# End of '_get_dpi(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_dpi' in the type store
        # Getting the type of 'stypy_return_type' (line 426)
        stypy_return_type_51532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51532)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_dpi'
        return stypy_return_type_51532


    @norecursion
    def _set_dpi(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 429)
        True_51533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 36), 'True')
        defaults = [True_51533]
        # Create a new context for function '_set_dpi'
        module_type_store = module_type_store.open_function_context('_set_dpi', 429, 4, False)
        # Assigning a type to the variable 'self' (line 430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure._set_dpi.__dict__.__setitem__('stypy_localization', localization)
        Figure._set_dpi.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure._set_dpi.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure._set_dpi.__dict__.__setitem__('stypy_function_name', 'Figure._set_dpi')
        Figure._set_dpi.__dict__.__setitem__('stypy_param_names_list', ['dpi', 'forward'])
        Figure._set_dpi.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure._set_dpi.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure._set_dpi.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure._set_dpi.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure._set_dpi.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure._set_dpi.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure._set_dpi', ['dpi', 'forward'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_dpi', localization, ['dpi', 'forward'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_dpi(...)' code ##################

        unicode_51534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 432, (-1)), 'unicode', u'\n        The forward kwarg is passed on to set_size_inches\n        ')
        
        # Assigning a Name to a Attribute (line 433):
        
        # Assigning a Name to a Attribute (line 433):
        
        # Assigning a Name to a Attribute (line 433):
        # Getting the type of 'dpi' (line 433)
        dpi_51535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 20), 'dpi')
        # Getting the type of 'self' (line 433)
        self_51536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 433, 8), 'self')
        # Setting the type of the member '_dpi' of a type (line 433)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 433, 8), self_51536, '_dpi', dpi_51535)
        
        # Call to scale(...): (line 434)
        # Processing the call arguments (line 434)
        # Getting the type of 'dpi' (line 434)
        dpi_51543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 43), 'dpi', False)
        # Getting the type of 'dpi' (line 434)
        dpi_51544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 48), 'dpi', False)
        # Processing the call keyword arguments (line 434)
        kwargs_51545 = {}
        
        # Call to clear(...): (line 434)
        # Processing the call keyword arguments (line 434)
        kwargs_51540 = {}
        # Getting the type of 'self' (line 434)
        self_51537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 434, 8), 'self', False)
        # Obtaining the member 'dpi_scale_trans' of a type (line 434)
        dpi_scale_trans_51538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 8), self_51537, 'dpi_scale_trans')
        # Obtaining the member 'clear' of a type (line 434)
        clear_51539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 8), dpi_scale_trans_51538, 'clear')
        # Calling clear(args, kwargs) (line 434)
        clear_call_result_51541 = invoke(stypy.reporting.localization.Localization(__file__, 434, 8), clear_51539, *[], **kwargs_51540)
        
        # Obtaining the member 'scale' of a type (line 434)
        scale_51542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 434, 8), clear_call_result_51541, 'scale')
        # Calling scale(args, kwargs) (line 434)
        scale_call_result_51546 = invoke(stypy.reporting.localization.Localization(__file__, 434, 8), scale_51542, *[dpi_51543, dpi_51544], **kwargs_51545)
        
        
        # Assigning a Call to a Tuple (line 435):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_size_inches(...): (line 435)
        # Processing the call keyword arguments (line 435)
        kwargs_51549 = {}
        # Getting the type of 'self' (line 435)
        self_51547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 15), 'self', False)
        # Obtaining the member 'get_size_inches' of a type (line 435)
        get_size_inches_51548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 15), self_51547, 'get_size_inches')
        # Calling get_size_inches(args, kwargs) (line 435)
        get_size_inches_call_result_51550 = invoke(stypy.reporting.localization.Localization(__file__, 435, 15), get_size_inches_51548, *[], **kwargs_51549)
        
        # Assigning a type to the variable 'call_assignment_50765' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_50765', get_size_inches_call_result_51550)
        
        # Assigning a Call to a Name (line 435):
        
        # Assigning a Call to a Name (line 435):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_51553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 8), 'int')
        # Processing the call keyword arguments
        kwargs_51554 = {}
        # Getting the type of 'call_assignment_50765' (line 435)
        call_assignment_50765_51551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_50765', False)
        # Obtaining the member '__getitem__' of a type (line 435)
        getitem___51552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 8), call_assignment_50765_51551, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_51555 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___51552, *[int_51553], **kwargs_51554)
        
        # Assigning a type to the variable 'call_assignment_50766' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_50766', getitem___call_result_51555)
        
        # Assigning a Name to a Name (line 435):
        
        # Assigning a Name to a Name (line 435):
        # Getting the type of 'call_assignment_50766' (line 435)
        call_assignment_50766_51556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_50766')
        # Assigning a type to the variable 'w' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'w', call_assignment_50766_51556)
        
        # Assigning a Call to a Name (line 435):
        
        # Assigning a Call to a Name (line 435):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_51559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 8), 'int')
        # Processing the call keyword arguments
        kwargs_51560 = {}
        # Getting the type of 'call_assignment_50765' (line 435)
        call_assignment_50765_51557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_50765', False)
        # Obtaining the member '__getitem__' of a type (line 435)
        getitem___51558 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 435, 8), call_assignment_50765_51557, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_51561 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___51558, *[int_51559], **kwargs_51560)
        
        # Assigning a type to the variable 'call_assignment_50767' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_50767', getitem___call_result_51561)
        
        # Assigning a Name to a Name (line 435):
        
        # Assigning a Name to a Name (line 435):
        # Getting the type of 'call_assignment_50767' (line 435)
        call_assignment_50767_51562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'call_assignment_50767')
        # Assigning a type to the variable 'h' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 11), 'h', call_assignment_50767_51562)
        
        # Call to set_size_inches(...): (line 436)
        # Processing the call arguments (line 436)
        # Getting the type of 'w' (line 436)
        w_51565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 29), 'w', False)
        # Getting the type of 'h' (line 436)
        h_51566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 32), 'h', False)
        # Processing the call keyword arguments (line 436)
        # Getting the type of 'forward' (line 436)
        forward_51567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 43), 'forward', False)
        keyword_51568 = forward_51567
        kwargs_51569 = {'forward': keyword_51568}
        # Getting the type of 'self' (line 436)
        self_51563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 8), 'self', False)
        # Obtaining the member 'set_size_inches' of a type (line 436)
        set_size_inches_51564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 436, 8), self_51563, 'set_size_inches')
        # Calling set_size_inches(args, kwargs) (line 436)
        set_size_inches_call_result_51570 = invoke(stypy.reporting.localization.Localization(__file__, 436, 8), set_size_inches_51564, *[w_51565, h_51566], **kwargs_51569)
        
        
        # Call to process(...): (line 437)
        # Processing the call arguments (line 437)
        unicode_51574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 437, 31), 'unicode', u'dpi_changed')
        # Getting the type of 'self' (line 437)
        self_51575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 46), 'self', False)
        # Processing the call keyword arguments (line 437)
        kwargs_51576 = {}
        # Getting the type of 'self' (line 437)
        self_51571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 437, 8), 'self', False)
        # Obtaining the member 'callbacks' of a type (line 437)
        callbacks_51572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 437, 8), self_51571, 'callbacks')
        # Obtaining the member 'process' of a type (line 437)
        process_51573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 437, 8), callbacks_51572, 'process')
        # Calling process(args, kwargs) (line 437)
        process_call_result_51577 = invoke(stypy.reporting.localization.Localization(__file__, 437, 8), process_51573, *[unicode_51574, self_51575], **kwargs_51576)
        
        
        # ################# End of '_set_dpi(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_dpi' in the type store
        # Getting the type of 'stypy_return_type' (line 429)
        stypy_return_type_51578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51578)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_dpi'
        return stypy_return_type_51578

    
    # Assigning a Call to a Name (line 439):
    
    # Assigning a Call to a Name (line 439):

    @norecursion
    def get_tight_layout(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_tight_layout'
        module_type_store = module_type_store.open_function_context('get_tight_layout', 441, 4, False)
        # Assigning a type to the variable 'self' (line 442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 442, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.get_tight_layout.__dict__.__setitem__('stypy_localization', localization)
        Figure.get_tight_layout.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.get_tight_layout.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.get_tight_layout.__dict__.__setitem__('stypy_function_name', 'Figure.get_tight_layout')
        Figure.get_tight_layout.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.get_tight_layout.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.get_tight_layout.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.get_tight_layout.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.get_tight_layout.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.get_tight_layout.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.get_tight_layout.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.get_tight_layout', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_tight_layout', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_tight_layout(...)' code ##################

        unicode_51579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 444, (-1)), 'unicode', u'\n        Return the Boolean flag, True to use :meth:`tight_layout` when drawing.\n        ')
        # Getting the type of 'self' (line 445)
        self_51580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 15), 'self')
        # Obtaining the member '_tight' of a type (line 445)
        _tight_51581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 15), self_51580, '_tight')
        # Assigning a type to the variable 'stypy_return_type' (line 445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 8), 'stypy_return_type', _tight_51581)
        
        # ################# End of 'get_tight_layout(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_tight_layout' in the type store
        # Getting the type of 'stypy_return_type' (line 441)
        stypy_return_type_51582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51582)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_tight_layout'
        return stypy_return_type_51582


    @norecursion
    def set_tight_layout(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_tight_layout'
        module_type_store = module_type_store.open_function_context('set_tight_layout', 447, 4, False)
        # Assigning a type to the variable 'self' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.set_tight_layout.__dict__.__setitem__('stypy_localization', localization)
        Figure.set_tight_layout.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.set_tight_layout.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.set_tight_layout.__dict__.__setitem__('stypy_function_name', 'Figure.set_tight_layout')
        Figure.set_tight_layout.__dict__.__setitem__('stypy_param_names_list', ['tight'])
        Figure.set_tight_layout.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.set_tight_layout.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.set_tight_layout.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.set_tight_layout.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.set_tight_layout.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.set_tight_layout.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.set_tight_layout', ['tight'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_tight_layout', localization, ['tight'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_tight_layout(...)' code ##################

        unicode_51583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 457, (-1)), 'unicode', u"\n        Set whether :meth:`tight_layout` is used upon drawing.\n        If None, the rcParams['figure.autolayout'] value will be set.\n\n        When providing a dict containing the keys `pad`, `w_pad`, `h_pad`\n        and `rect`, the default :meth:`tight_layout` paddings will be\n        overridden.\n\n        ACCEPTS: [True | False | dict | None ]\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 458)
        # Getting the type of 'tight' (line 458)
        tight_51584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 11), 'tight')
        # Getting the type of 'None' (line 458)
        None_51585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 20), 'None')
        
        (may_be_51586, more_types_in_union_51587) = may_be_none(tight_51584, None_51585)

        if may_be_51586:

            if more_types_in_union_51587:
                # Runtime conditional SSA (line 458)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 459):
            
            # Assigning a Subscript to a Name (line 459):
            
            # Assigning a Subscript to a Name (line 459):
            
            # Obtaining the type of the subscript
            unicode_51588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 459, 29), 'unicode', u'figure.autolayout')
            # Getting the type of 'rcParams' (line 459)
            rcParams_51589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 20), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 459)
            getitem___51590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 20), rcParams_51589, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 459)
            subscript_call_result_51591 = invoke(stypy.reporting.localization.Localization(__file__, 459, 20), getitem___51590, unicode_51588)
            
            # Assigning a type to the variable 'tight' (line 459)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 459, 12), 'tight', subscript_call_result_51591)

            if more_types_in_union_51587:
                # SSA join for if statement (line 458)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Attribute (line 460):
        
        # Assigning a Call to a Attribute (line 460):
        
        # Assigning a Call to a Attribute (line 460):
        
        # Call to bool(...): (line 460)
        # Processing the call arguments (line 460)
        # Getting the type of 'tight' (line 460)
        tight_51593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 27), 'tight', False)
        # Processing the call keyword arguments (line 460)
        kwargs_51594 = {}
        # Getting the type of 'bool' (line 460)
        bool_51592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 22), 'bool', False)
        # Calling bool(args, kwargs) (line 460)
        bool_call_result_51595 = invoke(stypy.reporting.localization.Localization(__file__, 460, 22), bool_51592, *[tight_51593], **kwargs_51594)
        
        # Getting the type of 'self' (line 460)
        self_51596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 8), 'self')
        # Setting the type of the member '_tight' of a type (line 460)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 8), self_51596, '_tight', bool_call_result_51595)
        
        # Assigning a IfExp to a Attribute (line 461):
        
        # Assigning a IfExp to a Attribute (line 461):
        
        # Assigning a IfExp to a Attribute (line 461):
        
        
        # Call to isinstance(...): (line 461)
        # Processing the call arguments (line 461)
        # Getting the type of 'tight' (line 461)
        tight_51598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 53), 'tight', False)
        # Getting the type of 'dict' (line 461)
        dict_51599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 60), 'dict', False)
        # Processing the call keyword arguments (line 461)
        kwargs_51600 = {}
        # Getting the type of 'isinstance' (line 461)
        isinstance_51597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 42), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 461)
        isinstance_call_result_51601 = invoke(stypy.reporting.localization.Localization(__file__, 461, 42), isinstance_51597, *[tight_51598, dict_51599], **kwargs_51600)
        
        # Testing the type of an if expression (line 461)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 461, 33), isinstance_call_result_51601)
        # SSA begins for if expression (line 461)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        # Getting the type of 'tight' (line 461)
        tight_51602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 33), 'tight')
        # SSA branch for the else part of an if expression (line 461)
        module_type_store.open_ssa_branch('if expression else')
        
        # Obtaining an instance of the builtin type 'dict' (line 461)
        dict_51603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 71), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 461)
        
        # SSA join for if expression (line 461)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_51604 = union_type.UnionType.add(tight_51602, dict_51603)
        
        # Getting the type of 'self' (line 461)
        self_51605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 8), 'self')
        # Setting the type of the member '_tight_parameters' of a type (line 461)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 8), self_51605, '_tight_parameters', if_exp_51604)
        
        # Assigning a Name to a Attribute (line 462):
        
        # Assigning a Name to a Attribute (line 462):
        
        # Assigning a Name to a Attribute (line 462):
        # Getting the type of 'True' (line 462)
        True_51606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 21), 'True')
        # Getting the type of 'self' (line 462)
        self_51607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 462, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 462)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 462, 8), self_51607, 'stale', True_51606)
        
        # ################# End of 'set_tight_layout(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_tight_layout' in the type store
        # Getting the type of 'stypy_return_type' (line 447)
        stypy_return_type_51608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51608)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_tight_layout'
        return stypy_return_type_51608


    @norecursion
    def autofmt_xdate(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_51609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 35), 'float')
        int_51610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 49), 'int')
        unicode_51611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 56), 'unicode', u'right')
        # Getting the type of 'None' (line 464)
        None_51612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 71), 'None')
        defaults = [float_51609, int_51610, unicode_51611, None_51612]
        # Create a new context for function 'autofmt_xdate'
        module_type_store = module_type_store.open_function_context('autofmt_xdate', 464, 4, False)
        # Assigning a type to the variable 'self' (line 465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 465, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.autofmt_xdate.__dict__.__setitem__('stypy_localization', localization)
        Figure.autofmt_xdate.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.autofmt_xdate.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.autofmt_xdate.__dict__.__setitem__('stypy_function_name', 'Figure.autofmt_xdate')
        Figure.autofmt_xdate.__dict__.__setitem__('stypy_param_names_list', ['bottom', 'rotation', 'ha', 'which'])
        Figure.autofmt_xdate.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.autofmt_xdate.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.autofmt_xdate.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.autofmt_xdate.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.autofmt_xdate.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.autofmt_xdate.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.autofmt_xdate', ['bottom', 'rotation', 'ha', 'which'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'autofmt_xdate', localization, ['bottom', 'rotation', 'ha', 'which'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'autofmt_xdate(...)' code ##################

        unicode_51613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 488, (-1)), 'unicode', u"\n        Date ticklabels often overlap, so it is useful to rotate them\n        and right align them.  Also, a common use case is a number of\n        subplots with shared xaxes where the x-axis is date data.  The\n        ticklabels are often long, and it helps to rotate them on the\n        bottom subplot and turn them off on other subplots, as well as\n        turn off xlabels.\n\n        Parameters\n        ----------\n\n        bottom : scalar\n            The bottom of the subplots for :meth:`subplots_adjust`\n\n        rotation : angle in degrees\n            The rotation of the xtick labels\n\n        ha : string\n            The horizontal alignment of the xticklabels\n\n        which : {None, 'major', 'minor', 'both'}\n            Selects which ticklabels to rotate (default is None which works\n            same as major)\n        ")
        
        # Assigning a Call to a Name (line 489):
        
        # Assigning a Call to a Name (line 489):
        
        # Assigning a Call to a Name (line 489):
        
        # Call to all(...): (line 489)
        # Processing the call arguments (line 489)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 489, 26, True)
        # Calculating comprehension expression
        # Getting the type of 'self' (line 489)
        self_51620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 63), 'self', False)
        # Obtaining the member 'axes' of a type (line 489)
        axes_51621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 63), self_51620, 'axes')
        comprehension_51622 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 489, 26), axes_51621)
        # Assigning a type to the variable 'ax' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 26), 'ax', comprehension_51622)
        
        # Call to hasattr(...): (line 489)
        # Processing the call arguments (line 489)
        # Getting the type of 'ax' (line 489)
        ax_51616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 34), 'ax', False)
        unicode_51617 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 38), 'unicode', u'is_last_row')
        # Processing the call keyword arguments (line 489)
        kwargs_51618 = {}
        # Getting the type of 'hasattr' (line 489)
        hasattr_51615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 26), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 489)
        hasattr_call_result_51619 = invoke(stypy.reporting.localization.Localization(__file__, 489, 26), hasattr_51615, *[ax_51616, unicode_51617], **kwargs_51618)
        
        list_51623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 26), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 489, 26), list_51623, hasattr_call_result_51619)
        # Processing the call keyword arguments (line 489)
        kwargs_51624 = {}
        # Getting the type of 'all' (line 489)
        all_51614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 22), 'all', False)
        # Calling all(args, kwargs) (line 489)
        all_call_result_51625 = invoke(stypy.reporting.localization.Localization(__file__, 489, 22), all_51614, *[list_51623], **kwargs_51624)
        
        # Assigning a type to the variable 'allsubplots' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'allsubplots', all_call_result_51625)
        
        
        
        # Call to len(...): (line 490)
        # Processing the call arguments (line 490)
        # Getting the type of 'self' (line 490)
        self_51627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 15), 'self', False)
        # Obtaining the member 'axes' of a type (line 490)
        axes_51628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 15), self_51627, 'axes')
        # Processing the call keyword arguments (line 490)
        kwargs_51629 = {}
        # Getting the type of 'len' (line 490)
        len_51626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 11), 'len', False)
        # Calling len(args, kwargs) (line 490)
        len_call_result_51630 = invoke(stypy.reporting.localization.Localization(__file__, 490, 11), len_51626, *[axes_51628], **kwargs_51629)
        
        int_51631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 29), 'int')
        # Applying the binary operator '==' (line 490)
        result_eq_51632 = python_operator(stypy.reporting.localization.Localization(__file__, 490, 11), '==', len_call_result_51630, int_51631)
        
        # Testing the type of an if condition (line 490)
        if_condition_51633 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 490, 8), result_eq_51632)
        # Assigning a type to the variable 'if_condition_51633' (line 490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 490, 8), 'if_condition_51633', if_condition_51633)
        # SSA begins for if statement (line 490)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to get_xticklabels(...): (line 491)
        # Processing the call keyword arguments (line 491)
        # Getting the type of 'which' (line 491)
        which_51640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 60), 'which', False)
        keyword_51641 = which_51640
        kwargs_51642 = {'which': keyword_51641}
        
        # Obtaining the type of the subscript
        int_51634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, 35), 'int')
        # Getting the type of 'self' (line 491)
        self_51635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 25), 'self', False)
        # Obtaining the member 'axes' of a type (line 491)
        axes_51636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 25), self_51635, 'axes')
        # Obtaining the member '__getitem__' of a type (line 491)
        getitem___51637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 25), axes_51636, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 491)
        subscript_call_result_51638 = invoke(stypy.reporting.localization.Localization(__file__, 491, 25), getitem___51637, int_51634)
        
        # Obtaining the member 'get_xticklabels' of a type (line 491)
        get_xticklabels_51639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 25), subscript_call_result_51638, 'get_xticklabels')
        # Calling get_xticklabels(args, kwargs) (line 491)
        get_xticklabels_call_result_51643 = invoke(stypy.reporting.localization.Localization(__file__, 491, 25), get_xticklabels_51639, *[], **kwargs_51642)
        
        # Testing the type of a for loop iterable (line 491)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 491, 12), get_xticklabels_call_result_51643)
        # Getting the type of the for loop variable (line 491)
        for_loop_var_51644 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 491, 12), get_xticklabels_call_result_51643)
        # Assigning a type to the variable 'label' (line 491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 12), 'label', for_loop_var_51644)
        # SSA begins for a for statement (line 491)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_ha(...): (line 492)
        # Processing the call arguments (line 492)
        # Getting the type of 'ha' (line 492)
        ha_51647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 29), 'ha', False)
        # Processing the call keyword arguments (line 492)
        kwargs_51648 = {}
        # Getting the type of 'label' (line 492)
        label_51645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 16), 'label', False)
        # Obtaining the member 'set_ha' of a type (line 492)
        set_ha_51646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 16), label_51645, 'set_ha')
        # Calling set_ha(args, kwargs) (line 492)
        set_ha_call_result_51649 = invoke(stypy.reporting.localization.Localization(__file__, 492, 16), set_ha_51646, *[ha_51647], **kwargs_51648)
        
        
        # Call to set_rotation(...): (line 493)
        # Processing the call arguments (line 493)
        # Getting the type of 'rotation' (line 493)
        rotation_51652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 35), 'rotation', False)
        # Processing the call keyword arguments (line 493)
        kwargs_51653 = {}
        # Getting the type of 'label' (line 493)
        label_51650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 16), 'label', False)
        # Obtaining the member 'set_rotation' of a type (line 493)
        set_rotation_51651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 16), label_51650, 'set_rotation')
        # Calling set_rotation(args, kwargs) (line 493)
        set_rotation_call_result_51654 = invoke(stypy.reporting.localization.Localization(__file__, 493, 16), set_rotation_51651, *[rotation_51652], **kwargs_51653)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 490)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'allsubplots' (line 495)
        allsubplots_51655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 15), 'allsubplots')
        # Testing the type of an if condition (line 495)
        if_condition_51656 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 495, 12), allsubplots_51655)
        # Assigning a type to the variable 'if_condition_51656' (line 495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 12), 'if_condition_51656', if_condition_51656)
        # SSA begins for if statement (line 495)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to get_axes(...): (line 496)
        # Processing the call keyword arguments (line 496)
        kwargs_51659 = {}
        # Getting the type of 'self' (line 496)
        self_51657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 26), 'self', False)
        # Obtaining the member 'get_axes' of a type (line 496)
        get_axes_51658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 496, 26), self_51657, 'get_axes')
        # Calling get_axes(args, kwargs) (line 496)
        get_axes_call_result_51660 = invoke(stypy.reporting.localization.Localization(__file__, 496, 26), get_axes_51658, *[], **kwargs_51659)
        
        # Testing the type of a for loop iterable (line 496)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 496, 16), get_axes_call_result_51660)
        # Getting the type of the for loop variable (line 496)
        for_loop_var_51661 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 496, 16), get_axes_call_result_51660)
        # Assigning a type to the variable 'ax' (line 496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 496, 16), 'ax', for_loop_var_51661)
        # SSA begins for a for statement (line 496)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to is_last_row(...): (line 497)
        # Processing the call keyword arguments (line 497)
        kwargs_51664 = {}
        # Getting the type of 'ax' (line 497)
        ax_51662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 23), 'ax', False)
        # Obtaining the member 'is_last_row' of a type (line 497)
        is_last_row_51663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 23), ax_51662, 'is_last_row')
        # Calling is_last_row(args, kwargs) (line 497)
        is_last_row_call_result_51665 = invoke(stypy.reporting.localization.Localization(__file__, 497, 23), is_last_row_51663, *[], **kwargs_51664)
        
        # Testing the type of an if condition (line 497)
        if_condition_51666 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 497, 20), is_last_row_call_result_51665)
        # Assigning a type to the variable 'if_condition_51666' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 20), 'if_condition_51666', if_condition_51666)
        # SSA begins for if statement (line 497)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to get_xticklabels(...): (line 498)
        # Processing the call keyword arguments (line 498)
        # Getting the type of 'which' (line 498)
        which_51669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 62), 'which', False)
        keyword_51670 = which_51669
        kwargs_51671 = {'which': keyword_51670}
        # Getting the type of 'ax' (line 498)
        ax_51667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 37), 'ax', False)
        # Obtaining the member 'get_xticklabels' of a type (line 498)
        get_xticklabels_51668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 37), ax_51667, 'get_xticklabels')
        # Calling get_xticklabels(args, kwargs) (line 498)
        get_xticklabels_call_result_51672 = invoke(stypy.reporting.localization.Localization(__file__, 498, 37), get_xticklabels_51668, *[], **kwargs_51671)
        
        # Testing the type of a for loop iterable (line 498)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 498, 24), get_xticklabels_call_result_51672)
        # Getting the type of the for loop variable (line 498)
        for_loop_var_51673 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 498, 24), get_xticklabels_call_result_51672)
        # Assigning a type to the variable 'label' (line 498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 24), 'label', for_loop_var_51673)
        # SSA begins for a for statement (line 498)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_ha(...): (line 499)
        # Processing the call arguments (line 499)
        # Getting the type of 'ha' (line 499)
        ha_51676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 41), 'ha', False)
        # Processing the call keyword arguments (line 499)
        kwargs_51677 = {}
        # Getting the type of 'label' (line 499)
        label_51674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 28), 'label', False)
        # Obtaining the member 'set_ha' of a type (line 499)
        set_ha_51675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 499, 28), label_51674, 'set_ha')
        # Calling set_ha(args, kwargs) (line 499)
        set_ha_call_result_51678 = invoke(stypy.reporting.localization.Localization(__file__, 499, 28), set_ha_51675, *[ha_51676], **kwargs_51677)
        
        
        # Call to set_rotation(...): (line 500)
        # Processing the call arguments (line 500)
        # Getting the type of 'rotation' (line 500)
        rotation_51681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 47), 'rotation', False)
        # Processing the call keyword arguments (line 500)
        kwargs_51682 = {}
        # Getting the type of 'label' (line 500)
        label_51679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 28), 'label', False)
        # Obtaining the member 'set_rotation' of a type (line 500)
        set_rotation_51680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 500, 28), label_51679, 'set_rotation')
        # Calling set_rotation(args, kwargs) (line 500)
        set_rotation_call_result_51683 = invoke(stypy.reporting.localization.Localization(__file__, 500, 28), set_rotation_51680, *[rotation_51681], **kwargs_51682)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 497)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to get_xticklabels(...): (line 502)
        # Processing the call keyword arguments (line 502)
        # Getting the type of 'which' (line 502)
        which_51686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 62), 'which', False)
        keyword_51687 = which_51686
        kwargs_51688 = {'which': keyword_51687}
        # Getting the type of 'ax' (line 502)
        ax_51684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 37), 'ax', False)
        # Obtaining the member 'get_xticklabels' of a type (line 502)
        get_xticklabels_51685 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 37), ax_51684, 'get_xticklabels')
        # Calling get_xticklabels(args, kwargs) (line 502)
        get_xticklabels_call_result_51689 = invoke(stypy.reporting.localization.Localization(__file__, 502, 37), get_xticklabels_51685, *[], **kwargs_51688)
        
        # Testing the type of a for loop iterable (line 502)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 502, 24), get_xticklabels_call_result_51689)
        # Getting the type of the for loop variable (line 502)
        for_loop_var_51690 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 502, 24), get_xticklabels_call_result_51689)
        # Assigning a type to the variable 'label' (line 502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 24), 'label', for_loop_var_51690)
        # SSA begins for a for statement (line 502)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_visible(...): (line 503)
        # Processing the call arguments (line 503)
        # Getting the type of 'False' (line 503)
        False_51693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 46), 'False', False)
        # Processing the call keyword arguments (line 503)
        kwargs_51694 = {}
        # Getting the type of 'label' (line 503)
        label_51691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 28), 'label', False)
        # Obtaining the member 'set_visible' of a type (line 503)
        set_visible_51692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 28), label_51691, 'set_visible')
        # Calling set_visible(args, kwargs) (line 503)
        set_visible_call_result_51695 = invoke(stypy.reporting.localization.Localization(__file__, 503, 28), set_visible_51692, *[False_51693], **kwargs_51694)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_xlabel(...): (line 504)
        # Processing the call arguments (line 504)
        unicode_51698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 504, 38), 'unicode', u'')
        # Processing the call keyword arguments (line 504)
        kwargs_51699 = {}
        # Getting the type of 'ax' (line 504)
        ax_51696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 24), 'ax', False)
        # Obtaining the member 'set_xlabel' of a type (line 504)
        set_xlabel_51697 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 24), ax_51696, 'set_xlabel')
        # Calling set_xlabel(args, kwargs) (line 504)
        set_xlabel_call_result_51700 = invoke(stypy.reporting.localization.Localization(__file__, 504, 24), set_xlabel_51697, *[unicode_51698], **kwargs_51699)
        
        # SSA join for if statement (line 497)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 495)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 490)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'allsubplots' (line 506)
        allsubplots_51701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 11), 'allsubplots')
        # Testing the type of an if condition (line 506)
        if_condition_51702 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 506, 8), allsubplots_51701)
        # Assigning a type to the variable 'if_condition_51702' (line 506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 8), 'if_condition_51702', if_condition_51702)
        # SSA begins for if statement (line 506)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to subplots_adjust(...): (line 507)
        # Processing the call keyword arguments (line 507)
        # Getting the type of 'bottom' (line 507)
        bottom_51705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 40), 'bottom', False)
        keyword_51706 = bottom_51705
        kwargs_51707 = {'bottom': keyword_51706}
        # Getting the type of 'self' (line 507)
        self_51703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 12), 'self', False)
        # Obtaining the member 'subplots_adjust' of a type (line 507)
        subplots_adjust_51704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 507, 12), self_51703, 'subplots_adjust')
        # Calling subplots_adjust(args, kwargs) (line 507)
        subplots_adjust_call_result_51708 = invoke(stypy.reporting.localization.Localization(__file__, 507, 12), subplots_adjust_51704, *[], **kwargs_51707)
        
        # SSA join for if statement (line 506)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 508):
        
        # Assigning a Name to a Attribute (line 508):
        
        # Assigning a Name to a Attribute (line 508):
        # Getting the type of 'True' (line 508)
        True_51709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 21), 'True')
        # Getting the type of 'self' (line 508)
        self_51710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 508)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 8), self_51710, 'stale', True_51709)
        
        # ################# End of 'autofmt_xdate(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'autofmt_xdate' in the type store
        # Getting the type of 'stypy_return_type' (line 464)
        stypy_return_type_51711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51711)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'autofmt_xdate'
        return stypy_return_type_51711


    @norecursion
    def get_children(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_children'
        module_type_store = module_type_store.open_function_context('get_children', 510, 4, False)
        # Assigning a type to the variable 'self' (line 511)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.get_children.__dict__.__setitem__('stypy_localization', localization)
        Figure.get_children.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.get_children.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.get_children.__dict__.__setitem__('stypy_function_name', 'Figure.get_children')
        Figure.get_children.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.get_children.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.get_children.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.get_children.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.get_children.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.get_children.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.get_children.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.get_children', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_children', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_children(...)' code ##################

        unicode_51712 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 511, 8), 'unicode', u'get a list of artists contained in the figure')
        
        # Assigning a List to a Name (line 512):
        
        # Assigning a List to a Name (line 512):
        
        # Assigning a List to a Name (line 512):
        
        # Obtaining an instance of the builtin type 'list' (line 512)
        list_51713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 512, 19), 'list')
        # Adding type elements to the builtin type 'list' instance (line 512)
        # Adding element type (line 512)
        # Getting the type of 'self' (line 512)
        self_51714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 20), 'self')
        # Obtaining the member 'patch' of a type (line 512)
        patch_51715 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 512, 20), self_51714, 'patch')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 512, 19), list_51713, patch_51715)
        
        # Assigning a type to the variable 'children' (line 512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 512, 8), 'children', list_51713)
        
        # Call to extend(...): (line 513)
        # Processing the call arguments (line 513)
        # Getting the type of 'self' (line 513)
        self_51718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 24), 'self', False)
        # Obtaining the member 'artists' of a type (line 513)
        artists_51719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 24), self_51718, 'artists')
        # Processing the call keyword arguments (line 513)
        kwargs_51720 = {}
        # Getting the type of 'children' (line 513)
        children_51716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 513)
        extend_51717 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 8), children_51716, 'extend')
        # Calling extend(args, kwargs) (line 513)
        extend_call_result_51721 = invoke(stypy.reporting.localization.Localization(__file__, 513, 8), extend_51717, *[artists_51719], **kwargs_51720)
        
        
        # Call to extend(...): (line 514)
        # Processing the call arguments (line 514)
        # Getting the type of 'self' (line 514)
        self_51724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 24), 'self', False)
        # Obtaining the member 'axes' of a type (line 514)
        axes_51725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 24), self_51724, 'axes')
        # Processing the call keyword arguments (line 514)
        kwargs_51726 = {}
        # Getting the type of 'children' (line 514)
        children_51722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 514, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 514)
        extend_51723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 514, 8), children_51722, 'extend')
        # Calling extend(args, kwargs) (line 514)
        extend_call_result_51727 = invoke(stypy.reporting.localization.Localization(__file__, 514, 8), extend_51723, *[axes_51725], **kwargs_51726)
        
        
        # Call to extend(...): (line 515)
        # Processing the call arguments (line 515)
        # Getting the type of 'self' (line 515)
        self_51730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 24), 'self', False)
        # Obtaining the member 'lines' of a type (line 515)
        lines_51731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 24), self_51730, 'lines')
        # Processing the call keyword arguments (line 515)
        kwargs_51732 = {}
        # Getting the type of 'children' (line 515)
        children_51728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 515)
        extend_51729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 8), children_51728, 'extend')
        # Calling extend(args, kwargs) (line 515)
        extend_call_result_51733 = invoke(stypy.reporting.localization.Localization(__file__, 515, 8), extend_51729, *[lines_51731], **kwargs_51732)
        
        
        # Call to extend(...): (line 516)
        # Processing the call arguments (line 516)
        # Getting the type of 'self' (line 516)
        self_51736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 24), 'self', False)
        # Obtaining the member 'patches' of a type (line 516)
        patches_51737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 24), self_51736, 'patches')
        # Processing the call keyword arguments (line 516)
        kwargs_51738 = {}
        # Getting the type of 'children' (line 516)
        children_51734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 516)
        extend_51735 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 8), children_51734, 'extend')
        # Calling extend(args, kwargs) (line 516)
        extend_call_result_51739 = invoke(stypy.reporting.localization.Localization(__file__, 516, 8), extend_51735, *[patches_51737], **kwargs_51738)
        
        
        # Call to extend(...): (line 517)
        # Processing the call arguments (line 517)
        # Getting the type of 'self' (line 517)
        self_51742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 24), 'self', False)
        # Obtaining the member 'texts' of a type (line 517)
        texts_51743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 24), self_51742, 'texts')
        # Processing the call keyword arguments (line 517)
        kwargs_51744 = {}
        # Getting the type of 'children' (line 517)
        children_51740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 517)
        extend_51741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 517, 8), children_51740, 'extend')
        # Calling extend(args, kwargs) (line 517)
        extend_call_result_51745 = invoke(stypy.reporting.localization.Localization(__file__, 517, 8), extend_51741, *[texts_51743], **kwargs_51744)
        
        
        # Call to extend(...): (line 518)
        # Processing the call arguments (line 518)
        # Getting the type of 'self' (line 518)
        self_51748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 24), 'self', False)
        # Obtaining the member 'images' of a type (line 518)
        images_51749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 24), self_51748, 'images')
        # Processing the call keyword arguments (line 518)
        kwargs_51750 = {}
        # Getting the type of 'children' (line 518)
        children_51746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 518)
        extend_51747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 8), children_51746, 'extend')
        # Calling extend(args, kwargs) (line 518)
        extend_call_result_51751 = invoke(stypy.reporting.localization.Localization(__file__, 518, 8), extend_51747, *[images_51749], **kwargs_51750)
        
        
        # Call to extend(...): (line 519)
        # Processing the call arguments (line 519)
        # Getting the type of 'self' (line 519)
        self_51754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 24), 'self', False)
        # Obtaining the member 'legends' of a type (line 519)
        legends_51755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 24), self_51754, 'legends')
        # Processing the call keyword arguments (line 519)
        kwargs_51756 = {}
        # Getting the type of 'children' (line 519)
        children_51752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 8), 'children', False)
        # Obtaining the member 'extend' of a type (line 519)
        extend_51753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 8), children_51752, 'extend')
        # Calling extend(args, kwargs) (line 519)
        extend_call_result_51757 = invoke(stypy.reporting.localization.Localization(__file__, 519, 8), extend_51753, *[legends_51755], **kwargs_51756)
        
        # Getting the type of 'children' (line 520)
        children_51758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 520, 15), 'children')
        # Assigning a type to the variable 'stypy_return_type' (line 520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 520, 8), 'stypy_return_type', children_51758)
        
        # ################# End of 'get_children(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_children' in the type store
        # Getting the type of 'stypy_return_type' (line 510)
        stypy_return_type_51759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51759)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_children'
        return stypy_return_type_51759


    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 522, 4, False)
        # Assigning a type to the variable 'self' (line 523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 523, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.contains.__dict__.__setitem__('stypy_localization', localization)
        Figure.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.contains.__dict__.__setitem__('stypy_function_name', 'Figure.contains')
        Figure.contains.__dict__.__setitem__('stypy_param_names_list', ['mouseevent'])
        Figure.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.contains', ['mouseevent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['mouseevent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        unicode_51760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 527, (-1)), 'unicode', u'\n        Test whether the mouse event occurred on the figure.\n\n        Returns True, {}.\n        ')
        
        
        # Call to callable(...): (line 528)
        # Processing the call arguments (line 528)
        # Getting the type of 'self' (line 528)
        self_51762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 20), 'self', False)
        # Obtaining the member '_contains' of a type (line 528)
        _contains_51763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 20), self_51762, '_contains')
        # Processing the call keyword arguments (line 528)
        kwargs_51764 = {}
        # Getting the type of 'callable' (line 528)
        callable_51761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 528)
        callable_call_result_51765 = invoke(stypy.reporting.localization.Localization(__file__, 528, 11), callable_51761, *[_contains_51763], **kwargs_51764)
        
        # Testing the type of an if condition (line 528)
        if_condition_51766 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 528, 8), callable_call_result_51765)
        # Assigning a type to the variable 'if_condition_51766' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'if_condition_51766', if_condition_51766)
        # SSA begins for if statement (line 528)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _contains(...): (line 529)
        # Processing the call arguments (line 529)
        # Getting the type of 'self' (line 529)
        self_51769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 34), 'self', False)
        # Getting the type of 'mouseevent' (line 529)
        mouseevent_51770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 40), 'mouseevent', False)
        # Processing the call keyword arguments (line 529)
        kwargs_51771 = {}
        # Getting the type of 'self' (line 529)
        self_51767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 19), 'self', False)
        # Obtaining the member '_contains' of a type (line 529)
        _contains_51768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 529, 19), self_51767, '_contains')
        # Calling _contains(args, kwargs) (line 529)
        _contains_call_result_51772 = invoke(stypy.reporting.localization.Localization(__file__, 529, 19), _contains_51768, *[self_51769, mouseevent_51770], **kwargs_51771)
        
        # Assigning a type to the variable 'stypy_return_type' (line 529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 12), 'stypy_return_type', _contains_call_result_51772)
        # SSA join for if statement (line 528)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 530):
        
        # Assigning a Call to a Name (line 530):
        
        # Assigning a Call to a Name (line 530):
        
        # Call to contains(...): (line 530)
        # Processing the call arguments (line 530)
        # Getting the type of 'mouseevent' (line 530)
        mouseevent_51776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 36), 'mouseevent', False)
        # Obtaining the member 'x' of a type (line 530)
        x_51777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 36), mouseevent_51776, 'x')
        # Getting the type of 'mouseevent' (line 530)
        mouseevent_51778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 50), 'mouseevent', False)
        # Obtaining the member 'y' of a type (line 530)
        y_51779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 50), mouseevent_51778, 'y')
        # Processing the call keyword arguments (line 530)
        kwargs_51780 = {}
        # Getting the type of 'self' (line 530)
        self_51773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 17), 'self', False)
        # Obtaining the member 'bbox' of a type (line 530)
        bbox_51774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 17), self_51773, 'bbox')
        # Obtaining the member 'contains' of a type (line 530)
        contains_51775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 17), bbox_51774, 'contains')
        # Calling contains(args, kwargs) (line 530)
        contains_call_result_51781 = invoke(stypy.reporting.localization.Localization(__file__, 530, 17), contains_51775, *[x_51777, y_51779], **kwargs_51780)
        
        # Assigning a type to the variable 'inside' (line 530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 8), 'inside', contains_call_result_51781)
        
        # Obtaining an instance of the builtin type 'tuple' (line 531)
        tuple_51782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 531)
        # Adding element type (line 531)
        # Getting the type of 'inside' (line 531)
        inside_51783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 15), 'inside')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 531, 15), tuple_51782, inside_51783)
        # Adding element type (line 531)
        
        # Obtaining an instance of the builtin type 'dict' (line 531)
        dict_51784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 531, 23), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 531)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 531, 15), tuple_51782, dict_51784)
        
        # Assigning a type to the variable 'stypy_return_type' (line 531)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'stypy_return_type', tuple_51782)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 522)
        stypy_return_type_51785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51785)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_51785


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 533, 4, False)
        # Assigning a type to the variable 'self' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        Figure.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.get_window_extent.__dict__.__setitem__('stypy_function_name', 'Figure.get_window_extent')
        Figure.get_window_extent.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Figure.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Figure.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.get_window_extent', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        unicode_51786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 534, 8), 'unicode', u'get the figure bounding box in display space; kwargs are void')
        # Getting the type of 'self' (line 535)
        self_51787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 535, 15), 'self')
        # Obtaining the member 'bbox' of a type (line 535)
        bbox_51788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 535, 15), self_51787, 'bbox')
        # Assigning a type to the variable 'stypy_return_type' (line 535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 535, 8), 'stypy_return_type', bbox_51788)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 533)
        stypy_return_type_51789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51789)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_51789


    @norecursion
    def suptitle(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'suptitle'
        module_type_store = module_type_store.open_function_context('suptitle', 537, 4, False)
        # Assigning a type to the variable 'self' (line 538)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 538, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.suptitle.__dict__.__setitem__('stypy_localization', localization)
        Figure.suptitle.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.suptitle.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.suptitle.__dict__.__setitem__('stypy_function_name', 'Figure.suptitle')
        Figure.suptitle.__dict__.__setitem__('stypy_param_names_list', ['t'])
        Figure.suptitle.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.suptitle.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Figure.suptitle.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.suptitle.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.suptitle.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.suptitle.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.suptitle', ['t'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'suptitle', localization, ['t'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'suptitle(...)' code ##################

        unicode_51790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 566, (-1)), 'unicode', u"\n        Add a centered title to the figure.\n\n        kwargs are :class:`matplotlib.text.Text` properties.  Using figure\n        coordinates, the defaults are:\n\n          x : 0.5\n            The x location of the text in figure coords\n\n          y : 0.98\n            The y location of the text in figure coords\n\n          horizontalalignment : 'center'\n            The horizontal alignment of the text\n\n          verticalalignment : 'top'\n            The vertical alignment of the text\n\n        If the `fontproperties` keyword argument is given then the\n        rcParams defaults for `fontsize` (`figure.titlesize`) and\n        `fontweight` (`figure.titleweight`) will be ignored in favour\n        of the `FontProperties` defaults.\n\n        A :class:`matplotlib.text.Text` instance is returned.\n\n        Example::\n\n          fig.suptitle('this is the figure title', fontsize=12)\n        ")
        
        # Assigning a Call to a Name (line 567):
        
        # Assigning a Call to a Name (line 567):
        
        # Assigning a Call to a Name (line 567):
        
        # Call to pop(...): (line 567)
        # Processing the call arguments (line 567)
        unicode_51793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 23), 'unicode', u'x')
        float_51794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 567, 28), 'float')
        # Processing the call keyword arguments (line 567)
        kwargs_51795 = {}
        # Getting the type of 'kwargs' (line 567)
        kwargs_51791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 12), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 567)
        pop_51792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 12), kwargs_51791, 'pop')
        # Calling pop(args, kwargs) (line 567)
        pop_call_result_51796 = invoke(stypy.reporting.localization.Localization(__file__, 567, 12), pop_51792, *[unicode_51793, float_51794], **kwargs_51795)
        
        # Assigning a type to the variable 'x' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 8), 'x', pop_call_result_51796)
        
        # Assigning a Call to a Name (line 568):
        
        # Assigning a Call to a Name (line 568):
        
        # Assigning a Call to a Name (line 568):
        
        # Call to pop(...): (line 568)
        # Processing the call arguments (line 568)
        unicode_51799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 23), 'unicode', u'y')
        float_51800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 568, 28), 'float')
        # Processing the call keyword arguments (line 568)
        kwargs_51801 = {}
        # Getting the type of 'kwargs' (line 568)
        kwargs_51797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 12), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 568)
        pop_51798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 568, 12), kwargs_51797, 'pop')
        # Calling pop(args, kwargs) (line 568)
        pop_call_result_51802 = invoke(stypy.reporting.localization.Localization(__file__, 568, 12), pop_51798, *[unicode_51799, float_51800], **kwargs_51801)
        
        # Assigning a type to the variable 'y' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'y', pop_call_result_51802)
        
        
        # Evaluating a boolean operation
        
        unicode_51803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 12), 'unicode', u'horizontalalignment')
        # Getting the type of 'kwargs' (line 570)
        kwargs_51804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 41), 'kwargs')
        # Applying the binary operator 'notin' (line 570)
        result_contains_51805 = python_operator(stypy.reporting.localization.Localization(__file__, 570, 12), 'notin', unicode_51803, kwargs_51804)
        
        
        unicode_51806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 570, 54), 'unicode', u'ha')
        # Getting the type of 'kwargs' (line 570)
        kwargs_51807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 570, 66), 'kwargs')
        # Applying the binary operator 'notin' (line 570)
        result_contains_51808 = python_operator(stypy.reporting.localization.Localization(__file__, 570, 54), 'notin', unicode_51806, kwargs_51807)
        
        # Applying the binary operator 'and' (line 570)
        result_and_keyword_51809 = python_operator(stypy.reporting.localization.Localization(__file__, 570, 11), 'and', result_contains_51805, result_contains_51808)
        
        # Testing the type of an if condition (line 570)
        if_condition_51810 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 570, 8), result_and_keyword_51809)
        # Assigning a type to the variable 'if_condition_51810' (line 570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 570, 8), 'if_condition_51810', if_condition_51810)
        # SSA begins for if statement (line 570)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Subscript (line 571):
        
        # Assigning a Str to a Subscript (line 571):
        
        # Assigning a Str to a Subscript (line 571):
        unicode_51811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 571, 44), 'unicode', u'center')
        # Getting the type of 'kwargs' (line 571)
        kwargs_51812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 12), 'kwargs')
        unicode_51813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 571, 19), 'unicode', u'horizontalalignment')
        # Storing an element on a container (line 571)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 571, 12), kwargs_51812, (unicode_51813, unicode_51811))
        # SSA join for if statement (line 570)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        unicode_51814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 12), 'unicode', u'verticalalignment')
        # Getting the type of 'kwargs' (line 572)
        kwargs_51815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 39), 'kwargs')
        # Applying the binary operator 'notin' (line 572)
        result_contains_51816 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 12), 'notin', unicode_51814, kwargs_51815)
        
        
        unicode_51817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 572, 52), 'unicode', u'va')
        # Getting the type of 'kwargs' (line 572)
        kwargs_51818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 64), 'kwargs')
        # Applying the binary operator 'notin' (line 572)
        result_contains_51819 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 52), 'notin', unicode_51817, kwargs_51818)
        
        # Applying the binary operator 'and' (line 572)
        result_and_keyword_51820 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 11), 'and', result_contains_51816, result_contains_51819)
        
        # Testing the type of an if condition (line 572)
        if_condition_51821 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 572, 8), result_and_keyword_51820)
        # Assigning a type to the variable 'if_condition_51821' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 8), 'if_condition_51821', if_condition_51821)
        # SSA begins for if statement (line 572)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Subscript (line 573):
        
        # Assigning a Str to a Subscript (line 573):
        
        # Assigning a Str to a Subscript (line 573):
        unicode_51822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 42), 'unicode', u'top')
        # Getting the type of 'kwargs' (line 573)
        kwargs_51823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 12), 'kwargs')
        unicode_51824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 19), 'unicode', u'verticalalignment')
        # Storing an element on a container (line 573)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 573, 12), kwargs_51823, (unicode_51824, unicode_51822))
        # SSA join for if statement (line 572)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        unicode_51825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 575, 11), 'unicode', u'fontproperties')
        # Getting the type of 'kwargs' (line 575)
        kwargs_51826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 35), 'kwargs')
        # Applying the binary operator 'notin' (line 575)
        result_contains_51827 = python_operator(stypy.reporting.localization.Localization(__file__, 575, 11), 'notin', unicode_51825, kwargs_51826)
        
        # Testing the type of an if condition (line 575)
        if_condition_51828 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 575, 8), result_contains_51827)
        # Assigning a type to the variable 'if_condition_51828' (line 575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 8), 'if_condition_51828', if_condition_51828)
        # SSA begins for if statement (line 575)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        unicode_51829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 15), 'unicode', u'fontsize')
        # Getting the type of 'kwargs' (line 576)
        kwargs_51830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 33), 'kwargs')
        # Applying the binary operator 'notin' (line 576)
        result_contains_51831 = python_operator(stypy.reporting.localization.Localization(__file__, 576, 15), 'notin', unicode_51829, kwargs_51830)
        
        
        unicode_51832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 44), 'unicode', u'size')
        # Getting the type of 'kwargs' (line 576)
        kwargs_51833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 58), 'kwargs')
        # Applying the binary operator 'notin' (line 576)
        result_contains_51834 = python_operator(stypy.reporting.localization.Localization(__file__, 576, 44), 'notin', unicode_51832, kwargs_51833)
        
        # Applying the binary operator 'and' (line 576)
        result_and_keyword_51835 = python_operator(stypy.reporting.localization.Localization(__file__, 576, 15), 'and', result_contains_51831, result_contains_51834)
        
        # Testing the type of an if condition (line 576)
        if_condition_51836 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 576, 12), result_and_keyword_51835)
        # Assigning a type to the variable 'if_condition_51836' (line 576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 12), 'if_condition_51836', if_condition_51836)
        # SSA begins for if statement (line 576)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Subscript (line 577):
        
        # Assigning a Subscript to a Subscript (line 577):
        
        # Assigning a Subscript to a Subscript (line 577):
        
        # Obtaining the type of the subscript
        unicode_51837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 42), 'unicode', u'figure.titlesize')
        # Getting the type of 'rcParams' (line 577)
        rcParams_51838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 33), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___51839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 33), rcParams_51838, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_51840 = invoke(stypy.reporting.localization.Localization(__file__, 577, 33), getitem___51839, unicode_51837)
        
        # Getting the type of 'kwargs' (line 577)
        kwargs_51841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 16), 'kwargs')
        unicode_51842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 23), 'unicode', u'size')
        # Storing an element on a container (line 577)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 577, 16), kwargs_51841, (unicode_51842, subscript_call_result_51840))
        # SSA join for if statement (line 576)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        unicode_51843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 15), 'unicode', u'fontweight')
        # Getting the type of 'kwargs' (line 578)
        kwargs_51844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 35), 'kwargs')
        # Applying the binary operator 'notin' (line 578)
        result_contains_51845 = python_operator(stypy.reporting.localization.Localization(__file__, 578, 15), 'notin', unicode_51843, kwargs_51844)
        
        
        unicode_51846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 578, 46), 'unicode', u'weight')
        # Getting the type of 'kwargs' (line 578)
        kwargs_51847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 62), 'kwargs')
        # Applying the binary operator 'notin' (line 578)
        result_contains_51848 = python_operator(stypy.reporting.localization.Localization(__file__, 578, 46), 'notin', unicode_51846, kwargs_51847)
        
        # Applying the binary operator 'and' (line 578)
        result_and_keyword_51849 = python_operator(stypy.reporting.localization.Localization(__file__, 578, 15), 'and', result_contains_51845, result_contains_51848)
        
        # Testing the type of an if condition (line 578)
        if_condition_51850 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 578, 12), result_and_keyword_51849)
        # Assigning a type to the variable 'if_condition_51850' (line 578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 578, 12), 'if_condition_51850', if_condition_51850)
        # SSA begins for if statement (line 578)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Subscript (line 579):
        
        # Assigning a Subscript to a Subscript (line 579):
        
        # Assigning a Subscript to a Subscript (line 579):
        
        # Obtaining the type of the subscript
        unicode_51851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 44), 'unicode', u'figure.titleweight')
        # Getting the type of 'rcParams' (line 579)
        rcParams_51852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 35), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 579)
        getitem___51853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 579, 35), rcParams_51852, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 579)
        subscript_call_result_51854 = invoke(stypy.reporting.localization.Localization(__file__, 579, 35), getitem___51853, unicode_51851)
        
        # Getting the type of 'kwargs' (line 579)
        kwargs_51855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 16), 'kwargs')
        unicode_51856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 23), 'unicode', u'weight')
        # Storing an element on a container (line 579)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 579, 16), kwargs_51855, (unicode_51856, subscript_call_result_51854))
        # SSA join for if statement (line 578)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 575)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 581):
        
        # Assigning a Call to a Name (line 581):
        
        # Assigning a Call to a Name (line 581):
        
        # Call to text(...): (line 581)
        # Processing the call arguments (line 581)
        # Getting the type of 'x' (line 581)
        x_51859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 24), 'x', False)
        # Getting the type of 'y' (line 581)
        y_51860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 27), 'y', False)
        # Getting the type of 't' (line 581)
        t_51861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 30), 't', False)
        # Processing the call keyword arguments (line 581)
        # Getting the type of 'kwargs' (line 581)
        kwargs_51862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 35), 'kwargs', False)
        kwargs_51863 = {'kwargs_51862': kwargs_51862}
        # Getting the type of 'self' (line 581)
        self_51857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 14), 'self', False)
        # Obtaining the member 'text' of a type (line 581)
        text_51858 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 581, 14), self_51857, 'text')
        # Calling text(args, kwargs) (line 581)
        text_call_result_51864 = invoke(stypy.reporting.localization.Localization(__file__, 581, 14), text_51858, *[x_51859, y_51860, t_51861], **kwargs_51863)
        
        # Assigning a type to the variable 'sup' (line 581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 8), 'sup', text_call_result_51864)
        
        
        # Getting the type of 'self' (line 582)
        self_51865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 11), 'self')
        # Obtaining the member '_suptitle' of a type (line 582)
        _suptitle_51866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 11), self_51865, '_suptitle')
        # Getting the type of 'None' (line 582)
        None_51867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 33), 'None')
        # Applying the binary operator 'isnot' (line 582)
        result_is_not_51868 = python_operator(stypy.reporting.localization.Localization(__file__, 582, 11), 'isnot', _suptitle_51866, None_51867)
        
        # Testing the type of an if condition (line 582)
        if_condition_51869 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 582, 8), result_is_not_51868)
        # Assigning a type to the variable 'if_condition_51869' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 8), 'if_condition_51869', if_condition_51869)
        # SSA begins for if statement (line 582)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_text(...): (line 583)
        # Processing the call arguments (line 583)
        # Getting the type of 't' (line 583)
        t_51873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 36), 't', False)
        # Processing the call keyword arguments (line 583)
        kwargs_51874 = {}
        # Getting the type of 'self' (line 583)
        self_51870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 583, 12), 'self', False)
        # Obtaining the member '_suptitle' of a type (line 583)
        _suptitle_51871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 12), self_51870, '_suptitle')
        # Obtaining the member 'set_text' of a type (line 583)
        set_text_51872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 583, 12), _suptitle_51871, 'set_text')
        # Calling set_text(args, kwargs) (line 583)
        set_text_call_result_51875 = invoke(stypy.reporting.localization.Localization(__file__, 583, 12), set_text_51872, *[t_51873], **kwargs_51874)
        
        
        # Call to set_position(...): (line 584)
        # Processing the call arguments (line 584)
        
        # Obtaining an instance of the builtin type 'tuple' (line 584)
        tuple_51879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 584, 41), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 584)
        # Adding element type (line 584)
        # Getting the type of 'x' (line 584)
        x_51880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 41), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 584, 41), tuple_51879, x_51880)
        # Adding element type (line 584)
        # Getting the type of 'y' (line 584)
        y_51881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 44), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 584, 41), tuple_51879, y_51881)
        
        # Processing the call keyword arguments (line 584)
        kwargs_51882 = {}
        # Getting the type of 'self' (line 584)
        self_51876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 12), 'self', False)
        # Obtaining the member '_suptitle' of a type (line 584)
        _suptitle_51877 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 12), self_51876, '_suptitle')
        # Obtaining the member 'set_position' of a type (line 584)
        set_position_51878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 12), _suptitle_51877, 'set_position')
        # Calling set_position(args, kwargs) (line 584)
        set_position_call_result_51883 = invoke(stypy.reporting.localization.Localization(__file__, 584, 12), set_position_51878, *[tuple_51879], **kwargs_51882)
        
        
        # Call to update_from(...): (line 585)
        # Processing the call arguments (line 585)
        # Getting the type of 'sup' (line 585)
        sup_51887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 39), 'sup', False)
        # Processing the call keyword arguments (line 585)
        kwargs_51888 = {}
        # Getting the type of 'self' (line 585)
        self_51884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 12), 'self', False)
        # Obtaining the member '_suptitle' of a type (line 585)
        _suptitle_51885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 12), self_51884, '_suptitle')
        # Obtaining the member 'update_from' of a type (line 585)
        update_from_51886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 12), _suptitle_51885, 'update_from')
        # Calling update_from(args, kwargs) (line 585)
        update_from_call_result_51889 = invoke(stypy.reporting.localization.Localization(__file__, 585, 12), update_from_51886, *[sup_51887], **kwargs_51888)
        
        
        # Call to remove(...): (line 586)
        # Processing the call keyword arguments (line 586)
        kwargs_51892 = {}
        # Getting the type of 'sup' (line 586)
        sup_51890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 12), 'sup', False)
        # Obtaining the member 'remove' of a type (line 586)
        remove_51891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 586, 12), sup_51890, 'remove')
        # Calling remove(args, kwargs) (line 586)
        remove_call_result_51893 = invoke(stypy.reporting.localization.Localization(__file__, 586, 12), remove_51891, *[], **kwargs_51892)
        
        # SSA branch for the else part of an if statement (line 582)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 588):
        
        # Assigning a Name to a Attribute (line 588):
        
        # Assigning a Name to a Attribute (line 588):
        # Getting the type of 'sup' (line 588)
        sup_51894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 29), 'sup')
        # Getting the type of 'self' (line 588)
        self_51895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 12), 'self')
        # Setting the type of the member '_suptitle' of a type (line 588)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 588, 12), self_51895, '_suptitle', sup_51894)
        # SSA join for if statement (line 582)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 590):
        
        # Assigning a Name to a Attribute (line 590):
        
        # Assigning a Name to a Attribute (line 590):
        # Getting the type of 'True' (line 590)
        True_51896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 21), 'True')
        # Getting the type of 'self' (line 590)
        self_51897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 590, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 590)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 590, 8), self_51897, 'stale', True_51896)
        # Getting the type of 'self' (line 591)
        self_51898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 15), 'self')
        # Obtaining the member '_suptitle' of a type (line 591)
        _suptitle_51899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 591, 15), self_51898, '_suptitle')
        # Assigning a type to the variable 'stypy_return_type' (line 591)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 8), 'stypy_return_type', _suptitle_51899)
        
        # ################# End of 'suptitle(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'suptitle' in the type store
        # Getting the type of 'stypy_return_type' (line 537)
        stypy_return_type_51900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51900)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'suptitle'
        return stypy_return_type_51900


    @norecursion
    def set_canvas(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_canvas'
        module_type_store = module_type_store.open_function_context('set_canvas', 593, 4, False)
        # Assigning a type to the variable 'self' (line 594)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 594, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.set_canvas.__dict__.__setitem__('stypy_localization', localization)
        Figure.set_canvas.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.set_canvas.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.set_canvas.__dict__.__setitem__('stypy_function_name', 'Figure.set_canvas')
        Figure.set_canvas.__dict__.__setitem__('stypy_param_names_list', ['canvas'])
        Figure.set_canvas.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.set_canvas.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.set_canvas.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.set_canvas.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.set_canvas.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.set_canvas.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.set_canvas', ['canvas'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_canvas', localization, ['canvas'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_canvas(...)' code ##################

        unicode_51901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 598, (-1)), 'unicode', u'\n        Set the canvas that contains the figure\n\n        ACCEPTS: a FigureCanvas instance\n        ')
        
        # Assigning a Name to a Attribute (line 599):
        
        # Assigning a Name to a Attribute (line 599):
        
        # Assigning a Name to a Attribute (line 599):
        # Getting the type of 'canvas' (line 599)
        canvas_51902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 22), 'canvas')
        # Getting the type of 'self' (line 599)
        self_51903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 599)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 8), self_51903, 'canvas', canvas_51902)
        
        # ################# End of 'set_canvas(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_canvas' in the type store
        # Getting the type of 'stypy_return_type' (line 593)
        stypy_return_type_51904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51904)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_canvas'
        return stypy_return_type_51904


    @norecursion
    def hold(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 602)
        None_51905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 21), 'None')
        defaults = [None_51905]
        # Create a new context for function 'hold'
        module_type_store = module_type_store.open_function_context('hold', 601, 4, False)
        # Assigning a type to the variable 'self' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.hold.__dict__.__setitem__('stypy_localization', localization)
        Figure.hold.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.hold.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.hold.__dict__.__setitem__('stypy_function_name', 'Figure.hold')
        Figure.hold.__dict__.__setitem__('stypy_param_names_list', ['b'])
        Figure.hold.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.hold.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.hold.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.hold.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.hold.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.hold.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.hold', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'hold', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'hold(...)' code ##################

        unicode_51906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, (-1)), 'unicode', u'\n        Set the hold state.  If hold is None (default), toggle the\n        hold state.  Else set the hold state to boolean value b.\n\n        e.g.::\n\n            hold()      # toggle hold\n            hold(True)  # hold is on\n            hold(False) # hold is off\n\n        All "hold" machinery is deprecated.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 615)
        # Getting the type of 'b' (line 615)
        b_51907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 11), 'b')
        # Getting the type of 'None' (line 615)
        None_51908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 16), 'None')
        
        (may_be_51909, more_types_in_union_51910) = may_be_none(b_51907, None_51908)

        if may_be_51909:

            if more_types_in_union_51910:
                # Runtime conditional SSA (line 615)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a UnaryOp to a Attribute (line 616):
            
            # Assigning a UnaryOp to a Attribute (line 616):
            
            # Assigning a UnaryOp to a Attribute (line 616):
            
            # Getting the type of 'self' (line 616)
            self_51911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 29), 'self')
            # Obtaining the member '_hold' of a type (line 616)
            _hold_51912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 29), self_51911, '_hold')
            # Applying the 'not' unary operator (line 616)
            result_not__51913 = python_operator(stypy.reporting.localization.Localization(__file__, 616, 25), 'not', _hold_51912)
            
            # Getting the type of 'self' (line 616)
            self_51914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 12), 'self')
            # Setting the type of the member '_hold' of a type (line 616)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 616, 12), self_51914, '_hold', result_not__51913)

            if more_types_in_union_51910:
                # Runtime conditional SSA for else branch (line 615)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_51909) or more_types_in_union_51910):
            
            # Assigning a Name to a Attribute (line 618):
            
            # Assigning a Name to a Attribute (line 618):
            
            # Assigning a Name to a Attribute (line 618):
            # Getting the type of 'b' (line 618)
            b_51915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 25), 'b')
            # Getting the type of 'self' (line 618)
            self_51916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 12), 'self')
            # Setting the type of the member '_hold' of a type (line 618)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 12), self_51916, '_hold', b_51915)

            if (may_be_51909 and more_types_in_union_51910):
                # SSA join for if statement (line 615)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of 'hold(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'hold' in the type store
        # Getting the type of 'stypy_return_type' (line 601)
        stypy_return_type_51917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_51917)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'hold'
        return stypy_return_type_51917


    @norecursion
    def figimage(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_51918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 621, 20), 'int')
        int_51919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 622, 20), 'int')
        # Getting the type of 'None' (line 623)
        None_51920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 623, 23), 'None')
        # Getting the type of 'None' (line 624)
        None_51921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 22), 'None')
        # Getting the type of 'None' (line 625)
        None_51922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 22), 'None')
        # Getting the type of 'None' (line 626)
        None_51923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 626, 22), 'None')
        # Getting the type of 'None' (line 627)
        None_51924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 22), 'None')
        # Getting the type of 'None' (line 628)
        None_51925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 628, 24), 'None')
        # Getting the type of 'False' (line 629)
        False_51926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 24), 'False')
        defaults = [int_51918, int_51919, None_51920, None_51921, None_51922, None_51923, None_51924, None_51925, False_51926]
        # Create a new context for function 'figimage'
        module_type_store = module_type_store.open_function_context('figimage', 620, 4, False)
        # Assigning a type to the variable 'self' (line 621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.figimage.__dict__.__setitem__('stypy_localization', localization)
        Figure.figimage.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.figimage.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.figimage.__dict__.__setitem__('stypy_function_name', 'Figure.figimage')
        Figure.figimage.__dict__.__setitem__('stypy_param_names_list', ['X', 'xo', 'yo', 'alpha', 'norm', 'cmap', 'vmin', 'vmax', 'origin', 'resize'])
        Figure.figimage.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.figimage.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Figure.figimage.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.figimage.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.figimage.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.figimage.__dict__.__setitem__('stypy_declared_arg_number', 11)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.figimage', ['X', 'xo', 'yo', 'alpha', 'norm', 'cmap', 'vmin', 'vmax', 'origin', 'resize'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'figimage', localization, ['X', 'xo', 'yo', 'alpha', 'norm', 'cmap', 'vmin', 'vmax', 'origin', 'resize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'figimage(...)' code ##################

        unicode_51927 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 685, (-1)), 'unicode', u'\n        Adds a non-resampled image to the figure.\n\n        call signatures::\n\n          figimage(X, **kwargs)\n\n        adds a non-resampled array *X* to the figure.\n\n        ::\n\n          figimage(X, xo, yo)\n\n        with pixel offsets *xo*, *yo*,\n\n        *X* must be a float array:\n\n        * If *X* is MxN, assume luminance (grayscale)\n        * If *X* is MxNx3, assume RGB\n        * If *X* is MxNx4, assume RGBA\n\n        Optional keyword arguments:\n\n          =========   =========================================================\n          Keyword     Description\n          =========   =========================================================\n          resize      a boolean, True or False. If "True", then re-size the\n                      Figure to match the given image size.\n          xo or yo    An integer, the *x* and *y* image offset in pixels\n          cmap        a :class:`matplotlib.colors.Colormap` instance, e.g.,\n                      cm.jet. If *None*, default to the rc ``image.cmap``\n                      value\n          norm        a :class:`matplotlib.colors.Normalize` instance. The\n                      default is normalization().  This scales luminance -> 0-1\n          vmin|vmax   are used to scale a luminance image to 0-1.  If either\n                      is *None*, the min and max of the luminance values will\n                      be used.  Note if you pass a norm instance, the settings\n                      for *vmin* and *vmax* will be ignored.\n          alpha       the alpha blending value, default is *None*\n          origin      [ \'upper\' | \'lower\' ] Indicates where the [0,0] index of\n                      the array is in the upper left or lower left corner of\n                      the axes. Defaults to the rc image.origin value\n          =========   =========================================================\n\n        figimage complements the axes image\n        (:meth:`~matplotlib.axes.Axes.imshow`) which will be resampled\n        to fit the current axes.  If you want a resampled image to\n        fill the entire figure, you can define an\n        :class:`~matplotlib.axes.Axes` with extent [0,0,1,1].\n\n        An :class:`matplotlib.image.FigureImage` instance is returned.\n\n        Additional kwargs are Artist kwargs passed on to\n        :class:`~matplotlib.image.FigureImage`\n        ')
        
        
        # Getting the type of 'self' (line 687)
        self_51928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 15), 'self')
        # Obtaining the member '_hold' of a type (line 687)
        _hold_51929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 15), self_51928, '_hold')
        # Applying the 'not' unary operator (line 687)
        result_not__51930 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 11), 'not', _hold_51929)
        
        # Testing the type of an if condition (line 687)
        if_condition_51931 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 687, 8), result_not__51930)
        # Assigning a type to the variable 'if_condition_51931' (line 687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 8), 'if_condition_51931', if_condition_51931)
        # SSA begins for if statement (line 687)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to clf(...): (line 688)
        # Processing the call keyword arguments (line 688)
        kwargs_51934 = {}
        # Getting the type of 'self' (line 688)
        self_51932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 12), 'self', False)
        # Obtaining the member 'clf' of a type (line 688)
        clf_51933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 12), self_51932, 'clf')
        # Calling clf(args, kwargs) (line 688)
        clf_call_result_51935 = invoke(stypy.reporting.localization.Localization(__file__, 688, 12), clf_51933, *[], **kwargs_51934)
        
        # SSA join for if statement (line 687)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'resize' (line 690)
        resize_51936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 11), 'resize')
        # Testing the type of an if condition (line 690)
        if_condition_51937 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 690, 8), resize_51936)
        # Assigning a type to the variable 'if_condition_51937' (line 690)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 690, 8), 'if_condition_51937', if_condition_51937)
        # SSA begins for if statement (line 690)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 691):
        
        # Assigning a Call to a Name (line 691):
        
        # Assigning a Call to a Name (line 691):
        
        # Call to get_dpi(...): (line 691)
        # Processing the call keyword arguments (line 691)
        kwargs_51940 = {}
        # Getting the type of 'self' (line 691)
        self_51938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 18), 'self', False)
        # Obtaining the member 'get_dpi' of a type (line 691)
        get_dpi_51939 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 18), self_51938, 'get_dpi')
        # Calling get_dpi(args, kwargs) (line 691)
        get_dpi_call_result_51941 = invoke(stypy.reporting.localization.Localization(__file__, 691, 18), get_dpi_51939, *[], **kwargs_51940)
        
        # Assigning a type to the variable 'dpi' (line 691)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 12), 'dpi', get_dpi_call_result_51941)
        
        # Assigning a ListComp to a Name (line 692):
        
        # Assigning a ListComp to a Name (line 692):
        
        # Assigning a ListComp to a Name (line 692):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Obtaining an instance of the builtin type 'tuple' (line 692)
        tuple_51948 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 48), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 692)
        # Adding element type (line 692)
        
        # Obtaining the type of the subscript
        int_51949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 56), 'int')
        # Getting the type of 'X' (line 692)
        X_51950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 48), 'X')
        # Obtaining the member 'shape' of a type (line 692)
        shape_51951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 48), X_51950, 'shape')
        # Obtaining the member '__getitem__' of a type (line 692)
        getitem___51952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 48), shape_51951, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 692)
        subscript_call_result_51953 = invoke(stypy.reporting.localization.Localization(__file__, 692, 48), getitem___51952, int_51949)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 692, 48), tuple_51948, subscript_call_result_51953)
        # Adding element type (line 692)
        
        # Obtaining the type of the subscript
        int_51954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 68), 'int')
        # Getting the type of 'X' (line 692)
        X_51955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 60), 'X')
        # Obtaining the member 'shape' of a type (line 692)
        shape_51956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 60), X_51955, 'shape')
        # Obtaining the member '__getitem__' of a type (line 692)
        getitem___51957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 60), shape_51956, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 692)
        subscript_call_result_51958 = invoke(stypy.reporting.localization.Localization(__file__, 692, 60), getitem___51957, int_51954)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 692, 48), tuple_51948, subscript_call_result_51958)
        
        comprehension_51959 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 692, 23), tuple_51948)
        # Assigning a type to the variable 'x' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 23), 'x', comprehension_51959)
        # Getting the type of 'x' (line 692)
        x_51942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 23), 'x')
        
        # Call to float(...): (line 692)
        # Processing the call arguments (line 692)
        # Getting the type of 'dpi' (line 692)
        dpi_51944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 33), 'dpi', False)
        # Processing the call keyword arguments (line 692)
        kwargs_51945 = {}
        # Getting the type of 'float' (line 692)
        float_51943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 27), 'float', False)
        # Calling float(args, kwargs) (line 692)
        float_call_result_51946 = invoke(stypy.reporting.localization.Localization(__file__, 692, 27), float_51943, *[dpi_51944], **kwargs_51945)
        
        # Applying the binary operator 'div' (line 692)
        result_div_51947 = python_operator(stypy.reporting.localization.Localization(__file__, 692, 23), 'div', x_51942, float_call_result_51946)
        
        list_51960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 692, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 692, 23), list_51960, result_div_51947)
        # Assigning a type to the variable 'figsize' (line 692)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 12), 'figsize', list_51960)
        
        # Call to set_size_inches(...): (line 693)
        # Processing the call arguments (line 693)
        # Getting the type of 'figsize' (line 693)
        figsize_51963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 33), 'figsize', False)
        # Processing the call keyword arguments (line 693)
        # Getting the type of 'True' (line 693)
        True_51964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 50), 'True', False)
        keyword_51965 = True_51964
        kwargs_51966 = {'forward': keyword_51965}
        # Getting the type of 'self' (line 693)
        self_51961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 693, 12), 'self', False)
        # Obtaining the member 'set_size_inches' of a type (line 693)
        set_size_inches_51962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 693, 12), self_51961, 'set_size_inches')
        # Calling set_size_inches(args, kwargs) (line 693)
        set_size_inches_call_result_51967 = invoke(stypy.reporting.localization.Localization(__file__, 693, 12), set_size_inches_51962, *[figsize_51963], **kwargs_51966)
        
        # SSA join for if statement (line 690)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 695):
        
        # Assigning a Call to a Name (line 695):
        
        # Assigning a Call to a Name (line 695):
        
        # Call to FigureImage(...): (line 695)
        # Processing the call arguments (line 695)
        # Getting the type of 'self' (line 695)
        self_51969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 25), 'self', False)
        # Getting the type of 'cmap' (line 695)
        cmap_51970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 31), 'cmap', False)
        # Getting the type of 'norm' (line 695)
        norm_51971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 37), 'norm', False)
        # Getting the type of 'xo' (line 695)
        xo_51972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 43), 'xo', False)
        # Getting the type of 'yo' (line 695)
        yo_51973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 47), 'yo', False)
        # Getting the type of 'origin' (line 695)
        origin_51974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 51), 'origin', False)
        # Processing the call keyword arguments (line 695)
        # Getting the type of 'kwargs' (line 695)
        kwargs_51975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 61), 'kwargs', False)
        kwargs_51976 = {'kwargs_51975': kwargs_51975}
        # Getting the type of 'FigureImage' (line 695)
        FigureImage_51968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 13), 'FigureImage', False)
        # Calling FigureImage(args, kwargs) (line 695)
        FigureImage_call_result_51977 = invoke(stypy.reporting.localization.Localization(__file__, 695, 13), FigureImage_51968, *[self_51969, cmap_51970, norm_51971, xo_51972, yo_51973, origin_51974], **kwargs_51976)
        
        # Assigning a type to the variable 'im' (line 695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 695, 8), 'im', FigureImage_call_result_51977)
        
        # Assigning a Name to a Attribute (line 696):
        
        # Assigning a Name to a Attribute (line 696):
        
        # Assigning a Name to a Attribute (line 696):
        # Getting the type of '_stale_figure_callback' (line 696)
        _stale_figure_callback_51978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 28), '_stale_figure_callback')
        # Getting the type of 'im' (line 696)
        im_51979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 8), 'im')
        # Setting the type of the member 'stale_callback' of a type (line 696)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 696, 8), im_51979, 'stale_callback', _stale_figure_callback_51978)
        
        # Call to set_array(...): (line 698)
        # Processing the call arguments (line 698)
        # Getting the type of 'X' (line 698)
        X_51982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 21), 'X', False)
        # Processing the call keyword arguments (line 698)
        kwargs_51983 = {}
        # Getting the type of 'im' (line 698)
        im_51980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 8), 'im', False)
        # Obtaining the member 'set_array' of a type (line 698)
        set_array_51981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 8), im_51980, 'set_array')
        # Calling set_array(args, kwargs) (line 698)
        set_array_call_result_51984 = invoke(stypy.reporting.localization.Localization(__file__, 698, 8), set_array_51981, *[X_51982], **kwargs_51983)
        
        
        # Call to set_alpha(...): (line 699)
        # Processing the call arguments (line 699)
        # Getting the type of 'alpha' (line 699)
        alpha_51987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 21), 'alpha', False)
        # Processing the call keyword arguments (line 699)
        kwargs_51988 = {}
        # Getting the type of 'im' (line 699)
        im_51985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'im', False)
        # Obtaining the member 'set_alpha' of a type (line 699)
        set_alpha_51986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 699, 8), im_51985, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 699)
        set_alpha_call_result_51989 = invoke(stypy.reporting.localization.Localization(__file__, 699, 8), set_alpha_51986, *[alpha_51987], **kwargs_51988)
        
        
        # Type idiom detected: calculating its left and rigth part (line 700)
        # Getting the type of 'norm' (line 700)
        norm_51990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 11), 'norm')
        # Getting the type of 'None' (line 700)
        None_51991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 19), 'None')
        
        (may_be_51992, more_types_in_union_51993) = may_be_none(norm_51990, None_51991)

        if may_be_51992:

            if more_types_in_union_51993:
                # Runtime conditional SSA (line 700)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_clim(...): (line 701)
            # Processing the call arguments (line 701)
            # Getting the type of 'vmin' (line 701)
            vmin_51996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 24), 'vmin', False)
            # Getting the type of 'vmax' (line 701)
            vmax_51997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 30), 'vmax', False)
            # Processing the call keyword arguments (line 701)
            kwargs_51998 = {}
            # Getting the type of 'im' (line 701)
            im_51994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 701, 12), 'im', False)
            # Obtaining the member 'set_clim' of a type (line 701)
            set_clim_51995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 701, 12), im_51994, 'set_clim')
            # Calling set_clim(args, kwargs) (line 701)
            set_clim_call_result_51999 = invoke(stypy.reporting.localization.Localization(__file__, 701, 12), set_clim_51995, *[vmin_51996, vmax_51997], **kwargs_51998)
            

            if more_types_in_union_51993:
                # SSA join for if statement (line 700)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to append(...): (line 702)
        # Processing the call arguments (line 702)
        # Getting the type of 'im' (line 702)
        im_52003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 27), 'im', False)
        # Processing the call keyword arguments (line 702)
        kwargs_52004 = {}
        # Getting the type of 'self' (line 702)
        self_52000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 8), 'self', False)
        # Obtaining the member 'images' of a type (line 702)
        images_52001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 702, 8), self_52000, 'images')
        # Obtaining the member 'append' of a type (line 702)
        append_52002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 702, 8), images_52001, 'append')
        # Calling append(args, kwargs) (line 702)
        append_call_result_52005 = invoke(stypy.reporting.localization.Localization(__file__, 702, 8), append_52002, *[im_52003], **kwargs_52004)
        
        
        # Assigning a Lambda to a Attribute (line 703):
        
        # Assigning a Lambda to a Attribute (line 703):
        
        # Assigning a Lambda to a Attribute (line 703):

        @norecursion
        def _stypy_temp_lambda_12(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_12'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_12', 703, 28, True)
            # Passed parameters checking function
            _stypy_temp_lambda_12.stypy_localization = localization
            _stypy_temp_lambda_12.stypy_type_of_self = None
            _stypy_temp_lambda_12.stypy_type_store = module_type_store
            _stypy_temp_lambda_12.stypy_function_name = '_stypy_temp_lambda_12'
            _stypy_temp_lambda_12.stypy_param_names_list = ['h']
            _stypy_temp_lambda_12.stypy_varargs_param_name = None
            _stypy_temp_lambda_12.stypy_kwargs_param_name = None
            _stypy_temp_lambda_12.stypy_call_defaults = defaults
            _stypy_temp_lambda_12.stypy_call_varargs = varargs
            _stypy_temp_lambda_12.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_12', ['h'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_12', ['h'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to remove(...): (line 703)
            # Processing the call arguments (line 703)
            # Getting the type of 'h' (line 703)
            h_52009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 57), 'h', False)
            # Processing the call keyword arguments (line 703)
            kwargs_52010 = {}
            # Getting the type of 'self' (line 703)
            self_52006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 38), 'self', False)
            # Obtaining the member 'images' of a type (line 703)
            images_52007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 38), self_52006, 'images')
            # Obtaining the member 'remove' of a type (line 703)
            remove_52008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 38), images_52007, 'remove')
            # Calling remove(args, kwargs) (line 703)
            remove_call_result_52011 = invoke(stypy.reporting.localization.Localization(__file__, 703, 38), remove_52008, *[h_52009], **kwargs_52010)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 703)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 28), 'stypy_return_type', remove_call_result_52011)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_12' in the type store
            # Getting the type of 'stypy_return_type' (line 703)
            stypy_return_type_52012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 28), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_52012)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_12'
            return stypy_return_type_52012

        # Assigning a type to the variable '_stypy_temp_lambda_12' (line 703)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 28), '_stypy_temp_lambda_12', _stypy_temp_lambda_12)
        # Getting the type of '_stypy_temp_lambda_12' (line 703)
        _stypy_temp_lambda_12_52013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 28), '_stypy_temp_lambda_12')
        # Getting the type of 'im' (line 703)
        im_52014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'im')
        # Setting the type of the member '_remove_method' of a type (line 703)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 8), im_52014, '_remove_method', _stypy_temp_lambda_12_52013)
        
        # Assigning a Name to a Attribute (line 704):
        
        # Assigning a Name to a Attribute (line 704):
        
        # Assigning a Name to a Attribute (line 704):
        # Getting the type of 'True' (line 704)
        True_52015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 21), 'True')
        # Getting the type of 'self' (line 704)
        self_52016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 704, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 704)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 704, 8), self_52016, 'stale', True_52015)
        # Getting the type of 'im' (line 705)
        im_52017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 15), 'im')
        # Assigning a type to the variable 'stypy_return_type' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 'stypy_return_type', im_52017)
        
        # ################# End of 'figimage(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'figimage' in the type store
        # Getting the type of 'stypy_return_type' (line 620)
        stypy_return_type_52018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52018)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'figimage'
        return stypy_return_type_52018


    @norecursion
    def set_size_inches(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 707)
        None_52019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 35), 'None')
        # Getting the type of 'True' (line 707)
        True_52020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 49), 'True')
        defaults = [None_52019, True_52020]
        # Create a new context for function 'set_size_inches'
        module_type_store = module_type_store.open_function_context('set_size_inches', 707, 4, False)
        # Assigning a type to the variable 'self' (line 708)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.set_size_inches.__dict__.__setitem__('stypy_localization', localization)
        Figure.set_size_inches.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.set_size_inches.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.set_size_inches.__dict__.__setitem__('stypy_function_name', 'Figure.set_size_inches')
        Figure.set_size_inches.__dict__.__setitem__('stypy_param_names_list', ['w', 'h', 'forward'])
        Figure.set_size_inches.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.set_size_inches.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.set_size_inches.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.set_size_inches.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.set_size_inches.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.set_size_inches.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.set_size_inches', ['w', 'h', 'forward'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_size_inches', localization, ['w', 'h', 'forward'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_size_inches(...)' code ##################

        unicode_52021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, (-1)), 'unicode', u'Set the figure size in inches (1in == 2.54cm)\n\n        Usage ::\n\n             fig.set_size_inches(w, h)  # OR\n             fig.set_size_inches((w, h))\n\n        optional kwarg *forward=True* will cause the canvas size to be\n        automatically updated; e.g., you can resize the figure window\n        from the shell\n\n        ACCEPTS: a w, h tuple with w, h in inches\n\n        See Also\n        --------\n\n        matplotlib.Figure.get_size_inches\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 729)
        # Getting the type of 'h' (line 729)
        h_52022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 11), 'h')
        # Getting the type of 'None' (line 729)
        None_52023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 16), 'None')
        
        (may_be_52024, more_types_in_union_52025) = may_be_none(h_52022, None_52023)

        if may_be_52024:

            if more_types_in_union_52025:
                # Runtime conditional SSA (line 729)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Tuple (line 730):
            
            # Assigning a Subscript to a Name (line 730):
            
            # Assigning a Subscript to a Name (line 730):
            
            # Obtaining the type of the subscript
            int_52026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 730, 12), 'int')
            # Getting the type of 'w' (line 730)
            w_52027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 19), 'w')
            # Obtaining the member '__getitem__' of a type (line 730)
            getitem___52028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 12), w_52027, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 730)
            subscript_call_result_52029 = invoke(stypy.reporting.localization.Localization(__file__, 730, 12), getitem___52028, int_52026)
            
            # Assigning a type to the variable 'tuple_var_assignment_50768' (line 730)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 12), 'tuple_var_assignment_50768', subscript_call_result_52029)
            
            # Assigning a Subscript to a Name (line 730):
            
            # Assigning a Subscript to a Name (line 730):
            
            # Obtaining the type of the subscript
            int_52030 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 730, 12), 'int')
            # Getting the type of 'w' (line 730)
            w_52031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 19), 'w')
            # Obtaining the member '__getitem__' of a type (line 730)
            getitem___52032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 730, 12), w_52031, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 730)
            subscript_call_result_52033 = invoke(stypy.reporting.localization.Localization(__file__, 730, 12), getitem___52032, int_52030)
            
            # Assigning a type to the variable 'tuple_var_assignment_50769' (line 730)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 12), 'tuple_var_assignment_50769', subscript_call_result_52033)
            
            # Assigning a Name to a Name (line 730):
            
            # Assigning a Name to a Name (line 730):
            # Getting the type of 'tuple_var_assignment_50768' (line 730)
            tuple_var_assignment_50768_52034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 12), 'tuple_var_assignment_50768')
            # Assigning a type to the variable 'w' (line 730)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 12), 'w', tuple_var_assignment_50768_52034)
            
            # Assigning a Name to a Name (line 730):
            
            # Assigning a Name to a Name (line 730):
            # Getting the type of 'tuple_var_assignment_50769' (line 730)
            tuple_var_assignment_50769_52035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 730, 12), 'tuple_var_assignment_50769')
            # Assigning a type to the variable 'h' (line 730)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 730, 15), 'h', tuple_var_assignment_50769_52035)

            if more_types_in_union_52025:
                # SSA join for if statement (line 729)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Call to all(...): (line 731)
        # Processing the call arguments (line 731)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 731, 19, True)
        # Calculating comprehension expression
        
        # Obtaining an instance of the builtin type 'tuple' (line 731)
        tuple_52042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 731)
        # Adding element type (line 731)
        # Getting the type of 'w' (line 731)
        w_52043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 44), 'w', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 44), tuple_52042, w_52043)
        # Adding element type (line 731)
        # Getting the type of 'h' (line 731)
        h_52044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 47), 'h', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 44), tuple_52042, h_52044)
        
        comprehension_52045 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 19), tuple_52042)
        # Assigning a type to the variable '_' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 19), '_', comprehension_52045)
        
        # Call to isfinite(...): (line 731)
        # Processing the call arguments (line 731)
        # Getting the type of '_' (line 731)
        __52039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 31), '_', False)
        # Processing the call keyword arguments (line 731)
        kwargs_52040 = {}
        # Getting the type of 'np' (line 731)
        np_52037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 19), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 731)
        isfinite_52038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 731, 19), np_52037, 'isfinite')
        # Calling isfinite(args, kwargs) (line 731)
        isfinite_call_result_52041 = invoke(stypy.reporting.localization.Localization(__file__, 731, 19), isfinite_52038, *[__52039], **kwargs_52040)
        
        list_52046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 731, 19), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 731, 19), list_52046, isfinite_call_result_52041)
        # Processing the call keyword arguments (line 731)
        kwargs_52047 = {}
        # Getting the type of 'all' (line 731)
        all_52036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 15), 'all', False)
        # Calling all(args, kwargs) (line 731)
        all_call_result_52048 = invoke(stypy.reporting.localization.Localization(__file__, 731, 15), all_52036, *[list_52046], **kwargs_52047)
        
        # Applying the 'not' unary operator (line 731)
        result_not__52049 = python_operator(stypy.reporting.localization.Localization(__file__, 731, 11), 'not', all_call_result_52048)
        
        # Testing the type of an if condition (line 731)
        if_condition_52050 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 731, 8), result_not__52049)
        # Assigning a type to the variable 'if_condition_52050' (line 731)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 8), 'if_condition_52050', if_condition_52050)
        # SSA begins for if statement (line 731)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 732)
        # Processing the call arguments (line 732)
        
        # Call to format(...): (line 732)
        # Processing the call arguments (line 732)
        # Getting the type of 'w' (line 733)
        w_52054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 47), 'w', False)
        # Getting the type of 'h' (line 733)
        h_52055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 50), 'h', False)
        # Processing the call keyword arguments (line 732)
        kwargs_52056 = {}
        unicode_52052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 29), 'unicode', u'figure size must be finite not ({}, {})')
        # Obtaining the member 'format' of a type (line 732)
        format_52053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 29), unicode_52052, 'format')
        # Calling format(args, kwargs) (line 732)
        format_call_result_52057 = invoke(stypy.reporting.localization.Localization(__file__, 732, 29), format_52053, *[w_52054, h_52055], **kwargs_52056)
        
        # Processing the call keyword arguments (line 732)
        kwargs_52058 = {}
        # Getting the type of 'ValueError' (line 732)
        ValueError_52051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 732)
        ValueError_call_result_52059 = invoke(stypy.reporting.localization.Localization(__file__, 732, 18), ValueError_52051, *[format_call_result_52057], **kwargs_52058)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 732, 12), ValueError_call_result_52059, 'raise parameter', BaseException)
        # SSA join for if statement (line 731)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Attribute (line 734):
        
        # Assigning a Tuple to a Attribute (line 734):
        
        # Assigning a Tuple to a Attribute (line 734):
        
        # Obtaining an instance of the builtin type 'tuple' (line 734)
        tuple_52060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 734, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 734)
        # Adding element type (line 734)
        # Getting the type of 'w' (line 734)
        w_52061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 30), 'w')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 734, 30), tuple_52060, w_52061)
        # Adding element type (line 734)
        # Getting the type of 'h' (line 734)
        h_52062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 33), 'h')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 734, 30), tuple_52060, h_52062)
        
        # Getting the type of 'self' (line 734)
        self_52063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 8), 'self')
        # Obtaining the member 'bbox_inches' of a type (line 734)
        bbox_inches_52064 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 8), self_52063, 'bbox_inches')
        # Setting the type of the member 'p1' of a type (line 734)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 734, 8), bbox_inches_52064, 'p1', tuple_52060)
        
        # Getting the type of 'forward' (line 736)
        forward_52065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 11), 'forward')
        # Testing the type of an if condition (line 736)
        if_condition_52066 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 736, 8), forward_52065)
        # Assigning a type to the variable 'if_condition_52066' (line 736)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 8), 'if_condition_52066', if_condition_52066)
        # SSA begins for if statement (line 736)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 737):
        
        # Assigning a Call to a Name (line 737):
        
        # Assigning a Call to a Name (line 737):
        
        # Call to getattr(...): (line 737)
        # Processing the call arguments (line 737)
        # Getting the type of 'self' (line 737)
        self_52068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 29), 'self', False)
        unicode_52069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 737, 35), 'unicode', u'canvas')
        # Processing the call keyword arguments (line 737)
        kwargs_52070 = {}
        # Getting the type of 'getattr' (line 737)
        getattr_52067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 737, 21), 'getattr', False)
        # Calling getattr(args, kwargs) (line 737)
        getattr_call_result_52071 = invoke(stypy.reporting.localization.Localization(__file__, 737, 21), getattr_52067, *[self_52068, unicode_52069], **kwargs_52070)
        
        # Assigning a type to the variable 'canvas' (line 737)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 737, 12), 'canvas', getattr_call_result_52071)
        
        # Type idiom detected: calculating its left and rigth part (line 738)
        # Getting the type of 'canvas' (line 738)
        canvas_52072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 12), 'canvas')
        # Getting the type of 'None' (line 738)
        None_52073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 29), 'None')
        
        (may_be_52074, more_types_in_union_52075) = may_not_be_none(canvas_52072, None_52073)

        if may_be_52074:

            if more_types_in_union_52075:
                # Runtime conditional SSA (line 738)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 739):
            
            # Assigning a Call to a Name (line 739):
            
            # Assigning a Call to a Name (line 739):
            
            # Call to getattr(...): (line 739)
            # Processing the call arguments (line 739)
            # Getting the type of 'self' (line 739)
            self_52077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 32), 'self', False)
            # Obtaining the member 'canvas' of a type (line 739)
            canvas_52078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 739, 32), self_52077, 'canvas')
            unicode_52079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 739, 45), 'unicode', u'_dpi_ratio')
            int_52080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 739, 59), 'int')
            # Processing the call keyword arguments (line 739)
            kwargs_52081 = {}
            # Getting the type of 'getattr' (line 739)
            getattr_52076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 739, 24), 'getattr', False)
            # Calling getattr(args, kwargs) (line 739)
            getattr_call_result_52082 = invoke(stypy.reporting.localization.Localization(__file__, 739, 24), getattr_52076, *[canvas_52078, unicode_52079, int_52080], **kwargs_52081)
            
            # Assigning a type to the variable 'ratio' (line 739)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 739, 16), 'ratio', getattr_call_result_52082)
            
            # Assigning a BinOp to a Name (line 740):
            
            # Assigning a BinOp to a Name (line 740):
            
            # Assigning a BinOp to a Name (line 740):
            # Getting the type of 'self' (line 740)
            self_52083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 25), 'self')
            # Obtaining the member 'dpi' of a type (line 740)
            dpi_52084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 740, 25), self_52083, 'dpi')
            # Getting the type of 'ratio' (line 740)
            ratio_52085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 740, 36), 'ratio')
            # Applying the binary operator 'div' (line 740)
            result_div_52086 = python_operator(stypy.reporting.localization.Localization(__file__, 740, 25), 'div', dpi_52084, ratio_52085)
            
            # Assigning a type to the variable 'dpival' (line 740)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 740, 16), 'dpival', result_div_52086)
            
            # Assigning a BinOp to a Name (line 741):
            
            # Assigning a BinOp to a Name (line 741):
            
            # Assigning a BinOp to a Name (line 741):
            # Getting the type of 'w' (line 741)
            w_52087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 26), 'w')
            # Getting the type of 'dpival' (line 741)
            dpival_52088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 30), 'dpival')
            # Applying the binary operator '*' (line 741)
            result_mul_52089 = python_operator(stypy.reporting.localization.Localization(__file__, 741, 26), '*', w_52087, dpival_52088)
            
            # Assigning a type to the variable 'canvasw' (line 741)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 16), 'canvasw', result_mul_52089)
            
            # Assigning a BinOp to a Name (line 742):
            
            # Assigning a BinOp to a Name (line 742):
            
            # Assigning a BinOp to a Name (line 742):
            # Getting the type of 'h' (line 742)
            h_52090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 26), 'h')
            # Getting the type of 'dpival' (line 742)
            dpival_52091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 742, 30), 'dpival')
            # Applying the binary operator '*' (line 742)
            result_mul_52092 = python_operator(stypy.reporting.localization.Localization(__file__, 742, 26), '*', h_52090, dpival_52091)
            
            # Assigning a type to the variable 'canvash' (line 742)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 742, 16), 'canvash', result_mul_52092)
            
            # Assigning a Call to a Name (line 743):
            
            # Assigning a Call to a Name (line 743):
            
            # Assigning a Call to a Name (line 743):
            
            # Call to getattr(...): (line 743)
            # Processing the call arguments (line 743)
            # Getting the type of 'self' (line 743)
            self_52094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 34), 'self', False)
            # Obtaining the member 'canvas' of a type (line 743)
            canvas_52095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 34), self_52094, 'canvas')
            unicode_52096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 743, 47), 'unicode', u'manager')
            # Getting the type of 'None' (line 743)
            None_52097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 58), 'None', False)
            # Processing the call keyword arguments (line 743)
            kwargs_52098 = {}
            # Getting the type of 'getattr' (line 743)
            getattr_52093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 26), 'getattr', False)
            # Calling getattr(args, kwargs) (line 743)
            getattr_call_result_52099 = invoke(stypy.reporting.localization.Localization(__file__, 743, 26), getattr_52093, *[canvas_52095, unicode_52096, None_52097], **kwargs_52098)
            
            # Assigning a type to the variable 'manager' (line 743)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 16), 'manager', getattr_call_result_52099)
            
            # Type idiom detected: calculating its left and rigth part (line 744)
            # Getting the type of 'manager' (line 744)
            manager_52100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 16), 'manager')
            # Getting the type of 'None' (line 744)
            None_52101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 744, 34), 'None')
            
            (may_be_52102, more_types_in_union_52103) = may_not_be_none(manager_52100, None_52101)

            if may_be_52102:

                if more_types_in_union_52103:
                    # Runtime conditional SSA (line 744)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Call to resize(...): (line 745)
                # Processing the call arguments (line 745)
                
                # Call to int(...): (line 745)
                # Processing the call arguments (line 745)
                # Getting the type of 'canvasw' (line 745)
                canvasw_52107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 39), 'canvasw', False)
                # Processing the call keyword arguments (line 745)
                kwargs_52108 = {}
                # Getting the type of 'int' (line 745)
                int_52106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 35), 'int', False)
                # Calling int(args, kwargs) (line 745)
                int_call_result_52109 = invoke(stypy.reporting.localization.Localization(__file__, 745, 35), int_52106, *[canvasw_52107], **kwargs_52108)
                
                
                # Call to int(...): (line 745)
                # Processing the call arguments (line 745)
                # Getting the type of 'canvash' (line 745)
                canvash_52111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 53), 'canvash', False)
                # Processing the call keyword arguments (line 745)
                kwargs_52112 = {}
                # Getting the type of 'int' (line 745)
                int_52110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 49), 'int', False)
                # Calling int(args, kwargs) (line 745)
                int_call_result_52113 = invoke(stypy.reporting.localization.Localization(__file__, 745, 49), int_52110, *[canvash_52111], **kwargs_52112)
                
                # Processing the call keyword arguments (line 745)
                kwargs_52114 = {}
                # Getting the type of 'manager' (line 745)
                manager_52104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 745, 20), 'manager', False)
                # Obtaining the member 'resize' of a type (line 745)
                resize_52105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 745, 20), manager_52104, 'resize')
                # Calling resize(args, kwargs) (line 745)
                resize_call_result_52115 = invoke(stypy.reporting.localization.Localization(__file__, 745, 20), resize_52105, *[int_call_result_52109, int_call_result_52113], **kwargs_52114)
                

                if more_types_in_union_52103:
                    # SSA join for if statement (line 744)
                    module_type_store = module_type_store.join_ssa_context()


            

            if more_types_in_union_52075:
                # SSA join for if statement (line 738)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 736)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 746):
        
        # Assigning a Name to a Attribute (line 746):
        
        # Assigning a Name to a Attribute (line 746):
        # Getting the type of 'True' (line 746)
        True_52116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 21), 'True')
        # Getting the type of 'self' (line 746)
        self_52117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 746)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 8), self_52117, 'stale', True_52116)
        
        # ################# End of 'set_size_inches(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_size_inches' in the type store
        # Getting the type of 'stypy_return_type' (line 707)
        stypy_return_type_52118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52118)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_size_inches'
        return stypy_return_type_52118


    @norecursion
    def get_size_inches(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_size_inches'
        module_type_store = module_type_store.open_function_context('get_size_inches', 748, 4, False)
        # Assigning a type to the variable 'self' (line 749)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 749, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.get_size_inches.__dict__.__setitem__('stypy_localization', localization)
        Figure.get_size_inches.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.get_size_inches.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.get_size_inches.__dict__.__setitem__('stypy_function_name', 'Figure.get_size_inches')
        Figure.get_size_inches.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.get_size_inches.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.get_size_inches.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.get_size_inches.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.get_size_inches.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.get_size_inches.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.get_size_inches.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.get_size_inches', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_size_inches', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_size_inches(...)' code ##################

        unicode_52119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 762, (-1)), 'unicode', u'\n        Returns the current size of the figure in inches (1in == 2.54cm)\n        as an numpy array.\n\n        Returns\n        -------\n        size : ndarray\n           The size of the figure in inches\n\n        See Also\n        --------\n\n        matplotlib.Figure.set_size_inches\n        ')
        
        # Call to array(...): (line 763)
        # Processing the call arguments (line 763)
        # Getting the type of 'self' (line 763)
        self_52122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 24), 'self', False)
        # Obtaining the member 'bbox_inches' of a type (line 763)
        bbox_inches_52123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 24), self_52122, 'bbox_inches')
        # Obtaining the member 'p1' of a type (line 763)
        p1_52124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 24), bbox_inches_52123, 'p1')
        # Processing the call keyword arguments (line 763)
        kwargs_52125 = {}
        # Getting the type of 'np' (line 763)
        np_52120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 15), 'np', False)
        # Obtaining the member 'array' of a type (line 763)
        array_52121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 15), np_52120, 'array')
        # Calling array(args, kwargs) (line 763)
        array_call_result_52126 = invoke(stypy.reporting.localization.Localization(__file__, 763, 15), array_52121, *[p1_52124], **kwargs_52125)
        
        # Assigning a type to the variable 'stypy_return_type' (line 763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 8), 'stypy_return_type', array_call_result_52126)
        
        # ################# End of 'get_size_inches(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_size_inches' in the type store
        # Getting the type of 'stypy_return_type' (line 748)
        stypy_return_type_52127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52127)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_size_inches'
        return stypy_return_type_52127


    @norecursion
    def get_edgecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_edgecolor'
        module_type_store = module_type_store.open_function_context('get_edgecolor', 765, 4, False)
        # Assigning a type to the variable 'self' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.get_edgecolor.__dict__.__setitem__('stypy_localization', localization)
        Figure.get_edgecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.get_edgecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.get_edgecolor.__dict__.__setitem__('stypy_function_name', 'Figure.get_edgecolor')
        Figure.get_edgecolor.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.get_edgecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.get_edgecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.get_edgecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.get_edgecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.get_edgecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.get_edgecolor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.get_edgecolor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_edgecolor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_edgecolor(...)' code ##################

        unicode_52128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 766, 8), 'unicode', u'Get the edge color of the Figure rectangle')
        
        # Call to get_edgecolor(...): (line 767)
        # Processing the call keyword arguments (line 767)
        kwargs_52132 = {}
        # Getting the type of 'self' (line 767)
        self_52129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 767, 15), 'self', False)
        # Obtaining the member 'patch' of a type (line 767)
        patch_52130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 767, 15), self_52129, 'patch')
        # Obtaining the member 'get_edgecolor' of a type (line 767)
        get_edgecolor_52131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 767, 15), patch_52130, 'get_edgecolor')
        # Calling get_edgecolor(args, kwargs) (line 767)
        get_edgecolor_call_result_52133 = invoke(stypy.reporting.localization.Localization(__file__, 767, 15), get_edgecolor_52131, *[], **kwargs_52132)
        
        # Assigning a type to the variable 'stypy_return_type' (line 767)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 767, 8), 'stypy_return_type', get_edgecolor_call_result_52133)
        
        # ################# End of 'get_edgecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_edgecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 765)
        stypy_return_type_52134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52134)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_edgecolor'
        return stypy_return_type_52134


    @norecursion
    def get_facecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_facecolor'
        module_type_store = module_type_store.open_function_context('get_facecolor', 769, 4, False)
        # Assigning a type to the variable 'self' (line 770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.get_facecolor.__dict__.__setitem__('stypy_localization', localization)
        Figure.get_facecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.get_facecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.get_facecolor.__dict__.__setitem__('stypy_function_name', 'Figure.get_facecolor')
        Figure.get_facecolor.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.get_facecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.get_facecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.get_facecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.get_facecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.get_facecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.get_facecolor.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.get_facecolor', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_facecolor', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_facecolor(...)' code ##################

        unicode_52135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 770, 8), 'unicode', u'Get the face color of the Figure rectangle')
        
        # Call to get_facecolor(...): (line 771)
        # Processing the call keyword arguments (line 771)
        kwargs_52139 = {}
        # Getting the type of 'self' (line 771)
        self_52136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 771, 15), 'self', False)
        # Obtaining the member 'patch' of a type (line 771)
        patch_52137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 15), self_52136, 'patch')
        # Obtaining the member 'get_facecolor' of a type (line 771)
        get_facecolor_52138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 771, 15), patch_52137, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 771)
        get_facecolor_call_result_52140 = invoke(stypy.reporting.localization.Localization(__file__, 771, 15), get_facecolor_52138, *[], **kwargs_52139)
        
        # Assigning a type to the variable 'stypy_return_type' (line 771)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 771, 8), 'stypy_return_type', get_facecolor_call_result_52140)
        
        # ################# End of 'get_facecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_facecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 769)
        stypy_return_type_52141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52141)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_facecolor'
        return stypy_return_type_52141


    @norecursion
    def get_figwidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_figwidth'
        module_type_store = module_type_store.open_function_context('get_figwidth', 773, 4, False)
        # Assigning a type to the variable 'self' (line 774)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 774, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.get_figwidth.__dict__.__setitem__('stypy_localization', localization)
        Figure.get_figwidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.get_figwidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.get_figwidth.__dict__.__setitem__('stypy_function_name', 'Figure.get_figwidth')
        Figure.get_figwidth.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.get_figwidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.get_figwidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.get_figwidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.get_figwidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.get_figwidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.get_figwidth.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.get_figwidth', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_figwidth', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_figwidth(...)' code ##################

        unicode_52142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 774, 8), 'unicode', u'Return the figwidth as a float')
        # Getting the type of 'self' (line 775)
        self_52143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 775, 15), 'self')
        # Obtaining the member 'bbox_inches' of a type (line 775)
        bbox_inches_52144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 15), self_52143, 'bbox_inches')
        # Obtaining the member 'width' of a type (line 775)
        width_52145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 775, 15), bbox_inches_52144, 'width')
        # Assigning a type to the variable 'stypy_return_type' (line 775)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 775, 8), 'stypy_return_type', width_52145)
        
        # ################# End of 'get_figwidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_figwidth' in the type store
        # Getting the type of 'stypy_return_type' (line 773)
        stypy_return_type_52146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52146)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_figwidth'
        return stypy_return_type_52146


    @norecursion
    def get_figheight(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_figheight'
        module_type_store = module_type_store.open_function_context('get_figheight', 777, 4, False)
        # Assigning a type to the variable 'self' (line 778)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 778, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.get_figheight.__dict__.__setitem__('stypy_localization', localization)
        Figure.get_figheight.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.get_figheight.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.get_figheight.__dict__.__setitem__('stypy_function_name', 'Figure.get_figheight')
        Figure.get_figheight.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.get_figheight.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.get_figheight.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.get_figheight.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.get_figheight.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.get_figheight.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.get_figheight.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.get_figheight', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_figheight', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_figheight(...)' code ##################

        unicode_52147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 778, 8), 'unicode', u'Return the figheight as a float')
        # Getting the type of 'self' (line 779)
        self_52148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 779, 15), 'self')
        # Obtaining the member 'bbox_inches' of a type (line 779)
        bbox_inches_52149 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 15), self_52148, 'bbox_inches')
        # Obtaining the member 'height' of a type (line 779)
        height_52150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 779, 15), bbox_inches_52149, 'height')
        # Assigning a type to the variable 'stypy_return_type' (line 779)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 779, 8), 'stypy_return_type', height_52150)
        
        # ################# End of 'get_figheight(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_figheight' in the type store
        # Getting the type of 'stypy_return_type' (line 777)
        stypy_return_type_52151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 777, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52151)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_figheight'
        return stypy_return_type_52151


    @norecursion
    def get_dpi(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_dpi'
        module_type_store = module_type_store.open_function_context('get_dpi', 781, 4, False)
        # Assigning a type to the variable 'self' (line 782)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 782, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.get_dpi.__dict__.__setitem__('stypy_localization', localization)
        Figure.get_dpi.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.get_dpi.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.get_dpi.__dict__.__setitem__('stypy_function_name', 'Figure.get_dpi')
        Figure.get_dpi.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.get_dpi.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.get_dpi.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.get_dpi.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.get_dpi.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.get_dpi.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.get_dpi.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.get_dpi', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_dpi', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_dpi(...)' code ##################

        unicode_52152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 782, 8), 'unicode', u'Return the dpi as a float')
        # Getting the type of 'self' (line 783)
        self_52153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 15), 'self')
        # Obtaining the member 'dpi' of a type (line 783)
        dpi_52154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 783, 15), self_52153, 'dpi')
        # Assigning a type to the variable 'stypy_return_type' (line 783)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 783, 8), 'stypy_return_type', dpi_52154)
        
        # ################# End of 'get_dpi(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_dpi' in the type store
        # Getting the type of 'stypy_return_type' (line 781)
        stypy_return_type_52155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52155)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_dpi'
        return stypy_return_type_52155


    @norecursion
    def get_frameon(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_frameon'
        module_type_store = module_type_store.open_function_context('get_frameon', 785, 4, False)
        # Assigning a type to the variable 'self' (line 786)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.get_frameon.__dict__.__setitem__('stypy_localization', localization)
        Figure.get_frameon.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.get_frameon.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.get_frameon.__dict__.__setitem__('stypy_function_name', 'Figure.get_frameon')
        Figure.get_frameon.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.get_frameon.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.get_frameon.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.get_frameon.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.get_frameon.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.get_frameon.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.get_frameon.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.get_frameon', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_frameon', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_frameon(...)' code ##################

        unicode_52156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 786, 8), 'unicode', u'get the boolean indicating frameon')
        # Getting the type of 'self' (line 787)
        self_52157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 787, 15), 'self')
        # Obtaining the member 'frameon' of a type (line 787)
        frameon_52158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 787, 15), self_52157, 'frameon')
        # Assigning a type to the variable 'stypy_return_type' (line 787)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 787, 8), 'stypy_return_type', frameon_52158)
        
        # ################# End of 'get_frameon(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_frameon' in the type store
        # Getting the type of 'stypy_return_type' (line 785)
        stypy_return_type_52159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 785, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52159)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_frameon'
        return stypy_return_type_52159


    @norecursion
    def set_edgecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_edgecolor'
        module_type_store = module_type_store.open_function_context('set_edgecolor', 789, 4, False)
        # Assigning a type to the variable 'self' (line 790)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 790, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.set_edgecolor.__dict__.__setitem__('stypy_localization', localization)
        Figure.set_edgecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.set_edgecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.set_edgecolor.__dict__.__setitem__('stypy_function_name', 'Figure.set_edgecolor')
        Figure.set_edgecolor.__dict__.__setitem__('stypy_param_names_list', ['color'])
        Figure.set_edgecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.set_edgecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.set_edgecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.set_edgecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.set_edgecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.set_edgecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.set_edgecolor', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_edgecolor', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_edgecolor(...)' code ##################

        unicode_52160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 794, (-1)), 'unicode', u'\n        Set the edge color of the Figure rectangle\n\n        ACCEPTS: any matplotlib color - see help(colors)\n        ')
        
        # Call to set_edgecolor(...): (line 795)
        # Processing the call arguments (line 795)
        # Getting the type of 'color' (line 795)
        color_52164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 33), 'color', False)
        # Processing the call keyword arguments (line 795)
        kwargs_52165 = {}
        # Getting the type of 'self' (line 795)
        self_52161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 795)
        patch_52162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 8), self_52161, 'patch')
        # Obtaining the member 'set_edgecolor' of a type (line 795)
        set_edgecolor_52163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 8), patch_52162, 'set_edgecolor')
        # Calling set_edgecolor(args, kwargs) (line 795)
        set_edgecolor_call_result_52166 = invoke(stypy.reporting.localization.Localization(__file__, 795, 8), set_edgecolor_52163, *[color_52164], **kwargs_52165)
        
        
        # ################# End of 'set_edgecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_edgecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 789)
        stypy_return_type_52167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 789, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52167)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_edgecolor'
        return stypy_return_type_52167


    @norecursion
    def set_facecolor(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_facecolor'
        module_type_store = module_type_store.open_function_context('set_facecolor', 797, 4, False)
        # Assigning a type to the variable 'self' (line 798)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 798, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.set_facecolor.__dict__.__setitem__('stypy_localization', localization)
        Figure.set_facecolor.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.set_facecolor.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.set_facecolor.__dict__.__setitem__('stypy_function_name', 'Figure.set_facecolor')
        Figure.set_facecolor.__dict__.__setitem__('stypy_param_names_list', ['color'])
        Figure.set_facecolor.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.set_facecolor.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.set_facecolor.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.set_facecolor.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.set_facecolor.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.set_facecolor.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.set_facecolor', ['color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_facecolor', localization, ['color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_facecolor(...)' code ##################

        unicode_52168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 802, (-1)), 'unicode', u'\n        Set the face color of the Figure rectangle\n\n        ACCEPTS: any matplotlib color - see help(colors)\n        ')
        
        # Call to set_facecolor(...): (line 803)
        # Processing the call arguments (line 803)
        # Getting the type of 'color' (line 803)
        color_52172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 33), 'color', False)
        # Processing the call keyword arguments (line 803)
        kwargs_52173 = {}
        # Getting the type of 'self' (line 803)
        self_52169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'self', False)
        # Obtaining the member 'patch' of a type (line 803)
        patch_52170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 8), self_52169, 'patch')
        # Obtaining the member 'set_facecolor' of a type (line 803)
        set_facecolor_52171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 8), patch_52170, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 803)
        set_facecolor_call_result_52174 = invoke(stypy.reporting.localization.Localization(__file__, 803, 8), set_facecolor_52171, *[color_52172], **kwargs_52173)
        
        
        # ################# End of 'set_facecolor(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_facecolor' in the type store
        # Getting the type of 'stypy_return_type' (line 797)
        stypy_return_type_52175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52175)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_facecolor'
        return stypy_return_type_52175


    @norecursion
    def set_dpi(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_dpi'
        module_type_store = module_type_store.open_function_context('set_dpi', 805, 4, False)
        # Assigning a type to the variable 'self' (line 806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.set_dpi.__dict__.__setitem__('stypy_localization', localization)
        Figure.set_dpi.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.set_dpi.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.set_dpi.__dict__.__setitem__('stypy_function_name', 'Figure.set_dpi')
        Figure.set_dpi.__dict__.__setitem__('stypy_param_names_list', ['val'])
        Figure.set_dpi.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.set_dpi.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.set_dpi.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.set_dpi.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.set_dpi.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.set_dpi.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.set_dpi', ['val'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_dpi', localization, ['val'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_dpi(...)' code ##################

        unicode_52176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, (-1)), 'unicode', u'\n        Set the dots-per-inch of the figure\n\n        ACCEPTS: float\n        ')
        
        # Assigning a Name to a Attribute (line 811):
        
        # Assigning a Name to a Attribute (line 811):
        
        # Assigning a Name to a Attribute (line 811):
        # Getting the type of 'val' (line 811)
        val_52177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 19), 'val')
        # Getting the type of 'self' (line 811)
        self_52178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'self')
        # Setting the type of the member 'dpi' of a type (line 811)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 8), self_52178, 'dpi', val_52177)
        
        # Assigning a Name to a Attribute (line 812):
        
        # Assigning a Name to a Attribute (line 812):
        
        # Assigning a Name to a Attribute (line 812):
        # Getting the type of 'True' (line 812)
        True_52179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 21), 'True')
        # Getting the type of 'self' (line 812)
        self_52180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 812)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 8), self_52180, 'stale', True_52179)
        
        # ################# End of 'set_dpi(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_dpi' in the type store
        # Getting the type of 'stypy_return_type' (line 805)
        stypy_return_type_52181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52181)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_dpi'
        return stypy_return_type_52181


    @norecursion
    def set_figwidth(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 814)
        False_52182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 40), 'False')
        defaults = [False_52182]
        # Create a new context for function 'set_figwidth'
        module_type_store = module_type_store.open_function_context('set_figwidth', 814, 4, False)
        # Assigning a type to the variable 'self' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.set_figwidth.__dict__.__setitem__('stypy_localization', localization)
        Figure.set_figwidth.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.set_figwidth.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.set_figwidth.__dict__.__setitem__('stypy_function_name', 'Figure.set_figwidth')
        Figure.set_figwidth.__dict__.__setitem__('stypy_param_names_list', ['val', 'forward'])
        Figure.set_figwidth.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.set_figwidth.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.set_figwidth.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.set_figwidth.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.set_figwidth.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.set_figwidth.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.set_figwidth', ['val', 'forward'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_figwidth', localization, ['val', 'forward'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_figwidth(...)' code ##################

        unicode_52183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, (-1)), 'unicode', u'\n        Set the width of the figure in inches\n\n        ACCEPTS: float\n        ')
        
        # Call to set_size_inches(...): (line 820)
        # Processing the call arguments (line 820)
        # Getting the type of 'val' (line 820)
        val_52186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 29), 'val', False)
        
        # Call to get_figheight(...): (line 820)
        # Processing the call keyword arguments (line 820)
        kwargs_52189 = {}
        # Getting the type of 'self' (line 820)
        self_52187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 34), 'self', False)
        # Obtaining the member 'get_figheight' of a type (line 820)
        get_figheight_52188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 34), self_52187, 'get_figheight')
        # Calling get_figheight(args, kwargs) (line 820)
        get_figheight_call_result_52190 = invoke(stypy.reporting.localization.Localization(__file__, 820, 34), get_figheight_52188, *[], **kwargs_52189)
        
        # Processing the call keyword arguments (line 820)
        # Getting the type of 'forward' (line 820)
        forward_52191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 64), 'forward', False)
        keyword_52192 = forward_52191
        kwargs_52193 = {'forward': keyword_52192}
        # Getting the type of 'self' (line 820)
        self_52184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'self', False)
        # Obtaining the member 'set_size_inches' of a type (line 820)
        set_size_inches_52185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 8), self_52184, 'set_size_inches')
        # Calling set_size_inches(args, kwargs) (line 820)
        set_size_inches_call_result_52194 = invoke(stypy.reporting.localization.Localization(__file__, 820, 8), set_size_inches_52185, *[val_52186, get_figheight_call_result_52190], **kwargs_52193)
        
        
        # ################# End of 'set_figwidth(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_figwidth' in the type store
        # Getting the type of 'stypy_return_type' (line 814)
        stypy_return_type_52195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52195)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_figwidth'
        return stypy_return_type_52195


    @norecursion
    def set_figheight(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 822)
        False_52196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 41), 'False')
        defaults = [False_52196]
        # Create a new context for function 'set_figheight'
        module_type_store = module_type_store.open_function_context('set_figheight', 822, 4, False)
        # Assigning a type to the variable 'self' (line 823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.set_figheight.__dict__.__setitem__('stypy_localization', localization)
        Figure.set_figheight.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.set_figheight.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.set_figheight.__dict__.__setitem__('stypy_function_name', 'Figure.set_figheight')
        Figure.set_figheight.__dict__.__setitem__('stypy_param_names_list', ['val', 'forward'])
        Figure.set_figheight.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.set_figheight.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.set_figheight.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.set_figheight.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.set_figheight.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.set_figheight.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.set_figheight', ['val', 'forward'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_figheight', localization, ['val', 'forward'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_figheight(...)' code ##################

        unicode_52197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, (-1)), 'unicode', u'\n        Set the height of the figure in inches\n\n        ACCEPTS: float\n        ')
        
        # Call to set_size_inches(...): (line 828)
        # Processing the call arguments (line 828)
        
        # Call to get_figwidth(...): (line 828)
        # Processing the call keyword arguments (line 828)
        kwargs_52202 = {}
        # Getting the type of 'self' (line 828)
        self_52200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 29), 'self', False)
        # Obtaining the member 'get_figwidth' of a type (line 828)
        get_figwidth_52201 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 29), self_52200, 'get_figwidth')
        # Calling get_figwidth(args, kwargs) (line 828)
        get_figwidth_call_result_52203 = invoke(stypy.reporting.localization.Localization(__file__, 828, 29), get_figwidth_52201, *[], **kwargs_52202)
        
        # Getting the type of 'val' (line 828)
        val_52204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 50), 'val', False)
        # Processing the call keyword arguments (line 828)
        # Getting the type of 'forward' (line 828)
        forward_52205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 63), 'forward', False)
        keyword_52206 = forward_52205
        kwargs_52207 = {'forward': keyword_52206}
        # Getting the type of 'self' (line 828)
        self_52198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 8), 'self', False)
        # Obtaining the member 'set_size_inches' of a type (line 828)
        set_size_inches_52199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 8), self_52198, 'set_size_inches')
        # Calling set_size_inches(args, kwargs) (line 828)
        set_size_inches_call_result_52208 = invoke(stypy.reporting.localization.Localization(__file__, 828, 8), set_size_inches_52199, *[get_figwidth_call_result_52203, val_52204], **kwargs_52207)
        
        
        # ################# End of 'set_figheight(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_figheight' in the type store
        # Getting the type of 'stypy_return_type' (line 822)
        stypy_return_type_52209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52209)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_figheight'
        return stypy_return_type_52209


    @norecursion
    def set_frameon(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_frameon'
        module_type_store = module_type_store.open_function_context('set_frameon', 830, 4, False)
        # Assigning a type to the variable 'self' (line 831)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 831, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.set_frameon.__dict__.__setitem__('stypy_localization', localization)
        Figure.set_frameon.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.set_frameon.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.set_frameon.__dict__.__setitem__('stypy_function_name', 'Figure.set_frameon')
        Figure.set_frameon.__dict__.__setitem__('stypy_param_names_list', ['b'])
        Figure.set_frameon.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.set_frameon.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.set_frameon.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.set_frameon.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.set_frameon.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.set_frameon.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.set_frameon', ['b'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_frameon', localization, ['b'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_frameon(...)' code ##################

        unicode_52210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, (-1)), 'unicode', u'\n        Set whether the figure frame (background) is displayed or invisible\n\n        ACCEPTS: boolean\n        ')
        
        # Assigning a Name to a Attribute (line 836):
        
        # Assigning a Name to a Attribute (line 836):
        
        # Assigning a Name to a Attribute (line 836):
        # Getting the type of 'b' (line 836)
        b_52211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 23), 'b')
        # Getting the type of 'self' (line 836)
        self_52212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 836, 8), 'self')
        # Setting the type of the member 'frameon' of a type (line 836)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 836, 8), self_52212, 'frameon', b_52211)
        
        # Assigning a Name to a Attribute (line 837):
        
        # Assigning a Name to a Attribute (line 837):
        
        # Assigning a Name to a Attribute (line 837):
        # Getting the type of 'True' (line 837)
        True_52213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 21), 'True')
        # Getting the type of 'self' (line 837)
        self_52214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 837, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 837)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 837, 8), self_52214, 'stale', True_52213)
        
        # ################# End of 'set_frameon(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_frameon' in the type store
        # Getting the type of 'stypy_return_type' (line 830)
        stypy_return_type_52215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52215)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_frameon'
        return stypy_return_type_52215


    @norecursion
    def delaxes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'delaxes'
        module_type_store = module_type_store.open_function_context('delaxes', 839, 4, False)
        # Assigning a type to the variable 'self' (line 840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.delaxes.__dict__.__setitem__('stypy_localization', localization)
        Figure.delaxes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.delaxes.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.delaxes.__dict__.__setitem__('stypy_function_name', 'Figure.delaxes')
        Figure.delaxes.__dict__.__setitem__('stypy_param_names_list', ['a'])
        Figure.delaxes.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.delaxes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.delaxes.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.delaxes.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.delaxes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.delaxes.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.delaxes', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'delaxes', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'delaxes(...)' code ##################

        unicode_52216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 8), 'unicode', u'remove a from the figure and update the current axes')
        
        # Call to remove(...): (line 841)
        # Processing the call arguments (line 841)
        # Getting the type of 'a' (line 841)
        a_52220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 29), 'a', False)
        # Processing the call keyword arguments (line 841)
        kwargs_52221 = {}
        # Getting the type of 'self' (line 841)
        self_52217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 8), 'self', False)
        # Obtaining the member '_axstack' of a type (line 841)
        _axstack_52218 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 8), self_52217, '_axstack')
        # Obtaining the member 'remove' of a type (line 841)
        remove_52219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 8), _axstack_52218, 'remove')
        # Calling remove(args, kwargs) (line 841)
        remove_call_result_52222 = invoke(stypy.reporting.localization.Localization(__file__, 841, 8), remove_52219, *[a_52220], **kwargs_52221)
        
        
        # Getting the type of 'self' (line 842)
        self_52223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 20), 'self')
        # Obtaining the member '_axobservers' of a type (line 842)
        _axobservers_52224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 20), self_52223, '_axobservers')
        # Testing the type of a for loop iterable (line 842)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 842, 8), _axobservers_52224)
        # Getting the type of the for loop variable (line 842)
        for_loop_var_52225 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 842, 8), _axobservers_52224)
        # Assigning a type to the variable 'func' (line 842)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 842, 8), 'func', for_loop_var_52225)
        # SSA begins for a for statement (line 842)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to func(...): (line 843)
        # Processing the call arguments (line 843)
        # Getting the type of 'self' (line 843)
        self_52227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 17), 'self', False)
        # Processing the call keyword arguments (line 843)
        kwargs_52228 = {}
        # Getting the type of 'func' (line 843)
        func_52226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 12), 'func', False)
        # Calling func(args, kwargs) (line 843)
        func_call_result_52229 = invoke(stypy.reporting.localization.Localization(__file__, 843, 12), func_52226, *[self_52227], **kwargs_52228)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 844):
        
        # Assigning a Name to a Attribute (line 844):
        
        # Assigning a Name to a Attribute (line 844):
        # Getting the type of 'True' (line 844)
        True_52230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 21), 'True')
        # Getting the type of 'self' (line 844)
        self_52231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 844)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 844, 8), self_52231, 'stale', True_52230)
        
        # ################# End of 'delaxes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'delaxes' in the type store
        # Getting the type of 'stypy_return_type' (line 839)
        stypy_return_type_52232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 839, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52232)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'delaxes'
        return stypy_return_type_52232


    @norecursion
    def _make_key(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_make_key'
        module_type_store = module_type_store.open_function_context('_make_key', 846, 4, False)
        # Assigning a type to the variable 'self' (line 847)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 847, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure._make_key.__dict__.__setitem__('stypy_localization', localization)
        Figure._make_key.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure._make_key.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure._make_key.__dict__.__setitem__('stypy_function_name', 'Figure._make_key')
        Figure._make_key.__dict__.__setitem__('stypy_param_names_list', [])
        Figure._make_key.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Figure._make_key.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Figure._make_key.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure._make_key.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure._make_key.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure._make_key.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure._make_key', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_make_key', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_make_key(...)' code ##################

        unicode_52233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 847, 8), 'unicode', u'make a hashable key out of args and kwargs')

        @norecursion
        def fixitems(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'fixitems'
            module_type_store = module_type_store.open_function_context('fixitems', 849, 8, False)
            
            # Passed parameters checking function
            fixitems.stypy_localization = localization
            fixitems.stypy_type_of_self = None
            fixitems.stypy_type_store = module_type_store
            fixitems.stypy_function_name = 'fixitems'
            fixitems.stypy_param_names_list = ['items']
            fixitems.stypy_varargs_param_name = None
            fixitems.stypy_kwargs_param_name = None
            fixitems.stypy_call_defaults = defaults
            fixitems.stypy_call_varargs = varargs
            fixitems.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'fixitems', ['items'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'fixitems', localization, ['items'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'fixitems(...)' code ##################

            
            # Assigning a List to a Name (line 852):
            
            # Assigning a List to a Name (line 852):
            
            # Assigning a List to a Name (line 852):
            
            # Obtaining an instance of the builtin type 'list' (line 852)
            list_52234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 852, 18), 'list')
            # Adding type elements to the builtin type 'list' instance (line 852)
            
            # Assigning a type to the variable 'ret' (line 852)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 852, 12), 'ret', list_52234)
            
            # Getting the type of 'items' (line 853)
            items_52235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 24), 'items')
            # Testing the type of a for loop iterable (line 853)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 853, 12), items_52235)
            # Getting the type of the for loop variable (line 853)
            for_loop_var_52236 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 853, 12), items_52235)
            # Assigning a type to the variable 'k' (line 853)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 853, 12), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 853, 12), for_loop_var_52236))
            # Assigning a type to the variable 'v' (line 853)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 853, 12), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 853, 12), for_loop_var_52236))
            # SSA begins for a for statement (line 853)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # SSA begins for try-except statement (line 858)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Assigning a Call to a Name (line 859):
            
            # Assigning a Call to a Name (line 859):
            
            # Assigning a Call to a Name (line 859):
            
            # Call to tuple(...): (line 859)
            # Processing the call arguments (line 859)
            # Getting the type of 'v' (line 859)
            v_52238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 30), 'v', False)
            # Processing the call keyword arguments (line 859)
            kwargs_52239 = {}
            # Getting the type of 'tuple' (line 859)
            tuple_52237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 24), 'tuple', False)
            # Calling tuple(args, kwargs) (line 859)
            tuple_call_result_52240 = invoke(stypy.reporting.localization.Localization(__file__, 859, 24), tuple_52237, *[v_52238], **kwargs_52239)
            
            # Assigning a type to the variable 'v' (line 859)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 20), 'v', tuple_call_result_52240)
            # SSA branch for the except part of a try statement (line 858)
            # SSA branch for the except 'Exception' branch of a try statement (line 858)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA join for try-except statement (line 858)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to append(...): (line 862)
            # Processing the call arguments (line 862)
            
            # Obtaining an instance of the builtin type 'tuple' (line 862)
            tuple_52243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 862, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 862)
            # Adding element type (line 862)
            # Getting the type of 'k' (line 862)
            k_52244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 28), 'k', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 862, 28), tuple_52243, k_52244)
            # Adding element type (line 862)
            # Getting the type of 'v' (line 862)
            v_52245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 31), 'v', False)
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 862, 28), tuple_52243, v_52245)
            
            # Processing the call keyword arguments (line 862)
            kwargs_52246 = {}
            # Getting the type of 'ret' (line 862)
            ret_52241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 862, 16), 'ret', False)
            # Obtaining the member 'append' of a type (line 862)
            append_52242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 862, 16), ret_52241, 'append')
            # Calling append(args, kwargs) (line 862)
            append_call_result_52247 = invoke(stypy.reporting.localization.Localization(__file__, 862, 16), append_52242, *[tuple_52243], **kwargs_52246)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to tuple(...): (line 863)
            # Processing the call arguments (line 863)
            # Getting the type of 'ret' (line 863)
            ret_52249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 25), 'ret', False)
            # Processing the call keyword arguments (line 863)
            kwargs_52250 = {}
            # Getting the type of 'tuple' (line 863)
            tuple_52248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 19), 'tuple', False)
            # Calling tuple(args, kwargs) (line 863)
            tuple_call_result_52251 = invoke(stypy.reporting.localization.Localization(__file__, 863, 19), tuple_52248, *[ret_52249], **kwargs_52250)
            
            # Assigning a type to the variable 'stypy_return_type' (line 863)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 12), 'stypy_return_type', tuple_call_result_52251)
            
            # ################# End of 'fixitems(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'fixitems' in the type store
            # Getting the type of 'stypy_return_type' (line 849)
            stypy_return_type_52252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_52252)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'fixitems'
            return stypy_return_type_52252

        # Assigning a type to the variable 'fixitems' (line 849)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 849, 8), 'fixitems', fixitems)

        @norecursion
        def fixlist(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'fixlist'
            module_type_store = module_type_store.open_function_context('fixlist', 865, 8, False)
            
            # Passed parameters checking function
            fixlist.stypy_localization = localization
            fixlist.stypy_type_of_self = None
            fixlist.stypy_type_store = module_type_store
            fixlist.stypy_function_name = 'fixlist'
            fixlist.stypy_param_names_list = ['args']
            fixlist.stypy_varargs_param_name = None
            fixlist.stypy_kwargs_param_name = None
            fixlist.stypy_call_defaults = defaults
            fixlist.stypy_call_varargs = varargs
            fixlist.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'fixlist', ['args'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'fixlist', localization, ['args'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'fixlist(...)' code ##################

            
            # Assigning a List to a Name (line 866):
            
            # Assigning a List to a Name (line 866):
            
            # Assigning a List to a Name (line 866):
            
            # Obtaining an instance of the builtin type 'list' (line 866)
            list_52253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 866, 18), 'list')
            # Adding type elements to the builtin type 'list' instance (line 866)
            
            # Assigning a type to the variable 'ret' (line 866)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 12), 'ret', list_52253)
            
            # Getting the type of 'args' (line 867)
            args_52254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 21), 'args')
            # Testing the type of a for loop iterable (line 867)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 867, 12), args_52254)
            # Getting the type of the for loop variable (line 867)
            for_loop_var_52255 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 867, 12), args_52254)
            # Assigning a type to the variable 'a' (line 867)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 12), 'a', for_loop_var_52255)
            # SSA begins for a for statement (line 867)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # Call to iterable(...): (line 868)
            # Processing the call arguments (line 868)
            # Getting the type of 'a' (line 868)
            a_52257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 28), 'a', False)
            # Processing the call keyword arguments (line 868)
            kwargs_52258 = {}
            # Getting the type of 'iterable' (line 868)
            iterable_52256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 19), 'iterable', False)
            # Calling iterable(args, kwargs) (line 868)
            iterable_call_result_52259 = invoke(stypy.reporting.localization.Localization(__file__, 868, 19), iterable_52256, *[a_52257], **kwargs_52258)
            
            # Testing the type of an if condition (line 868)
            if_condition_52260 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 868, 16), iterable_call_result_52259)
            # Assigning a type to the variable 'if_condition_52260' (line 868)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 16), 'if_condition_52260', if_condition_52260)
            # SSA begins for if statement (line 868)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 869):
            
            # Assigning a Call to a Name (line 869):
            
            # Assigning a Call to a Name (line 869):
            
            # Call to tuple(...): (line 869)
            # Processing the call arguments (line 869)
            # Getting the type of 'a' (line 869)
            a_52262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 30), 'a', False)
            # Processing the call keyword arguments (line 869)
            kwargs_52263 = {}
            # Getting the type of 'tuple' (line 869)
            tuple_52261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 24), 'tuple', False)
            # Calling tuple(args, kwargs) (line 869)
            tuple_call_result_52264 = invoke(stypy.reporting.localization.Localization(__file__, 869, 24), tuple_52261, *[a_52262], **kwargs_52263)
            
            # Assigning a type to the variable 'a' (line 869)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 869, 20), 'a', tuple_call_result_52264)
            # SSA join for if statement (line 868)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to append(...): (line 870)
            # Processing the call arguments (line 870)
            # Getting the type of 'a' (line 870)
            a_52267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 27), 'a', False)
            # Processing the call keyword arguments (line 870)
            kwargs_52268 = {}
            # Getting the type of 'ret' (line 870)
            ret_52265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 16), 'ret', False)
            # Obtaining the member 'append' of a type (line 870)
            append_52266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 16), ret_52265, 'append')
            # Calling append(args, kwargs) (line 870)
            append_call_result_52269 = invoke(stypy.reporting.localization.Localization(__file__, 870, 16), append_52266, *[a_52267], **kwargs_52268)
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Call to tuple(...): (line 871)
            # Processing the call arguments (line 871)
            # Getting the type of 'ret' (line 871)
            ret_52271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 25), 'ret', False)
            # Processing the call keyword arguments (line 871)
            kwargs_52272 = {}
            # Getting the type of 'tuple' (line 871)
            tuple_52270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 19), 'tuple', False)
            # Calling tuple(args, kwargs) (line 871)
            tuple_call_result_52273 = invoke(stypy.reporting.localization.Localization(__file__, 871, 19), tuple_52270, *[ret_52271], **kwargs_52272)
            
            # Assigning a type to the variable 'stypy_return_type' (line 871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 12), 'stypy_return_type', tuple_call_result_52273)
            
            # ################# End of 'fixlist(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'fixlist' in the type store
            # Getting the type of 'stypy_return_type' (line 865)
            stypy_return_type_52274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_52274)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'fixlist'
            return stypy_return_type_52274

        # Assigning a type to the variable 'fixlist' (line 865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 865, 8), 'fixlist', fixlist)
        
        # Assigning a Tuple to a Name (line 873):
        
        # Assigning a Tuple to a Name (line 873):
        
        # Assigning a Tuple to a Name (line 873):
        
        # Obtaining an instance of the builtin type 'tuple' (line 873)
        tuple_52275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 873, 14), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 873)
        # Adding element type (line 873)
        
        # Call to fixlist(...): (line 873)
        # Processing the call arguments (line 873)
        # Getting the type of 'args' (line 873)
        args_52277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 22), 'args', False)
        # Processing the call keyword arguments (line 873)
        kwargs_52278 = {}
        # Getting the type of 'fixlist' (line 873)
        fixlist_52276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 14), 'fixlist', False)
        # Calling fixlist(args, kwargs) (line 873)
        fixlist_call_result_52279 = invoke(stypy.reporting.localization.Localization(__file__, 873, 14), fixlist_52276, *[args_52277], **kwargs_52278)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 873, 14), tuple_52275, fixlist_call_result_52279)
        # Adding element type (line 873)
        
        # Call to fixitems(...): (line 873)
        # Processing the call arguments (line 873)
        
        # Call to iteritems(...): (line 873)
        # Processing the call arguments (line 873)
        # Getting the type of 'kwargs' (line 873)
        kwargs_52283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 52), 'kwargs', False)
        # Processing the call keyword arguments (line 873)
        kwargs_52284 = {}
        # Getting the type of 'six' (line 873)
        six_52281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 38), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 873)
        iteritems_52282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 873, 38), six_52281, 'iteritems')
        # Calling iteritems(args, kwargs) (line 873)
        iteritems_call_result_52285 = invoke(stypy.reporting.localization.Localization(__file__, 873, 38), iteritems_52282, *[kwargs_52283], **kwargs_52284)
        
        # Processing the call keyword arguments (line 873)
        kwargs_52286 = {}
        # Getting the type of 'fixitems' (line 873)
        fixitems_52280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 29), 'fixitems', False)
        # Calling fixitems(args, kwargs) (line 873)
        fixitems_call_result_52287 = invoke(stypy.reporting.localization.Localization(__file__, 873, 29), fixitems_52280, *[iteritems_call_result_52285], **kwargs_52286)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 873, 14), tuple_52275, fixitems_call_result_52287)
        
        # Assigning a type to the variable 'key' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 8), 'key', tuple_52275)
        # Getting the type of 'key' (line 874)
        key_52288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 15), 'key')
        # Assigning a type to the variable 'stypy_return_type' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 8), 'stypy_return_type', key_52288)
        
        # ################# End of '_make_key(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_make_key' in the type store
        # Getting the type of 'stypy_return_type' (line 846)
        stypy_return_type_52289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52289)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_make_key'
        return stypy_return_type_52289


    @norecursion
    def add_axes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_axes'
        module_type_store = module_type_store.open_function_context('add_axes', 876, 4, False)
        # Assigning a type to the variable 'self' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.add_axes.__dict__.__setitem__('stypy_localization', localization)
        Figure.add_axes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.add_axes.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.add_axes.__dict__.__setitem__('stypy_function_name', 'Figure.add_axes')
        Figure.add_axes.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.add_axes.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Figure.add_axes.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Figure.add_axes.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.add_axes.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.add_axes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.add_axes.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.add_axes', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_axes', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_axes(...)' code ##################

        unicode_52290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 936, (-1)), 'unicode', u"\n        Add an axes at position *rect* [*left*, *bottom*, *width*,\n        *height*] where all quantities are in fractions of figure\n        width and height.\n\n        Parameters\n        ----------\n        rect : sequence of float\n            A 4-length sequence of [left, bottom, width, height] quantities.\n\n        projection :\n            ['aitoff' | 'hammer' | 'lambert' | 'mollweide' | 'polar' | 'rectilinear'], optional\n            The projection type of the axes.\n\n        polar : boolean, optional\n            If True, equivalent to projection='polar'.\n\n        This method also takes the keyword arguments for\n        :class:`~matplotlib.axes.Axes`.\n\n        Returns\n        ------\n        axes : Axes\n            The added axes.\n\n        Examples\n        --------\n        A simple example::\n\n            rect = l,b,w,h\n            fig.add_axes(rect)\n            fig.add_axes(rect, frameon=False, facecolor='g')\n            fig.add_axes(rect, polar=True)\n            fig.add_axes(rect, projection='polar')\n            fig.add_axes(ax)\n\n        If the figure already has an axes with the same parameters, then it\n        will simply make that axes current and return it.  This behavior\n        has been deprecated as of Matplotlib 2.1.  Meanwhile, if you do\n        not want this behavior (i.e., you want to force the creation of a\n        new Axes), you must use a unique set of args and kwargs.  The axes\n        :attr:`~matplotlib.axes.Axes.label` attribute has been exposed for this\n        purpose: if you want two axes that are otherwise identical to be added\n        to the figure, make sure you give them unique labels::\n\n            fig.add_axes(rect, label='axes1')\n            fig.add_axes(rect, label='axes2')\n\n        In rare circumstances, add_axes may be called with a single\n        argument, an Axes instance already created in the present\n        figure but not in the figure's list of axes.  For example,\n        if an axes has been removed with :meth:`delaxes`, it can\n        be restored with::\n\n            fig.add_axes(ax)\n\n        In all cases, the :class:`~matplotlib.axes.Axes` instance\n        will be returned.\n        ")
        
        
        
        # Call to len(...): (line 937)
        # Processing the call arguments (line 937)
        # Getting the type of 'args' (line 937)
        args_52292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 19), 'args', False)
        # Processing the call keyword arguments (line 937)
        kwargs_52293 = {}
        # Getting the type of 'len' (line 937)
        len_52291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 15), 'len', False)
        # Calling len(args, kwargs) (line 937)
        len_call_result_52294 = invoke(stypy.reporting.localization.Localization(__file__, 937, 15), len_52291, *[args_52292], **kwargs_52293)
        
        # Applying the 'not' unary operator (line 937)
        result_not__52295 = python_operator(stypy.reporting.localization.Localization(__file__, 937, 11), 'not', len_call_result_52294)
        
        # Testing the type of an if condition (line 937)
        if_condition_52296 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 937, 8), result_not__52295)
        # Assigning a type to the variable 'if_condition_52296' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 8), 'if_condition_52296', if_condition_52296)
        # SSA begins for if statement (line 937)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 938)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 938, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 937)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 942):
        
        # Assigning a Call to a Name (line 942):
        
        # Assigning a Call to a Name (line 942):
        
        # Call to _make_key(...): (line 942)
        # Getting the type of 'args' (line 942)
        args_52299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 30), 'args', False)
        # Processing the call keyword arguments (line 942)
        # Getting the type of 'kwargs' (line 942)
        kwargs_52300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 38), 'kwargs', False)
        kwargs_52301 = {'kwargs_52300': kwargs_52300}
        # Getting the type of 'self' (line 942)
        self_52297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 14), 'self', False)
        # Obtaining the member '_make_key' of a type (line 942)
        _make_key_52298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 14), self_52297, '_make_key')
        # Calling _make_key(args, kwargs) (line 942)
        _make_key_call_result_52302 = invoke(stypy.reporting.localization.Localization(__file__, 942, 14), _make_key_52298, *[args_52299], **kwargs_52301)
        
        # Assigning a type to the variable 'key' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'key', _make_key_call_result_52302)
        
        # Assigning a Call to a Name (line 943):
        
        # Assigning a Call to a Name (line 943):
        
        # Assigning a Call to a Name (line 943):
        
        # Call to get(...): (line 943)
        # Processing the call arguments (line 943)
        # Getting the type of 'key' (line 943)
        key_52306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 31), 'key', False)
        # Processing the call keyword arguments (line 943)
        kwargs_52307 = {}
        # Getting the type of 'self' (line 943)
        self_52303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 13), 'self', False)
        # Obtaining the member '_axstack' of a type (line 943)
        _axstack_52304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 13), self_52303, '_axstack')
        # Obtaining the member 'get' of a type (line 943)
        get_52305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 13), _axstack_52304, 'get')
        # Calling get(args, kwargs) (line 943)
        get_call_result_52308 = invoke(stypy.reporting.localization.Localization(__file__, 943, 13), get_52305, *[key_52306], **kwargs_52307)
        
        # Assigning a type to the variable 'ax' (line 943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 943, 8), 'ax', get_call_result_52308)
        
        # Type idiom detected: calculating its left and rigth part (line 944)
        # Getting the type of 'ax' (line 944)
        ax_52309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 8), 'ax')
        # Getting the type of 'None' (line 944)
        None_52310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 21), 'None')
        
        (may_be_52311, more_types_in_union_52312) = may_not_be_none(ax_52309, None_52310)

        if may_be_52311:

            if more_types_in_union_52312:
                # Runtime conditional SSA (line 944)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to sca(...): (line 945)
            # Processing the call arguments (line 945)
            # Getting the type of 'ax' (line 945)
            ax_52315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 21), 'ax', False)
            # Processing the call keyword arguments (line 945)
            kwargs_52316 = {}
            # Getting the type of 'self' (line 945)
            self_52313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 12), 'self', False)
            # Obtaining the member 'sca' of a type (line 945)
            sca_52314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 12), self_52313, 'sca')
            # Calling sca(args, kwargs) (line 945)
            sca_call_result_52317 = invoke(stypy.reporting.localization.Localization(__file__, 945, 12), sca_52314, *[ax_52315], **kwargs_52316)
            
            # Getting the type of 'ax' (line 946)
            ax_52318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 19), 'ax')
            # Assigning a type to the variable 'stypy_return_type' (line 946)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 946, 12), 'stypy_return_type', ax_52318)

            if more_types_in_union_52312:
                # SSA join for if statement (line 944)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to isinstance(...): (line 948)
        # Processing the call arguments (line 948)
        
        # Obtaining the type of the subscript
        int_52320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 27), 'int')
        # Getting the type of 'args' (line 948)
        args_52321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 22), 'args', False)
        # Obtaining the member '__getitem__' of a type (line 948)
        getitem___52322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 948, 22), args_52321, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 948)
        subscript_call_result_52323 = invoke(stypy.reporting.localization.Localization(__file__, 948, 22), getitem___52322, int_52320)
        
        # Getting the type of 'Axes' (line 948)
        Axes_52324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 31), 'Axes', False)
        # Processing the call keyword arguments (line 948)
        kwargs_52325 = {}
        # Getting the type of 'isinstance' (line 948)
        isinstance_52319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 948)
        isinstance_call_result_52326 = invoke(stypy.reporting.localization.Localization(__file__, 948, 11), isinstance_52319, *[subscript_call_result_52323, Axes_52324], **kwargs_52325)
        
        # Testing the type of an if condition (line 948)
        if_condition_52327 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 948, 8), isinstance_call_result_52326)
        # Assigning a type to the variable 'if_condition_52327' (line 948)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 948, 8), 'if_condition_52327', if_condition_52327)
        # SSA begins for if statement (line 948)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 949):
        
        # Assigning a Subscript to a Name (line 949):
        
        # Assigning a Subscript to a Name (line 949):
        
        # Obtaining the type of the subscript
        int_52328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 949, 21), 'int')
        # Getting the type of 'args' (line 949)
        args_52329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 16), 'args')
        # Obtaining the member '__getitem__' of a type (line 949)
        getitem___52330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 16), args_52329, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 949)
        subscript_call_result_52331 = invoke(stypy.reporting.localization.Localization(__file__, 949, 16), getitem___52330, int_52328)
        
        # Assigning a type to the variable 'a' (line 949)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 949, 12), 'a', subscript_call_result_52331)
        
        
        
        # Call to get_figure(...): (line 950)
        # Processing the call keyword arguments (line 950)
        kwargs_52334 = {}
        # Getting the type of 'a' (line 950)
        a_52332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 15), 'a', False)
        # Obtaining the member 'get_figure' of a type (line 950)
        get_figure_52333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 15), a_52332, 'get_figure')
        # Calling get_figure(args, kwargs) (line 950)
        get_figure_call_result_52335 = invoke(stypy.reporting.localization.Localization(__file__, 950, 15), get_figure_52333, *[], **kwargs_52334)
        
        # Getting the type of 'self' (line 950)
        self_52336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 37), 'self')
        # Applying the binary operator 'isnot' (line 950)
        result_is_not_52337 = python_operator(stypy.reporting.localization.Localization(__file__, 950, 15), 'isnot', get_figure_call_result_52335, self_52336)
        
        # Testing the type of an if condition (line 950)
        if_condition_52338 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 950, 12), result_is_not_52337)
        # Assigning a type to the variable 'if_condition_52338' (line 950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 12), 'if_condition_52338', if_condition_52338)
        # SSA begins for if statement (line 950)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 951):
        
        # Assigning a Str to a Name (line 951):
        
        # Assigning a Str to a Name (line 951):
        unicode_52339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 951, 22), 'unicode', u'The Axes must have been created in the present figure')
        # Assigning a type to the variable 'msg' (line 951)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 951, 16), 'msg', unicode_52339)
        
        # Call to ValueError(...): (line 952)
        # Processing the call arguments (line 952)
        # Getting the type of 'msg' (line 952)
        msg_52341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 33), 'msg', False)
        # Processing the call keyword arguments (line 952)
        kwargs_52342 = {}
        # Getting the type of 'ValueError' (line 952)
        ValueError_52340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 952)
        ValueError_call_result_52343 = invoke(stypy.reporting.localization.Localization(__file__, 952, 22), ValueError_52340, *[msg_52341], **kwargs_52342)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 952, 16), ValueError_call_result_52343, 'raise parameter', BaseException)
        # SSA join for if statement (line 950)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 948)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Subscript to a Name (line 954):
        
        # Assigning a Subscript to a Name (line 954):
        
        # Assigning a Subscript to a Name (line 954):
        
        # Obtaining the type of the subscript
        int_52344 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 954, 24), 'int')
        # Getting the type of 'args' (line 954)
        args_52345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 19), 'args')
        # Obtaining the member '__getitem__' of a type (line 954)
        getitem___52346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 19), args_52345, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 954)
        subscript_call_result_52347 = invoke(stypy.reporting.localization.Localization(__file__, 954, 19), getitem___52346, int_52344)
        
        # Assigning a type to the variable 'rect' (line 954)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 954, 12), 'rect', subscript_call_result_52347)
        
        
        
        # Call to all(...): (line 955)
        # Processing the call keyword arguments (line 955)
        kwargs_52354 = {}
        
        # Call to isfinite(...): (line 955)
        # Processing the call arguments (line 955)
        # Getting the type of 'rect' (line 955)
        rect_52350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 31), 'rect', False)
        # Processing the call keyword arguments (line 955)
        kwargs_52351 = {}
        # Getting the type of 'np' (line 955)
        np_52348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 955, 19), 'np', False)
        # Obtaining the member 'isfinite' of a type (line 955)
        isfinite_52349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 19), np_52348, 'isfinite')
        # Calling isfinite(args, kwargs) (line 955)
        isfinite_call_result_52352 = invoke(stypy.reporting.localization.Localization(__file__, 955, 19), isfinite_52349, *[rect_52350], **kwargs_52351)
        
        # Obtaining the member 'all' of a type (line 955)
        all_52353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 955, 19), isfinite_call_result_52352, 'all')
        # Calling all(args, kwargs) (line 955)
        all_call_result_52355 = invoke(stypy.reporting.localization.Localization(__file__, 955, 19), all_52353, *[], **kwargs_52354)
        
        # Applying the 'not' unary operator (line 955)
        result_not__52356 = python_operator(stypy.reporting.localization.Localization(__file__, 955, 15), 'not', all_call_result_52355)
        
        # Testing the type of an if condition (line 955)
        if_condition_52357 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 955, 12), result_not__52356)
        # Assigning a type to the variable 'if_condition_52357' (line 955)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 955, 12), 'if_condition_52357', if_condition_52357)
        # SSA begins for if statement (line 955)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 956)
        # Processing the call arguments (line 956)
        
        # Call to format(...): (line 956)
        # Processing the call arguments (line 956)
        # Getting the type of 'rect' (line 957)
        rect_52361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 49), 'rect', False)
        # Processing the call keyword arguments (line 956)
        kwargs_52362 = {}
        unicode_52359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, 33), 'unicode', u'all entries in rect must be finite not {}')
        # Obtaining the member 'format' of a type (line 956)
        format_52360 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 956, 33), unicode_52359, 'format')
        # Calling format(args, kwargs) (line 956)
        format_call_result_52363 = invoke(stypy.reporting.localization.Localization(__file__, 956, 33), format_52360, *[rect_52361], **kwargs_52362)
        
        # Processing the call keyword arguments (line 956)
        kwargs_52364 = {}
        # Getting the type of 'ValueError' (line 956)
        ValueError_52358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 956)
        ValueError_call_result_52365 = invoke(stypy.reporting.localization.Localization(__file__, 956, 22), ValueError_52358, *[format_call_result_52363], **kwargs_52364)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 956, 16), ValueError_call_result_52365, 'raise parameter', BaseException)
        # SSA join for if statement (line 955)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 958):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to process_projection_requirements(...): (line 958)
        # Processing the call arguments (line 958)
        # Getting the type of 'self' (line 959)
        self_52367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 16), 'self', False)
        # Getting the type of 'args' (line 959)
        args_52368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 23), 'args', False)
        # Processing the call keyword arguments (line 958)
        # Getting the type of 'kwargs' (line 959)
        kwargs_52369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 31), 'kwargs', False)
        kwargs_52370 = {'kwargs_52369': kwargs_52369}
        # Getting the type of 'process_projection_requirements' (line 958)
        process_projection_requirements_52366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 44), 'process_projection_requirements', False)
        # Calling process_projection_requirements(args, kwargs) (line 958)
        process_projection_requirements_call_result_52371 = invoke(stypy.reporting.localization.Localization(__file__, 958, 44), process_projection_requirements_52366, *[self_52367, args_52368], **kwargs_52370)
        
        # Assigning a type to the variable 'call_assignment_50770' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'call_assignment_50770', process_projection_requirements_call_result_52371)
        
        # Assigning a Call to a Name (line 958):
        
        # Assigning a Call to a Name (line 958):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_52374 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 12), 'int')
        # Processing the call keyword arguments
        kwargs_52375 = {}
        # Getting the type of 'call_assignment_50770' (line 958)
        call_assignment_50770_52372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'call_assignment_50770', False)
        # Obtaining the member '__getitem__' of a type (line 958)
        getitem___52373 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 12), call_assignment_50770_52372, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_52376 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___52373, *[int_52374], **kwargs_52375)
        
        # Assigning a type to the variable 'call_assignment_50771' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'call_assignment_50771', getitem___call_result_52376)
        
        # Assigning a Name to a Name (line 958):
        
        # Assigning a Name to a Name (line 958):
        # Getting the type of 'call_assignment_50771' (line 958)
        call_assignment_50771_52377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'call_assignment_50771')
        # Assigning a type to the variable 'projection_class' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'projection_class', call_assignment_50771_52377)
        
        # Assigning a Call to a Name (line 958):
        
        # Assigning a Call to a Name (line 958):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_52380 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 12), 'int')
        # Processing the call keyword arguments
        kwargs_52381 = {}
        # Getting the type of 'call_assignment_50770' (line 958)
        call_assignment_50770_52378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'call_assignment_50770', False)
        # Obtaining the member '__getitem__' of a type (line 958)
        getitem___52379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 12), call_assignment_50770_52378, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_52382 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___52379, *[int_52380], **kwargs_52381)
        
        # Assigning a type to the variable 'call_assignment_50772' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'call_assignment_50772', getitem___call_result_52382)
        
        # Assigning a Name to a Name (line 958):
        
        # Assigning a Name to a Name (line 958):
        # Getting the type of 'call_assignment_50772' (line 958)
        call_assignment_50772_52383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'call_assignment_50772')
        # Assigning a type to the variable 'kwargs' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 30), 'kwargs', call_assignment_50772_52383)
        
        # Assigning a Call to a Name (line 958):
        
        # Assigning a Call to a Name (line 958):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_52386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 12), 'int')
        # Processing the call keyword arguments
        kwargs_52387 = {}
        # Getting the type of 'call_assignment_50770' (line 958)
        call_assignment_50770_52384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'call_assignment_50770', False)
        # Obtaining the member '__getitem__' of a type (line 958)
        getitem___52385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 12), call_assignment_50770_52384, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_52388 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___52385, *[int_52386], **kwargs_52387)
        
        # Assigning a type to the variable 'call_assignment_50773' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'call_assignment_50773', getitem___call_result_52388)
        
        # Assigning a Name to a Name (line 958):
        
        # Assigning a Name to a Name (line 958):
        # Getting the type of 'call_assignment_50773' (line 958)
        call_assignment_50773_52389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'call_assignment_50773')
        # Assigning a type to the variable 'key' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 38), 'key', call_assignment_50773_52389)
        
        # Assigning a Call to a Name (line 963):
        
        # Assigning a Call to a Name (line 963):
        
        # Assigning a Call to a Name (line 963):
        
        # Call to get(...): (line 963)
        # Processing the call arguments (line 963)
        # Getting the type of 'key' (line 963)
        key_52393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 35), 'key', False)
        # Processing the call keyword arguments (line 963)
        kwargs_52394 = {}
        # Getting the type of 'self' (line 963)
        self_52390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 963, 17), 'self', False)
        # Obtaining the member '_axstack' of a type (line 963)
        _axstack_52391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 17), self_52390, '_axstack')
        # Obtaining the member 'get' of a type (line 963)
        get_52392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 963, 17), _axstack_52391, 'get')
        # Calling get(args, kwargs) (line 963)
        get_call_result_52395 = invoke(stypy.reporting.localization.Localization(__file__, 963, 17), get_52392, *[key_52393], **kwargs_52394)
        
        # Assigning a type to the variable 'ax' (line 963)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 963, 12), 'ax', get_call_result_52395)
        
        
        # Call to isinstance(...): (line 964)
        # Processing the call arguments (line 964)
        # Getting the type of 'ax' (line 964)
        ax_52397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 26), 'ax', False)
        # Getting the type of 'projection_class' (line 964)
        projection_class_52398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 30), 'projection_class', False)
        # Processing the call keyword arguments (line 964)
        kwargs_52399 = {}
        # Getting the type of 'isinstance' (line 964)
        isinstance_52396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 964)
        isinstance_call_result_52400 = invoke(stypy.reporting.localization.Localization(__file__, 964, 15), isinstance_52396, *[ax_52397, projection_class_52398], **kwargs_52399)
        
        # Testing the type of an if condition (line 964)
        if_condition_52401 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 964, 12), isinstance_call_result_52400)
        # Assigning a type to the variable 'if_condition_52401' (line 964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 12), 'if_condition_52401', if_condition_52401)
        # SSA begins for if statement (line 964)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to sca(...): (line 965)
        # Processing the call arguments (line 965)
        # Getting the type of 'ax' (line 965)
        ax_52404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 25), 'ax', False)
        # Processing the call keyword arguments (line 965)
        kwargs_52405 = {}
        # Getting the type of 'self' (line 965)
        self_52402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 16), 'self', False)
        # Obtaining the member 'sca' of a type (line 965)
        sca_52403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 16), self_52402, 'sca')
        # Calling sca(args, kwargs) (line 965)
        sca_call_result_52406 = invoke(stypy.reporting.localization.Localization(__file__, 965, 16), sca_52403, *[ax_52404], **kwargs_52405)
        
        # Getting the type of 'ax' (line 966)
        ax_52407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 23), 'ax')
        # Assigning a type to the variable 'stypy_return_type' (line 966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 966, 16), 'stypy_return_type', ax_52407)
        # SSA join for if statement (line 964)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 969):
        
        # Assigning a Call to a Name (line 969):
        
        # Assigning a Call to a Name (line 969):
        
        # Call to projection_class(...): (line 969)
        # Processing the call arguments (line 969)
        # Getting the type of 'self' (line 969)
        self_52409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 33), 'self', False)
        # Getting the type of 'rect' (line 969)
        rect_52410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 39), 'rect', False)
        # Processing the call keyword arguments (line 969)
        # Getting the type of 'kwargs' (line 969)
        kwargs_52411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 47), 'kwargs', False)
        kwargs_52412 = {'kwargs_52411': kwargs_52411}
        # Getting the type of 'projection_class' (line 969)
        projection_class_52408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 16), 'projection_class', False)
        # Calling projection_class(args, kwargs) (line 969)
        projection_class_call_result_52413 = invoke(stypy.reporting.localization.Localization(__file__, 969, 16), projection_class_52408, *[self_52409, rect_52410], **kwargs_52412)
        
        # Assigning a type to the variable 'a' (line 969)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 969, 12), 'a', projection_class_call_result_52413)
        # SSA join for if statement (line 948)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to add(...): (line 971)
        # Processing the call arguments (line 971)
        # Getting the type of 'key' (line 971)
        key_52417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 26), 'key', False)
        # Getting the type of 'a' (line 971)
        a_52418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 31), 'a', False)
        # Processing the call keyword arguments (line 971)
        kwargs_52419 = {}
        # Getting the type of 'self' (line 971)
        self_52414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 971, 8), 'self', False)
        # Obtaining the member '_axstack' of a type (line 971)
        _axstack_52415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 8), self_52414, '_axstack')
        # Obtaining the member 'add' of a type (line 971)
        add_52416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 971, 8), _axstack_52415, 'add')
        # Calling add(args, kwargs) (line 971)
        add_call_result_52420 = invoke(stypy.reporting.localization.Localization(__file__, 971, 8), add_52416, *[key_52417, a_52418], **kwargs_52419)
        
        
        # Call to sca(...): (line 972)
        # Processing the call arguments (line 972)
        # Getting the type of 'a' (line 972)
        a_52423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 17), 'a', False)
        # Processing the call keyword arguments (line 972)
        kwargs_52424 = {}
        # Getting the type of 'self' (line 972)
        self_52421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 972, 8), 'self', False)
        # Obtaining the member 'sca' of a type (line 972)
        sca_52422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 972, 8), self_52421, 'sca')
        # Calling sca(args, kwargs) (line 972)
        sca_call_result_52425 = invoke(stypy.reporting.localization.Localization(__file__, 972, 8), sca_52422, *[a_52423], **kwargs_52424)
        
        
        # Assigning a Attribute to a Attribute (line 973):
        
        # Assigning a Attribute to a Attribute (line 973):
        
        # Assigning a Attribute to a Attribute (line 973):
        # Getting the type of 'self' (line 973)
        self_52426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 27), 'self')
        # Obtaining the member '__remove_ax' of a type (line 973)
        remove_ax_52427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 27), self_52426, '__remove_ax')
        # Getting the type of 'a' (line 973)
        a_52428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 8), 'a')
        # Setting the type of the member '_remove_method' of a type (line 973)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 8), a_52428, '_remove_method', remove_ax_52427)
        
        # Assigning a Name to a Attribute (line 974):
        
        # Assigning a Name to a Attribute (line 974):
        
        # Assigning a Name to a Attribute (line 974):
        # Getting the type of 'True' (line 974)
        True_52429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 21), 'True')
        # Getting the type of 'self' (line 974)
        self_52430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 974)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 8), self_52430, 'stale', True_52429)
        
        # Assigning a Name to a Attribute (line 975):
        
        # Assigning a Name to a Attribute (line 975):
        
        # Assigning a Name to a Attribute (line 975):
        # Getting the type of '_stale_figure_callback' (line 975)
        _stale_figure_callback_52431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 27), '_stale_figure_callback')
        # Getting the type of 'a' (line 975)
        a_52432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 8), 'a')
        # Setting the type of the member 'stale_callback' of a type (line 975)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 8), a_52432, 'stale_callback', _stale_figure_callback_52431)
        # Getting the type of 'a' (line 976)
        a_52433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 8), 'stypy_return_type', a_52433)
        
        # ################# End of 'add_axes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_axes' in the type store
        # Getting the type of 'stypy_return_type' (line 876)
        stypy_return_type_52434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52434)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_axes'
        return stypy_return_type_52434


    @norecursion
    def add_subplot(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_subplot'
        module_type_store = module_type_store.open_function_context('add_subplot', 978, 4, False)
        # Assigning a type to the variable 'self' (line 979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.add_subplot.__dict__.__setitem__('stypy_localization', localization)
        Figure.add_subplot.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.add_subplot.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.add_subplot.__dict__.__setitem__('stypy_function_name', 'Figure.add_subplot')
        Figure.add_subplot.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.add_subplot.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Figure.add_subplot.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Figure.add_subplot.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.add_subplot.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.add_subplot.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.add_subplot.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.add_subplot', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_subplot', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_subplot(...)' code ##################

        unicode_52435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, (-1)), 'unicode', u"\n        Add a subplot.\n\n        Parameters\n        ----------\n        *args\n            Either a 3-digit integer or three separate integers\n            describing the position of the subplot. If the three\n            integers are I, J, and K, the subplot is the Ith plot on a\n            grid with J rows and K columns.\n\n        projection : ['aitoff' | 'hammer' | 'lambert' | 'mollweide', 'polar' | 'rectilinear'], optional\n            The projection type of the axes.\n\n        polar : boolean, optional\n            If True, equivalent to projection='polar'.\n\n        This method also takes the keyword arguments for\n        :class:`~matplotlib.axes.Axes`.\n\n        Returns\n        -------\n        axes : Axes\n            The axes of the subplot.\n\n        Notes\n        -----\n        If the figure already has a subplot with key (*args*,\n        *kwargs*) then it will simply make that subplot current and\n        return it.  This behavior is deprecated.\n\n        Examples\n        --------\n            fig.add_subplot(111)\n\n            # equivalent but more general\n            fig.add_subplot(1, 1, 1)\n\n            # add subplot with red background\n            fig.add_subplot(212, facecolor='r')\n\n            # add a polar subplot\n            fig.add_subplot(111, projection='polar')\n\n            # add Subplot instance sub\n            fig.add_subplot(sub)\n\n        See Also\n        --------\n        matplotlib.pyplot.subplot : for an explanation of the args.\n        ")
        
        
        
        # Call to len(...): (line 1031)
        # Processing the call arguments (line 1031)
        # Getting the type of 'args' (line 1031)
        args_52437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 19), 'args', False)
        # Processing the call keyword arguments (line 1031)
        kwargs_52438 = {}
        # Getting the type of 'len' (line 1031)
        len_52436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 15), 'len', False)
        # Calling len(args, kwargs) (line 1031)
        len_call_result_52439 = invoke(stypy.reporting.localization.Localization(__file__, 1031, 15), len_52436, *[args_52437], **kwargs_52438)
        
        # Applying the 'not' unary operator (line 1031)
        result_not__52440 = python_operator(stypy.reporting.localization.Localization(__file__, 1031, 11), 'not', len_call_result_52439)
        
        # Testing the type of an if condition (line 1031)
        if_condition_52441 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1031, 8), result_not__52440)
        # Assigning a type to the variable 'if_condition_52441' (line 1031)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 8), 'if_condition_52441', if_condition_52441)
        # SSA begins for if statement (line 1031)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1032)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1031)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 1034)
        # Processing the call arguments (line 1034)
        # Getting the type of 'args' (line 1034)
        args_52443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 15), 'args', False)
        # Processing the call keyword arguments (line 1034)
        kwargs_52444 = {}
        # Getting the type of 'len' (line 1034)
        len_52442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 11), 'len', False)
        # Calling len(args, kwargs) (line 1034)
        len_call_result_52445 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 11), len_52442, *[args_52443], **kwargs_52444)
        
        int_52446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1034, 24), 'int')
        # Applying the binary operator '==' (line 1034)
        result_eq_52447 = python_operator(stypy.reporting.localization.Localization(__file__, 1034, 11), '==', len_call_result_52445, int_52446)
        
        
        # Call to isinstance(...): (line 1034)
        # Processing the call arguments (line 1034)
        
        # Obtaining the type of the subscript
        int_52449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1034, 46), 'int')
        # Getting the type of 'args' (line 1034)
        args_52450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 41), 'args', False)
        # Obtaining the member '__getitem__' of a type (line 1034)
        getitem___52451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 41), args_52450, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1034)
        subscript_call_result_52452 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 41), getitem___52451, int_52449)
        
        # Getting the type of 'int' (line 1034)
        int_52453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 50), 'int', False)
        # Processing the call keyword arguments (line 1034)
        kwargs_52454 = {}
        # Getting the type of 'isinstance' (line 1034)
        isinstance_52448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 30), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1034)
        isinstance_call_result_52455 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 30), isinstance_52448, *[subscript_call_result_52452, int_52453], **kwargs_52454)
        
        # Applying the binary operator 'and' (line 1034)
        result_and_keyword_52456 = python_operator(stypy.reporting.localization.Localization(__file__, 1034, 11), 'and', result_eq_52447, isinstance_call_result_52455)
        
        # Testing the type of an if condition (line 1034)
        if_condition_52457 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1034, 8), result_and_keyword_52456)
        # Assigning a type to the variable 'if_condition_52457' (line 1034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'if_condition_52457', if_condition_52457)
        # SSA begins for if statement (line 1034)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        int_52458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 19), 'int')
        
        # Obtaining the type of the subscript
        int_52459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 31), 'int')
        # Getting the type of 'args' (line 1035)
        args_52460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 26), 'args')
        # Obtaining the member '__getitem__' of a type (line 1035)
        getitem___52461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1035, 26), args_52460, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1035)
        subscript_call_result_52462 = invoke(stypy.reporting.localization.Localization(__file__, 1035, 26), getitem___52461, int_52459)
        
        # Applying the binary operator '<=' (line 1035)
        result_le_52463 = python_operator(stypy.reporting.localization.Localization(__file__, 1035, 19), '<=', int_52458, subscript_call_result_52462)
        int_52464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1035, 37), 'int')
        # Applying the binary operator '<=' (line 1035)
        result_le_52465 = python_operator(stypy.reporting.localization.Localization(__file__, 1035, 19), '<=', subscript_call_result_52462, int_52464)
        # Applying the binary operator '&' (line 1035)
        result_and__52466 = python_operator(stypy.reporting.localization.Localization(__file__, 1035, 19), '&', result_le_52463, result_le_52465)
        
        # Applying the 'not' unary operator (line 1035)
        result_not__52467 = python_operator(stypy.reporting.localization.Localization(__file__, 1035, 15), 'not', result_and__52466)
        
        # Testing the type of an if condition (line 1035)
        if_condition_52468 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1035, 12), result_not__52467)
        # Assigning a type to the variable 'if_condition_52468' (line 1035)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1035, 12), 'if_condition_52468', if_condition_52468)
        # SSA begins for if statement (line 1035)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1036)
        # Processing the call arguments (line 1036)
        
        # Call to format(...): (line 1036)
        # Processing the call arguments (line 1036)
        
        # Obtaining the type of the subscript
        int_52472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 74), 'int')
        # Getting the type of 'args' (line 1037)
        args_52473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 69), 'args', False)
        # Obtaining the member '__getitem__' of a type (line 1037)
        getitem___52474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 69), args_52473, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1037)
        subscript_call_result_52475 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 69), getitem___52474, int_52472)
        
        # Processing the call keyword arguments (line 1036)
        kwargs_52476 = {}
        unicode_52470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1036, 33), 'unicode', u'Integer subplot specification must be a three-digit number, not {}')
        # Obtaining the member 'format' of a type (line 1036)
        format_52471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 33), unicode_52470, 'format')
        # Calling format(args, kwargs) (line 1036)
        format_call_result_52477 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 33), format_52471, *[subscript_call_result_52475], **kwargs_52476)
        
        # Processing the call keyword arguments (line 1036)
        kwargs_52478 = {}
        # Getting the type of 'ValueError' (line 1036)
        ValueError_52469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1036)
        ValueError_call_result_52479 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 22), ValueError_52469, *[format_call_result_52477], **kwargs_52478)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1036, 16), ValueError_call_result_52479, 'raise parameter', BaseException)
        # SSA join for if statement (line 1035)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1038):
        
        # Assigning a Call to a Name (line 1038):
        
        # Assigning a Call to a Name (line 1038):
        
        # Call to tuple(...): (line 1038)
        # Processing the call arguments (line 1038)
        
        # Call to map(...): (line 1038)
        # Processing the call arguments (line 1038)
        # Getting the type of 'int' (line 1038)
        int_52482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 29), 'int', False)
        
        # Call to str(...): (line 1038)
        # Processing the call arguments (line 1038)
        
        # Obtaining the type of the subscript
        int_52484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, 43), 'int')
        # Getting the type of 'args' (line 1038)
        args_52485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 38), 'args', False)
        # Obtaining the member '__getitem__' of a type (line 1038)
        getitem___52486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 38), args_52485, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1038)
        subscript_call_result_52487 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 38), getitem___52486, int_52484)
        
        # Processing the call keyword arguments (line 1038)
        kwargs_52488 = {}
        # Getting the type of 'str' (line 1038)
        str_52483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 34), 'str', False)
        # Calling str(args, kwargs) (line 1038)
        str_call_result_52489 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 34), str_52483, *[subscript_call_result_52487], **kwargs_52488)
        
        # Processing the call keyword arguments (line 1038)
        kwargs_52490 = {}
        # Getting the type of 'map' (line 1038)
        map_52481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 25), 'map', False)
        # Calling map(args, kwargs) (line 1038)
        map_call_result_52491 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 25), map_52481, *[int_52482, str_call_result_52489], **kwargs_52490)
        
        # Processing the call keyword arguments (line 1038)
        kwargs_52492 = {}
        # Getting the type of 'tuple' (line 1038)
        tuple_52480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 19), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1038)
        tuple_call_result_52493 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 19), tuple_52480, *[map_call_result_52491], **kwargs_52492)
        
        # Assigning a type to the variable 'args' (line 1038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1038, 12), 'args', tuple_call_result_52493)
        # SSA join for if statement (line 1034)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to isinstance(...): (line 1040)
        # Processing the call arguments (line 1040)
        
        # Obtaining the type of the subscript
        int_52495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 27), 'int')
        # Getting the type of 'args' (line 1040)
        args_52496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 22), 'args', False)
        # Obtaining the member '__getitem__' of a type (line 1040)
        getitem___52497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 22), args_52496, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1040)
        subscript_call_result_52498 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 22), getitem___52497, int_52495)
        
        # Getting the type of 'SubplotBase' (line 1040)
        SubplotBase_52499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 31), 'SubplotBase', False)
        # Processing the call keyword arguments (line 1040)
        kwargs_52500 = {}
        # Getting the type of 'isinstance' (line 1040)
        isinstance_52494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1040)
        isinstance_call_result_52501 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 11), isinstance_52494, *[subscript_call_result_52498, SubplotBase_52499], **kwargs_52500)
        
        # Testing the type of an if condition (line 1040)
        if_condition_52502 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1040, 8), isinstance_call_result_52501)
        # Assigning a type to the variable 'if_condition_52502' (line 1040)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 8), 'if_condition_52502', if_condition_52502)
        # SSA begins for if statement (line 1040)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1042):
        
        # Assigning a Subscript to a Name (line 1042):
        
        # Assigning a Subscript to a Name (line 1042):
        
        # Obtaining the type of the subscript
        int_52503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1042, 21), 'int')
        # Getting the type of 'args' (line 1042)
        args_52504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 16), 'args')
        # Obtaining the member '__getitem__' of a type (line 1042)
        getitem___52505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 16), args_52504, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1042)
        subscript_call_result_52506 = invoke(stypy.reporting.localization.Localization(__file__, 1042, 16), getitem___52505, int_52503)
        
        # Assigning a type to the variable 'a' (line 1042)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1042, 12), 'a', subscript_call_result_52506)
        
        
        
        # Call to get_figure(...): (line 1043)
        # Processing the call keyword arguments (line 1043)
        kwargs_52509 = {}
        # Getting the type of 'a' (line 1043)
        a_52507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 15), 'a', False)
        # Obtaining the member 'get_figure' of a type (line 1043)
        get_figure_52508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 15), a_52507, 'get_figure')
        # Calling get_figure(args, kwargs) (line 1043)
        get_figure_call_result_52510 = invoke(stypy.reporting.localization.Localization(__file__, 1043, 15), get_figure_52508, *[], **kwargs_52509)
        
        # Getting the type of 'self' (line 1043)
        self_52511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 37), 'self')
        # Applying the binary operator 'isnot' (line 1043)
        result_is_not_52512 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 15), 'isnot', get_figure_call_result_52510, self_52511)
        
        # Testing the type of an if condition (line 1043)
        if_condition_52513 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1043, 12), result_is_not_52512)
        # Assigning a type to the variable 'if_condition_52513' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 12), 'if_condition_52513', if_condition_52513)
        # SSA begins for if statement (line 1043)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1044):
        
        # Assigning a Str to a Name (line 1044):
        
        # Assigning a Str to a Name (line 1044):
        unicode_52514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 23), 'unicode', u'The Subplot must have been created in the present figure')
        # Assigning a type to the variable 'msg' (line 1044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 16), 'msg', unicode_52514)
        
        # Call to ValueError(...): (line 1046)
        # Processing the call arguments (line 1046)
        # Getting the type of 'msg' (line 1046)
        msg_52516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 33), 'msg', False)
        # Processing the call keyword arguments (line 1046)
        kwargs_52517 = {}
        # Getting the type of 'ValueError' (line 1046)
        ValueError_52515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1046)
        ValueError_call_result_52518 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 22), ValueError_52515, *[msg_52516], **kwargs_52517)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1046, 16), ValueError_call_result_52518, 'raise parameter', BaseException)
        # SSA join for if statement (line 1043)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1049):
        
        # Assigning a Call to a Name (line 1049):
        
        # Assigning a Call to a Name (line 1049):
        
        # Call to _make_key(...): (line 1049)
        # Getting the type of 'args' (line 1049)
        args_52521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 34), 'args', False)
        # Processing the call keyword arguments (line 1049)
        # Getting the type of 'kwargs' (line 1049)
        kwargs_52522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 42), 'kwargs', False)
        kwargs_52523 = {'kwargs_52522': kwargs_52522}
        # Getting the type of 'self' (line 1049)
        self_52519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 18), 'self', False)
        # Obtaining the member '_make_key' of a type (line 1049)
        _make_key_52520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 18), self_52519, '_make_key')
        # Calling _make_key(args, kwargs) (line 1049)
        _make_key_call_result_52524 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 18), _make_key_52520, *[args_52521], **kwargs_52523)
        
        # Assigning a type to the variable 'key' (line 1049)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1049, 12), 'key', _make_key_call_result_52524)
        # SSA branch for the else part of an if statement (line 1040)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 1051):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to process_projection_requirements(...): (line 1051)
        # Processing the call arguments (line 1051)
        # Getting the type of 'self' (line 1052)
        self_52526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 16), 'self', False)
        # Getting the type of 'args' (line 1052)
        args_52527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 23), 'args', False)
        # Processing the call keyword arguments (line 1051)
        # Getting the type of 'kwargs' (line 1052)
        kwargs_52528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 31), 'kwargs', False)
        kwargs_52529 = {'kwargs_52528': kwargs_52528}
        # Getting the type of 'process_projection_requirements' (line 1051)
        process_projection_requirements_52525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 44), 'process_projection_requirements', False)
        # Calling process_projection_requirements(args, kwargs) (line 1051)
        process_projection_requirements_call_result_52530 = invoke(stypy.reporting.localization.Localization(__file__, 1051, 44), process_projection_requirements_52525, *[self_52526, args_52527], **kwargs_52529)
        
        # Assigning a type to the variable 'call_assignment_50774' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'call_assignment_50774', process_projection_requirements_call_result_52530)
        
        # Assigning a Call to a Name (line 1051):
        
        # Assigning a Call to a Name (line 1051):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_52533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 12), 'int')
        # Processing the call keyword arguments
        kwargs_52534 = {}
        # Getting the type of 'call_assignment_50774' (line 1051)
        call_assignment_50774_52531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'call_assignment_50774', False)
        # Obtaining the member '__getitem__' of a type (line 1051)
        getitem___52532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 12), call_assignment_50774_52531, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_52535 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___52532, *[int_52533], **kwargs_52534)
        
        # Assigning a type to the variable 'call_assignment_50775' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'call_assignment_50775', getitem___call_result_52535)
        
        # Assigning a Name to a Name (line 1051):
        
        # Assigning a Name to a Name (line 1051):
        # Getting the type of 'call_assignment_50775' (line 1051)
        call_assignment_50775_52536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'call_assignment_50775')
        # Assigning a type to the variable 'projection_class' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'projection_class', call_assignment_50775_52536)
        
        # Assigning a Call to a Name (line 1051):
        
        # Assigning a Call to a Name (line 1051):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_52539 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 12), 'int')
        # Processing the call keyword arguments
        kwargs_52540 = {}
        # Getting the type of 'call_assignment_50774' (line 1051)
        call_assignment_50774_52537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'call_assignment_50774', False)
        # Obtaining the member '__getitem__' of a type (line 1051)
        getitem___52538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 12), call_assignment_50774_52537, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_52541 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___52538, *[int_52539], **kwargs_52540)
        
        # Assigning a type to the variable 'call_assignment_50776' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'call_assignment_50776', getitem___call_result_52541)
        
        # Assigning a Name to a Name (line 1051):
        
        # Assigning a Name to a Name (line 1051):
        # Getting the type of 'call_assignment_50776' (line 1051)
        call_assignment_50776_52542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'call_assignment_50776')
        # Assigning a type to the variable 'kwargs' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 30), 'kwargs', call_assignment_50776_52542)
        
        # Assigning a Call to a Name (line 1051):
        
        # Assigning a Call to a Name (line 1051):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_52545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 12), 'int')
        # Processing the call keyword arguments
        kwargs_52546 = {}
        # Getting the type of 'call_assignment_50774' (line 1051)
        call_assignment_50774_52543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'call_assignment_50774', False)
        # Obtaining the member '__getitem__' of a type (line 1051)
        getitem___52544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 12), call_assignment_50774_52543, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_52547 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___52544, *[int_52545], **kwargs_52546)
        
        # Assigning a type to the variable 'call_assignment_50777' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'call_assignment_50777', getitem___call_result_52547)
        
        # Assigning a Name to a Name (line 1051):
        
        # Assigning a Name to a Name (line 1051):
        # Getting the type of 'call_assignment_50777' (line 1051)
        call_assignment_50777_52548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 12), 'call_assignment_50777')
        # Assigning a type to the variable 'key' (line 1051)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1051, 38), 'key', call_assignment_50777_52548)
        
        # Assigning a Call to a Name (line 1055):
        
        # Assigning a Call to a Name (line 1055):
        
        # Assigning a Call to a Name (line 1055):
        
        # Call to get(...): (line 1055)
        # Processing the call arguments (line 1055)
        # Getting the type of 'key' (line 1055)
        key_52552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 35), 'key', False)
        # Processing the call keyword arguments (line 1055)
        kwargs_52553 = {}
        # Getting the type of 'self' (line 1055)
        self_52549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 17), 'self', False)
        # Obtaining the member '_axstack' of a type (line 1055)
        _axstack_52550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1055, 17), self_52549, '_axstack')
        # Obtaining the member 'get' of a type (line 1055)
        get_52551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1055, 17), _axstack_52550, 'get')
        # Calling get(args, kwargs) (line 1055)
        get_call_result_52554 = invoke(stypy.reporting.localization.Localization(__file__, 1055, 17), get_52551, *[key_52552], **kwargs_52553)
        
        # Assigning a type to the variable 'ax' (line 1055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 12), 'ax', get_call_result_52554)
        
        # Type idiom detected: calculating its left and rigth part (line 1057)
        # Getting the type of 'ax' (line 1057)
        ax_52555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 12), 'ax')
        # Getting the type of 'None' (line 1057)
        None_52556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 25), 'None')
        
        (may_be_52557, more_types_in_union_52558) = may_not_be_none(ax_52555, None_52556)

        if may_be_52557:

            if more_types_in_union_52558:
                # Runtime conditional SSA (line 1057)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Call to isinstance(...): (line 1058)
            # Processing the call arguments (line 1058)
            # Getting the type of 'ax' (line 1058)
            ax_52560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 30), 'ax', False)
            # Getting the type of 'projection_class' (line 1058)
            projection_class_52561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 34), 'projection_class', False)
            # Processing the call keyword arguments (line 1058)
            kwargs_52562 = {}
            # Getting the type of 'isinstance' (line 1058)
            isinstance_52559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 19), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1058)
            isinstance_call_result_52563 = invoke(stypy.reporting.localization.Localization(__file__, 1058, 19), isinstance_52559, *[ax_52560, projection_class_52561], **kwargs_52562)
            
            # Testing the type of an if condition (line 1058)
            if_condition_52564 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1058, 16), isinstance_call_result_52563)
            # Assigning a type to the variable 'if_condition_52564' (line 1058)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1058, 16), 'if_condition_52564', if_condition_52564)
            # SSA begins for if statement (line 1058)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to sca(...): (line 1060)
            # Processing the call arguments (line 1060)
            # Getting the type of 'ax' (line 1060)
            ax_52567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 29), 'ax', False)
            # Processing the call keyword arguments (line 1060)
            kwargs_52568 = {}
            # Getting the type of 'self' (line 1060)
            self_52565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 20), 'self', False)
            # Obtaining the member 'sca' of a type (line 1060)
            sca_52566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 20), self_52565, 'sca')
            # Calling sca(args, kwargs) (line 1060)
            sca_call_result_52569 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 20), sca_52566, *[ax_52567], **kwargs_52568)
            
            # Getting the type of 'ax' (line 1061)
            ax_52570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 27), 'ax')
            # Assigning a type to the variable 'stypy_return_type' (line 1061)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1061, 20), 'stypy_return_type', ax_52570)
            # SSA branch for the else part of an if statement (line 1058)
            module_type_store.open_ssa_branch('else')
            
            # Call to remove(...): (line 1068)
            # Processing the call arguments (line 1068)
            # Getting the type of 'ax' (line 1068)
            ax_52574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 41), 'ax', False)
            # Processing the call keyword arguments (line 1068)
            kwargs_52575 = {}
            # Getting the type of 'self' (line 1068)
            self_52571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 20), 'self', False)
            # Obtaining the member '_axstack' of a type (line 1068)
            _axstack_52572 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 20), self_52571, '_axstack')
            # Obtaining the member 'remove' of a type (line 1068)
            remove_52573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 20), _axstack_52572, 'remove')
            # Calling remove(args, kwargs) (line 1068)
            remove_call_result_52576 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 20), remove_52573, *[ax_52574], **kwargs_52575)
            
            # SSA join for if statement (line 1058)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_52558:
                # SSA join for if statement (line 1057)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1070):
        
        # Assigning a Call to a Name (line 1070):
        
        # Assigning a Call to a Name (line 1070):
        
        # Call to (...): (line 1070)
        # Processing the call arguments (line 1070)
        # Getting the type of 'self' (line 1070)
        self_52581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 56), 'self', False)
        # Getting the type of 'args' (line 1070)
        args_52582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 63), 'args', False)
        # Processing the call keyword arguments (line 1070)
        # Getting the type of 'kwargs' (line 1070)
        kwargs_52583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 71), 'kwargs', False)
        kwargs_52584 = {'kwargs_52583': kwargs_52583}
        
        # Call to subplot_class_factory(...): (line 1070)
        # Processing the call arguments (line 1070)
        # Getting the type of 'projection_class' (line 1070)
        projection_class_52578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 38), 'projection_class', False)
        # Processing the call keyword arguments (line 1070)
        kwargs_52579 = {}
        # Getting the type of 'subplot_class_factory' (line 1070)
        subplot_class_factory_52577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 16), 'subplot_class_factory', False)
        # Calling subplot_class_factory(args, kwargs) (line 1070)
        subplot_class_factory_call_result_52580 = invoke(stypy.reporting.localization.Localization(__file__, 1070, 16), subplot_class_factory_52577, *[projection_class_52578], **kwargs_52579)
        
        # Calling (args, kwargs) (line 1070)
        _call_result_52585 = invoke(stypy.reporting.localization.Localization(__file__, 1070, 16), subplot_class_factory_call_result_52580, *[self_52581, args_52582], **kwargs_52584)
        
        # Assigning a type to the variable 'a' (line 1070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 12), 'a', _call_result_52585)
        # SSA join for if statement (line 1040)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to add(...): (line 1072)
        # Processing the call arguments (line 1072)
        # Getting the type of 'key' (line 1072)
        key_52589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 26), 'key', False)
        # Getting the type of 'a' (line 1072)
        a_52590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 31), 'a', False)
        # Processing the call keyword arguments (line 1072)
        kwargs_52591 = {}
        # Getting the type of 'self' (line 1072)
        self_52586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 8), 'self', False)
        # Obtaining the member '_axstack' of a type (line 1072)
        _axstack_52587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 8), self_52586, '_axstack')
        # Obtaining the member 'add' of a type (line 1072)
        add_52588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 8), _axstack_52587, 'add')
        # Calling add(args, kwargs) (line 1072)
        add_call_result_52592 = invoke(stypy.reporting.localization.Localization(__file__, 1072, 8), add_52588, *[key_52589, a_52590], **kwargs_52591)
        
        
        # Call to sca(...): (line 1073)
        # Processing the call arguments (line 1073)
        # Getting the type of 'a' (line 1073)
        a_52595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 17), 'a', False)
        # Processing the call keyword arguments (line 1073)
        kwargs_52596 = {}
        # Getting the type of 'self' (line 1073)
        self_52593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 8), 'self', False)
        # Obtaining the member 'sca' of a type (line 1073)
        sca_52594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1073, 8), self_52593, 'sca')
        # Calling sca(args, kwargs) (line 1073)
        sca_call_result_52597 = invoke(stypy.reporting.localization.Localization(__file__, 1073, 8), sca_52594, *[a_52595], **kwargs_52596)
        
        
        # Assigning a Attribute to a Attribute (line 1074):
        
        # Assigning a Attribute to a Attribute (line 1074):
        
        # Assigning a Attribute to a Attribute (line 1074):
        # Getting the type of 'self' (line 1074)
        self_52598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 27), 'self')
        # Obtaining the member '__remove_ax' of a type (line 1074)
        remove_ax_52599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 27), self_52598, '__remove_ax')
        # Getting the type of 'a' (line 1074)
        a_52600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'a')
        # Setting the type of the member '_remove_method' of a type (line 1074)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 8), a_52600, '_remove_method', remove_ax_52599)
        
        # Assigning a Name to a Attribute (line 1075):
        
        # Assigning a Name to a Attribute (line 1075):
        
        # Assigning a Name to a Attribute (line 1075):
        # Getting the type of 'True' (line 1075)
        True_52601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 21), 'True')
        # Getting the type of 'self' (line 1075)
        self_52602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1075)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 8), self_52602, 'stale', True_52601)
        
        # Assigning a Name to a Attribute (line 1076):
        
        # Assigning a Name to a Attribute (line 1076):
        
        # Assigning a Name to a Attribute (line 1076):
        # Getting the type of '_stale_figure_callback' (line 1076)
        _stale_figure_callback_52603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 27), '_stale_figure_callback')
        # Getting the type of 'a' (line 1076)
        a_52604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1076, 8), 'a')
        # Setting the type of the member 'stale_callback' of a type (line 1076)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1076, 8), a_52604, 'stale_callback', _stale_figure_callback_52603)
        # Getting the type of 'a' (line 1077)
        a_52605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 1077)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1077, 8), 'stypy_return_type', a_52605)
        
        # ################# End of 'add_subplot(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_subplot' in the type store
        # Getting the type of 'stypy_return_type' (line 978)
        stypy_return_type_52606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52606)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_subplot'
        return stypy_return_type_52606


    @norecursion
    def subplots(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_52607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1079, 29), 'int')
        int_52608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1079, 38), 'int')
        # Getting the type of 'False' (line 1079)
        False_52609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 48), 'False')
        # Getting the type of 'False' (line 1079)
        False_52610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 62), 'False')
        # Getting the type of 'True' (line 1080)
        True_52611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 25), 'True')
        # Getting the type of 'None' (line 1080)
        None_52612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 42), 'None')
        # Getting the type of 'None' (line 1080)
        None_52613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1080, 60), 'None')
        defaults = [int_52607, int_52608, False_52609, False_52610, True_52611, None_52612, None_52613]
        # Create a new context for function 'subplots'
        module_type_store = module_type_store.open_function_context('subplots', 1079, 4, False)
        # Assigning a type to the variable 'self' (line 1080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.subplots.__dict__.__setitem__('stypy_localization', localization)
        Figure.subplots.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.subplots.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.subplots.__dict__.__setitem__('stypy_function_name', 'Figure.subplots')
        Figure.subplots.__dict__.__setitem__('stypy_param_names_list', ['nrows', 'ncols', 'sharex', 'sharey', 'squeeze', 'subplot_kw', 'gridspec_kw'])
        Figure.subplots.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.subplots.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.subplots.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.subplots.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.subplots.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.subplots.__dict__.__setitem__('stypy_declared_arg_number', 8)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.subplots', ['nrows', 'ncols', 'sharex', 'sharey', 'squeeze', 'subplot_kw', 'gridspec_kw'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'subplots', localization, ['nrows', 'ncols', 'sharex', 'sharey', 'squeeze', 'subplot_kw', 'gridspec_kw'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'subplots(...)' code ##################

        unicode_52614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1140, (-1)), 'unicode', u"\n        Add a set of subplots to this figure.\n\n        Parameters\n        ----------\n        nrows, ncols : int, default: 1\n            Number of rows/cols of the subplot grid.\n\n        sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False\n            Controls sharing of properties among x (`sharex`) or y (`sharey`)\n            axes:\n\n                - True or 'all': x- or y-axis will be shared among all\n                  subplots.\n                - False or 'none': each subplot x- or y-axis will be\n                  independent.\n                - 'row': each subplot row will share an x- or y-axis.\n                - 'col': each subplot column will share an x- or y-axis.\n\n            When subplots have a shared x-axis along a column, only the x tick\n            labels of the bottom subplot are visible.  Similarly, when\n            subplots have a shared y-axis along a row, only the y tick labels\n            of the first column subplot are visible.\n\n        squeeze : bool, default: True\n            - If True, extra dimensions are squeezed out from the returned\n              axis object:\n\n                - if only one subplot is constructed (nrows=ncols=1), the\n                  resulting single Axes object is returned as a scalar.\n                - for Nx1 or 1xN subplots, the returned object is a 1D numpy\n                  object array of Axes objects are returned as numpy 1D\n                  arrays.\n                - for NxM, subplots with N>1 and M>1 are returned as a 2D\n                  arrays.\n\n            - If False, no squeezing at all is done: the returned Axes object\n              is always a 2D array containing Axes instances, even if it ends\n              up being 1x1.\n\n        subplot_kw : dict, default: {}\n            Dict with keywords passed to the\n            :meth:`~matplotlib.figure.Figure.add_subplot` call used to create\n            each subplots.\n\n        gridspec_kw : dict, default: {}\n            Dict with keywords passed to the\n            :class:`~matplotlib.gridspec.GridSpec` constructor used to create\n            the grid the subplots are placed on.\n\n        Returns\n        -------\n        ax : single Axes object or array of Axes objects\n            The added axes.  The dimensions of the resulting array can be\n            controlled with the squeeze keyword, see above.\n\n        See Also\n        --------\n        pyplot.subplots : pyplot API; docstring includes examples.\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 1143)
        # Getting the type of 'bool' (line 1143)
        bool_52615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 30), 'bool')
        # Getting the type of 'sharex' (line 1143)
        sharex_52616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 22), 'sharex')
        
        (may_be_52617, more_types_in_union_52618) = may_be_subtype(bool_52615, sharex_52616)

        if may_be_52617:

            if more_types_in_union_52618:
                # Runtime conditional SSA (line 1143)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'sharex' (line 1143)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 8), 'sharex', remove_not_subtype_from_union(sharex_52616, bool))
            
            # Assigning a IfExp to a Name (line 1144):
            
            # Assigning a IfExp to a Name (line 1144):
            
            # Assigning a IfExp to a Name (line 1144):
            
            # Getting the type of 'sharex' (line 1144)
            sharex_52619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 30), 'sharex')
            # Testing the type of an if expression (line 1144)
            is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1144, 21), sharex_52619)
            # SSA begins for if expression (line 1144)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
            unicode_52620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 21), 'unicode', u'all')
            # SSA branch for the else part of an if expression (line 1144)
            module_type_store.open_ssa_branch('if expression else')
            unicode_52621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 42), 'unicode', u'none')
            # SSA join for if expression (line 1144)
            module_type_store = module_type_store.join_ssa_context()
            if_exp_52622 = union_type.UnionType.add(unicode_52620, unicode_52621)
            
            # Assigning a type to the variable 'sharex' (line 1144)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 12), 'sharex', if_exp_52622)

            if more_types_in_union_52618:
                # SSA join for if statement (line 1143)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1145)
        # Getting the type of 'bool' (line 1145)
        bool_52623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 30), 'bool')
        # Getting the type of 'sharey' (line 1145)
        sharey_52624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 22), 'sharey')
        
        (may_be_52625, more_types_in_union_52626) = may_be_subtype(bool_52623, sharey_52624)

        if may_be_52625:

            if more_types_in_union_52626:
                # Runtime conditional SSA (line 1145)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'sharey' (line 1145)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1145, 8), 'sharey', remove_not_subtype_from_union(sharey_52624, bool))
            
            # Assigning a IfExp to a Name (line 1146):
            
            # Assigning a IfExp to a Name (line 1146):
            
            # Assigning a IfExp to a Name (line 1146):
            
            # Getting the type of 'sharey' (line 1146)
            sharey_52627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 30), 'sharey')
            # Testing the type of an if expression (line 1146)
            is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1146, 21), sharey_52627)
            # SSA begins for if expression (line 1146)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
            unicode_52628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1146, 21), 'unicode', u'all')
            # SSA branch for the else part of an if expression (line 1146)
            module_type_store.open_ssa_branch('if expression else')
            unicode_52629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1146, 42), 'unicode', u'none')
            # SSA join for if expression (line 1146)
            module_type_store = module_type_store.join_ssa_context()
            if_exp_52630 = union_type.UnionType.add(unicode_52628, unicode_52629)
            
            # Assigning a type to the variable 'sharey' (line 1146)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1146, 12), 'sharey', if_exp_52630)

            if more_types_in_union_52626:
                # SSA join for if statement (line 1145)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a List to a Name (line 1147):
        
        # Assigning a List to a Name (line 1147):
        
        # Assigning a List to a Name (line 1147):
        
        # Obtaining an instance of the builtin type 'list' (line 1147)
        list_52631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1147)
        # Adding element type (line 1147)
        unicode_52632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 24), 'unicode', u'all')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1147, 23), list_52631, unicode_52632)
        # Adding element type (line 1147)
        unicode_52633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 31), 'unicode', u'row')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1147, 23), list_52631, unicode_52633)
        # Adding element type (line 1147)
        unicode_52634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 38), 'unicode', u'col')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1147, 23), list_52631, unicode_52634)
        # Adding element type (line 1147)
        unicode_52635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1147, 45), 'unicode', u'none')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1147, 23), list_52631, unicode_52635)
        
        # Assigning a type to the variable 'share_values' (line 1147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1147, 8), 'share_values', list_52631)
        
        
        # Getting the type of 'sharex' (line 1148)
        sharex_52636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 11), 'sharex')
        # Getting the type of 'share_values' (line 1148)
        share_values_52637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 25), 'share_values')
        # Applying the binary operator 'notin' (line 1148)
        result_contains_52638 = python_operator(stypy.reporting.localization.Localization(__file__, 1148, 11), 'notin', sharex_52636, share_values_52637)
        
        # Testing the type of an if condition (line 1148)
        if_condition_52639 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1148, 8), result_contains_52638)
        # Assigning a type to the variable 'if_condition_52639' (line 1148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1148, 8), 'if_condition_52639', if_condition_52639)
        # SSA begins for if statement (line 1148)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 1154)
        # Getting the type of 'int' (line 1154)
        int_52640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 34), 'int')
        # Getting the type of 'sharex' (line 1154)
        sharex_52641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1154, 26), 'sharex')
        
        (may_be_52642, more_types_in_union_52643) = may_be_subtype(int_52640, sharex_52641)

        if may_be_52642:

            if more_types_in_union_52643:
                # Runtime conditional SSA (line 1154)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'sharex' (line 1154)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1154, 12), 'sharex', remove_not_subtype_from_union(sharex_52641, int))
            
            # Call to warn(...): (line 1155)
            # Processing the call arguments (line 1155)
            unicode_52646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1156, 20), 'unicode', u"sharex argument to subplots() was an integer. Did you intend to use subplot() (without 's')?")
            # Processing the call keyword arguments (line 1155)
            kwargs_52647 = {}
            # Getting the type of 'warnings' (line 1155)
            warnings_52644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1155, 16), 'warnings', False)
            # Obtaining the member 'warn' of a type (line 1155)
            warn_52645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1155, 16), warnings_52644, 'warn')
            # Calling warn(args, kwargs) (line 1155)
            warn_call_result_52648 = invoke(stypy.reporting.localization.Localization(__file__, 1155, 16), warn_52645, *[unicode_52646], **kwargs_52647)
            

            if more_types_in_union_52643:
                # SSA join for if statement (line 1154)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to ValueError(...): (line 1159)
        # Processing the call arguments (line 1159)
        unicode_52650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 29), 'unicode', u'sharex [%s] must be one of %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1160)
        tuple_52651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1160, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1160)
        # Adding element type (line 1160)
        # Getting the type of 'sharex' (line 1160)
        sharex_52652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 30), 'sharex', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1160, 30), tuple_52651, sharex_52652)
        # Adding element type (line 1160)
        # Getting the type of 'share_values' (line 1160)
        share_values_52653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1160, 38), 'share_values', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1160, 30), tuple_52651, share_values_52653)
        
        # Applying the binary operator '%' (line 1159)
        result_mod_52654 = python_operator(stypy.reporting.localization.Localization(__file__, 1159, 29), '%', unicode_52650, tuple_52651)
        
        # Processing the call keyword arguments (line 1159)
        kwargs_52655 = {}
        # Getting the type of 'ValueError' (line 1159)
        ValueError_52649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1159)
        ValueError_call_result_52656 = invoke(stypy.reporting.localization.Localization(__file__, 1159, 18), ValueError_52649, *[result_mod_52654], **kwargs_52655)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1159, 12), ValueError_call_result_52656, 'raise parameter', BaseException)
        # SSA join for if statement (line 1148)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'sharey' (line 1161)
        sharey_52657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 11), 'sharey')
        # Getting the type of 'share_values' (line 1161)
        share_values_52658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 25), 'share_values')
        # Applying the binary operator 'notin' (line 1161)
        result_contains_52659 = python_operator(stypy.reporting.localization.Localization(__file__, 1161, 11), 'notin', sharey_52657, share_values_52658)
        
        # Testing the type of an if condition (line 1161)
        if_condition_52660 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1161, 8), result_contains_52659)
        # Assigning a type to the variable 'if_condition_52660' (line 1161)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1161, 8), 'if_condition_52660', if_condition_52660)
        # SSA begins for if statement (line 1161)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1162)
        # Processing the call arguments (line 1162)
        unicode_52662 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1162, 29), 'unicode', u'sharey [%s] must be one of %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1163)
        tuple_52663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1163, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1163)
        # Adding element type (line 1163)
        # Getting the type of 'sharey' (line 1163)
        sharey_52664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 30), 'sharey', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1163, 30), tuple_52663, sharey_52664)
        # Adding element type (line 1163)
        # Getting the type of 'share_values' (line 1163)
        share_values_52665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 38), 'share_values', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1163, 30), tuple_52663, share_values_52665)
        
        # Applying the binary operator '%' (line 1162)
        result_mod_52666 = python_operator(stypy.reporting.localization.Localization(__file__, 1162, 29), '%', unicode_52662, tuple_52663)
        
        # Processing the call keyword arguments (line 1162)
        kwargs_52667 = {}
        # Getting the type of 'ValueError' (line 1162)
        ValueError_52661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1162, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1162)
        ValueError_call_result_52668 = invoke(stypy.reporting.localization.Localization(__file__, 1162, 18), ValueError_52661, *[result_mod_52666], **kwargs_52667)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1162, 12), ValueError_call_result_52668, 'raise parameter', BaseException)
        # SSA join for if statement (line 1161)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1164)
        # Getting the type of 'subplot_kw' (line 1164)
        subplot_kw_52669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 11), 'subplot_kw')
        # Getting the type of 'None' (line 1164)
        None_52670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 25), 'None')
        
        (may_be_52671, more_types_in_union_52672) = may_be_none(subplot_kw_52669, None_52670)

        if may_be_52671:

            if more_types_in_union_52672:
                # Runtime conditional SSA (line 1164)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Dict to a Name (line 1165):
            
            # Assigning a Dict to a Name (line 1165):
            
            # Assigning a Dict to a Name (line 1165):
            
            # Obtaining an instance of the builtin type 'dict' (line 1165)
            dict_52673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1165, 25), 'dict')
            # Adding type elements to the builtin type 'dict' instance (line 1165)
            
            # Assigning a type to the variable 'subplot_kw' (line 1165)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1165, 12), 'subplot_kw', dict_52673)

            if more_types_in_union_52672:
                # SSA join for if statement (line 1164)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1166)
        # Getting the type of 'gridspec_kw' (line 1166)
        gridspec_kw_52674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 11), 'gridspec_kw')
        # Getting the type of 'None' (line 1166)
        None_52675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 26), 'None')
        
        (may_be_52676, more_types_in_union_52677) = may_be_none(gridspec_kw_52674, None_52675)

        if may_be_52676:

            if more_types_in_union_52677:
                # Runtime conditional SSA (line 1166)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Dict to a Name (line 1167):
            
            # Assigning a Dict to a Name (line 1167):
            
            # Assigning a Dict to a Name (line 1167):
            
            # Obtaining an instance of the builtin type 'dict' (line 1167)
            dict_52678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1167, 26), 'dict')
            # Adding type elements to the builtin type 'dict' instance (line 1167)
            
            # Assigning a type to the variable 'gridspec_kw' (line 1167)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1167, 12), 'gridspec_kw', dict_52678)

            if more_types_in_union_52677:
                # SSA join for if statement (line 1166)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1169):
        
        # Assigning a Call to a Name (line 1169):
        
        # Assigning a Call to a Name (line 1169):
        
        # Call to GridSpec(...): (line 1169)
        # Processing the call arguments (line 1169)
        # Getting the type of 'nrows' (line 1169)
        nrows_52680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 22), 'nrows', False)
        # Getting the type of 'ncols' (line 1169)
        ncols_52681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 29), 'ncols', False)
        # Processing the call keyword arguments (line 1169)
        # Getting the type of 'gridspec_kw' (line 1169)
        gridspec_kw_52682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 38), 'gridspec_kw', False)
        kwargs_52683 = {'gridspec_kw_52682': gridspec_kw_52682}
        # Getting the type of 'GridSpec' (line 1169)
        GridSpec_52679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1169, 13), 'GridSpec', False)
        # Calling GridSpec(args, kwargs) (line 1169)
        GridSpec_call_result_52684 = invoke(stypy.reporting.localization.Localization(__file__, 1169, 13), GridSpec_52679, *[nrows_52680, ncols_52681], **kwargs_52683)
        
        # Assigning a type to the variable 'gs' (line 1169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1169, 8), 'gs', GridSpec_call_result_52684)
        
        # Assigning a Call to a Name (line 1172):
        
        # Assigning a Call to a Name (line 1172):
        
        # Assigning a Call to a Name (line 1172):
        
        # Call to empty(...): (line 1172)
        # Processing the call arguments (line 1172)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1172)
        tuple_52687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1172, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1172)
        # Adding element type (line 1172)
        # Getting the type of 'nrows' (line 1172)
        nrows_52688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 26), 'nrows', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1172, 26), tuple_52687, nrows_52688)
        # Adding element type (line 1172)
        # Getting the type of 'ncols' (line 1172)
        ncols_52689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 33), 'ncols', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1172, 26), tuple_52687, ncols_52689)
        
        # Processing the call keyword arguments (line 1172)
        # Getting the type of 'object' (line 1172)
        object_52690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 47), 'object', False)
        keyword_52691 = object_52690
        kwargs_52692 = {'dtype': keyword_52691}
        # Getting the type of 'np' (line 1172)
        np_52685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 16), 'np', False)
        # Obtaining the member 'empty' of a type (line 1172)
        empty_52686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1172, 16), np_52685, 'empty')
        # Calling empty(args, kwargs) (line 1172)
        empty_call_result_52693 = invoke(stypy.reporting.localization.Localization(__file__, 1172, 16), empty_52686, *[tuple_52687], **kwargs_52692)
        
        # Assigning a type to the variable 'axarr' (line 1172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1172, 8), 'axarr', empty_call_result_52693)
        
        
        # Call to range(...): (line 1173)
        # Processing the call arguments (line 1173)
        # Getting the type of 'nrows' (line 1173)
        nrows_52695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 25), 'nrows', False)
        # Processing the call keyword arguments (line 1173)
        kwargs_52696 = {}
        # Getting the type of 'range' (line 1173)
        range_52694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 19), 'range', False)
        # Calling range(args, kwargs) (line 1173)
        range_call_result_52697 = invoke(stypy.reporting.localization.Localization(__file__, 1173, 19), range_52694, *[nrows_52695], **kwargs_52696)
        
        # Testing the type of a for loop iterable (line 1173)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1173, 8), range_call_result_52697)
        # Getting the type of the for loop variable (line 1173)
        for_loop_var_52698 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1173, 8), range_call_result_52697)
        # Assigning a type to the variable 'row' (line 1173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1173, 8), 'row', for_loop_var_52698)
        # SSA begins for a for statement (line 1173)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to range(...): (line 1174)
        # Processing the call arguments (line 1174)
        # Getting the type of 'ncols' (line 1174)
        ncols_52700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 29), 'ncols', False)
        # Processing the call keyword arguments (line 1174)
        kwargs_52701 = {}
        # Getting the type of 'range' (line 1174)
        range_52699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 23), 'range', False)
        # Calling range(args, kwargs) (line 1174)
        range_call_result_52702 = invoke(stypy.reporting.localization.Localization(__file__, 1174, 23), range_52699, *[ncols_52700], **kwargs_52701)
        
        # Testing the type of a for loop iterable (line 1174)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1174, 12), range_call_result_52702)
        # Getting the type of the for loop variable (line 1174)
        for_loop_var_52703 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1174, 12), range_call_result_52702)
        # Assigning a type to the variable 'col' (line 1174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1174, 12), 'col', for_loop_var_52703)
        # SSA begins for a for statement (line 1174)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Dict to a Name (line 1175):
        
        # Assigning a Dict to a Name (line 1175):
        
        # Assigning a Dict to a Name (line 1175):
        
        # Obtaining an instance of the builtin type 'dict' (line 1175)
        dict_52704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 30), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1175)
        # Adding element type (key, value) (line 1175)
        unicode_52705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 31), 'unicode', u'none')
        # Getting the type of 'None' (line 1175)
        None_52706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 39), 'None')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1175, 30), dict_52704, (unicode_52705, None_52706))
        # Adding element type (key, value) (line 1175)
        unicode_52707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 45), 'unicode', u'all')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1175)
        tuple_52708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 58), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1175)
        # Adding element type (line 1175)
        int_52709 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 58), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1175, 58), tuple_52708, int_52709)
        # Adding element type (line 1175)
        int_52710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1175, 61), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1175, 58), tuple_52708, int_52710)
        
        # Getting the type of 'axarr' (line 1175)
        axarr_52711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 52), 'axarr')
        # Obtaining the member '__getitem__' of a type (line 1175)
        getitem___52712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 52), axarr_52711, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1175)
        subscript_call_result_52713 = invoke(stypy.reporting.localization.Localization(__file__, 1175, 52), getitem___52712, tuple_52708)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1175, 30), dict_52704, (unicode_52707, subscript_call_result_52713))
        # Adding element type (key, value) (line 1175)
        unicode_52714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 31), 'unicode', u'row')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1176)
        tuple_52715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 44), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1176)
        # Adding element type (line 1176)
        # Getting the type of 'row' (line 1176)
        row_52716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 44), 'row')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1176, 44), tuple_52715, row_52716)
        # Adding element type (line 1176)
        int_52717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 49), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1176, 44), tuple_52715, int_52717)
        
        # Getting the type of 'axarr' (line 1176)
        axarr_52718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 38), 'axarr')
        # Obtaining the member '__getitem__' of a type (line 1176)
        getitem___52719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 38), axarr_52718, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1176)
        subscript_call_result_52720 = invoke(stypy.reporting.localization.Localization(__file__, 1176, 38), getitem___52719, tuple_52715)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1175, 30), dict_52704, (unicode_52714, subscript_call_result_52720))
        # Adding element type (key, value) (line 1175)
        unicode_52721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 53), 'unicode', u'col')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1176)
        tuple_52722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 66), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1176)
        # Adding element type (line 1176)
        int_52723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1176, 66), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1176, 66), tuple_52722, int_52723)
        # Adding element type (line 1176)
        # Getting the type of 'col' (line 1176)
        col_52724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 69), 'col')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1176, 66), tuple_52722, col_52724)
        
        # Getting the type of 'axarr' (line 1176)
        axarr_52725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 60), 'axarr')
        # Obtaining the member '__getitem__' of a type (line 1176)
        getitem___52726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 60), axarr_52725, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1176)
        subscript_call_result_52727 = invoke(stypy.reporting.localization.Localization(__file__, 1176, 60), getitem___52726, tuple_52722)
        
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1175, 30), dict_52704, (unicode_52721, subscript_call_result_52727))
        
        # Assigning a type to the variable 'shared_with' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 16), 'shared_with', dict_52704)
        
        # Assigning a Subscript to a Subscript (line 1177):
        
        # Assigning a Subscript to a Subscript (line 1177):
        
        # Assigning a Subscript to a Subscript (line 1177):
        
        # Obtaining the type of the subscript
        # Getting the type of 'sharex' (line 1177)
        sharex_52728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 51), 'sharex')
        # Getting the type of 'shared_with' (line 1177)
        shared_with_52729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 39), 'shared_with')
        # Obtaining the member '__getitem__' of a type (line 1177)
        getitem___52730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 39), shared_with_52729, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1177)
        subscript_call_result_52731 = invoke(stypy.reporting.localization.Localization(__file__, 1177, 39), getitem___52730, sharex_52728)
        
        # Getting the type of 'subplot_kw' (line 1177)
        subplot_kw_52732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 16), 'subplot_kw')
        unicode_52733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1177, 27), 'unicode', u'sharex')
        # Storing an element on a container (line 1177)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1177, 16), subplot_kw_52732, (unicode_52733, subscript_call_result_52731))
        
        # Assigning a Subscript to a Subscript (line 1178):
        
        # Assigning a Subscript to a Subscript (line 1178):
        
        # Assigning a Subscript to a Subscript (line 1178):
        
        # Obtaining the type of the subscript
        # Getting the type of 'sharey' (line 1178)
        sharey_52734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 51), 'sharey')
        # Getting the type of 'shared_with' (line 1178)
        shared_with_52735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 39), 'shared_with')
        # Obtaining the member '__getitem__' of a type (line 1178)
        getitem___52736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1178, 39), shared_with_52735, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1178)
        subscript_call_result_52737 = invoke(stypy.reporting.localization.Localization(__file__, 1178, 39), getitem___52736, sharey_52734)
        
        # Getting the type of 'subplot_kw' (line 1178)
        subplot_kw_52738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 16), 'subplot_kw')
        unicode_52739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1178, 27), 'unicode', u'sharey')
        # Storing an element on a container (line 1178)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1178, 16), subplot_kw_52738, (unicode_52739, subscript_call_result_52737))
        
        # Assigning a Call to a Subscript (line 1179):
        
        # Assigning a Call to a Subscript (line 1179):
        
        # Assigning a Call to a Subscript (line 1179):
        
        # Call to add_subplot(...): (line 1179)
        # Processing the call arguments (line 1179)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1179)
        tuple_52742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 54), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1179)
        # Adding element type (line 1179)
        # Getting the type of 'row' (line 1179)
        row_52743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 54), 'row', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1179, 54), tuple_52742, row_52743)
        # Adding element type (line 1179)
        # Getting the type of 'col' (line 1179)
        col_52744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 59), 'col', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1179, 54), tuple_52742, col_52744)
        
        # Getting the type of 'gs' (line 1179)
        gs_52745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 51), 'gs', False)
        # Obtaining the member '__getitem__' of a type (line 1179)
        getitem___52746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 51), gs_52745, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1179)
        subscript_call_result_52747 = invoke(stypy.reporting.localization.Localization(__file__, 1179, 51), getitem___52746, tuple_52742)
        
        # Processing the call keyword arguments (line 1179)
        # Getting the type of 'subplot_kw' (line 1179)
        subplot_kw_52748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 67), 'subplot_kw', False)
        kwargs_52749 = {'subplot_kw_52748': subplot_kw_52748}
        # Getting the type of 'self' (line 1179)
        self_52740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 34), 'self', False)
        # Obtaining the member 'add_subplot' of a type (line 1179)
        add_subplot_52741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 34), self_52740, 'add_subplot')
        # Calling add_subplot(args, kwargs) (line 1179)
        add_subplot_call_result_52750 = invoke(stypy.reporting.localization.Localization(__file__, 1179, 34), add_subplot_52741, *[subscript_call_result_52747], **kwargs_52749)
        
        # Getting the type of 'axarr' (line 1179)
        axarr_52751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 16), 'axarr')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1179)
        tuple_52752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 22), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1179)
        # Adding element type (line 1179)
        # Getting the type of 'row' (line 1179)
        row_52753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 22), 'row')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1179, 22), tuple_52752, row_52753)
        # Adding element type (line 1179)
        # Getting the type of 'col' (line 1179)
        col_52754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 27), 'col')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1179, 22), tuple_52752, col_52754)
        
        # Storing an element on a container (line 1179)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1179, 16), axarr_52751, (tuple_52752, add_subplot_call_result_52750))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'sharex' (line 1182)
        sharex_52755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 11), 'sharex')
        
        # Obtaining an instance of the builtin type 'list' (line 1182)
        list_52756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1182)
        # Adding element type (line 1182)
        unicode_52757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 22), 'unicode', u'col')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1182, 21), list_52756, unicode_52757)
        # Adding element type (line 1182)
        unicode_52758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1182, 29), 'unicode', u'all')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1182, 21), list_52756, unicode_52758)
        
        # Applying the binary operator 'in' (line 1182)
        result_contains_52759 = python_operator(stypy.reporting.localization.Localization(__file__, 1182, 11), 'in', sharex_52755, list_52756)
        
        # Testing the type of an if condition (line 1182)
        if_condition_52760 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1182, 8), result_contains_52759)
        # Assigning a type to the variable 'if_condition_52760' (line 1182)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1182, 8), 'if_condition_52760', if_condition_52760)
        # SSA begins for if statement (line 1182)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Obtaining the type of the subscript
        int_52761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1184, 29), 'int')
        slice_52762 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1184, 22), None, int_52761, None)
        slice_52763 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1184, 22), None, None, None)
        # Getting the type of 'axarr' (line 1184)
        axarr_52764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 22), 'axarr')
        # Obtaining the member '__getitem__' of a type (line 1184)
        getitem___52765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1184, 22), axarr_52764, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1184)
        subscript_call_result_52766 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 22), getitem___52765, (slice_52762, slice_52763))
        
        # Obtaining the member 'flat' of a type (line 1184)
        flat_52767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1184, 22), subscript_call_result_52766, 'flat')
        # Testing the type of a for loop iterable (line 1184)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1184, 12), flat_52767)
        # Getting the type of the for loop variable (line 1184)
        for_loop_var_52768 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1184, 12), flat_52767)
        # Assigning a type to the variable 'ax' (line 1184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1184, 12), 'ax', for_loop_var_52768)
        # SSA begins for a for statement (line 1184)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_tick_params(...): (line 1185)
        # Processing the call keyword arguments (line 1185)
        unicode_52772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1185, 47), 'unicode', u'both')
        keyword_52773 = unicode_52772
        # Getting the type of 'False' (line 1186)
        False_52774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 53), 'False', False)
        keyword_52775 = False_52774
        # Getting the type of 'False' (line 1186)
        False_52776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 69), 'False', False)
        keyword_52777 = False_52776
        kwargs_52778 = {'labeltop': keyword_52777, 'labelbottom': keyword_52775, 'which': keyword_52773}
        # Getting the type of 'ax' (line 1185)
        ax_52769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 16), 'ax', False)
        # Obtaining the member 'xaxis' of a type (line 1185)
        xaxis_52770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 16), ax_52769, 'xaxis')
        # Obtaining the member 'set_tick_params' of a type (line 1185)
        set_tick_params_52771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 16), xaxis_52770, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 1185)
        set_tick_params_call_result_52779 = invoke(stypy.reporting.localization.Localization(__file__, 1185, 16), set_tick_params_52771, *[], **kwargs_52778)
        
        
        # Call to set_visible(...): (line 1187)
        # Processing the call arguments (line 1187)
        # Getting the type of 'False' (line 1187)
        False_52784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 48), 'False', False)
        # Processing the call keyword arguments (line 1187)
        kwargs_52785 = {}
        # Getting the type of 'ax' (line 1187)
        ax_52780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 16), 'ax', False)
        # Obtaining the member 'xaxis' of a type (line 1187)
        xaxis_52781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 16), ax_52780, 'xaxis')
        # Obtaining the member 'offsetText' of a type (line 1187)
        offsetText_52782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 16), xaxis_52781, 'offsetText')
        # Obtaining the member 'set_visible' of a type (line 1187)
        set_visible_52783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 16), offsetText_52782, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1187)
        set_visible_call_result_52786 = invoke(stypy.reporting.localization.Localization(__file__, 1187, 16), set_visible_52783, *[False_52784], **kwargs_52785)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1182)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'sharey' (line 1188)
        sharey_52787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 11), 'sharey')
        
        # Obtaining an instance of the builtin type 'list' (line 1188)
        list_52788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1188, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1188)
        # Adding element type (line 1188)
        unicode_52789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1188, 22), 'unicode', u'row')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1188, 21), list_52788, unicode_52789)
        # Adding element type (line 1188)
        unicode_52790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1188, 29), 'unicode', u'all')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1188, 21), list_52788, unicode_52790)
        
        # Applying the binary operator 'in' (line 1188)
        result_contains_52791 = python_operator(stypy.reporting.localization.Localization(__file__, 1188, 11), 'in', sharey_52787, list_52788)
        
        # Testing the type of an if condition (line 1188)
        if_condition_52792 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1188, 8), result_contains_52791)
        # Assigning a type to the variable 'if_condition_52792' (line 1188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 8), 'if_condition_52792', if_condition_52792)
        # SSA begins for if statement (line 1188)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Obtaining the type of the subscript
        slice_52793 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1190, 22), None, None, None)
        int_52794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 31), 'int')
        slice_52795 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1190, 22), int_52794, None, None)
        # Getting the type of 'axarr' (line 1190)
        axarr_52796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 22), 'axarr')
        # Obtaining the member '__getitem__' of a type (line 1190)
        getitem___52797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 22), axarr_52796, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1190)
        subscript_call_result_52798 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 22), getitem___52797, (slice_52793, slice_52795))
        
        # Obtaining the member 'flat' of a type (line 1190)
        flat_52799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1190, 22), subscript_call_result_52798, 'flat')
        # Testing the type of a for loop iterable (line 1190)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1190, 12), flat_52799)
        # Getting the type of the for loop variable (line 1190)
        for_loop_var_52800 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1190, 12), flat_52799)
        # Assigning a type to the variable 'ax' (line 1190)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1190, 12), 'ax', for_loop_var_52800)
        # SSA begins for a for statement (line 1190)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_tick_params(...): (line 1191)
        # Processing the call keyword arguments (line 1191)
        unicode_52804 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1191, 47), 'unicode', u'both')
        keyword_52805 = unicode_52804
        # Getting the type of 'False' (line 1192)
        False_52806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 51), 'False', False)
        keyword_52807 = False_52806
        # Getting the type of 'False' (line 1192)
        False_52808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 69), 'False', False)
        keyword_52809 = False_52808
        kwargs_52810 = {'labelleft': keyword_52807, 'labelright': keyword_52809, 'which': keyword_52805}
        # Getting the type of 'ax' (line 1191)
        ax_52801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 16), 'ax', False)
        # Obtaining the member 'yaxis' of a type (line 1191)
        yaxis_52802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 16), ax_52801, 'yaxis')
        # Obtaining the member 'set_tick_params' of a type (line 1191)
        set_tick_params_52803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1191, 16), yaxis_52802, 'set_tick_params')
        # Calling set_tick_params(args, kwargs) (line 1191)
        set_tick_params_call_result_52811 = invoke(stypy.reporting.localization.Localization(__file__, 1191, 16), set_tick_params_52803, *[], **kwargs_52810)
        
        
        # Call to set_visible(...): (line 1193)
        # Processing the call arguments (line 1193)
        # Getting the type of 'False' (line 1193)
        False_52816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 48), 'False', False)
        # Processing the call keyword arguments (line 1193)
        kwargs_52817 = {}
        # Getting the type of 'ax' (line 1193)
        ax_52812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1193, 16), 'ax', False)
        # Obtaining the member 'yaxis' of a type (line 1193)
        yaxis_52813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 16), ax_52812, 'yaxis')
        # Obtaining the member 'offsetText' of a type (line 1193)
        offsetText_52814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 16), yaxis_52813, 'offsetText')
        # Obtaining the member 'set_visible' of a type (line 1193)
        set_visible_52815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1193, 16), offsetText_52814, 'set_visible')
        # Calling set_visible(args, kwargs) (line 1193)
        set_visible_call_result_52818 = invoke(stypy.reporting.localization.Localization(__file__, 1193, 16), set_visible_52815, *[False_52816], **kwargs_52817)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1188)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'squeeze' (line 1195)
        squeeze_52819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 11), 'squeeze')
        # Testing the type of an if condition (line 1195)
        if_condition_52820 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1195, 8), squeeze_52819)
        # Assigning a type to the variable 'if_condition_52820' (line 1195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 8), 'if_condition_52820', if_condition_52820)
        # SSA begins for if statement (line 1195)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'axarr' (line 1198)
        axarr_52821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 35), 'axarr')
        # Obtaining the member 'size' of a type (line 1198)
        size_52822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 35), axarr_52821, 'size')
        int_52823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1198, 49), 'int')
        # Applying the binary operator '==' (line 1198)
        result_eq_52824 = python_operator(stypy.reporting.localization.Localization(__file__, 1198, 35), '==', size_52822, int_52823)
        
        # Testing the type of an if expression (line 1198)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1198, 19), result_eq_52824)
        # SSA begins for if expression (line 1198)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to item(...): (line 1198)
        # Processing the call keyword arguments (line 1198)
        kwargs_52827 = {}
        # Getting the type of 'axarr' (line 1198)
        axarr_52825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 19), 'axarr', False)
        # Obtaining the member 'item' of a type (line 1198)
        item_52826 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 19), axarr_52825, 'item')
        # Calling item(args, kwargs) (line 1198)
        item_call_result_52828 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 19), item_52826, *[], **kwargs_52827)
        
        # SSA branch for the else part of an if expression (line 1198)
        module_type_store.open_ssa_branch('if expression else')
        
        # Call to squeeze(...): (line 1198)
        # Processing the call keyword arguments (line 1198)
        kwargs_52831 = {}
        # Getting the type of 'axarr' (line 1198)
        axarr_52829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1198, 56), 'axarr', False)
        # Obtaining the member 'squeeze' of a type (line 1198)
        squeeze_52830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1198, 56), axarr_52829, 'squeeze')
        # Calling squeeze(args, kwargs) (line 1198)
        squeeze_call_result_52832 = invoke(stypy.reporting.localization.Localization(__file__, 1198, 56), squeeze_52830, *[], **kwargs_52831)
        
        # SSA join for if expression (line 1198)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_52833 = union_type.UnionType.add(item_call_result_52828, squeeze_call_result_52832)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1198, 12), 'stypy_return_type', if_exp_52833)
        # SSA branch for the else part of an if statement (line 1195)
        module_type_store.open_ssa_branch('else')
        # Getting the type of 'axarr' (line 1201)
        axarr_52834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 19), 'axarr')
        # Assigning a type to the variable 'stypy_return_type' (line 1201)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1201, 12), 'stypy_return_type', axarr_52834)
        # SSA join for if statement (line 1195)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'subplots(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'subplots' in the type store
        # Getting the type of 'stypy_return_type' (line 1079)
        stypy_return_type_52835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52835)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'subplots'
        return stypy_return_type_52835


    @norecursion
    def __remove_ax(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__remove_ax'
        module_type_store = module_type_store.open_function_context('__remove_ax', 1203, 4, False)
        # Assigning a type to the variable 'self' (line 1204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.__remove_ax.__dict__.__setitem__('stypy_localization', localization)
        Figure.__remove_ax.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.__remove_ax.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.__remove_ax.__dict__.__setitem__('stypy_function_name', 'Figure.__remove_ax')
        Figure.__remove_ax.__dict__.__setitem__('stypy_param_names_list', ['ax'])
        Figure.__remove_ax.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.__remove_ax.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.__remove_ax.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.__remove_ax.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.__remove_ax.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.__remove_ax.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.__remove_ax', ['ax'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__remove_ax', localization, ['ax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__remove_ax(...)' code ##################


        @norecursion
        def _reset_loc_form(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_reset_loc_form'
            module_type_store = module_type_store.open_function_context('_reset_loc_form', 1204, 8, False)
            
            # Passed parameters checking function
            _reset_loc_form.stypy_localization = localization
            _reset_loc_form.stypy_type_of_self = None
            _reset_loc_form.stypy_type_store = module_type_store
            _reset_loc_form.stypy_function_name = '_reset_loc_form'
            _reset_loc_form.stypy_param_names_list = ['axis']
            _reset_loc_form.stypy_varargs_param_name = None
            _reset_loc_form.stypy_kwargs_param_name = None
            _reset_loc_form.stypy_call_defaults = defaults
            _reset_loc_form.stypy_call_varargs = varargs
            _reset_loc_form.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_reset_loc_form', ['axis'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '_reset_loc_form', localization, ['axis'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '_reset_loc_form(...)' code ##################

            
            # Call to set_major_formatter(...): (line 1205)
            # Processing the call arguments (line 1205)
            
            # Call to get_major_formatter(...): (line 1205)
            # Processing the call keyword arguments (line 1205)
            kwargs_52840 = {}
            # Getting the type of 'axis' (line 1205)
            axis_52838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 37), 'axis', False)
            # Obtaining the member 'get_major_formatter' of a type (line 1205)
            get_major_formatter_52839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 37), axis_52838, 'get_major_formatter')
            # Calling get_major_formatter(args, kwargs) (line 1205)
            get_major_formatter_call_result_52841 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 37), get_major_formatter_52839, *[], **kwargs_52840)
            
            # Processing the call keyword arguments (line 1205)
            kwargs_52842 = {}
            # Getting the type of 'axis' (line 1205)
            axis_52836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 12), 'axis', False)
            # Obtaining the member 'set_major_formatter' of a type (line 1205)
            set_major_formatter_52837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 12), axis_52836, 'set_major_formatter')
            # Calling set_major_formatter(args, kwargs) (line 1205)
            set_major_formatter_call_result_52843 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 12), set_major_formatter_52837, *[get_major_formatter_call_result_52841], **kwargs_52842)
            
            
            # Call to set_major_locator(...): (line 1206)
            # Processing the call arguments (line 1206)
            
            # Call to get_major_locator(...): (line 1206)
            # Processing the call keyword arguments (line 1206)
            kwargs_52848 = {}
            # Getting the type of 'axis' (line 1206)
            axis_52846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 35), 'axis', False)
            # Obtaining the member 'get_major_locator' of a type (line 1206)
            get_major_locator_52847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 35), axis_52846, 'get_major_locator')
            # Calling get_major_locator(args, kwargs) (line 1206)
            get_major_locator_call_result_52849 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 35), get_major_locator_52847, *[], **kwargs_52848)
            
            # Processing the call keyword arguments (line 1206)
            kwargs_52850 = {}
            # Getting the type of 'axis' (line 1206)
            axis_52844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 12), 'axis', False)
            # Obtaining the member 'set_major_locator' of a type (line 1206)
            set_major_locator_52845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 12), axis_52844, 'set_major_locator')
            # Calling set_major_locator(args, kwargs) (line 1206)
            set_major_locator_call_result_52851 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 12), set_major_locator_52845, *[get_major_locator_call_result_52849], **kwargs_52850)
            
            
            # Call to set_minor_formatter(...): (line 1207)
            # Processing the call arguments (line 1207)
            
            # Call to get_minor_formatter(...): (line 1207)
            # Processing the call keyword arguments (line 1207)
            kwargs_52856 = {}
            # Getting the type of 'axis' (line 1207)
            axis_52854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 37), 'axis', False)
            # Obtaining the member 'get_minor_formatter' of a type (line 1207)
            get_minor_formatter_52855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1207, 37), axis_52854, 'get_minor_formatter')
            # Calling get_minor_formatter(args, kwargs) (line 1207)
            get_minor_formatter_call_result_52857 = invoke(stypy.reporting.localization.Localization(__file__, 1207, 37), get_minor_formatter_52855, *[], **kwargs_52856)
            
            # Processing the call keyword arguments (line 1207)
            kwargs_52858 = {}
            # Getting the type of 'axis' (line 1207)
            axis_52852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 12), 'axis', False)
            # Obtaining the member 'set_minor_formatter' of a type (line 1207)
            set_minor_formatter_52853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1207, 12), axis_52852, 'set_minor_formatter')
            # Calling set_minor_formatter(args, kwargs) (line 1207)
            set_minor_formatter_call_result_52859 = invoke(stypy.reporting.localization.Localization(__file__, 1207, 12), set_minor_formatter_52853, *[get_minor_formatter_call_result_52857], **kwargs_52858)
            
            
            # Call to set_minor_locator(...): (line 1208)
            # Processing the call arguments (line 1208)
            
            # Call to get_minor_locator(...): (line 1208)
            # Processing the call keyword arguments (line 1208)
            kwargs_52864 = {}
            # Getting the type of 'axis' (line 1208)
            axis_52862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 35), 'axis', False)
            # Obtaining the member 'get_minor_locator' of a type (line 1208)
            get_minor_locator_52863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 35), axis_52862, 'get_minor_locator')
            # Calling get_minor_locator(args, kwargs) (line 1208)
            get_minor_locator_call_result_52865 = invoke(stypy.reporting.localization.Localization(__file__, 1208, 35), get_minor_locator_52863, *[], **kwargs_52864)
            
            # Processing the call keyword arguments (line 1208)
            kwargs_52866 = {}
            # Getting the type of 'axis' (line 1208)
            axis_52860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 12), 'axis', False)
            # Obtaining the member 'set_minor_locator' of a type (line 1208)
            set_minor_locator_52861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1208, 12), axis_52860, 'set_minor_locator')
            # Calling set_minor_locator(args, kwargs) (line 1208)
            set_minor_locator_call_result_52867 = invoke(stypy.reporting.localization.Localization(__file__, 1208, 12), set_minor_locator_52861, *[get_minor_locator_call_result_52865], **kwargs_52866)
            
            
            # ################# End of '_reset_loc_form(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '_reset_loc_form' in the type store
            # Getting the type of 'stypy_return_type' (line 1204)
            stypy_return_type_52868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_52868)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_reset_loc_form'
            return stypy_return_type_52868

        # Assigning a type to the variable '_reset_loc_form' (line 1204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 8), '_reset_loc_form', _reset_loc_form)

        @norecursion
        def _break_share_link(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_break_share_link'
            module_type_store = module_type_store.open_function_context('_break_share_link', 1210, 8, False)
            
            # Passed parameters checking function
            _break_share_link.stypy_localization = localization
            _break_share_link.stypy_type_of_self = None
            _break_share_link.stypy_type_store = module_type_store
            _break_share_link.stypy_function_name = '_break_share_link'
            _break_share_link.stypy_param_names_list = ['ax', 'grouper']
            _break_share_link.stypy_varargs_param_name = None
            _break_share_link.stypy_kwargs_param_name = None
            _break_share_link.stypy_call_defaults = defaults
            _break_share_link.stypy_call_varargs = varargs
            _break_share_link.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_break_share_link', ['ax', 'grouper'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, '_break_share_link', localization, ['ax', 'grouper'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '_break_share_link(...)' code ##################

            
            # Assigning a Call to a Name (line 1211):
            
            # Assigning a Call to a Name (line 1211):
            
            # Assigning a Call to a Name (line 1211):
            
            # Call to get_siblings(...): (line 1211)
            # Processing the call arguments (line 1211)
            # Getting the type of 'ax' (line 1211)
            ax_52871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 44), 'ax', False)
            # Processing the call keyword arguments (line 1211)
            kwargs_52872 = {}
            # Getting the type of 'grouper' (line 1211)
            grouper_52869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1211, 23), 'grouper', False)
            # Obtaining the member 'get_siblings' of a type (line 1211)
            get_siblings_52870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1211, 23), grouper_52869, 'get_siblings')
            # Calling get_siblings(args, kwargs) (line 1211)
            get_siblings_call_result_52873 = invoke(stypy.reporting.localization.Localization(__file__, 1211, 23), get_siblings_52870, *[ax_52871], **kwargs_52872)
            
            # Assigning a type to the variable 'siblings' (line 1211)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 12), 'siblings', get_siblings_call_result_52873)
            
            
            
            # Call to len(...): (line 1212)
            # Processing the call arguments (line 1212)
            # Getting the type of 'siblings' (line 1212)
            siblings_52875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 19), 'siblings', False)
            # Processing the call keyword arguments (line 1212)
            kwargs_52876 = {}
            # Getting the type of 'len' (line 1212)
            len_52874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 15), 'len', False)
            # Calling len(args, kwargs) (line 1212)
            len_call_result_52877 = invoke(stypy.reporting.localization.Localization(__file__, 1212, 15), len_52874, *[siblings_52875], **kwargs_52876)
            
            int_52878 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1212, 31), 'int')
            # Applying the binary operator '>' (line 1212)
            result_gt_52879 = python_operator(stypy.reporting.localization.Localization(__file__, 1212, 15), '>', len_call_result_52877, int_52878)
            
            # Testing the type of an if condition (line 1212)
            if_condition_52880 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1212, 12), result_gt_52879)
            # Assigning a type to the variable 'if_condition_52880' (line 1212)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 12), 'if_condition_52880', if_condition_52880)
            # SSA begins for if statement (line 1212)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to remove(...): (line 1213)
            # Processing the call arguments (line 1213)
            # Getting the type of 'ax' (line 1213)
            ax_52883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 31), 'ax', False)
            # Processing the call keyword arguments (line 1213)
            kwargs_52884 = {}
            # Getting the type of 'grouper' (line 1213)
            grouper_52881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 16), 'grouper', False)
            # Obtaining the member 'remove' of a type (line 1213)
            remove_52882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1213, 16), grouper_52881, 'remove')
            # Calling remove(args, kwargs) (line 1213)
            remove_call_result_52885 = invoke(stypy.reporting.localization.Localization(__file__, 1213, 16), remove_52882, *[ax_52883], **kwargs_52884)
            
            
            # Getting the type of 'siblings' (line 1214)
            siblings_52886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 31), 'siblings')
            # Testing the type of a for loop iterable (line 1214)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1214, 16), siblings_52886)
            # Getting the type of the for loop variable (line 1214)
            for_loop_var_52887 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1214, 16), siblings_52886)
            # Assigning a type to the variable 'last_ax' (line 1214)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1214, 16), 'last_ax', for_loop_var_52887)
            # SSA begins for a for statement (line 1214)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # Getting the type of 'ax' (line 1215)
            ax_52888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 23), 'ax')
            # Getting the type of 'last_ax' (line 1215)
            last_ax_52889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 29), 'last_ax')
            # Applying the binary operator 'is' (line 1215)
            result_is__52890 = python_operator(stypy.reporting.localization.Localization(__file__, 1215, 23), 'is', ax_52888, last_ax_52889)
            
            # Testing the type of an if condition (line 1215)
            if_condition_52891 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1215, 20), result_is__52890)
            # Assigning a type to the variable 'if_condition_52891' (line 1215)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 20), 'if_condition_52891', if_condition_52891)
            # SSA begins for if statement (line 1215)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # SSA join for if statement (line 1215)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'last_ax' (line 1217)
            last_ax_52892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 27), 'last_ax')
            # Assigning a type to the variable 'stypy_return_type' (line 1217)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 20), 'stypy_return_type', last_ax_52892)
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1212)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'None' (line 1218)
            None_52893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 19), 'None')
            # Assigning a type to the variable 'stypy_return_type' (line 1218)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1218, 12), 'stypy_return_type', None_52893)
            
            # ################# End of '_break_share_link(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function '_break_share_link' in the type store
            # Getting the type of 'stypy_return_type' (line 1210)
            stypy_return_type_52894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_52894)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_break_share_link'
            return stypy_return_type_52894

        # Assigning a type to the variable '_break_share_link' (line 1210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 8), '_break_share_link', _break_share_link)
        
        # Call to delaxes(...): (line 1220)
        # Processing the call arguments (line 1220)
        # Getting the type of 'ax' (line 1220)
        ax_52897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 21), 'ax', False)
        # Processing the call keyword arguments (line 1220)
        kwargs_52898 = {}
        # Getting the type of 'self' (line 1220)
        self_52895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 8), 'self', False)
        # Obtaining the member 'delaxes' of a type (line 1220)
        delaxes_52896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1220, 8), self_52895, 'delaxes')
        # Calling delaxes(args, kwargs) (line 1220)
        delaxes_call_result_52899 = invoke(stypy.reporting.localization.Localization(__file__, 1220, 8), delaxes_52896, *[ax_52897], **kwargs_52898)
        
        
        # Assigning a Call to a Name (line 1221):
        
        # Assigning a Call to a Name (line 1221):
        
        # Assigning a Call to a Name (line 1221):
        
        # Call to _break_share_link(...): (line 1221)
        # Processing the call arguments (line 1221)
        # Getting the type of 'ax' (line 1221)
        ax_52901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 36), 'ax', False)
        # Getting the type of 'ax' (line 1221)
        ax_52902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 40), 'ax', False)
        # Obtaining the member '_shared_y_axes' of a type (line 1221)
        _shared_y_axes_52903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 40), ax_52902, '_shared_y_axes')
        # Processing the call keyword arguments (line 1221)
        kwargs_52904 = {}
        # Getting the type of '_break_share_link' (line 1221)
        _break_share_link_52900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 18), '_break_share_link', False)
        # Calling _break_share_link(args, kwargs) (line 1221)
        _break_share_link_call_result_52905 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 18), _break_share_link_52900, *[ax_52901, _shared_y_axes_52903], **kwargs_52904)
        
        # Assigning a type to the variable 'last_ax' (line 1221)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1221, 8), 'last_ax', _break_share_link_call_result_52905)
        
        # Type idiom detected: calculating its left and rigth part (line 1222)
        # Getting the type of 'last_ax' (line 1222)
        last_ax_52906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 8), 'last_ax')
        # Getting the type of 'None' (line 1222)
        None_52907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 26), 'None')
        
        (may_be_52908, more_types_in_union_52909) = may_not_be_none(last_ax_52906, None_52907)

        if may_be_52908:

            if more_types_in_union_52909:
                # Runtime conditional SSA (line 1222)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to _reset_loc_form(...): (line 1223)
            # Processing the call arguments (line 1223)
            # Getting the type of 'last_ax' (line 1223)
            last_ax_52911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 28), 'last_ax', False)
            # Obtaining the member 'yaxis' of a type (line 1223)
            yaxis_52912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1223, 28), last_ax_52911, 'yaxis')
            # Processing the call keyword arguments (line 1223)
            kwargs_52913 = {}
            # Getting the type of '_reset_loc_form' (line 1223)
            _reset_loc_form_52910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 12), '_reset_loc_form', False)
            # Calling _reset_loc_form(args, kwargs) (line 1223)
            _reset_loc_form_call_result_52914 = invoke(stypy.reporting.localization.Localization(__file__, 1223, 12), _reset_loc_form_52910, *[yaxis_52912], **kwargs_52913)
            

            if more_types_in_union_52909:
                # SSA join for if statement (line 1222)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1225):
        
        # Assigning a Call to a Name (line 1225):
        
        # Assigning a Call to a Name (line 1225):
        
        # Call to _break_share_link(...): (line 1225)
        # Processing the call arguments (line 1225)
        # Getting the type of 'ax' (line 1225)
        ax_52916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 36), 'ax', False)
        # Getting the type of 'ax' (line 1225)
        ax_52917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 40), 'ax', False)
        # Obtaining the member '_shared_x_axes' of a type (line 1225)
        _shared_x_axes_52918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1225, 40), ax_52917, '_shared_x_axes')
        # Processing the call keyword arguments (line 1225)
        kwargs_52919 = {}
        # Getting the type of '_break_share_link' (line 1225)
        _break_share_link_52915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 18), '_break_share_link', False)
        # Calling _break_share_link(args, kwargs) (line 1225)
        _break_share_link_call_result_52920 = invoke(stypy.reporting.localization.Localization(__file__, 1225, 18), _break_share_link_52915, *[ax_52916, _shared_x_axes_52918], **kwargs_52919)
        
        # Assigning a type to the variable 'last_ax' (line 1225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1225, 8), 'last_ax', _break_share_link_call_result_52920)
        
        # Type idiom detected: calculating its left and rigth part (line 1226)
        # Getting the type of 'last_ax' (line 1226)
        last_ax_52921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 8), 'last_ax')
        # Getting the type of 'None' (line 1226)
        None_52922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 26), 'None')
        
        (may_be_52923, more_types_in_union_52924) = may_not_be_none(last_ax_52921, None_52922)

        if may_be_52923:

            if more_types_in_union_52924:
                # Runtime conditional SSA (line 1226)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to _reset_loc_form(...): (line 1227)
            # Processing the call arguments (line 1227)
            # Getting the type of 'last_ax' (line 1227)
            last_ax_52926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 28), 'last_ax', False)
            # Obtaining the member 'xaxis' of a type (line 1227)
            xaxis_52927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1227, 28), last_ax_52926, 'xaxis')
            # Processing the call keyword arguments (line 1227)
            kwargs_52928 = {}
            # Getting the type of '_reset_loc_form' (line 1227)
            _reset_loc_form_52925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 12), '_reset_loc_form', False)
            # Calling _reset_loc_form(args, kwargs) (line 1227)
            _reset_loc_form_call_result_52929 = invoke(stypy.reporting.localization.Localization(__file__, 1227, 12), _reset_loc_form_52925, *[xaxis_52927], **kwargs_52928)
            

            if more_types_in_union_52924:
                # SSA join for if statement (line 1226)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__remove_ax(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__remove_ax' in the type store
        # Getting the type of 'stypy_return_type' (line 1203)
        stypy_return_type_52930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52930)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__remove_ax'
        return stypy_return_type_52930


    @norecursion
    def clf(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1229)
        False_52931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 33), 'False')
        defaults = [False_52931]
        # Create a new context for function 'clf'
        module_type_store = module_type_store.open_function_context('clf', 1229, 4, False)
        # Assigning a type to the variable 'self' (line 1230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1230, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.clf.__dict__.__setitem__('stypy_localization', localization)
        Figure.clf.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.clf.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.clf.__dict__.__setitem__('stypy_function_name', 'Figure.clf')
        Figure.clf.__dict__.__setitem__('stypy_param_names_list', ['keep_observers'])
        Figure.clf.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.clf.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.clf.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.clf.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.clf.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.clf.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.clf', ['keep_observers'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'clf', localization, ['keep_observers'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'clf(...)' code ##################

        unicode_52932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1235, (-1)), 'unicode', u'\n        Clear the figure.\n\n        Set *keep_observers* to True if, for example,\n        a gui widget is tracking the axes in the figure.\n        ')
        
        # Assigning a Name to a Attribute (line 1236):
        
        # Assigning a Name to a Attribute (line 1236):
        
        # Assigning a Name to a Attribute (line 1236):
        # Getting the type of 'None' (line 1236)
        None_52933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 33), 'None')
        # Getting the type of 'self' (line 1236)
        self_52934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'self')
        # Setting the type of the member 'suppressComposite' of a type (line 1236)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1236, 8), self_52934, 'suppressComposite', None_52933)
        
        # Assigning a Call to a Attribute (line 1237):
        
        # Assigning a Call to a Attribute (line 1237):
        
        # Assigning a Call to a Attribute (line 1237):
        
        # Call to CallbackRegistry(...): (line 1237)
        # Processing the call keyword arguments (line 1237)
        kwargs_52937 = {}
        # Getting the type of 'cbook' (line 1237)
        cbook_52935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 25), 'cbook', False)
        # Obtaining the member 'CallbackRegistry' of a type (line 1237)
        CallbackRegistry_52936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1237, 25), cbook_52935, 'CallbackRegistry')
        # Calling CallbackRegistry(args, kwargs) (line 1237)
        CallbackRegistry_call_result_52938 = invoke(stypy.reporting.localization.Localization(__file__, 1237, 25), CallbackRegistry_52936, *[], **kwargs_52937)
        
        # Getting the type of 'self' (line 1237)
        self_52939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 8), 'self')
        # Setting the type of the member 'callbacks' of a type (line 1237)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1237, 8), self_52939, 'callbacks', CallbackRegistry_call_result_52938)
        
        
        # Call to tuple(...): (line 1239)
        # Processing the call arguments (line 1239)
        # Getting the type of 'self' (line 1239)
        self_52941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 24), 'self', False)
        # Obtaining the member 'axes' of a type (line 1239)
        axes_52942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 24), self_52941, 'axes')
        # Processing the call keyword arguments (line 1239)
        kwargs_52943 = {}
        # Getting the type of 'tuple' (line 1239)
        tuple_52940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 18), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1239)
        tuple_call_result_52944 = invoke(stypy.reporting.localization.Localization(__file__, 1239, 18), tuple_52940, *[axes_52942], **kwargs_52943)
        
        # Testing the type of a for loop iterable (line 1239)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1239, 8), tuple_call_result_52944)
        # Getting the type of the for loop variable (line 1239)
        for_loop_var_52945 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1239, 8), tuple_call_result_52944)
        # Assigning a type to the variable 'ax' (line 1239)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1239, 8), 'ax', for_loop_var_52945)
        # SSA begins for a for statement (line 1239)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to cla(...): (line 1240)
        # Processing the call keyword arguments (line 1240)
        kwargs_52948 = {}
        # Getting the type of 'ax' (line 1240)
        ax_52946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 12), 'ax', False)
        # Obtaining the member 'cla' of a type (line 1240)
        cla_52947 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 12), ax_52946, 'cla')
        # Calling cla(args, kwargs) (line 1240)
        cla_call_result_52949 = invoke(stypy.reporting.localization.Localization(__file__, 1240, 12), cla_52947, *[], **kwargs_52948)
        
        
        # Call to delaxes(...): (line 1241)
        # Processing the call arguments (line 1241)
        # Getting the type of 'ax' (line 1241)
        ax_52952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 25), 'ax', False)
        # Processing the call keyword arguments (line 1241)
        kwargs_52953 = {}
        # Getting the type of 'self' (line 1241)
        self_52950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 12), 'self', False)
        # Obtaining the member 'delaxes' of a type (line 1241)
        delaxes_52951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 12), self_52950, 'delaxes')
        # Calling delaxes(args, kwargs) (line 1241)
        delaxes_call_result_52954 = invoke(stypy.reporting.localization.Localization(__file__, 1241, 12), delaxes_52951, *[ax_52952], **kwargs_52953)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1243):
        
        # Assigning a Call to a Name (line 1243):
        
        # Assigning a Call to a Name (line 1243):
        
        # Call to getattr(...): (line 1243)
        # Processing the call arguments (line 1243)
        # Getting the type of 'self' (line 1243)
        self_52956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 26), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1243)
        canvas_52957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1243, 26), self_52956, 'canvas')
        unicode_52958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1243, 39), 'unicode', u'toolbar')
        # Getting the type of 'None' (line 1243)
        None_52959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 50), 'None', False)
        # Processing the call keyword arguments (line 1243)
        kwargs_52960 = {}
        # Getting the type of 'getattr' (line 1243)
        getattr_52955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 18), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1243)
        getattr_call_result_52961 = invoke(stypy.reporting.localization.Localization(__file__, 1243, 18), getattr_52955, *[canvas_52957, unicode_52958, None_52959], **kwargs_52960)
        
        # Assigning a type to the variable 'toolbar' (line 1243)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1243, 8), 'toolbar', getattr_call_result_52961)
        
        # Type idiom detected: calculating its left and rigth part (line 1244)
        # Getting the type of 'toolbar' (line 1244)
        toolbar_52962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 8), 'toolbar')
        # Getting the type of 'None' (line 1244)
        None_52963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1244, 26), 'None')
        
        (may_be_52964, more_types_in_union_52965) = may_not_be_none(toolbar_52962, None_52963)

        if may_be_52964:

            if more_types_in_union_52965:
                # Runtime conditional SSA (line 1244)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to update(...): (line 1245)
            # Processing the call keyword arguments (line 1245)
            kwargs_52968 = {}
            # Getting the type of 'toolbar' (line 1245)
            toolbar_52966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1245, 12), 'toolbar', False)
            # Obtaining the member 'update' of a type (line 1245)
            update_52967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1245, 12), toolbar_52966, 'update')
            # Calling update(args, kwargs) (line 1245)
            update_call_result_52969 = invoke(stypy.reporting.localization.Localization(__file__, 1245, 12), update_52967, *[], **kwargs_52968)
            

            if more_types_in_union_52965:
                # SSA join for if statement (line 1244)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to clear(...): (line 1246)
        # Processing the call keyword arguments (line 1246)
        kwargs_52973 = {}
        # Getting the type of 'self' (line 1246)
        self_52970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1246, 8), 'self', False)
        # Obtaining the member '_axstack' of a type (line 1246)
        _axstack_52971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 8), self_52970, '_axstack')
        # Obtaining the member 'clear' of a type (line 1246)
        clear_52972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1246, 8), _axstack_52971, 'clear')
        # Calling clear(args, kwargs) (line 1246)
        clear_call_result_52974 = invoke(stypy.reporting.localization.Localization(__file__, 1246, 8), clear_52972, *[], **kwargs_52973)
        
        
        # Assigning a List to a Attribute (line 1247):
        
        # Assigning a List to a Attribute (line 1247):
        
        # Assigning a List to a Attribute (line 1247):
        
        # Obtaining an instance of the builtin type 'list' (line 1247)
        list_52975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1247)
        
        # Getting the type of 'self' (line 1247)
        self_52976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1247, 8), 'self')
        # Setting the type of the member 'artists' of a type (line 1247)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1247, 8), self_52976, 'artists', list_52975)
        
        # Assigning a List to a Attribute (line 1248):
        
        # Assigning a List to a Attribute (line 1248):
        
        # Assigning a List to a Attribute (line 1248):
        
        # Obtaining an instance of the builtin type 'list' (line 1248)
        list_52977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1248, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1248)
        
        # Getting the type of 'self' (line 1248)
        self_52978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 8), 'self')
        # Setting the type of the member 'lines' of a type (line 1248)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1248, 8), self_52978, 'lines', list_52977)
        
        # Assigning a List to a Attribute (line 1249):
        
        # Assigning a List to a Attribute (line 1249):
        
        # Assigning a List to a Attribute (line 1249):
        
        # Obtaining an instance of the builtin type 'list' (line 1249)
        list_52979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1249, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1249)
        
        # Getting the type of 'self' (line 1249)
        self_52980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 8), 'self')
        # Setting the type of the member 'patches' of a type (line 1249)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1249, 8), self_52980, 'patches', list_52979)
        
        # Assigning a List to a Attribute (line 1250):
        
        # Assigning a List to a Attribute (line 1250):
        
        # Assigning a List to a Attribute (line 1250):
        
        # Obtaining an instance of the builtin type 'list' (line 1250)
        list_52981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1250, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1250)
        
        # Getting the type of 'self' (line 1250)
        self_52982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 8), 'self')
        # Setting the type of the member 'texts' of a type (line 1250)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 8), self_52982, 'texts', list_52981)
        
        # Assigning a List to a Attribute (line 1251):
        
        # Assigning a List to a Attribute (line 1251):
        
        # Assigning a List to a Attribute (line 1251):
        
        # Obtaining an instance of the builtin type 'list' (line 1251)
        list_52983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1251, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1251)
        
        # Getting the type of 'self' (line 1251)
        self_52984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 8), 'self')
        # Setting the type of the member 'images' of a type (line 1251)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1251, 8), self_52984, 'images', list_52983)
        
        # Assigning a List to a Attribute (line 1252):
        
        # Assigning a List to a Attribute (line 1252):
        
        # Assigning a List to a Attribute (line 1252):
        
        # Obtaining an instance of the builtin type 'list' (line 1252)
        list_52985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1252, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1252)
        
        # Getting the type of 'self' (line 1252)
        self_52986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 8), 'self')
        # Setting the type of the member 'legends' of a type (line 1252)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1252, 8), self_52986, 'legends', list_52985)
        
        
        # Getting the type of 'keep_observers' (line 1253)
        keep_observers_52987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1253, 15), 'keep_observers')
        # Applying the 'not' unary operator (line 1253)
        result_not__52988 = python_operator(stypy.reporting.localization.Localization(__file__, 1253, 11), 'not', keep_observers_52987)
        
        # Testing the type of an if condition (line 1253)
        if_condition_52989 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1253, 8), result_not__52988)
        # Assigning a type to the variable 'if_condition_52989' (line 1253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1253, 8), 'if_condition_52989', if_condition_52989)
        # SSA begins for if statement (line 1253)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Attribute (line 1254):
        
        # Assigning a List to a Attribute (line 1254):
        
        # Assigning a List to a Attribute (line 1254):
        
        # Obtaining an instance of the builtin type 'list' (line 1254)
        list_52990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1254, 32), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1254)
        
        # Getting the type of 'self' (line 1254)
        self_52991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 12), 'self')
        # Setting the type of the member '_axobservers' of a type (line 1254)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1254, 12), self_52991, '_axobservers', list_52990)
        # SSA join for if statement (line 1253)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1255):
        
        # Assigning a Name to a Attribute (line 1255):
        
        # Assigning a Name to a Attribute (line 1255):
        # Getting the type of 'None' (line 1255)
        None_52992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 25), 'None')
        # Getting the type of 'self' (line 1255)
        self_52993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1255, 8), 'self')
        # Setting the type of the member '_suptitle' of a type (line 1255)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1255, 8), self_52993, '_suptitle', None_52992)
        
        # Assigning a Name to a Attribute (line 1256):
        
        # Assigning a Name to a Attribute (line 1256):
        
        # Assigning a Name to a Attribute (line 1256):
        # Getting the type of 'True' (line 1256)
        True_52994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 21), 'True')
        # Getting the type of 'self' (line 1256)
        self_52995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1256, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1256)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1256, 8), self_52995, 'stale', True_52994)
        
        # ################# End of 'clf(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'clf' in the type store
        # Getting the type of 'stypy_return_type' (line 1229)
        stypy_return_type_52996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1229, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_52996)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'clf'
        return stypy_return_type_52996


    @norecursion
    def clear(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'False' (line 1258)
        False_52997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 35), 'False')
        defaults = [False_52997]
        # Create a new context for function 'clear'
        module_type_store = module_type_store.open_function_context('clear', 1258, 4, False)
        # Assigning a type to the variable 'self' (line 1259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.clear.__dict__.__setitem__('stypy_localization', localization)
        Figure.clear.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.clear.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.clear.__dict__.__setitem__('stypy_function_name', 'Figure.clear')
        Figure.clear.__dict__.__setitem__('stypy_param_names_list', ['keep_observers'])
        Figure.clear.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.clear.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.clear.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.clear.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.clear.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.clear.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.clear', ['keep_observers'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'clear', localization, ['keep_observers'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'clear(...)' code ##################

        unicode_52998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, (-1)), 'unicode', u'\n        Clear the figure -- synonym for :meth:`clf`.\n        ')
        
        # Call to clf(...): (line 1262)
        # Processing the call keyword arguments (line 1262)
        # Getting the type of 'keep_observers' (line 1262)
        keep_observers_53001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 32), 'keep_observers', False)
        keyword_53002 = keep_observers_53001
        kwargs_53003 = {'keep_observers': keyword_53002}
        # Getting the type of 'self' (line 1262)
        self_52999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 8), 'self', False)
        # Obtaining the member 'clf' of a type (line 1262)
        clf_53000 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1262, 8), self_52999, 'clf')
        # Calling clf(args, kwargs) (line 1262)
        clf_call_result_53004 = invoke(stypy.reporting.localization.Localization(__file__, 1262, 8), clf_53000, *[], **kwargs_53003)
        
        
        # ################# End of 'clear(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'clear' in the type store
        # Getting the type of 'stypy_return_type' (line 1258)
        stypy_return_type_53005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53005)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'clear'
        return stypy_return_type_53005


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 1264, 4, False)
        # Assigning a type to the variable 'self' (line 1265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1265, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.draw.__dict__.__setitem__('stypy_localization', localization)
        Figure.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.draw.__dict__.__setitem__('stypy_function_name', 'Figure.draw')
        Figure.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Figure.draw.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.draw.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.draw', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        unicode_53006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1269, (-1)), 'unicode', u'\n        Render the figure using :class:`matplotlib.backend_bases.RendererBase`\n        instance *renderer*.\n        ')
        
        
        
        # Call to get_visible(...): (line 1272)
        # Processing the call keyword arguments (line 1272)
        kwargs_53009 = {}
        # Getting the type of 'self' (line 1272)
        self_53007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 1272)
        get_visible_53008 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 15), self_53007, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1272)
        get_visible_call_result_53010 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 15), get_visible_53008, *[], **kwargs_53009)
        
        # Applying the 'not' unary operator (line 1272)
        result_not__53011 = python_operator(stypy.reporting.localization.Localization(__file__, 1272, 11), 'not', get_visible_call_result_53010)
        
        # Testing the type of an if condition (line 1272)
        if_condition_53012 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1272, 8), result_not__53011)
        # Assigning a type to the variable 'if_condition_53012' (line 1272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 8), 'if_condition_53012', if_condition_53012)
        # SSA begins for if statement (line 1272)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Assigning a type to the variable 'stypy_return_type' (line 1273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1273, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1272)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1275):
        
        # Assigning a Call to a Name (line 1275):
        
        # Assigning a Call to a Name (line 1275):
        
        # Call to sorted(...): (line 1275)
        # Processing the call arguments (line 1275)
        # Calculating generator expression
        module_type_store = module_type_store.open_function_context('list comprehension expression', 1276, 13, True)
        # Calculating comprehension expression
        # Getting the type of 'self' (line 1276)
        self_53020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 35), 'self', False)
        # Obtaining the member 'patches' of a type (line 1276)
        patches_53021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 35), self_53020, 'patches')
        # Getting the type of 'self' (line 1276)
        self_53022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 50), 'self', False)
        # Obtaining the member 'lines' of a type (line 1276)
        lines_53023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 50), self_53022, 'lines')
        # Applying the binary operator '+' (line 1276)
        result_add_53024 = python_operator(stypy.reporting.localization.Localization(__file__, 1276, 35), '+', patches_53021, lines_53023)
        
        # Getting the type of 'self' (line 1276)
        self_53025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 63), 'self', False)
        # Obtaining the member 'artists' of a type (line 1276)
        artists_53026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1276, 63), self_53025, 'artists')
        # Applying the binary operator '+' (line 1276)
        result_add_53027 = python_operator(stypy.reporting.localization.Localization(__file__, 1276, 61), '+', result_add_53024, artists_53026)
        
        # Getting the type of 'self' (line 1277)
        self_53028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 37), 'self', False)
        # Obtaining the member 'images' of a type (line 1277)
        images_53029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 37), self_53028, 'images')
        # Applying the binary operator '+' (line 1277)
        result_add_53030 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 35), '+', result_add_53027, images_53029)
        
        # Getting the type of 'self' (line 1277)
        self_53031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 51), 'self', False)
        # Obtaining the member 'axes' of a type (line 1277)
        axes_53032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 51), self_53031, 'axes')
        # Applying the binary operator '+' (line 1277)
        result_add_53033 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 49), '+', result_add_53030, axes_53032)
        
        # Getting the type of 'self' (line 1277)
        self_53034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 63), 'self', False)
        # Obtaining the member 'texts' of a type (line 1277)
        texts_53035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 63), self_53034, 'texts')
        # Applying the binary operator '+' (line 1277)
        result_add_53036 = python_operator(stypy.reporting.localization.Localization(__file__, 1277, 61), '+', result_add_53033, texts_53035)
        
        # Getting the type of 'self' (line 1278)
        self_53037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 37), 'self', False)
        # Obtaining the member 'legends' of a type (line 1278)
        legends_53038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1278, 37), self_53037, 'legends')
        # Applying the binary operator '+' (line 1278)
        result_add_53039 = python_operator(stypy.reporting.localization.Localization(__file__, 1278, 35), '+', result_add_53036, legends_53038)
        
        comprehension_53040 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1276, 13), result_add_53039)
        # Assigning a type to the variable 'artist' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 13), 'artist', comprehension_53040)
        
        
        # Call to get_animated(...): (line 1279)
        # Processing the call keyword arguments (line 1279)
        kwargs_53017 = {}
        # Getting the type of 'artist' (line 1279)
        artist_53015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 20), 'artist', False)
        # Obtaining the member 'get_animated' of a type (line 1279)
        get_animated_53016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1279, 20), artist_53015, 'get_animated')
        # Calling get_animated(args, kwargs) (line 1279)
        get_animated_call_result_53018 = invoke(stypy.reporting.localization.Localization(__file__, 1279, 20), get_animated_53016, *[], **kwargs_53017)
        
        # Applying the 'not' unary operator (line 1279)
        result_not__53019 = python_operator(stypy.reporting.localization.Localization(__file__, 1279, 16), 'not', get_animated_call_result_53018)
        
        # Getting the type of 'artist' (line 1276)
        artist_53014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 13), 'artist', False)
        list_53041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1276, 13), 'list')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1276, 13), list_53041, artist_53014)
        # Processing the call keyword arguments (line 1275)

        @norecursion
        def _stypy_temp_lambda_13(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_13'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_13', 1280, 16, True)
            # Passed parameters checking function
            _stypy_temp_lambda_13.stypy_localization = localization
            _stypy_temp_lambda_13.stypy_type_of_self = None
            _stypy_temp_lambda_13.stypy_type_store = module_type_store
            _stypy_temp_lambda_13.stypy_function_name = '_stypy_temp_lambda_13'
            _stypy_temp_lambda_13.stypy_param_names_list = ['artist']
            _stypy_temp_lambda_13.stypy_varargs_param_name = None
            _stypy_temp_lambda_13.stypy_kwargs_param_name = None
            _stypy_temp_lambda_13.stypy_call_defaults = defaults
            _stypy_temp_lambda_13.stypy_call_varargs = varargs
            _stypy_temp_lambda_13.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_13', ['artist'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_13', ['artist'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to get_zorder(...): (line 1280)
            # Processing the call keyword arguments (line 1280)
            kwargs_53044 = {}
            # Getting the type of 'artist' (line 1280)
            artist_53042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 31), 'artist', False)
            # Obtaining the member 'get_zorder' of a type (line 1280)
            get_zorder_53043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 31), artist_53042, 'get_zorder')
            # Calling get_zorder(args, kwargs) (line 1280)
            get_zorder_call_result_53045 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 31), get_zorder_53043, *[], **kwargs_53044)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 1280)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 16), 'stypy_return_type', get_zorder_call_result_53045)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_13' in the type store
            # Getting the type of 'stypy_return_type' (line 1280)
            stypy_return_type_53046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 16), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_53046)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_13'
            return stypy_return_type_53046

        # Assigning a type to the variable '_stypy_temp_lambda_13' (line 1280)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 16), '_stypy_temp_lambda_13', _stypy_temp_lambda_13)
        # Getting the type of '_stypy_temp_lambda_13' (line 1280)
        _stypy_temp_lambda_13_53047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 16), '_stypy_temp_lambda_13')
        keyword_53048 = _stypy_temp_lambda_13_53047
        kwargs_53049 = {'key': keyword_53048}
        # Getting the type of 'sorted' (line 1275)
        sorted_53013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 18), 'sorted', False)
        # Calling sorted(args, kwargs) (line 1275)
        sorted_call_result_53050 = invoke(stypy.reporting.localization.Localization(__file__, 1275, 18), sorted_53013, *[list_53041], **kwargs_53049)
        
        # Assigning a type to the variable 'artists' (line 1275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 8), 'artists', sorted_call_result_53050)
        
        # Try-finally block (line 1282)
        
        # Call to open_group(...): (line 1283)
        # Processing the call arguments (line 1283)
        unicode_53053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 32), 'unicode', u'figure')
        # Processing the call keyword arguments (line 1283)
        kwargs_53054 = {}
        # Getting the type of 'renderer' (line 1283)
        renderer_53051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 12), 'renderer', False)
        # Obtaining the member 'open_group' of a type (line 1283)
        open_group_53052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 12), renderer_53051, 'open_group')
        # Calling open_group(args, kwargs) (line 1283)
        open_group_call_result_53055 = invoke(stypy.reporting.localization.Localization(__file__, 1283, 12), open_group_53052, *[unicode_53053], **kwargs_53054)
        
        
        
        # Evaluating a boolean operation
        
        # Call to get_tight_layout(...): (line 1284)
        # Processing the call keyword arguments (line 1284)
        kwargs_53058 = {}
        # Getting the type of 'self' (line 1284)
        self_53056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 15), 'self', False)
        # Obtaining the member 'get_tight_layout' of a type (line 1284)
        get_tight_layout_53057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 15), self_53056, 'get_tight_layout')
        # Calling get_tight_layout(args, kwargs) (line 1284)
        get_tight_layout_call_result_53059 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 15), get_tight_layout_53057, *[], **kwargs_53058)
        
        # Getting the type of 'self' (line 1284)
        self_53060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 43), 'self')
        # Obtaining the member 'axes' of a type (line 1284)
        axes_53061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 43), self_53060, 'axes')
        # Applying the binary operator 'and' (line 1284)
        result_and_keyword_53062 = python_operator(stypy.reporting.localization.Localization(__file__, 1284, 15), 'and', get_tight_layout_call_result_53059, axes_53061)
        
        # Testing the type of an if condition (line 1284)
        if_condition_53063 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1284, 12), result_and_keyword_53062)
        # Assigning a type to the variable 'if_condition_53063' (line 1284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1284, 12), 'if_condition_53063', if_condition_53063)
        # SSA begins for if statement (line 1284)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # SSA begins for try-except statement (line 1285)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Call to tight_layout(...): (line 1286)
        # Processing the call arguments (line 1286)
        # Getting the type of 'renderer' (line 1286)
        renderer_53066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 38), 'renderer', False)
        # Processing the call keyword arguments (line 1286)
        # Getting the type of 'self' (line 1286)
        self_53067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 50), 'self', False)
        # Obtaining the member '_tight_parameters' of a type (line 1286)
        _tight_parameters_53068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1286, 50), self_53067, '_tight_parameters')
        kwargs_53069 = {'_tight_parameters_53068': _tight_parameters_53068}
        # Getting the type of 'self' (line 1286)
        self_53064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 20), 'self', False)
        # Obtaining the member 'tight_layout' of a type (line 1286)
        tight_layout_53065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1286, 20), self_53064, 'tight_layout')
        # Calling tight_layout(args, kwargs) (line 1286)
        tight_layout_call_result_53070 = invoke(stypy.reporting.localization.Localization(__file__, 1286, 20), tight_layout_53065, *[renderer_53066], **kwargs_53069)
        
        # SSA branch for the except part of a try statement (line 1285)
        # SSA branch for the except 'ValueError' branch of a try statement (line 1285)
        module_type_store.open_ssa_branch('except')
        pass
        # SSA join for try-except statement (line 1285)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1284)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 1291)
        self_53071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 15), 'self')
        # Obtaining the member 'frameon' of a type (line 1291)
        frameon_53072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1291, 15), self_53071, 'frameon')
        # Testing the type of an if condition (line 1291)
        if_condition_53073 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1291, 12), frameon_53072)
        # Assigning a type to the variable 'if_condition_53073' (line 1291)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1291, 12), 'if_condition_53073', if_condition_53073)
        # SSA begins for if statement (line 1291)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 1292)
        # Processing the call arguments (line 1292)
        # Getting the type of 'renderer' (line 1292)
        renderer_53077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 32), 'renderer', False)
        # Processing the call keyword arguments (line 1292)
        kwargs_53078 = {}
        # Getting the type of 'self' (line 1292)
        self_53074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 16), 'self', False)
        # Obtaining the member 'patch' of a type (line 1292)
        patch_53075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 16), self_53074, 'patch')
        # Obtaining the member 'draw' of a type (line 1292)
        draw_53076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 16), patch_53075, 'draw')
        # Calling draw(args, kwargs) (line 1292)
        draw_call_result_53079 = invoke(stypy.reporting.localization.Localization(__file__, 1292, 16), draw_53076, *[renderer_53077], **kwargs_53078)
        
        # SSA join for if statement (line 1291)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _draw_list_compositing_images(...): (line 1294)
        # Processing the call arguments (line 1294)
        # Getting the type of 'renderer' (line 1295)
        renderer_53082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 16), 'renderer', False)
        # Getting the type of 'self' (line 1295)
        self_53083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 26), 'self', False)
        # Getting the type of 'artists' (line 1295)
        artists_53084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 32), 'artists', False)
        # Getting the type of 'self' (line 1295)
        self_53085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 41), 'self', False)
        # Obtaining the member 'suppressComposite' of a type (line 1295)
        suppressComposite_53086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 41), self_53085, 'suppressComposite')
        # Processing the call keyword arguments (line 1294)
        kwargs_53087 = {}
        # Getting the type of 'mimage' (line 1294)
        mimage_53080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 12), 'mimage', False)
        # Obtaining the member '_draw_list_compositing_images' of a type (line 1294)
        _draw_list_compositing_images_53081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 12), mimage_53080, '_draw_list_compositing_images')
        # Calling _draw_list_compositing_images(args, kwargs) (line 1294)
        _draw_list_compositing_images_call_result_53088 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 12), _draw_list_compositing_images_53081, *[renderer_53082, self_53083, artists_53084, suppressComposite_53086], **kwargs_53087)
        
        
        # Call to close_group(...): (line 1297)
        # Processing the call arguments (line 1297)
        unicode_53091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 33), 'unicode', u'figure')
        # Processing the call keyword arguments (line 1297)
        kwargs_53092 = {}
        # Getting the type of 'renderer' (line 1297)
        renderer_53089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'renderer', False)
        # Obtaining the member 'close_group' of a type (line 1297)
        close_group_53090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1297, 12), renderer_53089, 'close_group')
        # Calling close_group(args, kwargs) (line 1297)
        close_group_call_result_53093 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 12), close_group_53090, *[unicode_53091], **kwargs_53092)
        
        
        # finally branch of the try-finally block (line 1282)
        
        # Assigning a Name to a Attribute (line 1299):
        
        # Assigning a Name to a Attribute (line 1299):
        
        # Assigning a Name to a Attribute (line 1299):
        # Getting the type of 'False' (line 1299)
        False_53094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 25), 'False')
        # Getting the type of 'self' (line 1299)
        self_53095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 1299)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 12), self_53095, 'stale', False_53094)
        
        
        # Assigning a Name to a Attribute (line 1301):
        
        # Assigning a Name to a Attribute (line 1301):
        
        # Assigning a Name to a Attribute (line 1301):
        # Getting the type of 'renderer' (line 1301)
        renderer_53096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 31), 'renderer')
        # Getting the type of 'self' (line 1301)
        self_53097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 8), 'self')
        # Setting the type of the member '_cachedRenderer' of a type (line 1301)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 8), self_53097, '_cachedRenderer', renderer_53096)
        
        # Call to draw_event(...): (line 1302)
        # Processing the call arguments (line 1302)
        # Getting the type of 'renderer' (line 1302)
        renderer_53101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 31), 'renderer', False)
        # Processing the call keyword arguments (line 1302)
        kwargs_53102 = {}
        # Getting the type of 'self' (line 1302)
        self_53098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1302)
        canvas_53099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 8), self_53098, 'canvas')
        # Obtaining the member 'draw_event' of a type (line 1302)
        draw_event_53100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 8), canvas_53099, 'draw_event')
        # Calling draw_event(args, kwargs) (line 1302)
        draw_event_call_result_53103 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 8), draw_event_53100, *[renderer_53101], **kwargs_53102)
        
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 1264)
        stypy_return_type_53104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53104)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_53104


    @norecursion
    def draw_artist(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw_artist'
        module_type_store = module_type_store.open_function_context('draw_artist', 1304, 4, False)
        # Assigning a type to the variable 'self' (line 1305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.draw_artist.__dict__.__setitem__('stypy_localization', localization)
        Figure.draw_artist.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.draw_artist.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.draw_artist.__dict__.__setitem__('stypy_function_name', 'Figure.draw_artist')
        Figure.draw_artist.__dict__.__setitem__('stypy_param_names_list', ['a'])
        Figure.draw_artist.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.draw_artist.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.draw_artist.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.draw_artist.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.draw_artist.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.draw_artist.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.draw_artist', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw_artist', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw_artist(...)' code ##################

        unicode_53105 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1308, (-1)), 'unicode', u'\n        draw :class:`matplotlib.artist.Artist` instance *a* only --\n        this is available only after the figure is drawn\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1309)
        # Getting the type of 'self' (line 1309)
        self_53106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 11), 'self')
        # Obtaining the member '_cachedRenderer' of a type (line 1309)
        _cachedRenderer_53107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1309, 11), self_53106, '_cachedRenderer')
        # Getting the type of 'None' (line 1309)
        None_53108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 35), 'None')
        
        (may_be_53109, more_types_in_union_53110) = may_be_none(_cachedRenderer_53107, None_53108)

        if may_be_53109:

            if more_types_in_union_53110:
                # Runtime conditional SSA (line 1309)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Str to a Name (line 1310):
            
            # Assigning a Str to a Name (line 1310):
            
            # Assigning a Str to a Name (line 1310):
            unicode_53111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1310, 19), 'unicode', u'draw_artist can only be used after an initial draw which caches the render')
            # Assigning a type to the variable 'msg' (line 1310)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1310, 12), 'msg', unicode_53111)
            
            # Call to AttributeError(...): (line 1312)
            # Processing the call arguments (line 1312)
            # Getting the type of 'msg' (line 1312)
            msg_53113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 33), 'msg', False)
            # Processing the call keyword arguments (line 1312)
            kwargs_53114 = {}
            # Getting the type of 'AttributeError' (line 1312)
            AttributeError_53112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 18), 'AttributeError', False)
            # Calling AttributeError(args, kwargs) (line 1312)
            AttributeError_call_result_53115 = invoke(stypy.reporting.localization.Localization(__file__, 1312, 18), AttributeError_53112, *[msg_53113], **kwargs_53114)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1312, 12), AttributeError_call_result_53115, 'raise parameter', BaseException)

            if more_types_in_union_53110:
                # SSA join for if statement (line 1309)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to draw(...): (line 1313)
        # Processing the call arguments (line 1313)
        # Getting the type of 'self' (line 1313)
        self_53118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 15), 'self', False)
        # Obtaining the member '_cachedRenderer' of a type (line 1313)
        _cachedRenderer_53119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 15), self_53118, '_cachedRenderer')
        # Processing the call keyword arguments (line 1313)
        kwargs_53120 = {}
        # Getting the type of 'a' (line 1313)
        a_53116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 8), 'a', False)
        # Obtaining the member 'draw' of a type (line 1313)
        draw_53117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 8), a_53116, 'draw')
        # Calling draw(args, kwargs) (line 1313)
        draw_call_result_53121 = invoke(stypy.reporting.localization.Localization(__file__, 1313, 8), draw_53117, *[_cachedRenderer_53119], **kwargs_53120)
        
        
        # ################# End of 'draw_artist(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw_artist' in the type store
        # Getting the type of 'stypy_return_type' (line 1304)
        stypy_return_type_53122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53122)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw_artist'
        return stypy_return_type_53122


    @norecursion
    def get_axes(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_axes'
        module_type_store = module_type_store.open_function_context('get_axes', 1315, 4, False)
        # Assigning a type to the variable 'self' (line 1316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.get_axes.__dict__.__setitem__('stypy_localization', localization)
        Figure.get_axes.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.get_axes.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.get_axes.__dict__.__setitem__('stypy_function_name', 'Figure.get_axes')
        Figure.get_axes.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.get_axes.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.get_axes.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.get_axes.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.get_axes.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.get_axes.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.get_axes.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.get_axes', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_axes', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_axes(...)' code ##################

        # Getting the type of 'self' (line 1316)
        self_53123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 15), 'self')
        # Obtaining the member 'axes' of a type (line 1316)
        axes_53124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1316, 15), self_53123, 'axes')
        # Assigning a type to the variable 'stypy_return_type' (line 1316)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1316, 8), 'stypy_return_type', axes_53124)
        
        # ################# End of 'get_axes(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_axes' in the type store
        # Getting the type of 'stypy_return_type' (line 1315)
        stypy_return_type_53125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53125)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_axes'
        return stypy_return_type_53125


    @norecursion
    def legend(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'legend'
        module_type_store = module_type_store.open_function_context('legend', 1318, 4, False)
        # Assigning a type to the variable 'self' (line 1319)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1319, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.legend.__dict__.__setitem__('stypy_localization', localization)
        Figure.legend.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.legend.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.legend.__dict__.__setitem__('stypy_function_name', 'Figure.legend')
        Figure.legend.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.legend.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Figure.legend.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Figure.legend.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.legend.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.legend.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.legend.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.legend', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'legend', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'legend(...)' code ##################

        unicode_53126 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1463, (-1)), 'unicode', u'\n        Place a legend on the figure.\n\n        To make a legend from existing artists on every axes::\n\n          legend()\n\n        To make a legend for a list of lines and labels::\n\n          legend( (line1, line2, line3),\n                  (\'label1\', \'label2\', \'label3\'),\n                  \'upper right\')\n\n        Parameters\n        ----------\n        loc : string or integer\n            The location of the legend. Possible codes are:\n\n                ===============   =============\n                Location String   Location Code\n                ===============   =============\n                \'upper right\'     1\n                \'upper left\'      2\n                \'lower left\'      3\n                \'lower right\'     4\n                \'right\'           5\n                \'center left\'     6\n                \'center right\'    7\n                \'lower center\'    8\n                \'upper center\'    9\n                \'center\'          10\n                ===============   =============\n\n            *loc* can also be an (x,y) tuple in figure coords, which specifies\n            the lower left of the legend box. In figure coords (0,0) is the\n            bottom left of the figure, and (1,1) is the top right.\n\n        prop : None or FontProperties or dict\n            A :class:`matplotlib.font_manager.FontProperties` instance. If\n            *prop* is a dictionary, a new instance will be created with *prop*.\n            If *None*, use rc settings.\n\n        numpoints : integer\n            The number of points in the legend line, default is 4\n\n        scatterpoints : integer\n            The number of points in the legend line, default is 4\n\n        scatteryoffsets : list of floats\n            A list of yoffsets for scatter symbols in legend\n\n        markerscale : None or scalar\n            The relative size of legend markers vs. original. If *None*, use rc\n            settings.\n\n        markerfirst : bool\n            If *True*, legend marker is placed to the left of the legend label.\n            If *False*, legend marker is placed to the right of the legend\n            label.\n            Default is *True*.\n\n        frameon : None or bool\n            Control whether the legend should be drawn on a patch (frame).\n            Default is *None* which will take the value from the\n            ``legend.frameon`` :data:`rcParam<matplotlib.rcParams>`.\n\n        fancybox : None or bool\n            If *True*, draw a frame with a round fancybox. If *None*, use rc\n            settings.\n\n        shadow : None or bool\n            If *True*, draw a shadow behind legend. If *None*, use rc settings.\n\n        framealpha : None or float\n            Control the alpha transparency of the legend\'s background.\n            Default is *None* which will take the value from the\n            ``legend.framealpha`` :data:`rcParam<matplotlib.rcParams>`.\n\n        facecolor : None or "inherit" or a color spec\n            Control the legend\'s background color.\n            Default is *None* which will take the value from the\n            ``legend.facecolor`` :data:`rcParam<matplotlib.rcParams>`.\n            If ``"inherit"``, it will take the ``axes.facecolor``\n            :data:`rcParam<matplotlib.rcParams>`.\n\n        edgecolor : None or "inherit" or a color spec\n            Control the legend\'s background patch edge color.\n            Default is *None* which will take the value from the\n            ``legend.edgecolor`` :data:`rcParam<matplotlib.rcParams>`.\n            If ``"inherit"``, it will take the ``axes.edgecolor``\n            :data:`rcParam<matplotlib.rcParams>`.\n\n        ncol : integer\n            Number of columns. Default is 1.\n\n        mode : "expand" or None\n            If mode is "expand", the legend will be horizontally expanded\n            to fill the axes area (or *bbox_to_anchor*)\n\n        title : string\n            The legend title\n\n        borderpad : float or None\n            The fractional whitespace inside the legend border, measured in\n            font-size units.\n            Default is *None* which will take the value from the\n            ``legend.borderpad`` :data:`rcParam<matplotlib.rcParams>`.\n\n        labelspacing : float or None\n            The vertical space between the legend entries, measured in\n            font-size units.\n            Default is *None* which will take the value from the\n            ``legend.labelspacing`` :data:`rcParam<matplotlib.rcParams>`.\n\n        handlelength : float or None\n            The length of the legend handles, measured in font-size units.\n            Default is *None* which will take the value from the\n            ``legend.handlelength`` :data:`rcParam<matplotlib.rcParams>`.\n\n        handletextpad : float or None\n            The padding between the legend handle and text, measured in\n            font-size units.\n            Default is *None* which will take the value from the\n            ``legend.handletextpad`` :data:`rcParam<matplotlib.rcParams>`.\n\n        borderaxespad : float or None\n            The padding between the axes and legend border, measured in\n            font-size units.\n            Default is *None* which will take the value from the\n            ``legend.borderaxespad`` :data:`rcParam<matplotlib.rcParams>`.\n\n        columnspacing : float or None\n            The spacing between columns, measured in font-size units.\n            Default is *None* which will take the value from the\n            ``legend.columnspacing`` :data:`rcParam<matplotlib.rcParams>`.\n\n        Returns\n        -------\n        :class:`matplotlib.legend.Legend` instance\n\n        Notes\n        -----\n        Not all kinds of artist are supported by the legend command. See\n        :ref:`sphx_glr_tutorials_intermediate_legend_guide.py` for details.\n        ')
        
        
        
        # Call to len(...): (line 1466)
        # Processing the call arguments (line 1466)
        # Getting the type of 'args' (line 1466)
        args_53128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 15), 'args', False)
        # Processing the call keyword arguments (line 1466)
        kwargs_53129 = {}
        # Getting the type of 'len' (line 1466)
        len_53127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 11), 'len', False)
        # Calling len(args, kwargs) (line 1466)
        len_call_result_53130 = invoke(stypy.reporting.localization.Localization(__file__, 1466, 11), len_53127, *[args_53128], **kwargs_53129)
        
        int_53131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1466, 24), 'int')
        # Applying the binary operator '==' (line 1466)
        result_eq_53132 = python_operator(stypy.reporting.localization.Localization(__file__, 1466, 11), '==', len_call_result_53130, int_53131)
        
        # Testing the type of an if condition (line 1466)
        if_condition_53133 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1466, 8), result_eq_53132)
        # Assigning a type to the variable 'if_condition_53133' (line 1466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1466, 8), 'if_condition_53133', if_condition_53133)
        # SSA begins for if statement (line 1466)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Name (line 1467):
        
        # Assigning a List to a Name (line 1467):
        
        # Assigning a List to a Name (line 1467):
        
        # Obtaining an instance of the builtin type 'list' (line 1467)
        list_53134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1467, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1467)
        
        # Assigning a type to the variable 'handles' (line 1467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 12), 'handles', list_53134)
        
        # Assigning a List to a Name (line 1468):
        
        # Assigning a List to a Name (line 1468):
        
        # Assigning a List to a Name (line 1468):
        
        # Obtaining an instance of the builtin type 'list' (line 1468)
        list_53135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1468, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1468)
        
        # Assigning a type to the variable 'labels' (line 1468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1468, 12), 'labels', list_53135)

        @norecursion
        def in_handles(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'in_handles'
            module_type_store = module_type_store.open_function_context('in_handles', 1470, 12, False)
            
            # Passed parameters checking function
            in_handles.stypy_localization = localization
            in_handles.stypy_type_of_self = None
            in_handles.stypy_type_store = module_type_store
            in_handles.stypy_function_name = 'in_handles'
            in_handles.stypy_param_names_list = ['h', 'l']
            in_handles.stypy_varargs_param_name = None
            in_handles.stypy_kwargs_param_name = None
            in_handles.stypy_call_defaults = defaults
            in_handles.stypy_call_varargs = varargs
            in_handles.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'in_handles', ['h', 'l'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'in_handles', localization, ['h', 'l'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'in_handles(...)' code ##################

            
            
            # Call to zip(...): (line 1476)
            # Processing the call arguments (line 1476)
            # Getting the type of 'handles' (line 1476)
            handles_53137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 36), 'handles', False)
            # Getting the type of 'labels' (line 1476)
            labels_53138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 45), 'labels', False)
            # Processing the call keyword arguments (line 1476)
            kwargs_53139 = {}
            # Getting the type of 'zip' (line 1476)
            zip_53136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 32), 'zip', False)
            # Calling zip(args, kwargs) (line 1476)
            zip_call_result_53140 = invoke(stypy.reporting.localization.Localization(__file__, 1476, 32), zip_53136, *[handles_53137, labels_53138], **kwargs_53139)
            
            # Testing the type of a for loop iterable (line 1476)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1476, 16), zip_call_result_53140)
            # Getting the type of the for loop variable (line 1476)
            for_loop_var_53141 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1476, 16), zip_call_result_53140)
            # Assigning a type to the variable 'f_h' (line 1476)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1476, 16), 'f_h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1476, 16), for_loop_var_53141))
            # Assigning a type to the variable 'f_l' (line 1476)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1476, 16), 'f_l', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1476, 16), for_loop_var_53141))
            # SSA begins for a for statement (line 1476)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # Getting the type of 'f_l' (line 1477)
            f_l_53142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 23), 'f_l')
            # Getting the type of 'l' (line 1477)
            l_53143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 30), 'l')
            # Applying the binary operator '!=' (line 1477)
            result_ne_53144 = python_operator(stypy.reporting.localization.Localization(__file__, 1477, 23), '!=', f_l_53142, l_53143)
            
            # Testing the type of an if condition (line 1477)
            if_condition_53145 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1477, 20), result_ne_53144)
            # Assigning a type to the variable 'if_condition_53145' (line 1477)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1477, 20), 'if_condition_53145', if_condition_53145)
            # SSA begins for if statement (line 1477)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # SSA join for if statement (line 1477)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Type idiom detected: calculating its left and rigth part (line 1479)
            # Getting the type of 'f_h' (line 1479)
            f_h_53146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 28), 'f_h')
            
            # Call to type(...): (line 1479)
            # Processing the call arguments (line 1479)
            # Getting the type of 'h' (line 1479)
            h_53148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 41), 'h', False)
            # Processing the call keyword arguments (line 1479)
            kwargs_53149 = {}
            # Getting the type of 'type' (line 1479)
            type_53147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 36), 'type', False)
            # Calling type(args, kwargs) (line 1479)
            type_call_result_53150 = invoke(stypy.reporting.localization.Localization(__file__, 1479, 36), type_53147, *[h_53148], **kwargs_53149)
            
            
            (may_be_53151, more_types_in_union_53152) = may_be_type(f_h_53146, type_call_result_53150)

            if may_be_53151:

                if more_types_in_union_53152:
                    # Runtime conditional SSA (line 1479)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'f_h' (line 1479)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1479, 20), 'f_h', type_call_result_53150())

                if more_types_in_union_53152:
                    # SSA join for if statement (line 1479)
                    module_type_store = module_type_store.join_ssa_context()


            
            
            
            # SSA begins for try-except statement (line 1481)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            
            
            # Call to get_color(...): (line 1482)
            # Processing the call keyword arguments (line 1482)
            kwargs_53155 = {}
            # Getting the type of 'f_h' (line 1482)
            f_h_53153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 27), 'f_h', False)
            # Obtaining the member 'get_color' of a type (line 1482)
            get_color_53154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 27), f_h_53153, 'get_color')
            # Calling get_color(args, kwargs) (line 1482)
            get_color_call_result_53156 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 27), get_color_53154, *[], **kwargs_53155)
            
            
            # Call to get_color(...): (line 1482)
            # Processing the call keyword arguments (line 1482)
            kwargs_53159 = {}
            # Getting the type of 'h' (line 1482)
            h_53157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1482, 46), 'h', False)
            # Obtaining the member 'get_color' of a type (line 1482)
            get_color_53158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1482, 46), h_53157, 'get_color')
            # Calling get_color(args, kwargs) (line 1482)
            get_color_call_result_53160 = invoke(stypy.reporting.localization.Localization(__file__, 1482, 46), get_color_53158, *[], **kwargs_53159)
            
            # Applying the binary operator '!=' (line 1482)
            result_ne_53161 = python_operator(stypy.reporting.localization.Localization(__file__, 1482, 27), '!=', get_color_call_result_53156, get_color_call_result_53160)
            
            # Testing the type of an if condition (line 1482)
            if_condition_53162 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1482, 24), result_ne_53161)
            # Assigning a type to the variable 'if_condition_53162' (line 1482)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1482, 24), 'if_condition_53162', if_condition_53162)
            # SSA begins for if statement (line 1482)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # SSA join for if statement (line 1482)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the except part of a try statement (line 1481)
            # SSA branch for the except 'AttributeError' branch of a try statement (line 1481)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA join for try-except statement (line 1481)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # SSA begins for try-except statement (line 1486)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            
            
            # Call to get_facecolor(...): (line 1487)
            # Processing the call keyword arguments (line 1487)
            kwargs_53165 = {}
            # Getting the type of 'f_h' (line 1487)
            f_h_53163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 27), 'f_h', False)
            # Obtaining the member 'get_facecolor' of a type (line 1487)
            get_facecolor_53164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1487, 27), f_h_53163, 'get_facecolor')
            # Calling get_facecolor(args, kwargs) (line 1487)
            get_facecolor_call_result_53166 = invoke(stypy.reporting.localization.Localization(__file__, 1487, 27), get_facecolor_53164, *[], **kwargs_53165)
            
            
            # Call to get_facecolor(...): (line 1487)
            # Processing the call keyword arguments (line 1487)
            kwargs_53169 = {}
            # Getting the type of 'h' (line 1487)
            h_53167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1487, 50), 'h', False)
            # Obtaining the member 'get_facecolor' of a type (line 1487)
            get_facecolor_53168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1487, 50), h_53167, 'get_facecolor')
            # Calling get_facecolor(args, kwargs) (line 1487)
            get_facecolor_call_result_53170 = invoke(stypy.reporting.localization.Localization(__file__, 1487, 50), get_facecolor_53168, *[], **kwargs_53169)
            
            # Applying the binary operator '!=' (line 1487)
            result_ne_53171 = python_operator(stypy.reporting.localization.Localization(__file__, 1487, 27), '!=', get_facecolor_call_result_53166, get_facecolor_call_result_53170)
            
            # Testing the type of an if condition (line 1487)
            if_condition_53172 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1487, 24), result_ne_53171)
            # Assigning a type to the variable 'if_condition_53172' (line 1487)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 24), 'if_condition_53172', if_condition_53172)
            # SSA begins for if statement (line 1487)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # SSA join for if statement (line 1487)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the except part of a try statement (line 1486)
            # SSA branch for the except 'AttributeError' branch of a try statement (line 1486)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA join for try-except statement (line 1486)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            # SSA begins for try-except statement (line 1491)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            
            
            # Call to get_edgecolor(...): (line 1492)
            # Processing the call keyword arguments (line 1492)
            kwargs_53175 = {}
            # Getting the type of 'f_h' (line 1492)
            f_h_53173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 27), 'f_h', False)
            # Obtaining the member 'get_edgecolor' of a type (line 1492)
            get_edgecolor_53174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 27), f_h_53173, 'get_edgecolor')
            # Calling get_edgecolor(args, kwargs) (line 1492)
            get_edgecolor_call_result_53176 = invoke(stypy.reporting.localization.Localization(__file__, 1492, 27), get_edgecolor_53174, *[], **kwargs_53175)
            
            
            # Call to get_edgecolor(...): (line 1492)
            # Processing the call keyword arguments (line 1492)
            kwargs_53179 = {}
            # Getting the type of 'h' (line 1492)
            h_53177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 50), 'h', False)
            # Obtaining the member 'get_edgecolor' of a type (line 1492)
            get_edgecolor_53178 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 50), h_53177, 'get_edgecolor')
            # Calling get_edgecolor(args, kwargs) (line 1492)
            get_edgecolor_call_result_53180 = invoke(stypy.reporting.localization.Localization(__file__, 1492, 50), get_edgecolor_53178, *[], **kwargs_53179)
            
            # Applying the binary operator '!=' (line 1492)
            result_ne_53181 = python_operator(stypy.reporting.localization.Localization(__file__, 1492, 27), '!=', get_edgecolor_call_result_53176, get_edgecolor_call_result_53180)
            
            # Testing the type of an if condition (line 1492)
            if_condition_53182 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1492, 24), result_ne_53181)
            # Assigning a type to the variable 'if_condition_53182' (line 1492)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 24), 'if_condition_53182', if_condition_53182)
            # SSA begins for if statement (line 1492)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # SSA join for if statement (line 1492)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the except part of a try statement (line 1491)
            # SSA branch for the except 'AttributeError' branch of a try statement (line 1491)
            module_type_store.open_ssa_branch('except')
            pass
            # SSA join for try-except statement (line 1491)
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'True' (line 1496)
            True_53183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 27), 'True')
            # Assigning a type to the variable 'stypy_return_type' (line 1496)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1496, 20), 'stypy_return_type', True_53183)
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # Getting the type of 'False' (line 1497)
            False_53184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 23), 'False')
            # Assigning a type to the variable 'stypy_return_type' (line 1497)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 16), 'stypy_return_type', False_53184)
            
            # ################# End of 'in_handles(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'in_handles' in the type store
            # Getting the type of 'stypy_return_type' (line 1470)
            stypy_return_type_53185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 12), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_53185)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'in_handles'
            return stypy_return_type_53185

        # Assigning a type to the variable 'in_handles' (line 1470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 12), 'in_handles', in_handles)
        
        # Getting the type of 'self' (line 1499)
        self_53186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 22), 'self')
        # Obtaining the member 'axes' of a type (line 1499)
        axes_53187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1499, 22), self_53186, 'axes')
        # Testing the type of a for loop iterable (line 1499)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1499, 12), axes_53187)
        # Getting the type of the for loop variable (line 1499)
        for_loop_var_53188 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1499, 12), axes_53187)
        # Assigning a type to the variable 'ax' (line 1499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1499, 12), 'ax', for_loop_var_53188)
        # SSA begins for a for statement (line 1499)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Tuple (line 1500):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to get_legend_handles_labels(...): (line 1500)
        # Processing the call keyword arguments (line 1500)
        kwargs_53191 = {}
        # Getting the type of 'ax' (line 1500)
        ax_53189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 40), 'ax', False)
        # Obtaining the member 'get_legend_handles_labels' of a type (line 1500)
        get_legend_handles_labels_53190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 40), ax_53189, 'get_legend_handles_labels')
        # Calling get_legend_handles_labels(args, kwargs) (line 1500)
        get_legend_handles_labels_call_result_53192 = invoke(stypy.reporting.localization.Localization(__file__, 1500, 40), get_legend_handles_labels_53190, *[], **kwargs_53191)
        
        # Assigning a type to the variable 'call_assignment_50778' (line 1500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 16), 'call_assignment_50778', get_legend_handles_labels_call_result_53192)
        
        # Assigning a Call to a Name (line 1500):
        
        # Assigning a Call to a Name (line 1500):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_53195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1500, 16), 'int')
        # Processing the call keyword arguments
        kwargs_53196 = {}
        # Getting the type of 'call_assignment_50778' (line 1500)
        call_assignment_50778_53193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 16), 'call_assignment_50778', False)
        # Obtaining the member '__getitem__' of a type (line 1500)
        getitem___53194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 16), call_assignment_50778_53193, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_53197 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___53194, *[int_53195], **kwargs_53196)
        
        # Assigning a type to the variable 'call_assignment_50779' (line 1500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 16), 'call_assignment_50779', getitem___call_result_53197)
        
        # Assigning a Name to a Name (line 1500):
        
        # Assigning a Name to a Name (line 1500):
        # Getting the type of 'call_assignment_50779' (line 1500)
        call_assignment_50779_53198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 16), 'call_assignment_50779')
        # Assigning a type to the variable 'ax_handles' (line 1500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 16), 'ax_handles', call_assignment_50779_53198)
        
        # Assigning a Call to a Name (line 1500):
        
        # Assigning a Call to a Name (line 1500):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_53201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1500, 16), 'int')
        # Processing the call keyword arguments
        kwargs_53202 = {}
        # Getting the type of 'call_assignment_50778' (line 1500)
        call_assignment_50778_53199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 16), 'call_assignment_50778', False)
        # Obtaining the member '__getitem__' of a type (line 1500)
        getitem___53200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 16), call_assignment_50778_53199, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_53203 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___53200, *[int_53201], **kwargs_53202)
        
        # Assigning a type to the variable 'call_assignment_50780' (line 1500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 16), 'call_assignment_50780', getitem___call_result_53203)
        
        # Assigning a Name to a Name (line 1500):
        
        # Assigning a Name to a Name (line 1500):
        # Getting the type of 'call_assignment_50780' (line 1500)
        call_assignment_50780_53204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 16), 'call_assignment_50780')
        # Assigning a type to the variable 'ax_labels' (line 1500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1500, 28), 'ax_labels', call_assignment_50780_53204)
        
        
        # Call to zip(...): (line 1501)
        # Processing the call arguments (line 1501)
        # Getting the type of 'ax_handles' (line 1501)
        ax_handles_53206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 32), 'ax_handles', False)
        # Getting the type of 'ax_labels' (line 1501)
        ax_labels_53207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 44), 'ax_labels', False)
        # Processing the call keyword arguments (line 1501)
        kwargs_53208 = {}
        # Getting the type of 'zip' (line 1501)
        zip_53205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 28), 'zip', False)
        # Calling zip(args, kwargs) (line 1501)
        zip_call_result_53209 = invoke(stypy.reporting.localization.Localization(__file__, 1501, 28), zip_53205, *[ax_handles_53206, ax_labels_53207], **kwargs_53208)
        
        # Testing the type of a for loop iterable (line 1501)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1501, 16), zip_call_result_53209)
        # Getting the type of the for loop variable (line 1501)
        for_loop_var_53210 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1501, 16), zip_call_result_53209)
        # Assigning a type to the variable 'h' (line 1501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 16), 'h', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1501, 16), for_loop_var_53210))
        # Assigning a type to the variable 'l' (line 1501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1501, 16), 'l', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1501, 16), for_loop_var_53210))
        # SSA begins for a for statement (line 1501)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Call to in_handles(...): (line 1502)
        # Processing the call arguments (line 1502)
        # Getting the type of 'h' (line 1502)
        h_53212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 38), 'h', False)
        # Getting the type of 'l' (line 1502)
        l_53213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 41), 'l', False)
        # Processing the call keyword arguments (line 1502)
        kwargs_53214 = {}
        # Getting the type of 'in_handles' (line 1502)
        in_handles_53211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 27), 'in_handles', False)
        # Calling in_handles(args, kwargs) (line 1502)
        in_handles_call_result_53215 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 27), in_handles_53211, *[h_53212, l_53213], **kwargs_53214)
        
        # Applying the 'not' unary operator (line 1502)
        result_not__53216 = python_operator(stypy.reporting.localization.Localization(__file__, 1502, 23), 'not', in_handles_call_result_53215)
        
        # Testing the type of an if condition (line 1502)
        if_condition_53217 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1502, 20), result_not__53216)
        # Assigning a type to the variable 'if_condition_53217' (line 1502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1502, 20), 'if_condition_53217', if_condition_53217)
        # SSA begins for if statement (line 1502)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1503)
        # Processing the call arguments (line 1503)
        # Getting the type of 'h' (line 1503)
        h_53220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 39), 'h', False)
        # Processing the call keyword arguments (line 1503)
        kwargs_53221 = {}
        # Getting the type of 'handles' (line 1503)
        handles_53218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 24), 'handles', False)
        # Obtaining the member 'append' of a type (line 1503)
        append_53219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1503, 24), handles_53218, 'append')
        # Calling append(args, kwargs) (line 1503)
        append_call_result_53222 = invoke(stypy.reporting.localization.Localization(__file__, 1503, 24), append_53219, *[h_53220], **kwargs_53221)
        
        
        # Call to append(...): (line 1504)
        # Processing the call arguments (line 1504)
        # Getting the type of 'l' (line 1504)
        l_53225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 38), 'l', False)
        # Processing the call keyword arguments (line 1504)
        kwargs_53226 = {}
        # Getting the type of 'labels' (line 1504)
        labels_53223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1504, 24), 'labels', False)
        # Obtaining the member 'append' of a type (line 1504)
        append_53224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1504, 24), labels_53223, 'append')
        # Calling append(args, kwargs) (line 1504)
        append_call_result_53227 = invoke(stypy.reporting.localization.Localization(__file__, 1504, 24), append_53224, *[l_53225], **kwargs_53226)
        
        # SSA join for if statement (line 1502)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 1505)
        # Processing the call arguments (line 1505)
        # Getting the type of 'handles' (line 1505)
        handles_53229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 19), 'handles', False)
        # Processing the call keyword arguments (line 1505)
        kwargs_53230 = {}
        # Getting the type of 'len' (line 1505)
        len_53228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 15), 'len', False)
        # Calling len(args, kwargs) (line 1505)
        len_call_result_53231 = invoke(stypy.reporting.localization.Localization(__file__, 1505, 15), len_53228, *[handles_53229], **kwargs_53230)
        
        int_53232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1505, 31), 'int')
        # Applying the binary operator '==' (line 1505)
        result_eq_53233 = python_operator(stypy.reporting.localization.Localization(__file__, 1505, 15), '==', len_call_result_53231, int_53232)
        
        # Testing the type of an if condition (line 1505)
        if_condition_53234 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1505, 12), result_eq_53233)
        # Assigning a type to the variable 'if_condition_53234' (line 1505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1505, 12), 'if_condition_53234', if_condition_53234)
        # SSA begins for if statement (line 1505)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1506)
        # Processing the call arguments (line 1506)
        unicode_53237 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1506, 30), 'unicode', u"No labeled objects found. Use label='...' kwarg on individual plots.")
        # Processing the call keyword arguments (line 1506)
        kwargs_53238 = {}
        # Getting the type of 'warnings' (line 1506)
        warnings_53235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1506)
        warn_53236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 16), warnings_53235, 'warn')
        # Calling warn(args, kwargs) (line 1506)
        warn_call_result_53239 = invoke(stypy.reporting.localization.Localization(__file__, 1506, 16), warn_53236, *[unicode_53237], **kwargs_53238)
        
        # Getting the type of 'None' (line 1508)
        None_53240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 23), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 16), 'stypy_return_type', None_53240)
        # SSA join for if statement (line 1505)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1466)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to len(...): (line 1510)
        # Processing the call arguments (line 1510)
        # Getting the type of 'args' (line 1510)
        args_53242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 17), 'args', False)
        # Processing the call keyword arguments (line 1510)
        kwargs_53243 = {}
        # Getting the type of 'len' (line 1510)
        len_53241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 13), 'len', False)
        # Calling len(args, kwargs) (line 1510)
        len_call_result_53244 = invoke(stypy.reporting.localization.Localization(__file__, 1510, 13), len_53241, *[args_53242], **kwargs_53243)
        
        int_53245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1510, 26), 'int')
        # Applying the binary operator '==' (line 1510)
        result_eq_53246 = python_operator(stypy.reporting.localization.Localization(__file__, 1510, 13), '==', len_call_result_53244, int_53245)
        
        # Testing the type of an if condition (line 1510)
        if_condition_53247 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1510, 13), result_eq_53246)
        # Assigning a type to the variable 'if_condition_53247' (line 1510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1510, 13), 'if_condition_53247', if_condition_53247)
        # SSA begins for if statement (line 1510)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 1512):
        
        # Assigning a Subscript to a Name (line 1512):
        
        # Assigning a Subscript to a Name (line 1512):
        
        # Obtaining the type of the subscript
        int_53248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, 12), 'int')
        # Getting the type of 'args' (line 1512)
        args_53249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 30), 'args')
        # Obtaining the member '__getitem__' of a type (line 1512)
        getitem___53250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 12), args_53249, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1512)
        subscript_call_result_53251 = invoke(stypy.reporting.localization.Localization(__file__, 1512, 12), getitem___53250, int_53248)
        
        # Assigning a type to the variable 'tuple_var_assignment_50781' (line 1512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 12), 'tuple_var_assignment_50781', subscript_call_result_53251)
        
        # Assigning a Subscript to a Name (line 1512):
        
        # Assigning a Subscript to a Name (line 1512):
        
        # Obtaining the type of the subscript
        int_53252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1512, 12), 'int')
        # Getting the type of 'args' (line 1512)
        args_53253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 30), 'args')
        # Obtaining the member '__getitem__' of a type (line 1512)
        getitem___53254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 12), args_53253, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1512)
        subscript_call_result_53255 = invoke(stypy.reporting.localization.Localization(__file__, 1512, 12), getitem___53254, int_53252)
        
        # Assigning a type to the variable 'tuple_var_assignment_50782' (line 1512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 12), 'tuple_var_assignment_50782', subscript_call_result_53255)
        
        # Assigning a Name to a Name (line 1512):
        
        # Assigning a Name to a Name (line 1512):
        # Getting the type of 'tuple_var_assignment_50781' (line 1512)
        tuple_var_assignment_50781_53256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 12), 'tuple_var_assignment_50781')
        # Assigning a type to the variable 'handles' (line 1512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 12), 'handles', tuple_var_assignment_50781_53256)
        
        # Assigning a Name to a Name (line 1512):
        
        # Assigning a Name to a Name (line 1512):
        # Getting the type of 'tuple_var_assignment_50782' (line 1512)
        tuple_var_assignment_50782_53257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 12), 'tuple_var_assignment_50782')
        # Assigning a type to the variable 'labels' (line 1512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 21), 'labels', tuple_var_assignment_50782_53257)
        # SSA branch for the else part of an if statement (line 1510)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to len(...): (line 1514)
        # Processing the call arguments (line 1514)
        # Getting the type of 'args' (line 1514)
        args_53259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 17), 'args', False)
        # Processing the call keyword arguments (line 1514)
        kwargs_53260 = {}
        # Getting the type of 'len' (line 1514)
        len_53258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 13), 'len', False)
        # Calling len(args, kwargs) (line 1514)
        len_call_result_53261 = invoke(stypy.reporting.localization.Localization(__file__, 1514, 13), len_53258, *[args_53259], **kwargs_53260)
        
        int_53262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1514, 26), 'int')
        # Applying the binary operator '==' (line 1514)
        result_eq_53263 = python_operator(stypy.reporting.localization.Localization(__file__, 1514, 13), '==', len_call_result_53261, int_53262)
        
        # Testing the type of an if condition (line 1514)
        if_condition_53264 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1514, 13), result_eq_53263)
        # Assigning a type to the variable 'if_condition_53264' (line 1514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 13), 'if_condition_53264', if_condition_53264)
        # SSA begins for if statement (line 1514)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Tuple (line 1516):
        
        # Assigning a Subscript to a Name (line 1516):
        
        # Assigning a Subscript to a Name (line 1516):
        
        # Obtaining the type of the subscript
        int_53265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1516, 12), 'int')
        # Getting the type of 'args' (line 1516)
        args_53266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 35), 'args')
        # Obtaining the member '__getitem__' of a type (line 1516)
        getitem___53267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1516, 12), args_53266, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1516)
        subscript_call_result_53268 = invoke(stypy.reporting.localization.Localization(__file__, 1516, 12), getitem___53267, int_53265)
        
        # Assigning a type to the variable 'tuple_var_assignment_50783' (line 1516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1516, 12), 'tuple_var_assignment_50783', subscript_call_result_53268)
        
        # Assigning a Subscript to a Name (line 1516):
        
        # Assigning a Subscript to a Name (line 1516):
        
        # Obtaining the type of the subscript
        int_53269 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1516, 12), 'int')
        # Getting the type of 'args' (line 1516)
        args_53270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 35), 'args')
        # Obtaining the member '__getitem__' of a type (line 1516)
        getitem___53271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1516, 12), args_53270, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1516)
        subscript_call_result_53272 = invoke(stypy.reporting.localization.Localization(__file__, 1516, 12), getitem___53271, int_53269)
        
        # Assigning a type to the variable 'tuple_var_assignment_50784' (line 1516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1516, 12), 'tuple_var_assignment_50784', subscript_call_result_53272)
        
        # Assigning a Subscript to a Name (line 1516):
        
        # Assigning a Subscript to a Name (line 1516):
        
        # Obtaining the type of the subscript
        int_53273 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1516, 12), 'int')
        # Getting the type of 'args' (line 1516)
        args_53274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 35), 'args')
        # Obtaining the member '__getitem__' of a type (line 1516)
        getitem___53275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1516, 12), args_53274, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1516)
        subscript_call_result_53276 = invoke(stypy.reporting.localization.Localization(__file__, 1516, 12), getitem___53275, int_53273)
        
        # Assigning a type to the variable 'tuple_var_assignment_50785' (line 1516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1516, 12), 'tuple_var_assignment_50785', subscript_call_result_53276)
        
        # Assigning a Name to a Name (line 1516):
        
        # Assigning a Name to a Name (line 1516):
        # Getting the type of 'tuple_var_assignment_50783' (line 1516)
        tuple_var_assignment_50783_53277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 12), 'tuple_var_assignment_50783')
        # Assigning a type to the variable 'handles' (line 1516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1516, 12), 'handles', tuple_var_assignment_50783_53277)
        
        # Assigning a Name to a Name (line 1516):
        
        # Assigning a Name to a Name (line 1516):
        # Getting the type of 'tuple_var_assignment_50784' (line 1516)
        tuple_var_assignment_50784_53278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 12), 'tuple_var_assignment_50784')
        # Assigning a type to the variable 'labels' (line 1516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1516, 21), 'labels', tuple_var_assignment_50784_53278)
        
        # Assigning a Name to a Name (line 1516):
        
        # Assigning a Name to a Name (line 1516):
        # Getting the type of 'tuple_var_assignment_50785' (line 1516)
        tuple_var_assignment_50785_53279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 12), 'tuple_var_assignment_50785')
        # Assigning a type to the variable 'loc' (line 1516)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1516, 29), 'loc', tuple_var_assignment_50785_53279)
        
        # Assigning a Name to a Subscript (line 1517):
        
        # Assigning a Name to a Subscript (line 1517):
        
        # Assigning a Name to a Subscript (line 1517):
        # Getting the type of 'loc' (line 1517)
        loc_53280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 28), 'loc')
        # Getting the type of 'kwargs' (line 1517)
        kwargs_53281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 12), 'kwargs')
        unicode_53282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1517, 19), 'unicode', u'loc')
        # Storing an element on a container (line 1517)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1517, 12), kwargs_53281, (unicode_53282, loc_53280))
        # SSA branch for the else part of an if statement (line 1514)
        module_type_store.open_ssa_branch('else')
        
        # Call to TypeError(...): (line 1520)
        # Processing the call arguments (line 1520)
        unicode_53284 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1520, 28), 'unicode', u'Invalid number of arguments passed to legend. Please specify either 0 args, 2 args (artist handles, figure labels) or 3 args (artist handles, figure labels, legend location)')
        # Processing the call keyword arguments (line 1520)
        kwargs_53285 = {}
        # Getting the type of 'TypeError' (line 1520)
        TypeError_53283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1520)
        TypeError_call_result_53286 = invoke(stypy.reporting.localization.Localization(__file__, 1520, 18), TypeError_53283, *[unicode_53284], **kwargs_53285)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1520, 12), TypeError_call_result_53286, 'raise parameter', BaseException)
        # SSA join for if statement (line 1514)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1510)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1466)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1525):
        
        # Assigning a Call to a Name (line 1525):
        
        # Assigning a Call to a Name (line 1525):
        
        # Call to Legend(...): (line 1525)
        # Processing the call arguments (line 1525)
        # Getting the type of 'self' (line 1525)
        self_53288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 19), 'self', False)
        # Getting the type of 'handles' (line 1525)
        handles_53289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 25), 'handles', False)
        # Getting the type of 'labels' (line 1525)
        labels_53290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 34), 'labels', False)
        # Processing the call keyword arguments (line 1525)
        # Getting the type of 'kwargs' (line 1525)
        kwargs_53291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 44), 'kwargs', False)
        kwargs_53292 = {'kwargs_53291': kwargs_53291}
        # Getting the type of 'Legend' (line 1525)
        Legend_53287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 12), 'Legend', False)
        # Calling Legend(args, kwargs) (line 1525)
        Legend_call_result_53293 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 12), Legend_53287, *[self_53288, handles_53289, labels_53290], **kwargs_53292)
        
        # Assigning a type to the variable 'l' (line 1525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 8), 'l', Legend_call_result_53293)
        
        # Call to append(...): (line 1526)
        # Processing the call arguments (line 1526)
        # Getting the type of 'l' (line 1526)
        l_53297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 28), 'l', False)
        # Processing the call keyword arguments (line 1526)
        kwargs_53298 = {}
        # Getting the type of 'self' (line 1526)
        self_53294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 8), 'self', False)
        # Obtaining the member 'legends' of a type (line 1526)
        legends_53295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 8), self_53294, 'legends')
        # Obtaining the member 'append' of a type (line 1526)
        append_53296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1526, 8), legends_53295, 'append')
        # Calling append(args, kwargs) (line 1526)
        append_call_result_53299 = invoke(stypy.reporting.localization.Localization(__file__, 1526, 8), append_53296, *[l_53297], **kwargs_53298)
        
        
        # Assigning a Lambda to a Attribute (line 1527):
        
        # Assigning a Lambda to a Attribute (line 1527):
        
        # Assigning a Lambda to a Attribute (line 1527):

        @norecursion
        def _stypy_temp_lambda_14(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_14'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_14', 1527, 27, True)
            # Passed parameters checking function
            _stypy_temp_lambda_14.stypy_localization = localization
            _stypy_temp_lambda_14.stypy_type_of_self = None
            _stypy_temp_lambda_14.stypy_type_store = module_type_store
            _stypy_temp_lambda_14.stypy_function_name = '_stypy_temp_lambda_14'
            _stypy_temp_lambda_14.stypy_param_names_list = ['h']
            _stypy_temp_lambda_14.stypy_varargs_param_name = None
            _stypy_temp_lambda_14.stypy_kwargs_param_name = None
            _stypy_temp_lambda_14.stypy_call_defaults = defaults
            _stypy_temp_lambda_14.stypy_call_varargs = varargs
            _stypy_temp_lambda_14.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_14', ['h'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_14', ['h'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to remove(...): (line 1527)
            # Processing the call arguments (line 1527)
            # Getting the type of 'h' (line 1527)
            h_53303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 57), 'h', False)
            # Processing the call keyword arguments (line 1527)
            kwargs_53304 = {}
            # Getting the type of 'self' (line 1527)
            self_53300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 37), 'self', False)
            # Obtaining the member 'legends' of a type (line 1527)
            legends_53301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 37), self_53300, 'legends')
            # Obtaining the member 'remove' of a type (line 1527)
            remove_53302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 37), legends_53301, 'remove')
            # Calling remove(args, kwargs) (line 1527)
            remove_call_result_53305 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 37), remove_53302, *[h_53303], **kwargs_53304)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 1527)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 27), 'stypy_return_type', remove_call_result_53305)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_14' in the type store
            # Getting the type of 'stypy_return_type' (line 1527)
            stypy_return_type_53306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 27), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_53306)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_14'
            return stypy_return_type_53306

        # Assigning a type to the variable '_stypy_temp_lambda_14' (line 1527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 27), '_stypy_temp_lambda_14', _stypy_temp_lambda_14)
        # Getting the type of '_stypy_temp_lambda_14' (line 1527)
        _stypy_temp_lambda_14_53307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 27), '_stypy_temp_lambda_14')
        # Getting the type of 'l' (line 1527)
        l_53308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 8), 'l')
        # Setting the type of the member '_remove_method' of a type (line 1527)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 8), l_53308, '_remove_method', _stypy_temp_lambda_14_53307)
        
        # Assigning a Name to a Attribute (line 1528):
        
        # Assigning a Name to a Attribute (line 1528):
        
        # Assigning a Name to a Attribute (line 1528):
        # Getting the type of 'True' (line 1528)
        True_53309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 21), 'True')
        # Getting the type of 'self' (line 1528)
        self_53310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1528)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 8), self_53310, 'stale', True_53309)
        # Getting the type of 'l' (line 1529)
        l_53311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1529, 15), 'l')
        # Assigning a type to the variable 'stypy_return_type' (line 1529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1529, 8), 'stypy_return_type', l_53311)
        
        # ################# End of 'legend(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'legend' in the type store
        # Getting the type of 'stypy_return_type' (line 1318)
        stypy_return_type_53312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53312)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'legend'
        return stypy_return_type_53312


    @norecursion
    def text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'text'
        module_type_store = module_type_store.open_function_context('text', 1531, 4, False)
        # Assigning a type to the variable 'self' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.text.__dict__.__setitem__('stypy_localization', localization)
        Figure.text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.text.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.text.__dict__.__setitem__('stypy_function_name', 'Figure.text')
        Figure.text.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 's'])
        Figure.text.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Figure.text.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Figure.text.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.text.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.text.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.text', ['x', 'y', 's'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'text', localization, ['x', 'y', 's'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'text(...)' code ##################

        unicode_53313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1547, (-1)), 'unicode', u'\n        Add text to figure.\n\n        Call signature::\n\n          text(x, y, s, fontdict=None, **kwargs)\n\n        Add text to figure at location *x*, *y* (relative 0-1\n        coords). See :func:`~matplotlib.pyplot.text` for the meaning\n        of the other arguments.\n\n        kwargs control the :class:`~matplotlib.text.Text` properties:\n\n        %(Text)s\n        ')
        
        # Assigning a Call to a Name (line 1549):
        
        # Assigning a Call to a Name (line 1549):
        
        # Assigning a Call to a Name (line 1549):
        
        # Call to _process_text_args(...): (line 1549)
        # Processing the call arguments (line 1549)
        
        # Obtaining an instance of the builtin type 'dict' (line 1549)
        dict_53315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1549, 38), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1549)
        
        # Getting the type of 'args' (line 1549)
        args_53316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 43), 'args', False)
        # Processing the call keyword arguments (line 1549)
        # Getting the type of 'kwargs' (line 1549)
        kwargs_53317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 51), 'kwargs', False)
        kwargs_53318 = {'kwargs_53317': kwargs_53317}
        # Getting the type of '_process_text_args' (line 1549)
        _process_text_args_53314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 19), '_process_text_args', False)
        # Calling _process_text_args(args, kwargs) (line 1549)
        _process_text_args_call_result_53319 = invoke(stypy.reporting.localization.Localization(__file__, 1549, 19), _process_text_args_53314, *[dict_53315, args_53316], **kwargs_53318)
        
        # Assigning a type to the variable 'override' (line 1549)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1549, 8), 'override', _process_text_args_call_result_53319)
        
        # Assigning a Call to a Name (line 1550):
        
        # Assigning a Call to a Name (line 1550):
        
        # Assigning a Call to a Name (line 1550):
        
        # Call to Text(...): (line 1550)
        # Processing the call keyword arguments (line 1550)
        # Getting the type of 'x' (line 1550)
        x_53321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 19), 'x', False)
        keyword_53322 = x_53321
        # Getting the type of 'y' (line 1550)
        y_53323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 24), 'y', False)
        keyword_53324 = y_53323
        # Getting the type of 's' (line 1550)
        s_53325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 32), 's', False)
        keyword_53326 = s_53325
        kwargs_53327 = {'y': keyword_53324, 'x': keyword_53322, 'text': keyword_53326}
        # Getting the type of 'Text' (line 1550)
        Text_53320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1550, 12), 'Text', False)
        # Calling Text(args, kwargs) (line 1550)
        Text_call_result_53328 = invoke(stypy.reporting.localization.Localization(__file__, 1550, 12), Text_53320, *[], **kwargs_53327)
        
        # Assigning a type to the variable 't' (line 1550)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1550, 8), 't', Text_call_result_53328)
        
        # Call to update(...): (line 1552)
        # Processing the call arguments (line 1552)
        # Getting the type of 'override' (line 1552)
        override_53331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 17), 'override', False)
        # Processing the call keyword arguments (line 1552)
        kwargs_53332 = {}
        # Getting the type of 't' (line 1552)
        t_53329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 8), 't', False)
        # Obtaining the member 'update' of a type (line 1552)
        update_53330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1552, 8), t_53329, 'update')
        # Calling update(args, kwargs) (line 1552)
        update_call_result_53333 = invoke(stypy.reporting.localization.Localization(__file__, 1552, 8), update_53330, *[override_53331], **kwargs_53332)
        
        
        # Call to _set_artist_props(...): (line 1553)
        # Processing the call arguments (line 1553)
        # Getting the type of 't' (line 1553)
        t_53336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 31), 't', False)
        # Processing the call keyword arguments (line 1553)
        kwargs_53337 = {}
        # Getting the type of 'self' (line 1553)
        self_53334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 8), 'self', False)
        # Obtaining the member '_set_artist_props' of a type (line 1553)
        _set_artist_props_53335 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1553, 8), self_53334, '_set_artist_props')
        # Calling _set_artist_props(args, kwargs) (line 1553)
        _set_artist_props_call_result_53338 = invoke(stypy.reporting.localization.Localization(__file__, 1553, 8), _set_artist_props_53335, *[t_53336], **kwargs_53337)
        
        
        # Call to append(...): (line 1554)
        # Processing the call arguments (line 1554)
        # Getting the type of 't' (line 1554)
        t_53342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 26), 't', False)
        # Processing the call keyword arguments (line 1554)
        kwargs_53343 = {}
        # Getting the type of 'self' (line 1554)
        self_53339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 8), 'self', False)
        # Obtaining the member 'texts' of a type (line 1554)
        texts_53340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1554, 8), self_53339, 'texts')
        # Obtaining the member 'append' of a type (line 1554)
        append_53341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1554, 8), texts_53340, 'append')
        # Calling append(args, kwargs) (line 1554)
        append_call_result_53344 = invoke(stypy.reporting.localization.Localization(__file__, 1554, 8), append_53341, *[t_53342], **kwargs_53343)
        
        
        # Assigning a Lambda to a Attribute (line 1555):
        
        # Assigning a Lambda to a Attribute (line 1555):
        
        # Assigning a Lambda to a Attribute (line 1555):

        @norecursion
        def _stypy_temp_lambda_15(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '_stypy_temp_lambda_15'
            module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_15', 1555, 27, True)
            # Passed parameters checking function
            _stypy_temp_lambda_15.stypy_localization = localization
            _stypy_temp_lambda_15.stypy_type_of_self = None
            _stypy_temp_lambda_15.stypy_type_store = module_type_store
            _stypy_temp_lambda_15.stypy_function_name = '_stypy_temp_lambda_15'
            _stypy_temp_lambda_15.stypy_param_names_list = ['h']
            _stypy_temp_lambda_15.stypy_varargs_param_name = None
            _stypy_temp_lambda_15.stypy_kwargs_param_name = None
            _stypy_temp_lambda_15.stypy_call_defaults = defaults
            _stypy_temp_lambda_15.stypy_call_varargs = varargs
            _stypy_temp_lambda_15.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_15', ['h'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Stacktrace push for error reporting
            localization.set_stack_trace('_stypy_temp_lambda_15', ['h'], arguments)
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of the lambda function code ##################

            
            # Call to remove(...): (line 1555)
            # Processing the call arguments (line 1555)
            # Getting the type of 'h' (line 1555)
            h_53348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 55), 'h', False)
            # Processing the call keyword arguments (line 1555)
            kwargs_53349 = {}
            # Getting the type of 'self' (line 1555)
            self_53345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 37), 'self', False)
            # Obtaining the member 'texts' of a type (line 1555)
            texts_53346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1555, 37), self_53345, 'texts')
            # Obtaining the member 'remove' of a type (line 1555)
            remove_53347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1555, 37), texts_53346, 'remove')
            # Calling remove(args, kwargs) (line 1555)
            remove_call_result_53350 = invoke(stypy.reporting.localization.Localization(__file__, 1555, 37), remove_53347, *[h_53348], **kwargs_53349)
            
            # Assigning the return type of the lambda function
            # Assigning a type to the variable 'stypy_return_type' (line 1555)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1555, 27), 'stypy_return_type', remove_call_result_53350)
            
            # ################# End of the lambda function code ##################

            # Stacktrace pop (error reporting)
            localization.unset_stack_trace()
            
            # Storing the return type of function '_stypy_temp_lambda_15' in the type store
            # Getting the type of 'stypy_return_type' (line 1555)
            stypy_return_type_53351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 27), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_53351)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function '_stypy_temp_lambda_15'
            return stypy_return_type_53351

        # Assigning a type to the variable '_stypy_temp_lambda_15' (line 1555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1555, 27), '_stypy_temp_lambda_15', _stypy_temp_lambda_15)
        # Getting the type of '_stypy_temp_lambda_15' (line 1555)
        _stypy_temp_lambda_15_53352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 27), '_stypy_temp_lambda_15')
        # Getting the type of 't' (line 1555)
        t_53353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1555, 8), 't')
        # Setting the type of the member '_remove_method' of a type (line 1555)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1555, 8), t_53353, '_remove_method', _stypy_temp_lambda_15_53352)
        
        # Assigning a Name to a Attribute (line 1556):
        
        # Assigning a Name to a Attribute (line 1556):
        
        # Assigning a Name to a Attribute (line 1556):
        # Getting the type of 'True' (line 1556)
        True_53354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 21), 'True')
        # Getting the type of 'self' (line 1556)
        self_53355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1556)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1556, 8), self_53355, 'stale', True_53354)
        # Getting the type of 't' (line 1557)
        t_53356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 15), 't')
        # Assigning a type to the variable 'stypy_return_type' (line 1557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 8), 'stypy_return_type', t_53356)
        
        # ################# End of 'text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'text' in the type store
        # Getting the type of 'stypy_return_type' (line 1531)
        stypy_return_type_53357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53357)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'text'
        return stypy_return_type_53357


    @norecursion
    def _set_artist_props(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_set_artist_props'
        module_type_store = module_type_store.open_function_context('_set_artist_props', 1559, 4, False)
        # Assigning a type to the variable 'self' (line 1560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1560, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure._set_artist_props.__dict__.__setitem__('stypy_localization', localization)
        Figure._set_artist_props.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure._set_artist_props.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure._set_artist_props.__dict__.__setitem__('stypy_function_name', 'Figure._set_artist_props')
        Figure._set_artist_props.__dict__.__setitem__('stypy_param_names_list', ['a'])
        Figure._set_artist_props.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure._set_artist_props.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure._set_artist_props.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure._set_artist_props.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure._set_artist_props.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure._set_artist_props.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure._set_artist_props', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_set_artist_props', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_set_artist_props(...)' code ##################

        
        
        # Getting the type of 'a' (line 1560)
        a_53358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 11), 'a')
        # Getting the type of 'self' (line 1560)
        self_53359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 16), 'self')
        # Applying the binary operator '!=' (line 1560)
        result_ne_53360 = python_operator(stypy.reporting.localization.Localization(__file__, 1560, 11), '!=', a_53358, self_53359)
        
        # Testing the type of an if condition (line 1560)
        if_condition_53361 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1560, 8), result_ne_53360)
        # Assigning a type to the variable 'if_condition_53361' (line 1560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1560, 8), 'if_condition_53361', if_condition_53361)
        # SSA begins for if statement (line 1560)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_figure(...): (line 1561)
        # Processing the call arguments (line 1561)
        # Getting the type of 'self' (line 1561)
        self_53364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 25), 'self', False)
        # Processing the call keyword arguments (line 1561)
        kwargs_53365 = {}
        # Getting the type of 'a' (line 1561)
        a_53362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 12), 'a', False)
        # Obtaining the member 'set_figure' of a type (line 1561)
        set_figure_53363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1561, 12), a_53362, 'set_figure')
        # Calling set_figure(args, kwargs) (line 1561)
        set_figure_call_result_53366 = invoke(stypy.reporting.localization.Localization(__file__, 1561, 12), set_figure_53363, *[self_53364], **kwargs_53365)
        
        # SSA join for if statement (line 1560)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1562):
        
        # Assigning a Name to a Attribute (line 1562):
        
        # Assigning a Name to a Attribute (line 1562):
        # Getting the type of '_stale_figure_callback' (line 1562)
        _stale_figure_callback_53367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 27), '_stale_figure_callback')
        # Getting the type of 'a' (line 1562)
        a_53368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 8), 'a')
        # Setting the type of the member 'stale_callback' of a type (line 1562)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1562, 8), a_53368, 'stale_callback', _stale_figure_callback_53367)
        
        # Call to set_transform(...): (line 1563)
        # Processing the call arguments (line 1563)
        # Getting the type of 'self' (line 1563)
        self_53371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 24), 'self', False)
        # Obtaining the member 'transFigure' of a type (line 1563)
        transFigure_53372 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1563, 24), self_53371, 'transFigure')
        # Processing the call keyword arguments (line 1563)
        kwargs_53373 = {}
        # Getting the type of 'a' (line 1563)
        a_53369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 8), 'a', False)
        # Obtaining the member 'set_transform' of a type (line 1563)
        set_transform_53370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1563, 8), a_53369, 'set_transform')
        # Calling set_transform(args, kwargs) (line 1563)
        set_transform_call_result_53374 = invoke(stypy.reporting.localization.Localization(__file__, 1563, 8), set_transform_53370, *[transFigure_53372], **kwargs_53373)
        
        
        # ################# End of '_set_artist_props(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_set_artist_props' in the type store
        # Getting the type of 'stypy_return_type' (line 1559)
        stypy_return_type_53375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1559, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53375)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_set_artist_props'
        return stypy_return_type_53375


    @norecursion
    def gca(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'gca'
        module_type_store = module_type_store.open_function_context('gca', 1565, 4, False)
        # Assigning a type to the variable 'self' (line 1566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1566, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.gca.__dict__.__setitem__('stypy_localization', localization)
        Figure.gca.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.gca.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.gca.__dict__.__setitem__('stypy_function_name', 'Figure.gca')
        Figure.gca.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.gca.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.gca.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Figure.gca.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.gca.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.gca.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.gca.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.gca', [], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'gca', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'gca(...)' code ##################

        unicode_53376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1576, (-1)), 'unicode', u'\n        Get the current axes, creating one if necessary\n\n        The following kwargs are supported for ensuring the returned axes\n        adheres to the given projection etc., and for axes creation if\n        the active axes does not exist:\n\n        %(Axes)s\n\n        ')
        
        # Assigning a Call to a Tuple (line 1577):
        
        # Assigning a Call to a Name:
        
        # Assigning a Call to a Name:
        
        # Call to current_key_axes(...): (line 1577)
        # Processing the call keyword arguments (line 1577)
        kwargs_53380 = {}
        # Getting the type of 'self' (line 1577)
        self_53377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 20), 'self', False)
        # Obtaining the member '_axstack' of a type (line 1577)
        _axstack_53378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 20), self_53377, '_axstack')
        # Obtaining the member 'current_key_axes' of a type (line 1577)
        current_key_axes_53379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 20), _axstack_53378, 'current_key_axes')
        # Calling current_key_axes(args, kwargs) (line 1577)
        current_key_axes_call_result_53381 = invoke(stypy.reporting.localization.Localization(__file__, 1577, 20), current_key_axes_53379, *[], **kwargs_53380)
        
        # Assigning a type to the variable 'call_assignment_50786' (line 1577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 8), 'call_assignment_50786', current_key_axes_call_result_53381)
        
        # Assigning a Call to a Name (line 1577):
        
        # Assigning a Call to a Name (line 1577):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_53384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1577, 8), 'int')
        # Processing the call keyword arguments
        kwargs_53385 = {}
        # Getting the type of 'call_assignment_50786' (line 1577)
        call_assignment_50786_53382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 8), 'call_assignment_50786', False)
        # Obtaining the member '__getitem__' of a type (line 1577)
        getitem___53383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 8), call_assignment_50786_53382, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_53386 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___53383, *[int_53384], **kwargs_53385)
        
        # Assigning a type to the variable 'call_assignment_50787' (line 1577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 8), 'call_assignment_50787', getitem___call_result_53386)
        
        # Assigning a Name to a Name (line 1577):
        
        # Assigning a Name to a Name (line 1577):
        # Getting the type of 'call_assignment_50787' (line 1577)
        call_assignment_50787_53387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 8), 'call_assignment_50787')
        # Assigning a type to the variable 'ckey' (line 1577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 8), 'ckey', call_assignment_50787_53387)
        
        # Assigning a Call to a Name (line 1577):
        
        # Assigning a Call to a Name (line 1577):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_53390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1577, 8), 'int')
        # Processing the call keyword arguments
        kwargs_53391 = {}
        # Getting the type of 'call_assignment_50786' (line 1577)
        call_assignment_50786_53388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 8), 'call_assignment_50786', False)
        # Obtaining the member '__getitem__' of a type (line 1577)
        getitem___53389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1577, 8), call_assignment_50786_53388, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_53392 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___53389, *[int_53390], **kwargs_53391)
        
        # Assigning a type to the variable 'call_assignment_50788' (line 1577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 8), 'call_assignment_50788', getitem___call_result_53392)
        
        # Assigning a Name to a Name (line 1577):
        
        # Assigning a Name to a Name (line 1577):
        # Getting the type of 'call_assignment_50788' (line 1577)
        call_assignment_50788_53393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1577, 8), 'call_assignment_50788')
        # Assigning a type to the variable 'cax' (line 1577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1577, 14), 'cax', call_assignment_50788_53393)
        
        # Type idiom detected: calculating its left and rigth part (line 1580)
        # Getting the type of 'cax' (line 1580)
        cax_53394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 8), 'cax')
        # Getting the type of 'None' (line 1580)
        None_53395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1580, 22), 'None')
        
        (may_be_53396, more_types_in_union_53397) = may_not_be_none(cax_53394, None_53395)

        if may_be_53396:

            if more_types_in_union_53397:
                # Runtime conditional SSA (line 1580)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Getting the type of 'kwargs' (line 1584)
            kwargs_53398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1584, 19), 'kwargs')
            # Applying the 'not' unary operator (line 1584)
            result_not__53399 = python_operator(stypy.reporting.localization.Localization(__file__, 1584, 15), 'not', kwargs_53398)
            
            # Testing the type of an if condition (line 1584)
            if_condition_53400 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1584, 12), result_not__53399)
            # Assigning a type to the variable 'if_condition_53400' (line 1584)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1584, 12), 'if_condition_53400', if_condition_53400)
            # SSA begins for if statement (line 1584)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # Getting the type of 'cax' (line 1585)
            cax_53401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 23), 'cax')
            # Assigning a type to the variable 'stypy_return_type' (line 1585)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 16), 'stypy_return_type', cax_53401)
            # SSA branch for the else part of an if statement (line 1584)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Name (line 1592):
            
            # Assigning a Call to a Name (line 1592):
            
            # Assigning a Call to a Name (line 1592):
            
            # Call to copy(...): (line 1592)
            # Processing the call keyword arguments (line 1592)
            kwargs_53404 = {}
            # Getting the type of 'kwargs' (line 1592)
            kwargs_53402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1592, 30), 'kwargs', False)
            # Obtaining the member 'copy' of a type (line 1592)
            copy_53403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1592, 30), kwargs_53402, 'copy')
            # Calling copy(args, kwargs) (line 1592)
            copy_call_result_53405 = invoke(stypy.reporting.localization.Localization(__file__, 1592, 30), copy_53403, *[], **kwargs_53404)
            
            # Assigning a type to the variable 'kwargs_copy' (line 1592)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1592, 16), 'kwargs_copy', copy_call_result_53405)
            
            # Assigning a Call to a Tuple (line 1593):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to process_projection_requirements(...): (line 1593)
            # Processing the call arguments (line 1593)
            # Getting the type of 'self' (line 1594)
            self_53407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 20), 'self', False)
            # Processing the call keyword arguments (line 1593)
            # Getting the type of 'kwargs_copy' (line 1594)
            kwargs_copy_53408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1594, 28), 'kwargs_copy', False)
            kwargs_53409 = {'kwargs_copy_53408': kwargs_copy_53408}
            # Getting the type of 'process_projection_requirements' (line 1593)
            process_projection_requirements_53406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 43), 'process_projection_requirements', False)
            # Calling process_projection_requirements(args, kwargs) (line 1593)
            process_projection_requirements_call_result_53410 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 43), process_projection_requirements_53406, *[self_53407], **kwargs_53409)
            
            # Assigning a type to the variable 'call_assignment_50789' (line 1593)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'call_assignment_50789', process_projection_requirements_call_result_53410)
            
            # Assigning a Call to a Name (line 1593):
            
            # Assigning a Call to a Name (line 1593):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_53413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 16), 'int')
            # Processing the call keyword arguments
            kwargs_53414 = {}
            # Getting the type of 'call_assignment_50789' (line 1593)
            call_assignment_50789_53411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'call_assignment_50789', False)
            # Obtaining the member '__getitem__' of a type (line 1593)
            getitem___53412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 16), call_assignment_50789_53411, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_53415 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___53412, *[int_53413], **kwargs_53414)
            
            # Assigning a type to the variable 'call_assignment_50790' (line 1593)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'call_assignment_50790', getitem___call_result_53415)
            
            # Assigning a Name to a Name (line 1593):
            
            # Assigning a Name to a Name (line 1593):
            # Getting the type of 'call_assignment_50790' (line 1593)
            call_assignment_50790_53416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'call_assignment_50790')
            # Assigning a type to the variable 'projection_class' (line 1593)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'projection_class', call_assignment_50790_53416)
            
            # Assigning a Call to a Name (line 1593):
            
            # Assigning a Call to a Name (line 1593):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_53419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 16), 'int')
            # Processing the call keyword arguments
            kwargs_53420 = {}
            # Getting the type of 'call_assignment_50789' (line 1593)
            call_assignment_50789_53417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'call_assignment_50789', False)
            # Obtaining the member '__getitem__' of a type (line 1593)
            getitem___53418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 16), call_assignment_50789_53417, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_53421 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___53418, *[int_53419], **kwargs_53420)
            
            # Assigning a type to the variable 'call_assignment_50791' (line 1593)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'call_assignment_50791', getitem___call_result_53421)
            
            # Assigning a Name to a Name (line 1593):
            
            # Assigning a Name to a Name (line 1593):
            # Getting the type of 'call_assignment_50791' (line 1593)
            call_assignment_50791_53422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'call_assignment_50791')
            # Assigning a type to the variable '_' (line 1593)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 34), '_', call_assignment_50791_53422)
            
            # Assigning a Call to a Name (line 1593):
            
            # Assigning a Call to a Name (line 1593):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_53425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 16), 'int')
            # Processing the call keyword arguments
            kwargs_53426 = {}
            # Getting the type of 'call_assignment_50789' (line 1593)
            call_assignment_50789_53423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'call_assignment_50789', False)
            # Obtaining the member '__getitem__' of a type (line 1593)
            getitem___53424 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1593, 16), call_assignment_50789_53423, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_53427 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___53424, *[int_53425], **kwargs_53426)
            
            # Assigning a type to the variable 'call_assignment_50792' (line 1593)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'call_assignment_50792', getitem___call_result_53427)
            
            # Assigning a Name to a Name (line 1593):
            
            # Assigning a Name to a Name (line 1593):
            # Getting the type of 'call_assignment_50792' (line 1593)
            call_assignment_50792_53428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 16), 'call_assignment_50792')
            # Assigning a type to the variable 'key' (line 1593)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1593, 37), 'key', call_assignment_50792_53428)
            
            # Assigning a Subscript to a Name (line 1598):
            
            # Assigning a Subscript to a Name (line 1598):
            
            # Assigning a Subscript to a Name (line 1598):
            
            # Obtaining the type of the subscript
            int_53429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1598, 28), 'int')
            slice_53430 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1598, 23), int_53429, None, None)
            # Getting the type of 'ckey' (line 1598)
            ckey_53431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1598, 23), 'ckey')
            # Obtaining the member '__getitem__' of a type (line 1598)
            getitem___53432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1598, 23), ckey_53431, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1598)
            subscript_call_result_53433 = invoke(stypy.reporting.localization.Localization(__file__, 1598, 23), getitem___53432, slice_53430)
            
            # Assigning a type to the variable 'ckey' (line 1598)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1598, 16), 'ckey', subscript_call_result_53433)
            
            # Assigning a Subscript to a Name (line 1599):
            
            # Assigning a Subscript to a Name (line 1599):
            
            # Assigning a Subscript to a Name (line 1599):
            
            # Obtaining the type of the subscript
            int_53434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1599, 26), 'int')
            slice_53435 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1599, 22), int_53434, None, None)
            # Getting the type of 'key' (line 1599)
            key_53436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1599, 22), 'key')
            # Obtaining the member '__getitem__' of a type (line 1599)
            getitem___53437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1599, 22), key_53436, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1599)
            subscript_call_result_53438 = invoke(stypy.reporting.localization.Localization(__file__, 1599, 22), getitem___53437, slice_53435)
            
            # Assigning a type to the variable 'key' (line 1599)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1599, 16), 'key', subscript_call_result_53438)
            
            
            # Evaluating a boolean operation
            
            # Getting the type of 'key' (line 1603)
            key_53439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 19), 'key')
            # Getting the type of 'ckey' (line 1603)
            ckey_53440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 26), 'ckey')
            # Applying the binary operator '==' (line 1603)
            result_eq_53441 = python_operator(stypy.reporting.localization.Localization(__file__, 1603, 19), '==', key_53439, ckey_53440)
            
            
            # Call to isinstance(...): (line 1603)
            # Processing the call arguments (line 1603)
            # Getting the type of 'cax' (line 1603)
            cax_53443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 46), 'cax', False)
            # Getting the type of 'projection_class' (line 1603)
            projection_class_53444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 51), 'projection_class', False)
            # Processing the call keyword arguments (line 1603)
            kwargs_53445 = {}
            # Getting the type of 'isinstance' (line 1603)
            isinstance_53442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1603, 35), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1603)
            isinstance_call_result_53446 = invoke(stypy.reporting.localization.Localization(__file__, 1603, 35), isinstance_53442, *[cax_53443, projection_class_53444], **kwargs_53445)
            
            # Applying the binary operator 'and' (line 1603)
            result_and_keyword_53447 = python_operator(stypy.reporting.localization.Localization(__file__, 1603, 19), 'and', result_eq_53441, isinstance_call_result_53446)
            
            # Testing the type of an if condition (line 1603)
            if_condition_53448 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1603, 16), result_and_keyword_53447)
            # Assigning a type to the variable 'if_condition_53448' (line 1603)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1603, 16), 'if_condition_53448', if_condition_53448)
            # SSA begins for if statement (line 1603)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            # Getting the type of 'cax' (line 1604)
            cax_53449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1604, 27), 'cax')
            # Assigning a type to the variable 'stypy_return_type' (line 1604)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1604, 20), 'stypy_return_type', cax_53449)
            # SSA branch for the else part of an if statement (line 1603)
            module_type_store.open_ssa_branch('else')
            
            # Call to warn(...): (line 1606)
            # Processing the call arguments (line 1606)
            unicode_53452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1606, 34), 'unicode', u'Requested projection is different from current axis projection, creating new axis with requested projection.')
            # Processing the call keyword arguments (line 1606)
            int_53453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1608, 75), 'int')
            keyword_53454 = int_53453
            kwargs_53455 = {'stacklevel': keyword_53454}
            # Getting the type of 'warnings' (line 1606)
            warnings_53450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1606, 20), 'warnings', False)
            # Obtaining the member 'warn' of a type (line 1606)
            warn_53451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1606, 20), warnings_53450, 'warn')
            # Calling warn(args, kwargs) (line 1606)
            warn_call_result_53456 = invoke(stypy.reporting.localization.Localization(__file__, 1606, 20), warn_53451, *[unicode_53452], **kwargs_53455)
            
            # SSA join for if statement (line 1603)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1584)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_53397:
                # SSA join for if statement (line 1580)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to add_subplot(...): (line 1611)
        # Processing the call arguments (line 1611)
        int_53459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1611, 32), 'int')
        int_53460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1611, 35), 'int')
        int_53461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1611, 38), 'int')
        # Processing the call keyword arguments (line 1611)
        # Getting the type of 'kwargs' (line 1611)
        kwargs_53462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 43), 'kwargs', False)
        kwargs_53463 = {'kwargs_53462': kwargs_53462}
        # Getting the type of 'self' (line 1611)
        self_53457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 15), 'self', False)
        # Obtaining the member 'add_subplot' of a type (line 1611)
        add_subplot_53458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1611, 15), self_53457, 'add_subplot')
        # Calling add_subplot(args, kwargs) (line 1611)
        add_subplot_call_result_53464 = invoke(stypy.reporting.localization.Localization(__file__, 1611, 15), add_subplot_53458, *[int_53459, int_53460, int_53461], **kwargs_53463)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1611, 8), 'stypy_return_type', add_subplot_call_result_53464)
        
        # ################# End of 'gca(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'gca' in the type store
        # Getting the type of 'stypy_return_type' (line 1565)
        stypy_return_type_53465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53465)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'gca'
        return stypy_return_type_53465


    @norecursion
    def sca(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'sca'
        module_type_store = module_type_store.open_function_context('sca', 1613, 4, False)
        # Assigning a type to the variable 'self' (line 1614)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1614, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.sca.__dict__.__setitem__('stypy_localization', localization)
        Figure.sca.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.sca.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.sca.__dict__.__setitem__('stypy_function_name', 'Figure.sca')
        Figure.sca.__dict__.__setitem__('stypy_param_names_list', ['a'])
        Figure.sca.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.sca.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.sca.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.sca.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.sca.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.sca.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.sca', ['a'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'sca', localization, ['a'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'sca(...)' code ##################

        unicode_53466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1614, 8), 'unicode', u'Set the current axes to be a and return a')
        
        # Call to bubble(...): (line 1615)
        # Processing the call arguments (line 1615)
        # Getting the type of 'a' (line 1615)
        a_53470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 29), 'a', False)
        # Processing the call keyword arguments (line 1615)
        kwargs_53471 = {}
        # Getting the type of 'self' (line 1615)
        self_53467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 8), 'self', False)
        # Obtaining the member '_axstack' of a type (line 1615)
        _axstack_53468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1615, 8), self_53467, '_axstack')
        # Obtaining the member 'bubble' of a type (line 1615)
        bubble_53469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1615, 8), _axstack_53468, 'bubble')
        # Calling bubble(args, kwargs) (line 1615)
        bubble_call_result_53472 = invoke(stypy.reporting.localization.Localization(__file__, 1615, 8), bubble_53469, *[a_53470], **kwargs_53471)
        
        
        # Getting the type of 'self' (line 1616)
        self_53473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 20), 'self')
        # Obtaining the member '_axobservers' of a type (line 1616)
        _axobservers_53474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1616, 20), self_53473, '_axobservers')
        # Testing the type of a for loop iterable (line 1616)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1616, 8), _axobservers_53474)
        # Getting the type of the for loop variable (line 1616)
        for_loop_var_53475 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1616, 8), _axobservers_53474)
        # Assigning a type to the variable 'func' (line 1616)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1616, 8), 'func', for_loop_var_53475)
        # SSA begins for a for statement (line 1616)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to func(...): (line 1617)
        # Processing the call arguments (line 1617)
        # Getting the type of 'self' (line 1617)
        self_53477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 17), 'self', False)
        # Processing the call keyword arguments (line 1617)
        kwargs_53478 = {}
        # Getting the type of 'func' (line 1617)
        func_53476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 12), 'func', False)
        # Calling func(args, kwargs) (line 1617)
        func_call_result_53479 = invoke(stypy.reporting.localization.Localization(__file__, 1617, 12), func_53476, *[self_53477], **kwargs_53478)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'a' (line 1618)
        a_53480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 15), 'a')
        # Assigning a type to the variable 'stypy_return_type' (line 1618)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1618, 8), 'stypy_return_type', a_53480)
        
        # ################# End of 'sca(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'sca' in the type store
        # Getting the type of 'stypy_return_type' (line 1613)
        stypy_return_type_53481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53481)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'sca'
        return stypy_return_type_53481


    @norecursion
    def _gci(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_gci'
        module_type_store = module_type_store.open_function_context('_gci', 1620, 4, False)
        # Assigning a type to the variable 'self' (line 1621)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure._gci.__dict__.__setitem__('stypy_localization', localization)
        Figure._gci.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure._gci.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure._gci.__dict__.__setitem__('stypy_function_name', 'Figure._gci')
        Figure._gci.__dict__.__setitem__('stypy_param_names_list', [])
        Figure._gci.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure._gci.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure._gci.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure._gci.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure._gci.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure._gci.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure._gci', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_gci', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_gci(...)' code ##################

        unicode_53482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1624, (-1)), 'unicode', u'\n        helper for :func:`~matplotlib.pyplot.gci`;\n        do not use elsewhere.\n        ')
        
        # Assigning a Subscript to a Name (line 1626):
        
        # Assigning a Subscript to a Name (line 1626):
        
        # Assigning a Subscript to a Name (line 1626):
        
        # Obtaining the type of the subscript
        int_53483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1626, 47), 'int')
        
        # Call to current_key_axes(...): (line 1626)
        # Processing the call keyword arguments (line 1626)
        kwargs_53487 = {}
        # Getting the type of 'self' (line 1626)
        self_53484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 14), 'self', False)
        # Obtaining the member '_axstack' of a type (line 1626)
        _axstack_53485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1626, 14), self_53484, '_axstack')
        # Obtaining the member 'current_key_axes' of a type (line 1626)
        current_key_axes_53486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1626, 14), _axstack_53485, 'current_key_axes')
        # Calling current_key_axes(args, kwargs) (line 1626)
        current_key_axes_call_result_53488 = invoke(stypy.reporting.localization.Localization(__file__, 1626, 14), current_key_axes_53486, *[], **kwargs_53487)
        
        # Obtaining the member '__getitem__' of a type (line 1626)
        getitem___53489 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1626, 14), current_key_axes_call_result_53488, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1626)
        subscript_call_result_53490 = invoke(stypy.reporting.localization.Localization(__file__, 1626, 14), getitem___53489, int_53483)
        
        # Assigning a type to the variable 'cax' (line 1626)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 8), 'cax', subscript_call_result_53490)
        
        # Type idiom detected: calculating its left and rigth part (line 1627)
        # Getting the type of 'cax' (line 1627)
        cax_53491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 11), 'cax')
        # Getting the type of 'None' (line 1627)
        None_53492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1627, 18), 'None')
        
        (may_be_53493, more_types_in_union_53494) = may_be_none(cax_53491, None_53492)

        if may_be_53493:

            if more_types_in_union_53494:
                # Runtime conditional SSA (line 1627)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'None' (line 1628)
            None_53495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 19), 'None')
            # Assigning a type to the variable 'stypy_return_type' (line 1628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'stypy_return_type', None_53495)

            if more_types_in_union_53494:
                # SSA join for if statement (line 1627)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1629):
        
        # Assigning a Call to a Name (line 1629):
        
        # Assigning a Call to a Name (line 1629):
        
        # Call to _gci(...): (line 1629)
        # Processing the call keyword arguments (line 1629)
        kwargs_53498 = {}
        # Getting the type of 'cax' (line 1629)
        cax_53496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 13), 'cax', False)
        # Obtaining the member '_gci' of a type (line 1629)
        _gci_53497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1629, 13), cax_53496, '_gci')
        # Calling _gci(args, kwargs) (line 1629)
        _gci_call_result_53499 = invoke(stypy.reporting.localization.Localization(__file__, 1629, 13), _gci_53497, *[], **kwargs_53498)
        
        # Assigning a type to the variable 'im' (line 1629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1629, 8), 'im', _gci_call_result_53499)
        
        # Type idiom detected: calculating its left and rigth part (line 1630)
        # Getting the type of 'im' (line 1630)
        im_53500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 8), 'im')
        # Getting the type of 'None' (line 1630)
        None_53501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 21), 'None')
        
        (may_be_53502, more_types_in_union_53503) = may_not_be_none(im_53500, None_53501)

        if may_be_53502:

            if more_types_in_union_53503:
                # Runtime conditional SSA (line 1630)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'im' (line 1631)
            im_53504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 19), 'im')
            # Assigning a type to the variable 'stypy_return_type' (line 1631)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1631, 12), 'stypy_return_type', im_53504)

            if more_types_in_union_53503:
                # SSA join for if statement (line 1630)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to reversed(...): (line 1636)
        # Processing the call arguments (line 1636)
        # Getting the type of 'self' (line 1636)
        self_53506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 27), 'self', False)
        # Obtaining the member 'axes' of a type (line 1636)
        axes_53507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1636, 27), self_53506, 'axes')
        # Processing the call keyword arguments (line 1636)
        kwargs_53508 = {}
        # Getting the type of 'reversed' (line 1636)
        reversed_53505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1636, 18), 'reversed', False)
        # Calling reversed(args, kwargs) (line 1636)
        reversed_call_result_53509 = invoke(stypy.reporting.localization.Localization(__file__, 1636, 18), reversed_53505, *[axes_53507], **kwargs_53508)
        
        # Testing the type of a for loop iterable (line 1636)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1636, 8), reversed_call_result_53509)
        # Getting the type of the for loop variable (line 1636)
        for_loop_var_53510 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1636, 8), reversed_call_result_53509)
        # Assigning a type to the variable 'ax' (line 1636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1636, 8), 'ax', for_loop_var_53510)
        # SSA begins for a for statement (line 1636)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1637):
        
        # Assigning a Call to a Name (line 1637):
        
        # Assigning a Call to a Name (line 1637):
        
        # Call to _gci(...): (line 1637)
        # Processing the call keyword arguments (line 1637)
        kwargs_53513 = {}
        # Getting the type of 'ax' (line 1637)
        ax_53511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1637, 17), 'ax', False)
        # Obtaining the member '_gci' of a type (line 1637)
        _gci_53512 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1637, 17), ax_53511, '_gci')
        # Calling _gci(args, kwargs) (line 1637)
        _gci_call_result_53514 = invoke(stypy.reporting.localization.Localization(__file__, 1637, 17), _gci_53512, *[], **kwargs_53513)
        
        # Assigning a type to the variable 'im' (line 1637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1637, 12), 'im', _gci_call_result_53514)
        
        # Type idiom detected: calculating its left and rigth part (line 1638)
        # Getting the type of 'im' (line 1638)
        im_53515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 12), 'im')
        # Getting the type of 'None' (line 1638)
        None_53516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1638, 25), 'None')
        
        (may_be_53517, more_types_in_union_53518) = may_not_be_none(im_53515, None_53516)

        if may_be_53517:

            if more_types_in_union_53518:
                # Runtime conditional SSA (line 1638)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Getting the type of 'im' (line 1639)
            im_53519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1639, 23), 'im')
            # Assigning a type to the variable 'stypy_return_type' (line 1639)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1639, 16), 'stypy_return_type', im_53519)

            if more_types_in_union_53518:
                # SSA join for if statement (line 1638)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'None' (line 1640)
        None_53520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1640, 15), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1640, 8), 'stypy_return_type', None_53520)
        
        # ################# End of '_gci(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_gci' in the type store
        # Getting the type of 'stypy_return_type' (line 1620)
        stypy_return_type_53521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53521)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_gci'
        return stypy_return_type_53521


    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 1642, 4, False)
        # Assigning a type to the variable 'self' (line 1643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1643, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        Figure.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.__getstate__.__dict__.__setitem__('stypy_function_name', 'Figure.__getstate__')
        Figure.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        
        # Assigning a Call to a Name (line 1643):
        
        # Assigning a Call to a Name (line 1643):
        
        # Assigning a Call to a Name (line 1643):
        
        # Call to __getstate__(...): (line 1643)
        # Processing the call keyword arguments (line 1643)
        kwargs_53528 = {}
        
        # Call to super(...): (line 1643)
        # Processing the call arguments (line 1643)
        # Getting the type of 'Figure' (line 1643)
        Figure_53523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 22), 'Figure', False)
        # Getting the type of 'self' (line 1643)
        self_53524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 30), 'self', False)
        # Processing the call keyword arguments (line 1643)
        kwargs_53525 = {}
        # Getting the type of 'super' (line 1643)
        super_53522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1643, 16), 'super', False)
        # Calling super(args, kwargs) (line 1643)
        super_call_result_53526 = invoke(stypy.reporting.localization.Localization(__file__, 1643, 16), super_53522, *[Figure_53523, self_53524], **kwargs_53525)
        
        # Obtaining the member '__getstate__' of a type (line 1643)
        getstate___53527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1643, 16), super_call_result_53526, '__getstate__')
        # Calling __getstate__(args, kwargs) (line 1643)
        getstate___call_result_53529 = invoke(stypy.reporting.localization.Localization(__file__, 1643, 16), getstate___53527, *[], **kwargs_53528)
        
        # Assigning a type to the variable 'state' (line 1643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1643, 8), 'state', getstate___call_result_53529)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1648)
        tuple_53530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1648, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1648)
        # Adding element type (line 1648)
        unicode_53531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1648, 28), 'unicode', u'_axobservers')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1648, 28), tuple_53530, unicode_53531)
        # Adding element type (line 1648)
        unicode_53532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1648, 44), 'unicode', u'show')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1648, 28), tuple_53530, unicode_53532)
        # Adding element type (line 1648)
        unicode_53533 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1649, 28), 'unicode', u'canvas')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1648, 28), tuple_53530, unicode_53533)
        # Adding element type (line 1648)
        unicode_53534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1649, 38), 'unicode', u'_cachedRenderer')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1648, 28), tuple_53530, unicode_53534)
        
        # Testing the type of a for loop iterable (line 1648)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1648, 8), tuple_53530)
        # Getting the type of the for loop variable (line 1648)
        for_loop_var_53535 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1648, 8), tuple_53530)
        # Assigning a type to the variable 'attr_to_pop' (line 1648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1648, 8), 'attr_to_pop', for_loop_var_53535)
        # SSA begins for a for statement (line 1648)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to pop(...): (line 1650)
        # Processing the call arguments (line 1650)
        # Getting the type of 'attr_to_pop' (line 1650)
        attr_to_pop_53538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 22), 'attr_to_pop', False)
        # Getting the type of 'None' (line 1650)
        None_53539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 35), 'None', False)
        # Processing the call keyword arguments (line 1650)
        kwargs_53540 = {}
        # Getting the type of 'state' (line 1650)
        state_53536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1650, 12), 'state', False)
        # Obtaining the member 'pop' of a type (line 1650)
        pop_53537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1650, 12), state_53536, 'pop')
        # Calling pop(args, kwargs) (line 1650)
        pop_call_result_53541 = invoke(stypy.reporting.localization.Localization(__file__, 1650, 12), pop_53537, *[attr_to_pop_53538, None_53539], **kwargs_53540)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Subscript (line 1653):
        
        # Assigning a Name to a Subscript (line 1653):
        
        # Assigning a Name to a Subscript (line 1653):
        # Getting the type of '_mpl_version' (line 1653)
        _mpl_version_53542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 35), '_mpl_version')
        # Getting the type of 'state' (line 1653)
        state_53543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 8), 'state')
        unicode_53544 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1653, 14), 'unicode', u'__mpl_version__')
        # Storing an element on a container (line 1653)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1653, 8), state_53543, (unicode_53544, _mpl_version_53542))
        
        
        
        # Call to getattr(...): (line 1657)
        # Processing the call arguments (line 1657)
        # Getting the type of 'self' (line 1657)
        self_53546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 19), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1657)
        canvas_53547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1657, 19), self_53546, 'canvas')
        unicode_53548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1657, 32), 'unicode', u'manager')
        # Getting the type of 'None' (line 1657)
        None_53549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 43), 'None', False)
        # Processing the call keyword arguments (line 1657)
        kwargs_53550 = {}
        # Getting the type of 'getattr' (line 1657)
        getattr_53545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 11), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1657)
        getattr_call_result_53551 = invoke(stypy.reporting.localization.Localization(__file__, 1657, 11), getattr_53545, *[canvas_53547, unicode_53548, None_53549], **kwargs_53550)
        
        # Getting the type of 'None' (line 1657)
        None_53552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 56), 'None')
        # Applying the binary operator 'isnot' (line 1657)
        result_is_not_53553 = python_operator(stypy.reporting.localization.Localization(__file__, 1657, 11), 'isnot', getattr_call_result_53551, None_53552)
        
        # Testing the type of an if condition (line 1657)
        if_condition_53554 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1657, 8), result_is_not_53553)
        # Assigning a type to the variable 'if_condition_53554' (line 1657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1657, 8), 'if_condition_53554', if_condition_53554)
        # SSA begins for if statement (line 1657)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1658):
        
        # Assigning a Attribute to a Name (line 1658):
        
        # Assigning a Attribute to a Name (line 1658):
        # Getting the type of 'self' (line 1658)
        self_53555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 22), 'self')
        # Obtaining the member 'canvas' of a type (line 1658)
        canvas_53556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1658, 22), self_53555, 'canvas')
        # Obtaining the member 'manager' of a type (line 1658)
        manager_53557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1658, 22), canvas_53556, 'manager')
        # Assigning a type to the variable 'manager' (line 1658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 12), 'manager', manager_53557)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1659, 12))
        
        # 'import matplotlib._pylab_helpers' statement (line 1659)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_53558 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1659, 12), 'matplotlib._pylab_helpers')

        if (type(import_53558) is not StypyTypeError):

            if (import_53558 != 'pyd_module'):
                __import__(import_53558)
                sys_modules_53559 = sys.modules[import_53558]
                import_module(stypy.reporting.localization.Localization(__file__, 1659, 12), 'matplotlib._pylab_helpers', sys_modules_53559.module_type_store, module_type_store)
            else:
                import matplotlib._pylab_helpers

                import_module(stypy.reporting.localization.Localization(__file__, 1659, 12), 'matplotlib._pylab_helpers', matplotlib._pylab_helpers, module_type_store)

        else:
            # Assigning a type to the variable 'matplotlib._pylab_helpers' (line 1659)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 12), 'matplotlib._pylab_helpers', import_53558)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        
        # Getting the type of 'manager' (line 1660)
        manager_53560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 15), 'manager')
        
        # Call to list(...): (line 1660)
        # Processing the call arguments (line 1660)
        
        # Call to itervalues(...): (line 1660)
        # Processing the call arguments (line 1660)
        # Getting the type of 'matplotlib' (line 1661)
        matplotlib_53564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 20), 'matplotlib', False)
        # Obtaining the member '_pylab_helpers' of a type (line 1661)
        _pylab_helpers_53565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1661, 20), matplotlib_53564, '_pylab_helpers')
        # Obtaining the member 'Gcf' of a type (line 1661)
        Gcf_53566 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1661, 20), _pylab_helpers_53565, 'Gcf')
        # Obtaining the member 'figs' of a type (line 1661)
        figs_53567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1661, 20), Gcf_53566, 'figs')
        # Processing the call keyword arguments (line 1660)
        kwargs_53568 = {}
        # Getting the type of 'six' (line 1660)
        six_53562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 31), 'six', False)
        # Obtaining the member 'itervalues' of a type (line 1660)
        itervalues_53563 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1660, 31), six_53562, 'itervalues')
        # Calling itervalues(args, kwargs) (line 1660)
        itervalues_call_result_53569 = invoke(stypy.reporting.localization.Localization(__file__, 1660, 31), itervalues_53563, *[figs_53567], **kwargs_53568)
        
        # Processing the call keyword arguments (line 1660)
        kwargs_53570 = {}
        # Getting the type of 'list' (line 1660)
        list_53561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 26), 'list', False)
        # Calling list(args, kwargs) (line 1660)
        list_call_result_53571 = invoke(stypy.reporting.localization.Localization(__file__, 1660, 26), list_53561, *[itervalues_call_result_53569], **kwargs_53570)
        
        # Applying the binary operator 'in' (line 1660)
        result_contains_53572 = python_operator(stypy.reporting.localization.Localization(__file__, 1660, 15), 'in', manager_53560, list_call_result_53571)
        
        # Testing the type of an if condition (line 1660)
        if_condition_53573 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1660, 12), result_contains_53572)
        # Assigning a type to the variable 'if_condition_53573' (line 1660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1660, 12), 'if_condition_53573', if_condition_53573)
        # SSA begins for if statement (line 1660)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Subscript (line 1662):
        
        # Assigning a Name to a Subscript (line 1662):
        
        # Assigning a Name to a Subscript (line 1662):
        # Getting the type of 'True' (line 1662)
        True_53574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 45), 'True')
        # Getting the type of 'state' (line 1662)
        state_53575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 16), 'state')
        unicode_53576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1662, 22), 'unicode', u'_restore_to_pylab')
        # Storing an element on a container (line 1662)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1662, 16), state_53575, (unicode_53576, True_53574))
        # SSA join for if statement (line 1660)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1657)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'state' (line 1664)
        state_53577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1664, 15), 'state')
        # Assigning a type to the variable 'stypy_return_type' (line 1664)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1664, 8), 'stypy_return_type', state_53577)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 1642)
        stypy_return_type_53578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1642, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53578)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_53578


    @norecursion
    def __setstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__setstate__'
        module_type_store = module_type_store.open_function_context('__setstate__', 1666, 4, False)
        # Assigning a type to the variable 'self' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.__setstate__.__dict__.__setitem__('stypy_localization', localization)
        Figure.__setstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.__setstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.__setstate__.__dict__.__setitem__('stypy_function_name', 'Figure.__setstate__')
        Figure.__setstate__.__dict__.__setitem__('stypy_param_names_list', ['state'])
        Figure.__setstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.__setstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.__setstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.__setstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.__setstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.__setstate__.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.__setstate__', ['state'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__setstate__', localization, ['state'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__setstate__(...)' code ##################

        
        # Assigning a Call to a Name (line 1667):
        
        # Assigning a Call to a Name (line 1667):
        
        # Assigning a Call to a Name (line 1667):
        
        # Call to pop(...): (line 1667)
        # Processing the call arguments (line 1667)
        unicode_53581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 28), 'unicode', u'__mpl_version__')
        # Processing the call keyword arguments (line 1667)
        kwargs_53582 = {}
        # Getting the type of 'state' (line 1667)
        state_53579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 18), 'state', False)
        # Obtaining the member 'pop' of a type (line 1667)
        pop_53580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1667, 18), state_53579, 'pop')
        # Calling pop(args, kwargs) (line 1667)
        pop_call_result_53583 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 18), pop_53580, *[unicode_53581], **kwargs_53582)
        
        # Assigning a type to the variable 'version' (line 1667)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1667, 8), 'version', pop_call_result_53583)
        
        # Assigning a Call to a Name (line 1668):
        
        # Assigning a Call to a Name (line 1668):
        
        # Assigning a Call to a Name (line 1668):
        
        # Call to pop(...): (line 1668)
        # Processing the call arguments (line 1668)
        unicode_53586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1668, 37), 'unicode', u'_restore_to_pylab')
        # Getting the type of 'False' (line 1668)
        False_53587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 58), 'False', False)
        # Processing the call keyword arguments (line 1668)
        kwargs_53588 = {}
        # Getting the type of 'state' (line 1668)
        state_53584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1668, 27), 'state', False)
        # Obtaining the member 'pop' of a type (line 1668)
        pop_53585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1668, 27), state_53584, 'pop')
        # Calling pop(args, kwargs) (line 1668)
        pop_call_result_53589 = invoke(stypy.reporting.localization.Localization(__file__, 1668, 27), pop_53585, *[unicode_53586, False_53587], **kwargs_53588)
        
        # Assigning a type to the variable 'restore_to_pylab' (line 1668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1668, 8), 'restore_to_pylab', pop_call_result_53589)
        
        
        # Getting the type of 'version' (line 1670)
        version_53590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 11), 'version')
        # Getting the type of '_mpl_version' (line 1670)
        _mpl_version_53591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1670, 22), '_mpl_version')
        # Applying the binary operator '!=' (line 1670)
        result_ne_53592 = python_operator(stypy.reporting.localization.Localization(__file__, 1670, 11), '!=', version_53590, _mpl_version_53591)
        
        # Testing the type of an if condition (line 1670)
        if_condition_53593 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1670, 8), result_ne_53592)
        # Assigning a type to the variable 'if_condition_53593' (line 1670)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1670, 8), 'if_condition_53593', if_condition_53593)
        # SSA begins for if statement (line 1670)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1671, 12))
        
        # 'import warnings' statement (line 1671)
        import warnings

        import_module(stypy.reporting.localization.Localization(__file__, 1671, 12), 'warnings', warnings, module_type_store)
        
        
        # Call to warn(...): (line 1672)
        # Processing the call arguments (line 1672)
        unicode_53596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1672, 26), 'unicode', u'This figure was saved with matplotlib version %s and is unlikely to function correctly.')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1674)
        tuple_53597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1674, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1674)
        # Adding element type (line 1674)
        # Getting the type of 'version' (line 1674)
        version_53598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1674, 27), 'version', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1674, 27), tuple_53597, version_53598)
        
        # Applying the binary operator '%' (line 1672)
        result_mod_53599 = python_operator(stypy.reporting.localization.Localization(__file__, 1672, 26), '%', unicode_53596, tuple_53597)
        
        # Processing the call keyword arguments (line 1672)
        kwargs_53600 = {}
        # Getting the type of 'warnings' (line 1672)
        warnings_53594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1672, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1672)
        warn_53595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1672, 12), warnings_53594, 'warn')
        # Calling warn(args, kwargs) (line 1672)
        warn_call_result_53601 = invoke(stypy.reporting.localization.Localization(__file__, 1672, 12), warn_53595, *[result_mod_53599], **kwargs_53600)
        
        # SSA join for if statement (line 1670)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1676):
        
        # Assigning a Name to a Attribute (line 1676):
        
        # Assigning a Name to a Attribute (line 1676):
        # Getting the type of 'state' (line 1676)
        state_53602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 24), 'state')
        # Getting the type of 'self' (line 1676)
        self_53603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1676, 8), 'self')
        # Setting the type of the member '__dict__' of a type (line 1676)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1676, 8), self_53603, '__dict__', state_53602)
        
        # Assigning a List to a Attribute (line 1679):
        
        # Assigning a List to a Attribute (line 1679):
        
        # Assigning a List to a Attribute (line 1679):
        
        # Obtaining an instance of the builtin type 'list' (line 1679)
        list_53604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1679, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1679)
        
        # Getting the type of 'self' (line 1679)
        self_53605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1679, 8), 'self')
        # Setting the type of the member '_axobservers' of a type (line 1679)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1679, 8), self_53605, '_axobservers', list_53604)
        
        # Assigning a Name to a Attribute (line 1680):
        
        # Assigning a Name to a Attribute (line 1680):
        
        # Assigning a Name to a Attribute (line 1680):
        # Getting the type of 'None' (line 1680)
        None_53606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 22), 'None')
        # Getting the type of 'self' (line 1680)
        self_53607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1680, 8), 'self')
        # Setting the type of the member 'canvas' of a type (line 1680)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1680, 8), self_53607, 'canvas', None_53606)
        
        # Getting the type of 'restore_to_pylab' (line 1682)
        restore_to_pylab_53608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1682, 11), 'restore_to_pylab')
        # Testing the type of an if condition (line 1682)
        if_condition_53609 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1682, 8), restore_to_pylab_53608)
        # Assigning a type to the variable 'if_condition_53609' (line 1682)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1682, 8), 'if_condition_53609', if_condition_53609)
        # SSA begins for if statement (line 1682)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1684, 12))
        
        # 'import matplotlib.pyplot' statement (line 1684)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_53610 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1684, 12), 'matplotlib.pyplot')

        if (type(import_53610) is not StypyTypeError):

            if (import_53610 != 'pyd_module'):
                __import__(import_53610)
                sys_modules_53611 = sys.modules[import_53610]
                import_module(stypy.reporting.localization.Localization(__file__, 1684, 12), 'plt', sys_modules_53611.module_type_store, module_type_store)
            else:
                import matplotlib.pyplot as plt

                import_module(stypy.reporting.localization.Localization(__file__, 1684, 12), 'plt', matplotlib.pyplot, module_type_store)

        else:
            # Assigning a type to the variable 'matplotlib.pyplot' (line 1684)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1684, 12), 'matplotlib.pyplot', import_53610)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1685, 12))
        
        # 'import matplotlib._pylab_helpers' statement (line 1685)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_53612 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1685, 12), 'matplotlib._pylab_helpers')

        if (type(import_53612) is not StypyTypeError):

            if (import_53612 != 'pyd_module'):
                __import__(import_53612)
                sys_modules_53613 = sys.modules[import_53612]
                import_module(stypy.reporting.localization.Localization(__file__, 1685, 12), 'pylab_helpers', sys_modules_53613.module_type_store, module_type_store)
            else:
                import matplotlib._pylab_helpers as pylab_helpers

                import_module(stypy.reporting.localization.Localization(__file__, 1685, 12), 'pylab_helpers', matplotlib._pylab_helpers, module_type_store)

        else:
            # Assigning a type to the variable 'matplotlib._pylab_helpers' (line 1685)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1685, 12), 'matplotlib._pylab_helpers', import_53612)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Assigning a Call to a Name (line 1686):
        
        # Assigning a Call to a Name (line 1686):
        
        # Assigning a Call to a Name (line 1686):
        
        # Call to get_fignums(...): (line 1686)
        # Processing the call keyword arguments (line 1686)
        kwargs_53616 = {}
        # Getting the type of 'plt' (line 1686)
        plt_53614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1686, 22), 'plt', False)
        # Obtaining the member 'get_fignums' of a type (line 1686)
        get_fignums_53615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1686, 22), plt_53614, 'get_fignums')
        # Calling get_fignums(args, kwargs) (line 1686)
        get_fignums_call_result_53617 = invoke(stypy.reporting.localization.Localization(__file__, 1686, 22), get_fignums_53615, *[], **kwargs_53616)
        
        # Assigning a type to the variable 'allnums' (line 1686)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1686, 12), 'allnums', get_fignums_call_result_53617)
        
        # Assigning a IfExp to a Name (line 1687):
        
        # Assigning a IfExp to a Name (line 1687):
        
        # Assigning a IfExp to a Name (line 1687):
        
        # Getting the type of 'allnums' (line 1687)
        allnums_53618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 38), 'allnums')
        # Testing the type of an if expression (line 1687)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1687, 18), allnums_53618)
        # SSA begins for if expression (line 1687)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Call to max(...): (line 1687)
        # Processing the call arguments (line 1687)
        # Getting the type of 'allnums' (line 1687)
        allnums_53620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 22), 'allnums', False)
        # Processing the call keyword arguments (line 1687)
        kwargs_53621 = {}
        # Getting the type of 'max' (line 1687)
        max_53619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1687, 18), 'max', False)
        # Calling max(args, kwargs) (line 1687)
        max_call_result_53622 = invoke(stypy.reporting.localization.Localization(__file__, 1687, 18), max_53619, *[allnums_53620], **kwargs_53621)
        
        int_53623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 33), 'int')
        # Applying the binary operator '+' (line 1687)
        result_add_53624 = python_operator(stypy.reporting.localization.Localization(__file__, 1687, 18), '+', max_call_result_53622, int_53623)
        
        # SSA branch for the else part of an if expression (line 1687)
        module_type_store.open_ssa_branch('if expression else')
        int_53625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1687, 51), 'int')
        # SSA join for if expression (line 1687)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_53626 = union_type.UnionType.add(result_add_53624, int_53625)
        
        # Assigning a type to the variable 'num' (line 1687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1687, 12), 'num', if_exp_53626)
        
        # Assigning a Call to a Name (line 1688):
        
        # Assigning a Call to a Name (line 1688):
        
        # Assigning a Call to a Name (line 1688):
        
        # Call to new_figure_manager_given_figure(...): (line 1688)
        # Processing the call arguments (line 1688)
        # Getting the type of 'num' (line 1688)
        num_53630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 67), 'num', False)
        # Getting the type of 'self' (line 1688)
        self_53631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 72), 'self', False)
        # Processing the call keyword arguments (line 1688)
        kwargs_53632 = {}
        # Getting the type of 'plt' (line 1688)
        plt_53627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 18), 'plt', False)
        # Obtaining the member '_backend_mod' of a type (line 1688)
        _backend_mod_53628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 18), plt_53627, '_backend_mod')
        # Obtaining the member 'new_figure_manager_given_figure' of a type (line 1688)
        new_figure_manager_given_figure_53629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1688, 18), _backend_mod_53628, 'new_figure_manager_given_figure')
        # Calling new_figure_manager_given_figure(args, kwargs) (line 1688)
        new_figure_manager_given_figure_call_result_53633 = invoke(stypy.reporting.localization.Localization(__file__, 1688, 18), new_figure_manager_given_figure_53629, *[num_53630, self_53631], **kwargs_53632)
        
        # Assigning a type to the variable 'mgr' (line 1688)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1688, 12), 'mgr', new_figure_manager_given_figure_call_result_53633)
        
        
        # Call to get_label(...): (line 1693)
        # Processing the call keyword arguments (line 1693)
        kwargs_53636 = {}
        # Getting the type of 'self' (line 1693)
        self_53634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1693, 15), 'self', False)
        # Obtaining the member 'get_label' of a type (line 1693)
        get_label_53635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1693, 15), self_53634, 'get_label')
        # Calling get_label(args, kwargs) (line 1693)
        get_label_call_result_53637 = invoke(stypy.reporting.localization.Localization(__file__, 1693, 15), get_label_53635, *[], **kwargs_53636)
        
        # Testing the type of an if condition (line 1693)
        if_condition_53638 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1693, 12), get_label_call_result_53637)
        # Assigning a type to the variable 'if_condition_53638' (line 1693)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1693, 12), 'if_condition_53638', if_condition_53638)
        # SSA begins for if statement (line 1693)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_window_title(...): (line 1694)
        # Processing the call arguments (line 1694)
        
        # Call to get_label(...): (line 1694)
        # Processing the call keyword arguments (line 1694)
        kwargs_53643 = {}
        # Getting the type of 'self' (line 1694)
        self_53641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 37), 'self', False)
        # Obtaining the member 'get_label' of a type (line 1694)
        get_label_53642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1694, 37), self_53641, 'get_label')
        # Calling get_label(args, kwargs) (line 1694)
        get_label_call_result_53644 = invoke(stypy.reporting.localization.Localization(__file__, 1694, 37), get_label_53642, *[], **kwargs_53643)
        
        # Processing the call keyword arguments (line 1694)
        kwargs_53645 = {}
        # Getting the type of 'mgr' (line 1694)
        mgr_53639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1694, 16), 'mgr', False)
        # Obtaining the member 'set_window_title' of a type (line 1694)
        set_window_title_53640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1694, 16), mgr_53639, 'set_window_title')
        # Calling set_window_title(args, kwargs) (line 1694)
        set_window_title_call_result_53646 = invoke(stypy.reporting.localization.Localization(__file__, 1694, 16), set_window_title_53640, *[get_label_call_result_53644], **kwargs_53645)
        
        # SSA join for if statement (line 1693)
        module_type_store = module_type_store.join_ssa_context()
        

        @norecursion
        def make_active(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'make_active'
            module_type_store = module_type_store.open_function_context('make_active', 1697, 12, False)
            
            # Passed parameters checking function
            make_active.stypy_localization = localization
            make_active.stypy_type_of_self = None
            make_active.stypy_type_store = module_type_store
            make_active.stypy_function_name = 'make_active'
            make_active.stypy_param_names_list = ['event']
            make_active.stypy_varargs_param_name = None
            make_active.stypy_kwargs_param_name = None
            make_active.stypy_call_defaults = defaults
            make_active.stypy_call_varargs = varargs
            make_active.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'make_active', ['event'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'make_active', localization, ['event'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'make_active(...)' code ##################

            
            # Call to set_active(...): (line 1698)
            # Processing the call arguments (line 1698)
            # Getting the type of 'mgr' (line 1698)
            mgr_53650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 45), 'mgr', False)
            # Processing the call keyword arguments (line 1698)
            kwargs_53651 = {}
            # Getting the type of 'pylab_helpers' (line 1698)
            pylab_helpers_53647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1698, 16), 'pylab_helpers', False)
            # Obtaining the member 'Gcf' of a type (line 1698)
            Gcf_53648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1698, 16), pylab_helpers_53647, 'Gcf')
            # Obtaining the member 'set_active' of a type (line 1698)
            set_active_53649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1698, 16), Gcf_53648, 'set_active')
            # Calling set_active(args, kwargs) (line 1698)
            set_active_call_result_53652 = invoke(stypy.reporting.localization.Localization(__file__, 1698, 16), set_active_53649, *[mgr_53650], **kwargs_53651)
            
            
            # ################# End of 'make_active(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'make_active' in the type store
            # Getting the type of 'stypy_return_type' (line 1697)
            stypy_return_type_53653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1697, 12), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_53653)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'make_active'
            return stypy_return_type_53653

        # Assigning a type to the variable 'make_active' (line 1697)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1697, 12), 'make_active', make_active)
        
        # Assigning a Call to a Attribute (line 1700):
        
        # Assigning a Call to a Attribute (line 1700):
        
        # Assigning a Call to a Attribute (line 1700):
        
        # Call to mpl_connect(...): (line 1700)
        # Processing the call arguments (line 1700)
        unicode_53657 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1700, 49), 'unicode', u'button_press_event')
        # Getting the type of 'make_active' (line 1701)
        make_active_53658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1701, 49), 'make_active', False)
        # Processing the call keyword arguments (line 1700)
        kwargs_53659 = {}
        # Getting the type of 'mgr' (line 1700)
        mgr_53654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 26), 'mgr', False)
        # Obtaining the member 'canvas' of a type (line 1700)
        canvas_53655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1700, 26), mgr_53654, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 1700)
        mpl_connect_53656 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1700, 26), canvas_53655, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 1700)
        mpl_connect_call_result_53660 = invoke(stypy.reporting.localization.Localization(__file__, 1700, 26), mpl_connect_53656, *[unicode_53657, make_active_53658], **kwargs_53659)
        
        # Getting the type of 'mgr' (line 1700)
        mgr_53661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1700, 12), 'mgr')
        # Setting the type of the member '_cidgcf' of a type (line 1700)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1700, 12), mgr_53661, '_cidgcf', mpl_connect_call_result_53660)
        
        # Call to set_active(...): (line 1703)
        # Processing the call arguments (line 1703)
        # Getting the type of 'mgr' (line 1703)
        mgr_53665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 41), 'mgr', False)
        # Processing the call keyword arguments (line 1703)
        kwargs_53666 = {}
        # Getting the type of 'pylab_helpers' (line 1703)
        pylab_helpers_53662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1703, 12), 'pylab_helpers', False)
        # Obtaining the member 'Gcf' of a type (line 1703)
        Gcf_53663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 12), pylab_helpers_53662, 'Gcf')
        # Obtaining the member 'set_active' of a type (line 1703)
        set_active_53664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1703, 12), Gcf_53663, 'set_active')
        # Calling set_active(args, kwargs) (line 1703)
        set_active_call_result_53667 = invoke(stypy.reporting.localization.Localization(__file__, 1703, 12), set_active_53664, *[mgr_53665], **kwargs_53666)
        
        
        # Assigning a Name to a Attribute (line 1704):
        
        # Assigning a Name to a Attribute (line 1704):
        
        # Assigning a Name to a Attribute (line 1704):
        # Getting the type of 'num' (line 1704)
        num_53668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 26), 'num')
        # Getting the type of 'self' (line 1704)
        self_53669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1704, 12), 'self')
        # Setting the type of the member 'number' of a type (line 1704)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1704, 12), self_53669, 'number', num_53668)
        
        # Call to draw_if_interactive(...): (line 1706)
        # Processing the call keyword arguments (line 1706)
        kwargs_53672 = {}
        # Getting the type of 'plt' (line 1706)
        plt_53670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1706, 12), 'plt', False)
        # Obtaining the member 'draw_if_interactive' of a type (line 1706)
        draw_if_interactive_53671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1706, 12), plt_53670, 'draw_if_interactive')
        # Calling draw_if_interactive(args, kwargs) (line 1706)
        draw_if_interactive_call_result_53673 = invoke(stypy.reporting.localization.Localization(__file__, 1706, 12), draw_if_interactive_53671, *[], **kwargs_53672)
        
        # SSA join for if statement (line 1682)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1707):
        
        # Assigning a Name to a Attribute (line 1707):
        
        # Assigning a Name to a Attribute (line 1707):
        # Getting the type of 'True' (line 1707)
        True_53674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 21), 'True')
        # Getting the type of 'self' (line 1707)
        self_53675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1707, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1707)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1707, 8), self_53675, 'stale', True_53674)
        
        # ################# End of '__setstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__setstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 1666)
        stypy_return_type_53676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53676)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__setstate__'
        return stypy_return_type_53676


    @norecursion
    def add_axobserver(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_axobserver'
        module_type_store = module_type_store.open_function_context('add_axobserver', 1709, 4, False)
        # Assigning a type to the variable 'self' (line 1710)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1710, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.add_axobserver.__dict__.__setitem__('stypy_localization', localization)
        Figure.add_axobserver.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.add_axobserver.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.add_axobserver.__dict__.__setitem__('stypy_function_name', 'Figure.add_axobserver')
        Figure.add_axobserver.__dict__.__setitem__('stypy_param_names_list', ['func'])
        Figure.add_axobserver.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.add_axobserver.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.add_axobserver.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.add_axobserver.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.add_axobserver.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.add_axobserver.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.add_axobserver', ['func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_axobserver', localization, ['func'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_axobserver(...)' code ##################

        unicode_53677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1710, 8), 'unicode', u'whenever the axes state change, ``func(self)`` will be called')
        
        # Call to append(...): (line 1711)
        # Processing the call arguments (line 1711)
        # Getting the type of 'func' (line 1711)
        func_53681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 33), 'func', False)
        # Processing the call keyword arguments (line 1711)
        kwargs_53682 = {}
        # Getting the type of 'self' (line 1711)
        self_53678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1711, 8), 'self', False)
        # Obtaining the member '_axobservers' of a type (line 1711)
        _axobservers_53679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1711, 8), self_53678, '_axobservers')
        # Obtaining the member 'append' of a type (line 1711)
        append_53680 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1711, 8), _axobservers_53679, 'append')
        # Calling append(args, kwargs) (line 1711)
        append_call_result_53683 = invoke(stypy.reporting.localization.Localization(__file__, 1711, 8), append_53680, *[func_53681], **kwargs_53682)
        
        
        # ################# End of 'add_axobserver(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_axobserver' in the type store
        # Getting the type of 'stypy_return_type' (line 1709)
        stypy_return_type_53684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1709, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53684)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_axobserver'
        return stypy_return_type_53684


    @norecursion
    def savefig(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'savefig'
        module_type_store = module_type_store.open_function_context('savefig', 1713, 4, False)
        # Assigning a type to the variable 'self' (line 1714)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1714, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.savefig.__dict__.__setitem__('stypy_localization', localization)
        Figure.savefig.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.savefig.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.savefig.__dict__.__setitem__('stypy_function_name', 'Figure.savefig')
        Figure.savefig.__dict__.__setitem__('stypy_param_names_list', ['fname'])
        Figure.savefig.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.savefig.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Figure.savefig.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.savefig.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.savefig.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.savefig.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.savefig', ['fname'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'savefig', localization, ['fname'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'savefig(...)' code ##################

        unicode_53685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1790, (-1)), 'unicode', u"\n        Save the current figure.\n\n        Call signature::\n\n          savefig(fname, dpi=None, facecolor='w', edgecolor='w',\n                  orientation='portrait', papertype=None, format=None,\n                  transparent=False, bbox_inches=None, pad_inches=0.1,\n                  frameon=None)\n\n        The output formats available depend on the backend being used.\n\n        Arguments:\n\n          *fname*:\n            A string containing a path to a filename, or a Python\n            file-like object, or possibly some backend-dependent object\n            such as :class:`~matplotlib.backends.backend_pdf.PdfPages`.\n\n            If *format* is *None* and *fname* is a string, the output\n            format is deduced from the extension of the filename. If\n            the filename has no extension, the value of the rc parameter\n            ``savefig.format`` is used.\n\n            If *fname* is not a string, remember to specify *format* to\n            ensure that the correct backend is used.\n\n        Keyword arguments:\n\n          *dpi*: [ *None* | ``scalar > 0`` | 'figure']\n            The resolution in dots per inch.  If *None* it will default to\n            the value ``savefig.dpi`` in the matplotlibrc file. If 'figure'\n            it will set the dpi to be the value of the figure.\n\n          *facecolor*, *edgecolor*:\n            the colors of the figure rectangle\n\n          *orientation*: [ 'landscape' | 'portrait' ]\n            not supported on all backends; currently only on postscript output\n\n          *papertype*:\n            One of 'letter', 'legal', 'executive', 'ledger', 'a0' through\n            'a10', 'b0' through 'b10'. Only supported for postscript\n            output.\n\n          *format*:\n            One of the file extensions supported by the active\n            backend.  Most backends support png, pdf, ps, eps and svg.\n\n          *transparent*:\n            If *True*, the axes patches will all be transparent; the\n            figure patch will also be transparent unless facecolor\n            and/or edgecolor are specified via kwargs.\n            This is useful, for example, for displaying\n            a plot on top of a colored background on a web page.  The\n            transparency of these patches will be restored to their\n            original values upon exit of this function.\n\n          *frameon*:\n            If *True*, the figure patch will be colored, if *False*, the\n            figure background will be transparent.  If not provided, the\n            rcParam 'savefig.frameon' will be used.\n\n          *bbox_inches*:\n            Bbox in inches. Only the given portion of the figure is\n            saved. If 'tight', try to figure out the tight bbox of\n            the figure.\n\n          *pad_inches*:\n            Amount of padding around the figure when bbox_inches is\n            'tight'.\n\n          *bbox_extra_artists*:\n            A list of extra artists that will be considered when the\n            tight bbox is calculated.\n\n        ")
        
        # Call to setdefault(...): (line 1791)
        # Processing the call arguments (line 1791)
        unicode_53688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1791, 26), 'unicode', u'dpi')
        
        # Obtaining the type of the subscript
        unicode_53689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1791, 42), 'unicode', u'savefig.dpi')
        # Getting the type of 'rcParams' (line 1791)
        rcParams_53690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 33), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1791)
        getitem___53691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1791, 33), rcParams_53690, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1791)
        subscript_call_result_53692 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 33), getitem___53691, unicode_53689)
        
        # Processing the call keyword arguments (line 1791)
        kwargs_53693 = {}
        # Getting the type of 'kwargs' (line 1791)
        kwargs_53686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1791, 8), 'kwargs', False)
        # Obtaining the member 'setdefault' of a type (line 1791)
        setdefault_53687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1791, 8), kwargs_53686, 'setdefault')
        # Calling setdefault(args, kwargs) (line 1791)
        setdefault_call_result_53694 = invoke(stypy.reporting.localization.Localization(__file__, 1791, 8), setdefault_53687, *[unicode_53688, subscript_call_result_53692], **kwargs_53693)
        
        
        # Assigning a Call to a Name (line 1792):
        
        # Assigning a Call to a Name (line 1792):
        
        # Assigning a Call to a Name (line 1792):
        
        # Call to pop(...): (line 1792)
        # Processing the call arguments (line 1792)
        unicode_53697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1792, 29), 'unicode', u'frameon')
        
        # Obtaining the type of the subscript
        unicode_53698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1792, 49), 'unicode', u'savefig.frameon')
        # Getting the type of 'rcParams' (line 1792)
        rcParams_53699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 40), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1792)
        getitem___53700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 40), rcParams_53699, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1792)
        subscript_call_result_53701 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 40), getitem___53700, unicode_53698)
        
        # Processing the call keyword arguments (line 1792)
        kwargs_53702 = {}
        # Getting the type of 'kwargs' (line 1792)
        kwargs_53695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1792, 18), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 1792)
        pop_53696 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1792, 18), kwargs_53695, 'pop')
        # Calling pop(args, kwargs) (line 1792)
        pop_call_result_53703 = invoke(stypy.reporting.localization.Localization(__file__, 1792, 18), pop_53696, *[unicode_53697, subscript_call_result_53701], **kwargs_53702)
        
        # Assigning a type to the variable 'frameon' (line 1792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1792, 8), 'frameon', pop_call_result_53703)
        
        # Assigning a Call to a Name (line 1793):
        
        # Assigning a Call to a Name (line 1793):
        
        # Assigning a Call to a Name (line 1793):
        
        # Call to pop(...): (line 1793)
        # Processing the call arguments (line 1793)
        unicode_53706 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1793, 33), 'unicode', u'transparent')
        
        # Obtaining the type of the subscript
        unicode_53707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1794, 42), 'unicode', u'savefig.transparent')
        # Getting the type of 'rcParams' (line 1794)
        rcParams_53708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1794, 33), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1794)
        getitem___53709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1794, 33), rcParams_53708, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1794)
        subscript_call_result_53710 = invoke(stypy.reporting.localization.Localization(__file__, 1794, 33), getitem___53709, unicode_53707)
        
        # Processing the call keyword arguments (line 1793)
        kwargs_53711 = {}
        # Getting the type of 'kwargs' (line 1793)
        kwargs_53704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1793, 22), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 1793)
        pop_53705 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1793, 22), kwargs_53704, 'pop')
        # Calling pop(args, kwargs) (line 1793)
        pop_call_result_53712 = invoke(stypy.reporting.localization.Localization(__file__, 1793, 22), pop_53705, *[unicode_53706, subscript_call_result_53710], **kwargs_53711)
        
        # Assigning a type to the variable 'transparent' (line 1793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1793, 8), 'transparent', pop_call_result_53712)
        
        # Getting the type of 'transparent' (line 1796)
        transparent_53713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1796, 11), 'transparent')
        # Testing the type of an if condition (line 1796)
        if_condition_53714 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1796, 8), transparent_53713)
        # Assigning a type to the variable 'if_condition_53714' (line 1796)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1796, 8), 'if_condition_53714', if_condition_53714)
        # SSA begins for if statement (line 1796)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to setdefault(...): (line 1797)
        # Processing the call arguments (line 1797)
        unicode_53717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1797, 30), 'unicode', u'facecolor')
        unicode_53718 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1797, 43), 'unicode', u'none')
        # Processing the call keyword arguments (line 1797)
        kwargs_53719 = {}
        # Getting the type of 'kwargs' (line 1797)
        kwargs_53715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1797, 12), 'kwargs', False)
        # Obtaining the member 'setdefault' of a type (line 1797)
        setdefault_53716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1797, 12), kwargs_53715, 'setdefault')
        # Calling setdefault(args, kwargs) (line 1797)
        setdefault_call_result_53720 = invoke(stypy.reporting.localization.Localization(__file__, 1797, 12), setdefault_53716, *[unicode_53717, unicode_53718], **kwargs_53719)
        
        
        # Call to setdefault(...): (line 1798)
        # Processing the call arguments (line 1798)
        unicode_53723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 30), 'unicode', u'edgecolor')
        unicode_53724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1798, 43), 'unicode', u'none')
        # Processing the call keyword arguments (line 1798)
        kwargs_53725 = {}
        # Getting the type of 'kwargs' (line 1798)
        kwargs_53721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1798, 12), 'kwargs', False)
        # Obtaining the member 'setdefault' of a type (line 1798)
        setdefault_53722 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1798, 12), kwargs_53721, 'setdefault')
        # Calling setdefault(args, kwargs) (line 1798)
        setdefault_call_result_53726 = invoke(stypy.reporting.localization.Localization(__file__, 1798, 12), setdefault_53722, *[unicode_53723, unicode_53724], **kwargs_53725)
        
        
        # Assigning a List to a Name (line 1799):
        
        # Assigning a List to a Name (line 1799):
        
        # Assigning a List to a Name (line 1799):
        
        # Obtaining an instance of the builtin type 'list' (line 1799)
        list_53727 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1799, 35), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1799)
        
        # Assigning a type to the variable 'original_axes_colors' (line 1799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1799, 12), 'original_axes_colors', list_53727)
        
        # Getting the type of 'self' (line 1800)
        self_53728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1800, 22), 'self')
        # Obtaining the member 'axes' of a type (line 1800)
        axes_53729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1800, 22), self_53728, 'axes')
        # Testing the type of a for loop iterable (line 1800)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1800, 12), axes_53729)
        # Getting the type of the for loop variable (line 1800)
        for_loop_var_53730 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1800, 12), axes_53729)
        # Assigning a type to the variable 'ax' (line 1800)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1800, 12), 'ax', for_loop_var_53730)
        # SSA begins for a for statement (line 1800)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Attribute to a Name (line 1801):
        
        # Assigning a Attribute to a Name (line 1801):
        
        # Assigning a Attribute to a Name (line 1801):
        # Getting the type of 'ax' (line 1801)
        ax_53731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1801, 24), 'ax')
        # Obtaining the member 'patch' of a type (line 1801)
        patch_53732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1801, 24), ax_53731, 'patch')
        # Assigning a type to the variable 'patch' (line 1801)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1801, 16), 'patch', patch_53732)
        
        # Call to append(...): (line 1802)
        # Processing the call arguments (line 1802)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1802)
        tuple_53735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, 45), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1802)
        # Adding element type (line 1802)
        
        # Call to get_facecolor(...): (line 1802)
        # Processing the call keyword arguments (line 1802)
        kwargs_53738 = {}
        # Getting the type of 'patch' (line 1802)
        patch_53736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 45), 'patch', False)
        # Obtaining the member 'get_facecolor' of a type (line 1802)
        get_facecolor_53737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 45), patch_53736, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 1802)
        get_facecolor_call_result_53739 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 45), get_facecolor_53737, *[], **kwargs_53738)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1802, 45), tuple_53735, get_facecolor_call_result_53739)
        # Adding element type (line 1802)
        
        # Call to get_edgecolor(...): (line 1803)
        # Processing the call keyword arguments (line 1803)
        kwargs_53742 = {}
        # Getting the type of 'patch' (line 1803)
        patch_53740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1803, 45), 'patch', False)
        # Obtaining the member 'get_edgecolor' of a type (line 1803)
        get_edgecolor_53741 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1803, 45), patch_53740, 'get_edgecolor')
        # Calling get_edgecolor(args, kwargs) (line 1803)
        get_edgecolor_call_result_53743 = invoke(stypy.reporting.localization.Localization(__file__, 1803, 45), get_edgecolor_53741, *[], **kwargs_53742)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1802, 45), tuple_53735, get_edgecolor_call_result_53743)
        
        # Processing the call keyword arguments (line 1802)
        kwargs_53744 = {}
        # Getting the type of 'original_axes_colors' (line 1802)
        original_axes_colors_53733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1802, 16), 'original_axes_colors', False)
        # Obtaining the member 'append' of a type (line 1802)
        append_53734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1802, 16), original_axes_colors_53733, 'append')
        # Calling append(args, kwargs) (line 1802)
        append_call_result_53745 = invoke(stypy.reporting.localization.Localization(__file__, 1802, 16), append_53734, *[tuple_53735], **kwargs_53744)
        
        
        # Call to set_facecolor(...): (line 1804)
        # Processing the call arguments (line 1804)
        unicode_53748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1804, 36), 'unicode', u'none')
        # Processing the call keyword arguments (line 1804)
        kwargs_53749 = {}
        # Getting the type of 'patch' (line 1804)
        patch_53746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1804, 16), 'patch', False)
        # Obtaining the member 'set_facecolor' of a type (line 1804)
        set_facecolor_53747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1804, 16), patch_53746, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 1804)
        set_facecolor_call_result_53750 = invoke(stypy.reporting.localization.Localization(__file__, 1804, 16), set_facecolor_53747, *[unicode_53748], **kwargs_53749)
        
        
        # Call to set_edgecolor(...): (line 1805)
        # Processing the call arguments (line 1805)
        unicode_53753 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1805, 36), 'unicode', u'none')
        # Processing the call keyword arguments (line 1805)
        kwargs_53754 = {}
        # Getting the type of 'patch' (line 1805)
        patch_53751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1805, 16), 'patch', False)
        # Obtaining the member 'set_edgecolor' of a type (line 1805)
        set_edgecolor_53752 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1805, 16), patch_53751, 'set_edgecolor')
        # Calling set_edgecolor(args, kwargs) (line 1805)
        set_edgecolor_call_result_53755 = invoke(stypy.reporting.localization.Localization(__file__, 1805, 16), set_edgecolor_53752, *[unicode_53753], **kwargs_53754)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1796)
        module_type_store.open_ssa_branch('else')
        
        # Call to setdefault(...): (line 1807)
        # Processing the call arguments (line 1807)
        unicode_53758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 30), 'unicode', u'facecolor')
        
        # Obtaining the type of the subscript
        unicode_53759 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1807, 52), 'unicode', u'savefig.facecolor')
        # Getting the type of 'rcParams' (line 1807)
        rcParams_53760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 43), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1807)
        getitem___53761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 43), rcParams_53760, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1807)
        subscript_call_result_53762 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 43), getitem___53761, unicode_53759)
        
        # Processing the call keyword arguments (line 1807)
        kwargs_53763 = {}
        # Getting the type of 'kwargs' (line 1807)
        kwargs_53756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1807, 12), 'kwargs', False)
        # Obtaining the member 'setdefault' of a type (line 1807)
        setdefault_53757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1807, 12), kwargs_53756, 'setdefault')
        # Calling setdefault(args, kwargs) (line 1807)
        setdefault_call_result_53764 = invoke(stypy.reporting.localization.Localization(__file__, 1807, 12), setdefault_53757, *[unicode_53758, subscript_call_result_53762], **kwargs_53763)
        
        
        # Call to setdefault(...): (line 1808)
        # Processing the call arguments (line 1808)
        unicode_53767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 30), 'unicode', u'edgecolor')
        
        # Obtaining the type of the subscript
        unicode_53768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1808, 52), 'unicode', u'savefig.edgecolor')
        # Getting the type of 'rcParams' (line 1808)
        rcParams_53769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 43), 'rcParams', False)
        # Obtaining the member '__getitem__' of a type (line 1808)
        getitem___53770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 43), rcParams_53769, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1808)
        subscript_call_result_53771 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 43), getitem___53770, unicode_53768)
        
        # Processing the call keyword arguments (line 1808)
        kwargs_53772 = {}
        # Getting the type of 'kwargs' (line 1808)
        kwargs_53765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1808, 12), 'kwargs', False)
        # Obtaining the member 'setdefault' of a type (line 1808)
        setdefault_53766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1808, 12), kwargs_53765, 'setdefault')
        # Calling setdefault(args, kwargs) (line 1808)
        setdefault_call_result_53773 = invoke(stypy.reporting.localization.Localization(__file__, 1808, 12), setdefault_53766, *[unicode_53767, subscript_call_result_53771], **kwargs_53772)
        
        # SSA join for if statement (line 1796)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'frameon' (line 1810)
        frameon_53774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1810, 11), 'frameon')
        # Testing the type of an if condition (line 1810)
        if_condition_53775 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1810, 8), frameon_53774)
        # Assigning a type to the variable 'if_condition_53775' (line 1810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1810, 8), 'if_condition_53775', if_condition_53775)
        # SSA begins for if statement (line 1810)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1811):
        
        # Assigning a Call to a Name (line 1811):
        
        # Assigning a Call to a Name (line 1811):
        
        # Call to get_frameon(...): (line 1811)
        # Processing the call keyword arguments (line 1811)
        kwargs_53778 = {}
        # Getting the type of 'self' (line 1811)
        self_53776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1811, 31), 'self', False)
        # Obtaining the member 'get_frameon' of a type (line 1811)
        get_frameon_53777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1811, 31), self_53776, 'get_frameon')
        # Calling get_frameon(args, kwargs) (line 1811)
        get_frameon_call_result_53779 = invoke(stypy.reporting.localization.Localization(__file__, 1811, 31), get_frameon_53777, *[], **kwargs_53778)
        
        # Assigning a type to the variable 'original_frameon' (line 1811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1811, 12), 'original_frameon', get_frameon_call_result_53779)
        
        # Call to set_frameon(...): (line 1812)
        # Processing the call arguments (line 1812)
        # Getting the type of 'frameon' (line 1812)
        frameon_53782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 29), 'frameon', False)
        # Processing the call keyword arguments (line 1812)
        kwargs_53783 = {}
        # Getting the type of 'self' (line 1812)
        self_53780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1812, 12), 'self', False)
        # Obtaining the member 'set_frameon' of a type (line 1812)
        set_frameon_53781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1812, 12), self_53780, 'set_frameon')
        # Calling set_frameon(args, kwargs) (line 1812)
        set_frameon_call_result_53784 = invoke(stypy.reporting.localization.Localization(__file__, 1812, 12), set_frameon_53781, *[frameon_53782], **kwargs_53783)
        
        # SSA join for if statement (line 1810)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to print_figure(...): (line 1814)
        # Processing the call arguments (line 1814)
        # Getting the type of 'fname' (line 1814)
        fname_53788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 33), 'fname', False)
        # Processing the call keyword arguments (line 1814)
        # Getting the type of 'kwargs' (line 1814)
        kwargs_53789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 42), 'kwargs', False)
        kwargs_53790 = {'kwargs_53789': kwargs_53789}
        # Getting the type of 'self' (line 1814)
        self_53785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 8), 'self', False)
        # Obtaining the member 'canvas' of a type (line 1814)
        canvas_53786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 8), self_53785, 'canvas')
        # Obtaining the member 'print_figure' of a type (line 1814)
        print_figure_53787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 8), canvas_53786, 'print_figure')
        # Calling print_figure(args, kwargs) (line 1814)
        print_figure_call_result_53791 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 8), print_figure_53787, *[fname_53788], **kwargs_53790)
        
        
        # Getting the type of 'frameon' (line 1816)
        frameon_53792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 11), 'frameon')
        # Testing the type of an if condition (line 1816)
        if_condition_53793 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1816, 8), frameon_53792)
        # Assigning a type to the variable 'if_condition_53793' (line 1816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 8), 'if_condition_53793', if_condition_53793)
        # SSA begins for if statement (line 1816)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_frameon(...): (line 1817)
        # Processing the call arguments (line 1817)
        # Getting the type of 'original_frameon' (line 1817)
        original_frameon_53796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 29), 'original_frameon', False)
        # Processing the call keyword arguments (line 1817)
        kwargs_53797 = {}
        # Getting the type of 'self' (line 1817)
        self_53794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 12), 'self', False)
        # Obtaining the member 'set_frameon' of a type (line 1817)
        set_frameon_53795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 12), self_53794, 'set_frameon')
        # Calling set_frameon(args, kwargs) (line 1817)
        set_frameon_call_result_53798 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 12), set_frameon_53795, *[original_frameon_53796], **kwargs_53797)
        
        # SSA join for if statement (line 1816)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'transparent' (line 1819)
        transparent_53799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1819, 11), 'transparent')
        # Testing the type of an if condition (line 1819)
        if_condition_53800 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1819, 8), transparent_53799)
        # Assigning a type to the variable 'if_condition_53800' (line 1819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1819, 8), 'if_condition_53800', if_condition_53800)
        # SSA begins for if statement (line 1819)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to zip(...): (line 1820)
        # Processing the call arguments (line 1820)
        # Getting the type of 'self' (line 1820)
        self_53802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 30), 'self', False)
        # Obtaining the member 'axes' of a type (line 1820)
        axes_53803 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1820, 30), self_53802, 'axes')
        # Getting the type of 'original_axes_colors' (line 1820)
        original_axes_colors_53804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 41), 'original_axes_colors', False)
        # Processing the call keyword arguments (line 1820)
        kwargs_53805 = {}
        # Getting the type of 'zip' (line 1820)
        zip_53801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 26), 'zip', False)
        # Calling zip(args, kwargs) (line 1820)
        zip_call_result_53806 = invoke(stypy.reporting.localization.Localization(__file__, 1820, 26), zip_53801, *[axes_53803, original_axes_colors_53804], **kwargs_53805)
        
        # Testing the type of a for loop iterable (line 1820)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1820, 12), zip_call_result_53806)
        # Getting the type of the for loop variable (line 1820)
        for_loop_var_53807 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1820, 12), zip_call_result_53806)
        # Assigning a type to the variable 'ax' (line 1820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 12), 'ax', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1820, 12), for_loop_var_53807))
        # Assigning a type to the variable 'cc' (line 1820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 12), 'cc', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1820, 12), for_loop_var_53807))
        # SSA begins for a for statement (line 1820)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_facecolor(...): (line 1821)
        # Processing the call arguments (line 1821)
        
        # Obtaining the type of the subscript
        int_53811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1821, 42), 'int')
        # Getting the type of 'cc' (line 1821)
        cc_53812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 39), 'cc', False)
        # Obtaining the member '__getitem__' of a type (line 1821)
        getitem___53813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1821, 39), cc_53812, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1821)
        subscript_call_result_53814 = invoke(stypy.reporting.localization.Localization(__file__, 1821, 39), getitem___53813, int_53811)
        
        # Processing the call keyword arguments (line 1821)
        kwargs_53815 = {}
        # Getting the type of 'ax' (line 1821)
        ax_53808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 16), 'ax', False)
        # Obtaining the member 'patch' of a type (line 1821)
        patch_53809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1821, 16), ax_53808, 'patch')
        # Obtaining the member 'set_facecolor' of a type (line 1821)
        set_facecolor_53810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1821, 16), patch_53809, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 1821)
        set_facecolor_call_result_53816 = invoke(stypy.reporting.localization.Localization(__file__, 1821, 16), set_facecolor_53810, *[subscript_call_result_53814], **kwargs_53815)
        
        
        # Call to set_edgecolor(...): (line 1822)
        # Processing the call arguments (line 1822)
        
        # Obtaining the type of the subscript
        int_53820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1822, 42), 'int')
        # Getting the type of 'cc' (line 1822)
        cc_53821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 39), 'cc', False)
        # Obtaining the member '__getitem__' of a type (line 1822)
        getitem___53822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 39), cc_53821, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1822)
        subscript_call_result_53823 = invoke(stypy.reporting.localization.Localization(__file__, 1822, 39), getitem___53822, int_53820)
        
        # Processing the call keyword arguments (line 1822)
        kwargs_53824 = {}
        # Getting the type of 'ax' (line 1822)
        ax_53817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1822, 16), 'ax', False)
        # Obtaining the member 'patch' of a type (line 1822)
        patch_53818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 16), ax_53817, 'patch')
        # Obtaining the member 'set_edgecolor' of a type (line 1822)
        set_edgecolor_53819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1822, 16), patch_53818, 'set_edgecolor')
        # Calling set_edgecolor(args, kwargs) (line 1822)
        set_edgecolor_call_result_53825 = invoke(stypy.reporting.localization.Localization(__file__, 1822, 16), set_edgecolor_53819, *[subscript_call_result_53823], **kwargs_53824)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1819)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'savefig(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'savefig' in the type store
        # Getting the type of 'stypy_return_type' (line 1713)
        stypy_return_type_53826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1713, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53826)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'savefig'
        return stypy_return_type_53826


    @norecursion
    def colorbar(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1825)
        None_53827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 37), 'None')
        # Getting the type of 'None' (line 1825)
        None_53828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 46), 'None')
        # Getting the type of 'True' (line 1825)
        True_53829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1825, 65), 'True')
        defaults = [None_53827, None_53828, True_53829]
        # Create a new context for function 'colorbar'
        module_type_store = module_type_store.open_function_context('colorbar', 1824, 4, False)
        # Assigning a type to the variable 'self' (line 1825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1825, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.colorbar.__dict__.__setitem__('stypy_localization', localization)
        Figure.colorbar.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.colorbar.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.colorbar.__dict__.__setitem__('stypy_function_name', 'Figure.colorbar')
        Figure.colorbar.__dict__.__setitem__('stypy_param_names_list', ['mappable', 'cax', 'ax', 'use_gridspec'])
        Figure.colorbar.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.colorbar.__dict__.__setitem__('stypy_kwargs_param_name', 'kw')
        Figure.colorbar.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.colorbar.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.colorbar.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.colorbar.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.colorbar', ['mappable', 'cax', 'ax', 'use_gridspec'], None, 'kw', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'colorbar', localization, ['mappable', 'cax', 'ax', 'use_gridspec'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'colorbar(...)' code ##################

        unicode_53830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1831, (-1)), 'unicode', u'\n        Create a colorbar for a ScalarMappable instance, *mappable*.\n\n        Documentation for the pylab thin wrapper:\n        %(colorbar_doc)s\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1832)
        # Getting the type of 'ax' (line 1832)
        ax_53831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 11), 'ax')
        # Getting the type of 'None' (line 1832)
        None_53832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1832, 17), 'None')
        
        (may_be_53833, more_types_in_union_53834) = may_be_none(ax_53831, None_53832)

        if may_be_53833:

            if more_types_in_union_53834:
                # Runtime conditional SSA (line 1832)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1833):
            
            # Assigning a Call to a Name (line 1833):
            
            # Assigning a Call to a Name (line 1833):
            
            # Call to gca(...): (line 1833)
            # Processing the call keyword arguments (line 1833)
            kwargs_53837 = {}
            # Getting the type of 'self' (line 1833)
            self_53835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1833, 17), 'self', False)
            # Obtaining the member 'gca' of a type (line 1833)
            gca_53836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1833, 17), self_53835, 'gca')
            # Calling gca(args, kwargs) (line 1833)
            gca_call_result_53838 = invoke(stypy.reporting.localization.Localization(__file__, 1833, 17), gca_53836, *[], **kwargs_53837)
            
            # Assigning a type to the variable 'ax' (line 1833)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1833, 12), 'ax', gca_call_result_53838)

            if more_types_in_union_53834:
                # SSA join for if statement (line 1832)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1836):
        
        # Assigning a Call to a Name (line 1836):
        
        # Assigning a Call to a Name (line 1836):
        
        # Call to gca(...): (line 1836)
        # Processing the call keyword arguments (line 1836)
        kwargs_53841 = {}
        # Getting the type of 'self' (line 1836)
        self_53839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1836, 21), 'self', False)
        # Obtaining the member 'gca' of a type (line 1836)
        gca_53840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1836, 21), self_53839, 'gca')
        # Calling gca(args, kwargs) (line 1836)
        gca_call_result_53842 = invoke(stypy.reporting.localization.Localization(__file__, 1836, 21), gca_53840, *[], **kwargs_53841)
        
        # Assigning a type to the variable 'current_ax' (line 1836)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1836, 8), 'current_ax', gca_call_result_53842)
        
        # Type idiom detected: calculating its left and rigth part (line 1838)
        # Getting the type of 'cax' (line 1838)
        cax_53843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 11), 'cax')
        # Getting the type of 'None' (line 1838)
        None_53844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1838, 18), 'None')
        
        (may_be_53845, more_types_in_union_53846) = may_be_none(cax_53843, None_53844)

        if may_be_53845:

            if more_types_in_union_53846:
                # Runtime conditional SSA (line 1838)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            # Evaluating a boolean operation
            # Getting the type of 'use_gridspec' (line 1839)
            use_gridspec_53847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 15), 'use_gridspec')
            
            # Call to isinstance(...): (line 1839)
            # Processing the call arguments (line 1839)
            # Getting the type of 'ax' (line 1839)
            ax_53849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 43), 'ax', False)
            # Getting the type of 'SubplotBase' (line 1839)
            SubplotBase_53850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 47), 'SubplotBase', False)
            # Processing the call keyword arguments (line 1839)
            kwargs_53851 = {}
            # Getting the type of 'isinstance' (line 1839)
            isinstance_53848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1839, 32), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1839)
            isinstance_call_result_53852 = invoke(stypy.reporting.localization.Localization(__file__, 1839, 32), isinstance_53848, *[ax_53849, SubplotBase_53850], **kwargs_53851)
            
            # Applying the binary operator 'and' (line 1839)
            result_and_keyword_53853 = python_operator(stypy.reporting.localization.Localization(__file__, 1839, 15), 'and', use_gridspec_53847, isinstance_call_result_53852)
            
            # Testing the type of an if condition (line 1839)
            if_condition_53854 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1839, 12), result_and_keyword_53853)
            # Assigning a type to the variable 'if_condition_53854' (line 1839)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1839, 12), 'if_condition_53854', if_condition_53854)
            # SSA begins for if statement (line 1839)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Tuple (line 1840):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to make_axes_gridspec(...): (line 1840)
            # Processing the call arguments (line 1840)
            # Getting the type of 'ax' (line 1840)
            ax_53857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 50), 'ax', False)
            # Processing the call keyword arguments (line 1840)
            # Getting the type of 'kw' (line 1840)
            kw_53858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 56), 'kw', False)
            kwargs_53859 = {'kw_53858': kw_53858}
            # Getting the type of 'cbar' (line 1840)
            cbar_53855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 26), 'cbar', False)
            # Obtaining the member 'make_axes_gridspec' of a type (line 1840)
            make_axes_gridspec_53856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1840, 26), cbar_53855, 'make_axes_gridspec')
            # Calling make_axes_gridspec(args, kwargs) (line 1840)
            make_axes_gridspec_call_result_53860 = invoke(stypy.reporting.localization.Localization(__file__, 1840, 26), make_axes_gridspec_53856, *[ax_53857], **kwargs_53859)
            
            # Assigning a type to the variable 'call_assignment_50793' (line 1840)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 16), 'call_assignment_50793', make_axes_gridspec_call_result_53860)
            
            # Assigning a Call to a Name (line 1840):
            
            # Assigning a Call to a Name (line 1840):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_53863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1840, 16), 'int')
            # Processing the call keyword arguments
            kwargs_53864 = {}
            # Getting the type of 'call_assignment_50793' (line 1840)
            call_assignment_50793_53861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 16), 'call_assignment_50793', False)
            # Obtaining the member '__getitem__' of a type (line 1840)
            getitem___53862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1840, 16), call_assignment_50793_53861, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_53865 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___53862, *[int_53863], **kwargs_53864)
            
            # Assigning a type to the variable 'call_assignment_50794' (line 1840)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 16), 'call_assignment_50794', getitem___call_result_53865)
            
            # Assigning a Name to a Name (line 1840):
            
            # Assigning a Name to a Name (line 1840):
            # Getting the type of 'call_assignment_50794' (line 1840)
            call_assignment_50794_53866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 16), 'call_assignment_50794')
            # Assigning a type to the variable 'cax' (line 1840)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 16), 'cax', call_assignment_50794_53866)
            
            # Assigning a Call to a Name (line 1840):
            
            # Assigning a Call to a Name (line 1840):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_53869 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1840, 16), 'int')
            # Processing the call keyword arguments
            kwargs_53870 = {}
            # Getting the type of 'call_assignment_50793' (line 1840)
            call_assignment_50793_53867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 16), 'call_assignment_50793', False)
            # Obtaining the member '__getitem__' of a type (line 1840)
            getitem___53868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1840, 16), call_assignment_50793_53867, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_53871 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___53868, *[int_53869], **kwargs_53870)
            
            # Assigning a type to the variable 'call_assignment_50795' (line 1840)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 16), 'call_assignment_50795', getitem___call_result_53871)
            
            # Assigning a Name to a Name (line 1840):
            
            # Assigning a Name to a Name (line 1840):
            # Getting the type of 'call_assignment_50795' (line 1840)
            call_assignment_50795_53872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1840, 16), 'call_assignment_50795')
            # Assigning a type to the variable 'kw' (line 1840)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1840, 21), 'kw', call_assignment_50795_53872)
            # SSA branch for the else part of an if statement (line 1839)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Tuple (line 1842):
            
            # Assigning a Call to a Name:
            
            # Assigning a Call to a Name:
            
            # Call to make_axes(...): (line 1842)
            # Processing the call arguments (line 1842)
            # Getting the type of 'ax' (line 1842)
            ax_53875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 41), 'ax', False)
            # Processing the call keyword arguments (line 1842)
            # Getting the type of 'kw' (line 1842)
            kw_53876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 47), 'kw', False)
            kwargs_53877 = {'kw_53876': kw_53876}
            # Getting the type of 'cbar' (line 1842)
            cbar_53873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 26), 'cbar', False)
            # Obtaining the member 'make_axes' of a type (line 1842)
            make_axes_53874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1842, 26), cbar_53873, 'make_axes')
            # Calling make_axes(args, kwargs) (line 1842)
            make_axes_call_result_53878 = invoke(stypy.reporting.localization.Localization(__file__, 1842, 26), make_axes_53874, *[ax_53875], **kwargs_53877)
            
            # Assigning a type to the variable 'call_assignment_50796' (line 1842)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 16), 'call_assignment_50796', make_axes_call_result_53878)
            
            # Assigning a Call to a Name (line 1842):
            
            # Assigning a Call to a Name (line 1842):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_53881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1842, 16), 'int')
            # Processing the call keyword arguments
            kwargs_53882 = {}
            # Getting the type of 'call_assignment_50796' (line 1842)
            call_assignment_50796_53879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 16), 'call_assignment_50796', False)
            # Obtaining the member '__getitem__' of a type (line 1842)
            getitem___53880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1842, 16), call_assignment_50796_53879, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_53883 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___53880, *[int_53881], **kwargs_53882)
            
            # Assigning a type to the variable 'call_assignment_50797' (line 1842)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 16), 'call_assignment_50797', getitem___call_result_53883)
            
            # Assigning a Name to a Name (line 1842):
            
            # Assigning a Name to a Name (line 1842):
            # Getting the type of 'call_assignment_50797' (line 1842)
            call_assignment_50797_53884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 16), 'call_assignment_50797')
            # Assigning a type to the variable 'cax' (line 1842)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 16), 'cax', call_assignment_50797_53884)
            
            # Assigning a Call to a Name (line 1842):
            
            # Assigning a Call to a Name (line 1842):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_53887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1842, 16), 'int')
            # Processing the call keyword arguments
            kwargs_53888 = {}
            # Getting the type of 'call_assignment_50796' (line 1842)
            call_assignment_50796_53885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 16), 'call_assignment_50796', False)
            # Obtaining the member '__getitem__' of a type (line 1842)
            getitem___53886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1842, 16), call_assignment_50796_53885, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_53889 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___53886, *[int_53887], **kwargs_53888)
            
            # Assigning a type to the variable 'call_assignment_50798' (line 1842)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 16), 'call_assignment_50798', getitem___call_result_53889)
            
            # Assigning a Name to a Name (line 1842):
            
            # Assigning a Name to a Name (line 1842):
            # Getting the type of 'call_assignment_50798' (line 1842)
            call_assignment_50798_53890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1842, 16), 'call_assignment_50798')
            # Assigning a type to the variable 'kw' (line 1842)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1842, 21), 'kw', call_assignment_50798_53890)
            # SSA join for if statement (line 1839)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_53846:
                # SSA join for if statement (line 1838)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 1843):
        
        # Assigning a Name to a Attribute (line 1843):
        
        # Assigning a Name to a Attribute (line 1843):
        # Getting the type of 'True' (line 1843)
        True_53891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 20), 'True')
        # Getting the type of 'cax' (line 1843)
        cax_53892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1843, 8), 'cax')
        # Setting the type of the member '_hold' of a type (line 1843)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1843, 8), cax_53892, '_hold', True_53891)
        
        # Assigning a Call to a Name (line 1844):
        
        # Assigning a Call to a Name (line 1844):
        
        # Assigning a Call to a Name (line 1844):
        
        # Call to colorbar_factory(...): (line 1844)
        # Processing the call arguments (line 1844)
        # Getting the type of 'cax' (line 1844)
        cax_53895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 35), 'cax', False)
        # Getting the type of 'mappable' (line 1844)
        mappable_53896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 40), 'mappable', False)
        # Processing the call keyword arguments (line 1844)
        # Getting the type of 'kw' (line 1844)
        kw_53897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 52), 'kw', False)
        kwargs_53898 = {'kw_53897': kw_53897}
        # Getting the type of 'cbar' (line 1844)
        cbar_53893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1844, 13), 'cbar', False)
        # Obtaining the member 'colorbar_factory' of a type (line 1844)
        colorbar_factory_53894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1844, 13), cbar_53893, 'colorbar_factory')
        # Calling colorbar_factory(args, kwargs) (line 1844)
        colorbar_factory_call_result_53899 = invoke(stypy.reporting.localization.Localization(__file__, 1844, 13), colorbar_factory_53894, *[cax_53895, mappable_53896], **kwargs_53898)
        
        # Assigning a type to the variable 'cb' (line 1844)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1844, 8), 'cb', colorbar_factory_call_result_53899)
        
        # Call to sca(...): (line 1846)
        # Processing the call arguments (line 1846)
        # Getting the type of 'current_ax' (line 1846)
        current_ax_53902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 17), 'current_ax', False)
        # Processing the call keyword arguments (line 1846)
        kwargs_53903 = {}
        # Getting the type of 'self' (line 1846)
        self_53900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1846, 8), 'self', False)
        # Obtaining the member 'sca' of a type (line 1846)
        sca_53901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1846, 8), self_53900, 'sca')
        # Calling sca(args, kwargs) (line 1846)
        sca_call_result_53904 = invoke(stypy.reporting.localization.Localization(__file__, 1846, 8), sca_53901, *[current_ax_53902], **kwargs_53903)
        
        
        # Assigning a Name to a Attribute (line 1847):
        
        # Assigning a Name to a Attribute (line 1847):
        
        # Assigning a Name to a Attribute (line 1847):
        # Getting the type of 'True' (line 1847)
        True_53905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 21), 'True')
        # Getting the type of 'self' (line 1847)
        self_53906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1847, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1847)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1847, 8), self_53906, 'stale', True_53905)
        # Getting the type of 'cb' (line 1848)
        cb_53907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1848, 15), 'cb')
        # Assigning a type to the variable 'stypy_return_type' (line 1848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1848, 8), 'stypy_return_type', cb_53907)
        
        # ################# End of 'colorbar(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'colorbar' in the type store
        # Getting the type of 'stypy_return_type' (line 1824)
        stypy_return_type_53908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1824, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53908)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'colorbar'
        return stypy_return_type_53908


    @norecursion
    def subplots_adjust(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'subplots_adjust'
        module_type_store = module_type_store.open_function_context('subplots_adjust', 1850, 4, False)
        # Assigning a type to the variable 'self' (line 1851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1851, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.subplots_adjust.__dict__.__setitem__('stypy_localization', localization)
        Figure.subplots_adjust.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.subplots_adjust.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.subplots_adjust.__dict__.__setitem__('stypy_function_name', 'Figure.subplots_adjust')
        Figure.subplots_adjust.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.subplots_adjust.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        Figure.subplots_adjust.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        Figure.subplots_adjust.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.subplots_adjust.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.subplots_adjust.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.subplots_adjust.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.subplots_adjust', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'subplots_adjust', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'subplots_adjust(...)' code ##################

        unicode_53909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1860, (-1)), 'unicode', u'\n        Call signature::\n\n          subplots_adjust(left=None, bottom=None, right=None, top=None,\n                              wspace=None, hspace=None)\n\n        Update the :class:`SubplotParams` with *kwargs* (defaulting to rc when\n        *None*) and update the subplot locations\n\n        ')
        
        # Call to update(...): (line 1861)
        # Getting the type of 'args' (line 1861)
        args_53913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 33), 'args', False)
        # Processing the call keyword arguments (line 1861)
        # Getting the type of 'kwargs' (line 1861)
        kwargs_53914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 41), 'kwargs', False)
        kwargs_53915 = {'kwargs_53914': kwargs_53914}
        # Getting the type of 'self' (line 1861)
        self_53910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1861, 8), 'self', False)
        # Obtaining the member 'subplotpars' of a type (line 1861)
        subplotpars_53911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1861, 8), self_53910, 'subplotpars')
        # Obtaining the member 'update' of a type (line 1861)
        update_53912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1861, 8), subplotpars_53911, 'update')
        # Calling update(args, kwargs) (line 1861)
        update_call_result_53916 = invoke(stypy.reporting.localization.Localization(__file__, 1861, 8), update_53912, *[args_53913], **kwargs_53915)
        
        
        # Getting the type of 'self' (line 1862)
        self_53917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1862, 18), 'self')
        # Obtaining the member 'axes' of a type (line 1862)
        axes_53918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1862, 18), self_53917, 'axes')
        # Testing the type of a for loop iterable (line 1862)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1862, 8), axes_53918)
        # Getting the type of the for loop variable (line 1862)
        for_loop_var_53919 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1862, 8), axes_53918)
        # Assigning a type to the variable 'ax' (line 1862)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1862, 8), 'ax', for_loop_var_53919)
        # SSA begins for a for statement (line 1862)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Call to isinstance(...): (line 1863)
        # Processing the call arguments (line 1863)
        # Getting the type of 'ax' (line 1863)
        ax_53921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 30), 'ax', False)
        # Getting the type of 'SubplotBase' (line 1863)
        SubplotBase_53922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 34), 'SubplotBase', False)
        # Processing the call keyword arguments (line 1863)
        kwargs_53923 = {}
        # Getting the type of 'isinstance' (line 1863)
        isinstance_53920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1863, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1863)
        isinstance_call_result_53924 = invoke(stypy.reporting.localization.Localization(__file__, 1863, 19), isinstance_53920, *[ax_53921, SubplotBase_53922], **kwargs_53923)
        
        # Applying the 'not' unary operator (line 1863)
        result_not__53925 = python_operator(stypy.reporting.localization.Localization(__file__, 1863, 15), 'not', isinstance_call_result_53924)
        
        # Testing the type of an if condition (line 1863)
        if_condition_53926 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1863, 12), result_not__53925)
        # Assigning a type to the variable 'if_condition_53926' (line 1863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1863, 12), 'if_condition_53926', if_condition_53926)
        # SSA begins for if statement (line 1863)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to isinstance(...): (line 1865)
        # Processing the call arguments (line 1865)
        # Getting the type of 'ax' (line 1865)
        ax_53928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 30), 'ax', False)
        # Obtaining the member '_sharex' of a type (line 1865)
        _sharex_53929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1865, 30), ax_53928, '_sharex')
        # Getting the type of 'SubplotBase' (line 1865)
        SubplotBase_53930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 42), 'SubplotBase', False)
        # Processing the call keyword arguments (line 1865)
        kwargs_53931 = {}
        # Getting the type of 'isinstance' (line 1865)
        isinstance_53927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1865, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1865)
        isinstance_call_result_53932 = invoke(stypy.reporting.localization.Localization(__file__, 1865, 19), isinstance_53927, *[_sharex_53929, SubplotBase_53930], **kwargs_53931)
        
        # Testing the type of an if condition (line 1865)
        if_condition_53933 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1865, 16), isinstance_call_result_53932)
        # Assigning a type to the variable 'if_condition_53933' (line 1865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1865, 16), 'if_condition_53933', if_condition_53933)
        # SSA begins for if statement (line 1865)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update_params(...): (line 1866)
        # Processing the call keyword arguments (line 1866)
        kwargs_53937 = {}
        # Getting the type of 'ax' (line 1866)
        ax_53934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1866, 20), 'ax', False)
        # Obtaining the member '_sharex' of a type (line 1866)
        _sharex_53935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 20), ax_53934, '_sharex')
        # Obtaining the member 'update_params' of a type (line 1866)
        update_params_53936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1866, 20), _sharex_53935, 'update_params')
        # Calling update_params(args, kwargs) (line 1866)
        update_params_call_result_53938 = invoke(stypy.reporting.localization.Localization(__file__, 1866, 20), update_params_53936, *[], **kwargs_53937)
        
        
        # Call to set_position(...): (line 1867)
        # Processing the call arguments (line 1867)
        # Getting the type of 'ax' (line 1867)
        ax_53941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 36), 'ax', False)
        # Obtaining the member '_sharex' of a type (line 1867)
        _sharex_53942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 36), ax_53941, '_sharex')
        # Obtaining the member 'figbox' of a type (line 1867)
        figbox_53943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 36), _sharex_53942, 'figbox')
        # Processing the call keyword arguments (line 1867)
        kwargs_53944 = {}
        # Getting the type of 'ax' (line 1867)
        ax_53939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1867, 20), 'ax', False)
        # Obtaining the member 'set_position' of a type (line 1867)
        set_position_53940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1867, 20), ax_53939, 'set_position')
        # Calling set_position(args, kwargs) (line 1867)
        set_position_call_result_53945 = invoke(stypy.reporting.localization.Localization(__file__, 1867, 20), set_position_53940, *[figbox_53943], **kwargs_53944)
        
        # SSA branch for the else part of an if statement (line 1865)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isinstance(...): (line 1868)
        # Processing the call arguments (line 1868)
        # Getting the type of 'ax' (line 1868)
        ax_53947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 32), 'ax', False)
        # Obtaining the member '_sharey' of a type (line 1868)
        _sharey_53948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1868, 32), ax_53947, '_sharey')
        # Getting the type of 'SubplotBase' (line 1868)
        SubplotBase_53949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 44), 'SubplotBase', False)
        # Processing the call keyword arguments (line 1868)
        kwargs_53950 = {}
        # Getting the type of 'isinstance' (line 1868)
        isinstance_53946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1868, 21), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1868)
        isinstance_call_result_53951 = invoke(stypy.reporting.localization.Localization(__file__, 1868, 21), isinstance_53946, *[_sharey_53948, SubplotBase_53949], **kwargs_53950)
        
        # Testing the type of an if condition (line 1868)
        if_condition_53952 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1868, 21), isinstance_call_result_53951)
        # Assigning a type to the variable 'if_condition_53952' (line 1868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1868, 21), 'if_condition_53952', if_condition_53952)
        # SSA begins for if statement (line 1868)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to update_params(...): (line 1869)
        # Processing the call keyword arguments (line 1869)
        kwargs_53956 = {}
        # Getting the type of 'ax' (line 1869)
        ax_53953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1869, 20), 'ax', False)
        # Obtaining the member '_sharey' of a type (line 1869)
        _sharey_53954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 20), ax_53953, '_sharey')
        # Obtaining the member 'update_params' of a type (line 1869)
        update_params_53955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1869, 20), _sharey_53954, 'update_params')
        # Calling update_params(args, kwargs) (line 1869)
        update_params_call_result_53957 = invoke(stypy.reporting.localization.Localization(__file__, 1869, 20), update_params_53955, *[], **kwargs_53956)
        
        
        # Call to set_position(...): (line 1870)
        # Processing the call arguments (line 1870)
        # Getting the type of 'ax' (line 1870)
        ax_53960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 36), 'ax', False)
        # Obtaining the member '_sharey' of a type (line 1870)
        _sharey_53961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 36), ax_53960, '_sharey')
        # Obtaining the member 'figbox' of a type (line 1870)
        figbox_53962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 36), _sharey_53961, 'figbox')
        # Processing the call keyword arguments (line 1870)
        kwargs_53963 = {}
        # Getting the type of 'ax' (line 1870)
        ax_53958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1870, 20), 'ax', False)
        # Obtaining the member 'set_position' of a type (line 1870)
        set_position_53959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1870, 20), ax_53958, 'set_position')
        # Calling set_position(args, kwargs) (line 1870)
        set_position_call_result_53964 = invoke(stypy.reporting.localization.Localization(__file__, 1870, 20), set_position_53959, *[figbox_53962], **kwargs_53963)
        
        # SSA join for if statement (line 1868)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1865)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1863)
        module_type_store.open_ssa_branch('else')
        
        # Call to update_params(...): (line 1872)
        # Processing the call keyword arguments (line 1872)
        kwargs_53967 = {}
        # Getting the type of 'ax' (line 1872)
        ax_53965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1872, 16), 'ax', False)
        # Obtaining the member 'update_params' of a type (line 1872)
        update_params_53966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1872, 16), ax_53965, 'update_params')
        # Calling update_params(args, kwargs) (line 1872)
        update_params_call_result_53968 = invoke(stypy.reporting.localization.Localization(__file__, 1872, 16), update_params_53966, *[], **kwargs_53967)
        
        
        # Call to set_position(...): (line 1873)
        # Processing the call arguments (line 1873)
        # Getting the type of 'ax' (line 1873)
        ax_53971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 32), 'ax', False)
        # Obtaining the member 'figbox' of a type (line 1873)
        figbox_53972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 32), ax_53971, 'figbox')
        # Processing the call keyword arguments (line 1873)
        kwargs_53973 = {}
        # Getting the type of 'ax' (line 1873)
        ax_53969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1873, 16), 'ax', False)
        # Obtaining the member 'set_position' of a type (line 1873)
        set_position_53970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1873, 16), ax_53969, 'set_position')
        # Calling set_position(args, kwargs) (line 1873)
        set_position_call_result_53974 = invoke(stypy.reporting.localization.Localization(__file__, 1873, 16), set_position_53970, *[figbox_53972], **kwargs_53973)
        
        # SSA join for if statement (line 1863)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1874):
        
        # Assigning a Name to a Attribute (line 1874):
        
        # Assigning a Name to a Attribute (line 1874):
        # Getting the type of 'True' (line 1874)
        True_53975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 21), 'True')
        # Getting the type of 'self' (line 1874)
        self_53976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1874, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1874)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1874, 8), self_53976, 'stale', True_53975)
        
        # ################# End of 'subplots_adjust(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'subplots_adjust' in the type store
        # Getting the type of 'stypy_return_type' (line 1850)
        stypy_return_type_53977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1850, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_53977)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'subplots_adjust'
        return stypy_return_type_53977


    @norecursion
    def ginput(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_53978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 23), 'int')
        int_53979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 34), 'int')
        # Getting the type of 'True' (line 1876)
        True_53980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 50), 'True')
        int_53981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1876, 66), 'int')
        int_53982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 25), 'int')
        int_53983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1877, 39), 'int')
        defaults = [int_53978, int_53979, True_53980, int_53981, int_53982, int_53983]
        # Create a new context for function 'ginput'
        module_type_store = module_type_store.open_function_context('ginput', 1876, 4, False)
        # Assigning a type to the variable 'self' (line 1877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1877, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.ginput.__dict__.__setitem__('stypy_localization', localization)
        Figure.ginput.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.ginput.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.ginput.__dict__.__setitem__('stypy_function_name', 'Figure.ginput')
        Figure.ginput.__dict__.__setitem__('stypy_param_names_list', ['n', 'timeout', 'show_clicks', 'mouse_add', 'mouse_pop', 'mouse_stop'])
        Figure.ginput.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.ginput.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.ginput.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.ginput.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.ginput.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.ginput.__dict__.__setitem__('stypy_declared_arg_number', 7)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.ginput', ['n', 'timeout', 'show_clicks', 'mouse_add', 'mouse_pop', 'mouse_stop'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'ginput', localization, ['n', 'timeout', 'show_clicks', 'mouse_add', 'mouse_pop', 'mouse_stop'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'ginput(...)' code ##################

        unicode_53984 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1919, (-1)), 'unicode', u'\n        Blocking call to interact with a figure.\n\n        Wait until the user clicks *n* times on the figure, and return the\n        coordinates of each click in a list.\n\n        The buttons used for the various actions (adding points, removing\n        points, terminating the inputs) can be overridden via the\n        arguments *mouse_add*, *mouse_pop* and *mouse_stop*, that give\n        the associated mouse button: 1 for left, 2 for middle, 3 for\n        right.\n\n        Parameters\n        ----------\n        n : int, optional, default: 1\n            Number of mouse clicks to accumulate. If negative, accumulate\n            clicks until the input is terminated manually.\n        timeout : scalar, optional, default: 30\n            Number of seconds to wait before timing out. If zero or negative\n            will never timeout.\n        show_clicks : bool, optional, default: False\n            If True, show a red cross at the location of each click.\n        mouse_add : int, one of (1, 2, 3), optional, default: 1 (left click)\n            Mouse button used to add points.\n        mouse_pop : int, one of (1, 2, 3), optional, default: 3 (right click)\n            Mouse button used to remove the most recently added point.\n        mouse_stop : int, one of (1, 2, 3), optional, default: 2 (middle click)\n            Mouse button used to stop input.\n\n        Returns\n        -------\n        points : list of tuples\n            A list of the clicked (x, y) coordinates.\n\n        Notes\n        -----\n        The keyboard can also be used to select points in case your mouse\n        does not have one or more of the buttons.  The delete and backspace\n        keys act like right clicking (i.e., remove last point), the enter key\n        terminates input and any other key (not already used by the window\n        manager) selects a point.\n        ')
        
        # Assigning a Call to a Name (line 1921):
        
        # Assigning a Call to a Name (line 1921):
        
        # Assigning a Call to a Name (line 1921):
        
        # Call to BlockingMouseInput(...): (line 1921)
        # Processing the call arguments (line 1921)
        # Getting the type of 'self' (line 1921)
        self_53986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 50), 'self', False)
        # Processing the call keyword arguments (line 1921)
        # Getting the type of 'mouse_add' (line 1922)
        mouse_add_53987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1922, 60), 'mouse_add', False)
        keyword_53988 = mouse_add_53987
        # Getting the type of 'mouse_pop' (line 1923)
        mouse_pop_53989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1923, 60), 'mouse_pop', False)
        keyword_53990 = mouse_pop_53989
        # Getting the type of 'mouse_stop' (line 1924)
        mouse_stop_53991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1924, 61), 'mouse_stop', False)
        keyword_53992 = mouse_stop_53991
        kwargs_53993 = {'mouse_pop': keyword_53990, 'mouse_add': keyword_53988, 'mouse_stop': keyword_53992}
        # Getting the type of 'BlockingMouseInput' (line 1921)
        BlockingMouseInput_53985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1921, 31), 'BlockingMouseInput', False)
        # Calling BlockingMouseInput(args, kwargs) (line 1921)
        BlockingMouseInput_call_result_53994 = invoke(stypy.reporting.localization.Localization(__file__, 1921, 31), BlockingMouseInput_53985, *[self_53986], **kwargs_53993)
        
        # Assigning a type to the variable 'blocking_mouse_input' (line 1921)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1921, 8), 'blocking_mouse_input', BlockingMouseInput_call_result_53994)
        
        # Call to blocking_mouse_input(...): (line 1925)
        # Processing the call keyword arguments (line 1925)
        # Getting the type of 'n' (line 1925)
        n_53996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 38), 'n', False)
        keyword_53997 = n_53996
        # Getting the type of 'timeout' (line 1925)
        timeout_53998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 49), 'timeout', False)
        keyword_53999 = timeout_53998
        # Getting the type of 'show_clicks' (line 1926)
        show_clicks_54000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1926, 48), 'show_clicks', False)
        keyword_54001 = show_clicks_54000
        kwargs_54002 = {'show_clicks': keyword_54001, 'timeout': keyword_53999, 'n': keyword_53997}
        # Getting the type of 'blocking_mouse_input' (line 1925)
        blocking_mouse_input_53995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1925, 15), 'blocking_mouse_input', False)
        # Calling blocking_mouse_input(args, kwargs) (line 1925)
        blocking_mouse_input_call_result_54003 = invoke(stypy.reporting.localization.Localization(__file__, 1925, 15), blocking_mouse_input_53995, *[], **kwargs_54002)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1925)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1925, 8), 'stypy_return_type', blocking_mouse_input_call_result_54003)
        
        # ################# End of 'ginput(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'ginput' in the type store
        # Getting the type of 'stypy_return_type' (line 1876)
        stypy_return_type_54004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_54004)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'ginput'
        return stypy_return_type_54004


    @norecursion
    def waitforbuttonpress(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_54005 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1928, 41), 'int')
        defaults = [int_54005]
        # Create a new context for function 'waitforbuttonpress'
        module_type_store = module_type_store.open_function_context('waitforbuttonpress', 1928, 4, False)
        # Assigning a type to the variable 'self' (line 1929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1929, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.waitforbuttonpress.__dict__.__setitem__('stypy_localization', localization)
        Figure.waitforbuttonpress.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.waitforbuttonpress.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.waitforbuttonpress.__dict__.__setitem__('stypy_function_name', 'Figure.waitforbuttonpress')
        Figure.waitforbuttonpress.__dict__.__setitem__('stypy_param_names_list', ['timeout'])
        Figure.waitforbuttonpress.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.waitforbuttonpress.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.waitforbuttonpress.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.waitforbuttonpress.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.waitforbuttonpress.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.waitforbuttonpress.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.waitforbuttonpress', ['timeout'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'waitforbuttonpress', localization, ['timeout'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'waitforbuttonpress(...)' code ##################

        unicode_54006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1937, (-1)), 'unicode', u'\n        Blocking call to interact with the figure.\n\n        This will return True is a key was pressed, False if a mouse\n        button was pressed and None if *timeout* was reached without\n        either being pressed.\n\n        If *timeout* is negative, does not timeout.\n        ')
        
        # Assigning a Call to a Name (line 1939):
        
        # Assigning a Call to a Name (line 1939):
        
        # Assigning a Call to a Name (line 1939):
        
        # Call to BlockingKeyMouseInput(...): (line 1939)
        # Processing the call arguments (line 1939)
        # Getting the type of 'self' (line 1939)
        self_54008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 47), 'self', False)
        # Processing the call keyword arguments (line 1939)
        kwargs_54009 = {}
        # Getting the type of 'BlockingKeyMouseInput' (line 1939)
        BlockingKeyMouseInput_54007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1939, 25), 'BlockingKeyMouseInput', False)
        # Calling BlockingKeyMouseInput(args, kwargs) (line 1939)
        BlockingKeyMouseInput_call_result_54010 = invoke(stypy.reporting.localization.Localization(__file__, 1939, 25), BlockingKeyMouseInput_54007, *[self_54008], **kwargs_54009)
        
        # Assigning a type to the variable 'blocking_input' (line 1939)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1939, 8), 'blocking_input', BlockingKeyMouseInput_call_result_54010)
        
        # Call to blocking_input(...): (line 1940)
        # Processing the call keyword arguments (line 1940)
        # Getting the type of 'timeout' (line 1940)
        timeout_54012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 38), 'timeout', False)
        keyword_54013 = timeout_54012
        kwargs_54014 = {'timeout': keyword_54013}
        # Getting the type of 'blocking_input' (line 1940)
        blocking_input_54011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1940, 15), 'blocking_input', False)
        # Calling blocking_input(args, kwargs) (line 1940)
        blocking_input_call_result_54015 = invoke(stypy.reporting.localization.Localization(__file__, 1940, 15), blocking_input_54011, *[], **kwargs_54014)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1940, 8), 'stypy_return_type', blocking_input_call_result_54015)
        
        # ################# End of 'waitforbuttonpress(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'waitforbuttonpress' in the type store
        # Getting the type of 'stypy_return_type' (line 1928)
        stypy_return_type_54016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1928, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_54016)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'waitforbuttonpress'
        return stypy_return_type_54016


    @norecursion
    def get_default_bbox_extra_artists(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_default_bbox_extra_artists'
        module_type_store = module_type_store.open_function_context('get_default_bbox_extra_artists', 1942, 4, False)
        # Assigning a type to the variable 'self' (line 1943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1943, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_localization', localization)
        Figure.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_function_name', 'Figure.get_default_bbox_extra_artists')
        Figure.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_param_names_list', [])
        Figure.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.get_default_bbox_extra_artists.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.get_default_bbox_extra_artists', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_default_bbox_extra_artists', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_default_bbox_extra_artists(...)' code ##################

        
        # Assigning a ListComp to a Name (line 1943):
        
        # Assigning a ListComp to a Name (line 1943):
        
        # Assigning a ListComp to a Name (line 1943):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to get_children(...): (line 1943)
        # Processing the call keyword arguments (line 1943)
        kwargs_54024 = {}
        # Getting the type of 'self' (line 1943)
        self_54022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 45), 'self', False)
        # Obtaining the member 'get_children' of a type (line 1943)
        get_children_54023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1943, 45), self_54022, 'get_children')
        # Calling get_children(args, kwargs) (line 1943)
        get_children_call_result_54025 = invoke(stypy.reporting.localization.Localization(__file__, 1943, 45), get_children_54023, *[], **kwargs_54024)
        
        comprehension_54026 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1943, 24), get_children_call_result_54025)
        # Assigning a type to the variable 'artist' (line 1943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1943, 24), 'artist', comprehension_54026)
        
        # Call to get_visible(...): (line 1944)
        # Processing the call keyword arguments (line 1944)
        kwargs_54020 = {}
        # Getting the type of 'artist' (line 1944)
        artist_54018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1944, 27), 'artist', False)
        # Obtaining the member 'get_visible' of a type (line 1944)
        get_visible_54019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1944, 27), artist_54018, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1944)
        get_visible_call_result_54021 = invoke(stypy.reporting.localization.Localization(__file__, 1944, 27), get_visible_54019, *[], **kwargs_54020)
        
        # Getting the type of 'artist' (line 1943)
        artist_54017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1943, 24), 'artist')
        list_54027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1943, 24), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1943, 24), list_54027, artist_54017)
        # Assigning a type to the variable 'bbox_artists' (line 1943)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1943, 8), 'bbox_artists', list_54027)
        
        # Getting the type of 'self' (line 1945)
        self_54028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1945, 18), 'self')
        # Obtaining the member 'axes' of a type (line 1945)
        axes_54029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1945, 18), self_54028, 'axes')
        # Testing the type of a for loop iterable (line 1945)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1945, 8), axes_54029)
        # Getting the type of the for loop variable (line 1945)
        for_loop_var_54030 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1945, 8), axes_54029)
        # Assigning a type to the variable 'ax' (line 1945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1945, 8), 'ax', for_loop_var_54030)
        # SSA begins for a for statement (line 1945)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to get_visible(...): (line 1946)
        # Processing the call keyword arguments (line 1946)
        kwargs_54033 = {}
        # Getting the type of 'ax' (line 1946)
        ax_54031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1946, 15), 'ax', False)
        # Obtaining the member 'get_visible' of a type (line 1946)
        get_visible_54032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1946, 15), ax_54031, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1946)
        get_visible_call_result_54034 = invoke(stypy.reporting.localization.Localization(__file__, 1946, 15), get_visible_54032, *[], **kwargs_54033)
        
        # Testing the type of an if condition (line 1946)
        if_condition_54035 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1946, 12), get_visible_call_result_54034)
        # Assigning a type to the variable 'if_condition_54035' (line 1946)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1946, 12), 'if_condition_54035', if_condition_54035)
        # SSA begins for if statement (line 1946)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to extend(...): (line 1947)
        # Processing the call arguments (line 1947)
        
        # Call to get_default_bbox_extra_artists(...): (line 1947)
        # Processing the call keyword arguments (line 1947)
        kwargs_54040 = {}
        # Getting the type of 'ax' (line 1947)
        ax_54038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 36), 'ax', False)
        # Obtaining the member 'get_default_bbox_extra_artists' of a type (line 1947)
        get_default_bbox_extra_artists_54039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1947, 36), ax_54038, 'get_default_bbox_extra_artists')
        # Calling get_default_bbox_extra_artists(args, kwargs) (line 1947)
        get_default_bbox_extra_artists_call_result_54041 = invoke(stypy.reporting.localization.Localization(__file__, 1947, 36), get_default_bbox_extra_artists_54039, *[], **kwargs_54040)
        
        # Processing the call keyword arguments (line 1947)
        kwargs_54042 = {}
        # Getting the type of 'bbox_artists' (line 1947)
        bbox_artists_54036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1947, 16), 'bbox_artists', False)
        # Obtaining the member 'extend' of a type (line 1947)
        extend_54037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1947, 16), bbox_artists_54036, 'extend')
        # Calling extend(args, kwargs) (line 1947)
        extend_call_result_54043 = invoke(stypy.reporting.localization.Localization(__file__, 1947, 16), extend_54037, *[get_default_bbox_extra_artists_call_result_54041], **kwargs_54042)
        
        # SSA join for if statement (line 1946)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to remove(...): (line 1949)
        # Processing the call arguments (line 1949)
        # Getting the type of 'self' (line 1949)
        self_54046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 28), 'self', False)
        # Obtaining the member 'patch' of a type (line 1949)
        patch_54047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1949, 28), self_54046, 'patch')
        # Processing the call keyword arguments (line 1949)
        kwargs_54048 = {}
        # Getting the type of 'bbox_artists' (line 1949)
        bbox_artists_54044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1949, 8), 'bbox_artists', False)
        # Obtaining the member 'remove' of a type (line 1949)
        remove_54045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1949, 8), bbox_artists_54044, 'remove')
        # Calling remove(args, kwargs) (line 1949)
        remove_call_result_54049 = invoke(stypy.reporting.localization.Localization(__file__, 1949, 8), remove_54045, *[patch_54047], **kwargs_54048)
        
        # Getting the type of 'bbox_artists' (line 1950)
        bbox_artists_54050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1950, 15), 'bbox_artists')
        # Assigning a type to the variable 'stypy_return_type' (line 1950)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1950, 8), 'stypy_return_type', bbox_artists_54050)
        
        # ################# End of 'get_default_bbox_extra_artists(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_default_bbox_extra_artists' in the type store
        # Getting the type of 'stypy_return_type' (line 1942)
        stypy_return_type_54051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1942, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_54051)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_default_bbox_extra_artists'
        return stypy_return_type_54051


    @norecursion
    def get_tightbbox(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_tightbbox'
        module_type_store = module_type_store.open_function_context('get_tightbbox', 1952, 4, False)
        # Assigning a type to the variable 'self' (line 1953)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1953, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.get_tightbbox.__dict__.__setitem__('stypy_localization', localization)
        Figure.get_tightbbox.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.get_tightbbox.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.get_tightbbox.__dict__.__setitem__('stypy_function_name', 'Figure.get_tightbbox')
        Figure.get_tightbbox.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        Figure.get_tightbbox.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.get_tightbbox.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.get_tightbbox.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.get_tightbbox.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.get_tightbbox.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.get_tightbbox.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.get_tightbbox', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_tightbbox', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_tightbbox(...)' code ##################

        unicode_54052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1958, (-1)), 'unicode', u'\n        Return a (tight) bounding box of the figure in inches.\n\n        It only accounts axes title, axis labels, and axis\n        ticklabels. Needs improvement.\n        ')
        
        # Assigning a List to a Name (line 1960):
        
        # Assigning a List to a Name (line 1960):
        
        # Assigning a List to a Name (line 1960):
        
        # Obtaining an instance of the builtin type 'list' (line 1960)
        list_54053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1960, 13), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1960)
        
        # Assigning a type to the variable 'bb' (line 1960)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1960, 8), 'bb', list_54053)
        
        # Getting the type of 'self' (line 1961)
        self_54054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1961, 18), 'self')
        # Obtaining the member 'axes' of a type (line 1961)
        axes_54055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1961, 18), self_54054, 'axes')
        # Testing the type of a for loop iterable (line 1961)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1961, 8), axes_54055)
        # Getting the type of the for loop variable (line 1961)
        for_loop_var_54056 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1961, 8), axes_54055)
        # Assigning a type to the variable 'ax' (line 1961)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1961, 8), 'ax', for_loop_var_54056)
        # SSA begins for a for statement (line 1961)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Call to get_visible(...): (line 1962)
        # Processing the call keyword arguments (line 1962)
        kwargs_54059 = {}
        # Getting the type of 'ax' (line 1962)
        ax_54057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1962, 15), 'ax', False)
        # Obtaining the member 'get_visible' of a type (line 1962)
        get_visible_54058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1962, 15), ax_54057, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1962)
        get_visible_call_result_54060 = invoke(stypy.reporting.localization.Localization(__file__, 1962, 15), get_visible_54058, *[], **kwargs_54059)
        
        # Testing the type of an if condition (line 1962)
        if_condition_54061 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1962, 12), get_visible_call_result_54060)
        # Assigning a type to the variable 'if_condition_54061' (line 1962)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1962, 12), 'if_condition_54061', if_condition_54061)
        # SSA begins for if statement (line 1962)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1963)
        # Processing the call arguments (line 1963)
        
        # Call to get_tightbbox(...): (line 1963)
        # Processing the call arguments (line 1963)
        # Getting the type of 'renderer' (line 1963)
        renderer_54066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 43), 'renderer', False)
        # Processing the call keyword arguments (line 1963)
        kwargs_54067 = {}
        # Getting the type of 'ax' (line 1963)
        ax_54064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 26), 'ax', False)
        # Obtaining the member 'get_tightbbox' of a type (line 1963)
        get_tightbbox_54065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 26), ax_54064, 'get_tightbbox')
        # Calling get_tightbbox(args, kwargs) (line 1963)
        get_tightbbox_call_result_54068 = invoke(stypy.reporting.localization.Localization(__file__, 1963, 26), get_tightbbox_54065, *[renderer_54066], **kwargs_54067)
        
        # Processing the call keyword arguments (line 1963)
        kwargs_54069 = {}
        # Getting the type of 'bb' (line 1963)
        bb_54062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1963, 16), 'bb', False)
        # Obtaining the member 'append' of a type (line 1963)
        append_54063 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1963, 16), bb_54062, 'append')
        # Calling append(args, kwargs) (line 1963)
        append_call_result_54070 = invoke(stypy.reporting.localization.Localization(__file__, 1963, 16), append_54063, *[get_tightbbox_call_result_54068], **kwargs_54069)
        
        # SSA join for if statement (line 1962)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 1965)
        # Processing the call arguments (line 1965)
        # Getting the type of 'bb' (line 1965)
        bb_54072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 15), 'bb', False)
        # Processing the call keyword arguments (line 1965)
        kwargs_54073 = {}
        # Getting the type of 'len' (line 1965)
        len_54071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1965, 11), 'len', False)
        # Calling len(args, kwargs) (line 1965)
        len_call_result_54074 = invoke(stypy.reporting.localization.Localization(__file__, 1965, 11), len_54071, *[bb_54072], **kwargs_54073)
        
        int_54075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1965, 22), 'int')
        # Applying the binary operator '==' (line 1965)
        result_eq_54076 = python_operator(stypy.reporting.localization.Localization(__file__, 1965, 11), '==', len_call_result_54074, int_54075)
        
        # Testing the type of an if condition (line 1965)
        if_condition_54077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1965, 8), result_eq_54076)
        # Assigning a type to the variable 'if_condition_54077' (line 1965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1965, 8), 'if_condition_54077', if_condition_54077)
        # SSA begins for if statement (line 1965)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 1966)
        self_54078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1966, 19), 'self')
        # Obtaining the member 'bbox_inches' of a type (line 1966)
        bbox_inches_54079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1966, 19), self_54078, 'bbox_inches')
        # Assigning a type to the variable 'stypy_return_type' (line 1966)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1966, 12), 'stypy_return_type', bbox_inches_54079)
        # SSA join for if statement (line 1965)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1968):
        
        # Assigning a Call to a Name (line 1968):
        
        # Assigning a Call to a Name (line 1968):
        
        # Call to union(...): (line 1968)
        # Processing the call arguments (line 1968)
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'bb' (line 1968)
        bb_54092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 39), 'bb', False)
        comprehension_54093 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1968, 28), bb_54092)
        # Assigning a type to the variable 'b' (line 1968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1968, 28), 'b', comprehension_54093)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'b' (line 1968)
        b_54083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 45), 'b', False)
        # Obtaining the member 'width' of a type (line 1968)
        width_54084 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1968, 45), b_54083, 'width')
        int_54085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1968, 56), 'int')
        # Applying the binary operator '!=' (line 1968)
        result_ne_54086 = python_operator(stypy.reporting.localization.Localization(__file__, 1968, 45), '!=', width_54084, int_54085)
        
        
        # Getting the type of 'b' (line 1968)
        b_54087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 61), 'b', False)
        # Obtaining the member 'height' of a type (line 1968)
        height_54088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1968, 61), b_54087, 'height')
        int_54089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1968, 73), 'int')
        # Applying the binary operator '!=' (line 1968)
        result_ne_54090 = python_operator(stypy.reporting.localization.Localization(__file__, 1968, 61), '!=', height_54088, int_54089)
        
        # Applying the binary operator 'or' (line 1968)
        result_or_keyword_54091 = python_operator(stypy.reporting.localization.Localization(__file__, 1968, 45), 'or', result_ne_54086, result_ne_54090)
        
        # Getting the type of 'b' (line 1968)
        b_54082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 28), 'b', False)
        list_54094 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1968, 28), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1968, 28), list_54094, b_54082)
        # Processing the call keyword arguments (line 1968)
        kwargs_54095 = {}
        # Getting the type of 'Bbox' (line 1968)
        Bbox_54080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1968, 16), 'Bbox', False)
        # Obtaining the member 'union' of a type (line 1968)
        union_54081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1968, 16), Bbox_54080, 'union')
        # Calling union(args, kwargs) (line 1968)
        union_call_result_54096 = invoke(stypy.reporting.localization.Localization(__file__, 1968, 16), union_54081, *[list_54094], **kwargs_54095)
        
        # Assigning a type to the variable '_bbox' (line 1968)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1968, 8), '_bbox', union_call_result_54096)
        
        # Assigning a Call to a Name (line 1970):
        
        # Assigning a Call to a Name (line 1970):
        
        # Assigning a Call to a Name (line 1970):
        
        # Call to TransformedBbox(...): (line 1970)
        # Processing the call arguments (line 1970)
        # Getting the type of '_bbox' (line 1970)
        _bbox_54098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 38), '_bbox', False)
        
        # Call to scale(...): (line 1971)
        # Processing the call arguments (line 1971)
        float_54103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1971, 55), 'float')
        # Getting the type of 'self' (line 1971)
        self_54104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 60), 'self', False)
        # Obtaining the member 'dpi' of a type (line 1971)
        dpi_54105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1971, 60), self_54104, 'dpi')
        # Applying the binary operator 'div' (line 1971)
        result_div_54106 = python_operator(stypy.reporting.localization.Localization(__file__, 1971, 55), 'div', float_54103, dpi_54105)
        
        # Processing the call keyword arguments (line 1971)
        kwargs_54107 = {}
        
        # Call to Affine2D(...): (line 1971)
        # Processing the call keyword arguments (line 1971)
        kwargs_54100 = {}
        # Getting the type of 'Affine2D' (line 1971)
        Affine2D_54099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1971, 38), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 1971)
        Affine2D_call_result_54101 = invoke(stypy.reporting.localization.Localization(__file__, 1971, 38), Affine2D_54099, *[], **kwargs_54100)
        
        # Obtaining the member 'scale' of a type (line 1971)
        scale_54102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1971, 38), Affine2D_call_result_54101, 'scale')
        # Calling scale(args, kwargs) (line 1971)
        scale_call_result_54108 = invoke(stypy.reporting.localization.Localization(__file__, 1971, 38), scale_54102, *[result_div_54106], **kwargs_54107)
        
        # Processing the call keyword arguments (line 1970)
        kwargs_54109 = {}
        # Getting the type of 'TransformedBbox' (line 1970)
        TransformedBbox_54097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1970, 22), 'TransformedBbox', False)
        # Calling TransformedBbox(args, kwargs) (line 1970)
        TransformedBbox_call_result_54110 = invoke(stypy.reporting.localization.Localization(__file__, 1970, 22), TransformedBbox_54097, *[_bbox_54098, scale_call_result_54108], **kwargs_54109)
        
        # Assigning a type to the variable 'bbox_inches' (line 1970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1970, 8), 'bbox_inches', TransformedBbox_call_result_54110)
        # Getting the type of 'bbox_inches' (line 1973)
        bbox_inches_54111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1973, 15), 'bbox_inches')
        # Assigning a type to the variable 'stypy_return_type' (line 1973)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1973, 8), 'stypy_return_type', bbox_inches_54111)
        
        # ################# End of 'get_tightbbox(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_tightbbox' in the type store
        # Getting the type of 'stypy_return_type' (line 1952)
        stypy_return_type_54112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1952, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_54112)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_tightbbox'
        return stypy_return_type_54112


    @norecursion
    def tight_layout(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1975)
        None_54113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 36), 'None')
        float_54114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1975, 46), 'float')
        # Getting the type of 'None' (line 1975)
        None_54115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 58), 'None')
        # Getting the type of 'None' (line 1975)
        None_54116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 70), 'None')
        # Getting the type of 'None' (line 1976)
        None_54117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1976, 26), 'None')
        defaults = [None_54113, float_54114, None_54115, None_54116, None_54117]
        # Create a new context for function 'tight_layout'
        module_type_store = module_type_store.open_function_context('tight_layout', 1975, 4, False)
        # Assigning a type to the variable 'self' (line 1976)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1976, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        Figure.tight_layout.__dict__.__setitem__('stypy_localization', localization)
        Figure.tight_layout.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        Figure.tight_layout.__dict__.__setitem__('stypy_type_store', module_type_store)
        Figure.tight_layout.__dict__.__setitem__('stypy_function_name', 'Figure.tight_layout')
        Figure.tight_layout.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'pad', 'h_pad', 'w_pad', 'rect'])
        Figure.tight_layout.__dict__.__setitem__('stypy_varargs_param_name', None)
        Figure.tight_layout.__dict__.__setitem__('stypy_kwargs_param_name', None)
        Figure.tight_layout.__dict__.__setitem__('stypy_call_defaults', defaults)
        Figure.tight_layout.__dict__.__setitem__('stypy_call_varargs', varargs)
        Figure.tight_layout.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        Figure.tight_layout.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'Figure.tight_layout', ['renderer', 'pad', 'h_pad', 'w_pad', 'rect'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'tight_layout', localization, ['renderer', 'pad', 'h_pad', 'w_pad', 'rect'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'tight_layout(...)' code ##################

        unicode_54118 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1992, (-1)), 'unicode', u'\n        Adjust subplot parameters to give specified padding.\n\n        Parameters:\n\n          pad : float\n            padding between the figure edge and the edges of subplots,\n            as a fraction of the font-size.\n          h_pad, w_pad : float\n            padding (height/width) between edges of adjacent subplots.\n            Defaults to `pad_inches`.\n          rect : if rect is given, it is interpreted as a rectangle\n            (left, bottom, right, top) in the normalized figure\n            coordinate that the whole subplots area (including\n            labels) will fit into. Default is (0, 0, 1, 1).\n        ')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1994, 8))
        
        # 'from matplotlib.tight_layout import get_renderer, get_subplotspec_list, get_tight_layout_figure' statement (line 1994)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_54119 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1994, 8), 'matplotlib.tight_layout')

        if (type(import_54119) is not StypyTypeError):

            if (import_54119 != 'pyd_module'):
                __import__(import_54119)
                sys_modules_54120 = sys.modules[import_54119]
                import_from_module(stypy.reporting.localization.Localization(__file__, 1994, 8), 'matplotlib.tight_layout', sys_modules_54120.module_type_store, module_type_store, ['get_renderer', 'get_subplotspec_list', 'get_tight_layout_figure'])
                nest_module(stypy.reporting.localization.Localization(__file__, 1994, 8), __file__, sys_modules_54120, sys_modules_54120.module_type_store, module_type_store)
            else:
                from matplotlib.tight_layout import get_renderer, get_subplotspec_list, get_tight_layout_figure

                import_from_module(stypy.reporting.localization.Localization(__file__, 1994, 8), 'matplotlib.tight_layout', None, module_type_store, ['get_renderer', 'get_subplotspec_list', 'get_tight_layout_figure'], [get_renderer, get_subplotspec_list, get_tight_layout_figure])

        else:
            # Assigning a type to the variable 'matplotlib.tight_layout' (line 1994)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1994, 8), 'matplotlib.tight_layout', import_54119)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Assigning a Call to a Name (line 1997):
        
        # Assigning a Call to a Name (line 1997):
        
        # Assigning a Call to a Name (line 1997):
        
        # Call to get_subplotspec_list(...): (line 1997)
        # Processing the call arguments (line 1997)
        # Getting the type of 'self' (line 1997)
        self_54122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 48), 'self', False)
        # Obtaining the member 'axes' of a type (line 1997)
        axes_54123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1997, 48), self_54122, 'axes')
        # Processing the call keyword arguments (line 1997)
        kwargs_54124 = {}
        # Getting the type of 'get_subplotspec_list' (line 1997)
        get_subplotspec_list_54121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1997, 27), 'get_subplotspec_list', False)
        # Calling get_subplotspec_list(args, kwargs) (line 1997)
        get_subplotspec_list_call_result_54125 = invoke(stypy.reporting.localization.Localization(__file__, 1997, 27), get_subplotspec_list_54121, *[axes_54123], **kwargs_54124)
        
        # Assigning a type to the variable 'subplotspec_list' (line 1997)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1997, 8), 'subplotspec_list', get_subplotspec_list_call_result_54125)
        
        
        # Getting the type of 'None' (line 1998)
        None_54126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 11), 'None')
        # Getting the type of 'subplotspec_list' (line 1998)
        subplotspec_list_54127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1998, 19), 'subplotspec_list')
        # Applying the binary operator 'in' (line 1998)
        result_contains_54128 = python_operator(stypy.reporting.localization.Localization(__file__, 1998, 11), 'in', None_54126, subplotspec_list_54127)
        
        # Testing the type of an if condition (line 1998)
        if_condition_54129 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1998, 8), result_contains_54128)
        # Assigning a type to the variable 'if_condition_54129' (line 1998)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1998, 8), 'if_condition_54129', if_condition_54129)
        # SSA begins for if statement (line 1998)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1999)
        # Processing the call arguments (line 1999)
        unicode_54132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1999, 26), 'unicode', u'This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.')
        # Processing the call keyword arguments (line 1999)
        kwargs_54133 = {}
        # Getting the type of 'warnings' (line 1999)
        warnings_54130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1999, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1999)
        warn_54131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1999, 12), warnings_54130, 'warn')
        # Calling warn(args, kwargs) (line 1999)
        warn_call_result_54134 = invoke(stypy.reporting.localization.Localization(__file__, 1999, 12), warn_54131, *[unicode_54132], **kwargs_54133)
        
        # SSA join for if statement (line 1998)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 2002)
        # Getting the type of 'renderer' (line 2002)
        renderer_54135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 11), 'renderer')
        # Getting the type of 'None' (line 2002)
        None_54136 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2002, 23), 'None')
        
        (may_be_54137, more_types_in_union_54138) = may_be_none(renderer_54135, None_54136)

        if may_be_54137:

            if more_types_in_union_54138:
                # Runtime conditional SSA (line 2002)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2003):
            
            # Assigning a Call to a Name (line 2003):
            
            # Assigning a Call to a Name (line 2003):
            
            # Call to get_renderer(...): (line 2003)
            # Processing the call arguments (line 2003)
            # Getting the type of 'self' (line 2003)
            self_54140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 36), 'self', False)
            # Processing the call keyword arguments (line 2003)
            kwargs_54141 = {}
            # Getting the type of 'get_renderer' (line 2003)
            get_renderer_54139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2003, 23), 'get_renderer', False)
            # Calling get_renderer(args, kwargs) (line 2003)
            get_renderer_call_result_54142 = invoke(stypy.reporting.localization.Localization(__file__, 2003, 23), get_renderer_54139, *[self_54140], **kwargs_54141)
            
            # Assigning a type to the variable 'renderer' (line 2003)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2003, 12), 'renderer', get_renderer_call_result_54142)

            if more_types_in_union_54138:
                # SSA join for if statement (line 2002)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 2005):
        
        # Assigning a Call to a Name (line 2005):
        
        # Assigning a Call to a Name (line 2005):
        
        # Call to get_tight_layout_figure(...): (line 2005)
        # Processing the call arguments (line 2005)
        # Getting the type of 'self' (line 2006)
        self_54144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 12), 'self', False)
        # Getting the type of 'self' (line 2006)
        self_54145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 18), 'self', False)
        # Obtaining the member 'axes' of a type (line 2006)
        axes_54146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2006, 18), self_54145, 'axes')
        # Getting the type of 'subplotspec_list' (line 2006)
        subplotspec_list_54147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 29), 'subplotspec_list', False)
        # Getting the type of 'renderer' (line 2006)
        renderer_54148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2006, 47), 'renderer', False)
        # Processing the call keyword arguments (line 2005)
        # Getting the type of 'pad' (line 2007)
        pad_54149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 16), 'pad', False)
        keyword_54150 = pad_54149
        # Getting the type of 'h_pad' (line 2007)
        h_pad_54151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 27), 'h_pad', False)
        keyword_54152 = h_pad_54151
        # Getting the type of 'w_pad' (line 2007)
        w_pad_54153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 40), 'w_pad', False)
        keyword_54154 = w_pad_54153
        # Getting the type of 'rect' (line 2007)
        rect_54155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2007, 52), 'rect', False)
        keyword_54156 = rect_54155
        kwargs_54157 = {'w_pad': keyword_54154, 'h_pad': keyword_54152, 'pad': keyword_54150, 'rect': keyword_54156}
        # Getting the type of 'get_tight_layout_figure' (line 2005)
        get_tight_layout_figure_54143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2005, 17), 'get_tight_layout_figure', False)
        # Calling get_tight_layout_figure(args, kwargs) (line 2005)
        get_tight_layout_figure_call_result_54158 = invoke(stypy.reporting.localization.Localization(__file__, 2005, 17), get_tight_layout_figure_54143, *[self_54144, axes_54146, subplotspec_list_54147, renderer_54148], **kwargs_54157)
        
        # Assigning a type to the variable 'kwargs' (line 2005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2005, 8), 'kwargs', get_tight_layout_figure_call_result_54158)
        
        # Call to subplots_adjust(...): (line 2008)
        # Processing the call keyword arguments (line 2008)
        # Getting the type of 'kwargs' (line 2008)
        kwargs_54161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 31), 'kwargs', False)
        kwargs_54162 = {'kwargs_54161': kwargs_54161}
        # Getting the type of 'self' (line 2008)
        self_54159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2008, 8), 'self', False)
        # Obtaining the member 'subplots_adjust' of a type (line 2008)
        subplots_adjust_54160 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2008, 8), self_54159, 'subplots_adjust')
        # Calling subplots_adjust(args, kwargs) (line 2008)
        subplots_adjust_call_result_54163 = invoke(stypy.reporting.localization.Localization(__file__, 2008, 8), subplots_adjust_54160, *[], **kwargs_54162)
        
        
        # ################# End of 'tight_layout(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'tight_layout' in the type store
        # Getting the type of 'stypy_return_type' (line 1975)
        stypy_return_type_54164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1975, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_54164)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'tight_layout'
        return stypy_return_type_54164


# Assigning a type to the variable 'Figure' (line 253)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 0), 'Figure', Figure)

# Assigning a Call to a Name (line 424):

# Call to property(...): (line 424)
# Processing the call keyword arguments (line 424)
# Getting the type of '_get_axes' (line 424)
_get_axes_54166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 25), '_get_axes', False)
keyword_54167 = _get_axes_54166
unicode_54168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 424, 40), 'unicode', u'Read-only: list of axes in Figure')
keyword_54169 = unicode_54168
kwargs_54170 = {'doc': keyword_54169, 'fget': keyword_54167}
# Getting the type of 'property' (line 424)
property_54165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 11), 'property', False)
# Calling property(args, kwargs) (line 424)
property_call_result_54171 = invoke(stypy.reporting.localization.Localization(__file__, 424, 11), property_54165, *[], **kwargs_54170)

# Getting the type of 'Figure'
Figure_54172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Figure')
# Setting the type of the member 'axes' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Figure_54172, 'axes', property_call_result_54171)

# Assigning a Call to a Name (line 439):

# Call to property(...): (line 439)
# Processing the call arguments (line 439)
# Getting the type of 'Figure'
Figure_54174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Figure', False)
# Obtaining the member '_get_dpi' of a type
_get_dpi_54175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Figure_54174, '_get_dpi')
# Getting the type of 'Figure'
Figure_54176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Figure', False)
# Obtaining the member '_set_dpi' of a type
_set_dpi_54177 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Figure_54176, '_set_dpi')
# Processing the call keyword arguments (line 439)
kwargs_54178 = {}
# Getting the type of 'property' (line 439)
property_54173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 10), 'property', False)
# Calling property(args, kwargs) (line 439)
property_call_result_54179 = invoke(stypy.reporting.localization.Localization(__file__, 439, 10), property_54173, *[_get_dpi_54175, _set_dpi_54177], **kwargs_54178)

# Getting the type of 'Figure'
Figure_54180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'Figure')
# Setting the type of the member 'dpi' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), Figure_54180, 'dpi', property_call_result_54179)

@norecursion
def figaspect(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'figaspect'
    module_type_store = module_type_store.open_function_context('figaspect', 2011, 0, False)
    
    # Passed parameters checking function
    figaspect.stypy_localization = localization
    figaspect.stypy_type_of_self = None
    figaspect.stypy_type_store = module_type_store
    figaspect.stypy_function_name = 'figaspect'
    figaspect.stypy_param_names_list = ['arg']
    figaspect.stypy_varargs_param_name = None
    figaspect.stypy_kwargs_param_name = None
    figaspect.stypy_call_defaults = defaults
    figaspect.stypy_call_varargs = varargs
    figaspect.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'figaspect', ['arg'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'figaspect', localization, ['arg'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'figaspect(...)' code ##################

    unicode_54181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2037, (-1)), 'unicode', u'\n    Create a figure with specified aspect ratio.  If *arg* is a number,\n    use that aspect ratio.  If *arg* is an array, figaspect will\n    determine the width and height for a figure that would fit array\n    preserving aspect ratio.  The figure width, height in inches are\n    returned.  Be sure to create an axes with equal with and height,\n    e.g.,\n\n    Example usage::\n\n      # make a figure twice as tall as it is wide\n      w, h = figaspect(2.)\n      fig = Figure(figsize=(w,h))\n      ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n      ax.imshow(A, **kwargs)\n\n\n      # make a figure with the proper aspect for an array\n      A = rand(5,3)\n      w, h = figaspect(A)\n      fig = Figure(figsize=(w,h))\n      ax = fig.add_axes([0.1, 0.1, 0.8, 0.8])\n      ax.imshow(A, **kwargs)\n\n    Thanks to Fernando Perez for this function\n    ')
    
    # Assigning a BoolOp to a Name (line 2039):
    
    # Assigning a BoolOp to a Name (line 2039):
    
    # Assigning a BoolOp to a Name (line 2039):
    
    # Evaluating a boolean operation
    
    # Call to hasattr(...): (line 2039)
    # Processing the call arguments (line 2039)
    # Getting the type of 'arg' (line 2039)
    arg_54183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 22), 'arg', False)
    unicode_54184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2039, 27), 'unicode', u'shape')
    # Processing the call keyword arguments (line 2039)
    kwargs_54185 = {}
    # Getting the type of 'hasattr' (line 2039)
    hasattr_54182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 14), 'hasattr', False)
    # Calling hasattr(args, kwargs) (line 2039)
    hasattr_call_result_54186 = invoke(stypy.reporting.localization.Localization(__file__, 2039, 14), hasattr_54182, *[arg_54183, unicode_54184], **kwargs_54185)
    
    
    
    # Call to isscalar(...): (line 2039)
    # Processing the call arguments (line 2039)
    # Getting the type of 'arg' (line 2039)
    arg_54189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 56), 'arg', False)
    # Processing the call keyword arguments (line 2039)
    kwargs_54190 = {}
    # Getting the type of 'np' (line 2039)
    np_54187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2039, 44), 'np', False)
    # Obtaining the member 'isscalar' of a type (line 2039)
    isscalar_54188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2039, 44), np_54187, 'isscalar')
    # Calling isscalar(args, kwargs) (line 2039)
    isscalar_call_result_54191 = invoke(stypy.reporting.localization.Localization(__file__, 2039, 44), isscalar_54188, *[arg_54189], **kwargs_54190)
    
    # Applying the 'not' unary operator (line 2039)
    result_not__54192 = python_operator(stypy.reporting.localization.Localization(__file__, 2039, 40), 'not', isscalar_call_result_54191)
    
    # Applying the binary operator 'and' (line 2039)
    result_and_keyword_54193 = python_operator(stypy.reporting.localization.Localization(__file__, 2039, 14), 'and', hasattr_call_result_54186, result_not__54192)
    
    # Assigning a type to the variable 'isarray' (line 2039)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2039, 4), 'isarray', result_and_keyword_54193)
    
    # Assigning a Call to a Name (line 2043):
    
    # Assigning a Call to a Name (line 2043):
    
    # Assigning a Call to a Name (line 2043):
    
    # Call to array(...): (line 2043)
    # Processing the call arguments (line 2043)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2043)
    tuple_54196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2043, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2043)
    # Adding element type (line 2043)
    float_54197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2043, 28), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2043, 28), tuple_54196, float_54197)
    # Adding element type (line 2043)
    float_54198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2043, 33), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2043, 28), tuple_54196, float_54198)
    
    # Processing the call keyword arguments (line 2043)
    kwargs_54199 = {}
    # Getting the type of 'np' (line 2043)
    np_54194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2043, 18), 'np', False)
    # Obtaining the member 'array' of a type (line 2043)
    array_54195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2043, 18), np_54194, 'array')
    # Calling array(args, kwargs) (line 2043)
    array_call_result_54200 = invoke(stypy.reporting.localization.Localization(__file__, 2043, 18), array_54195, *[tuple_54196], **kwargs_54199)
    
    # Assigning a type to the variable 'figsize_min' (line 2043)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2043, 4), 'figsize_min', array_call_result_54200)
    
    # Assigning a Call to a Name (line 2044):
    
    # Assigning a Call to a Name (line 2044):
    
    # Assigning a Call to a Name (line 2044):
    
    # Call to array(...): (line 2044)
    # Processing the call arguments (line 2044)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2044)
    tuple_54203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2044, 28), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2044)
    # Adding element type (line 2044)
    float_54204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2044, 28), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2044, 28), tuple_54203, float_54204)
    # Adding element type (line 2044)
    float_54205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2044, 34), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2044, 28), tuple_54203, float_54205)
    
    # Processing the call keyword arguments (line 2044)
    kwargs_54206 = {}
    # Getting the type of 'np' (line 2044)
    np_54201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2044, 18), 'np', False)
    # Obtaining the member 'array' of a type (line 2044)
    array_54202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2044, 18), np_54201, 'array')
    # Calling array(args, kwargs) (line 2044)
    array_call_result_54207 = invoke(stypy.reporting.localization.Localization(__file__, 2044, 18), array_54202, *[tuple_54203], **kwargs_54206)
    
    # Assigning a type to the variable 'figsize_max' (line 2044)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2044, 4), 'figsize_max', array_call_result_54207)
    
    # Getting the type of 'isarray' (line 2047)
    isarray_54208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2047, 7), 'isarray')
    # Testing the type of an if condition (line 2047)
    if_condition_54209 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2047, 4), isarray_54208)
    # Assigning a type to the variable 'if_condition_54209' (line 2047)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2047, 4), 'if_condition_54209', if_condition_54209)
    # SSA begins for if statement (line 2047)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Tuple (line 2048):
    
    # Assigning a Subscript to a Name (line 2048):
    
    # Assigning a Subscript to a Name (line 2048):
    
    # Obtaining the type of the subscript
    int_54210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 8), 'int')
    
    # Obtaining the type of the subscript
    int_54211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 28), 'int')
    slice_54212 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2048, 17), None, int_54211, None)
    # Getting the type of 'arg' (line 2048)
    arg_54213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 17), 'arg')
    # Obtaining the member 'shape' of a type (line 2048)
    shape_54214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2048, 17), arg_54213, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2048)
    getitem___54215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2048, 17), shape_54214, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2048)
    subscript_call_result_54216 = invoke(stypy.reporting.localization.Localization(__file__, 2048, 17), getitem___54215, slice_54212)
    
    # Obtaining the member '__getitem__' of a type (line 2048)
    getitem___54217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2048, 8), subscript_call_result_54216, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2048)
    subscript_call_result_54218 = invoke(stypy.reporting.localization.Localization(__file__, 2048, 8), getitem___54217, int_54210)
    
    # Assigning a type to the variable 'tuple_var_assignment_50799' (line 2048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2048, 8), 'tuple_var_assignment_50799', subscript_call_result_54218)
    
    # Assigning a Subscript to a Name (line 2048):
    
    # Assigning a Subscript to a Name (line 2048):
    
    # Obtaining the type of the subscript
    int_54219 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 8), 'int')
    
    # Obtaining the type of the subscript
    int_54220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2048, 28), 'int')
    slice_54221 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2048, 17), None, int_54220, None)
    # Getting the type of 'arg' (line 2048)
    arg_54222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 17), 'arg')
    # Obtaining the member 'shape' of a type (line 2048)
    shape_54223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2048, 17), arg_54222, 'shape')
    # Obtaining the member '__getitem__' of a type (line 2048)
    getitem___54224 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2048, 17), shape_54223, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2048)
    subscript_call_result_54225 = invoke(stypy.reporting.localization.Localization(__file__, 2048, 17), getitem___54224, slice_54221)
    
    # Obtaining the member '__getitem__' of a type (line 2048)
    getitem___54226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2048, 8), subscript_call_result_54225, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2048)
    subscript_call_result_54227 = invoke(stypy.reporting.localization.Localization(__file__, 2048, 8), getitem___54226, int_54219)
    
    # Assigning a type to the variable 'tuple_var_assignment_50800' (line 2048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2048, 8), 'tuple_var_assignment_50800', subscript_call_result_54227)
    
    # Assigning a Name to a Name (line 2048):
    
    # Assigning a Name to a Name (line 2048):
    # Getting the type of 'tuple_var_assignment_50799' (line 2048)
    tuple_var_assignment_50799_54228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 8), 'tuple_var_assignment_50799')
    # Assigning a type to the variable 'nr' (line 2048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2048, 8), 'nr', tuple_var_assignment_50799_54228)
    
    # Assigning a Name to a Name (line 2048):
    
    # Assigning a Name to a Name (line 2048):
    # Getting the type of 'tuple_var_assignment_50800' (line 2048)
    tuple_var_assignment_50800_54229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2048, 8), 'tuple_var_assignment_50800')
    # Assigning a type to the variable 'nc' (line 2048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2048, 12), 'nc', tuple_var_assignment_50800_54229)
    
    # Assigning a BinOp to a Name (line 2049):
    
    # Assigning a BinOp to a Name (line 2049):
    
    # Assigning a BinOp to a Name (line 2049):
    
    # Call to float(...): (line 2049)
    # Processing the call arguments (line 2049)
    # Getting the type of 'nr' (line 2049)
    nr_54231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 26), 'nr', False)
    # Processing the call keyword arguments (line 2049)
    kwargs_54232 = {}
    # Getting the type of 'float' (line 2049)
    float_54230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 20), 'float', False)
    # Calling float(args, kwargs) (line 2049)
    float_call_result_54233 = invoke(stypy.reporting.localization.Localization(__file__, 2049, 20), float_54230, *[nr_54231], **kwargs_54232)
    
    # Getting the type of 'nc' (line 2049)
    nc_54234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2049, 32), 'nc')
    # Applying the binary operator 'div' (line 2049)
    result_div_54235 = python_operator(stypy.reporting.localization.Localization(__file__, 2049, 20), 'div', float_call_result_54233, nc_54234)
    
    # Assigning a type to the variable 'arr_ratio' (line 2049)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2049, 8), 'arr_ratio', result_div_54235)
    # SSA branch for the else part of an if statement (line 2047)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2051):
    
    # Assigning a Call to a Name (line 2051):
    
    # Assigning a Call to a Name (line 2051):
    
    # Call to float(...): (line 2051)
    # Processing the call arguments (line 2051)
    # Getting the type of 'arg' (line 2051)
    arg_54237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 26), 'arg', False)
    # Processing the call keyword arguments (line 2051)
    kwargs_54238 = {}
    # Getting the type of 'float' (line 2051)
    float_54236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2051, 20), 'float', False)
    # Calling float(args, kwargs) (line 2051)
    float_call_result_54239 = invoke(stypy.reporting.localization.Localization(__file__, 2051, 20), float_54236, *[arg_54237], **kwargs_54238)
    
    # Assigning a type to the variable 'arr_ratio' (line 2051)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2051, 8), 'arr_ratio', float_call_result_54239)
    # SSA join for if statement (line 2047)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 2054):
    
    # Assigning a Subscript to a Name (line 2054):
    
    # Assigning a Subscript to a Name (line 2054):
    
    # Obtaining the type of the subscript
    int_54240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2054, 44), 'int')
    
    # Obtaining the type of the subscript
    unicode_54241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2054, 26), 'unicode', u'figure.figsize')
    # Getting the type of 'rcParams' (line 2054)
    rcParams_54242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2054, 17), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 2054)
    getitem___54243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2054, 17), rcParams_54242, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2054)
    subscript_call_result_54244 = invoke(stypy.reporting.localization.Localization(__file__, 2054, 17), getitem___54243, unicode_54241)
    
    # Obtaining the member '__getitem__' of a type (line 2054)
    getitem___54245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2054, 17), subscript_call_result_54244, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2054)
    subscript_call_result_54246 = invoke(stypy.reporting.localization.Localization(__file__, 2054, 17), getitem___54245, int_54240)
    
    # Assigning a type to the variable 'fig_height' (line 2054)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2054, 4), 'fig_height', subscript_call_result_54246)
    
    # Assigning a Call to a Name (line 2057):
    
    # Assigning a Call to a Name (line 2057):
    
    # Assigning a Call to a Name (line 2057):
    
    # Call to array(...): (line 2057)
    # Processing the call arguments (line 2057)
    
    # Obtaining an instance of the builtin type 'tuple' (line 2057)
    tuple_54249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2057, 24), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2057)
    # Adding element type (line 2057)
    # Getting the type of 'fig_height' (line 2057)
    fig_height_54250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 24), 'fig_height', False)
    # Getting the type of 'arr_ratio' (line 2057)
    arr_ratio_54251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 37), 'arr_ratio', False)
    # Applying the binary operator 'div' (line 2057)
    result_div_54252 = python_operator(stypy.reporting.localization.Localization(__file__, 2057, 24), 'div', fig_height_54250, arr_ratio_54251)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2057, 24), tuple_54249, result_div_54252)
    # Adding element type (line 2057)
    # Getting the type of 'fig_height' (line 2057)
    fig_height_54253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 48), 'fig_height', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2057, 24), tuple_54249, fig_height_54253)
    
    # Processing the call keyword arguments (line 2057)
    kwargs_54254 = {}
    # Getting the type of 'np' (line 2057)
    np_54247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2057, 14), 'np', False)
    # Obtaining the member 'array' of a type (line 2057)
    array_54248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2057, 14), np_54247, 'array')
    # Calling array(args, kwargs) (line 2057)
    array_call_result_54255 = invoke(stypy.reporting.localization.Localization(__file__, 2057, 14), array_54248, *[tuple_54249], **kwargs_54254)
    
    # Assigning a type to the variable 'newsize' (line 2057)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2057, 4), 'newsize', array_call_result_54255)
    
    # Getting the type of 'newsize' (line 2060)
    newsize_54256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 4), 'newsize')
    
    # Call to min(...): (line 2060)
    # Processing the call arguments (line 2060)
    float_54258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2060, 19), 'float')
    # Getting the type of 'newsize' (line 2060)
    newsize_54259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 26), 'newsize', False)
    # Getting the type of 'figsize_min' (line 2060)
    figsize_min_54260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 36), 'figsize_min', False)
    # Applying the binary operator 'div' (line 2060)
    result_div_54261 = python_operator(stypy.reporting.localization.Localization(__file__, 2060, 26), 'div', newsize_54259, figsize_min_54260)
    
    # Processing the call keyword arguments (line 2060)
    kwargs_54262 = {}
    # Getting the type of 'min' (line 2060)
    min_54257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2060, 15), 'min', False)
    # Calling min(args, kwargs) (line 2060)
    min_call_result_54263 = invoke(stypy.reporting.localization.Localization(__file__, 2060, 15), min_54257, *[float_54258, result_div_54261], **kwargs_54262)
    
    # Applying the binary operator 'div=' (line 2060)
    result_div_54264 = python_operator(stypy.reporting.localization.Localization(__file__, 2060, 4), 'div=', newsize_54256, min_call_result_54263)
    # Assigning a type to the variable 'newsize' (line 2060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2060, 4), 'newsize', result_div_54264)
    
    
    # Getting the type of 'newsize' (line 2063)
    newsize_54265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 4), 'newsize')
    
    # Call to max(...): (line 2063)
    # Processing the call arguments (line 2063)
    float_54267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2063, 19), 'float')
    # Getting the type of 'newsize' (line 2063)
    newsize_54268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 26), 'newsize', False)
    # Getting the type of 'figsize_max' (line 2063)
    figsize_max_54269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 36), 'figsize_max', False)
    # Applying the binary operator 'div' (line 2063)
    result_div_54270 = python_operator(stypy.reporting.localization.Localization(__file__, 2063, 26), 'div', newsize_54268, figsize_max_54269)
    
    # Processing the call keyword arguments (line 2063)
    kwargs_54271 = {}
    # Getting the type of 'max' (line 2063)
    max_54266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2063, 15), 'max', False)
    # Calling max(args, kwargs) (line 2063)
    max_call_result_54272 = invoke(stypy.reporting.localization.Localization(__file__, 2063, 15), max_54266, *[float_54267, result_div_54270], **kwargs_54271)
    
    # Applying the binary operator 'div=' (line 2063)
    result_div_54273 = python_operator(stypy.reporting.localization.Localization(__file__, 2063, 4), 'div=', newsize_54265, max_call_result_54272)
    # Assigning a type to the variable 'newsize' (line 2063)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2063, 4), 'newsize', result_div_54273)
    
    
    # Assigning a Call to a Name (line 2067):
    
    # Assigning a Call to a Name (line 2067):
    
    # Assigning a Call to a Name (line 2067):
    
    # Call to clip(...): (line 2067)
    # Processing the call arguments (line 2067)
    # Getting the type of 'newsize' (line 2067)
    newsize_54276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 22), 'newsize', False)
    # Getting the type of 'figsize_min' (line 2067)
    figsize_min_54277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 31), 'figsize_min', False)
    # Getting the type of 'figsize_max' (line 2067)
    figsize_max_54278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 44), 'figsize_max', False)
    # Processing the call keyword arguments (line 2067)
    kwargs_54279 = {}
    # Getting the type of 'np' (line 2067)
    np_54274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2067, 14), 'np', False)
    # Obtaining the member 'clip' of a type (line 2067)
    clip_54275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2067, 14), np_54274, 'clip')
    # Calling clip(args, kwargs) (line 2067)
    clip_call_result_54280 = invoke(stypy.reporting.localization.Localization(__file__, 2067, 14), clip_54275, *[newsize_54276, figsize_min_54277, figsize_max_54278], **kwargs_54279)
    
    # Assigning a type to the variable 'newsize' (line 2067)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2067, 4), 'newsize', clip_call_result_54280)
    # Getting the type of 'newsize' (line 2068)
    newsize_54281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2068, 11), 'newsize')
    # Assigning a type to the variable 'stypy_return_type' (line 2068)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2068, 4), 'stypy_return_type', newsize_54281)
    
    # ################# End of 'figaspect(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'figaspect' in the type store
    # Getting the type of 'stypy_return_type' (line 2011)
    stypy_return_type_54282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2011, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_54282)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'figaspect'
    return stypy_return_type_54282

# Assigning a type to the variable 'figaspect' (line 2011)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2011, 0), 'figaspect', figaspect)

# Call to update(...): (line 2070)
# Processing the call keyword arguments (line 2070)

# Call to kwdoc(...): (line 2070)
# Processing the call arguments (line 2070)
# Getting the type of 'Figure' (line 2070)
Figure_54288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 46), 'Figure', False)
# Processing the call keyword arguments (line 2070)
kwargs_54289 = {}
# Getting the type of 'martist' (line 2070)
martist_54286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 32), 'martist', False)
# Obtaining the member 'kwdoc' of a type (line 2070)
kwdoc_54287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2070, 32), martist_54286, 'kwdoc')
# Calling kwdoc(args, kwargs) (line 2070)
kwdoc_call_result_54290 = invoke(stypy.reporting.localization.Localization(__file__, 2070, 32), kwdoc_54287, *[Figure_54288], **kwargs_54289)

keyword_54291 = kwdoc_call_result_54290
kwargs_54292 = {'Figure': keyword_54291}
# Getting the type of 'docstring' (line 2070)
docstring_54283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2070, 0), 'docstring', False)
# Obtaining the member 'interpd' of a type (line 2070)
interpd_54284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2070, 0), docstring_54283, 'interpd')
# Obtaining the member 'update' of a type (line 2070)
update_54285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2070, 0), interpd_54284, 'update')
# Calling update(args, kwargs) (line 2070)
update_call_result_54293 = invoke(stypy.reporting.localization.Localization(__file__, 2070, 0), update_54285, *[], **kwargs_54292)


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
