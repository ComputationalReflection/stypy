
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: These are classes to support contour plotting and labelling for the Axes class.
3: '''
4: from __future__ import (absolute_import, division, print_function,
5:                         unicode_literals)
6: 
7: import six
8: from six.moves import xrange
9: 
10: import warnings
11: import matplotlib as mpl
12: import numpy as np
13: from numpy import ma
14: import matplotlib._cntr as _cntr
15: import matplotlib._contour as _contour
16: import matplotlib.path as mpath
17: import matplotlib.ticker as ticker
18: import matplotlib.cm as cm
19: import matplotlib.colors as colors
20: import matplotlib.collections as mcoll
21: import matplotlib.font_manager as font_manager
22: import matplotlib.text as text
23: import matplotlib.cbook as cbook
24: import matplotlib.mlab as mlab
25: import matplotlib.mathtext as mathtext
26: import matplotlib.patches as mpatches
27: import matplotlib.texmanager as texmanager
28: import matplotlib.transforms as mtransforms
29: from matplotlib.cbook import mplDeprecation
30: 
31: # Import needed for adding manual selection capability to clabel
32: from matplotlib.blocking_input import BlockingContourLabeler
33: 
34: # We can't use a single line collection for contour because a line
35: # collection can have only a single line style, and we want to be able to have
36: # dashed negative contours, for example, and solid positive contours.
37: # We could use a single polygon collection for filled contours, but it
38: # seems better to keep line and filled contours similar, with one collection
39: # per level.
40: 
41: 
42: class ClabelText(text.Text):
43:     '''
44:     Unlike the ordinary text, the get_rotation returns an updated
45:     angle in the pixel coordinate assuming that the input rotation is
46:     an angle in data coordinate (or whatever transform set).
47:     '''
48:     def get_rotation(self):
49:         angle = text.Text.get_rotation(self)
50:         trans = self.get_transform()
51:         x, y = self.get_position()
52:         new_angles = trans.transform_angles(np.array([angle]),
53:                                             np.array([[x, y]]))
54:         return new_angles[0]
55: 
56: 
57: class ContourLabeler(object):
58:     '''Mixin to provide labelling capability to ContourSet'''
59: 
60:     def clabel(self, *args, **kwargs):
61:         '''
62:         Label a contour plot.
63: 
64:         Call signature::
65: 
66:           clabel(cs, **kwargs)
67: 
68:         Adds labels to line contours in *cs*, where *cs* is a
69:         :class:`~matplotlib.contour.ContourSet` object returned by
70:         contour.
71: 
72:         ::
73: 
74:           clabel(cs, v, **kwargs)
75: 
76:         only labels contours listed in *v*.
77: 
78:         Optional keyword arguments:
79: 
80:           *fontsize*:
81:             size in points or relative size e.g., 'smaller', 'x-large'
82: 
83:           *colors*:
84:             - if *None*, the color of each label matches the color of
85:               the corresponding contour
86: 
87:             - if one string color, e.g., *colors* = 'r' or *colors* =
88:               'red', all labels will be plotted in this color
89: 
90:             - if a tuple of matplotlib color args (string, float, rgb, etc),
91:               different labels will be plotted in different colors in the order
92:               specified
93: 
94:           *inline*:
95:             controls whether the underlying contour is removed or
96:             not. Default is *True*.
97: 
98:           *inline_spacing*:
99:             space in pixels to leave on each side of label when
100:             placing inline.  Defaults to 5.  This spacing will be
101:             exact for labels at locations where the contour is
102:             straight, less so for labels on curved contours.
103: 
104:           *fmt*:
105:             a format string for the label. Default is '%1.3f'
106:             Alternatively, this can be a dictionary matching contour
107:             levels with arbitrary strings to use for each contour level
108:             (i.e., fmt[level]=string), or it can be any callable, such
109:             as a :class:`~matplotlib.ticker.Formatter` instance, that
110:             returns a string when called with a numeric contour level.
111: 
112:           *manual*:
113:             if *True*, contour labels will be placed manually using
114:             mouse clicks.  Click the first button near a contour to
115:             add a label, click the second button (or potentially both
116:             mouse buttons at once) to finish adding labels.  The third
117:             button can be used to remove the last label added, but
118:             only if labels are not inline.  Alternatively, the keyboard
119:             can be used to select label locations (enter to end label
120:             placement, delete or backspace act like the third mouse button,
121:             and any other key will select a label location).
122: 
123:             *manual* can be an iterable object of x,y tuples. Contour labels
124:             will be created as if mouse is clicked at each x,y positions.
125: 
126:           *rightside_up*:
127:             if *True* (default), label rotations will always be plus
128:             or minus 90 degrees from level.
129: 
130:           *use_clabeltext*:
131:             if *True* (default is False), ClabelText class (instead of
132:             matplotlib.Text) is used to create labels. ClabelText
133:             recalculates rotation angles of texts during the drawing time,
134:             therefore this can be used if aspect of the axes changes.
135:         '''
136: 
137:         '''
138:         NOTES on how this all works:
139: 
140:         clabel basically takes the input arguments and uses them to
141:         add a list of "label specific" attributes to the ContourSet
142:         object.  These attributes are all of the form label* and names
143:         should be fairly self explanatory.
144: 
145:         Once these attributes are set, clabel passes control to the
146:         labels method (case of automatic label placement) or
147:         BlockingContourLabeler (case of manual label placement).
148:         '''
149: 
150:         fontsize = kwargs.get('fontsize', None)
151:         inline = kwargs.get('inline', 1)
152:         inline_spacing = kwargs.get('inline_spacing', 5)
153:         self.labelFmt = kwargs.get('fmt', '%1.3f')
154:         _colors = kwargs.get('colors', None)
155: 
156:         self._use_clabeltext = kwargs.get('use_clabeltext', False)
157: 
158:         # Detect if manual selection is desired and remove from argument list
159:         self.labelManual = kwargs.get('manual', False)
160: 
161:         self.rightside_up = kwargs.get('rightside_up', True)
162:         if len(args) == 0:
163:             levels = self.levels
164:             indices = list(xrange(len(self.cvalues)))
165:         elif len(args) == 1:
166:             levlabs = list(args[0])
167:             indices, levels = [], []
168:             for i, lev in enumerate(self.levels):
169:                 if lev in levlabs:
170:                     indices.append(i)
171:                     levels.append(lev)
172:             if len(levels) < len(levlabs):
173:                 msg = "Specified levels " + str(levlabs)
174:                 msg += "\n don't match available levels "
175:                 msg += str(self.levels)
176:                 raise ValueError(msg)
177:         else:
178:             raise TypeError("Illegal arguments to clabel, see help(clabel)")
179:         self.labelLevelList = levels
180:         self.labelIndiceList = indices
181: 
182:         self.labelFontProps = font_manager.FontProperties()
183:         self.labelFontProps.set_size(fontsize)
184:         font_size_pts = self.labelFontProps.get_size_in_points()
185:         self.labelFontSizeList = [font_size_pts] * len(levels)
186: 
187:         if _colors is None:
188:             self.labelMappable = self
189:             self.labelCValueList = np.take(self.cvalues, self.labelIndiceList)
190:         else:
191:             cmap = colors.ListedColormap(_colors, N=len(self.labelLevelList))
192:             self.labelCValueList = list(xrange(len(self.labelLevelList)))
193:             self.labelMappable = cm.ScalarMappable(cmap=cmap,
194:                                                    norm=colors.NoNorm())
195: 
196:         self.labelXYs = []
197: 
198:         if cbook.iterable(self.labelManual):
199:             for x, y in self.labelManual:
200:                 self.add_label_near(x, y, inline,
201:                                     inline_spacing)
202: 
203:         elif self.labelManual:
204:             print('Select label locations manually using first mouse button.')
205:             print('End manual selection with second mouse button.')
206:             if not inline:
207:                 print('Remove last label by clicking third mouse button.')
208: 
209:             blocking_contour_labeler = BlockingContourLabeler(self)
210:             blocking_contour_labeler(inline, inline_spacing)
211:         else:
212:             self.labels(inline, inline_spacing)
213: 
214:         # Hold on to some old attribute names.  These are deprecated and will
215:         # be removed in the near future (sometime after 2008-08-01), but
216:         # keeping for now for backwards compatibility
217:         self.cl = self.labelTexts
218:         self.cl_xy = self.labelXYs
219:         self.cl_cvalues = self.labelCValues
220: 
221:         self.labelTextsList = cbook.silent_list('text.Text', self.labelTexts)
222:         return self.labelTextsList
223: 
224:     def print_label(self, linecontour, labelwidth):
225:         "Return *False* if contours are too short for a label."
226:         return (len(linecontour) > 10 * labelwidth
227:                 or (np.ptp(linecontour, axis=0) > 1.2 * labelwidth).any())
228: 
229:     def too_close(self, x, y, lw):
230:         "Return *True* if a label is already near this location."
231:         for loc in self.labelXYs:
232:             d = np.sqrt((x - loc[0]) ** 2 + (y - loc[1]) ** 2)
233:             if d < 1.2 * lw:
234:                 return True
235:         return False
236: 
237:     def get_label_coords(self, distances, XX, YY, ysize, lw):
238:         '''
239:         Return x, y, and the index of a label location.
240: 
241:         Labels are plotted at a location with the smallest
242:         deviation of the contour from a straight line
243:         unless there is another label nearby, in which case
244:         the next best place on the contour is picked up.
245:         If all such candidates are rejected, the beginning
246:         of the contour is chosen.
247:         '''
248:         hysize = int(ysize / 2)
249:         adist = np.argsort(distances)
250: 
251:         for ind in adist:
252:             x, y = XX[ind][hysize], YY[ind][hysize]
253:             if self.too_close(x, y, lw):
254:                 continue
255:             return x, y, ind
256: 
257:         ind = adist[0]
258:         x, y = XX[ind][hysize], YY[ind][hysize]
259:         return x, y, ind
260: 
261:     def get_label_width(self, lev, fmt, fsize):
262:         '''
263:         Return the width of the label in points.
264:         '''
265:         if not isinstance(lev, six.string_types):
266:             lev = self.get_text(lev, fmt)
267: 
268:         lev, ismath = text.Text.is_math_text(lev)
269:         if ismath == 'TeX':
270:             if not hasattr(self, '_TeX_manager'):
271:                 self._TeX_manager = texmanager.TexManager()
272:             lw, _, _ = self._TeX_manager.get_text_width_height_descent(lev,
273:                                                                        fsize)
274:         elif ismath:
275:             if not hasattr(self, '_mathtext_parser'):
276:                 self._mathtext_parser = mathtext.MathTextParser('bitmap')
277:             img, _ = self._mathtext_parser.parse(lev, dpi=72,
278:                                                  prop=self.labelFontProps)
279:             lw = img.get_width()  # at dpi=72, the units are PostScript points
280:         else:
281:             # width is much less than "font size"
282:             lw = (len(lev)) * fsize * 0.6
283: 
284:         return lw
285: 
286:     def get_real_label_width(self, lev, fmt, fsize):
287:         '''
288:         This computes actual onscreen label width.
289:         This uses some black magic to determine onscreen extent of non-drawn
290:         label.  This magic may not be very robust.
291: 
292:         This method is not being used, and may be modified or removed.
293:         '''
294:         # Find middle of axes
295:         xx = np.mean(np.asarray(self.ax.axis()).reshape(2, 2), axis=1)
296: 
297:         # Temporarily create text object
298:         t = text.Text(xx[0], xx[1])
299:         self.set_label_props(t, self.get_text(lev, fmt), 'k')
300: 
301:         # Some black magic to get onscreen extent
302:         # NOTE: This will only work for already drawn figures, as the canvas
303:         # does not have a renderer otherwise.  This is the reason this function
304:         # can't be integrated into the rest of the code.
305:         bbox = t.get_window_extent(renderer=self.ax.figure.canvas.renderer)
306: 
307:         # difference in pixel extent of image
308:         lw = np.diff(bbox.corners()[0::2, 0])[0]
309: 
310:         return lw
311: 
312:     def set_label_props(self, label, text, color):
313:         "set the label properties - color, fontsize, text"
314:         label.set_text(text)
315:         label.set_color(color)
316:         label.set_fontproperties(self.labelFontProps)
317:         label.set_clip_box(self.ax.bbox)
318: 
319:     def get_text(self, lev, fmt):
320:         "get the text of the label"
321:         if isinstance(lev, six.string_types):
322:             return lev
323:         else:
324:             if isinstance(fmt, dict):
325:                 return fmt[lev]
326:             elif callable(fmt):
327:                 return fmt(lev)
328:             else:
329:                 return fmt % lev
330: 
331:     def locate_label(self, linecontour, labelwidth):
332:         '''
333:         Find a good place to plot a label (relatively flat
334:         part of the contour).
335:         '''
336: 
337:         # Number of contour points
338:         nsize = len(linecontour)
339:         if labelwidth > 1:
340:             xsize = int(np.ceil(nsize / labelwidth))
341:         else:
342:             xsize = 1
343:         if xsize == 1:
344:             ysize = nsize
345:         else:
346:             ysize = int(labelwidth)
347: 
348:         XX = np.resize(linecontour[:, 0], (xsize, ysize))
349:         YY = np.resize(linecontour[:, 1], (xsize, ysize))
350:         # I might have fouled up the following:
351:         yfirst = YY[:, 0].reshape(xsize, 1)
352:         ylast = YY[:, -1].reshape(xsize, 1)
353:         xfirst = XX[:, 0].reshape(xsize, 1)
354:         xlast = XX[:, -1].reshape(xsize, 1)
355:         s = (yfirst - YY) * (xlast - xfirst) - (xfirst - XX) * (ylast - yfirst)
356:         L = np.sqrt((xlast - xfirst) ** 2 + (ylast - yfirst) ** 2).ravel()
357:         # Ignore warning that divide by zero throws, as this is a valid option
358:         with np.errstate(divide='ignore', invalid='ignore'):
359:             dist = np.add.reduce([(abs(s)[i] / L[i]) for i in range(xsize)],
360:                                  -1)
361:         x, y, ind = self.get_label_coords(dist, XX, YY, ysize, labelwidth)
362: 
363:         # There must be a more efficient way...
364:         lc = [tuple(l) for l in linecontour]
365:         dind = lc.index((x, y))
366: 
367:         return x, y, dind
368: 
369:     def calc_label_rot_and_inline(self, slc, ind, lw, lc=None, spacing=5):
370:         '''
371:         This function calculates the appropriate label rotation given
372:         the linecontour coordinates in screen units, the index of the
373:         label location and the label width.
374: 
375:         It will also break contour and calculate inlining if *lc* is
376:         not empty (lc defaults to the empty list if None).  *spacing*
377:         is the space around the label in pixels to leave empty.
378: 
379:         Do both of these tasks at once to avoid calling mlab.path_length
380:         multiple times, which is relatively costly.
381: 
382:         The method used here involves calculating the path length
383:         along the contour in pixel coordinates and then looking
384:         approximately label width / 2 away from central point to
385:         determine rotation and then to break contour if desired.
386:         '''
387: 
388:         if lc is None:
389:             lc = []
390:         # Half the label width
391:         hlw = lw / 2.0
392: 
393:         # Check if closed and, if so, rotate contour so label is at edge
394:         closed = mlab.is_closed_polygon(slc)
395:         if closed:
396:             slc = np.r_[slc[ind:-1], slc[:ind + 1]]
397: 
398:             if len(lc):  # Rotate lc also if not empty
399:                 lc = np.r_[lc[ind:-1], lc[:ind + 1]]
400: 
401:             ind = 0
402: 
403:         # Path length in pixel space
404:         pl = mlab.path_length(slc)
405:         pl = pl - pl[ind]
406: 
407:         # Use linear interpolation to get points around label
408:         xi = np.array([-hlw, hlw])
409:         if closed:  # Look at end also for closed contours
410:             dp = np.array([pl[-1], 0])
411:         else:
412:             dp = np.zeros_like(xi)
413: 
414:         ll = mlab.less_simple_linear_interpolation(pl, slc, dp + xi,
415:                                                    extrap=True)
416: 
417:         # get vector in pixel space coordinates from one point to other
418:         dd = np.diff(ll, axis=0).ravel()
419: 
420:         # Get angle of vector - must be calculated in pixel space for
421:         # text rotation to work correctly
422:         if np.all(dd == 0):  # Must deal with case of zero length label
423:             rotation = 0.0
424:         else:
425:             rotation = np.rad2deg(np.arctan2(dd[1], dd[0]))
426: 
427:         if self.rightside_up:
428:             # Fix angle so text is never upside-down
429:             if rotation > 90:
430:                 rotation = rotation - 180.0
431:             if rotation < -90:
432:                 rotation = 180.0 + rotation
433: 
434:         # Break contour if desired
435:         nlc = []
436:         if len(lc):
437:             # Expand range by spacing
438:             xi = dp + xi + np.array([-spacing, spacing])
439: 
440:             # Get indices near points of interest
441:             I = mlab.less_simple_linear_interpolation(
442:                 pl, np.arange(len(pl)), xi, extrap=False)
443: 
444:             # If those indices aren't beyond contour edge, find x,y
445:             if (not np.isnan(I[0])) and int(I[0]) != I[0]:
446:                 xy1 = mlab.less_simple_linear_interpolation(
447:                     pl, lc, [xi[0]])
448: 
449:             if (not np.isnan(I[1])) and int(I[1]) != I[1]:
450:                 xy2 = mlab.less_simple_linear_interpolation(
451:                     pl, lc, [xi[1]])
452: 
453:             # Round to integer values but keep as float
454:             # To allow check against nan below
455:             # Ignore nans here to avoid throwing an error on Appveyor build
456:             # (can possibly be removed when build uses numpy 1.13)
457:             with np.errstate(invalid='ignore'):
458:                 I = [np.floor(I[0]), np.ceil(I[1])]
459: 
460:             # Actually break contours
461:             if closed:
462:                 # This will remove contour if shorter than label
463:                 if np.all(~np.isnan(I)):
464:                     nlc.append(np.r_[xy2, lc[int(I[1]):int(I[0]) + 1], xy1])
465:             else:
466:                 # These will remove pieces of contour if they have length zero
467:                 if not np.isnan(I[0]):
468:                     nlc.append(np.r_[lc[:int(I[0]) + 1], xy1])
469:                 if not np.isnan(I[1]):
470:                     nlc.append(np.r_[xy2, lc[int(I[1]):]])
471: 
472:             # The current implementation removes contours completely
473:             # covered by labels.  Uncomment line below to keep
474:             # original contour if this is the preferred behavior.
475:             # if not len(nlc): nlc = [ lc ]
476: 
477:         return rotation, nlc
478: 
479:     def _get_label_text(self, x, y, rotation):
480:         dx, dy = self.ax.transData.inverted().transform_point((x, y))
481:         t = text.Text(dx, dy, rotation=rotation,
482:                       horizontalalignment='center',
483:                       verticalalignment='center')
484:         return t
485: 
486:     def _get_label_clabeltext(self, x, y, rotation):
487:         # x, y, rotation is given in pixel coordinate. Convert them to
488:         # the data coordinate and create a label using ClabelText
489:         # class. This way, the roation of the clabel is along the
490:         # contour line always.
491:         transDataInv = self.ax.transData.inverted()
492:         dx, dy = transDataInv.transform_point((x, y))
493:         drotation = transDataInv.transform_angles(np.array([rotation]),
494:                                                   np.array([[x, y]]))
495:         t = ClabelText(dx, dy, rotation=drotation[0],
496:                        horizontalalignment='center',
497:                        verticalalignment='center')
498: 
499:         return t
500: 
501:     def _add_label(self, t, x, y, lev, cvalue):
502:         color = self.labelMappable.to_rgba(cvalue, alpha=self.alpha)
503: 
504:         _text = self.get_text(lev, self.labelFmt)
505:         self.set_label_props(t, _text, color)
506:         self.labelTexts.append(t)
507:         self.labelCValues.append(cvalue)
508:         self.labelXYs.append((x, y))
509: 
510:         # Add label to plot here - useful for manual mode label selection
511:         self.ax.add_artist(t)
512: 
513:     def add_label(self, x, y, rotation, lev, cvalue):
514:         '''
515:         Add contour label using :class:`~matplotlib.text.Text` class.
516:         '''
517: 
518:         t = self._get_label_text(x, y, rotation)
519:         self._add_label(t, x, y, lev, cvalue)
520: 
521:     def add_label_clabeltext(self, x, y, rotation, lev, cvalue):
522:         '''
523:         Add contour label using :class:`ClabelText` class.
524:         '''
525:         # x, y, rotation is given in pixel coordinate. Convert them to
526:         # the data coordinate and create a label using ClabelText
527:         # class. This way, the roation of the clabel is along the
528:         # contour line always.
529: 
530:         t = self._get_label_clabeltext(x, y, rotation)
531:         self._add_label(t, x, y, lev, cvalue)
532: 
533:     def add_label_near(self, x, y, inline=True, inline_spacing=5,
534:                        transform=None):
535:         '''
536:         Add a label near the point (x, y). If transform is None
537:         (default), (x, y) is in data coordinates; if transform is
538:         False, (x, y) is in display coordinates; otherwise, the
539:         specified transform will be used to translate (x, y) into
540:         display coordinates.
541: 
542:         *inline*:
543:           controls whether the underlying contour is removed or
544:           not. Default is *True*.
545: 
546:         *inline_spacing*:
547:           space in pixels to leave on each side of label when
548:           placing inline.  Defaults to 5.  This spacing will be
549:           exact for labels at locations where the contour is
550:           straight, less so for labels on curved contours.
551:         '''
552: 
553:         if transform is None:
554:             transform = self.ax.transData
555: 
556:         if transform:
557:             x, y = transform.transform_point((x, y))
558: 
559:         # find the nearest contour _in screen units_
560:         conmin, segmin, imin, xmin, ymin = self.find_nearest_contour(
561:             x, y, self.labelIndiceList)[:5]
562: 
563:         # The calc_label_rot_and_inline routine requires that (xmin,ymin)
564:         # be a vertex in the path. So, if it isn't, add a vertex here
565: 
566:         # grab the paths from the collections
567:         paths = self.collections[conmin].get_paths()
568:         # grab the correct segment
569:         active_path = paths[segmin]
570:         # grab it's verticies
571:         lc = active_path.vertices
572:         # sort out where the new vertex should be added data-units
573:         xcmin = self.ax.transData.inverted().transform_point([xmin, ymin])
574:         # if there isn't a vertex close enough
575:         if not np.allclose(xcmin, lc[imin]):
576:             # insert new data into the vertex list
577:             lc = np.r_[lc[:imin], np.array(xcmin)[None, :], lc[imin:]]
578:             # replace the path with the new one
579:             paths[segmin] = mpath.Path(lc)
580: 
581:         # Get index of nearest level in subset of levels used for labeling
582:         lmin = self.labelIndiceList.index(conmin)
583: 
584:         # Coordinates of contour
585:         paths = self.collections[conmin].get_paths()
586:         lc = paths[segmin].vertices
587: 
588:         # In pixel/screen space
589:         slc = self.ax.transData.transform(lc)
590: 
591:         # Get label width for rotating labels and breaking contours
592:         lw = self.get_label_width(self.labelLevelList[lmin],
593:                                   self.labelFmt, self.labelFontSizeList[lmin])
594: 
595:         # Figure out label rotation.
596:         if inline:
597:             lcarg = lc
598:         else:
599:             lcarg = None
600:         rotation, nlc = self.calc_label_rot_and_inline(
601:             slc, imin, lw, lcarg,
602:             inline_spacing)
603: 
604:         self.add_label(xmin, ymin, rotation, self.labelLevelList[lmin],
605:                        self.labelCValueList[lmin])
606: 
607:         if inline:
608:             # Remove old, not looping over paths so we can do this up front
609:             paths.pop(segmin)
610: 
611:             # Add paths if not empty or single point
612:             for n in nlc:
613:                 if len(n) > 1:
614:                     paths.append(mpath.Path(n))
615: 
616:     def pop_label(self, index=-1):
617:         '''Defaults to removing last label, but any index can be supplied'''
618:         self.labelCValues.pop(index)
619:         t = self.labelTexts.pop(index)
620:         t.remove()
621: 
622:     def labels(self, inline, inline_spacing):
623: 
624:         if self._use_clabeltext:
625:             add_label = self.add_label_clabeltext
626:         else:
627:             add_label = self.add_label
628: 
629:         for icon, lev, fsize, cvalue in zip(
630:                 self.labelIndiceList, self.labelLevelList,
631:                 self.labelFontSizeList, self.labelCValueList):
632: 
633:             con = self.collections[icon]
634:             trans = con.get_transform()
635:             lw = self.get_label_width(lev, self.labelFmt, fsize)
636:             lw *= self.ax.figure.dpi / 72.0  # scale to screen coordinates
637:             additions = []
638:             paths = con.get_paths()
639:             for segNum, linepath in enumerate(paths):
640:                 lc = linepath.vertices  # Line contour
641:                 slc0 = trans.transform(lc)  # Line contour in screen coords
642: 
643:                 # For closed polygons, add extra point to avoid division by
644:                 # zero in print_label and locate_label.  Other than these
645:                 # functions, this is not necessary and should probably be
646:                 # eventually removed.
647:                 if mlab.is_closed_polygon(lc):
648:                     slc = np.r_[slc0, slc0[1:2, :]]
649:                 else:
650:                     slc = slc0
651: 
652:                 # Check if long enough for a label
653:                 if self.print_label(slc, lw):
654:                     x, y, ind = self.locate_label(slc, lw)
655: 
656:                     if inline:
657:                         lcarg = lc
658:                     else:
659:                         lcarg = None
660:                     rotation, new = self.calc_label_rot_and_inline(
661:                         slc0, ind, lw, lcarg,
662:                         inline_spacing)
663: 
664:                     # Actually add the label
665:                     add_label(x, y, rotation, lev, cvalue)
666: 
667:                     # If inline, add new contours
668:                     if inline:
669:                         for n in new:
670:                             # Add path if not empty or single point
671:                             if len(n) > 1:
672:                                 additions.append(mpath.Path(n))
673:                 else:  # If not adding label, keep old path
674:                     additions.append(linepath)
675: 
676:             # After looping over all segments on a contour, remove old
677:             # paths and add new ones if inlining
678:             if inline:
679:                 del paths[:]
680:                 paths.extend(additions)
681: 
682: 
683: def _find_closest_point_on_leg(p1, p2, p0):
684:     '''find closest point to p0 on line segment connecting p1 and p2'''
685: 
686:     # handle degenerate case
687:     if np.all(p2 == p1):
688:         d = np.sum((p0 - p1)**2)
689:         return d, p1
690: 
691:     d21 = p2 - p1
692:     d01 = p0 - p1
693: 
694:     # project on to line segment to find closest point
695:     proj = np.dot(d01, d21) / np.dot(d21, d21)
696:     if proj < 0:
697:         proj = 0
698:     if proj > 1:
699:         proj = 1
700:     pc = p1 + proj * d21
701: 
702:     # find squared distance
703:     d = np.sum((pc-p0)**2)
704: 
705:     return d, pc
706: 
707: 
708: def _find_closest_point_on_path(lc, point):
709:     '''
710:     lc: coordinates of vertices
711:     point: coordinates of test point
712:     '''
713: 
714:     # find index of closest vertex for this segment
715:     ds = np.sum((lc - point[None, :])**2, 1)
716:     imin = np.argmin(ds)
717: 
718:     dmin = np.inf
719:     xcmin = None
720:     legmin = (None, None)
721: 
722:     closed = mlab.is_closed_polygon(lc)
723: 
724:     # build list of legs before and after this vertex
725:     legs = []
726:     if imin > 0 or closed:
727:         legs.append(((imin-1) % len(lc), imin))
728:     if imin < len(lc) - 1 or closed:
729:         legs.append((imin, (imin+1) % len(lc)))
730: 
731:     for leg in legs:
732:         d, xc = _find_closest_point_on_leg(lc[leg[0]], lc[leg[1]], point)
733:         if d < dmin:
734:             dmin = d
735:             xcmin = xc
736:             legmin = leg
737: 
738:     return (dmin, xcmin, legmin)
739: 
740: 
741: class ContourSet(cm.ScalarMappable, ContourLabeler):
742:     '''
743:     Store a set of contour lines or filled regions.
744: 
745:     User-callable method: clabel
746: 
747:     Useful attributes:
748:       ax:
749:         The axes object in which the contours are drawn
750: 
751:       collections:
752:         a silent_list of LineCollections or PolyCollections
753: 
754:       levels:
755:         contour levels
756: 
757:       layers:
758:         same as levels for line contours; half-way between
759:         levels for filled contours.  See :meth:`_process_colors`.
760:     '''
761: 
762:     def __init__(self, ax, *args, **kwargs):
763:         '''
764:         Draw contour lines or filled regions, depending on
765:         whether keyword arg 'filled' is *False* (default) or *True*.
766: 
767:         The first three arguments must be:
768: 
769:           *ax*: axes object.
770: 
771:           *levels*: [level0, level1, ..., leveln]
772:             A list of floating point numbers indicating the contour
773:             levels.
774: 
775:           *allsegs*: [level0segs, level1segs, ...]
776:             List of all the polygon segments for all the *levels*.
777:             For contour lines ``len(allsegs) == len(levels)``, and for
778:             filled contour regions ``len(allsegs) = len(levels)-1``.
779: 
780:             level0segs = [polygon0, polygon1, ...]
781: 
782:             polygon0 = array_like [[x0,y0], [x1,y1], ...]
783: 
784:           *allkinds*: *None* or [level0kinds, level1kinds, ...]
785:             Optional list of all the polygon vertex kinds (code types), as
786:             described and used in Path.   This is used to allow multiply-
787:             connected paths such as holes within filled polygons.
788:             If not *None*, len(allkinds) == len(allsegs).
789: 
790:             level0kinds = [polygon0kinds, ...]
791: 
792:             polygon0kinds = [vertexcode0, vertexcode1, ...]
793: 
794:             If *allkinds* is not *None*, usually all polygons for a particular
795:             contour level are grouped together so that
796: 
797:             level0segs = [polygon0] and level0kinds = [polygon0kinds].
798: 
799:         Keyword arguments are as described in
800:         :attr:`matplotlib.contour.QuadContourSet.contour_doc`.
801:         '''
802:         self.ax = ax
803:         self.levels = kwargs.pop('levels', None)
804:         self.filled = kwargs.pop('filled', False)
805:         self.linewidths = kwargs.pop('linewidths', None)
806:         self.linestyles = kwargs.pop('linestyles', None)
807: 
808:         self.hatches = kwargs.pop('hatches', [None])
809: 
810:         self.alpha = kwargs.pop('alpha', None)
811:         self.origin = kwargs.pop('origin', None)
812:         self.extent = kwargs.pop('extent', None)
813:         cmap = kwargs.pop('cmap', None)
814:         self.colors = kwargs.pop('colors', None)
815:         norm = kwargs.pop('norm', None)
816:         vmin = kwargs.pop('vmin', None)
817:         vmax = kwargs.pop('vmax', None)
818:         self.extend = kwargs.pop('extend', 'neither')
819:         self.antialiased = kwargs.pop('antialiased', None)
820:         if self.antialiased is None and self.filled:
821:             self.antialiased = False  # eliminate artifacts; we are not
822:                                       # stroking the boundaries.
823:             # The default for line contours will be taken from
824:             # the LineCollection default, which uses the
825:             # rcParams['lines.antialiased']
826: 
827:         self.nchunk = kwargs.pop('nchunk', 0)
828:         self.locator = kwargs.pop('locator', None)
829:         if (isinstance(norm, colors.LogNorm)
830:                 or isinstance(self.locator, ticker.LogLocator)):
831:             self.logscale = True
832:             if norm is None:
833:                 norm = colors.LogNorm()
834:             if self.extend is not 'neither':
835:                 raise ValueError('extend kwarg does not work yet with log '
836:                                  ' scale')
837:         else:
838:             self.logscale = False
839: 
840:         if self.origin not in [None, 'lower', 'upper', 'image']:
841:             raise ValueError("If given, *origin* must be one of [ 'lower' |"
842:                              " 'upper' | 'image']")
843:         if self.extent is not None and len(self.extent) != 4:
844:             raise ValueError("If given, *extent* must be '[ *None* |"
845:                              " (x0,x1,y0,y1) ]'")
846:         if self.colors is not None and cmap is not None:
847:             raise ValueError('Either colors or cmap must be None')
848:         if self.origin == 'image':
849:             self.origin = mpl.rcParams['image.origin']
850: 
851:         self._transform = kwargs.pop('transform', None)
852: 
853:         kwargs = self._process_args(*args, **kwargs)
854:         self._process_levels()
855: 
856:         if self.colors is not None:
857:             ncolors = len(self.levels)
858:             if self.filled:
859:                 ncolors -= 1
860:             i0 = 0
861: 
862:             # Handle the case where colors are given for the extended
863:             # parts of the contour.
864:             extend_min = self.extend in ['min', 'both']
865:             extend_max = self.extend in ['max', 'both']
866:             use_set_under_over = False
867:             # if we are extending the lower end, and we've been given enough
868:             # colors then skip the first color in the resulting cmap. For the
869:             # extend_max case we don't need to worry about passing more colors
870:             # than ncolors as ListedColormap will clip.
871:             total_levels = ncolors + int(extend_min) + int(extend_max)
872:             if (len(self.colors) == total_levels and
873:                     any([extend_min, extend_max])):
874:                 use_set_under_over = True
875:                 if extend_min:
876:                     i0 = 1
877: 
878:             cmap = colors.ListedColormap(self.colors[i0:None], N=ncolors)
879: 
880:             if use_set_under_over:
881:                 if extend_min:
882:                     cmap.set_under(self.colors[0])
883:                 if extend_max:
884:                     cmap.set_over(self.colors[-1])
885: 
886:         if self.filled:
887:             self.collections = cbook.silent_list('mcoll.PathCollection')
888:         else:
889:             self.collections = cbook.silent_list('mcoll.LineCollection')
890:         # label lists must be initialized here
891:         self.labelTexts = []
892:         self.labelCValues = []
893: 
894:         kw = {'cmap': cmap}
895:         if norm is not None:
896:             kw['norm'] = norm
897:         # sets self.cmap, norm if needed;
898:         cm.ScalarMappable.__init__(self, **kw)
899:         if vmin is not None:
900:             self.norm.vmin = vmin
901:         if vmax is not None:
902:             self.norm.vmax = vmax
903:         self._process_colors()
904: 
905:         self.allsegs, self.allkinds = self._get_allsegs_and_allkinds()
906: 
907:         if self.filled:
908:             if self.linewidths is not None:
909:                 warnings.warn('linewidths is ignored by contourf')
910: 
911:             # Lower and upper contour levels.
912:             lowers, uppers = self._get_lowers_and_uppers()
913: 
914:             # Ensure allkinds can be zipped below.
915:             if self.allkinds is None:
916:                 self.allkinds = [None] * len(self.allsegs)
917: 
918:             # Default zorder taken from Collection
919:             zorder = kwargs.pop('zorder', 1)
920:             for level, level_upper, segs, kinds in \
921:                     zip(lowers, uppers, self.allsegs, self.allkinds):
922:                 paths = self._make_paths(segs, kinds)
923: 
924:                 col = mcoll.PathCollection(
925:                     paths,
926:                     antialiaseds=(self.antialiased,),
927:                     edgecolors='none',
928:                     alpha=self.alpha,
929:                     transform=self.get_transform(),
930:                     zorder=zorder)
931:                 self.ax.add_collection(col, autolim=False)
932:                 self.collections.append(col)
933:         else:
934:             tlinewidths = self._process_linewidths()
935:             self.tlinewidths = tlinewidths
936:             tlinestyles = self._process_linestyles()
937:             aa = self.antialiased
938:             if aa is not None:
939:                 aa = (self.antialiased,)
940:             # Default zorder taken from LineCollection
941:             zorder = kwargs.pop('zorder', 2)
942:             for level, width, lstyle, segs in \
943:                     zip(self.levels, tlinewidths, tlinestyles, self.allsegs):
944:                 col = mcoll.LineCollection(
945:                     segs,
946:                     antialiaseds=aa,
947:                     linewidths=width,
948:                     linestyles=[lstyle],
949:                     alpha=self.alpha,
950:                     transform=self.get_transform(),
951:                     zorder=zorder)
952:                 col.set_label('_nolegend_')
953:                 self.ax.add_collection(col, autolim=False)
954:                 self.collections.append(col)
955: 
956:         for col in self.collections:
957:             col.sticky_edges.x[:] = [self._mins[0], self._maxs[0]]
958:             col.sticky_edges.y[:] = [self._mins[1], self._maxs[1]]
959:         self.ax.update_datalim([self._mins, self._maxs])
960:         self.ax.autoscale_view(tight=True)
961: 
962:         self.changed()  # set the colors
963: 
964:         if kwargs:
965:             s = ", ".join(map(repr, kwargs))
966:             warnings.warn('The following kwargs were not used by contour: ' +
967:                           s)
968: 
969:     def get_transform(self):
970:         '''
971:         Return the :class:`~matplotlib.transforms.Transform`
972:         instance used by this ContourSet.
973:         '''
974:         if self._transform is None:
975:             self._transform = self.ax.transData
976:         elif (not isinstance(self._transform, mtransforms.Transform)
977:               and hasattr(self._transform, '_as_mpl_transform')):
978:             self._transform = self._transform._as_mpl_transform(self.ax)
979:         return self._transform
980: 
981:     def __getstate__(self):
982:         state = self.__dict__.copy()
983:         # the C object _contour_generator cannot currently be pickled. This
984:         # isn't a big issue as it is not actually used once the contour has
985:         # been calculated.
986:         state['_contour_generator'] = None
987:         return state
988: 
989:     def legend_elements(self, variable_name='x', str_format=str):
990:         '''
991:         Return a list of artist and labels suitable for passing through
992:         to :func:`plt.legend` which represent this ContourSet.
993: 
994:         Args:
995: 
996:             *variable_name*: the string used inside the inequality used
997:               on the labels
998: 
999:             *str_format*: function used to format the numbers in the labels
1000:         '''
1001:         artists = []
1002:         labels = []
1003: 
1004:         if self.filled:
1005:             lowers, uppers = self._get_lowers_and_uppers()
1006:             n_levels = len(self.collections)
1007: 
1008:             for i, (collection, lower, upper) in enumerate(
1009:                     zip(self.collections, lowers, uppers)):
1010:                 patch = mpatches.Rectangle(
1011:                     (0, 0), 1, 1,
1012:                     facecolor=collection.get_facecolor()[0],
1013:                     hatch=collection.get_hatch(),
1014:                     alpha=collection.get_alpha())
1015:                 artists.append(patch)
1016: 
1017:                 lower = str_format(lower)
1018:                 upper = str_format(upper)
1019: 
1020:                 if i == 0 and self.extend in ('min', 'both'):
1021:                     labels.append(r'$%s \leq %s$' % (variable_name,
1022:                                                      lower))
1023:                 elif i == n_levels - 1 and self.extend in ('max', 'both'):
1024:                     labels.append(r'$%s > %s$' % (variable_name,
1025:                                                   upper))
1026:                 else:
1027:                     labels.append(r'$%s < %s \leq %s$' % (lower,
1028:                                                           variable_name,
1029:                                                           upper))
1030:         else:
1031:             for collection, level in zip(self.collections, self.levels):
1032: 
1033:                 patch = mcoll.LineCollection(None)
1034:                 patch.update_from(collection)
1035: 
1036:                 artists.append(patch)
1037:                 # format the level for insertion into the labels
1038:                 level = str_format(level)
1039:                 labels.append(r'$%s = %s$' % (variable_name, level))
1040: 
1041:         return artists, labels
1042: 
1043:     def _process_args(self, *args, **kwargs):
1044:         '''
1045:         Process *args* and *kwargs*; override in derived classes.
1046: 
1047:         Must set self.levels, self.zmin and self.zmax, and update axes
1048:         limits.
1049:         '''
1050:         self.levels = args[0]
1051:         self.allsegs = args[1]
1052:         self.allkinds = len(args) > 2 and args[2] or None
1053:         self.zmax = np.max(self.levels)
1054:         self.zmin = np.min(self.levels)
1055:         self._auto = False
1056: 
1057:         # Check lengths of levels and allsegs.
1058:         if self.filled:
1059:             if len(self.allsegs) != len(self.levels) - 1:
1060:                 raise ValueError('must be one less number of segments as '
1061:                                  'levels')
1062:         else:
1063:             if len(self.allsegs) != len(self.levels):
1064:                 raise ValueError('must be same number of segments as levels')
1065: 
1066:         # Check length of allkinds.
1067:         if (self.allkinds is not None and
1068:                 len(self.allkinds) != len(self.allsegs)):
1069:             raise ValueError('allkinds has different length to allsegs')
1070: 
1071:         # Determine x,y bounds and update axes data limits.
1072:         flatseglist = [s for seg in self.allsegs for s in seg]
1073:         points = np.concatenate(flatseglist, axis=0)
1074:         self._mins = points.min(axis=0)
1075:         self._maxs = points.max(axis=0)
1076: 
1077:         return kwargs
1078: 
1079:     def _get_allsegs_and_allkinds(self):
1080:         '''
1081:         Override in derived classes to create and return allsegs and allkinds.
1082:         allkinds can be None.
1083:         '''
1084:         return self.allsegs, self.allkinds
1085: 
1086:     def _get_lowers_and_uppers(self):
1087:         '''
1088:         Return (lowers,uppers) for filled contours.
1089:         '''
1090:         lowers = self._levels[:-1]
1091:         if self.zmin == lowers[0]:
1092:             # Include minimum values in lowest interval
1093:             lowers = lowers.copy()  # so we don't change self._levels
1094:             if self.logscale:
1095:                 lowers[0] = 0.99 * self.zmin
1096:             else:
1097:                 lowers[0] -= 1
1098:         uppers = self._levels[1:]
1099:         return (lowers, uppers)
1100: 
1101:     def _make_paths(self, segs, kinds):
1102:         if kinds is not None:
1103:             return [mpath.Path(seg, codes=kind)
1104:                     for seg, kind in zip(segs, kinds)]
1105:         else:
1106:             return [mpath.Path(seg) for seg in segs]
1107: 
1108:     def changed(self):
1109:         tcolors = [(tuple(rgba),)
1110:                    for rgba in self.to_rgba(self.cvalues, alpha=self.alpha)]
1111:         self.tcolors = tcolors
1112:         hatches = self.hatches * len(tcolors)
1113:         for color, hatch, collection in zip(tcolors, hatches,
1114:                                             self.collections):
1115:             if self.filled:
1116:                 collection.set_facecolor(color)
1117:                 # update the collection's hatch (may be None)
1118:                 collection.set_hatch(hatch)
1119:             else:
1120:                 collection.set_color(color)
1121:         for label, cv in zip(self.labelTexts, self.labelCValues):
1122:             label.set_alpha(self.alpha)
1123:             label.set_color(self.labelMappable.to_rgba(cv))
1124:         # add label colors
1125:         cm.ScalarMappable.changed(self)
1126: 
1127:     def _autolev(self, N):
1128:         '''
1129:         Select contour levels to span the data.
1130: 
1131:         We need two more levels for filled contours than for
1132:         line contours, because for the latter we need to specify
1133:         the lower and upper boundary of each range. For example,
1134:         a single contour boundary, say at z = 0, requires only
1135:         one contour line, but two filled regions, and therefore
1136:         three levels to provide boundaries for both regions.
1137:         '''
1138:         if self.locator is None:
1139:             if self.logscale:
1140:                 self.locator = ticker.LogLocator()
1141:             else:
1142:                 self.locator = ticker.MaxNLocator(N + 1, min_n_ticks=1)
1143: 
1144:         lev = self.locator.tick_values(self.zmin, self.zmax)
1145:         self._auto = True
1146:         return lev
1147: 
1148:     def _contour_level_args(self, z, args):
1149:         '''
1150:         Determine the contour levels and store in self.levels.
1151:         '''
1152:         if self.filled:
1153:             fn = 'contourf'
1154:         else:
1155:             fn = 'contour'
1156:         self._auto = False
1157:         if self.levels is None:
1158:             if len(args) == 0:
1159:                 lev = self._autolev(7)
1160:             else:
1161:                 level_arg = args[0]
1162:                 try:
1163:                     if type(level_arg) == int:
1164:                         lev = self._autolev(level_arg)
1165:                     else:
1166:                         lev = np.asarray(level_arg).astype(np.float64)
1167:                 except:
1168:                     raise TypeError(
1169:                         "Last {0} arg must give levels; see help({0})"
1170:                         .format(fn))
1171:             self.levels = lev
1172:         else:
1173:             self.levels = np.asarray(self.levels).astype(np.float64)
1174: 
1175:         if not self.filled:
1176:             inside = (self.levels > self.zmin) & (self.levels < self.zmax)
1177:             self.levels = self.levels[inside]
1178:             if len(self.levels) == 0:
1179:                 self.levels = [self.zmin]
1180:                 warnings.warn("No contour levels were found"
1181:                               " within the data range.")
1182: 
1183:         if self.filled and len(self.levels) < 2:
1184:             raise ValueError("Filled contours require at least 2 levels.")
1185: 
1186:         if len(self.levels) > 1 and np.min(np.diff(self.levels)) <= 0.0:
1187:             if hasattr(self, '_corner_mask') and self._corner_mask == 'legacy':
1188:                 warnings.warn("Contour levels are not increasing")
1189:             else:
1190:                 raise ValueError("Contour levels must be increasing")
1191: 
1192:     @property
1193:     def vmin(self):
1194:         warnings.warn("vmin is deprecated and will be removed in 2.2 "
1195:                       "and not replaced.",
1196:                       mplDeprecation)
1197:         return getattr(self, '_vmin', None)
1198: 
1199:     @property
1200:     def vmax(self):
1201:         warnings.warn("vmax is deprecated and will be removed in 2.2 "
1202:                       "and not replaced.",
1203:                       mplDeprecation)
1204:         return getattr(self, '_vmax', None)
1205: 
1206:     def _process_levels(self):
1207:         '''
1208:         Assign values to :attr:`layers` based on :attr:`levels`,
1209:         adding extended layers as needed if contours are filled.
1210: 
1211:         For line contours, layers simply coincide with levels;
1212:         a line is a thin layer.  No extended levels are needed
1213:         with line contours.
1214:         '''
1215:         # following are deprecated and will be removed in 2.2
1216:         self._vmin = np.min(self.levels)
1217:         self._vmax = np.max(self.levels)
1218: 
1219:         # Make a private _levels to include extended regions; we
1220:         # want to leave the original levels attribute unchanged.
1221:         # (Colorbar needs this even for line contours.)
1222:         self._levels = list(self.levels)
1223: 
1224:         if self.extend in ('both', 'min'):
1225:             self._levels.insert(0, min(self.levels[0], self.zmin) - 1)
1226:         if self.extend in ('both', 'max'):
1227:             self._levels.append(max(self.levels[-1], self.zmax) + 1)
1228:         self._levels = np.asarray(self._levels)
1229: 
1230:         if not self.filled:
1231:             self.layers = self.levels
1232:             return
1233: 
1234:         # layer values are mid-way between levels
1235:         self.layers = 0.5 * (self._levels[:-1] + self._levels[1:])
1236:         # ...except that extended layers must be outside the
1237:         # normed range:
1238:         if self.extend in ('both', 'min'):
1239:             self.layers[0] = -1e150
1240:         if self.extend in ('both', 'max'):
1241:             self.layers[-1] = 1e150
1242: 
1243:     def _process_colors(self):
1244:         '''
1245:         Color argument processing for contouring.
1246: 
1247:         Note that we base the color mapping on the contour levels
1248:         and layers, not on the actual range of the Z values.  This
1249:         means we don't have to worry about bad values in Z, and we
1250:         always have the full dynamic range available for the selected
1251:         levels.
1252: 
1253:         The color is based on the midpoint of the layer, except for
1254:         extended end layers.  By default, the norm vmin and vmax
1255:         are the extreme values of the non-extended levels.  Hence,
1256:         the layer color extremes are not the extreme values of
1257:         the colormap itself, but approach those values as the number
1258:         of levels increases.  An advantage of this scheme is that
1259:         line contours, when added to filled contours, take on
1260:         colors that are consistent with those of the filled regions;
1261:         for example, a contour line on the boundary between two
1262:         regions will have a color intermediate between those
1263:         of the regions.
1264: 
1265:         '''
1266:         self.monochrome = self.cmap.monochrome
1267:         if self.colors is not None:
1268:             # Generate integers for direct indexing.
1269:             i0, i1 = 0, len(self.levels)
1270:             if self.filled:
1271:                 i1 -= 1
1272:                 # Out of range indices for over and under:
1273:                 if self.extend in ('both', 'min'):
1274:                     i0 -= 1
1275:                 if self.extend in ('both', 'max'):
1276:                     i1 += 1
1277:             self.cvalues = list(range(i0, i1))
1278:             self.set_norm(colors.NoNorm())
1279:         else:
1280:             self.cvalues = self.layers
1281:         self.set_array(self.levels)
1282:         self.autoscale_None()
1283:         if self.extend in ('both', 'max', 'min'):
1284:             self.norm.clip = False
1285: 
1286:         # self.tcolors are set by the "changed" method
1287: 
1288:     def _process_linewidths(self):
1289:         linewidths = self.linewidths
1290:         Nlev = len(self.levels)
1291:         if linewidths is None:
1292:             tlinewidths = [(mpl.rcParams['lines.linewidth'],)] * Nlev
1293:         else:
1294:             if not cbook.iterable(linewidths):
1295:                 linewidths = [linewidths] * Nlev
1296:             else:
1297:                 linewidths = list(linewidths)
1298:                 if len(linewidths) < Nlev:
1299:                     nreps = int(np.ceil(Nlev / len(linewidths)))
1300:                     linewidths = linewidths * nreps
1301:                 if len(linewidths) > Nlev:
1302:                     linewidths = linewidths[:Nlev]
1303:             tlinewidths = [(w,) for w in linewidths]
1304:         return tlinewidths
1305: 
1306:     def _process_linestyles(self):
1307:         linestyles = self.linestyles
1308:         Nlev = len(self.levels)
1309:         if linestyles is None:
1310:             tlinestyles = ['solid'] * Nlev
1311:             if self.monochrome:
1312:                 neg_ls = mpl.rcParams['contour.negative_linestyle']
1313:                 eps = - (self.zmax - self.zmin) * 1e-15
1314:                 for i, lev in enumerate(self.levels):
1315:                     if lev < eps:
1316:                         tlinestyles[i] = neg_ls
1317:         else:
1318:             if isinstance(linestyles, six.string_types):
1319:                 tlinestyles = [linestyles] * Nlev
1320:             elif cbook.iterable(linestyles):
1321:                 tlinestyles = list(linestyles)
1322:                 if len(tlinestyles) < Nlev:
1323:                     nreps = int(np.ceil(Nlev / len(linestyles)))
1324:                     tlinestyles = tlinestyles * nreps
1325:                 if len(tlinestyles) > Nlev:
1326:                     tlinestyles = tlinestyles[:Nlev]
1327:             else:
1328:                 raise ValueError("Unrecognized type for linestyles kwarg")
1329:         return tlinestyles
1330: 
1331:     def get_alpha(self):
1332:         '''returns alpha to be applied to all ContourSet artists'''
1333:         return self.alpha
1334: 
1335:     def set_alpha(self, alpha):
1336:         '''sets alpha for all ContourSet artists'''
1337:         self.alpha = alpha
1338:         self.changed()
1339: 
1340:     def find_nearest_contour(self, x, y, indices=None, pixel=True):
1341:         '''
1342:         Finds contour that is closest to a point.  Defaults to
1343:         measuring distance in pixels (screen space - useful for manual
1344:         contour labeling), but this can be controlled via a keyword
1345:         argument.
1346: 
1347:         Returns a tuple containing the contour, segment, index of
1348:         segment, x & y of segment point and distance to minimum point.
1349: 
1350:         Optional keyword arguments:
1351: 
1352:           *indices*:
1353:             Indexes of contour levels to consider when looking for
1354:             nearest point.  Defaults to using all levels.
1355: 
1356:           *pixel*:
1357:             If *True*, measure distance in pixel space, if not, measure
1358:             distance in axes space.  Defaults to *True*.
1359: 
1360:         '''
1361: 
1362:         # This function uses a method that is probably quite
1363:         # inefficient based on converting each contour segment to
1364:         # pixel coordinates and then comparing the given point to
1365:         # those coordinates for each contour.  This will probably be
1366:         # quite slow for complex contours, but for normal use it works
1367:         # sufficiently well that the time is not noticeable.
1368:         # Nonetheless, improvements could probably be made.
1369: 
1370:         if indices is None:
1371:             indices = list(xrange(len(self.levels)))
1372: 
1373:         dmin = np.inf
1374:         conmin = None
1375:         segmin = None
1376:         xmin = None
1377:         ymin = None
1378: 
1379:         point = np.array([x, y])
1380: 
1381:         for icon in indices:
1382:             con = self.collections[icon]
1383:             trans = con.get_transform()
1384:             paths = con.get_paths()
1385: 
1386:             for segNum, linepath in enumerate(paths):
1387:                 lc = linepath.vertices
1388:                 # transfer all data points to screen coordinates if desired
1389:                 if pixel:
1390:                     lc = trans.transform(lc)
1391: 
1392:                 d, xc, leg = _find_closest_point_on_path(lc, point)
1393:                 if d < dmin:
1394:                     dmin = d
1395:                     conmin = icon
1396:                     segmin = segNum
1397:                     imin = leg[1]
1398:                     xmin = xc[0]
1399:                     ymin = xc[1]
1400: 
1401:         return (conmin, segmin, imin, xmin, ymin, dmin)
1402: 
1403: 
1404: class QuadContourSet(ContourSet):
1405:     '''
1406:     Create and store a set of contour lines or filled regions.
1407: 
1408:     User-callable method: :meth:`clabel`
1409: 
1410:     Useful attributes:
1411:       ax:
1412:         The axes object in which the contours are drawn
1413: 
1414:       collections:
1415:         A silent_list of LineCollections or PolyCollections
1416: 
1417:       levels:
1418:         Contour levels
1419: 
1420:       layers:
1421:         Same as levels for line contours; half-way between
1422:         levels for filled contours.  See :meth:`_process_colors` method.
1423:     '''
1424: 
1425:     def _process_args(self, *args, **kwargs):
1426:         '''
1427:         Process args and kwargs.
1428:         '''
1429:         if isinstance(args[0], QuadContourSet):
1430:             if self.levels is None:
1431:                 self.levels = args[0].levels
1432:             self.zmin = args[0].zmin
1433:             self.zmax = args[0].zmax
1434:             self._corner_mask = args[0]._corner_mask
1435:             if self._corner_mask == 'legacy':
1436:                 contour_generator = args[0].Cntr
1437:             else:
1438:                 contour_generator = args[0]._contour_generator
1439:             self._mins = args[0]._mins
1440:             self._maxs = args[0]._maxs
1441:         else:
1442:             self._corner_mask = kwargs.pop('corner_mask', None)
1443:             if self._corner_mask is None:
1444:                 self._corner_mask = mpl.rcParams['contour.corner_mask']
1445: 
1446:             x, y, z = self._contour_args(args, kwargs)
1447: 
1448:             _mask = ma.getmask(z)
1449:             if _mask is ma.nomask or not _mask.any():
1450:                 _mask = None
1451: 
1452:             if self._corner_mask == 'legacy':
1453:                 cbook.warn_deprecated('1.5',
1454:                                       name="corner_mask='legacy'",
1455:                                       alternative='corner_mask=False or True')
1456:                 contour_generator = _cntr.Cntr(x, y, z.filled(), _mask)
1457:             else:
1458:                 contour_generator = _contour.QuadContourGenerator(
1459:                     x, y, z.filled(), _mask, self._corner_mask, self.nchunk)
1460: 
1461:             t = self.get_transform()
1462: 
1463:             # if the transform is not trans data, and some part of it
1464:             # contains transData, transform the xs and ys to data coordinates
1465:             if (t != self.ax.transData and
1466:                     any(t.contains_branch_seperately(self.ax.transData))):
1467:                 trans_to_data = t - self.ax.transData
1468:                 pts = (np.vstack([x.flat, y.flat]).T)
1469:                 transformed_pts = trans_to_data.transform(pts)
1470:                 x = transformed_pts[..., 0]
1471:                 y = transformed_pts[..., 1]
1472: 
1473:             self._mins = [ma.min(x), ma.min(y)]
1474:             self._maxs = [ma.max(x), ma.max(y)]
1475: 
1476:         if self._corner_mask == 'legacy':
1477:             self.Cntr = contour_generator
1478:         else:
1479:             self._contour_generator = contour_generator
1480: 
1481:         return kwargs
1482: 
1483:     def _get_allsegs_and_allkinds(self):
1484:         '''
1485:         Create and return allsegs and allkinds by calling underlying C code.
1486:         '''
1487:         allsegs = []
1488:         if self.filled:
1489:             lowers, uppers = self._get_lowers_and_uppers()
1490:             allkinds = []
1491:             for level, level_upper in zip(lowers, uppers):
1492:                 if self._corner_mask == 'legacy':
1493:                     nlist = self.Cntr.trace(level, level_upper,
1494:                                             nchunk=self.nchunk)
1495:                     nseg = len(nlist) // 2
1496:                     vertices = nlist[:nseg]
1497:                     kinds = nlist[nseg:]
1498:                 else:
1499:                     vertices, kinds = \
1500:                         self._contour_generator.create_filled_contour(
1501:                                                            level, level_upper)
1502:                 allsegs.append(vertices)
1503:                 allkinds.append(kinds)
1504:         else:
1505:             allkinds = None
1506:             for level in self.levels:
1507:                 if self._corner_mask == 'legacy':
1508:                     nlist = self.Cntr.trace(level)
1509:                     nseg = len(nlist) // 2
1510:                     vertices = nlist[:nseg]
1511:                 else:
1512:                     vertices = self._contour_generator.create_contour(level)
1513:                 allsegs.append(vertices)
1514:         return allsegs, allkinds
1515: 
1516:     def _contour_args(self, args, kwargs):
1517:         if self.filled:
1518:             fn = 'contourf'
1519:         else:
1520:             fn = 'contour'
1521:         Nargs = len(args)
1522:         if Nargs <= 2:
1523:             z = ma.asarray(args[0], dtype=np.float64)
1524:             x, y = self._initialize_x_y(z)
1525:             args = args[1:]
1526:         elif Nargs <= 4:
1527:             x, y, z = self._check_xyz(args[:3], kwargs)
1528:             args = args[3:]
1529:         else:
1530:             raise TypeError("Too many arguments to %s; see help(%s)" %
1531:                             (fn, fn))
1532:         z = ma.masked_invalid(z, copy=False)
1533:         self.zmax = float(z.max())
1534:         self.zmin = float(z.min())
1535:         if self.logscale and self.zmin <= 0:
1536:             z = ma.masked_where(z <= 0, z)
1537:             warnings.warn('Log scale: values of z <= 0 have been masked')
1538:             self.zmin = float(z.min())
1539:         self._contour_level_args(z, args)
1540:         return (x, y, z)
1541: 
1542:     def _check_xyz(self, args, kwargs):
1543:         '''
1544:         For functions like contour, check that the dimensions
1545:         of the input arrays match; if x and y are 1D, convert
1546:         them to 2D using meshgrid.
1547: 
1548:         Possible change: I think we should make and use an ArgumentError
1549:         Exception class (here and elsewhere).
1550:         '''
1551:         x, y = args[:2]
1552:         kwargs = self.ax._process_unit_info(xdata=x, ydata=y, kwargs=kwargs)
1553:         x = self.ax.convert_xunits(x)
1554:         y = self.ax.convert_yunits(y)
1555: 
1556:         x = np.asarray(x, dtype=np.float64)
1557:         y = np.asarray(y, dtype=np.float64)
1558:         z = ma.asarray(args[2], dtype=np.float64)
1559: 
1560:         if z.ndim != 2:
1561:             raise TypeError("Input z must be a 2D array.")
1562:         elif z.shape[0] < 2 or z.shape[1] < 2:
1563:             raise TypeError("Input z must be at least a 2x2 array.")
1564:         else:
1565:             Ny, Nx = z.shape
1566: 
1567:         if x.ndim != y.ndim:
1568:             raise TypeError("Number of dimensions of x and y should match.")
1569: 
1570:         if x.ndim == 1:
1571: 
1572:             nx, = x.shape
1573:             ny, = y.shape
1574: 
1575:             if nx != Nx:
1576:                 raise TypeError("Length of x must be number of columns in z.")
1577: 
1578:             if ny != Ny:
1579:                 raise TypeError("Length of y must be number of rows in z.")
1580: 
1581:             x, y = np.meshgrid(x, y)
1582: 
1583:         elif x.ndim == 2:
1584: 
1585:             if x.shape != z.shape:
1586:                 raise TypeError("Shape of x does not match that of z: found "
1587:                                 "{0} instead of {1}.".format(x.shape, z.shape))
1588: 
1589:             if y.shape != z.shape:
1590:                 raise TypeError("Shape of y does not match that of z: found "
1591:                                 "{0} instead of {1}.".format(y.shape, z.shape))
1592:         else:
1593:             raise TypeError("Inputs x and y must be 1D or 2D.")
1594: 
1595:         return x, y, z
1596: 
1597:     def _initialize_x_y(self, z):
1598:         '''
1599:         Return X, Y arrays such that contour(Z) will match imshow(Z)
1600:         if origin is not None.
1601:         The center of pixel Z[i,j] depends on origin:
1602:         if origin is None, x = j, y = i;
1603:         if origin is 'lower', x = j + 0.5, y = i + 0.5;
1604:         if origin is 'upper', x = j + 0.5, y = Nrows - i - 0.5
1605:         If extent is not None, x and y will be scaled to match,
1606:         as in imshow.
1607:         If origin is None and extent is not None, then extent
1608:         will give the minimum and maximum values of x and y.
1609:         '''
1610:         if z.ndim != 2:
1611:             raise TypeError("Input must be a 2D array.")
1612:         elif z.shape[0] < 2 or z.shape[1] < 2:
1613:             raise TypeError("Input z must be at least a 2x2 array.")
1614:         else:
1615:             Ny, Nx = z.shape
1616:         if self.origin is None:  # Not for image-matching.
1617:             if self.extent is None:
1618:                 return np.meshgrid(np.arange(Nx), np.arange(Ny))
1619:             else:
1620:                 x0, x1, y0, y1 = self.extent
1621:                 x = np.linspace(x0, x1, Nx)
1622:                 y = np.linspace(y0, y1, Ny)
1623:                 return np.meshgrid(x, y)
1624:         # Match image behavior:
1625:         if self.extent is None:
1626:             x0, x1, y0, y1 = (0, Nx, 0, Ny)
1627:         else:
1628:             x0, x1, y0, y1 = self.extent
1629:         dx = float(x1 - x0) / Nx
1630:         dy = float(y1 - y0) / Ny
1631:         x = x0 + (np.arange(Nx) + 0.5) * dx
1632:         y = y0 + (np.arange(Ny) + 0.5) * dy
1633:         if self.origin == 'upper':
1634:             y = y[::-1]
1635:         return np.meshgrid(x, y)
1636: 
1637:     contour_doc = '''
1638:         Plot contours.
1639: 
1640:         :func:`~matplotlib.pyplot.contour` and
1641:         :func:`~matplotlib.pyplot.contourf` draw contour lines and
1642:         filled contours, respectively.  Except as noted, function
1643:         signatures and return values are the same for both versions.
1644: 
1645:         :func:`~matplotlib.pyplot.contourf` differs from the MATLAB
1646:         version in that it does not draw the polygon edges.
1647:         To draw edges, add line contours with
1648:         calls to :func:`~matplotlib.pyplot.contour`.
1649: 
1650: 
1651:         Call signatures::
1652: 
1653:           contour(Z)
1654: 
1655:         make a contour plot of an array *Z*. The level values are chosen
1656:         automatically.
1657: 
1658:         ::
1659: 
1660:           contour(X,Y,Z)
1661: 
1662:         *X*, *Y* specify the (x, y) coordinates of the surface
1663: 
1664:         ::
1665: 
1666:           contour(Z,N)
1667:           contour(X,Y,Z,N)
1668: 
1669:         contour up to *N* automatically-chosen levels.
1670: 
1671:         ::
1672: 
1673:           contour(Z,V)
1674:           contour(X,Y,Z,V)
1675: 
1676:         draw contour lines at the values specified in sequence *V*,
1677:         which must be in increasing order.
1678: 
1679:         ::
1680: 
1681:           contourf(..., V)
1682: 
1683:         fill the ``len(V)-1`` regions between the values in *V*,
1684:         which must be in increasing order.
1685: 
1686:         ::
1687: 
1688:           contour(Z, **kwargs)
1689: 
1690:         Use keyword args to control colors, linewidth, origin, cmap ... see
1691:         below for more details.
1692: 
1693:         *X* and *Y* must both be 2-D with the same shape as *Z*, or they
1694:         must both be 1-D such that ``len(X)`` is the number of columns in
1695:         *Z* and ``len(Y)`` is the number of rows in *Z*.
1696: 
1697:         ``C = contour(...)`` returns a
1698:         :class:`~matplotlib.contour.QuadContourSet` object.
1699: 
1700:         Optional keyword arguments:
1701: 
1702:           *corner_mask*: [ *True* | *False* | 'legacy' ]
1703:             Enable/disable corner masking, which only has an effect if *Z* is
1704:             a masked array.  If *False*, any quad touching a masked point is
1705:             masked out.  If *True*, only the triangular corners of quads
1706:             nearest those points are always masked out, other triangular
1707:             corners comprising three unmasked points are contoured as usual.
1708:             If 'legacy', the old contouring algorithm is used, which is
1709:             equivalent to *False* and is deprecated, only remaining whilst the
1710:             new algorithm is tested fully.
1711: 
1712:             If not specified, the default is taken from
1713:             rcParams['contour.corner_mask'], which is True unless it has
1714:             been modified.
1715: 
1716:           *colors*: [ *None* | string | (mpl_colors) ]
1717:             If *None*, the colormap specified by cmap will be used.
1718: 
1719:             If a string, like 'r' or 'red', all levels will be plotted in this
1720:             color.
1721: 
1722:             If a tuple of matplotlib color args (string, float, rgb, etc),
1723:             different levels will be plotted in different colors in the order
1724:             specified.
1725: 
1726:           *alpha*: float
1727:             The alpha blending value
1728: 
1729:           *cmap*: [ *None* | Colormap ]
1730:             A cm :class:`~matplotlib.colors.Colormap` instance or
1731:             *None*. If *cmap* is *None* and *colors* is *None*, a
1732:             default Colormap is used.
1733: 
1734:           *norm*: [ *None* | Normalize ]
1735:             A :class:`matplotlib.colors.Normalize` instance for
1736:             scaling data values to colors. If *norm* is *None* and
1737:             *colors* is *None*, the default linear scaling is used.
1738: 
1739:           *vmin*, *vmax*: [ *None* | scalar ]
1740:             If not *None*, either or both of these values will be
1741:             supplied to the :class:`matplotlib.colors.Normalize`
1742:             instance, overriding the default color scaling based on
1743:             *levels*.
1744: 
1745:           *levels*: [level0, level1, ..., leveln]
1746:             A list of floating point numbers indicating the level
1747:             curves to draw, in increasing order; e.g., to draw just
1748:             the zero contour pass ``levels=[0]``
1749: 
1750:           *origin*: [ *None* | 'upper' | 'lower' | 'image' ]
1751:             If *None*, the first value of *Z* will correspond to the
1752:             lower left corner, location (0,0). If 'image', the rc
1753:             value for ``image.origin`` will be used.
1754: 
1755:             This keyword is not active if *X* and *Y* are specified in
1756:             the call to contour.
1757: 
1758:           *extent*: [ *None* | (x0,x1,y0,y1) ]
1759: 
1760:             If *origin* is not *None*, then *extent* is interpreted as
1761:             in :func:`matplotlib.pyplot.imshow`: it gives the outer
1762:             pixel boundaries. In this case, the position of Z[0,0]
1763:             is the center of the pixel, not a corner. If *origin* is
1764:             *None*, then (*x0*, *y0*) is the position of Z[0,0], and
1765:             (*x1*, *y1*) is the position of Z[-1,-1].
1766: 
1767:             This keyword is not active if *X* and *Y* are specified in
1768:             the call to contour.
1769: 
1770:           *locator*: [ *None* | ticker.Locator subclass ]
1771:             If *locator* is *None*, the default
1772:             :class:`~matplotlib.ticker.MaxNLocator` is used. The
1773:             locator is used to determine the contour levels if they
1774:             are not given explicitly via the *V* argument.
1775: 
1776:           *extend*: [ 'neither' | 'both' | 'min' | 'max' ]
1777:             Unless this is 'neither', contour levels are automatically
1778:             added to one or both ends of the range so that all data
1779:             are included. These added ranges are then mapped to the
1780:             special colormap values which default to the ends of the
1781:             colormap range, but can be set via
1782:             :meth:`matplotlib.colors.Colormap.set_under` and
1783:             :meth:`matplotlib.colors.Colormap.set_over` methods.
1784: 
1785:           *xunits*, *yunits*: [ *None* | registered units ]
1786:             Override axis units by specifying an instance of a
1787:             :class:`matplotlib.units.ConversionInterface`.
1788: 
1789:           *antialiased*: [ *True* | *False* ]
1790:             enable antialiasing, overriding the defaults.  For
1791:             filled contours, the default is *True*.  For line contours,
1792:             it is taken from rcParams['lines.antialiased'].
1793: 
1794:           *nchunk*: [ 0 | integer ]
1795:             If 0, no subdivision of the domain.  Specify a positive integer to
1796:             divide the domain into subdomains of *nchunk* by *nchunk* quads.
1797:             Chunking reduces the maximum length of polygons generated by the
1798:             contouring algorithm which reduces the rendering workload passed
1799:             on to the backend and also requires slightly less RAM.  It can
1800:             however introduce rendering artifacts at chunk boundaries depending
1801:             on the backend, the *antialiased* flag and value of *alpha*.
1802: 
1803:         contour-only keyword arguments:
1804: 
1805:           *linewidths*: [ *None* | number | tuple of numbers ]
1806:             If *linewidths* is *None*, the default width in
1807:             ``lines.linewidth`` in ``matplotlibrc`` is used.
1808: 
1809:             If a number, all levels will be plotted with this linewidth.
1810: 
1811:             If a tuple, different levels will be plotted with different
1812:             linewidths in the order specified.
1813: 
1814:           *linestyles*: [ *None* | 'solid' | 'dashed' | 'dashdot' | 'dotted' ]
1815:             If *linestyles* is *None*, the default is 'solid' unless
1816:             the lines are monochrome.  In that case, negative
1817:             contours will take their linestyle from the ``matplotlibrc``
1818:             ``contour.negative_linestyle`` setting.
1819: 
1820:             *linestyles* can also be an iterable of the above strings
1821:             specifying a set of linestyles to be used. If this
1822:             iterable is shorter than the number of contour levels
1823:             it will be repeated as necessary.
1824: 
1825:         contourf-only keyword arguments:
1826: 
1827:           *hatches*:
1828:             A list of cross hatch patterns to use on the filled areas.
1829:             If None, no hatching will be added to the contour.
1830:             Hatching is supported in the PostScript, PDF, SVG and Agg
1831:             backends only.
1832: 
1833: 
1834:         Note: contourf fills intervals that are closed at the top; that
1835:         is, for boundaries *z1* and *z2*, the filled region is::
1836: 
1837:             z1 < z <= z2
1838: 
1839:         There is one exception: if the lowest boundary coincides with
1840:         the minimum value of the *z* array, then that minimum value
1841:         will be included in the lowest interval.
1842:         '''
1843: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_39391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3, (-1)), 'unicode', u'\nThese are classes to support contour plotting and labelling for the Axes class.\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 7, 0))

# 'import six' statement (line 7)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39392 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six')

if (type(import_39392) is not StypyTypeError):

    if (import_39392 != 'pyd_module'):
        __import__(import_39392)
        sys_modules_39393 = sys.modules[import_39392]
        import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six', sys_modules_39393.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 7, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 7)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 7, 0), 'six', import_39392)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 8, 0))

# 'from six.moves import xrange' statement (line 8)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39394 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'six.moves')

if (type(import_39394) is not StypyTypeError):

    if (import_39394 != 'pyd_module'):
        __import__(import_39394)
        sys_modules_39395 = sys.modules[import_39394]
        import_from_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'six.moves', sys_modules_39395.module_type_store, module_type_store, ['xrange'])
        nest_module(stypy.reporting.localization.Localization(__file__, 8, 0), __file__, sys_modules_39395, sys_modules_39395.module_type_store, module_type_store)
    else:
        from six.moves import xrange

        import_from_module(stypy.reporting.localization.Localization(__file__, 8, 0), 'six.moves', None, module_type_store, ['xrange'], [xrange])

else:
    # Assigning a type to the variable 'six.moves' (line 8)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 8, 0), 'six.moves', import_39394)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'import warnings' statement (line 10)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'import matplotlib' statement (line 11)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39396 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'matplotlib')

if (type(import_39396) is not StypyTypeError):

    if (import_39396 != 'pyd_module'):
        __import__(import_39396)
        sys_modules_39397 = sys.modules[import_39396]
        import_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'mpl', sys_modules_39397.module_type_store, module_type_store)
    else:
        import matplotlib as mpl

        import_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'mpl', matplotlib, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib' (line 11)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'matplotlib', import_39396)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'import numpy' statement (line 12)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39398 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy')

if (type(import_39398) is not StypyTypeError):

    if (import_39398 != 'pyd_module'):
        __import__(import_39398)
        sys_modules_39399 = sys.modules[import_39398]
        import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'np', sys_modules_39399.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 12)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 12, 0), 'numpy', import_39398)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 13, 0))

# 'from numpy import ma' statement (line 13)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39400 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy')

if (type(import_39400) is not StypyTypeError):

    if (import_39400 != 'pyd_module'):
        __import__(import_39400)
        sys_modules_39401 = sys.modules[import_39400]
        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy', sys_modules_39401.module_type_store, module_type_store, ['ma'])
        nest_module(stypy.reporting.localization.Localization(__file__, 13, 0), __file__, sys_modules_39401, sys_modules_39401.module_type_store, module_type_store)
    else:
        from numpy import ma

        import_from_module(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy', None, module_type_store, ['ma'], [ma])

else:
    # Assigning a type to the variable 'numpy' (line 13)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 13, 0), 'numpy', import_39400)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'import matplotlib._cntr' statement (line 14)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39402 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'matplotlib._cntr')

if (type(import_39402) is not StypyTypeError):

    if (import_39402 != 'pyd_module'):
        __import__(import_39402)
        sys_modules_39403 = sys.modules[import_39402]
        import_module(stypy.reporting.localization.Localization(__file__, 14, 0), '_cntr', sys_modules_39403.module_type_store, module_type_store)
    else:
        import matplotlib._cntr as _cntr

        import_module(stypy.reporting.localization.Localization(__file__, 14, 0), '_cntr', matplotlib._cntr, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib._cntr' (line 14)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 14, 0), 'matplotlib._cntr', import_39402)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'import matplotlib._contour' statement (line 15)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39404 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'matplotlib._contour')

if (type(import_39404) is not StypyTypeError):

    if (import_39404 != 'pyd_module'):
        __import__(import_39404)
        sys_modules_39405 = sys.modules[import_39404]
        import_module(stypy.reporting.localization.Localization(__file__, 15, 0), '_contour', sys_modules_39405.module_type_store, module_type_store)
    else:
        import matplotlib._contour as _contour

        import_module(stypy.reporting.localization.Localization(__file__, 15, 0), '_contour', matplotlib._contour, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib._contour' (line 15)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 15, 0), 'matplotlib._contour', import_39404)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 16, 0))

# 'import matplotlib.path' statement (line 16)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39406 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib.path')

if (type(import_39406) is not StypyTypeError):

    if (import_39406 != 'pyd_module'):
        __import__(import_39406)
        sys_modules_39407 = sys.modules[import_39406]
        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'mpath', sys_modules_39407.module_type_store, module_type_store)
    else:
        import matplotlib.path as mpath

        import_module(stypy.reporting.localization.Localization(__file__, 16, 0), 'mpath', matplotlib.path, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.path' (line 16)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 16, 0), 'matplotlib.path', import_39406)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'import matplotlib.ticker' statement (line 17)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39408 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'matplotlib.ticker')

if (type(import_39408) is not StypyTypeError):

    if (import_39408 != 'pyd_module'):
        __import__(import_39408)
        sys_modules_39409 = sys.modules[import_39408]
        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'ticker', sys_modules_39409.module_type_store, module_type_store)
    else:
        import matplotlib.ticker as ticker

        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'ticker', matplotlib.ticker, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.ticker' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'matplotlib.ticker', import_39408)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 18, 0))

# 'import matplotlib.cm' statement (line 18)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39410 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib.cm')

if (type(import_39410) is not StypyTypeError):

    if (import_39410 != 'pyd_module'):
        __import__(import_39410)
        sys_modules_39411 = sys.modules[import_39410]
        import_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'cm', sys_modules_39411.module_type_store, module_type_store)
    else:
        import matplotlib.cm as cm

        import_module(stypy.reporting.localization.Localization(__file__, 18, 0), 'cm', matplotlib.cm, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cm' (line 18)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 18, 0), 'matplotlib.cm', import_39410)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'import matplotlib.colors' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39412 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.colors')

if (type(import_39412) is not StypyTypeError):

    if (import_39412 != 'pyd_module'):
        __import__(import_39412)
        sys_modules_39413 = sys.modules[import_39412]
        import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'colors', sys_modules_39413.module_type_store, module_type_store)
    else:
        import matplotlib.colors as colors

        import_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'colors', matplotlib.colors, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.colors' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib.colors', import_39412)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'import matplotlib.collections' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39414 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.collections')

if (type(import_39414) is not StypyTypeError):

    if (import_39414 != 'pyd_module'):
        __import__(import_39414)
        sys_modules_39415 = sys.modules[import_39414]
        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'mcoll', sys_modules_39415.module_type_store, module_type_store)
    else:
        import matplotlib.collections as mcoll

        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'mcoll', matplotlib.collections, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.collections' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.collections', import_39414)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'import matplotlib.font_manager' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39416 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.font_manager')

if (type(import_39416) is not StypyTypeError):

    if (import_39416 != 'pyd_module'):
        __import__(import_39416)
        sys_modules_39417 = sys.modules[import_39416]
        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'font_manager', sys_modules_39417.module_type_store, module_type_store)
    else:
        import matplotlib.font_manager as font_manager

        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'font_manager', matplotlib.font_manager, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.font_manager' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.font_manager', import_39416)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'import matplotlib.text' statement (line 22)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39418 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.text')

if (type(import_39418) is not StypyTypeError):

    if (import_39418 != 'pyd_module'):
        __import__(import_39418)
        sys_modules_39419 = sys.modules[import_39418]
        import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'text', sys_modules_39419.module_type_store, module_type_store)
    else:
        import matplotlib.text as text

        import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'text', matplotlib.text, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.text' (line 22)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.text', import_39418)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'import matplotlib.cbook' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39420 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.cbook')

if (type(import_39420) is not StypyTypeError):

    if (import_39420 != 'pyd_module'):
        __import__(import_39420)
        sys_modules_39421 = sys.modules[import_39420]
        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'cbook', sys_modules_39421.module_type_store, module_type_store)
    else:
        import matplotlib.cbook as cbook

        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'cbook', matplotlib.cbook, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.cbook', import_39420)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'import matplotlib.mlab' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39422 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.mlab')

if (type(import_39422) is not StypyTypeError):

    if (import_39422 != 'pyd_module'):
        __import__(import_39422)
        sys_modules_39423 = sys.modules[import_39422]
        import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'mlab', sys_modules_39423.module_type_store, module_type_store)
    else:
        import matplotlib.mlab as mlab

        import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'mlab', matplotlib.mlab, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.mlab' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.mlab', import_39422)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'import matplotlib.mathtext' statement (line 25)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39424 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.mathtext')

if (type(import_39424) is not StypyTypeError):

    if (import_39424 != 'pyd_module'):
        __import__(import_39424)
        sys_modules_39425 = sys.modules[import_39424]
        import_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'mathtext', sys_modules_39425.module_type_store, module_type_store)
    else:
        import matplotlib.mathtext as mathtext

        import_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'mathtext', matplotlib.mathtext, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.mathtext' (line 25)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 25, 0), 'matplotlib.mathtext', import_39424)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 26, 0))

# 'import matplotlib.patches' statement (line 26)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39426 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.patches')

if (type(import_39426) is not StypyTypeError):

    if (import_39426 != 'pyd_module'):
        __import__(import_39426)
        sys_modules_39427 = sys.modules[import_39426]
        import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'mpatches', sys_modules_39427.module_type_store, module_type_store)
    else:
        import matplotlib.patches as mpatches

        import_module(stypy.reporting.localization.Localization(__file__, 26, 0), 'mpatches', matplotlib.patches, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.patches' (line 26)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 26, 0), 'matplotlib.patches', import_39426)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'import matplotlib.texmanager' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39428 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.texmanager')

if (type(import_39428) is not StypyTypeError):

    if (import_39428 != 'pyd_module'):
        __import__(import_39428)
        sys_modules_39429 = sys.modules[import_39428]
        import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'texmanager', sys_modules_39429.module_type_store, module_type_store)
    else:
        import matplotlib.texmanager as texmanager

        import_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'texmanager', matplotlib.texmanager, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.texmanager' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib.texmanager', import_39428)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'import matplotlib.transforms' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39430 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.transforms')

if (type(import_39430) is not StypyTypeError):

    if (import_39430 != 'pyd_module'):
        __import__(import_39430)
        sys_modules_39431 = sys.modules[import_39430]
        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'mtransforms', sys_modules_39431.module_type_store, module_type_store)
    else:
        import matplotlib.transforms as mtransforms

        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'mtransforms', matplotlib.transforms, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib.transforms', import_39430)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'from matplotlib.cbook import mplDeprecation' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39432 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.cbook')

if (type(import_39432) is not StypyTypeError):

    if (import_39432 != 'pyd_module'):
        __import__(import_39432)
        sys_modules_39433 = sys.modules[import_39432]
        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.cbook', sys_modules_39433.module_type_store, module_type_store, ['mplDeprecation'])
        nest_module(stypy.reporting.localization.Localization(__file__, 29, 0), __file__, sys_modules_39433, sys_modules_39433.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import mplDeprecation

        import_from_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.cbook', import_39432)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'from matplotlib.blocking_input import BlockingContourLabeler' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_39434 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.blocking_input')

if (type(import_39434) is not StypyTypeError):

    if (import_39434 != 'pyd_module'):
        __import__(import_39434)
        sys_modules_39435 = sys.modules[import_39434]
        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.blocking_input', sys_modules_39435.module_type_store, module_type_store, ['BlockingContourLabeler'])
        nest_module(stypy.reporting.localization.Localization(__file__, 32, 0), __file__, sys_modules_39435, sys_modules_39435.module_type_store, module_type_store)
    else:
        from matplotlib.blocking_input import BlockingContourLabeler

        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.blocking_input', None, module_type_store, ['BlockingContourLabeler'], [BlockingContourLabeler])

else:
    # Assigning a type to the variable 'matplotlib.blocking_input' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.blocking_input', import_39434)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

# Declaration of the 'ClabelText' class
# Getting the type of 'text' (line 42)
text_39436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 42, 17), 'text')
# Obtaining the member 'Text' of a type (line 42)
Text_39437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 42, 17), text_39436, 'Text')

class ClabelText(Text_39437, ):
    unicode_39438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, (-1)), 'unicode', u'\n    Unlike the ordinary text, the get_rotation returns an updated\n    angle in the pixel coordinate assuming that the input rotation is\n    an angle in data coordinate (or whatever transform set).\n    ')

    @norecursion
    def get_rotation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_rotation'
        module_type_store = module_type_store.open_function_context('get_rotation', 48, 4, False)
        # Assigning a type to the variable 'self' (line 49)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ClabelText.get_rotation.__dict__.__setitem__('stypy_localization', localization)
        ClabelText.get_rotation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ClabelText.get_rotation.__dict__.__setitem__('stypy_type_store', module_type_store)
        ClabelText.get_rotation.__dict__.__setitem__('stypy_function_name', 'ClabelText.get_rotation')
        ClabelText.get_rotation.__dict__.__setitem__('stypy_param_names_list', [])
        ClabelText.get_rotation.__dict__.__setitem__('stypy_varargs_param_name', None)
        ClabelText.get_rotation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ClabelText.get_rotation.__dict__.__setitem__('stypy_call_defaults', defaults)
        ClabelText.get_rotation.__dict__.__setitem__('stypy_call_varargs', varargs)
        ClabelText.get_rotation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ClabelText.get_rotation.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ClabelText.get_rotation', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_rotation', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_rotation(...)' code ##################

        
        # Assigning a Call to a Name (line 49):
        
        # Assigning a Call to a Name (line 49):
        
        # Call to get_rotation(...): (line 49)
        # Processing the call arguments (line 49)
        # Getting the type of 'self' (line 49)
        self_39442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 39), 'self', False)
        # Processing the call keyword arguments (line 49)
        kwargs_39443 = {}
        # Getting the type of 'text' (line 49)
        text_39439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 16), 'text', False)
        # Obtaining the member 'Text' of a type (line 49)
        Text_39440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 49, 16), text_39439, 'Text')
        # Obtaining the member 'get_rotation' of a type (line 49)
        get_rotation_39441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 49, 16), Text_39440, 'get_rotation')
        # Calling get_rotation(args, kwargs) (line 49)
        get_rotation_call_result_39444 = invoke(stypy.reporting.localization.Localization(__file__, 49, 16), get_rotation_39441, *[self_39442], **kwargs_39443)
        
        # Assigning a type to the variable 'angle' (line 49)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 8), 'angle', get_rotation_call_result_39444)
        
        # Assigning a Call to a Name (line 50):
        
        # Assigning a Call to a Name (line 50):
        
        # Call to get_transform(...): (line 50)
        # Processing the call keyword arguments (line 50)
        kwargs_39447 = {}
        # Getting the type of 'self' (line 50)
        self_39445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 16), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 50)
        get_transform_39446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 50, 16), self_39445, 'get_transform')
        # Calling get_transform(args, kwargs) (line 50)
        get_transform_call_result_39448 = invoke(stypy.reporting.localization.Localization(__file__, 50, 16), get_transform_39446, *[], **kwargs_39447)
        
        # Assigning a type to the variable 'trans' (line 50)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 50, 8), 'trans', get_transform_call_result_39448)
        
        # Assigning a Call to a Tuple (line 51):
        
        # Assigning a Call to a Name:
        
        # Call to get_position(...): (line 51)
        # Processing the call keyword arguments (line 51)
        kwargs_39451 = {}
        # Getting the type of 'self' (line 51)
        self_39449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 15), 'self', False)
        # Obtaining the member 'get_position' of a type (line 51)
        get_position_39450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 15), self_39449, 'get_position')
        # Calling get_position(args, kwargs) (line 51)
        get_position_call_result_39452 = invoke(stypy.reporting.localization.Localization(__file__, 51, 15), get_position_39450, *[], **kwargs_39451)
        
        # Assigning a type to the variable 'call_assignment_39286' (line 51)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 8), 'call_assignment_39286', get_position_call_result_39452)
        
        # Assigning a Call to a Name (line 51):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_39455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 8), 'int')
        # Processing the call keyword arguments
        kwargs_39456 = {}
        # Getting the type of 'call_assignment_39286' (line 51)
        call_assignment_39286_39453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 8), 'call_assignment_39286', False)
        # Obtaining the member '__getitem__' of a type (line 51)
        getitem___39454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 8), call_assignment_39286_39453, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_39457 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___39454, *[int_39455], **kwargs_39456)
        
        # Assigning a type to the variable 'call_assignment_39287' (line 51)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 8), 'call_assignment_39287', getitem___call_result_39457)
        
        # Assigning a Name to a Name (line 51):
        # Getting the type of 'call_assignment_39287' (line 51)
        call_assignment_39287_39458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 8), 'call_assignment_39287')
        # Assigning a type to the variable 'x' (line 51)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 8), 'x', call_assignment_39287_39458)
        
        # Assigning a Call to a Name (line 51):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_39461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 8), 'int')
        # Processing the call keyword arguments
        kwargs_39462 = {}
        # Getting the type of 'call_assignment_39286' (line 51)
        call_assignment_39286_39459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 8), 'call_assignment_39286', False)
        # Obtaining the member '__getitem__' of a type (line 51)
        getitem___39460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 8), call_assignment_39286_39459, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_39463 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___39460, *[int_39461], **kwargs_39462)
        
        # Assigning a type to the variable 'call_assignment_39288' (line 51)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 8), 'call_assignment_39288', getitem___call_result_39463)
        
        # Assigning a Name to a Name (line 51):
        # Getting the type of 'call_assignment_39288' (line 51)
        call_assignment_39288_39464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 8), 'call_assignment_39288')
        # Assigning a type to the variable 'y' (line 51)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 11), 'y', call_assignment_39288_39464)
        
        # Assigning a Call to a Name (line 52):
        
        # Assigning a Call to a Name (line 52):
        
        # Call to transform_angles(...): (line 52)
        # Processing the call arguments (line 52)
        
        # Call to array(...): (line 52)
        # Processing the call arguments (line 52)
        
        # Obtaining an instance of the builtin type 'list' (line 52)
        list_39469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 53), 'list')
        # Adding type elements to the builtin type 'list' instance (line 52)
        # Adding element type (line 52)
        # Getting the type of 'angle' (line 52)
        angle_39470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 54), 'angle', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 52, 53), list_39469, angle_39470)
        
        # Processing the call keyword arguments (line 52)
        kwargs_39471 = {}
        # Getting the type of 'np' (line 52)
        np_39467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 44), 'np', False)
        # Obtaining the member 'array' of a type (line 52)
        array_39468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 52, 44), np_39467, 'array')
        # Calling array(args, kwargs) (line 52)
        array_call_result_39472 = invoke(stypy.reporting.localization.Localization(__file__, 52, 44), array_39468, *[list_39469], **kwargs_39471)
        
        
        # Call to array(...): (line 53)
        # Processing the call arguments (line 53)
        
        # Obtaining an instance of the builtin type 'list' (line 53)
        list_39475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 53), 'list')
        # Adding type elements to the builtin type 'list' instance (line 53)
        # Adding element type (line 53)
        
        # Obtaining an instance of the builtin type 'list' (line 53)
        list_39476 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 54), 'list')
        # Adding type elements to the builtin type 'list' instance (line 53)
        # Adding element type (line 53)
        # Getting the type of 'x' (line 53)
        x_39477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 55), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 53, 54), list_39476, x_39477)
        # Adding element type (line 53)
        # Getting the type of 'y' (line 53)
        y_39478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 58), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 53, 54), list_39476, y_39478)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 53, 53), list_39475, list_39476)
        
        # Processing the call keyword arguments (line 53)
        kwargs_39479 = {}
        # Getting the type of 'np' (line 53)
        np_39473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 44), 'np', False)
        # Obtaining the member 'array' of a type (line 53)
        array_39474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 53, 44), np_39473, 'array')
        # Calling array(args, kwargs) (line 53)
        array_call_result_39480 = invoke(stypy.reporting.localization.Localization(__file__, 53, 44), array_39474, *[list_39475], **kwargs_39479)
        
        # Processing the call keyword arguments (line 52)
        kwargs_39481 = {}
        # Getting the type of 'trans' (line 52)
        trans_39465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 21), 'trans', False)
        # Obtaining the member 'transform_angles' of a type (line 52)
        transform_angles_39466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 52, 21), trans_39465, 'transform_angles')
        # Calling transform_angles(args, kwargs) (line 52)
        transform_angles_call_result_39482 = invoke(stypy.reporting.localization.Localization(__file__, 52, 21), transform_angles_39466, *[array_call_result_39472, array_call_result_39480], **kwargs_39481)
        
        # Assigning a type to the variable 'new_angles' (line 52)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 8), 'new_angles', transform_angles_call_result_39482)
        
        # Obtaining the type of the subscript
        int_39483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 26), 'int')
        # Getting the type of 'new_angles' (line 54)
        new_angles_39484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 15), 'new_angles')
        # Obtaining the member '__getitem__' of a type (line 54)
        getitem___39485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 54, 15), new_angles_39484, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 54)
        subscript_call_result_39486 = invoke(stypy.reporting.localization.Localization(__file__, 54, 15), getitem___39485, int_39483)
        
        # Assigning a type to the variable 'stypy_return_type' (line 54)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 54, 8), 'stypy_return_type', subscript_call_result_39486)
        
        # ################# End of 'get_rotation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_rotation' in the type store
        # Getting the type of 'stypy_return_type' (line 48)
        stypy_return_type_39487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_39487)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_rotation'
        return stypy_return_type_39487


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 42, 0, False)
        # Assigning a type to the variable 'self' (line 43)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ClabelText.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ClabelText' (line 42)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'ClabelText', ClabelText)
# Declaration of the 'ContourLabeler' class

class ContourLabeler(object, ):
    unicode_39488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 58, 4), 'unicode', u'Mixin to provide labelling capability to ContourSet')

    @norecursion
    def clabel(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'clabel'
        module_type_store = module_type_store.open_function_context('clabel', 60, 4, False)
        # Assigning a type to the variable 'self' (line 61)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 61, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.clabel.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.clabel.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.clabel.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.clabel.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.clabel')
        ContourLabeler.clabel.__dict__.__setitem__('stypy_param_names_list', [])
        ContourLabeler.clabel.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        ContourLabeler.clabel.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        ContourLabeler.clabel.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.clabel.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.clabel.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.clabel.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.clabel', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'clabel', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'clabel(...)' code ##################

        unicode_39489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 135, (-1)), 'unicode', u"\n        Label a contour plot.\n\n        Call signature::\n\n          clabel(cs, **kwargs)\n\n        Adds labels to line contours in *cs*, where *cs* is a\n        :class:`~matplotlib.contour.ContourSet` object returned by\n        contour.\n\n        ::\n\n          clabel(cs, v, **kwargs)\n\n        only labels contours listed in *v*.\n\n        Optional keyword arguments:\n\n          *fontsize*:\n            size in points or relative size e.g., 'smaller', 'x-large'\n\n          *colors*:\n            - if *None*, the color of each label matches the color of\n              the corresponding contour\n\n            - if one string color, e.g., *colors* = 'r' or *colors* =\n              'red', all labels will be plotted in this color\n\n            - if a tuple of matplotlib color args (string, float, rgb, etc),\n              different labels will be plotted in different colors in the order\n              specified\n\n          *inline*:\n            controls whether the underlying contour is removed or\n            not. Default is *True*.\n\n          *inline_spacing*:\n            space in pixels to leave on each side of label when\n            placing inline.  Defaults to 5.  This spacing will be\n            exact for labels at locations where the contour is\n            straight, less so for labels on curved contours.\n\n          *fmt*:\n            a format string for the label. Default is '%1.3f'\n            Alternatively, this can be a dictionary matching contour\n            levels with arbitrary strings to use for each contour level\n            (i.e., fmt[level]=string), or it can be any callable, such\n            as a :class:`~matplotlib.ticker.Formatter` instance, that\n            returns a string when called with a numeric contour level.\n\n          *manual*:\n            if *True*, contour labels will be placed manually using\n            mouse clicks.  Click the first button near a contour to\n            add a label, click the second button (or potentially both\n            mouse buttons at once) to finish adding labels.  The third\n            button can be used to remove the last label added, but\n            only if labels are not inline.  Alternatively, the keyboard\n            can be used to select label locations (enter to end label\n            placement, delete or backspace act like the third mouse button,\n            and any other key will select a label location).\n\n            *manual* can be an iterable object of x,y tuples. Contour labels\n            will be created as if mouse is clicked at each x,y positions.\n\n          *rightside_up*:\n            if *True* (default), label rotations will always be plus\n            or minus 90 degrees from level.\n\n          *use_clabeltext*:\n            if *True* (default is False), ClabelText class (instead of\n            matplotlib.Text) is used to create labels. ClabelText\n            recalculates rotation angles of texts during the drawing time,\n            therefore this can be used if aspect of the axes changes.\n        ")
        unicode_39490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, (-1)), 'unicode', u'\n        NOTES on how this all works:\n\n        clabel basically takes the input arguments and uses them to\n        add a list of "label specific" attributes to the ContourSet\n        object.  These attributes are all of the form label* and names\n        should be fairly self explanatory.\n\n        Once these attributes are set, clabel passes control to the\n        labels method (case of automatic label placement) or\n        BlockingContourLabeler (case of manual label placement).\n        ')
        
        # Assigning a Call to a Name (line 150):
        
        # Assigning a Call to a Name (line 150):
        
        # Call to get(...): (line 150)
        # Processing the call arguments (line 150)
        unicode_39493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 150, 30), 'unicode', u'fontsize')
        # Getting the type of 'None' (line 150)
        None_39494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 42), 'None', False)
        # Processing the call keyword arguments (line 150)
        kwargs_39495 = {}
        # Getting the type of 'kwargs' (line 150)
        kwargs_39491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 19), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 150)
        get_39492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 19), kwargs_39491, 'get')
        # Calling get(args, kwargs) (line 150)
        get_call_result_39496 = invoke(stypy.reporting.localization.Localization(__file__, 150, 19), get_39492, *[unicode_39493, None_39494], **kwargs_39495)
        
        # Assigning a type to the variable 'fontsize' (line 150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 8), 'fontsize', get_call_result_39496)
        
        # Assigning a Call to a Name (line 151):
        
        # Assigning a Call to a Name (line 151):
        
        # Call to get(...): (line 151)
        # Processing the call arguments (line 151)
        unicode_39499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 28), 'unicode', u'inline')
        int_39500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 38), 'int')
        # Processing the call keyword arguments (line 151)
        kwargs_39501 = {}
        # Getting the type of 'kwargs' (line 151)
        kwargs_39497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 17), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 151)
        get_39498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 17), kwargs_39497, 'get')
        # Calling get(args, kwargs) (line 151)
        get_call_result_39502 = invoke(stypy.reporting.localization.Localization(__file__, 151, 17), get_39498, *[unicode_39499, int_39500], **kwargs_39501)
        
        # Assigning a type to the variable 'inline' (line 151)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 151, 8), 'inline', get_call_result_39502)
        
        # Assigning a Call to a Name (line 152):
        
        # Assigning a Call to a Name (line 152):
        
        # Call to get(...): (line 152)
        # Processing the call arguments (line 152)
        unicode_39505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 152, 36), 'unicode', u'inline_spacing')
        int_39506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 152, 54), 'int')
        # Processing the call keyword arguments (line 152)
        kwargs_39507 = {}
        # Getting the type of 'kwargs' (line 152)
        kwargs_39503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 25), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 152)
        get_39504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 25), kwargs_39503, 'get')
        # Calling get(args, kwargs) (line 152)
        get_call_result_39508 = invoke(stypy.reporting.localization.Localization(__file__, 152, 25), get_39504, *[unicode_39505, int_39506], **kwargs_39507)
        
        # Assigning a type to the variable 'inline_spacing' (line 152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 152, 8), 'inline_spacing', get_call_result_39508)
        
        # Assigning a Call to a Attribute (line 153):
        
        # Assigning a Call to a Attribute (line 153):
        
        # Call to get(...): (line 153)
        # Processing the call arguments (line 153)
        unicode_39511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, 35), 'unicode', u'fmt')
        unicode_39512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 153, 42), 'unicode', u'%1.3f')
        # Processing the call keyword arguments (line 153)
        kwargs_39513 = {}
        # Getting the type of 'kwargs' (line 153)
        kwargs_39509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 24), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 153)
        get_39510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 24), kwargs_39509, 'get')
        # Calling get(args, kwargs) (line 153)
        get_call_result_39514 = invoke(stypy.reporting.localization.Localization(__file__, 153, 24), get_39510, *[unicode_39511, unicode_39512], **kwargs_39513)
        
        # Getting the type of 'self' (line 153)
        self_39515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 8), 'self')
        # Setting the type of the member 'labelFmt' of a type (line 153)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 8), self_39515, 'labelFmt', get_call_result_39514)
        
        # Assigning a Call to a Name (line 154):
        
        # Assigning a Call to a Name (line 154):
        
        # Call to get(...): (line 154)
        # Processing the call arguments (line 154)
        unicode_39518 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 154, 29), 'unicode', u'colors')
        # Getting the type of 'None' (line 154)
        None_39519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 39), 'None', False)
        # Processing the call keyword arguments (line 154)
        kwargs_39520 = {}
        # Getting the type of 'kwargs' (line 154)
        kwargs_39516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 18), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 154)
        get_39517 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 18), kwargs_39516, 'get')
        # Calling get(args, kwargs) (line 154)
        get_call_result_39521 = invoke(stypy.reporting.localization.Localization(__file__, 154, 18), get_39517, *[unicode_39518, None_39519], **kwargs_39520)
        
        # Assigning a type to the variable '_colors' (line 154)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 154, 8), '_colors', get_call_result_39521)
        
        # Assigning a Call to a Attribute (line 156):
        
        # Assigning a Call to a Attribute (line 156):
        
        # Call to get(...): (line 156)
        # Processing the call arguments (line 156)
        unicode_39524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 156, 42), 'unicode', u'use_clabeltext')
        # Getting the type of 'False' (line 156)
        False_39525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 60), 'False', False)
        # Processing the call keyword arguments (line 156)
        kwargs_39526 = {}
        # Getting the type of 'kwargs' (line 156)
        kwargs_39522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 31), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 156)
        get_39523 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 31), kwargs_39522, 'get')
        # Calling get(args, kwargs) (line 156)
        get_call_result_39527 = invoke(stypy.reporting.localization.Localization(__file__, 156, 31), get_39523, *[unicode_39524, False_39525], **kwargs_39526)
        
        # Getting the type of 'self' (line 156)
        self_39528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 8), 'self')
        # Setting the type of the member '_use_clabeltext' of a type (line 156)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 156, 8), self_39528, '_use_clabeltext', get_call_result_39527)
        
        # Assigning a Call to a Attribute (line 159):
        
        # Assigning a Call to a Attribute (line 159):
        
        # Call to get(...): (line 159)
        # Processing the call arguments (line 159)
        unicode_39531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 159, 38), 'unicode', u'manual')
        # Getting the type of 'False' (line 159)
        False_39532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 48), 'False', False)
        # Processing the call keyword arguments (line 159)
        kwargs_39533 = {}
        # Getting the type of 'kwargs' (line 159)
        kwargs_39529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 27), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 159)
        get_39530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 27), kwargs_39529, 'get')
        # Calling get(args, kwargs) (line 159)
        get_call_result_39534 = invoke(stypy.reporting.localization.Localization(__file__, 159, 27), get_39530, *[unicode_39531, False_39532], **kwargs_39533)
        
        # Getting the type of 'self' (line 159)
        self_39535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 8), 'self')
        # Setting the type of the member 'labelManual' of a type (line 159)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 8), self_39535, 'labelManual', get_call_result_39534)
        
        # Assigning a Call to a Attribute (line 161):
        
        # Assigning a Call to a Attribute (line 161):
        
        # Call to get(...): (line 161)
        # Processing the call arguments (line 161)
        unicode_39538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 161, 39), 'unicode', u'rightside_up')
        # Getting the type of 'True' (line 161)
        True_39539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 55), 'True', False)
        # Processing the call keyword arguments (line 161)
        kwargs_39540 = {}
        # Getting the type of 'kwargs' (line 161)
        kwargs_39536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 28), 'kwargs', False)
        # Obtaining the member 'get' of a type (line 161)
        get_39537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 28), kwargs_39536, 'get')
        # Calling get(args, kwargs) (line 161)
        get_call_result_39541 = invoke(stypy.reporting.localization.Localization(__file__, 161, 28), get_39537, *[unicode_39538, True_39539], **kwargs_39540)
        
        # Getting the type of 'self' (line 161)
        self_39542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 8), 'self')
        # Setting the type of the member 'rightside_up' of a type (line 161)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 161, 8), self_39542, 'rightside_up', get_call_result_39541)
        
        
        
        # Call to len(...): (line 162)
        # Processing the call arguments (line 162)
        # Getting the type of 'args' (line 162)
        args_39544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 15), 'args', False)
        # Processing the call keyword arguments (line 162)
        kwargs_39545 = {}
        # Getting the type of 'len' (line 162)
        len_39543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 11), 'len', False)
        # Calling len(args, kwargs) (line 162)
        len_call_result_39546 = invoke(stypy.reporting.localization.Localization(__file__, 162, 11), len_39543, *[args_39544], **kwargs_39545)
        
        int_39547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 162, 24), 'int')
        # Applying the binary operator '==' (line 162)
        result_eq_39548 = python_operator(stypy.reporting.localization.Localization(__file__, 162, 11), '==', len_call_result_39546, int_39547)
        
        # Testing the type of an if condition (line 162)
        if_condition_39549 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 162, 8), result_eq_39548)
        # Assigning a type to the variable 'if_condition_39549' (line 162)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 8), 'if_condition_39549', if_condition_39549)
        # SSA begins for if statement (line 162)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 163):
        
        # Assigning a Attribute to a Name (line 163):
        # Getting the type of 'self' (line 163)
        self_39550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 21), 'self')
        # Obtaining the member 'levels' of a type (line 163)
        levels_39551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 163, 21), self_39550, 'levels')
        # Assigning a type to the variable 'levels' (line 163)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 12), 'levels', levels_39551)
        
        # Assigning a Call to a Name (line 164):
        
        # Assigning a Call to a Name (line 164):
        
        # Call to list(...): (line 164)
        # Processing the call arguments (line 164)
        
        # Call to xrange(...): (line 164)
        # Processing the call arguments (line 164)
        
        # Call to len(...): (line 164)
        # Processing the call arguments (line 164)
        # Getting the type of 'self' (line 164)
        self_39555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 38), 'self', False)
        # Obtaining the member 'cvalues' of a type (line 164)
        cvalues_39556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 38), self_39555, 'cvalues')
        # Processing the call keyword arguments (line 164)
        kwargs_39557 = {}
        # Getting the type of 'len' (line 164)
        len_39554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 34), 'len', False)
        # Calling len(args, kwargs) (line 164)
        len_call_result_39558 = invoke(stypy.reporting.localization.Localization(__file__, 164, 34), len_39554, *[cvalues_39556], **kwargs_39557)
        
        # Processing the call keyword arguments (line 164)
        kwargs_39559 = {}
        # Getting the type of 'xrange' (line 164)
        xrange_39553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 27), 'xrange', False)
        # Calling xrange(args, kwargs) (line 164)
        xrange_call_result_39560 = invoke(stypy.reporting.localization.Localization(__file__, 164, 27), xrange_39553, *[len_call_result_39558], **kwargs_39559)
        
        # Processing the call keyword arguments (line 164)
        kwargs_39561 = {}
        # Getting the type of 'list' (line 164)
        list_39552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 22), 'list', False)
        # Calling list(args, kwargs) (line 164)
        list_call_result_39562 = invoke(stypy.reporting.localization.Localization(__file__, 164, 22), list_39552, *[xrange_call_result_39560], **kwargs_39561)
        
        # Assigning a type to the variable 'indices' (line 164)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 164, 12), 'indices', list_call_result_39562)
        # SSA branch for the else part of an if statement (line 162)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to len(...): (line 165)
        # Processing the call arguments (line 165)
        # Getting the type of 'args' (line 165)
        args_39564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 17), 'args', False)
        # Processing the call keyword arguments (line 165)
        kwargs_39565 = {}
        # Getting the type of 'len' (line 165)
        len_39563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 165, 13), 'len', False)
        # Calling len(args, kwargs) (line 165)
        len_call_result_39566 = invoke(stypy.reporting.localization.Localization(__file__, 165, 13), len_39563, *[args_39564], **kwargs_39565)
        
        int_39567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 165, 26), 'int')
        # Applying the binary operator '==' (line 165)
        result_eq_39568 = python_operator(stypy.reporting.localization.Localization(__file__, 165, 13), '==', len_call_result_39566, int_39567)
        
        # Testing the type of an if condition (line 165)
        if_condition_39569 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 165, 13), result_eq_39568)
        # Assigning a type to the variable 'if_condition_39569' (line 165)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 165, 13), 'if_condition_39569', if_condition_39569)
        # SSA begins for if statement (line 165)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 166):
        
        # Assigning a Call to a Name (line 166):
        
        # Call to list(...): (line 166)
        # Processing the call arguments (line 166)
        
        # Obtaining the type of the subscript
        int_39571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 166, 32), 'int')
        # Getting the type of 'args' (line 166)
        args_39572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 27), 'args', False)
        # Obtaining the member '__getitem__' of a type (line 166)
        getitem___39573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 166, 27), args_39572, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 166)
        subscript_call_result_39574 = invoke(stypy.reporting.localization.Localization(__file__, 166, 27), getitem___39573, int_39571)
        
        # Processing the call keyword arguments (line 166)
        kwargs_39575 = {}
        # Getting the type of 'list' (line 166)
        list_39570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 22), 'list', False)
        # Calling list(args, kwargs) (line 166)
        list_call_result_39576 = invoke(stypy.reporting.localization.Localization(__file__, 166, 22), list_39570, *[subscript_call_result_39574], **kwargs_39575)
        
        # Assigning a type to the variable 'levlabs' (line 166)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 12), 'levlabs', list_call_result_39576)
        
        # Assigning a Tuple to a Tuple (line 167):
        
        # Assigning a List to a Name (line 167):
        
        # Obtaining an instance of the builtin type 'list' (line 167)
        list_39577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 167, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 167)
        
        # Assigning a type to the variable 'tuple_assignment_39289' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 12), 'tuple_assignment_39289', list_39577)
        
        # Assigning a List to a Name (line 167):
        
        # Obtaining an instance of the builtin type 'list' (line 167)
        list_39578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 167, 34), 'list')
        # Adding type elements to the builtin type 'list' instance (line 167)
        
        # Assigning a type to the variable 'tuple_assignment_39290' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 12), 'tuple_assignment_39290', list_39578)
        
        # Assigning a Name to a Name (line 167):
        # Getting the type of 'tuple_assignment_39289' (line 167)
        tuple_assignment_39289_39579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 12), 'tuple_assignment_39289')
        # Assigning a type to the variable 'indices' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 12), 'indices', tuple_assignment_39289_39579)
        
        # Assigning a Name to a Name (line 167):
        # Getting the type of 'tuple_assignment_39290' (line 167)
        tuple_assignment_39290_39580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 167, 12), 'tuple_assignment_39290')
        # Assigning a type to the variable 'levels' (line 167)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 167, 21), 'levels', tuple_assignment_39290_39580)
        
        
        # Call to enumerate(...): (line 168)
        # Processing the call arguments (line 168)
        # Getting the type of 'self' (line 168)
        self_39582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 36), 'self', False)
        # Obtaining the member 'levels' of a type (line 168)
        levels_39583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 168, 36), self_39582, 'levels')
        # Processing the call keyword arguments (line 168)
        kwargs_39584 = {}
        # Getting the type of 'enumerate' (line 168)
        enumerate_39581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 168, 26), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 168)
        enumerate_call_result_39585 = invoke(stypy.reporting.localization.Localization(__file__, 168, 26), enumerate_39581, *[levels_39583], **kwargs_39584)
        
        # Testing the type of a for loop iterable (line 168)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 168, 12), enumerate_call_result_39585)
        # Getting the type of the for loop variable (line 168)
        for_loop_var_39586 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 168, 12), enumerate_call_result_39585)
        # Assigning a type to the variable 'i' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 12), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 168, 12), for_loop_var_39586))
        # Assigning a type to the variable 'lev' (line 168)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 168, 12), 'lev', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 168, 12), for_loop_var_39586))
        # SSA begins for a for statement (line 168)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'lev' (line 169)
        lev_39587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 19), 'lev')
        # Getting the type of 'levlabs' (line 169)
        levlabs_39588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 169, 26), 'levlabs')
        # Applying the binary operator 'in' (line 169)
        result_contains_39589 = python_operator(stypy.reporting.localization.Localization(__file__, 169, 19), 'in', lev_39587, levlabs_39588)
        
        # Testing the type of an if condition (line 169)
        if_condition_39590 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 169, 16), result_contains_39589)
        # Assigning a type to the variable 'if_condition_39590' (line 169)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 169, 16), 'if_condition_39590', if_condition_39590)
        # SSA begins for if statement (line 169)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 170)
        # Processing the call arguments (line 170)
        # Getting the type of 'i' (line 170)
        i_39593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 35), 'i', False)
        # Processing the call keyword arguments (line 170)
        kwargs_39594 = {}
        # Getting the type of 'indices' (line 170)
        indices_39591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 20), 'indices', False)
        # Obtaining the member 'append' of a type (line 170)
        append_39592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 170, 20), indices_39591, 'append')
        # Calling append(args, kwargs) (line 170)
        append_call_result_39595 = invoke(stypy.reporting.localization.Localization(__file__, 170, 20), append_39592, *[i_39593], **kwargs_39594)
        
        
        # Call to append(...): (line 171)
        # Processing the call arguments (line 171)
        # Getting the type of 'lev' (line 171)
        lev_39598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 34), 'lev', False)
        # Processing the call keyword arguments (line 171)
        kwargs_39599 = {}
        # Getting the type of 'levels' (line 171)
        levels_39596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 20), 'levels', False)
        # Obtaining the member 'append' of a type (line 171)
        append_39597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 20), levels_39596, 'append')
        # Calling append(args, kwargs) (line 171)
        append_call_result_39600 = invoke(stypy.reporting.localization.Localization(__file__, 171, 20), append_39597, *[lev_39598], **kwargs_39599)
        
        # SSA join for if statement (line 169)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to len(...): (line 172)
        # Processing the call arguments (line 172)
        # Getting the type of 'levels' (line 172)
        levels_39602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 19), 'levels', False)
        # Processing the call keyword arguments (line 172)
        kwargs_39603 = {}
        # Getting the type of 'len' (line 172)
        len_39601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 15), 'len', False)
        # Calling len(args, kwargs) (line 172)
        len_call_result_39604 = invoke(stypy.reporting.localization.Localization(__file__, 172, 15), len_39601, *[levels_39602], **kwargs_39603)
        
        
        # Call to len(...): (line 172)
        # Processing the call arguments (line 172)
        # Getting the type of 'levlabs' (line 172)
        levlabs_39606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 33), 'levlabs', False)
        # Processing the call keyword arguments (line 172)
        kwargs_39607 = {}
        # Getting the type of 'len' (line 172)
        len_39605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 29), 'len', False)
        # Calling len(args, kwargs) (line 172)
        len_call_result_39608 = invoke(stypy.reporting.localization.Localization(__file__, 172, 29), len_39605, *[levlabs_39606], **kwargs_39607)
        
        # Applying the binary operator '<' (line 172)
        result_lt_39609 = python_operator(stypy.reporting.localization.Localization(__file__, 172, 15), '<', len_call_result_39604, len_call_result_39608)
        
        # Testing the type of an if condition (line 172)
        if_condition_39610 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 172, 12), result_lt_39609)
        # Assigning a type to the variable 'if_condition_39610' (line 172)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 172, 12), 'if_condition_39610', if_condition_39610)
        # SSA begins for if statement (line 172)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 173):
        
        # Assigning a BinOp to a Name (line 173):
        unicode_39611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 173, 22), 'unicode', u'Specified levels ')
        
        # Call to str(...): (line 173)
        # Processing the call arguments (line 173)
        # Getting the type of 'levlabs' (line 173)
        levlabs_39613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 48), 'levlabs', False)
        # Processing the call keyword arguments (line 173)
        kwargs_39614 = {}
        # Getting the type of 'str' (line 173)
        str_39612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 44), 'str', False)
        # Calling str(args, kwargs) (line 173)
        str_call_result_39615 = invoke(stypy.reporting.localization.Localization(__file__, 173, 44), str_39612, *[levlabs_39613], **kwargs_39614)
        
        # Applying the binary operator '+' (line 173)
        result_add_39616 = python_operator(stypy.reporting.localization.Localization(__file__, 173, 22), '+', unicode_39611, str_call_result_39615)
        
        # Assigning a type to the variable 'msg' (line 173)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 16), 'msg', result_add_39616)
        
        # Getting the type of 'msg' (line 174)
        msg_39617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 16), 'msg')
        unicode_39618 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 174, 23), 'unicode', u"\n don't match available levels ")
        # Applying the binary operator '+=' (line 174)
        result_iadd_39619 = python_operator(stypy.reporting.localization.Localization(__file__, 174, 16), '+=', msg_39617, unicode_39618)
        # Assigning a type to the variable 'msg' (line 174)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 174, 16), 'msg', result_iadd_39619)
        
        
        # Getting the type of 'msg' (line 175)
        msg_39620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 16), 'msg')
        
        # Call to str(...): (line 175)
        # Processing the call arguments (line 175)
        # Getting the type of 'self' (line 175)
        self_39622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 27), 'self', False)
        # Obtaining the member 'levels' of a type (line 175)
        levels_39623 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 175, 27), self_39622, 'levels')
        # Processing the call keyword arguments (line 175)
        kwargs_39624 = {}
        # Getting the type of 'str' (line 175)
        str_39621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 175, 23), 'str', False)
        # Calling str(args, kwargs) (line 175)
        str_call_result_39625 = invoke(stypy.reporting.localization.Localization(__file__, 175, 23), str_39621, *[levels_39623], **kwargs_39624)
        
        # Applying the binary operator '+=' (line 175)
        result_iadd_39626 = python_operator(stypy.reporting.localization.Localization(__file__, 175, 16), '+=', msg_39620, str_call_result_39625)
        # Assigning a type to the variable 'msg' (line 175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 175, 16), 'msg', result_iadd_39626)
        
        
        # Call to ValueError(...): (line 176)
        # Processing the call arguments (line 176)
        # Getting the type of 'msg' (line 176)
        msg_39628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 33), 'msg', False)
        # Processing the call keyword arguments (line 176)
        kwargs_39629 = {}
        # Getting the type of 'ValueError' (line 176)
        ValueError_39627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 176)
        ValueError_call_result_39630 = invoke(stypy.reporting.localization.Localization(__file__, 176, 22), ValueError_39627, *[msg_39628], **kwargs_39629)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 176, 16), ValueError_call_result_39630, 'raise parameter', BaseException)
        # SSA join for if statement (line 172)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 165)
        module_type_store.open_ssa_branch('else')
        
        # Call to TypeError(...): (line 178)
        # Processing the call arguments (line 178)
        unicode_39632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 178, 28), 'unicode', u'Illegal arguments to clabel, see help(clabel)')
        # Processing the call keyword arguments (line 178)
        kwargs_39633 = {}
        # Getting the type of 'TypeError' (line 178)
        TypeError_39631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 178, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 178)
        TypeError_call_result_39634 = invoke(stypy.reporting.localization.Localization(__file__, 178, 18), TypeError_39631, *[unicode_39632], **kwargs_39633)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 178, 12), TypeError_call_result_39634, 'raise parameter', BaseException)
        # SSA join for if statement (line 165)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 162)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 179):
        
        # Assigning a Name to a Attribute (line 179):
        # Getting the type of 'levels' (line 179)
        levels_39635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 30), 'levels')
        # Getting the type of 'self' (line 179)
        self_39636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 179, 8), 'self')
        # Setting the type of the member 'labelLevelList' of a type (line 179)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 179, 8), self_39636, 'labelLevelList', levels_39635)
        
        # Assigning a Name to a Attribute (line 180):
        
        # Assigning a Name to a Attribute (line 180):
        # Getting the type of 'indices' (line 180)
        indices_39637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 31), 'indices')
        # Getting the type of 'self' (line 180)
        self_39638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 8), 'self')
        # Setting the type of the member 'labelIndiceList' of a type (line 180)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 180, 8), self_39638, 'labelIndiceList', indices_39637)
        
        # Assigning a Call to a Attribute (line 182):
        
        # Assigning a Call to a Attribute (line 182):
        
        # Call to FontProperties(...): (line 182)
        # Processing the call keyword arguments (line 182)
        kwargs_39641 = {}
        # Getting the type of 'font_manager' (line 182)
        font_manager_39639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 30), 'font_manager', False)
        # Obtaining the member 'FontProperties' of a type (line 182)
        FontProperties_39640 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 182, 30), font_manager_39639, 'FontProperties')
        # Calling FontProperties(args, kwargs) (line 182)
        FontProperties_call_result_39642 = invoke(stypy.reporting.localization.Localization(__file__, 182, 30), FontProperties_39640, *[], **kwargs_39641)
        
        # Getting the type of 'self' (line 182)
        self_39643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 182, 8), 'self')
        # Setting the type of the member 'labelFontProps' of a type (line 182)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 182, 8), self_39643, 'labelFontProps', FontProperties_call_result_39642)
        
        # Call to set_size(...): (line 183)
        # Processing the call arguments (line 183)
        # Getting the type of 'fontsize' (line 183)
        fontsize_39647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 37), 'fontsize', False)
        # Processing the call keyword arguments (line 183)
        kwargs_39648 = {}
        # Getting the type of 'self' (line 183)
        self_39644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 8), 'self', False)
        # Obtaining the member 'labelFontProps' of a type (line 183)
        labelFontProps_39645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 8), self_39644, 'labelFontProps')
        # Obtaining the member 'set_size' of a type (line 183)
        set_size_39646 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 183, 8), labelFontProps_39645, 'set_size')
        # Calling set_size(args, kwargs) (line 183)
        set_size_call_result_39649 = invoke(stypy.reporting.localization.Localization(__file__, 183, 8), set_size_39646, *[fontsize_39647], **kwargs_39648)
        
        
        # Assigning a Call to a Name (line 184):
        
        # Assigning a Call to a Name (line 184):
        
        # Call to get_size_in_points(...): (line 184)
        # Processing the call keyword arguments (line 184)
        kwargs_39653 = {}
        # Getting the type of 'self' (line 184)
        self_39650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 184, 24), 'self', False)
        # Obtaining the member 'labelFontProps' of a type (line 184)
        labelFontProps_39651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 24), self_39650, 'labelFontProps')
        # Obtaining the member 'get_size_in_points' of a type (line 184)
        get_size_in_points_39652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 184, 24), labelFontProps_39651, 'get_size_in_points')
        # Calling get_size_in_points(args, kwargs) (line 184)
        get_size_in_points_call_result_39654 = invoke(stypy.reporting.localization.Localization(__file__, 184, 24), get_size_in_points_39652, *[], **kwargs_39653)
        
        # Assigning a type to the variable 'font_size_pts' (line 184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 8), 'font_size_pts', get_size_in_points_call_result_39654)
        
        # Assigning a BinOp to a Attribute (line 185):
        
        # Assigning a BinOp to a Attribute (line 185):
        
        # Obtaining an instance of the builtin type 'list' (line 185)
        list_39655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 185, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 185)
        # Adding element type (line 185)
        # Getting the type of 'font_size_pts' (line 185)
        font_size_pts_39656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 34), 'font_size_pts')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 185, 33), list_39655, font_size_pts_39656)
        
        
        # Call to len(...): (line 185)
        # Processing the call arguments (line 185)
        # Getting the type of 'levels' (line 185)
        levels_39658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 55), 'levels', False)
        # Processing the call keyword arguments (line 185)
        kwargs_39659 = {}
        # Getting the type of 'len' (line 185)
        len_39657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 51), 'len', False)
        # Calling len(args, kwargs) (line 185)
        len_call_result_39660 = invoke(stypy.reporting.localization.Localization(__file__, 185, 51), len_39657, *[levels_39658], **kwargs_39659)
        
        # Applying the binary operator '*' (line 185)
        result_mul_39661 = python_operator(stypy.reporting.localization.Localization(__file__, 185, 33), '*', list_39655, len_call_result_39660)
        
        # Getting the type of 'self' (line 185)
        self_39662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 8), 'self')
        # Setting the type of the member 'labelFontSizeList' of a type (line 185)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 185, 8), self_39662, 'labelFontSizeList', result_mul_39661)
        
        # Type idiom detected: calculating its left and rigth part (line 187)
        # Getting the type of '_colors' (line 187)
        _colors_39663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 11), '_colors')
        # Getting the type of 'None' (line 187)
        None_39664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 22), 'None')
        
        (may_be_39665, more_types_in_union_39666) = may_be_none(_colors_39663, None_39664)

        if may_be_39665:

            if more_types_in_union_39666:
                # Runtime conditional SSA (line 187)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 188):
            
            # Assigning a Name to a Attribute (line 188):
            # Getting the type of 'self' (line 188)
            self_39667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 33), 'self')
            # Getting the type of 'self' (line 188)
            self_39668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 188, 12), 'self')
            # Setting the type of the member 'labelMappable' of a type (line 188)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 188, 12), self_39668, 'labelMappable', self_39667)
            
            # Assigning a Call to a Attribute (line 189):
            
            # Assigning a Call to a Attribute (line 189):
            
            # Call to take(...): (line 189)
            # Processing the call arguments (line 189)
            # Getting the type of 'self' (line 189)
            self_39671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 43), 'self', False)
            # Obtaining the member 'cvalues' of a type (line 189)
            cvalues_39672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 43), self_39671, 'cvalues')
            # Getting the type of 'self' (line 189)
            self_39673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 57), 'self', False)
            # Obtaining the member 'labelIndiceList' of a type (line 189)
            labelIndiceList_39674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 57), self_39673, 'labelIndiceList')
            # Processing the call keyword arguments (line 189)
            kwargs_39675 = {}
            # Getting the type of 'np' (line 189)
            np_39669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 35), 'np', False)
            # Obtaining the member 'take' of a type (line 189)
            take_39670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 35), np_39669, 'take')
            # Calling take(args, kwargs) (line 189)
            take_call_result_39676 = invoke(stypy.reporting.localization.Localization(__file__, 189, 35), take_39670, *[cvalues_39672, labelIndiceList_39674], **kwargs_39675)
            
            # Getting the type of 'self' (line 189)
            self_39677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 12), 'self')
            # Setting the type of the member 'labelCValueList' of a type (line 189)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 12), self_39677, 'labelCValueList', take_call_result_39676)

            if more_types_in_union_39666:
                # Runtime conditional SSA for else branch (line 187)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_39665) or more_types_in_union_39666):
            
            # Assigning a Call to a Name (line 191):
            
            # Assigning a Call to a Name (line 191):
            
            # Call to ListedColormap(...): (line 191)
            # Processing the call arguments (line 191)
            # Getting the type of '_colors' (line 191)
            _colors_39680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 41), '_colors', False)
            # Processing the call keyword arguments (line 191)
            
            # Call to len(...): (line 191)
            # Processing the call arguments (line 191)
            # Getting the type of 'self' (line 191)
            self_39682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 56), 'self', False)
            # Obtaining the member 'labelLevelList' of a type (line 191)
            labelLevelList_39683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 191, 56), self_39682, 'labelLevelList')
            # Processing the call keyword arguments (line 191)
            kwargs_39684 = {}
            # Getting the type of 'len' (line 191)
            len_39681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 52), 'len', False)
            # Calling len(args, kwargs) (line 191)
            len_call_result_39685 = invoke(stypy.reporting.localization.Localization(__file__, 191, 52), len_39681, *[labelLevelList_39683], **kwargs_39684)
            
            keyword_39686 = len_call_result_39685
            kwargs_39687 = {'N': keyword_39686}
            # Getting the type of 'colors' (line 191)
            colors_39678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 19), 'colors', False)
            # Obtaining the member 'ListedColormap' of a type (line 191)
            ListedColormap_39679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 191, 19), colors_39678, 'ListedColormap')
            # Calling ListedColormap(args, kwargs) (line 191)
            ListedColormap_call_result_39688 = invoke(stypy.reporting.localization.Localization(__file__, 191, 19), ListedColormap_39679, *[_colors_39680], **kwargs_39687)
            
            # Assigning a type to the variable 'cmap' (line 191)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 12), 'cmap', ListedColormap_call_result_39688)
            
            # Assigning a Call to a Attribute (line 192):
            
            # Assigning a Call to a Attribute (line 192):
            
            # Call to list(...): (line 192)
            # Processing the call arguments (line 192)
            
            # Call to xrange(...): (line 192)
            # Processing the call arguments (line 192)
            
            # Call to len(...): (line 192)
            # Processing the call arguments (line 192)
            # Getting the type of 'self' (line 192)
            self_39692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 51), 'self', False)
            # Obtaining the member 'labelLevelList' of a type (line 192)
            labelLevelList_39693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 51), self_39692, 'labelLevelList')
            # Processing the call keyword arguments (line 192)
            kwargs_39694 = {}
            # Getting the type of 'len' (line 192)
            len_39691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 47), 'len', False)
            # Calling len(args, kwargs) (line 192)
            len_call_result_39695 = invoke(stypy.reporting.localization.Localization(__file__, 192, 47), len_39691, *[labelLevelList_39693], **kwargs_39694)
            
            # Processing the call keyword arguments (line 192)
            kwargs_39696 = {}
            # Getting the type of 'xrange' (line 192)
            xrange_39690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 40), 'xrange', False)
            # Calling xrange(args, kwargs) (line 192)
            xrange_call_result_39697 = invoke(stypy.reporting.localization.Localization(__file__, 192, 40), xrange_39690, *[len_call_result_39695], **kwargs_39696)
            
            # Processing the call keyword arguments (line 192)
            kwargs_39698 = {}
            # Getting the type of 'list' (line 192)
            list_39689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 35), 'list', False)
            # Calling list(args, kwargs) (line 192)
            list_call_result_39699 = invoke(stypy.reporting.localization.Localization(__file__, 192, 35), list_39689, *[xrange_call_result_39697], **kwargs_39698)
            
            # Getting the type of 'self' (line 192)
            self_39700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 192, 12), 'self')
            # Setting the type of the member 'labelCValueList' of a type (line 192)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 192, 12), self_39700, 'labelCValueList', list_call_result_39699)
            
            # Assigning a Call to a Attribute (line 193):
            
            # Assigning a Call to a Attribute (line 193):
            
            # Call to ScalarMappable(...): (line 193)
            # Processing the call keyword arguments (line 193)
            # Getting the type of 'cmap' (line 193)
            cmap_39703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 56), 'cmap', False)
            keyword_39704 = cmap_39703
            
            # Call to NoNorm(...): (line 194)
            # Processing the call keyword arguments (line 194)
            kwargs_39707 = {}
            # Getting the type of 'colors' (line 194)
            colors_39705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 194, 56), 'colors', False)
            # Obtaining the member 'NoNorm' of a type (line 194)
            NoNorm_39706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 194, 56), colors_39705, 'NoNorm')
            # Calling NoNorm(args, kwargs) (line 194)
            NoNorm_call_result_39708 = invoke(stypy.reporting.localization.Localization(__file__, 194, 56), NoNorm_39706, *[], **kwargs_39707)
            
            keyword_39709 = NoNorm_call_result_39708
            kwargs_39710 = {'cmap': keyword_39704, 'norm': keyword_39709}
            # Getting the type of 'cm' (line 193)
            cm_39701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 33), 'cm', False)
            # Obtaining the member 'ScalarMappable' of a type (line 193)
            ScalarMappable_39702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 33), cm_39701, 'ScalarMappable')
            # Calling ScalarMappable(args, kwargs) (line 193)
            ScalarMappable_call_result_39711 = invoke(stypy.reporting.localization.Localization(__file__, 193, 33), ScalarMappable_39702, *[], **kwargs_39710)
            
            # Getting the type of 'self' (line 193)
            self_39712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 12), 'self')
            # Setting the type of the member 'labelMappable' of a type (line 193)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 193, 12), self_39712, 'labelMappable', ScalarMappable_call_result_39711)

            if (may_be_39665 and more_types_in_union_39666):
                # SSA join for if statement (line 187)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a List to a Attribute (line 196):
        
        # Assigning a List to a Attribute (line 196):
        
        # Obtaining an instance of the builtin type 'list' (line 196)
        list_39713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 196)
        
        # Getting the type of 'self' (line 196)
        self_39714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 8), 'self')
        # Setting the type of the member 'labelXYs' of a type (line 196)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 8), self_39714, 'labelXYs', list_39713)
        
        
        # Call to iterable(...): (line 198)
        # Processing the call arguments (line 198)
        # Getting the type of 'self' (line 198)
        self_39717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 26), 'self', False)
        # Obtaining the member 'labelManual' of a type (line 198)
        labelManual_39718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 26), self_39717, 'labelManual')
        # Processing the call keyword arguments (line 198)
        kwargs_39719 = {}
        # Getting the type of 'cbook' (line 198)
        cbook_39715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 198, 11), 'cbook', False)
        # Obtaining the member 'iterable' of a type (line 198)
        iterable_39716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 198, 11), cbook_39715, 'iterable')
        # Calling iterable(args, kwargs) (line 198)
        iterable_call_result_39720 = invoke(stypy.reporting.localization.Localization(__file__, 198, 11), iterable_39716, *[labelManual_39718], **kwargs_39719)
        
        # Testing the type of an if condition (line 198)
        if_condition_39721 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 198, 8), iterable_call_result_39720)
        # Assigning a type to the variable 'if_condition_39721' (line 198)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 198, 8), 'if_condition_39721', if_condition_39721)
        # SSA begins for if statement (line 198)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'self' (line 199)
        self_39722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 24), 'self')
        # Obtaining the member 'labelManual' of a type (line 199)
        labelManual_39723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 199, 24), self_39722, 'labelManual')
        # Testing the type of a for loop iterable (line 199)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 199, 12), labelManual_39723)
        # Getting the type of the for loop variable (line 199)
        for_loop_var_39724 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 199, 12), labelManual_39723)
        # Assigning a type to the variable 'x' (line 199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 12), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 199, 12), for_loop_var_39724))
        # Assigning a type to the variable 'y' (line 199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 12), 'y', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 199, 12), for_loop_var_39724))
        # SSA begins for a for statement (line 199)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to add_label_near(...): (line 200)
        # Processing the call arguments (line 200)
        # Getting the type of 'x' (line 200)
        x_39727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 36), 'x', False)
        # Getting the type of 'y' (line 200)
        y_39728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 39), 'y', False)
        # Getting the type of 'inline' (line 200)
        inline_39729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 42), 'inline', False)
        # Getting the type of 'inline_spacing' (line 201)
        inline_spacing_39730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 36), 'inline_spacing', False)
        # Processing the call keyword arguments (line 200)
        kwargs_39731 = {}
        # Getting the type of 'self' (line 200)
        self_39725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 16), 'self', False)
        # Obtaining the member 'add_label_near' of a type (line 200)
        add_label_near_39726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 200, 16), self_39725, 'add_label_near')
        # Calling add_label_near(args, kwargs) (line 200)
        add_label_near_call_result_39732 = invoke(stypy.reporting.localization.Localization(__file__, 200, 16), add_label_near_39726, *[x_39727, y_39728, inline_39729, inline_spacing_39730], **kwargs_39731)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 198)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'self' (line 203)
        self_39733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 203, 13), 'self')
        # Obtaining the member 'labelManual' of a type (line 203)
        labelManual_39734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 203, 13), self_39733, 'labelManual')
        # Testing the type of an if condition (line 203)
        if_condition_39735 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 203, 13), labelManual_39734)
        # Assigning a type to the variable 'if_condition_39735' (line 203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 203, 13), 'if_condition_39735', if_condition_39735)
        # SSA begins for if statement (line 203)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to print(...): (line 204)
        # Processing the call arguments (line 204)
        unicode_39737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 18), 'unicode', u'Select label locations manually using first mouse button.')
        # Processing the call keyword arguments (line 204)
        kwargs_39738 = {}
        # Getting the type of 'print' (line 204)
        print_39736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 204, 12), 'print', False)
        # Calling print(args, kwargs) (line 204)
        print_call_result_39739 = invoke(stypy.reporting.localization.Localization(__file__, 204, 12), print_39736, *[unicode_39737], **kwargs_39738)
        
        
        # Call to print(...): (line 205)
        # Processing the call arguments (line 205)
        unicode_39741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 205, 18), 'unicode', u'End manual selection with second mouse button.')
        # Processing the call keyword arguments (line 205)
        kwargs_39742 = {}
        # Getting the type of 'print' (line 205)
        print_39740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 12), 'print', False)
        # Calling print(args, kwargs) (line 205)
        print_call_result_39743 = invoke(stypy.reporting.localization.Localization(__file__, 205, 12), print_39740, *[unicode_39741], **kwargs_39742)
        
        
        
        # Getting the type of 'inline' (line 206)
        inline_39744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 206, 19), 'inline')
        # Applying the 'not' unary operator (line 206)
        result_not__39745 = python_operator(stypy.reporting.localization.Localization(__file__, 206, 15), 'not', inline_39744)
        
        # Testing the type of an if condition (line 206)
        if_condition_39746 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 206, 12), result_not__39745)
        # Assigning a type to the variable 'if_condition_39746' (line 206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 206, 12), 'if_condition_39746', if_condition_39746)
        # SSA begins for if statement (line 206)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to print(...): (line 207)
        # Processing the call arguments (line 207)
        unicode_39748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 207, 22), 'unicode', u'Remove last label by clicking third mouse button.')
        # Processing the call keyword arguments (line 207)
        kwargs_39749 = {}
        # Getting the type of 'print' (line 207)
        print_39747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 207, 16), 'print', False)
        # Calling print(args, kwargs) (line 207)
        print_call_result_39750 = invoke(stypy.reporting.localization.Localization(__file__, 207, 16), print_39747, *[unicode_39748], **kwargs_39749)
        
        # SSA join for if statement (line 206)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 209):
        
        # Assigning a Call to a Name (line 209):
        
        # Call to BlockingContourLabeler(...): (line 209)
        # Processing the call arguments (line 209)
        # Getting the type of 'self' (line 209)
        self_39752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 62), 'self', False)
        # Processing the call keyword arguments (line 209)
        kwargs_39753 = {}
        # Getting the type of 'BlockingContourLabeler' (line 209)
        BlockingContourLabeler_39751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 39), 'BlockingContourLabeler', False)
        # Calling BlockingContourLabeler(args, kwargs) (line 209)
        BlockingContourLabeler_call_result_39754 = invoke(stypy.reporting.localization.Localization(__file__, 209, 39), BlockingContourLabeler_39751, *[self_39752], **kwargs_39753)
        
        # Assigning a type to the variable 'blocking_contour_labeler' (line 209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 209, 12), 'blocking_contour_labeler', BlockingContourLabeler_call_result_39754)
        
        # Call to blocking_contour_labeler(...): (line 210)
        # Processing the call arguments (line 210)
        # Getting the type of 'inline' (line 210)
        inline_39756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 37), 'inline', False)
        # Getting the type of 'inline_spacing' (line 210)
        inline_spacing_39757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 45), 'inline_spacing', False)
        # Processing the call keyword arguments (line 210)
        kwargs_39758 = {}
        # Getting the type of 'blocking_contour_labeler' (line 210)
        blocking_contour_labeler_39755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 12), 'blocking_contour_labeler', False)
        # Calling blocking_contour_labeler(args, kwargs) (line 210)
        blocking_contour_labeler_call_result_39759 = invoke(stypy.reporting.localization.Localization(__file__, 210, 12), blocking_contour_labeler_39755, *[inline_39756, inline_spacing_39757], **kwargs_39758)
        
        # SSA branch for the else part of an if statement (line 203)
        module_type_store.open_ssa_branch('else')
        
        # Call to labels(...): (line 212)
        # Processing the call arguments (line 212)
        # Getting the type of 'inline' (line 212)
        inline_39762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 24), 'inline', False)
        # Getting the type of 'inline_spacing' (line 212)
        inline_spacing_39763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 32), 'inline_spacing', False)
        # Processing the call keyword arguments (line 212)
        kwargs_39764 = {}
        # Getting the type of 'self' (line 212)
        self_39760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 12), 'self', False)
        # Obtaining the member 'labels' of a type (line 212)
        labels_39761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 12), self_39760, 'labels')
        # Calling labels(args, kwargs) (line 212)
        labels_call_result_39765 = invoke(stypy.reporting.localization.Localization(__file__, 212, 12), labels_39761, *[inline_39762, inline_spacing_39763], **kwargs_39764)
        
        # SSA join for if statement (line 203)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 198)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Attribute (line 217):
        
        # Assigning a Attribute to a Attribute (line 217):
        # Getting the type of 'self' (line 217)
        self_39766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 18), 'self')
        # Obtaining the member 'labelTexts' of a type (line 217)
        labelTexts_39767 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 18), self_39766, 'labelTexts')
        # Getting the type of 'self' (line 217)
        self_39768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 217, 8), 'self')
        # Setting the type of the member 'cl' of a type (line 217)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 217, 8), self_39768, 'cl', labelTexts_39767)
        
        # Assigning a Attribute to a Attribute (line 218):
        
        # Assigning a Attribute to a Attribute (line 218):
        # Getting the type of 'self' (line 218)
        self_39769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 21), 'self')
        # Obtaining the member 'labelXYs' of a type (line 218)
        labelXYs_39770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 21), self_39769, 'labelXYs')
        # Getting the type of 'self' (line 218)
        self_39771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 218, 8), 'self')
        # Setting the type of the member 'cl_xy' of a type (line 218)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 218, 8), self_39771, 'cl_xy', labelXYs_39770)
        
        # Assigning a Attribute to a Attribute (line 219):
        
        # Assigning a Attribute to a Attribute (line 219):
        # Getting the type of 'self' (line 219)
        self_39772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 26), 'self')
        # Obtaining the member 'labelCValues' of a type (line 219)
        labelCValues_39773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 26), self_39772, 'labelCValues')
        # Getting the type of 'self' (line 219)
        self_39774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 219, 8), 'self')
        # Setting the type of the member 'cl_cvalues' of a type (line 219)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 219, 8), self_39774, 'cl_cvalues', labelCValues_39773)
        
        # Assigning a Call to a Attribute (line 221):
        
        # Assigning a Call to a Attribute (line 221):
        
        # Call to silent_list(...): (line 221)
        # Processing the call arguments (line 221)
        unicode_39777 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 221, 48), 'unicode', u'text.Text')
        # Getting the type of 'self' (line 221)
        self_39778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 61), 'self', False)
        # Obtaining the member 'labelTexts' of a type (line 221)
        labelTexts_39779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 61), self_39778, 'labelTexts')
        # Processing the call keyword arguments (line 221)
        kwargs_39780 = {}
        # Getting the type of 'cbook' (line 221)
        cbook_39775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 30), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 221)
        silent_list_39776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 30), cbook_39775, 'silent_list')
        # Calling silent_list(args, kwargs) (line 221)
        silent_list_call_result_39781 = invoke(stypy.reporting.localization.Localization(__file__, 221, 30), silent_list_39776, *[unicode_39777, labelTexts_39779], **kwargs_39780)
        
        # Getting the type of 'self' (line 221)
        self_39782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'self')
        # Setting the type of the member 'labelTextsList' of a type (line 221)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 8), self_39782, 'labelTextsList', silent_list_call_result_39781)
        # Getting the type of 'self' (line 222)
        self_39783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 15), 'self')
        # Obtaining the member 'labelTextsList' of a type (line 222)
        labelTextsList_39784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 15), self_39783, 'labelTextsList')
        # Assigning a type to the variable 'stypy_return_type' (line 222)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 222, 8), 'stypy_return_type', labelTextsList_39784)
        
        # ################# End of 'clabel(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'clabel' in the type store
        # Getting the type of 'stypy_return_type' (line 60)
        stypy_return_type_39785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 60, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_39785)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'clabel'
        return stypy_return_type_39785


    @norecursion
    def print_label(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'print_label'
        module_type_store = module_type_store.open_function_context('print_label', 224, 4, False)
        # Assigning a type to the variable 'self' (line 225)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.print_label.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.print_label.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.print_label.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.print_label.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.print_label')
        ContourLabeler.print_label.__dict__.__setitem__('stypy_param_names_list', ['linecontour', 'labelwidth'])
        ContourLabeler.print_label.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.print_label.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.print_label.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.print_label.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.print_label.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.print_label.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.print_label', ['linecontour', 'labelwidth'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'print_label', localization, ['linecontour', 'labelwidth'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'print_label(...)' code ##################

        unicode_39786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 8), 'unicode', u'Return *False* if contours are too short for a label.')
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 226)
        # Processing the call arguments (line 226)
        # Getting the type of 'linecontour' (line 226)
        linecontour_39788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 20), 'linecontour', False)
        # Processing the call keyword arguments (line 226)
        kwargs_39789 = {}
        # Getting the type of 'len' (line 226)
        len_39787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 16), 'len', False)
        # Calling len(args, kwargs) (line 226)
        len_call_result_39790 = invoke(stypy.reporting.localization.Localization(__file__, 226, 16), len_39787, *[linecontour_39788], **kwargs_39789)
        
        int_39791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, 35), 'int')
        # Getting the type of 'labelwidth' (line 226)
        labelwidth_39792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 40), 'labelwidth')
        # Applying the binary operator '*' (line 226)
        result_mul_39793 = python_operator(stypy.reporting.localization.Localization(__file__, 226, 35), '*', int_39791, labelwidth_39792)
        
        # Applying the binary operator '>' (line 226)
        result_gt_39794 = python_operator(stypy.reporting.localization.Localization(__file__, 226, 16), '>', len_call_result_39790, result_mul_39793)
        
        
        # Call to any(...): (line 227)
        # Processing the call keyword arguments (line 227)
        kwargs_39807 = {}
        
        
        # Call to ptp(...): (line 227)
        # Processing the call arguments (line 227)
        # Getting the type of 'linecontour' (line 227)
        linecontour_39797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 27), 'linecontour', False)
        # Processing the call keyword arguments (line 227)
        int_39798 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 45), 'int')
        keyword_39799 = int_39798
        kwargs_39800 = {'axis': keyword_39799}
        # Getting the type of 'np' (line 227)
        np_39795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 20), 'np', False)
        # Obtaining the member 'ptp' of a type (line 227)
        ptp_39796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 20), np_39795, 'ptp')
        # Calling ptp(args, kwargs) (line 227)
        ptp_call_result_39801 = invoke(stypy.reporting.localization.Localization(__file__, 227, 20), ptp_39796, *[linecontour_39797], **kwargs_39800)
        
        float_39802 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 50), 'float')
        # Getting the type of 'labelwidth' (line 227)
        labelwidth_39803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 56), 'labelwidth', False)
        # Applying the binary operator '*' (line 227)
        result_mul_39804 = python_operator(stypy.reporting.localization.Localization(__file__, 227, 50), '*', float_39802, labelwidth_39803)
        
        # Applying the binary operator '>' (line 227)
        result_gt_39805 = python_operator(stypy.reporting.localization.Localization(__file__, 227, 20), '>', ptp_call_result_39801, result_mul_39804)
        
        # Obtaining the member 'any' of a type (line 227)
        any_39806 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 20), result_gt_39805, 'any')
        # Calling any(args, kwargs) (line 227)
        any_call_result_39808 = invoke(stypy.reporting.localization.Localization(__file__, 227, 20), any_39806, *[], **kwargs_39807)
        
        # Applying the binary operator 'or' (line 226)
        result_or_keyword_39809 = python_operator(stypy.reporting.localization.Localization(__file__, 226, 16), 'or', result_gt_39794, any_call_result_39808)
        
        # Assigning a type to the variable 'stypy_return_type' (line 226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 226, 8), 'stypy_return_type', result_or_keyword_39809)
        
        # ################# End of 'print_label(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'print_label' in the type store
        # Getting the type of 'stypy_return_type' (line 224)
        stypy_return_type_39810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_39810)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'print_label'
        return stypy_return_type_39810


    @norecursion
    def too_close(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'too_close'
        module_type_store = module_type_store.open_function_context('too_close', 229, 4, False)
        # Assigning a type to the variable 'self' (line 230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.too_close.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.too_close.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.too_close.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.too_close.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.too_close')
        ContourLabeler.too_close.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'lw'])
        ContourLabeler.too_close.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.too_close.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.too_close.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.too_close.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.too_close.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.too_close.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.too_close', ['x', 'y', 'lw'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'too_close', localization, ['x', 'y', 'lw'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'too_close(...)' code ##################

        unicode_39811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 230, 8), 'unicode', u'Return *True* if a label is already near this location.')
        
        # Getting the type of 'self' (line 231)
        self_39812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 19), 'self')
        # Obtaining the member 'labelXYs' of a type (line 231)
        labelXYs_39813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 19), self_39812, 'labelXYs')
        # Testing the type of a for loop iterable (line 231)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 231, 8), labelXYs_39813)
        # Getting the type of the for loop variable (line 231)
        for_loop_var_39814 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 231, 8), labelXYs_39813)
        # Assigning a type to the variable 'loc' (line 231)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'loc', for_loop_var_39814)
        # SSA begins for a for statement (line 231)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 232):
        
        # Assigning a Call to a Name (line 232):
        
        # Call to sqrt(...): (line 232)
        # Processing the call arguments (line 232)
        # Getting the type of 'x' (line 232)
        x_39817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 25), 'x', False)
        
        # Obtaining the type of the subscript
        int_39818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 33), 'int')
        # Getting the type of 'loc' (line 232)
        loc_39819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 29), 'loc', False)
        # Obtaining the member '__getitem__' of a type (line 232)
        getitem___39820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 29), loc_39819, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 232)
        subscript_call_result_39821 = invoke(stypy.reporting.localization.Localization(__file__, 232, 29), getitem___39820, int_39818)
        
        # Applying the binary operator '-' (line 232)
        result_sub_39822 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 25), '-', x_39817, subscript_call_result_39821)
        
        int_39823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 40), 'int')
        # Applying the binary operator '**' (line 232)
        result_pow_39824 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 24), '**', result_sub_39822, int_39823)
        
        # Getting the type of 'y' (line 232)
        y_39825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 45), 'y', False)
        
        # Obtaining the type of the subscript
        int_39826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 53), 'int')
        # Getting the type of 'loc' (line 232)
        loc_39827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 49), 'loc', False)
        # Obtaining the member '__getitem__' of a type (line 232)
        getitem___39828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 49), loc_39827, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 232)
        subscript_call_result_39829 = invoke(stypy.reporting.localization.Localization(__file__, 232, 49), getitem___39828, int_39826)
        
        # Applying the binary operator '-' (line 232)
        result_sub_39830 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 45), '-', y_39825, subscript_call_result_39829)
        
        int_39831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 232, 60), 'int')
        # Applying the binary operator '**' (line 232)
        result_pow_39832 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 44), '**', result_sub_39830, int_39831)
        
        # Applying the binary operator '+' (line 232)
        result_add_39833 = python_operator(stypy.reporting.localization.Localization(__file__, 232, 24), '+', result_pow_39824, result_pow_39832)
        
        # Processing the call keyword arguments (line 232)
        kwargs_39834 = {}
        # Getting the type of 'np' (line 232)
        np_39815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 232, 16), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 232)
        sqrt_39816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 232, 16), np_39815, 'sqrt')
        # Calling sqrt(args, kwargs) (line 232)
        sqrt_call_result_39835 = invoke(stypy.reporting.localization.Localization(__file__, 232, 16), sqrt_39816, *[result_add_39833], **kwargs_39834)
        
        # Assigning a type to the variable 'd' (line 232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 232, 12), 'd', sqrt_call_result_39835)
        
        
        # Getting the type of 'd' (line 233)
        d_39836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 15), 'd')
        float_39837 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 233, 19), 'float')
        # Getting the type of 'lw' (line 233)
        lw_39838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 25), 'lw')
        # Applying the binary operator '*' (line 233)
        result_mul_39839 = python_operator(stypy.reporting.localization.Localization(__file__, 233, 19), '*', float_39837, lw_39838)
        
        # Applying the binary operator '<' (line 233)
        result_lt_39840 = python_operator(stypy.reporting.localization.Localization(__file__, 233, 15), '<', d_39836, result_mul_39839)
        
        # Testing the type of an if condition (line 233)
        if_condition_39841 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 233, 12), result_lt_39840)
        # Assigning a type to the variable 'if_condition_39841' (line 233)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 233, 12), 'if_condition_39841', if_condition_39841)
        # SSA begins for if statement (line 233)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'True' (line 234)
        True_39842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 23), 'True')
        # Assigning a type to the variable 'stypy_return_type' (line 234)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 16), 'stypy_return_type', True_39842)
        # SSA join for if statement (line 233)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'False' (line 235)
        False_39843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 235)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 235, 8), 'stypy_return_type', False_39843)
        
        # ################# End of 'too_close(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'too_close' in the type store
        # Getting the type of 'stypy_return_type' (line 229)
        stypy_return_type_39844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_39844)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'too_close'
        return stypy_return_type_39844


    @norecursion
    def get_label_coords(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_label_coords'
        module_type_store = module_type_store.open_function_context('get_label_coords', 237, 4, False)
        # Assigning a type to the variable 'self' (line 238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.get_label_coords.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.get_label_coords.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.get_label_coords.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.get_label_coords.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.get_label_coords')
        ContourLabeler.get_label_coords.__dict__.__setitem__('stypy_param_names_list', ['distances', 'XX', 'YY', 'ysize', 'lw'])
        ContourLabeler.get_label_coords.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.get_label_coords.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.get_label_coords.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.get_label_coords.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.get_label_coords.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.get_label_coords.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.get_label_coords', ['distances', 'XX', 'YY', 'ysize', 'lw'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_label_coords', localization, ['distances', 'XX', 'YY', 'ysize', 'lw'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_label_coords(...)' code ##################

        unicode_39845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 247, (-1)), 'unicode', u'\n        Return x, y, and the index of a label location.\n\n        Labels are plotted at a location with the smallest\n        deviation of the contour from a straight line\n        unless there is another label nearby, in which case\n        the next best place on the contour is picked up.\n        If all such candidates are rejected, the beginning\n        of the contour is chosen.\n        ')
        
        # Assigning a Call to a Name (line 248):
        
        # Assigning a Call to a Name (line 248):
        
        # Call to int(...): (line 248)
        # Processing the call arguments (line 248)
        # Getting the type of 'ysize' (line 248)
        ysize_39847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 21), 'ysize', False)
        int_39848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 29), 'int')
        # Applying the binary operator 'div' (line 248)
        result_div_39849 = python_operator(stypy.reporting.localization.Localization(__file__, 248, 21), 'div', ysize_39847, int_39848)
        
        # Processing the call keyword arguments (line 248)
        kwargs_39850 = {}
        # Getting the type of 'int' (line 248)
        int_39846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 17), 'int', False)
        # Calling int(args, kwargs) (line 248)
        int_call_result_39851 = invoke(stypy.reporting.localization.Localization(__file__, 248, 17), int_39846, *[result_div_39849], **kwargs_39850)
        
        # Assigning a type to the variable 'hysize' (line 248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 8), 'hysize', int_call_result_39851)
        
        # Assigning a Call to a Name (line 249):
        
        # Assigning a Call to a Name (line 249):
        
        # Call to argsort(...): (line 249)
        # Processing the call arguments (line 249)
        # Getting the type of 'distances' (line 249)
        distances_39854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 27), 'distances', False)
        # Processing the call keyword arguments (line 249)
        kwargs_39855 = {}
        # Getting the type of 'np' (line 249)
        np_39852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 249, 16), 'np', False)
        # Obtaining the member 'argsort' of a type (line 249)
        argsort_39853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 249, 16), np_39852, 'argsort')
        # Calling argsort(args, kwargs) (line 249)
        argsort_call_result_39856 = invoke(stypy.reporting.localization.Localization(__file__, 249, 16), argsort_39853, *[distances_39854], **kwargs_39855)
        
        # Assigning a type to the variable 'adist' (line 249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 249, 8), 'adist', argsort_call_result_39856)
        
        # Getting the type of 'adist' (line 251)
        adist_39857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 19), 'adist')
        # Testing the type of a for loop iterable (line 251)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 251, 8), adist_39857)
        # Getting the type of the for loop variable (line 251)
        for_loop_var_39858 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 251, 8), adist_39857)
        # Assigning a type to the variable 'ind' (line 251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 8), 'ind', for_loop_var_39858)
        # SSA begins for a for statement (line 251)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Tuple to a Tuple (line 252):
        
        # Assigning a Subscript to a Name (line 252):
        
        # Obtaining the type of the subscript
        # Getting the type of 'hysize' (line 252)
        hysize_39859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 27), 'hysize')
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 252)
        ind_39860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 22), 'ind')
        # Getting the type of 'XX' (line 252)
        XX_39861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 19), 'XX')
        # Obtaining the member '__getitem__' of a type (line 252)
        getitem___39862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 19), XX_39861, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 252)
        subscript_call_result_39863 = invoke(stypy.reporting.localization.Localization(__file__, 252, 19), getitem___39862, ind_39860)
        
        # Obtaining the member '__getitem__' of a type (line 252)
        getitem___39864 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 19), subscript_call_result_39863, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 252)
        subscript_call_result_39865 = invoke(stypy.reporting.localization.Localization(__file__, 252, 19), getitem___39864, hysize_39859)
        
        # Assigning a type to the variable 'tuple_assignment_39291' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 12), 'tuple_assignment_39291', subscript_call_result_39865)
        
        # Assigning a Subscript to a Name (line 252):
        
        # Obtaining the type of the subscript
        # Getting the type of 'hysize' (line 252)
        hysize_39866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 44), 'hysize')
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 252)
        ind_39867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 39), 'ind')
        # Getting the type of 'YY' (line 252)
        YY_39868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 36), 'YY')
        # Obtaining the member '__getitem__' of a type (line 252)
        getitem___39869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 36), YY_39868, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 252)
        subscript_call_result_39870 = invoke(stypy.reporting.localization.Localization(__file__, 252, 36), getitem___39869, ind_39867)
        
        # Obtaining the member '__getitem__' of a type (line 252)
        getitem___39871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 252, 36), subscript_call_result_39870, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 252)
        subscript_call_result_39872 = invoke(stypy.reporting.localization.Localization(__file__, 252, 36), getitem___39871, hysize_39866)
        
        # Assigning a type to the variable 'tuple_assignment_39292' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 12), 'tuple_assignment_39292', subscript_call_result_39872)
        
        # Assigning a Name to a Name (line 252):
        # Getting the type of 'tuple_assignment_39291' (line 252)
        tuple_assignment_39291_39873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 12), 'tuple_assignment_39291')
        # Assigning a type to the variable 'x' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 12), 'x', tuple_assignment_39291_39873)
        
        # Assigning a Name to a Name (line 252):
        # Getting the type of 'tuple_assignment_39292' (line 252)
        tuple_assignment_39292_39874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 252, 12), 'tuple_assignment_39292')
        # Assigning a type to the variable 'y' (line 252)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 252, 15), 'y', tuple_assignment_39292_39874)
        
        
        # Call to too_close(...): (line 253)
        # Processing the call arguments (line 253)
        # Getting the type of 'x' (line 253)
        x_39877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 30), 'x', False)
        # Getting the type of 'y' (line 253)
        y_39878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 33), 'y', False)
        # Getting the type of 'lw' (line 253)
        lw_39879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 36), 'lw', False)
        # Processing the call keyword arguments (line 253)
        kwargs_39880 = {}
        # Getting the type of 'self' (line 253)
        self_39875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 253, 15), 'self', False)
        # Obtaining the member 'too_close' of a type (line 253)
        too_close_39876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 253, 15), self_39875, 'too_close')
        # Calling too_close(args, kwargs) (line 253)
        too_close_call_result_39881 = invoke(stypy.reporting.localization.Localization(__file__, 253, 15), too_close_39876, *[x_39877, y_39878, lw_39879], **kwargs_39880)
        
        # Testing the type of an if condition (line 253)
        if_condition_39882 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 253, 12), too_close_call_result_39881)
        # Assigning a type to the variable 'if_condition_39882' (line 253)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 253, 12), 'if_condition_39882', if_condition_39882)
        # SSA begins for if statement (line 253)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 253)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 255)
        tuple_39883 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 255, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 255)
        # Adding element type (line 255)
        # Getting the type of 'x' (line 255)
        x_39884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 19), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 19), tuple_39883, x_39884)
        # Adding element type (line 255)
        # Getting the type of 'y' (line 255)
        y_39885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 22), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 19), tuple_39883, y_39885)
        # Adding element type (line 255)
        # Getting the type of 'ind' (line 255)
        ind_39886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 255, 25), 'ind')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 255, 19), tuple_39883, ind_39886)
        
        # Assigning a type to the variable 'stypy_return_type' (line 255)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 255, 12), 'stypy_return_type', tuple_39883)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 257):
        
        # Assigning a Subscript to a Name (line 257):
        
        # Obtaining the type of the subscript
        int_39887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, 20), 'int')
        # Getting the type of 'adist' (line 257)
        adist_39888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 14), 'adist')
        # Obtaining the member '__getitem__' of a type (line 257)
        getitem___39889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 14), adist_39888, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 257)
        subscript_call_result_39890 = invoke(stypy.reporting.localization.Localization(__file__, 257, 14), getitem___39889, int_39887)
        
        # Assigning a type to the variable 'ind' (line 257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 257, 8), 'ind', subscript_call_result_39890)
        
        # Assigning a Tuple to a Tuple (line 258):
        
        # Assigning a Subscript to a Name (line 258):
        
        # Obtaining the type of the subscript
        # Getting the type of 'hysize' (line 258)
        hysize_39891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 23), 'hysize')
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 258)
        ind_39892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 18), 'ind')
        # Getting the type of 'XX' (line 258)
        XX_39893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 15), 'XX')
        # Obtaining the member '__getitem__' of a type (line 258)
        getitem___39894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 15), XX_39893, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 258)
        subscript_call_result_39895 = invoke(stypy.reporting.localization.Localization(__file__, 258, 15), getitem___39894, ind_39892)
        
        # Obtaining the member '__getitem__' of a type (line 258)
        getitem___39896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 15), subscript_call_result_39895, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 258)
        subscript_call_result_39897 = invoke(stypy.reporting.localization.Localization(__file__, 258, 15), getitem___39896, hysize_39891)
        
        # Assigning a type to the variable 'tuple_assignment_39293' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'tuple_assignment_39293', subscript_call_result_39897)
        
        # Assigning a Subscript to a Name (line 258):
        
        # Obtaining the type of the subscript
        # Getting the type of 'hysize' (line 258)
        hysize_39898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 40), 'hysize')
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 258)
        ind_39899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 35), 'ind')
        # Getting the type of 'YY' (line 258)
        YY_39900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 32), 'YY')
        # Obtaining the member '__getitem__' of a type (line 258)
        getitem___39901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 32), YY_39900, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 258)
        subscript_call_result_39902 = invoke(stypy.reporting.localization.Localization(__file__, 258, 32), getitem___39901, ind_39899)
        
        # Obtaining the member '__getitem__' of a type (line 258)
        getitem___39903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 32), subscript_call_result_39902, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 258)
        subscript_call_result_39904 = invoke(stypy.reporting.localization.Localization(__file__, 258, 32), getitem___39903, hysize_39898)
        
        # Assigning a type to the variable 'tuple_assignment_39294' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'tuple_assignment_39294', subscript_call_result_39904)
        
        # Assigning a Name to a Name (line 258):
        # Getting the type of 'tuple_assignment_39293' (line 258)
        tuple_assignment_39293_39905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'tuple_assignment_39293')
        # Assigning a type to the variable 'x' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'x', tuple_assignment_39293_39905)
        
        # Assigning a Name to a Name (line 258):
        # Getting the type of 'tuple_assignment_39294' (line 258)
        tuple_assignment_39294_39906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'tuple_assignment_39294')
        # Assigning a type to the variable 'y' (line 258)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 11), 'y', tuple_assignment_39294_39906)
        
        # Obtaining an instance of the builtin type 'tuple' (line 259)
        tuple_39907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 259, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 259)
        # Adding element type (line 259)
        # Getting the type of 'x' (line 259)
        x_39908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 15), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 259, 15), tuple_39907, x_39908)
        # Adding element type (line 259)
        # Getting the type of 'y' (line 259)
        y_39909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 18), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 259, 15), tuple_39907, y_39909)
        # Adding element type (line 259)
        # Getting the type of 'ind' (line 259)
        ind_39910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 259, 21), 'ind')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 259, 15), tuple_39907, ind_39910)
        
        # Assigning a type to the variable 'stypy_return_type' (line 259)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 259, 8), 'stypy_return_type', tuple_39907)
        
        # ################# End of 'get_label_coords(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_label_coords' in the type store
        # Getting the type of 'stypy_return_type' (line 237)
        stypy_return_type_39911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_39911)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_label_coords'
        return stypy_return_type_39911


    @norecursion
    def get_label_width(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_label_width'
        module_type_store = module_type_store.open_function_context('get_label_width', 261, 4, False)
        # Assigning a type to the variable 'self' (line 262)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 262, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.get_label_width.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.get_label_width.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.get_label_width.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.get_label_width.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.get_label_width')
        ContourLabeler.get_label_width.__dict__.__setitem__('stypy_param_names_list', ['lev', 'fmt', 'fsize'])
        ContourLabeler.get_label_width.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.get_label_width.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.get_label_width.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.get_label_width.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.get_label_width.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.get_label_width.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.get_label_width', ['lev', 'fmt', 'fsize'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_label_width', localization, ['lev', 'fmt', 'fsize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_label_width(...)' code ##################

        unicode_39912 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, (-1)), 'unicode', u'\n        Return the width of the label in points.\n        ')
        
        
        
        # Call to isinstance(...): (line 265)
        # Processing the call arguments (line 265)
        # Getting the type of 'lev' (line 265)
        lev_39914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 26), 'lev', False)
        # Getting the type of 'six' (line 265)
        six_39915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 31), 'six', False)
        # Obtaining the member 'string_types' of a type (line 265)
        string_types_39916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 31), six_39915, 'string_types')
        # Processing the call keyword arguments (line 265)
        kwargs_39917 = {}
        # Getting the type of 'isinstance' (line 265)
        isinstance_39913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 15), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 265)
        isinstance_call_result_39918 = invoke(stypy.reporting.localization.Localization(__file__, 265, 15), isinstance_39913, *[lev_39914, string_types_39916], **kwargs_39917)
        
        # Applying the 'not' unary operator (line 265)
        result_not__39919 = python_operator(stypy.reporting.localization.Localization(__file__, 265, 11), 'not', isinstance_call_result_39918)
        
        # Testing the type of an if condition (line 265)
        if_condition_39920 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 265, 8), result_not__39919)
        # Assigning a type to the variable 'if_condition_39920' (line 265)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 265, 8), 'if_condition_39920', if_condition_39920)
        # SSA begins for if statement (line 265)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 266):
        
        # Assigning a Call to a Name (line 266):
        
        # Call to get_text(...): (line 266)
        # Processing the call arguments (line 266)
        # Getting the type of 'lev' (line 266)
        lev_39923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 32), 'lev', False)
        # Getting the type of 'fmt' (line 266)
        fmt_39924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 37), 'fmt', False)
        # Processing the call keyword arguments (line 266)
        kwargs_39925 = {}
        # Getting the type of 'self' (line 266)
        self_39921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 18), 'self', False)
        # Obtaining the member 'get_text' of a type (line 266)
        get_text_39922 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 266, 18), self_39921, 'get_text')
        # Calling get_text(args, kwargs) (line 266)
        get_text_call_result_39926 = invoke(stypy.reporting.localization.Localization(__file__, 266, 18), get_text_39922, *[lev_39923, fmt_39924], **kwargs_39925)
        
        # Assigning a type to the variable 'lev' (line 266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 266, 12), 'lev', get_text_call_result_39926)
        # SSA join for if statement (line 265)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 268):
        
        # Assigning a Call to a Name:
        
        # Call to is_math_text(...): (line 268)
        # Processing the call arguments (line 268)
        # Getting the type of 'lev' (line 268)
        lev_39930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 45), 'lev', False)
        # Processing the call keyword arguments (line 268)
        kwargs_39931 = {}
        # Getting the type of 'text' (line 268)
        text_39927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 22), 'text', False)
        # Obtaining the member 'Text' of a type (line 268)
        Text_39928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 22), text_39927, 'Text')
        # Obtaining the member 'is_math_text' of a type (line 268)
        is_math_text_39929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 22), Text_39928, 'is_math_text')
        # Calling is_math_text(args, kwargs) (line 268)
        is_math_text_call_result_39932 = invoke(stypy.reporting.localization.Localization(__file__, 268, 22), is_math_text_39929, *[lev_39930], **kwargs_39931)
        
        # Assigning a type to the variable 'call_assignment_39295' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'call_assignment_39295', is_math_text_call_result_39932)
        
        # Assigning a Call to a Name (line 268):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_39935 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 8), 'int')
        # Processing the call keyword arguments
        kwargs_39936 = {}
        # Getting the type of 'call_assignment_39295' (line 268)
        call_assignment_39295_39933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'call_assignment_39295', False)
        # Obtaining the member '__getitem__' of a type (line 268)
        getitem___39934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 8), call_assignment_39295_39933, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_39937 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___39934, *[int_39935], **kwargs_39936)
        
        # Assigning a type to the variable 'call_assignment_39296' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'call_assignment_39296', getitem___call_result_39937)
        
        # Assigning a Name to a Name (line 268):
        # Getting the type of 'call_assignment_39296' (line 268)
        call_assignment_39296_39938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'call_assignment_39296')
        # Assigning a type to the variable 'lev' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'lev', call_assignment_39296_39938)
        
        # Assigning a Call to a Name (line 268):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_39941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 8), 'int')
        # Processing the call keyword arguments
        kwargs_39942 = {}
        # Getting the type of 'call_assignment_39295' (line 268)
        call_assignment_39295_39939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'call_assignment_39295', False)
        # Obtaining the member '__getitem__' of a type (line 268)
        getitem___39940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 268, 8), call_assignment_39295_39939, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_39943 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___39940, *[int_39941], **kwargs_39942)
        
        # Assigning a type to the variable 'call_assignment_39297' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'call_assignment_39297', getitem___call_result_39943)
        
        # Assigning a Name to a Name (line 268):
        # Getting the type of 'call_assignment_39297' (line 268)
        call_assignment_39297_39944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 268, 8), 'call_assignment_39297')
        # Assigning a type to the variable 'ismath' (line 268)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 268, 13), 'ismath', call_assignment_39297_39944)
        
        
        # Getting the type of 'ismath' (line 269)
        ismath_39945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 11), 'ismath')
        unicode_39946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 21), 'unicode', u'TeX')
        # Applying the binary operator '==' (line 269)
        result_eq_39947 = python_operator(stypy.reporting.localization.Localization(__file__, 269, 11), '==', ismath_39945, unicode_39946)
        
        # Testing the type of an if condition (line 269)
        if_condition_39948 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 269, 8), result_eq_39947)
        # Assigning a type to the variable 'if_condition_39948' (line 269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 269, 8), 'if_condition_39948', if_condition_39948)
        # SSA begins for if statement (line 269)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 270)
        unicode_39949 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 270, 33), 'unicode', u'_TeX_manager')
        # Getting the type of 'self' (line 270)
        self_39950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 27), 'self')
        
        (may_be_39951, more_types_in_union_39952) = may_not_provide_member(unicode_39949, self_39950)

        if may_be_39951:

            if more_types_in_union_39952:
                # Runtime conditional SSA (line 270)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 270)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 12), 'self', remove_member_provider_from_union(self_39950, u'_TeX_manager'))
            
            # Assigning a Call to a Attribute (line 271):
            
            # Assigning a Call to a Attribute (line 271):
            
            # Call to TexManager(...): (line 271)
            # Processing the call keyword arguments (line 271)
            kwargs_39955 = {}
            # Getting the type of 'texmanager' (line 271)
            texmanager_39953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 36), 'texmanager', False)
            # Obtaining the member 'TexManager' of a type (line 271)
            TexManager_39954 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 36), texmanager_39953, 'TexManager')
            # Calling TexManager(args, kwargs) (line 271)
            TexManager_call_result_39956 = invoke(stypy.reporting.localization.Localization(__file__, 271, 36), TexManager_39954, *[], **kwargs_39955)
            
            # Getting the type of 'self' (line 271)
            self_39957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 271, 16), 'self')
            # Setting the type of the member '_TeX_manager' of a type (line 271)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 271, 16), self_39957, '_TeX_manager', TexManager_call_result_39956)

            if more_types_in_union_39952:
                # SSA join for if statement (line 270)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 272):
        
        # Assigning a Call to a Name:
        
        # Call to get_text_width_height_descent(...): (line 272)
        # Processing the call arguments (line 272)
        # Getting the type of 'lev' (line 272)
        lev_39961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 71), 'lev', False)
        # Getting the type of 'fsize' (line 273)
        fsize_39962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 71), 'fsize', False)
        # Processing the call keyword arguments (line 272)
        kwargs_39963 = {}
        # Getting the type of 'self' (line 272)
        self_39958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 23), 'self', False)
        # Obtaining the member '_TeX_manager' of a type (line 272)
        _TeX_manager_39959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 23), self_39958, '_TeX_manager')
        # Obtaining the member 'get_text_width_height_descent' of a type (line 272)
        get_text_width_height_descent_39960 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 23), _TeX_manager_39959, 'get_text_width_height_descent')
        # Calling get_text_width_height_descent(args, kwargs) (line 272)
        get_text_width_height_descent_call_result_39964 = invoke(stypy.reporting.localization.Localization(__file__, 272, 23), get_text_width_height_descent_39960, *[lev_39961, fsize_39962], **kwargs_39963)
        
        # Assigning a type to the variable 'call_assignment_39298' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 12), 'call_assignment_39298', get_text_width_height_descent_call_result_39964)
        
        # Assigning a Call to a Name (line 272):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_39967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 12), 'int')
        # Processing the call keyword arguments
        kwargs_39968 = {}
        # Getting the type of 'call_assignment_39298' (line 272)
        call_assignment_39298_39965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 12), 'call_assignment_39298', False)
        # Obtaining the member '__getitem__' of a type (line 272)
        getitem___39966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 12), call_assignment_39298_39965, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_39969 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___39966, *[int_39967], **kwargs_39968)
        
        # Assigning a type to the variable 'call_assignment_39299' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 12), 'call_assignment_39299', getitem___call_result_39969)
        
        # Assigning a Name to a Name (line 272):
        # Getting the type of 'call_assignment_39299' (line 272)
        call_assignment_39299_39970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 12), 'call_assignment_39299')
        # Assigning a type to the variable 'lw' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 12), 'lw', call_assignment_39299_39970)
        
        # Assigning a Call to a Name (line 272):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_39973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 12), 'int')
        # Processing the call keyword arguments
        kwargs_39974 = {}
        # Getting the type of 'call_assignment_39298' (line 272)
        call_assignment_39298_39971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 12), 'call_assignment_39298', False)
        # Obtaining the member '__getitem__' of a type (line 272)
        getitem___39972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 12), call_assignment_39298_39971, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_39975 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___39972, *[int_39973], **kwargs_39974)
        
        # Assigning a type to the variable 'call_assignment_39300' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 12), 'call_assignment_39300', getitem___call_result_39975)
        
        # Assigning a Name to a Name (line 272):
        # Getting the type of 'call_assignment_39300' (line 272)
        call_assignment_39300_39976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 12), 'call_assignment_39300')
        # Assigning a type to the variable '_' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 16), '_', call_assignment_39300_39976)
        
        # Assigning a Call to a Name (line 272):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_39979 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 272, 12), 'int')
        # Processing the call keyword arguments
        kwargs_39980 = {}
        # Getting the type of 'call_assignment_39298' (line 272)
        call_assignment_39298_39977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 12), 'call_assignment_39298', False)
        # Obtaining the member '__getitem__' of a type (line 272)
        getitem___39978 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 272, 12), call_assignment_39298_39977, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_39981 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___39978, *[int_39979], **kwargs_39980)
        
        # Assigning a type to the variable 'call_assignment_39301' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 12), 'call_assignment_39301', getitem___call_result_39981)
        
        # Assigning a Name to a Name (line 272):
        # Getting the type of 'call_assignment_39301' (line 272)
        call_assignment_39301_39982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 272, 12), 'call_assignment_39301')
        # Assigning a type to the variable '_' (line 272)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 272, 19), '_', call_assignment_39301_39982)
        # SSA branch for the else part of an if statement (line 269)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'ismath' (line 274)
        ismath_39983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 274, 13), 'ismath')
        # Testing the type of an if condition (line 274)
        if_condition_39984 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 274, 13), ismath_39983)
        # Assigning a type to the variable 'if_condition_39984' (line 274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 274, 13), 'if_condition_39984', if_condition_39984)
        # SSA begins for if statement (line 274)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 275)
        unicode_39985 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 275, 33), 'unicode', u'_mathtext_parser')
        # Getting the type of 'self' (line 275)
        self_39986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 275, 27), 'self')
        
        (may_be_39987, more_types_in_union_39988) = may_not_provide_member(unicode_39985, self_39986)

        if may_be_39987:

            if more_types_in_union_39988:
                # Runtime conditional SSA (line 275)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'self' (line 275)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 275, 12), 'self', remove_member_provider_from_union(self_39986, u'_mathtext_parser'))
            
            # Assigning a Call to a Attribute (line 276):
            
            # Assigning a Call to a Attribute (line 276):
            
            # Call to MathTextParser(...): (line 276)
            # Processing the call arguments (line 276)
            unicode_39991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 276, 64), 'unicode', u'bitmap')
            # Processing the call keyword arguments (line 276)
            kwargs_39992 = {}
            # Getting the type of 'mathtext' (line 276)
            mathtext_39989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 40), 'mathtext', False)
            # Obtaining the member 'MathTextParser' of a type (line 276)
            MathTextParser_39990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 40), mathtext_39989, 'MathTextParser')
            # Calling MathTextParser(args, kwargs) (line 276)
            MathTextParser_call_result_39993 = invoke(stypy.reporting.localization.Localization(__file__, 276, 40), MathTextParser_39990, *[unicode_39991], **kwargs_39992)
            
            # Getting the type of 'self' (line 276)
            self_39994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 276, 16), 'self')
            # Setting the type of the member '_mathtext_parser' of a type (line 276)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 276, 16), self_39994, '_mathtext_parser', MathTextParser_call_result_39993)

            if more_types_in_union_39988:
                # SSA join for if statement (line 275)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 277):
        
        # Assigning a Call to a Name:
        
        # Call to parse(...): (line 277)
        # Processing the call arguments (line 277)
        # Getting the type of 'lev' (line 277)
        lev_39998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 49), 'lev', False)
        # Processing the call keyword arguments (line 277)
        int_39999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 58), 'int')
        keyword_40000 = int_39999
        # Getting the type of 'self' (line 278)
        self_40001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 278, 54), 'self', False)
        # Obtaining the member 'labelFontProps' of a type (line 278)
        labelFontProps_40002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 278, 54), self_40001, 'labelFontProps')
        keyword_40003 = labelFontProps_40002
        kwargs_40004 = {'dpi': keyword_40000, 'prop': keyword_40003}
        # Getting the type of 'self' (line 277)
        self_39995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 21), 'self', False)
        # Obtaining the member '_mathtext_parser' of a type (line 277)
        _mathtext_parser_39996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 21), self_39995, '_mathtext_parser')
        # Obtaining the member 'parse' of a type (line 277)
        parse_39997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 21), _mathtext_parser_39996, 'parse')
        # Calling parse(args, kwargs) (line 277)
        parse_call_result_40005 = invoke(stypy.reporting.localization.Localization(__file__, 277, 21), parse_39997, *[lev_39998], **kwargs_40004)
        
        # Assigning a type to the variable 'call_assignment_39302' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'call_assignment_39302', parse_call_result_40005)
        
        # Assigning a Call to a Name (line 277):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_40008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 12), 'int')
        # Processing the call keyword arguments
        kwargs_40009 = {}
        # Getting the type of 'call_assignment_39302' (line 277)
        call_assignment_39302_40006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'call_assignment_39302', False)
        # Obtaining the member '__getitem__' of a type (line 277)
        getitem___40007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 12), call_assignment_39302_40006, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_40010 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___40007, *[int_40008], **kwargs_40009)
        
        # Assigning a type to the variable 'call_assignment_39303' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'call_assignment_39303', getitem___call_result_40010)
        
        # Assigning a Name to a Name (line 277):
        # Getting the type of 'call_assignment_39303' (line 277)
        call_assignment_39303_40011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'call_assignment_39303')
        # Assigning a type to the variable 'img' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'img', call_assignment_39303_40011)
        
        # Assigning a Call to a Name (line 277):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_40014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 277, 12), 'int')
        # Processing the call keyword arguments
        kwargs_40015 = {}
        # Getting the type of 'call_assignment_39302' (line 277)
        call_assignment_39302_40012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'call_assignment_39302', False)
        # Obtaining the member '__getitem__' of a type (line 277)
        getitem___40013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 277, 12), call_assignment_39302_40012, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_40016 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___40013, *[int_40014], **kwargs_40015)
        
        # Assigning a type to the variable 'call_assignment_39304' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'call_assignment_39304', getitem___call_result_40016)
        
        # Assigning a Name to a Name (line 277):
        # Getting the type of 'call_assignment_39304' (line 277)
        call_assignment_39304_40017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 277, 12), 'call_assignment_39304')
        # Assigning a type to the variable '_' (line 277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 277, 17), '_', call_assignment_39304_40017)
        
        # Assigning a Call to a Name (line 279):
        
        # Assigning a Call to a Name (line 279):
        
        # Call to get_width(...): (line 279)
        # Processing the call keyword arguments (line 279)
        kwargs_40020 = {}
        # Getting the type of 'img' (line 279)
        img_40018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 279, 17), 'img', False)
        # Obtaining the member 'get_width' of a type (line 279)
        get_width_40019 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 279, 17), img_40018, 'get_width')
        # Calling get_width(args, kwargs) (line 279)
        get_width_call_result_40021 = invoke(stypy.reporting.localization.Localization(__file__, 279, 17), get_width_40019, *[], **kwargs_40020)
        
        # Assigning a type to the variable 'lw' (line 279)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 279, 12), 'lw', get_width_call_result_40021)
        # SSA branch for the else part of an if statement (line 274)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a BinOp to a Name (line 282):
        
        # Assigning a BinOp to a Name (line 282):
        
        # Call to len(...): (line 282)
        # Processing the call arguments (line 282)
        # Getting the type of 'lev' (line 282)
        lev_40023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 22), 'lev', False)
        # Processing the call keyword arguments (line 282)
        kwargs_40024 = {}
        # Getting the type of 'len' (line 282)
        len_40022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 18), 'len', False)
        # Calling len(args, kwargs) (line 282)
        len_call_result_40025 = invoke(stypy.reporting.localization.Localization(__file__, 282, 18), len_40022, *[lev_40023], **kwargs_40024)
        
        # Getting the type of 'fsize' (line 282)
        fsize_40026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 282, 30), 'fsize')
        # Applying the binary operator '*' (line 282)
        result_mul_40027 = python_operator(stypy.reporting.localization.Localization(__file__, 282, 17), '*', len_call_result_40025, fsize_40026)
        
        float_40028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 282, 38), 'float')
        # Applying the binary operator '*' (line 282)
        result_mul_40029 = python_operator(stypy.reporting.localization.Localization(__file__, 282, 36), '*', result_mul_40027, float_40028)
        
        # Assigning a type to the variable 'lw' (line 282)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 282, 12), 'lw', result_mul_40029)
        # SSA join for if statement (line 274)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 269)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'lw' (line 284)
        lw_40030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 284, 15), 'lw')
        # Assigning a type to the variable 'stypy_return_type' (line 284)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 284, 8), 'stypy_return_type', lw_40030)
        
        # ################# End of 'get_label_width(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_label_width' in the type store
        # Getting the type of 'stypy_return_type' (line 261)
        stypy_return_type_40031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40031)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_label_width'
        return stypy_return_type_40031


    @norecursion
    def get_real_label_width(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_real_label_width'
        module_type_store = module_type_store.open_function_context('get_real_label_width', 286, 4, False)
        # Assigning a type to the variable 'self' (line 287)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 287, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.get_real_label_width.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.get_real_label_width.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.get_real_label_width.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.get_real_label_width.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.get_real_label_width')
        ContourLabeler.get_real_label_width.__dict__.__setitem__('stypy_param_names_list', ['lev', 'fmt', 'fsize'])
        ContourLabeler.get_real_label_width.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.get_real_label_width.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.get_real_label_width.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.get_real_label_width.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.get_real_label_width.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.get_real_label_width.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.get_real_label_width', ['lev', 'fmt', 'fsize'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_real_label_width', localization, ['lev', 'fmt', 'fsize'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_real_label_width(...)' code ##################

        unicode_40032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 293, (-1)), 'unicode', u'\n        This computes actual onscreen label width.\n        This uses some black magic to determine onscreen extent of non-drawn\n        label.  This magic may not be very robust.\n\n        This method is not being used, and may be modified or removed.\n        ')
        
        # Assigning a Call to a Name (line 295):
        
        # Assigning a Call to a Name (line 295):
        
        # Call to mean(...): (line 295)
        # Processing the call arguments (line 295)
        
        # Call to reshape(...): (line 295)
        # Processing the call arguments (line 295)
        int_40045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 56), 'int')
        int_40046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 59), 'int')
        # Processing the call keyword arguments (line 295)
        kwargs_40047 = {}
        
        # Call to asarray(...): (line 295)
        # Processing the call arguments (line 295)
        
        # Call to axis(...): (line 295)
        # Processing the call keyword arguments (line 295)
        kwargs_40040 = {}
        # Getting the type of 'self' (line 295)
        self_40037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 32), 'self', False)
        # Obtaining the member 'ax' of a type (line 295)
        ax_40038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 32), self_40037, 'ax')
        # Obtaining the member 'axis' of a type (line 295)
        axis_40039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 32), ax_40038, 'axis')
        # Calling axis(args, kwargs) (line 295)
        axis_call_result_40041 = invoke(stypy.reporting.localization.Localization(__file__, 295, 32), axis_40039, *[], **kwargs_40040)
        
        # Processing the call keyword arguments (line 295)
        kwargs_40042 = {}
        # Getting the type of 'np' (line 295)
        np_40035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 21), 'np', False)
        # Obtaining the member 'asarray' of a type (line 295)
        asarray_40036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 21), np_40035, 'asarray')
        # Calling asarray(args, kwargs) (line 295)
        asarray_call_result_40043 = invoke(stypy.reporting.localization.Localization(__file__, 295, 21), asarray_40036, *[axis_call_result_40041], **kwargs_40042)
        
        # Obtaining the member 'reshape' of a type (line 295)
        reshape_40044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 21), asarray_call_result_40043, 'reshape')
        # Calling reshape(args, kwargs) (line 295)
        reshape_call_result_40048 = invoke(stypy.reporting.localization.Localization(__file__, 295, 21), reshape_40044, *[int_40045, int_40046], **kwargs_40047)
        
        # Processing the call keyword arguments (line 295)
        int_40049 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 295, 68), 'int')
        keyword_40050 = int_40049
        kwargs_40051 = {'axis': keyword_40050}
        # Getting the type of 'np' (line 295)
        np_40033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 13), 'np', False)
        # Obtaining the member 'mean' of a type (line 295)
        mean_40034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 295, 13), np_40033, 'mean')
        # Calling mean(args, kwargs) (line 295)
        mean_call_result_40052 = invoke(stypy.reporting.localization.Localization(__file__, 295, 13), mean_40034, *[reshape_call_result_40048], **kwargs_40051)
        
        # Assigning a type to the variable 'xx' (line 295)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 295, 8), 'xx', mean_call_result_40052)
        
        # Assigning a Call to a Name (line 298):
        
        # Assigning a Call to a Name (line 298):
        
        # Call to Text(...): (line 298)
        # Processing the call arguments (line 298)
        
        # Obtaining the type of the subscript
        int_40055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 25), 'int')
        # Getting the type of 'xx' (line 298)
        xx_40056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 22), 'xx', False)
        # Obtaining the member '__getitem__' of a type (line 298)
        getitem___40057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 22), xx_40056, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 298)
        subscript_call_result_40058 = invoke(stypy.reporting.localization.Localization(__file__, 298, 22), getitem___40057, int_40055)
        
        
        # Obtaining the type of the subscript
        int_40059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 32), 'int')
        # Getting the type of 'xx' (line 298)
        xx_40060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 29), 'xx', False)
        # Obtaining the member '__getitem__' of a type (line 298)
        getitem___40061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 29), xx_40060, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 298)
        subscript_call_result_40062 = invoke(stypy.reporting.localization.Localization(__file__, 298, 29), getitem___40061, int_40059)
        
        # Processing the call keyword arguments (line 298)
        kwargs_40063 = {}
        # Getting the type of 'text' (line 298)
        text_40053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 12), 'text', False)
        # Obtaining the member 'Text' of a type (line 298)
        Text_40054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 12), text_40053, 'Text')
        # Calling Text(args, kwargs) (line 298)
        Text_call_result_40064 = invoke(stypy.reporting.localization.Localization(__file__, 298, 12), Text_40054, *[subscript_call_result_40058, subscript_call_result_40062], **kwargs_40063)
        
        # Assigning a type to the variable 't' (line 298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 't', Text_call_result_40064)
        
        # Call to set_label_props(...): (line 299)
        # Processing the call arguments (line 299)
        # Getting the type of 't' (line 299)
        t_40067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 29), 't', False)
        
        # Call to get_text(...): (line 299)
        # Processing the call arguments (line 299)
        # Getting the type of 'lev' (line 299)
        lev_40070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 46), 'lev', False)
        # Getting the type of 'fmt' (line 299)
        fmt_40071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 51), 'fmt', False)
        # Processing the call keyword arguments (line 299)
        kwargs_40072 = {}
        # Getting the type of 'self' (line 299)
        self_40068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 32), 'self', False)
        # Obtaining the member 'get_text' of a type (line 299)
        get_text_40069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 32), self_40068, 'get_text')
        # Calling get_text(args, kwargs) (line 299)
        get_text_call_result_40073 = invoke(stypy.reporting.localization.Localization(__file__, 299, 32), get_text_40069, *[lev_40070, fmt_40071], **kwargs_40072)
        
        unicode_40074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 57), 'unicode', u'k')
        # Processing the call keyword arguments (line 299)
        kwargs_40075 = {}
        # Getting the type of 'self' (line 299)
        self_40065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 8), 'self', False)
        # Obtaining the member 'set_label_props' of a type (line 299)
        set_label_props_40066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 8), self_40065, 'set_label_props')
        # Calling set_label_props(args, kwargs) (line 299)
        set_label_props_call_result_40076 = invoke(stypy.reporting.localization.Localization(__file__, 299, 8), set_label_props_40066, *[t_40067, get_text_call_result_40073, unicode_40074], **kwargs_40075)
        
        
        # Assigning a Call to a Name (line 305):
        
        # Assigning a Call to a Name (line 305):
        
        # Call to get_window_extent(...): (line 305)
        # Processing the call keyword arguments (line 305)
        # Getting the type of 'self' (line 305)
        self_40079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 44), 'self', False)
        # Obtaining the member 'ax' of a type (line 305)
        ax_40080 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 44), self_40079, 'ax')
        # Obtaining the member 'figure' of a type (line 305)
        figure_40081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 44), ax_40080, 'figure')
        # Obtaining the member 'canvas' of a type (line 305)
        canvas_40082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 44), figure_40081, 'canvas')
        # Obtaining the member 'renderer' of a type (line 305)
        renderer_40083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 44), canvas_40082, 'renderer')
        keyword_40084 = renderer_40083
        kwargs_40085 = {'renderer': keyword_40084}
        # Getting the type of 't' (line 305)
        t_40077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 15), 't', False)
        # Obtaining the member 'get_window_extent' of a type (line 305)
        get_window_extent_40078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 305, 15), t_40077, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 305)
        get_window_extent_call_result_40086 = invoke(stypy.reporting.localization.Localization(__file__, 305, 15), get_window_extent_40078, *[], **kwargs_40085)
        
        # Assigning a type to the variable 'bbox' (line 305)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 305, 8), 'bbox', get_window_extent_call_result_40086)
        
        # Assigning a Subscript to a Name (line 308):
        
        # Assigning a Subscript to a Name (line 308):
        
        # Obtaining the type of the subscript
        int_40087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 46), 'int')
        
        # Call to diff(...): (line 308)
        # Processing the call arguments (line 308)
        
        # Obtaining the type of the subscript
        int_40090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 36), 'int')
        int_40091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 39), 'int')
        slice_40092 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 308, 21), int_40090, None, int_40091)
        int_40093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 308, 42), 'int')
        
        # Call to corners(...): (line 308)
        # Processing the call keyword arguments (line 308)
        kwargs_40096 = {}
        # Getting the type of 'bbox' (line 308)
        bbox_40094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 21), 'bbox', False)
        # Obtaining the member 'corners' of a type (line 308)
        corners_40095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 21), bbox_40094, 'corners')
        # Calling corners(args, kwargs) (line 308)
        corners_call_result_40097 = invoke(stypy.reporting.localization.Localization(__file__, 308, 21), corners_40095, *[], **kwargs_40096)
        
        # Obtaining the member '__getitem__' of a type (line 308)
        getitem___40098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 21), corners_call_result_40097, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 308)
        subscript_call_result_40099 = invoke(stypy.reporting.localization.Localization(__file__, 308, 21), getitem___40098, (slice_40092, int_40093))
        
        # Processing the call keyword arguments (line 308)
        kwargs_40100 = {}
        # Getting the type of 'np' (line 308)
        np_40088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 13), 'np', False)
        # Obtaining the member 'diff' of a type (line 308)
        diff_40089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 13), np_40088, 'diff')
        # Calling diff(args, kwargs) (line 308)
        diff_call_result_40101 = invoke(stypy.reporting.localization.Localization(__file__, 308, 13), diff_40089, *[subscript_call_result_40099], **kwargs_40100)
        
        # Obtaining the member '__getitem__' of a type (line 308)
        getitem___40102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 13), diff_call_result_40101, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 308)
        subscript_call_result_40103 = invoke(stypy.reporting.localization.Localization(__file__, 308, 13), getitem___40102, int_40087)
        
        # Assigning a type to the variable 'lw' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'lw', subscript_call_result_40103)
        # Getting the type of 'lw' (line 310)
        lw_40104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 15), 'lw')
        # Assigning a type to the variable 'stypy_return_type' (line 310)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 8), 'stypy_return_type', lw_40104)
        
        # ################# End of 'get_real_label_width(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_real_label_width' in the type store
        # Getting the type of 'stypy_return_type' (line 286)
        stypy_return_type_40105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40105)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_real_label_width'
        return stypy_return_type_40105


    @norecursion
    def set_label_props(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_label_props'
        module_type_store = module_type_store.open_function_context('set_label_props', 312, 4, False)
        # Assigning a type to the variable 'self' (line 313)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 313, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.set_label_props.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.set_label_props.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.set_label_props.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.set_label_props.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.set_label_props')
        ContourLabeler.set_label_props.__dict__.__setitem__('stypy_param_names_list', ['label', 'text', 'color'])
        ContourLabeler.set_label_props.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.set_label_props.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.set_label_props.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.set_label_props.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.set_label_props.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.set_label_props.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.set_label_props', ['label', 'text', 'color'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_label_props', localization, ['label', 'text', 'color'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_label_props(...)' code ##################

        unicode_40106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 313, 8), 'unicode', u'set the label properties - color, fontsize, text')
        
        # Call to set_text(...): (line 314)
        # Processing the call arguments (line 314)
        # Getting the type of 'text' (line 314)
        text_40109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 23), 'text', False)
        # Processing the call keyword arguments (line 314)
        kwargs_40110 = {}
        # Getting the type of 'label' (line 314)
        label_40107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'label', False)
        # Obtaining the member 'set_text' of a type (line 314)
        set_text_40108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 8), label_40107, 'set_text')
        # Calling set_text(args, kwargs) (line 314)
        set_text_call_result_40111 = invoke(stypy.reporting.localization.Localization(__file__, 314, 8), set_text_40108, *[text_40109], **kwargs_40110)
        
        
        # Call to set_color(...): (line 315)
        # Processing the call arguments (line 315)
        # Getting the type of 'color' (line 315)
        color_40114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 24), 'color', False)
        # Processing the call keyword arguments (line 315)
        kwargs_40115 = {}
        # Getting the type of 'label' (line 315)
        label_40112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 315, 8), 'label', False)
        # Obtaining the member 'set_color' of a type (line 315)
        set_color_40113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 315, 8), label_40112, 'set_color')
        # Calling set_color(args, kwargs) (line 315)
        set_color_call_result_40116 = invoke(stypy.reporting.localization.Localization(__file__, 315, 8), set_color_40113, *[color_40114], **kwargs_40115)
        
        
        # Call to set_fontproperties(...): (line 316)
        # Processing the call arguments (line 316)
        # Getting the type of 'self' (line 316)
        self_40119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 33), 'self', False)
        # Obtaining the member 'labelFontProps' of a type (line 316)
        labelFontProps_40120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 316, 33), self_40119, 'labelFontProps')
        # Processing the call keyword arguments (line 316)
        kwargs_40121 = {}
        # Getting the type of 'label' (line 316)
        label_40117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 316, 8), 'label', False)
        # Obtaining the member 'set_fontproperties' of a type (line 316)
        set_fontproperties_40118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 316, 8), label_40117, 'set_fontproperties')
        # Calling set_fontproperties(args, kwargs) (line 316)
        set_fontproperties_call_result_40122 = invoke(stypy.reporting.localization.Localization(__file__, 316, 8), set_fontproperties_40118, *[labelFontProps_40120], **kwargs_40121)
        
        
        # Call to set_clip_box(...): (line 317)
        # Processing the call arguments (line 317)
        # Getting the type of 'self' (line 317)
        self_40125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 27), 'self', False)
        # Obtaining the member 'ax' of a type (line 317)
        ax_40126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 27), self_40125, 'ax')
        # Obtaining the member 'bbox' of a type (line 317)
        bbox_40127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 27), ax_40126, 'bbox')
        # Processing the call keyword arguments (line 317)
        kwargs_40128 = {}
        # Getting the type of 'label' (line 317)
        label_40123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 8), 'label', False)
        # Obtaining the member 'set_clip_box' of a type (line 317)
        set_clip_box_40124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 317, 8), label_40123, 'set_clip_box')
        # Calling set_clip_box(args, kwargs) (line 317)
        set_clip_box_call_result_40129 = invoke(stypy.reporting.localization.Localization(__file__, 317, 8), set_clip_box_40124, *[bbox_40127], **kwargs_40128)
        
        
        # ################# End of 'set_label_props(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_label_props' in the type store
        # Getting the type of 'stypy_return_type' (line 312)
        stypy_return_type_40130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40130)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_label_props'
        return stypy_return_type_40130


    @norecursion
    def get_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_text'
        module_type_store = module_type_store.open_function_context('get_text', 319, 4, False)
        # Assigning a type to the variable 'self' (line 320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 320, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.get_text.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.get_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.get_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.get_text.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.get_text')
        ContourLabeler.get_text.__dict__.__setitem__('stypy_param_names_list', ['lev', 'fmt'])
        ContourLabeler.get_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.get_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.get_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.get_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.get_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.get_text.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.get_text', ['lev', 'fmt'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_text', localization, ['lev', 'fmt'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_text(...)' code ##################

        unicode_40131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 320, 8), 'unicode', u'get the text of the label')
        
        
        # Call to isinstance(...): (line 321)
        # Processing the call arguments (line 321)
        # Getting the type of 'lev' (line 321)
        lev_40133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 22), 'lev', False)
        # Getting the type of 'six' (line 321)
        six_40134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 27), 'six', False)
        # Obtaining the member 'string_types' of a type (line 321)
        string_types_40135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 321, 27), six_40134, 'string_types')
        # Processing the call keyword arguments (line 321)
        kwargs_40136 = {}
        # Getting the type of 'isinstance' (line 321)
        isinstance_40132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 321, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 321)
        isinstance_call_result_40137 = invoke(stypy.reporting.localization.Localization(__file__, 321, 11), isinstance_40132, *[lev_40133, string_types_40135], **kwargs_40136)
        
        # Testing the type of an if condition (line 321)
        if_condition_40138 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 321, 8), isinstance_call_result_40137)
        # Assigning a type to the variable 'if_condition_40138' (line 321)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 321, 8), 'if_condition_40138', if_condition_40138)
        # SSA begins for if statement (line 321)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'lev' (line 322)
        lev_40139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 19), 'lev')
        # Assigning a type to the variable 'stypy_return_type' (line 322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 12), 'stypy_return_type', lev_40139)
        # SSA branch for the else part of an if statement (line 321)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 324)
        # Getting the type of 'dict' (line 324)
        dict_40140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 31), 'dict')
        # Getting the type of 'fmt' (line 324)
        fmt_40141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 324, 26), 'fmt')
        
        (may_be_40142, more_types_in_union_40143) = may_be_subtype(dict_40140, fmt_40141)

        if may_be_40142:

            if more_types_in_union_40143:
                # Runtime conditional SSA (line 324)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'fmt' (line 324)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 324, 12), 'fmt', remove_not_subtype_from_union(fmt_40141, dict))
            
            # Obtaining the type of the subscript
            # Getting the type of 'lev' (line 325)
            lev_40144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 27), 'lev')
            # Getting the type of 'fmt' (line 325)
            fmt_40145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 23), 'fmt')
            # Obtaining the member '__getitem__' of a type (line 325)
            getitem___40146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 23), fmt_40145, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 325)
            subscript_call_result_40147 = invoke(stypy.reporting.localization.Localization(__file__, 325, 23), getitem___40146, lev_40144)
            
            # Assigning a type to the variable 'stypy_return_type' (line 325)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 325, 16), 'stypy_return_type', subscript_call_result_40147)

            if more_types_in_union_40143:
                # Runtime conditional SSA for else branch (line 324)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_40142) or more_types_in_union_40143):
            # Assigning a type to the variable 'fmt' (line 324)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 324, 12), 'fmt', remove_subtype_from_union(fmt_40141, dict))
            
            
            # Call to callable(...): (line 326)
            # Processing the call arguments (line 326)
            # Getting the type of 'fmt' (line 326)
            fmt_40149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 26), 'fmt', False)
            # Processing the call keyword arguments (line 326)
            kwargs_40150 = {}
            # Getting the type of 'callable' (line 326)
            callable_40148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 17), 'callable', False)
            # Calling callable(args, kwargs) (line 326)
            callable_call_result_40151 = invoke(stypy.reporting.localization.Localization(__file__, 326, 17), callable_40148, *[fmt_40149], **kwargs_40150)
            
            # Testing the type of an if condition (line 326)
            if_condition_40152 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 326, 17), callable_call_result_40151)
            # Assigning a type to the variable 'if_condition_40152' (line 326)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 326, 17), 'if_condition_40152', if_condition_40152)
            # SSA begins for if statement (line 326)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Call to fmt(...): (line 327)
            # Processing the call arguments (line 327)
            # Getting the type of 'lev' (line 327)
            lev_40154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 27), 'lev', False)
            # Processing the call keyword arguments (line 327)
            kwargs_40155 = {}
            # Getting the type of 'fmt' (line 327)
            fmt_40153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 23), 'fmt', False)
            # Calling fmt(args, kwargs) (line 327)
            fmt_call_result_40156 = invoke(stypy.reporting.localization.Localization(__file__, 327, 23), fmt_40153, *[lev_40154], **kwargs_40155)
            
            # Assigning a type to the variable 'stypy_return_type' (line 327)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 327, 16), 'stypy_return_type', fmt_call_result_40156)
            # SSA branch for the else part of an if statement (line 326)
            module_type_store.open_ssa_branch('else')
            # Getting the type of 'fmt' (line 329)
            fmt_40157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 23), 'fmt')
            # Getting the type of 'lev' (line 329)
            lev_40158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 329, 29), 'lev')
            # Applying the binary operator '%' (line 329)
            result_mod_40159 = python_operator(stypy.reporting.localization.Localization(__file__, 329, 23), '%', fmt_40157, lev_40158)
            
            # Assigning a type to the variable 'stypy_return_type' (line 329)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 329, 16), 'stypy_return_type', result_mod_40159)
            # SSA join for if statement (line 326)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_40142 and more_types_in_union_40143):
                # SSA join for if statement (line 324)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 321)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_text' in the type store
        # Getting the type of 'stypy_return_type' (line 319)
        stypy_return_type_40160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 319, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40160)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_text'
        return stypy_return_type_40160


    @norecursion
    def locate_label(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'locate_label'
        module_type_store = module_type_store.open_function_context('locate_label', 331, 4, False)
        # Assigning a type to the variable 'self' (line 332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 332, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.locate_label.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.locate_label.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.locate_label.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.locate_label.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.locate_label')
        ContourLabeler.locate_label.__dict__.__setitem__('stypy_param_names_list', ['linecontour', 'labelwidth'])
        ContourLabeler.locate_label.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.locate_label.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.locate_label.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.locate_label.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.locate_label.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.locate_label.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.locate_label', ['linecontour', 'labelwidth'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'locate_label', localization, ['linecontour', 'labelwidth'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'locate_label(...)' code ##################

        unicode_40161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 335, (-1)), 'unicode', u'\n        Find a good place to plot a label (relatively flat\n        part of the contour).\n        ')
        
        # Assigning a Call to a Name (line 338):
        
        # Assigning a Call to a Name (line 338):
        
        # Call to len(...): (line 338)
        # Processing the call arguments (line 338)
        # Getting the type of 'linecontour' (line 338)
        linecontour_40163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 20), 'linecontour', False)
        # Processing the call keyword arguments (line 338)
        kwargs_40164 = {}
        # Getting the type of 'len' (line 338)
        len_40162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 338, 16), 'len', False)
        # Calling len(args, kwargs) (line 338)
        len_call_result_40165 = invoke(stypy.reporting.localization.Localization(__file__, 338, 16), len_40162, *[linecontour_40163], **kwargs_40164)
        
        # Assigning a type to the variable 'nsize' (line 338)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 338, 8), 'nsize', len_call_result_40165)
        
        
        # Getting the type of 'labelwidth' (line 339)
        labelwidth_40166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 339, 11), 'labelwidth')
        int_40167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 339, 24), 'int')
        # Applying the binary operator '>' (line 339)
        result_gt_40168 = python_operator(stypy.reporting.localization.Localization(__file__, 339, 11), '>', labelwidth_40166, int_40167)
        
        # Testing the type of an if condition (line 339)
        if_condition_40169 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 339, 8), result_gt_40168)
        # Assigning a type to the variable 'if_condition_40169' (line 339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 339, 8), 'if_condition_40169', if_condition_40169)
        # SSA begins for if statement (line 339)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 340):
        
        # Assigning a Call to a Name (line 340):
        
        # Call to int(...): (line 340)
        # Processing the call arguments (line 340)
        
        # Call to ceil(...): (line 340)
        # Processing the call arguments (line 340)
        # Getting the type of 'nsize' (line 340)
        nsize_40173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 32), 'nsize', False)
        # Getting the type of 'labelwidth' (line 340)
        labelwidth_40174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 40), 'labelwidth', False)
        # Applying the binary operator 'div' (line 340)
        result_div_40175 = python_operator(stypy.reporting.localization.Localization(__file__, 340, 32), 'div', nsize_40173, labelwidth_40174)
        
        # Processing the call keyword arguments (line 340)
        kwargs_40176 = {}
        # Getting the type of 'np' (line 340)
        np_40171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 24), 'np', False)
        # Obtaining the member 'ceil' of a type (line 340)
        ceil_40172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 24), np_40171, 'ceil')
        # Calling ceil(args, kwargs) (line 340)
        ceil_call_result_40177 = invoke(stypy.reporting.localization.Localization(__file__, 340, 24), ceil_40172, *[result_div_40175], **kwargs_40176)
        
        # Processing the call keyword arguments (line 340)
        kwargs_40178 = {}
        # Getting the type of 'int' (line 340)
        int_40170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 20), 'int', False)
        # Calling int(args, kwargs) (line 340)
        int_call_result_40179 = invoke(stypy.reporting.localization.Localization(__file__, 340, 20), int_40170, *[ceil_call_result_40177], **kwargs_40178)
        
        # Assigning a type to the variable 'xsize' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 12), 'xsize', int_call_result_40179)
        # SSA branch for the else part of an if statement (line 339)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Name (line 342):
        
        # Assigning a Num to a Name (line 342):
        int_40180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 342, 20), 'int')
        # Assigning a type to the variable 'xsize' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 12), 'xsize', int_40180)
        # SSA join for if statement (line 339)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'xsize' (line 343)
        xsize_40181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 11), 'xsize')
        int_40182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 343, 20), 'int')
        # Applying the binary operator '==' (line 343)
        result_eq_40183 = python_operator(stypy.reporting.localization.Localization(__file__, 343, 11), '==', xsize_40181, int_40182)
        
        # Testing the type of an if condition (line 343)
        if_condition_40184 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 343, 8), result_eq_40183)
        # Assigning a type to the variable 'if_condition_40184' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 8), 'if_condition_40184', if_condition_40184)
        # SSA begins for if statement (line 343)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 344):
        
        # Assigning a Name to a Name (line 344):
        # Getting the type of 'nsize' (line 344)
        nsize_40185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 20), 'nsize')
        # Assigning a type to the variable 'ysize' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 12), 'ysize', nsize_40185)
        # SSA branch for the else part of an if statement (line 343)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 346):
        
        # Assigning a Call to a Name (line 346):
        
        # Call to int(...): (line 346)
        # Processing the call arguments (line 346)
        # Getting the type of 'labelwidth' (line 346)
        labelwidth_40187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 24), 'labelwidth', False)
        # Processing the call keyword arguments (line 346)
        kwargs_40188 = {}
        # Getting the type of 'int' (line 346)
        int_40186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 20), 'int', False)
        # Calling int(args, kwargs) (line 346)
        int_call_result_40189 = invoke(stypy.reporting.localization.Localization(__file__, 346, 20), int_40186, *[labelwidth_40187], **kwargs_40188)
        
        # Assigning a type to the variable 'ysize' (line 346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 12), 'ysize', int_call_result_40189)
        # SSA join for if statement (line 343)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 348):
        
        # Assigning a Call to a Name (line 348):
        
        # Call to resize(...): (line 348)
        # Processing the call arguments (line 348)
        
        # Obtaining the type of the subscript
        slice_40192 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 348, 23), None, None, None)
        int_40193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 348, 38), 'int')
        # Getting the type of 'linecontour' (line 348)
        linecontour_40194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 23), 'linecontour', False)
        # Obtaining the member '__getitem__' of a type (line 348)
        getitem___40195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 23), linecontour_40194, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 348)
        subscript_call_result_40196 = invoke(stypy.reporting.localization.Localization(__file__, 348, 23), getitem___40195, (slice_40192, int_40193))
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 348)
        tuple_40197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 348, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 348)
        # Adding element type (line 348)
        # Getting the type of 'xsize' (line 348)
        xsize_40198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 43), 'xsize', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 348, 43), tuple_40197, xsize_40198)
        # Adding element type (line 348)
        # Getting the type of 'ysize' (line 348)
        ysize_40199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 50), 'ysize', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 348, 43), tuple_40197, ysize_40199)
        
        # Processing the call keyword arguments (line 348)
        kwargs_40200 = {}
        # Getting the type of 'np' (line 348)
        np_40190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 13), 'np', False)
        # Obtaining the member 'resize' of a type (line 348)
        resize_40191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 348, 13), np_40190, 'resize')
        # Calling resize(args, kwargs) (line 348)
        resize_call_result_40201 = invoke(stypy.reporting.localization.Localization(__file__, 348, 13), resize_40191, *[subscript_call_result_40196, tuple_40197], **kwargs_40200)
        
        # Assigning a type to the variable 'XX' (line 348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 348, 8), 'XX', resize_call_result_40201)
        
        # Assigning a Call to a Name (line 349):
        
        # Assigning a Call to a Name (line 349):
        
        # Call to resize(...): (line 349)
        # Processing the call arguments (line 349)
        
        # Obtaining the type of the subscript
        slice_40204 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 349, 23), None, None, None)
        int_40205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, 38), 'int')
        # Getting the type of 'linecontour' (line 349)
        linecontour_40206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 23), 'linecontour', False)
        # Obtaining the member '__getitem__' of a type (line 349)
        getitem___40207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 23), linecontour_40206, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 349)
        subscript_call_result_40208 = invoke(stypy.reporting.localization.Localization(__file__, 349, 23), getitem___40207, (slice_40204, int_40205))
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 349)
        tuple_40209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 349, 43), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 349)
        # Adding element type (line 349)
        # Getting the type of 'xsize' (line 349)
        xsize_40210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 43), 'xsize', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 349, 43), tuple_40209, xsize_40210)
        # Adding element type (line 349)
        # Getting the type of 'ysize' (line 349)
        ysize_40211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 50), 'ysize', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 349, 43), tuple_40209, ysize_40211)
        
        # Processing the call keyword arguments (line 349)
        kwargs_40212 = {}
        # Getting the type of 'np' (line 349)
        np_40202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 13), 'np', False)
        # Obtaining the member 'resize' of a type (line 349)
        resize_40203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 349, 13), np_40202, 'resize')
        # Calling resize(args, kwargs) (line 349)
        resize_call_result_40213 = invoke(stypy.reporting.localization.Localization(__file__, 349, 13), resize_40203, *[subscript_call_result_40208, tuple_40209], **kwargs_40212)
        
        # Assigning a type to the variable 'YY' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 8), 'YY', resize_call_result_40213)
        
        # Assigning a Call to a Name (line 351):
        
        # Assigning a Call to a Name (line 351):
        
        # Call to reshape(...): (line 351)
        # Processing the call arguments (line 351)
        # Getting the type of 'xsize' (line 351)
        xsize_40220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 34), 'xsize', False)
        int_40221 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 351, 41), 'int')
        # Processing the call keyword arguments (line 351)
        kwargs_40222 = {}
        
        # Obtaining the type of the subscript
        slice_40214 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 351, 17), None, None, None)
        int_40215 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 351, 23), 'int')
        # Getting the type of 'YY' (line 351)
        YY_40216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 17), 'YY', False)
        # Obtaining the member '__getitem__' of a type (line 351)
        getitem___40217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 17), YY_40216, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 351)
        subscript_call_result_40218 = invoke(stypy.reporting.localization.Localization(__file__, 351, 17), getitem___40217, (slice_40214, int_40215))
        
        # Obtaining the member 'reshape' of a type (line 351)
        reshape_40219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 351, 17), subscript_call_result_40218, 'reshape')
        # Calling reshape(args, kwargs) (line 351)
        reshape_call_result_40223 = invoke(stypy.reporting.localization.Localization(__file__, 351, 17), reshape_40219, *[xsize_40220, int_40221], **kwargs_40222)
        
        # Assigning a type to the variable 'yfirst' (line 351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 8), 'yfirst', reshape_call_result_40223)
        
        # Assigning a Call to a Name (line 352):
        
        # Assigning a Call to a Name (line 352):
        
        # Call to reshape(...): (line 352)
        # Processing the call arguments (line 352)
        # Getting the type of 'xsize' (line 352)
        xsize_40230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 34), 'xsize', False)
        int_40231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 41), 'int')
        # Processing the call keyword arguments (line 352)
        kwargs_40232 = {}
        
        # Obtaining the type of the subscript
        slice_40224 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 352, 16), None, None, None)
        int_40225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 22), 'int')
        # Getting the type of 'YY' (line 352)
        YY_40226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 16), 'YY', False)
        # Obtaining the member '__getitem__' of a type (line 352)
        getitem___40227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 16), YY_40226, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 352)
        subscript_call_result_40228 = invoke(stypy.reporting.localization.Localization(__file__, 352, 16), getitem___40227, (slice_40224, int_40225))
        
        # Obtaining the member 'reshape' of a type (line 352)
        reshape_40229 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 16), subscript_call_result_40228, 'reshape')
        # Calling reshape(args, kwargs) (line 352)
        reshape_call_result_40233 = invoke(stypy.reporting.localization.Localization(__file__, 352, 16), reshape_40229, *[xsize_40230, int_40231], **kwargs_40232)
        
        # Assigning a type to the variable 'ylast' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 8), 'ylast', reshape_call_result_40233)
        
        # Assigning a Call to a Name (line 353):
        
        # Assigning a Call to a Name (line 353):
        
        # Call to reshape(...): (line 353)
        # Processing the call arguments (line 353)
        # Getting the type of 'xsize' (line 353)
        xsize_40240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 34), 'xsize', False)
        int_40241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 353, 41), 'int')
        # Processing the call keyword arguments (line 353)
        kwargs_40242 = {}
        
        # Obtaining the type of the subscript
        slice_40234 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 353, 17), None, None, None)
        int_40235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 353, 23), 'int')
        # Getting the type of 'XX' (line 353)
        XX_40236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 17), 'XX', False)
        # Obtaining the member '__getitem__' of a type (line 353)
        getitem___40237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 17), XX_40236, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 353)
        subscript_call_result_40238 = invoke(stypy.reporting.localization.Localization(__file__, 353, 17), getitem___40237, (slice_40234, int_40235))
        
        # Obtaining the member 'reshape' of a type (line 353)
        reshape_40239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 17), subscript_call_result_40238, 'reshape')
        # Calling reshape(args, kwargs) (line 353)
        reshape_call_result_40243 = invoke(stypy.reporting.localization.Localization(__file__, 353, 17), reshape_40239, *[xsize_40240, int_40241], **kwargs_40242)
        
        # Assigning a type to the variable 'xfirst' (line 353)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 353, 8), 'xfirst', reshape_call_result_40243)
        
        # Assigning a Call to a Name (line 354):
        
        # Assigning a Call to a Name (line 354):
        
        # Call to reshape(...): (line 354)
        # Processing the call arguments (line 354)
        # Getting the type of 'xsize' (line 354)
        xsize_40250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 34), 'xsize', False)
        int_40251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, 41), 'int')
        # Processing the call keyword arguments (line 354)
        kwargs_40252 = {}
        
        # Obtaining the type of the subscript
        slice_40244 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 354, 16), None, None, None)
        int_40245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 354, 22), 'int')
        # Getting the type of 'XX' (line 354)
        XX_40246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 354, 16), 'XX', False)
        # Obtaining the member '__getitem__' of a type (line 354)
        getitem___40247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 16), XX_40246, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 354)
        subscript_call_result_40248 = invoke(stypy.reporting.localization.Localization(__file__, 354, 16), getitem___40247, (slice_40244, int_40245))
        
        # Obtaining the member 'reshape' of a type (line 354)
        reshape_40249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 354, 16), subscript_call_result_40248, 'reshape')
        # Calling reshape(args, kwargs) (line 354)
        reshape_call_result_40253 = invoke(stypy.reporting.localization.Localization(__file__, 354, 16), reshape_40249, *[xsize_40250, int_40251], **kwargs_40252)
        
        # Assigning a type to the variable 'xlast' (line 354)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 354, 8), 'xlast', reshape_call_result_40253)
        
        # Assigning a BinOp to a Name (line 355):
        
        # Assigning a BinOp to a Name (line 355):
        # Getting the type of 'yfirst' (line 355)
        yfirst_40254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 13), 'yfirst')
        # Getting the type of 'YY' (line 355)
        YY_40255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 22), 'YY')
        # Applying the binary operator '-' (line 355)
        result_sub_40256 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 13), '-', yfirst_40254, YY_40255)
        
        # Getting the type of 'xlast' (line 355)
        xlast_40257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 29), 'xlast')
        # Getting the type of 'xfirst' (line 355)
        xfirst_40258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 37), 'xfirst')
        # Applying the binary operator '-' (line 355)
        result_sub_40259 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 29), '-', xlast_40257, xfirst_40258)
        
        # Applying the binary operator '*' (line 355)
        result_mul_40260 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 12), '*', result_sub_40256, result_sub_40259)
        
        # Getting the type of 'xfirst' (line 355)
        xfirst_40261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 48), 'xfirst')
        # Getting the type of 'XX' (line 355)
        XX_40262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 57), 'XX')
        # Applying the binary operator '-' (line 355)
        result_sub_40263 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 48), '-', xfirst_40261, XX_40262)
        
        # Getting the type of 'ylast' (line 355)
        ylast_40264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 64), 'ylast')
        # Getting the type of 'yfirst' (line 355)
        yfirst_40265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 72), 'yfirst')
        # Applying the binary operator '-' (line 355)
        result_sub_40266 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 64), '-', ylast_40264, yfirst_40265)
        
        # Applying the binary operator '*' (line 355)
        result_mul_40267 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 47), '*', result_sub_40263, result_sub_40266)
        
        # Applying the binary operator '-' (line 355)
        result_sub_40268 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 12), '-', result_mul_40260, result_mul_40267)
        
        # Assigning a type to the variable 's' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 8), 's', result_sub_40268)
        
        # Assigning a Call to a Name (line 356):
        
        # Assigning a Call to a Name (line 356):
        
        # Call to ravel(...): (line 356)
        # Processing the call keyword arguments (line 356)
        kwargs_40285 = {}
        
        # Call to sqrt(...): (line 356)
        # Processing the call arguments (line 356)
        # Getting the type of 'xlast' (line 356)
        xlast_40271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 21), 'xlast', False)
        # Getting the type of 'xfirst' (line 356)
        xfirst_40272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 29), 'xfirst', False)
        # Applying the binary operator '-' (line 356)
        result_sub_40273 = python_operator(stypy.reporting.localization.Localization(__file__, 356, 21), '-', xlast_40271, xfirst_40272)
        
        int_40274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 40), 'int')
        # Applying the binary operator '**' (line 356)
        result_pow_40275 = python_operator(stypy.reporting.localization.Localization(__file__, 356, 20), '**', result_sub_40273, int_40274)
        
        # Getting the type of 'ylast' (line 356)
        ylast_40276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 45), 'ylast', False)
        # Getting the type of 'yfirst' (line 356)
        yfirst_40277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 53), 'yfirst', False)
        # Applying the binary operator '-' (line 356)
        result_sub_40278 = python_operator(stypy.reporting.localization.Localization(__file__, 356, 45), '-', ylast_40276, yfirst_40277)
        
        int_40279 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 356, 64), 'int')
        # Applying the binary operator '**' (line 356)
        result_pow_40280 = python_operator(stypy.reporting.localization.Localization(__file__, 356, 44), '**', result_sub_40278, int_40279)
        
        # Applying the binary operator '+' (line 356)
        result_add_40281 = python_operator(stypy.reporting.localization.Localization(__file__, 356, 20), '+', result_pow_40275, result_pow_40280)
        
        # Processing the call keyword arguments (line 356)
        kwargs_40282 = {}
        # Getting the type of 'np' (line 356)
        np_40269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 356, 12), 'np', False)
        # Obtaining the member 'sqrt' of a type (line 356)
        sqrt_40270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 12), np_40269, 'sqrt')
        # Calling sqrt(args, kwargs) (line 356)
        sqrt_call_result_40283 = invoke(stypy.reporting.localization.Localization(__file__, 356, 12), sqrt_40270, *[result_add_40281], **kwargs_40282)
        
        # Obtaining the member 'ravel' of a type (line 356)
        ravel_40284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 356, 12), sqrt_call_result_40283, 'ravel')
        # Calling ravel(args, kwargs) (line 356)
        ravel_call_result_40286 = invoke(stypy.reporting.localization.Localization(__file__, 356, 12), ravel_40284, *[], **kwargs_40285)
        
        # Assigning a type to the variable 'L' (line 356)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 356, 8), 'L', ravel_call_result_40286)
        
        # Call to errstate(...): (line 358)
        # Processing the call keyword arguments (line 358)
        unicode_40289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 32), 'unicode', u'ignore')
        keyword_40290 = unicode_40289
        unicode_40291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 358, 50), 'unicode', u'ignore')
        keyword_40292 = unicode_40291
        kwargs_40293 = {'divide': keyword_40290, 'invalid': keyword_40292}
        # Getting the type of 'np' (line 358)
        np_40287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 358, 13), 'np', False)
        # Obtaining the member 'errstate' of a type (line 358)
        errstate_40288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 358, 13), np_40287, 'errstate')
        # Calling errstate(args, kwargs) (line 358)
        errstate_call_result_40294 = invoke(stypy.reporting.localization.Localization(__file__, 358, 13), errstate_40288, *[], **kwargs_40293)
        
        with_40295 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 358, 13), errstate_call_result_40294, 'with parameter', '__enter__', '__exit__')

        if with_40295:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 358)
            enter___40296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 358, 13), errstate_call_result_40294, '__enter__')
            with_enter_40297 = invoke(stypy.reporting.localization.Localization(__file__, 358, 13), enter___40296)
            
            # Assigning a Call to a Name (line 359):
            
            # Assigning a Call to a Name (line 359):
            
            # Call to reduce(...): (line 359)
            # Processing the call arguments (line 359)
            # Calculating list comprehension
            # Calculating comprehension expression
            
            # Call to range(...): (line 359)
            # Processing the call arguments (line 359)
            # Getting the type of 'xsize' (line 359)
            xsize_40314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 68), 'xsize', False)
            # Processing the call keyword arguments (line 359)
            kwargs_40315 = {}
            # Getting the type of 'range' (line 359)
            range_40313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 62), 'range', False)
            # Calling range(args, kwargs) (line 359)
            range_call_result_40316 = invoke(stypy.reporting.localization.Localization(__file__, 359, 62), range_40313, *[xsize_40314], **kwargs_40315)
            
            comprehension_40317 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 34), range_call_result_40316)
            # Assigning a type to the variable 'i' (line 359)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 34), 'i', comprehension_40317)
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 359)
            i_40301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 42), 'i', False)
            
            # Call to abs(...): (line 359)
            # Processing the call arguments (line 359)
            # Getting the type of 's' (line 359)
            s_40303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 39), 's', False)
            # Processing the call keyword arguments (line 359)
            kwargs_40304 = {}
            # Getting the type of 'abs' (line 359)
            abs_40302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 35), 'abs', False)
            # Calling abs(args, kwargs) (line 359)
            abs_call_result_40305 = invoke(stypy.reporting.localization.Localization(__file__, 359, 35), abs_40302, *[s_40303], **kwargs_40304)
            
            # Obtaining the member '__getitem__' of a type (line 359)
            getitem___40306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 35), abs_call_result_40305, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 359)
            subscript_call_result_40307 = invoke(stypy.reporting.localization.Localization(__file__, 359, 35), getitem___40306, i_40301)
            
            
            # Obtaining the type of the subscript
            # Getting the type of 'i' (line 359)
            i_40308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 49), 'i', False)
            # Getting the type of 'L' (line 359)
            L_40309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 47), 'L', False)
            # Obtaining the member '__getitem__' of a type (line 359)
            getitem___40310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 47), L_40309, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 359)
            subscript_call_result_40311 = invoke(stypy.reporting.localization.Localization(__file__, 359, 47), getitem___40310, i_40308)
            
            # Applying the binary operator 'div' (line 359)
            result_div_40312 = python_operator(stypy.reporting.localization.Localization(__file__, 359, 35), 'div', subscript_call_result_40307, subscript_call_result_40311)
            
            list_40318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 359, 34), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 359, 34), list_40318, result_div_40312)
            int_40319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 360, 33), 'int')
            # Processing the call keyword arguments (line 359)
            kwargs_40320 = {}
            # Getting the type of 'np' (line 359)
            np_40298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 359, 19), 'np', False)
            # Obtaining the member 'add' of a type (line 359)
            add_40299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 19), np_40298, 'add')
            # Obtaining the member 'reduce' of a type (line 359)
            reduce_40300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 359, 19), add_40299, 'reduce')
            # Calling reduce(args, kwargs) (line 359)
            reduce_call_result_40321 = invoke(stypy.reporting.localization.Localization(__file__, 359, 19), reduce_40300, *[list_40318, int_40319], **kwargs_40320)
            
            # Assigning a type to the variable 'dist' (line 359)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 359, 12), 'dist', reduce_call_result_40321)
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 358)
            exit___40322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 358, 13), errstate_call_result_40294, '__exit__')
            with_exit_40323 = invoke(stypy.reporting.localization.Localization(__file__, 358, 13), exit___40322, None, None, None)

        
        # Assigning a Call to a Tuple (line 361):
        
        # Assigning a Call to a Name:
        
        # Call to get_label_coords(...): (line 361)
        # Processing the call arguments (line 361)
        # Getting the type of 'dist' (line 361)
        dist_40326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 42), 'dist', False)
        # Getting the type of 'XX' (line 361)
        XX_40327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 48), 'XX', False)
        # Getting the type of 'YY' (line 361)
        YY_40328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 52), 'YY', False)
        # Getting the type of 'ysize' (line 361)
        ysize_40329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 56), 'ysize', False)
        # Getting the type of 'labelwidth' (line 361)
        labelwidth_40330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 63), 'labelwidth', False)
        # Processing the call keyword arguments (line 361)
        kwargs_40331 = {}
        # Getting the type of 'self' (line 361)
        self_40324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 20), 'self', False)
        # Obtaining the member 'get_label_coords' of a type (line 361)
        get_label_coords_40325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 20), self_40324, 'get_label_coords')
        # Calling get_label_coords(args, kwargs) (line 361)
        get_label_coords_call_result_40332 = invoke(stypy.reporting.localization.Localization(__file__, 361, 20), get_label_coords_40325, *[dist_40326, XX_40327, YY_40328, ysize_40329, labelwidth_40330], **kwargs_40331)
        
        # Assigning a type to the variable 'call_assignment_39305' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_39305', get_label_coords_call_result_40332)
        
        # Assigning a Call to a Name (line 361):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_40335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 8), 'int')
        # Processing the call keyword arguments
        kwargs_40336 = {}
        # Getting the type of 'call_assignment_39305' (line 361)
        call_assignment_39305_40333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_39305', False)
        # Obtaining the member '__getitem__' of a type (line 361)
        getitem___40334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 8), call_assignment_39305_40333, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_40337 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___40334, *[int_40335], **kwargs_40336)
        
        # Assigning a type to the variable 'call_assignment_39306' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_39306', getitem___call_result_40337)
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'call_assignment_39306' (line 361)
        call_assignment_39306_40338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_39306')
        # Assigning a type to the variable 'x' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'x', call_assignment_39306_40338)
        
        # Assigning a Call to a Name (line 361):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_40341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 8), 'int')
        # Processing the call keyword arguments
        kwargs_40342 = {}
        # Getting the type of 'call_assignment_39305' (line 361)
        call_assignment_39305_40339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_39305', False)
        # Obtaining the member '__getitem__' of a type (line 361)
        getitem___40340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 8), call_assignment_39305_40339, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_40343 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___40340, *[int_40341], **kwargs_40342)
        
        # Assigning a type to the variable 'call_assignment_39307' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_39307', getitem___call_result_40343)
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'call_assignment_39307' (line 361)
        call_assignment_39307_40344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_39307')
        # Assigning a type to the variable 'y' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 11), 'y', call_assignment_39307_40344)
        
        # Assigning a Call to a Name (line 361):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_40347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 361, 8), 'int')
        # Processing the call keyword arguments
        kwargs_40348 = {}
        # Getting the type of 'call_assignment_39305' (line 361)
        call_assignment_39305_40345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_39305', False)
        # Obtaining the member '__getitem__' of a type (line 361)
        getitem___40346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 361, 8), call_assignment_39305_40345, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_40349 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___40346, *[int_40347], **kwargs_40348)
        
        # Assigning a type to the variable 'call_assignment_39308' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_39308', getitem___call_result_40349)
        
        # Assigning a Name to a Name (line 361):
        # Getting the type of 'call_assignment_39308' (line 361)
        call_assignment_39308_40350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 361, 8), 'call_assignment_39308')
        # Assigning a type to the variable 'ind' (line 361)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 361, 14), 'ind', call_assignment_39308_40350)
        
        # Assigning a ListComp to a Name (line 364):
        
        # Assigning a ListComp to a Name (line 364):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'linecontour' (line 364)
        linecontour_40355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 32), 'linecontour')
        comprehension_40356 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 364, 14), linecontour_40355)
        # Assigning a type to the variable 'l' (line 364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 14), 'l', comprehension_40356)
        
        # Call to tuple(...): (line 364)
        # Processing the call arguments (line 364)
        # Getting the type of 'l' (line 364)
        l_40352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 20), 'l', False)
        # Processing the call keyword arguments (line 364)
        kwargs_40353 = {}
        # Getting the type of 'tuple' (line 364)
        tuple_40351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 14), 'tuple', False)
        # Calling tuple(args, kwargs) (line 364)
        tuple_call_result_40354 = invoke(stypy.reporting.localization.Localization(__file__, 364, 14), tuple_40351, *[l_40352], **kwargs_40353)
        
        list_40357 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, 14), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 364, 14), list_40357, tuple_call_result_40354)
        # Assigning a type to the variable 'lc' (line 364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 8), 'lc', list_40357)
        
        # Assigning a Call to a Name (line 365):
        
        # Assigning a Call to a Name (line 365):
        
        # Call to index(...): (line 365)
        # Processing the call arguments (line 365)
        
        # Obtaining an instance of the builtin type 'tuple' (line 365)
        tuple_40360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 365, 25), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 365)
        # Adding element type (line 365)
        # Getting the type of 'x' (line 365)
        x_40361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 25), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 365, 25), tuple_40360, x_40361)
        # Adding element type (line 365)
        # Getting the type of 'y' (line 365)
        y_40362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 28), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 365, 25), tuple_40360, y_40362)
        
        # Processing the call keyword arguments (line 365)
        kwargs_40363 = {}
        # Getting the type of 'lc' (line 365)
        lc_40358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 15), 'lc', False)
        # Obtaining the member 'index' of a type (line 365)
        index_40359 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 15), lc_40358, 'index')
        # Calling index(args, kwargs) (line 365)
        index_call_result_40364 = invoke(stypy.reporting.localization.Localization(__file__, 365, 15), index_40359, *[tuple_40360], **kwargs_40363)
        
        # Assigning a type to the variable 'dind' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 8), 'dind', index_call_result_40364)
        
        # Obtaining an instance of the builtin type 'tuple' (line 367)
        tuple_40365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 367, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 367)
        # Adding element type (line 367)
        # Getting the type of 'x' (line 367)
        x_40366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 15), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 367, 15), tuple_40365, x_40366)
        # Adding element type (line 367)
        # Getting the type of 'y' (line 367)
        y_40367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 18), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 367, 15), tuple_40365, y_40367)
        # Adding element type (line 367)
        # Getting the type of 'dind' (line 367)
        dind_40368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 21), 'dind')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 367, 15), tuple_40365, dind_40368)
        
        # Assigning a type to the variable 'stypy_return_type' (line 367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 8), 'stypy_return_type', tuple_40365)
        
        # ################# End of 'locate_label(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'locate_label' in the type store
        # Getting the type of 'stypy_return_type' (line 331)
        stypy_return_type_40369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40369)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'locate_label'
        return stypy_return_type_40369


    @norecursion
    def calc_label_rot_and_inline(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 369)
        None_40370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 57), 'None')
        int_40371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 369, 71), 'int')
        defaults = [None_40370, int_40371]
        # Create a new context for function 'calc_label_rot_and_inline'
        module_type_store = module_type_store.open_function_context('calc_label_rot_and_inline', 369, 4, False)
        # Assigning a type to the variable 'self' (line 370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.calc_label_rot_and_inline.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.calc_label_rot_and_inline.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.calc_label_rot_and_inline.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.calc_label_rot_and_inline.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.calc_label_rot_and_inline')
        ContourLabeler.calc_label_rot_and_inline.__dict__.__setitem__('stypy_param_names_list', ['slc', 'ind', 'lw', 'lc', 'spacing'])
        ContourLabeler.calc_label_rot_and_inline.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.calc_label_rot_and_inline.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.calc_label_rot_and_inline.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.calc_label_rot_and_inline.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.calc_label_rot_and_inline.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.calc_label_rot_and_inline.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.calc_label_rot_and_inline', ['slc', 'ind', 'lw', 'lc', 'spacing'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'calc_label_rot_and_inline', localization, ['slc', 'ind', 'lw', 'lc', 'spacing'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'calc_label_rot_and_inline(...)' code ##################

        unicode_40372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, (-1)), 'unicode', u'\n        This function calculates the appropriate label rotation given\n        the linecontour coordinates in screen units, the index of the\n        label location and the label width.\n\n        It will also break contour and calculate inlining if *lc* is\n        not empty (lc defaults to the empty list if None).  *spacing*\n        is the space around the label in pixels to leave empty.\n\n        Do both of these tasks at once to avoid calling mlab.path_length\n        multiple times, which is relatively costly.\n\n        The method used here involves calculating the path length\n        along the contour in pixel coordinates and then looking\n        approximately label width / 2 away from central point to\n        determine rotation and then to break contour if desired.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 388)
        # Getting the type of 'lc' (line 388)
        lc_40373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 11), 'lc')
        # Getting the type of 'None' (line 388)
        None_40374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 17), 'None')
        
        (may_be_40375, more_types_in_union_40376) = may_be_none(lc_40373, None_40374)

        if may_be_40375:

            if more_types_in_union_40376:
                # Runtime conditional SSA (line 388)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a List to a Name (line 389):
            
            # Assigning a List to a Name (line 389):
            
            # Obtaining an instance of the builtin type 'list' (line 389)
            list_40377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 389, 17), 'list')
            # Adding type elements to the builtin type 'list' instance (line 389)
            
            # Assigning a type to the variable 'lc' (line 389)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 389, 12), 'lc', list_40377)

            if more_types_in_union_40376:
                # SSA join for if statement (line 388)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a BinOp to a Name (line 391):
        
        # Assigning a BinOp to a Name (line 391):
        # Getting the type of 'lw' (line 391)
        lw_40378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 14), 'lw')
        float_40379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 19), 'float')
        # Applying the binary operator 'div' (line 391)
        result_div_40380 = python_operator(stypy.reporting.localization.Localization(__file__, 391, 14), 'div', lw_40378, float_40379)
        
        # Assigning a type to the variable 'hlw' (line 391)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 8), 'hlw', result_div_40380)
        
        # Assigning a Call to a Name (line 394):
        
        # Assigning a Call to a Name (line 394):
        
        # Call to is_closed_polygon(...): (line 394)
        # Processing the call arguments (line 394)
        # Getting the type of 'slc' (line 394)
        slc_40383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 40), 'slc', False)
        # Processing the call keyword arguments (line 394)
        kwargs_40384 = {}
        # Getting the type of 'mlab' (line 394)
        mlab_40381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 17), 'mlab', False)
        # Obtaining the member 'is_closed_polygon' of a type (line 394)
        is_closed_polygon_40382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 394, 17), mlab_40381, 'is_closed_polygon')
        # Calling is_closed_polygon(args, kwargs) (line 394)
        is_closed_polygon_call_result_40385 = invoke(stypy.reporting.localization.Localization(__file__, 394, 17), is_closed_polygon_40382, *[slc_40383], **kwargs_40384)
        
        # Assigning a type to the variable 'closed' (line 394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'closed', is_closed_polygon_call_result_40385)
        
        # Getting the type of 'closed' (line 395)
        closed_40386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 11), 'closed')
        # Testing the type of an if condition (line 395)
        if_condition_40387 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 395, 8), closed_40386)
        # Assigning a type to the variable 'if_condition_40387' (line 395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 395, 8), 'if_condition_40387', if_condition_40387)
        # SSA begins for if statement (line 395)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 396):
        
        # Assigning a Subscript to a Name (line 396):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 396)
        tuple_40388 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 396)
        # Adding element type (line 396)
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 396)
        ind_40389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 28), 'ind')
        int_40390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 32), 'int')
        slice_40391 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 396, 24), ind_40389, int_40390, None)
        # Getting the type of 'slc' (line 396)
        slc_40392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 24), 'slc')
        # Obtaining the member '__getitem__' of a type (line 396)
        getitem___40393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 24), slc_40392, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 396)
        subscript_call_result_40394 = invoke(stypy.reporting.localization.Localization(__file__, 396, 24), getitem___40393, slice_40391)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 396, 24), tuple_40388, subscript_call_result_40394)
        # Adding element type (line 396)
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 396)
        ind_40395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 42), 'ind')
        int_40396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 48), 'int')
        # Applying the binary operator '+' (line 396)
        result_add_40397 = python_operator(stypy.reporting.localization.Localization(__file__, 396, 42), '+', ind_40395, int_40396)
        
        slice_40398 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 396, 37), None, result_add_40397, None)
        # Getting the type of 'slc' (line 396)
        slc_40399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 37), 'slc')
        # Obtaining the member '__getitem__' of a type (line 396)
        getitem___40400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 37), slc_40399, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 396)
        subscript_call_result_40401 = invoke(stypy.reporting.localization.Localization(__file__, 396, 37), getitem___40400, slice_40398)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 396, 24), tuple_40388, subscript_call_result_40401)
        
        # Getting the type of 'np' (line 396)
        np_40402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 18), 'np')
        # Obtaining the member 'r_' of a type (line 396)
        r__40403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 18), np_40402, 'r_')
        # Obtaining the member '__getitem__' of a type (line 396)
        getitem___40404 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 396, 18), r__40403, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 396)
        subscript_call_result_40405 = invoke(stypy.reporting.localization.Localization(__file__, 396, 18), getitem___40404, tuple_40388)
        
        # Assigning a type to the variable 'slc' (line 396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 396, 12), 'slc', subscript_call_result_40405)
        
        
        # Call to len(...): (line 398)
        # Processing the call arguments (line 398)
        # Getting the type of 'lc' (line 398)
        lc_40407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 19), 'lc', False)
        # Processing the call keyword arguments (line 398)
        kwargs_40408 = {}
        # Getting the type of 'len' (line 398)
        len_40406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 15), 'len', False)
        # Calling len(args, kwargs) (line 398)
        len_call_result_40409 = invoke(stypy.reporting.localization.Localization(__file__, 398, 15), len_40406, *[lc_40407], **kwargs_40408)
        
        # Testing the type of an if condition (line 398)
        if_condition_40410 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 398, 12), len_call_result_40409)
        # Assigning a type to the variable 'if_condition_40410' (line 398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 398, 12), 'if_condition_40410', if_condition_40410)
        # SSA begins for if statement (line 398)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 399):
        
        # Assigning a Subscript to a Name (line 399):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 399)
        tuple_40411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 399)
        # Adding element type (line 399)
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 399)
        ind_40412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 30), 'ind')
        int_40413 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 34), 'int')
        slice_40414 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 399, 27), ind_40412, int_40413, None)
        # Getting the type of 'lc' (line 399)
        lc_40415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 27), 'lc')
        # Obtaining the member '__getitem__' of a type (line 399)
        getitem___40416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 27), lc_40415, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 399)
        subscript_call_result_40417 = invoke(stypy.reporting.localization.Localization(__file__, 399, 27), getitem___40416, slice_40414)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 399, 27), tuple_40411, subscript_call_result_40417)
        # Adding element type (line 399)
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 399)
        ind_40418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 43), 'ind')
        int_40419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 49), 'int')
        # Applying the binary operator '+' (line 399)
        result_add_40420 = python_operator(stypy.reporting.localization.Localization(__file__, 399, 43), '+', ind_40418, int_40419)
        
        slice_40421 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 399, 39), None, result_add_40420, None)
        # Getting the type of 'lc' (line 399)
        lc_40422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 39), 'lc')
        # Obtaining the member '__getitem__' of a type (line 399)
        getitem___40423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 39), lc_40422, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 399)
        subscript_call_result_40424 = invoke(stypy.reporting.localization.Localization(__file__, 399, 39), getitem___40423, slice_40421)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 399, 27), tuple_40411, subscript_call_result_40424)
        
        # Getting the type of 'np' (line 399)
        np_40425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 21), 'np')
        # Obtaining the member 'r_' of a type (line 399)
        r__40426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 21), np_40425, 'r_')
        # Obtaining the member '__getitem__' of a type (line 399)
        getitem___40427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 399, 21), r__40426, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 399)
        subscript_call_result_40428 = invoke(stypy.reporting.localization.Localization(__file__, 399, 21), getitem___40427, tuple_40411)
        
        # Assigning a type to the variable 'lc' (line 399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 399, 16), 'lc', subscript_call_result_40428)
        # SSA join for if statement (line 398)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 401):
        
        # Assigning a Num to a Name (line 401):
        int_40429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, 18), 'int')
        # Assigning a type to the variable 'ind' (line 401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 401, 12), 'ind', int_40429)
        # SSA join for if statement (line 395)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 404):
        
        # Assigning a Call to a Name (line 404):
        
        # Call to path_length(...): (line 404)
        # Processing the call arguments (line 404)
        # Getting the type of 'slc' (line 404)
        slc_40432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 30), 'slc', False)
        # Processing the call keyword arguments (line 404)
        kwargs_40433 = {}
        # Getting the type of 'mlab' (line 404)
        mlab_40430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 13), 'mlab', False)
        # Obtaining the member 'path_length' of a type (line 404)
        path_length_40431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 404, 13), mlab_40430, 'path_length')
        # Calling path_length(args, kwargs) (line 404)
        path_length_call_result_40434 = invoke(stypy.reporting.localization.Localization(__file__, 404, 13), path_length_40431, *[slc_40432], **kwargs_40433)
        
        # Assigning a type to the variable 'pl' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'pl', path_length_call_result_40434)
        
        # Assigning a BinOp to a Name (line 405):
        
        # Assigning a BinOp to a Name (line 405):
        # Getting the type of 'pl' (line 405)
        pl_40435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 13), 'pl')
        
        # Obtaining the type of the subscript
        # Getting the type of 'ind' (line 405)
        ind_40436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 21), 'ind')
        # Getting the type of 'pl' (line 405)
        pl_40437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 18), 'pl')
        # Obtaining the member '__getitem__' of a type (line 405)
        getitem___40438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 405, 18), pl_40437, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 405)
        subscript_call_result_40439 = invoke(stypy.reporting.localization.Localization(__file__, 405, 18), getitem___40438, ind_40436)
        
        # Applying the binary operator '-' (line 405)
        result_sub_40440 = python_operator(stypy.reporting.localization.Localization(__file__, 405, 13), '-', pl_40435, subscript_call_result_40439)
        
        # Assigning a type to the variable 'pl' (line 405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 8), 'pl', result_sub_40440)
        
        # Assigning a Call to a Name (line 408):
        
        # Assigning a Call to a Name (line 408):
        
        # Call to array(...): (line 408)
        # Processing the call arguments (line 408)
        
        # Obtaining an instance of the builtin type 'list' (line 408)
        list_40443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 408, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 408)
        # Adding element type (line 408)
        
        # Getting the type of 'hlw' (line 408)
        hlw_40444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 24), 'hlw', False)
        # Applying the 'usub' unary operator (line 408)
        result___neg___40445 = python_operator(stypy.reporting.localization.Localization(__file__, 408, 23), 'usub', hlw_40444)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 408, 22), list_40443, result___neg___40445)
        # Adding element type (line 408)
        # Getting the type of 'hlw' (line 408)
        hlw_40446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 29), 'hlw', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 408, 22), list_40443, hlw_40446)
        
        # Processing the call keyword arguments (line 408)
        kwargs_40447 = {}
        # Getting the type of 'np' (line 408)
        np_40441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 13), 'np', False)
        # Obtaining the member 'array' of a type (line 408)
        array_40442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 13), np_40441, 'array')
        # Calling array(args, kwargs) (line 408)
        array_call_result_40448 = invoke(stypy.reporting.localization.Localization(__file__, 408, 13), array_40442, *[list_40443], **kwargs_40447)
        
        # Assigning a type to the variable 'xi' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'xi', array_call_result_40448)
        
        # Getting the type of 'closed' (line 409)
        closed_40449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 11), 'closed')
        # Testing the type of an if condition (line 409)
        if_condition_40450 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 409, 8), closed_40449)
        # Assigning a type to the variable 'if_condition_40450' (line 409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 8), 'if_condition_40450', if_condition_40450)
        # SSA begins for if statement (line 409)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 410):
        
        # Assigning a Call to a Name (line 410):
        
        # Call to array(...): (line 410)
        # Processing the call arguments (line 410)
        
        # Obtaining an instance of the builtin type 'list' (line 410)
        list_40453 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 410)
        # Adding element type (line 410)
        
        # Obtaining the type of the subscript
        int_40454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 30), 'int')
        # Getting the type of 'pl' (line 410)
        pl_40455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 27), 'pl', False)
        # Obtaining the member '__getitem__' of a type (line 410)
        getitem___40456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 27), pl_40455, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 410)
        subscript_call_result_40457 = invoke(stypy.reporting.localization.Localization(__file__, 410, 27), getitem___40456, int_40454)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 410, 26), list_40453, subscript_call_result_40457)
        # Adding element type (line 410)
        int_40458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 410, 35), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 410, 26), list_40453, int_40458)
        
        # Processing the call keyword arguments (line 410)
        kwargs_40459 = {}
        # Getting the type of 'np' (line 410)
        np_40451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 17), 'np', False)
        # Obtaining the member 'array' of a type (line 410)
        array_40452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 17), np_40451, 'array')
        # Calling array(args, kwargs) (line 410)
        array_call_result_40460 = invoke(stypy.reporting.localization.Localization(__file__, 410, 17), array_40452, *[list_40453], **kwargs_40459)
        
        # Assigning a type to the variable 'dp' (line 410)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 410, 12), 'dp', array_call_result_40460)
        # SSA branch for the else part of an if statement (line 409)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 412):
        
        # Assigning a Call to a Name (line 412):
        
        # Call to zeros_like(...): (line 412)
        # Processing the call arguments (line 412)
        # Getting the type of 'xi' (line 412)
        xi_40463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 31), 'xi', False)
        # Processing the call keyword arguments (line 412)
        kwargs_40464 = {}
        # Getting the type of 'np' (line 412)
        np_40461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 17), 'np', False)
        # Obtaining the member 'zeros_like' of a type (line 412)
        zeros_like_40462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 17), np_40461, 'zeros_like')
        # Calling zeros_like(args, kwargs) (line 412)
        zeros_like_call_result_40465 = invoke(stypy.reporting.localization.Localization(__file__, 412, 17), zeros_like_40462, *[xi_40463], **kwargs_40464)
        
        # Assigning a type to the variable 'dp' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 12), 'dp', zeros_like_call_result_40465)
        # SSA join for if statement (line 409)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 414):
        
        # Assigning a Call to a Name (line 414):
        
        # Call to less_simple_linear_interpolation(...): (line 414)
        # Processing the call arguments (line 414)
        # Getting the type of 'pl' (line 414)
        pl_40468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 51), 'pl', False)
        # Getting the type of 'slc' (line 414)
        slc_40469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 55), 'slc', False)
        # Getting the type of 'dp' (line 414)
        dp_40470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 60), 'dp', False)
        # Getting the type of 'xi' (line 414)
        xi_40471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 65), 'xi', False)
        # Applying the binary operator '+' (line 414)
        result_add_40472 = python_operator(stypy.reporting.localization.Localization(__file__, 414, 60), '+', dp_40470, xi_40471)
        
        # Processing the call keyword arguments (line 414)
        # Getting the type of 'True' (line 415)
        True_40473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 58), 'True', False)
        keyword_40474 = True_40473
        kwargs_40475 = {'extrap': keyword_40474}
        # Getting the type of 'mlab' (line 414)
        mlab_40466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 13), 'mlab', False)
        # Obtaining the member 'less_simple_linear_interpolation' of a type (line 414)
        less_simple_linear_interpolation_40467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 13), mlab_40466, 'less_simple_linear_interpolation')
        # Calling less_simple_linear_interpolation(args, kwargs) (line 414)
        less_simple_linear_interpolation_call_result_40476 = invoke(stypy.reporting.localization.Localization(__file__, 414, 13), less_simple_linear_interpolation_40467, *[pl_40468, slc_40469, result_add_40472], **kwargs_40475)
        
        # Assigning a type to the variable 'll' (line 414)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 414, 8), 'll', less_simple_linear_interpolation_call_result_40476)
        
        # Assigning a Call to a Name (line 418):
        
        # Assigning a Call to a Name (line 418):
        
        # Call to ravel(...): (line 418)
        # Processing the call keyword arguments (line 418)
        kwargs_40485 = {}
        
        # Call to diff(...): (line 418)
        # Processing the call arguments (line 418)
        # Getting the type of 'll' (line 418)
        ll_40479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 21), 'll', False)
        # Processing the call keyword arguments (line 418)
        int_40480 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 418, 30), 'int')
        keyword_40481 = int_40480
        kwargs_40482 = {'axis': keyword_40481}
        # Getting the type of 'np' (line 418)
        np_40477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 13), 'np', False)
        # Obtaining the member 'diff' of a type (line 418)
        diff_40478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 13), np_40477, 'diff')
        # Calling diff(args, kwargs) (line 418)
        diff_call_result_40483 = invoke(stypy.reporting.localization.Localization(__file__, 418, 13), diff_40478, *[ll_40479], **kwargs_40482)
        
        # Obtaining the member 'ravel' of a type (line 418)
        ravel_40484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 418, 13), diff_call_result_40483, 'ravel')
        # Calling ravel(args, kwargs) (line 418)
        ravel_call_result_40486 = invoke(stypy.reporting.localization.Localization(__file__, 418, 13), ravel_40484, *[], **kwargs_40485)
        
        # Assigning a type to the variable 'dd' (line 418)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 418, 8), 'dd', ravel_call_result_40486)
        
        
        # Call to all(...): (line 422)
        # Processing the call arguments (line 422)
        
        # Getting the type of 'dd' (line 422)
        dd_40489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 18), 'dd', False)
        int_40490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 422, 24), 'int')
        # Applying the binary operator '==' (line 422)
        result_eq_40491 = python_operator(stypy.reporting.localization.Localization(__file__, 422, 18), '==', dd_40489, int_40490)
        
        # Processing the call keyword arguments (line 422)
        kwargs_40492 = {}
        # Getting the type of 'np' (line 422)
        np_40487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 11), 'np', False)
        # Obtaining the member 'all' of a type (line 422)
        all_40488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 11), np_40487, 'all')
        # Calling all(args, kwargs) (line 422)
        all_call_result_40493 = invoke(stypy.reporting.localization.Localization(__file__, 422, 11), all_40488, *[result_eq_40491], **kwargs_40492)
        
        # Testing the type of an if condition (line 422)
        if_condition_40494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 422, 8), all_call_result_40493)
        # Assigning a type to the variable 'if_condition_40494' (line 422)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 422, 8), 'if_condition_40494', if_condition_40494)
        # SSA begins for if statement (line 422)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 423):
        
        # Assigning a Num to a Name (line 423):
        float_40495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 423, 23), 'float')
        # Assigning a type to the variable 'rotation' (line 423)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 423, 12), 'rotation', float_40495)
        # SSA branch for the else part of an if statement (line 422)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 425):
        
        # Assigning a Call to a Name (line 425):
        
        # Call to rad2deg(...): (line 425)
        # Processing the call arguments (line 425)
        
        # Call to arctan2(...): (line 425)
        # Processing the call arguments (line 425)
        
        # Obtaining the type of the subscript
        int_40500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 425, 48), 'int')
        # Getting the type of 'dd' (line 425)
        dd_40501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 45), 'dd', False)
        # Obtaining the member '__getitem__' of a type (line 425)
        getitem___40502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 45), dd_40501, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 425)
        subscript_call_result_40503 = invoke(stypy.reporting.localization.Localization(__file__, 425, 45), getitem___40502, int_40500)
        
        
        # Obtaining the type of the subscript
        int_40504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 425, 55), 'int')
        # Getting the type of 'dd' (line 425)
        dd_40505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 52), 'dd', False)
        # Obtaining the member '__getitem__' of a type (line 425)
        getitem___40506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 52), dd_40505, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 425)
        subscript_call_result_40507 = invoke(stypy.reporting.localization.Localization(__file__, 425, 52), getitem___40506, int_40504)
        
        # Processing the call keyword arguments (line 425)
        kwargs_40508 = {}
        # Getting the type of 'np' (line 425)
        np_40498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 34), 'np', False)
        # Obtaining the member 'arctan2' of a type (line 425)
        arctan2_40499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 34), np_40498, 'arctan2')
        # Calling arctan2(args, kwargs) (line 425)
        arctan2_call_result_40509 = invoke(stypy.reporting.localization.Localization(__file__, 425, 34), arctan2_40499, *[subscript_call_result_40503, subscript_call_result_40507], **kwargs_40508)
        
        # Processing the call keyword arguments (line 425)
        kwargs_40510 = {}
        # Getting the type of 'np' (line 425)
        np_40496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 23), 'np', False)
        # Obtaining the member 'rad2deg' of a type (line 425)
        rad2deg_40497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 23), np_40496, 'rad2deg')
        # Calling rad2deg(args, kwargs) (line 425)
        rad2deg_call_result_40511 = invoke(stypy.reporting.localization.Localization(__file__, 425, 23), rad2deg_40497, *[arctan2_call_result_40509], **kwargs_40510)
        
        # Assigning a type to the variable 'rotation' (line 425)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 425, 12), 'rotation', rad2deg_call_result_40511)
        # SSA join for if statement (line 422)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 427)
        self_40512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 11), 'self')
        # Obtaining the member 'rightside_up' of a type (line 427)
        rightside_up_40513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 11), self_40512, 'rightside_up')
        # Testing the type of an if condition (line 427)
        if_condition_40514 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 427, 8), rightside_up_40513)
        # Assigning a type to the variable 'if_condition_40514' (line 427)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 427, 8), 'if_condition_40514', if_condition_40514)
        # SSA begins for if statement (line 427)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'rotation' (line 429)
        rotation_40515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 429, 15), 'rotation')
        int_40516 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 429, 26), 'int')
        # Applying the binary operator '>' (line 429)
        result_gt_40517 = python_operator(stypy.reporting.localization.Localization(__file__, 429, 15), '>', rotation_40515, int_40516)
        
        # Testing the type of an if condition (line 429)
        if_condition_40518 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 429, 12), result_gt_40517)
        # Assigning a type to the variable 'if_condition_40518' (line 429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 429, 12), 'if_condition_40518', if_condition_40518)
        # SSA begins for if statement (line 429)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 430):
        
        # Assigning a BinOp to a Name (line 430):
        # Getting the type of 'rotation' (line 430)
        rotation_40519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 430, 27), 'rotation')
        float_40520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 430, 38), 'float')
        # Applying the binary operator '-' (line 430)
        result_sub_40521 = python_operator(stypy.reporting.localization.Localization(__file__, 430, 27), '-', rotation_40519, float_40520)
        
        # Assigning a type to the variable 'rotation' (line 430)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 430, 16), 'rotation', result_sub_40521)
        # SSA join for if statement (line 429)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'rotation' (line 431)
        rotation_40522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 431, 15), 'rotation')
        int_40523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 431, 26), 'int')
        # Applying the binary operator '<' (line 431)
        result_lt_40524 = python_operator(stypy.reporting.localization.Localization(__file__, 431, 15), '<', rotation_40522, int_40523)
        
        # Testing the type of an if condition (line 431)
        if_condition_40525 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 431, 12), result_lt_40524)
        # Assigning a type to the variable 'if_condition_40525' (line 431)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 431, 12), 'if_condition_40525', if_condition_40525)
        # SSA begins for if statement (line 431)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 432):
        
        # Assigning a BinOp to a Name (line 432):
        float_40526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 432, 27), 'float')
        # Getting the type of 'rotation' (line 432)
        rotation_40527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 432, 35), 'rotation')
        # Applying the binary operator '+' (line 432)
        result_add_40528 = python_operator(stypy.reporting.localization.Localization(__file__, 432, 27), '+', float_40526, rotation_40527)
        
        # Assigning a type to the variable 'rotation' (line 432)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 432, 16), 'rotation', result_add_40528)
        # SSA join for if statement (line 431)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 427)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Name (line 435):
        
        # Assigning a List to a Name (line 435):
        
        # Obtaining an instance of the builtin type 'list' (line 435)
        list_40529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 435, 14), 'list')
        # Adding type elements to the builtin type 'list' instance (line 435)
        
        # Assigning a type to the variable 'nlc' (line 435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 435, 8), 'nlc', list_40529)
        
        
        # Call to len(...): (line 436)
        # Processing the call arguments (line 436)
        # Getting the type of 'lc' (line 436)
        lc_40531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 15), 'lc', False)
        # Processing the call keyword arguments (line 436)
        kwargs_40532 = {}
        # Getting the type of 'len' (line 436)
        len_40530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 436, 11), 'len', False)
        # Calling len(args, kwargs) (line 436)
        len_call_result_40533 = invoke(stypy.reporting.localization.Localization(__file__, 436, 11), len_40530, *[lc_40531], **kwargs_40532)
        
        # Testing the type of an if condition (line 436)
        if_condition_40534 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 436, 8), len_call_result_40533)
        # Assigning a type to the variable 'if_condition_40534' (line 436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 436, 8), 'if_condition_40534', if_condition_40534)
        # SSA begins for if statement (line 436)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 438):
        
        # Assigning a BinOp to a Name (line 438):
        # Getting the type of 'dp' (line 438)
        dp_40535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 17), 'dp')
        # Getting the type of 'xi' (line 438)
        xi_40536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 22), 'xi')
        # Applying the binary operator '+' (line 438)
        result_add_40537 = python_operator(stypy.reporting.localization.Localization(__file__, 438, 17), '+', dp_40535, xi_40536)
        
        
        # Call to array(...): (line 438)
        # Processing the call arguments (line 438)
        
        # Obtaining an instance of the builtin type 'list' (line 438)
        list_40540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 438, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 438)
        # Adding element type (line 438)
        
        # Getting the type of 'spacing' (line 438)
        spacing_40541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 38), 'spacing', False)
        # Applying the 'usub' unary operator (line 438)
        result___neg___40542 = python_operator(stypy.reporting.localization.Localization(__file__, 438, 37), 'usub', spacing_40541)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 36), list_40540, result___neg___40542)
        # Adding element type (line 438)
        # Getting the type of 'spacing' (line 438)
        spacing_40543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 47), 'spacing', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 438, 36), list_40540, spacing_40543)
        
        # Processing the call keyword arguments (line 438)
        kwargs_40544 = {}
        # Getting the type of 'np' (line 438)
        np_40538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 438, 27), 'np', False)
        # Obtaining the member 'array' of a type (line 438)
        array_40539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 438, 27), np_40538, 'array')
        # Calling array(args, kwargs) (line 438)
        array_call_result_40545 = invoke(stypy.reporting.localization.Localization(__file__, 438, 27), array_40539, *[list_40540], **kwargs_40544)
        
        # Applying the binary operator '+' (line 438)
        result_add_40546 = python_operator(stypy.reporting.localization.Localization(__file__, 438, 25), '+', result_add_40537, array_call_result_40545)
        
        # Assigning a type to the variable 'xi' (line 438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 438, 12), 'xi', result_add_40546)
        
        # Assigning a Call to a Name (line 441):
        
        # Assigning a Call to a Name (line 441):
        
        # Call to less_simple_linear_interpolation(...): (line 441)
        # Processing the call arguments (line 441)
        # Getting the type of 'pl' (line 442)
        pl_40549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 16), 'pl', False)
        
        # Call to arange(...): (line 442)
        # Processing the call arguments (line 442)
        
        # Call to len(...): (line 442)
        # Processing the call arguments (line 442)
        # Getting the type of 'pl' (line 442)
        pl_40553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 34), 'pl', False)
        # Processing the call keyword arguments (line 442)
        kwargs_40554 = {}
        # Getting the type of 'len' (line 442)
        len_40552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 30), 'len', False)
        # Calling len(args, kwargs) (line 442)
        len_call_result_40555 = invoke(stypy.reporting.localization.Localization(__file__, 442, 30), len_40552, *[pl_40553], **kwargs_40554)
        
        # Processing the call keyword arguments (line 442)
        kwargs_40556 = {}
        # Getting the type of 'np' (line 442)
        np_40550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 20), 'np', False)
        # Obtaining the member 'arange' of a type (line 442)
        arange_40551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 442, 20), np_40550, 'arange')
        # Calling arange(args, kwargs) (line 442)
        arange_call_result_40557 = invoke(stypy.reporting.localization.Localization(__file__, 442, 20), arange_40551, *[len_call_result_40555], **kwargs_40556)
        
        # Getting the type of 'xi' (line 442)
        xi_40558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 40), 'xi', False)
        # Processing the call keyword arguments (line 441)
        # Getting the type of 'False' (line 442)
        False_40559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 442, 51), 'False', False)
        keyword_40560 = False_40559
        kwargs_40561 = {'extrap': keyword_40560}
        # Getting the type of 'mlab' (line 441)
        mlab_40547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 16), 'mlab', False)
        # Obtaining the member 'less_simple_linear_interpolation' of a type (line 441)
        less_simple_linear_interpolation_40548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 441, 16), mlab_40547, 'less_simple_linear_interpolation')
        # Calling less_simple_linear_interpolation(args, kwargs) (line 441)
        less_simple_linear_interpolation_call_result_40562 = invoke(stypy.reporting.localization.Localization(__file__, 441, 16), less_simple_linear_interpolation_40548, *[pl_40549, arange_call_result_40557, xi_40558], **kwargs_40561)
        
        # Assigning a type to the variable 'I' (line 441)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 441, 12), 'I', less_simple_linear_interpolation_call_result_40562)
        
        
        # Evaluating a boolean operation
        
        
        # Call to isnan(...): (line 445)
        # Processing the call arguments (line 445)
        
        # Obtaining the type of the subscript
        int_40565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 31), 'int')
        # Getting the type of 'I' (line 445)
        I_40566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 29), 'I', False)
        # Obtaining the member '__getitem__' of a type (line 445)
        getitem___40567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 29), I_40566, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 445)
        subscript_call_result_40568 = invoke(stypy.reporting.localization.Localization(__file__, 445, 29), getitem___40567, int_40565)
        
        # Processing the call keyword arguments (line 445)
        kwargs_40569 = {}
        # Getting the type of 'np' (line 445)
        np_40563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 20), 'np', False)
        # Obtaining the member 'isnan' of a type (line 445)
        isnan_40564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 20), np_40563, 'isnan')
        # Calling isnan(args, kwargs) (line 445)
        isnan_call_result_40570 = invoke(stypy.reporting.localization.Localization(__file__, 445, 20), isnan_40564, *[subscript_call_result_40568], **kwargs_40569)
        
        # Applying the 'not' unary operator (line 445)
        result_not__40571 = python_operator(stypy.reporting.localization.Localization(__file__, 445, 16), 'not', isnan_call_result_40570)
        
        
        
        # Call to int(...): (line 445)
        # Processing the call arguments (line 445)
        
        # Obtaining the type of the subscript
        int_40573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 46), 'int')
        # Getting the type of 'I' (line 445)
        I_40574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 44), 'I', False)
        # Obtaining the member '__getitem__' of a type (line 445)
        getitem___40575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 44), I_40574, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 445)
        subscript_call_result_40576 = invoke(stypy.reporting.localization.Localization(__file__, 445, 44), getitem___40575, int_40573)
        
        # Processing the call keyword arguments (line 445)
        kwargs_40577 = {}
        # Getting the type of 'int' (line 445)
        int_40572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 40), 'int', False)
        # Calling int(args, kwargs) (line 445)
        int_call_result_40578 = invoke(stypy.reporting.localization.Localization(__file__, 445, 40), int_40572, *[subscript_call_result_40576], **kwargs_40577)
        
        
        # Obtaining the type of the subscript
        int_40579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 445, 55), 'int')
        # Getting the type of 'I' (line 445)
        I_40580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 445, 53), 'I')
        # Obtaining the member '__getitem__' of a type (line 445)
        getitem___40581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 445, 53), I_40580, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 445)
        subscript_call_result_40582 = invoke(stypy.reporting.localization.Localization(__file__, 445, 53), getitem___40581, int_40579)
        
        # Applying the binary operator '!=' (line 445)
        result_ne_40583 = python_operator(stypy.reporting.localization.Localization(__file__, 445, 40), '!=', int_call_result_40578, subscript_call_result_40582)
        
        # Applying the binary operator 'and' (line 445)
        result_and_keyword_40584 = python_operator(stypy.reporting.localization.Localization(__file__, 445, 15), 'and', result_not__40571, result_ne_40583)
        
        # Testing the type of an if condition (line 445)
        if_condition_40585 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 445, 12), result_and_keyword_40584)
        # Assigning a type to the variable 'if_condition_40585' (line 445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 445, 12), 'if_condition_40585', if_condition_40585)
        # SSA begins for if statement (line 445)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 446):
        
        # Assigning a Call to a Name (line 446):
        
        # Call to less_simple_linear_interpolation(...): (line 446)
        # Processing the call arguments (line 446)
        # Getting the type of 'pl' (line 447)
        pl_40588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 20), 'pl', False)
        # Getting the type of 'lc' (line 447)
        lc_40589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 24), 'lc', False)
        
        # Obtaining an instance of the builtin type 'list' (line 447)
        list_40590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 447, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 447)
        # Adding element type (line 447)
        
        # Obtaining the type of the subscript
        int_40591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 447, 32), 'int')
        # Getting the type of 'xi' (line 447)
        xi_40592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 29), 'xi', False)
        # Obtaining the member '__getitem__' of a type (line 447)
        getitem___40593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 29), xi_40592, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 447)
        subscript_call_result_40594 = invoke(stypy.reporting.localization.Localization(__file__, 447, 29), getitem___40593, int_40591)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 447, 28), list_40590, subscript_call_result_40594)
        
        # Processing the call keyword arguments (line 446)
        kwargs_40595 = {}
        # Getting the type of 'mlab' (line 446)
        mlab_40586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 446, 22), 'mlab', False)
        # Obtaining the member 'less_simple_linear_interpolation' of a type (line 446)
        less_simple_linear_interpolation_40587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 446, 22), mlab_40586, 'less_simple_linear_interpolation')
        # Calling less_simple_linear_interpolation(args, kwargs) (line 446)
        less_simple_linear_interpolation_call_result_40596 = invoke(stypy.reporting.localization.Localization(__file__, 446, 22), less_simple_linear_interpolation_40587, *[pl_40588, lc_40589, list_40590], **kwargs_40595)
        
        # Assigning a type to the variable 'xy1' (line 446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 446, 16), 'xy1', less_simple_linear_interpolation_call_result_40596)
        # SSA join for if statement (line 445)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        
        # Call to isnan(...): (line 449)
        # Processing the call arguments (line 449)
        
        # Obtaining the type of the subscript
        int_40599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 449, 31), 'int')
        # Getting the type of 'I' (line 449)
        I_40600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 29), 'I', False)
        # Obtaining the member '__getitem__' of a type (line 449)
        getitem___40601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 29), I_40600, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 449)
        subscript_call_result_40602 = invoke(stypy.reporting.localization.Localization(__file__, 449, 29), getitem___40601, int_40599)
        
        # Processing the call keyword arguments (line 449)
        kwargs_40603 = {}
        # Getting the type of 'np' (line 449)
        np_40597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 20), 'np', False)
        # Obtaining the member 'isnan' of a type (line 449)
        isnan_40598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 20), np_40597, 'isnan')
        # Calling isnan(args, kwargs) (line 449)
        isnan_call_result_40604 = invoke(stypy.reporting.localization.Localization(__file__, 449, 20), isnan_40598, *[subscript_call_result_40602], **kwargs_40603)
        
        # Applying the 'not' unary operator (line 449)
        result_not__40605 = python_operator(stypy.reporting.localization.Localization(__file__, 449, 16), 'not', isnan_call_result_40604)
        
        
        
        # Call to int(...): (line 449)
        # Processing the call arguments (line 449)
        
        # Obtaining the type of the subscript
        int_40607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 449, 46), 'int')
        # Getting the type of 'I' (line 449)
        I_40608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 44), 'I', False)
        # Obtaining the member '__getitem__' of a type (line 449)
        getitem___40609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 44), I_40608, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 449)
        subscript_call_result_40610 = invoke(stypy.reporting.localization.Localization(__file__, 449, 44), getitem___40609, int_40607)
        
        # Processing the call keyword arguments (line 449)
        kwargs_40611 = {}
        # Getting the type of 'int' (line 449)
        int_40606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 40), 'int', False)
        # Calling int(args, kwargs) (line 449)
        int_call_result_40612 = invoke(stypy.reporting.localization.Localization(__file__, 449, 40), int_40606, *[subscript_call_result_40610], **kwargs_40611)
        
        
        # Obtaining the type of the subscript
        int_40613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 449, 55), 'int')
        # Getting the type of 'I' (line 449)
        I_40614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 53), 'I')
        # Obtaining the member '__getitem__' of a type (line 449)
        getitem___40615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 53), I_40614, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 449)
        subscript_call_result_40616 = invoke(stypy.reporting.localization.Localization(__file__, 449, 53), getitem___40615, int_40613)
        
        # Applying the binary operator '!=' (line 449)
        result_ne_40617 = python_operator(stypy.reporting.localization.Localization(__file__, 449, 40), '!=', int_call_result_40612, subscript_call_result_40616)
        
        # Applying the binary operator 'and' (line 449)
        result_and_keyword_40618 = python_operator(stypy.reporting.localization.Localization(__file__, 449, 15), 'and', result_not__40605, result_ne_40617)
        
        # Testing the type of an if condition (line 449)
        if_condition_40619 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 449, 12), result_and_keyword_40618)
        # Assigning a type to the variable 'if_condition_40619' (line 449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 12), 'if_condition_40619', if_condition_40619)
        # SSA begins for if statement (line 449)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 450):
        
        # Assigning a Call to a Name (line 450):
        
        # Call to less_simple_linear_interpolation(...): (line 450)
        # Processing the call arguments (line 450)
        # Getting the type of 'pl' (line 451)
        pl_40622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 20), 'pl', False)
        # Getting the type of 'lc' (line 451)
        lc_40623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 24), 'lc', False)
        
        # Obtaining an instance of the builtin type 'list' (line 451)
        list_40624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 451, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 451)
        # Adding element type (line 451)
        
        # Obtaining the type of the subscript
        int_40625 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 451, 32), 'int')
        # Getting the type of 'xi' (line 451)
        xi_40626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 451, 29), 'xi', False)
        # Obtaining the member '__getitem__' of a type (line 451)
        getitem___40627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 451, 29), xi_40626, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 451)
        subscript_call_result_40628 = invoke(stypy.reporting.localization.Localization(__file__, 451, 29), getitem___40627, int_40625)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 451, 28), list_40624, subscript_call_result_40628)
        
        # Processing the call keyword arguments (line 450)
        kwargs_40629 = {}
        # Getting the type of 'mlab' (line 450)
        mlab_40620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 22), 'mlab', False)
        # Obtaining the member 'less_simple_linear_interpolation' of a type (line 450)
        less_simple_linear_interpolation_40621 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 22), mlab_40620, 'less_simple_linear_interpolation')
        # Calling less_simple_linear_interpolation(args, kwargs) (line 450)
        less_simple_linear_interpolation_call_result_40630 = invoke(stypy.reporting.localization.Localization(__file__, 450, 22), less_simple_linear_interpolation_40621, *[pl_40622, lc_40623, list_40624], **kwargs_40629)
        
        # Assigning a type to the variable 'xy2' (line 450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 450, 16), 'xy2', less_simple_linear_interpolation_call_result_40630)
        # SSA join for if statement (line 449)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to errstate(...): (line 457)
        # Processing the call keyword arguments (line 457)
        unicode_40633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 457, 37), 'unicode', u'ignore')
        keyword_40634 = unicode_40633
        kwargs_40635 = {'invalid': keyword_40634}
        # Getting the type of 'np' (line 457)
        np_40631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 457, 17), 'np', False)
        # Obtaining the member 'errstate' of a type (line 457)
        errstate_40632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 17), np_40631, 'errstate')
        # Calling errstate(args, kwargs) (line 457)
        errstate_call_result_40636 = invoke(stypy.reporting.localization.Localization(__file__, 457, 17), errstate_40632, *[], **kwargs_40635)
        
        with_40637 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 457, 17), errstate_call_result_40636, 'with parameter', '__enter__', '__exit__')

        if with_40637:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 457)
            enter___40638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 17), errstate_call_result_40636, '__enter__')
            with_enter_40639 = invoke(stypy.reporting.localization.Localization(__file__, 457, 17), enter___40638)
            
            # Assigning a List to a Name (line 458):
            
            # Assigning a List to a Name (line 458):
            
            # Obtaining an instance of the builtin type 'list' (line 458)
            list_40640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 458, 20), 'list')
            # Adding type elements to the builtin type 'list' instance (line 458)
            # Adding element type (line 458)
            
            # Call to floor(...): (line 458)
            # Processing the call arguments (line 458)
            
            # Obtaining the type of the subscript
            int_40643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 458, 32), 'int')
            # Getting the type of 'I' (line 458)
            I_40644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 30), 'I', False)
            # Obtaining the member '__getitem__' of a type (line 458)
            getitem___40645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 30), I_40644, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 458)
            subscript_call_result_40646 = invoke(stypy.reporting.localization.Localization(__file__, 458, 30), getitem___40645, int_40643)
            
            # Processing the call keyword arguments (line 458)
            kwargs_40647 = {}
            # Getting the type of 'np' (line 458)
            np_40641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 21), 'np', False)
            # Obtaining the member 'floor' of a type (line 458)
            floor_40642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 21), np_40641, 'floor')
            # Calling floor(args, kwargs) (line 458)
            floor_call_result_40648 = invoke(stypy.reporting.localization.Localization(__file__, 458, 21), floor_40642, *[subscript_call_result_40646], **kwargs_40647)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 458, 20), list_40640, floor_call_result_40648)
            # Adding element type (line 458)
            
            # Call to ceil(...): (line 458)
            # Processing the call arguments (line 458)
            
            # Obtaining the type of the subscript
            int_40651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 458, 47), 'int')
            # Getting the type of 'I' (line 458)
            I_40652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 45), 'I', False)
            # Obtaining the member '__getitem__' of a type (line 458)
            getitem___40653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 45), I_40652, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 458)
            subscript_call_result_40654 = invoke(stypy.reporting.localization.Localization(__file__, 458, 45), getitem___40653, int_40651)
            
            # Processing the call keyword arguments (line 458)
            kwargs_40655 = {}
            # Getting the type of 'np' (line 458)
            np_40649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 37), 'np', False)
            # Obtaining the member 'ceil' of a type (line 458)
            ceil_40650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 37), np_40649, 'ceil')
            # Calling ceil(args, kwargs) (line 458)
            ceil_call_result_40656 = invoke(stypy.reporting.localization.Localization(__file__, 458, 37), ceil_40650, *[subscript_call_result_40654], **kwargs_40655)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 458, 20), list_40640, ceil_call_result_40656)
            
            # Assigning a type to the variable 'I' (line 458)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 458, 16), 'I', list_40640)
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 457)
            exit___40657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 457, 17), errstate_call_result_40636, '__exit__')
            with_exit_40658 = invoke(stypy.reporting.localization.Localization(__file__, 457, 17), exit___40657, None, None, None)

        
        # Getting the type of 'closed' (line 461)
        closed_40659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 15), 'closed')
        # Testing the type of an if condition (line 461)
        if_condition_40660 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 461, 12), closed_40659)
        # Assigning a type to the variable 'if_condition_40660' (line 461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 461, 12), 'if_condition_40660', if_condition_40660)
        # SSA begins for if statement (line 461)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Call to all(...): (line 463)
        # Processing the call arguments (line 463)
        
        
        # Call to isnan(...): (line 463)
        # Processing the call arguments (line 463)
        # Getting the type of 'I' (line 463)
        I_40665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 36), 'I', False)
        # Processing the call keyword arguments (line 463)
        kwargs_40666 = {}
        # Getting the type of 'np' (line 463)
        np_40663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 27), 'np', False)
        # Obtaining the member 'isnan' of a type (line 463)
        isnan_40664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 463, 27), np_40663, 'isnan')
        # Calling isnan(args, kwargs) (line 463)
        isnan_call_result_40667 = invoke(stypy.reporting.localization.Localization(__file__, 463, 27), isnan_40664, *[I_40665], **kwargs_40666)
        
        # Applying the '~' unary operator (line 463)
        result_inv_40668 = python_operator(stypy.reporting.localization.Localization(__file__, 463, 26), '~', isnan_call_result_40667)
        
        # Processing the call keyword arguments (line 463)
        kwargs_40669 = {}
        # Getting the type of 'np' (line 463)
        np_40661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 463, 19), 'np', False)
        # Obtaining the member 'all' of a type (line 463)
        all_40662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 463, 19), np_40661, 'all')
        # Calling all(args, kwargs) (line 463)
        all_call_result_40670 = invoke(stypy.reporting.localization.Localization(__file__, 463, 19), all_40662, *[result_inv_40668], **kwargs_40669)
        
        # Testing the type of an if condition (line 463)
        if_condition_40671 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 463, 16), all_call_result_40670)
        # Assigning a type to the variable 'if_condition_40671' (line 463)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 463, 16), 'if_condition_40671', if_condition_40671)
        # SSA begins for if statement (line 463)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 464)
        # Processing the call arguments (line 464)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 464)
        tuple_40674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 464)
        # Adding element type (line 464)
        # Getting the type of 'xy2' (line 464)
        xy2_40675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 37), 'xy2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 464, 37), tuple_40674, xy2_40675)
        # Adding element type (line 464)
        
        # Obtaining the type of the subscript
        
        # Call to int(...): (line 464)
        # Processing the call arguments (line 464)
        
        # Obtaining the type of the subscript
        int_40677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 51), 'int')
        # Getting the type of 'I' (line 464)
        I_40678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 49), 'I', False)
        # Obtaining the member '__getitem__' of a type (line 464)
        getitem___40679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 49), I_40678, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 464)
        subscript_call_result_40680 = invoke(stypy.reporting.localization.Localization(__file__, 464, 49), getitem___40679, int_40677)
        
        # Processing the call keyword arguments (line 464)
        kwargs_40681 = {}
        # Getting the type of 'int' (line 464)
        int_40676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 45), 'int', False)
        # Calling int(args, kwargs) (line 464)
        int_call_result_40682 = invoke(stypy.reporting.localization.Localization(__file__, 464, 45), int_40676, *[subscript_call_result_40680], **kwargs_40681)
        
        
        # Call to int(...): (line 464)
        # Processing the call arguments (line 464)
        
        # Obtaining the type of the subscript
        int_40684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 61), 'int')
        # Getting the type of 'I' (line 464)
        I_40685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 59), 'I', False)
        # Obtaining the member '__getitem__' of a type (line 464)
        getitem___40686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 59), I_40685, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 464)
        subscript_call_result_40687 = invoke(stypy.reporting.localization.Localization(__file__, 464, 59), getitem___40686, int_40684)
        
        # Processing the call keyword arguments (line 464)
        kwargs_40688 = {}
        # Getting the type of 'int' (line 464)
        int_40683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 55), 'int', False)
        # Calling int(args, kwargs) (line 464)
        int_call_result_40689 = invoke(stypy.reporting.localization.Localization(__file__, 464, 55), int_40683, *[subscript_call_result_40687], **kwargs_40688)
        
        int_40690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 464, 67), 'int')
        # Applying the binary operator '+' (line 464)
        result_add_40691 = python_operator(stypy.reporting.localization.Localization(__file__, 464, 55), '+', int_call_result_40689, int_40690)
        
        slice_40692 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 464, 42), int_call_result_40682, result_add_40691, None)
        # Getting the type of 'lc' (line 464)
        lc_40693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 42), 'lc', False)
        # Obtaining the member '__getitem__' of a type (line 464)
        getitem___40694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 42), lc_40693, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 464)
        subscript_call_result_40695 = invoke(stypy.reporting.localization.Localization(__file__, 464, 42), getitem___40694, slice_40692)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 464, 37), tuple_40674, subscript_call_result_40695)
        # Adding element type (line 464)
        # Getting the type of 'xy1' (line 464)
        xy1_40696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 71), 'xy1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 464, 37), tuple_40674, xy1_40696)
        
        # Getting the type of 'np' (line 464)
        np_40697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 31), 'np', False)
        # Obtaining the member 'r_' of a type (line 464)
        r__40698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 31), np_40697, 'r_')
        # Obtaining the member '__getitem__' of a type (line 464)
        getitem___40699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 31), r__40698, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 464)
        subscript_call_result_40700 = invoke(stypy.reporting.localization.Localization(__file__, 464, 31), getitem___40699, tuple_40674)
        
        # Processing the call keyword arguments (line 464)
        kwargs_40701 = {}
        # Getting the type of 'nlc' (line 464)
        nlc_40672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 464, 20), 'nlc', False)
        # Obtaining the member 'append' of a type (line 464)
        append_40673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 464, 20), nlc_40672, 'append')
        # Calling append(args, kwargs) (line 464)
        append_call_result_40702 = invoke(stypy.reporting.localization.Localization(__file__, 464, 20), append_40673, *[subscript_call_result_40700], **kwargs_40701)
        
        # SSA join for if statement (line 463)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 461)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to isnan(...): (line 467)
        # Processing the call arguments (line 467)
        
        # Obtaining the type of the subscript
        int_40705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 467, 34), 'int')
        # Getting the type of 'I' (line 467)
        I_40706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 32), 'I', False)
        # Obtaining the member '__getitem__' of a type (line 467)
        getitem___40707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 32), I_40706, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 467)
        subscript_call_result_40708 = invoke(stypy.reporting.localization.Localization(__file__, 467, 32), getitem___40707, int_40705)
        
        # Processing the call keyword arguments (line 467)
        kwargs_40709 = {}
        # Getting the type of 'np' (line 467)
        np_40703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 467, 23), 'np', False)
        # Obtaining the member 'isnan' of a type (line 467)
        isnan_40704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 467, 23), np_40703, 'isnan')
        # Calling isnan(args, kwargs) (line 467)
        isnan_call_result_40710 = invoke(stypy.reporting.localization.Localization(__file__, 467, 23), isnan_40704, *[subscript_call_result_40708], **kwargs_40709)
        
        # Applying the 'not' unary operator (line 467)
        result_not__40711 = python_operator(stypy.reporting.localization.Localization(__file__, 467, 19), 'not', isnan_call_result_40710)
        
        # Testing the type of an if condition (line 467)
        if_condition_40712 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 467, 16), result_not__40711)
        # Assigning a type to the variable 'if_condition_40712' (line 467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 467, 16), 'if_condition_40712', if_condition_40712)
        # SSA begins for if statement (line 467)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 468)
        # Processing the call arguments (line 468)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 468)
        tuple_40715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 468)
        # Adding element type (line 468)
        
        # Obtaining the type of the subscript
        
        # Call to int(...): (line 468)
        # Processing the call arguments (line 468)
        
        # Obtaining the type of the subscript
        int_40717 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 47), 'int')
        # Getting the type of 'I' (line 468)
        I_40718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 45), 'I', False)
        # Obtaining the member '__getitem__' of a type (line 468)
        getitem___40719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 45), I_40718, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 468)
        subscript_call_result_40720 = invoke(stypy.reporting.localization.Localization(__file__, 468, 45), getitem___40719, int_40717)
        
        # Processing the call keyword arguments (line 468)
        kwargs_40721 = {}
        # Getting the type of 'int' (line 468)
        int_40716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 41), 'int', False)
        # Calling int(args, kwargs) (line 468)
        int_call_result_40722 = invoke(stypy.reporting.localization.Localization(__file__, 468, 41), int_40716, *[subscript_call_result_40720], **kwargs_40721)
        
        int_40723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 468, 53), 'int')
        # Applying the binary operator '+' (line 468)
        result_add_40724 = python_operator(stypy.reporting.localization.Localization(__file__, 468, 41), '+', int_call_result_40722, int_40723)
        
        slice_40725 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 468, 37), None, result_add_40724, None)
        # Getting the type of 'lc' (line 468)
        lc_40726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 37), 'lc', False)
        # Obtaining the member '__getitem__' of a type (line 468)
        getitem___40727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 37), lc_40726, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 468)
        subscript_call_result_40728 = invoke(stypy.reporting.localization.Localization(__file__, 468, 37), getitem___40727, slice_40725)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 468, 37), tuple_40715, subscript_call_result_40728)
        # Adding element type (line 468)
        # Getting the type of 'xy1' (line 468)
        xy1_40729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 57), 'xy1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 468, 37), tuple_40715, xy1_40729)
        
        # Getting the type of 'np' (line 468)
        np_40730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 31), 'np', False)
        # Obtaining the member 'r_' of a type (line 468)
        r__40731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 31), np_40730, 'r_')
        # Obtaining the member '__getitem__' of a type (line 468)
        getitem___40732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 31), r__40731, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 468)
        subscript_call_result_40733 = invoke(stypy.reporting.localization.Localization(__file__, 468, 31), getitem___40732, tuple_40715)
        
        # Processing the call keyword arguments (line 468)
        kwargs_40734 = {}
        # Getting the type of 'nlc' (line 468)
        nlc_40713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 468, 20), 'nlc', False)
        # Obtaining the member 'append' of a type (line 468)
        append_40714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 468, 20), nlc_40713, 'append')
        # Calling append(args, kwargs) (line 468)
        append_call_result_40735 = invoke(stypy.reporting.localization.Localization(__file__, 468, 20), append_40714, *[subscript_call_result_40733], **kwargs_40734)
        
        # SSA join for if statement (line 467)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to isnan(...): (line 469)
        # Processing the call arguments (line 469)
        
        # Obtaining the type of the subscript
        int_40738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 469, 34), 'int')
        # Getting the type of 'I' (line 469)
        I_40739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 32), 'I', False)
        # Obtaining the member '__getitem__' of a type (line 469)
        getitem___40740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 32), I_40739, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 469)
        subscript_call_result_40741 = invoke(stypy.reporting.localization.Localization(__file__, 469, 32), getitem___40740, int_40738)
        
        # Processing the call keyword arguments (line 469)
        kwargs_40742 = {}
        # Getting the type of 'np' (line 469)
        np_40736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 469, 23), 'np', False)
        # Obtaining the member 'isnan' of a type (line 469)
        isnan_40737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 469, 23), np_40736, 'isnan')
        # Calling isnan(args, kwargs) (line 469)
        isnan_call_result_40743 = invoke(stypy.reporting.localization.Localization(__file__, 469, 23), isnan_40737, *[subscript_call_result_40741], **kwargs_40742)
        
        # Applying the 'not' unary operator (line 469)
        result_not__40744 = python_operator(stypy.reporting.localization.Localization(__file__, 469, 19), 'not', isnan_call_result_40743)
        
        # Testing the type of an if condition (line 469)
        if_condition_40745 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 469, 16), result_not__40744)
        # Assigning a type to the variable 'if_condition_40745' (line 469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 469, 16), 'if_condition_40745', if_condition_40745)
        # SSA begins for if statement (line 469)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 470)
        # Processing the call arguments (line 470)
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 470)
        tuple_40748 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 470)
        # Adding element type (line 470)
        # Getting the type of 'xy2' (line 470)
        xy2_40749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 37), 'xy2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 470, 37), tuple_40748, xy2_40749)
        # Adding element type (line 470)
        
        # Obtaining the type of the subscript
        
        # Call to int(...): (line 470)
        # Processing the call arguments (line 470)
        
        # Obtaining the type of the subscript
        int_40751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 51), 'int')
        # Getting the type of 'I' (line 470)
        I_40752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 49), 'I', False)
        # Obtaining the member '__getitem__' of a type (line 470)
        getitem___40753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 49), I_40752, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 470)
        subscript_call_result_40754 = invoke(stypy.reporting.localization.Localization(__file__, 470, 49), getitem___40753, int_40751)
        
        # Processing the call keyword arguments (line 470)
        kwargs_40755 = {}
        # Getting the type of 'int' (line 470)
        int_40750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 45), 'int', False)
        # Calling int(args, kwargs) (line 470)
        int_call_result_40756 = invoke(stypy.reporting.localization.Localization(__file__, 470, 45), int_40750, *[subscript_call_result_40754], **kwargs_40755)
        
        slice_40757 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 470, 42), int_call_result_40756, None, None)
        # Getting the type of 'lc' (line 470)
        lc_40758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 42), 'lc', False)
        # Obtaining the member '__getitem__' of a type (line 470)
        getitem___40759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 42), lc_40758, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 470)
        subscript_call_result_40760 = invoke(stypy.reporting.localization.Localization(__file__, 470, 42), getitem___40759, slice_40757)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 470, 37), tuple_40748, subscript_call_result_40760)
        
        # Getting the type of 'np' (line 470)
        np_40761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 31), 'np', False)
        # Obtaining the member 'r_' of a type (line 470)
        r__40762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 31), np_40761, 'r_')
        # Obtaining the member '__getitem__' of a type (line 470)
        getitem___40763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 31), r__40762, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 470)
        subscript_call_result_40764 = invoke(stypy.reporting.localization.Localization(__file__, 470, 31), getitem___40763, tuple_40748)
        
        # Processing the call keyword arguments (line 470)
        kwargs_40765 = {}
        # Getting the type of 'nlc' (line 470)
        nlc_40746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 20), 'nlc', False)
        # Obtaining the member 'append' of a type (line 470)
        append_40747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 20), nlc_40746, 'append')
        # Calling append(args, kwargs) (line 470)
        append_call_result_40766 = invoke(stypy.reporting.localization.Localization(__file__, 470, 20), append_40747, *[subscript_call_result_40764], **kwargs_40765)
        
        # SSA join for if statement (line 469)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 461)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 436)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 477)
        tuple_40767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 477, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 477)
        # Adding element type (line 477)
        # Getting the type of 'rotation' (line 477)
        rotation_40768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 15), 'rotation')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 477, 15), tuple_40767, rotation_40768)
        # Adding element type (line 477)
        # Getting the type of 'nlc' (line 477)
        nlc_40769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 25), 'nlc')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 477, 15), tuple_40767, nlc_40769)
        
        # Assigning a type to the variable 'stypy_return_type' (line 477)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 477, 8), 'stypy_return_type', tuple_40767)
        
        # ################# End of 'calc_label_rot_and_inline(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'calc_label_rot_and_inline' in the type store
        # Getting the type of 'stypy_return_type' (line 369)
        stypy_return_type_40770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 369, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40770)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'calc_label_rot_and_inline'
        return stypy_return_type_40770


    @norecursion
    def _get_label_text(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_label_text'
        module_type_store = module_type_store.open_function_context('_get_label_text', 479, 4, False)
        # Assigning a type to the variable 'self' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler._get_label_text.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler._get_label_text.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler._get_label_text.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler._get_label_text.__dict__.__setitem__('stypy_function_name', 'ContourLabeler._get_label_text')
        ContourLabeler._get_label_text.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'rotation'])
        ContourLabeler._get_label_text.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler._get_label_text.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler._get_label_text.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler._get_label_text.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler._get_label_text.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler._get_label_text.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler._get_label_text', ['x', 'y', 'rotation'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_label_text', localization, ['x', 'y', 'rotation'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_label_text(...)' code ##################

        
        # Assigning a Call to a Tuple (line 480):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 480)
        # Processing the call arguments (line 480)
        
        # Obtaining an instance of the builtin type 'tuple' (line 480)
        tuple_40778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 63), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 480)
        # Adding element type (line 480)
        # Getting the type of 'x' (line 480)
        x_40779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 63), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 480, 63), tuple_40778, x_40779)
        # Adding element type (line 480)
        # Getting the type of 'y' (line 480)
        y_40780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 66), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 480, 63), tuple_40778, y_40780)
        
        # Processing the call keyword arguments (line 480)
        kwargs_40781 = {}
        
        # Call to inverted(...): (line 480)
        # Processing the call keyword arguments (line 480)
        kwargs_40775 = {}
        # Getting the type of 'self' (line 480)
        self_40771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 17), 'self', False)
        # Obtaining the member 'ax' of a type (line 480)
        ax_40772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 17), self_40771, 'ax')
        # Obtaining the member 'transData' of a type (line 480)
        transData_40773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 17), ax_40772, 'transData')
        # Obtaining the member 'inverted' of a type (line 480)
        inverted_40774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 17), transData_40773, 'inverted')
        # Calling inverted(args, kwargs) (line 480)
        inverted_call_result_40776 = invoke(stypy.reporting.localization.Localization(__file__, 480, 17), inverted_40774, *[], **kwargs_40775)
        
        # Obtaining the member 'transform_point' of a type (line 480)
        transform_point_40777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 17), inverted_call_result_40776, 'transform_point')
        # Calling transform_point(args, kwargs) (line 480)
        transform_point_call_result_40782 = invoke(stypy.reporting.localization.Localization(__file__, 480, 17), transform_point_40777, *[tuple_40778], **kwargs_40781)
        
        # Assigning a type to the variable 'call_assignment_39309' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'call_assignment_39309', transform_point_call_result_40782)
        
        # Assigning a Call to a Name (line 480):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_40785 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 8), 'int')
        # Processing the call keyword arguments
        kwargs_40786 = {}
        # Getting the type of 'call_assignment_39309' (line 480)
        call_assignment_39309_40783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'call_assignment_39309', False)
        # Obtaining the member '__getitem__' of a type (line 480)
        getitem___40784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 8), call_assignment_39309_40783, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_40787 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___40784, *[int_40785], **kwargs_40786)
        
        # Assigning a type to the variable 'call_assignment_39310' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'call_assignment_39310', getitem___call_result_40787)
        
        # Assigning a Name to a Name (line 480):
        # Getting the type of 'call_assignment_39310' (line 480)
        call_assignment_39310_40788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'call_assignment_39310')
        # Assigning a type to the variable 'dx' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'dx', call_assignment_39310_40788)
        
        # Assigning a Call to a Name (line 480):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_40791 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 480, 8), 'int')
        # Processing the call keyword arguments
        kwargs_40792 = {}
        # Getting the type of 'call_assignment_39309' (line 480)
        call_assignment_39309_40789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'call_assignment_39309', False)
        # Obtaining the member '__getitem__' of a type (line 480)
        getitem___40790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 8), call_assignment_39309_40789, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_40793 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___40790, *[int_40791], **kwargs_40792)
        
        # Assigning a type to the variable 'call_assignment_39311' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'call_assignment_39311', getitem___call_result_40793)
        
        # Assigning a Name to a Name (line 480):
        # Getting the type of 'call_assignment_39311' (line 480)
        call_assignment_39311_40794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 8), 'call_assignment_39311')
        # Assigning a type to the variable 'dy' (line 480)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 480, 12), 'dy', call_assignment_39311_40794)
        
        # Assigning a Call to a Name (line 481):
        
        # Assigning a Call to a Name (line 481):
        
        # Call to Text(...): (line 481)
        # Processing the call arguments (line 481)
        # Getting the type of 'dx' (line 481)
        dx_40797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 22), 'dx', False)
        # Getting the type of 'dy' (line 481)
        dy_40798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 26), 'dy', False)
        # Processing the call keyword arguments (line 481)
        # Getting the type of 'rotation' (line 481)
        rotation_40799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 39), 'rotation', False)
        keyword_40800 = rotation_40799
        unicode_40801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, 42), 'unicode', u'center')
        keyword_40802 = unicode_40801
        unicode_40803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 483, 40), 'unicode', u'center')
        keyword_40804 = unicode_40803
        kwargs_40805 = {'verticalalignment': keyword_40804, 'rotation': keyword_40800, 'horizontalalignment': keyword_40802}
        # Getting the type of 'text' (line 481)
        text_40795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 12), 'text', False)
        # Obtaining the member 'Text' of a type (line 481)
        Text_40796 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 12), text_40795, 'Text')
        # Calling Text(args, kwargs) (line 481)
        Text_call_result_40806 = invoke(stypy.reporting.localization.Localization(__file__, 481, 12), Text_40796, *[dx_40797, dy_40798], **kwargs_40805)
        
        # Assigning a type to the variable 't' (line 481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 481, 8), 't', Text_call_result_40806)
        # Getting the type of 't' (line 484)
        t_40807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 15), 't')
        # Assigning a type to the variable 'stypy_return_type' (line 484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 484, 8), 'stypy_return_type', t_40807)
        
        # ################# End of '_get_label_text(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_label_text' in the type store
        # Getting the type of 'stypy_return_type' (line 479)
        stypy_return_type_40808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 479, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40808)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_label_text'
        return stypy_return_type_40808


    @norecursion
    def _get_label_clabeltext(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_label_clabeltext'
        module_type_store = module_type_store.open_function_context('_get_label_clabeltext', 486, 4, False)
        # Assigning a type to the variable 'self' (line 487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler._get_label_clabeltext.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler._get_label_clabeltext.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler._get_label_clabeltext.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler._get_label_clabeltext.__dict__.__setitem__('stypy_function_name', 'ContourLabeler._get_label_clabeltext')
        ContourLabeler._get_label_clabeltext.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'rotation'])
        ContourLabeler._get_label_clabeltext.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler._get_label_clabeltext.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler._get_label_clabeltext.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler._get_label_clabeltext.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler._get_label_clabeltext.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler._get_label_clabeltext.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler._get_label_clabeltext', ['x', 'y', 'rotation'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_label_clabeltext', localization, ['x', 'y', 'rotation'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_label_clabeltext(...)' code ##################

        
        # Assigning a Call to a Name (line 491):
        
        # Assigning a Call to a Name (line 491):
        
        # Call to inverted(...): (line 491)
        # Processing the call keyword arguments (line 491)
        kwargs_40813 = {}
        # Getting the type of 'self' (line 491)
        self_40809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 23), 'self', False)
        # Obtaining the member 'ax' of a type (line 491)
        ax_40810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 23), self_40809, 'ax')
        # Obtaining the member 'transData' of a type (line 491)
        transData_40811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 23), ax_40810, 'transData')
        # Obtaining the member 'inverted' of a type (line 491)
        inverted_40812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 23), transData_40811, 'inverted')
        # Calling inverted(args, kwargs) (line 491)
        inverted_call_result_40814 = invoke(stypy.reporting.localization.Localization(__file__, 491, 23), inverted_40812, *[], **kwargs_40813)
        
        # Assigning a type to the variable 'transDataInv' (line 491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 8), 'transDataInv', inverted_call_result_40814)
        
        # Assigning a Call to a Tuple (line 492):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 492)
        # Processing the call arguments (line 492)
        
        # Obtaining an instance of the builtin type 'tuple' (line 492)
        tuple_40817 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 47), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 492)
        # Adding element type (line 492)
        # Getting the type of 'x' (line 492)
        x_40818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 47), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 492, 47), tuple_40817, x_40818)
        # Adding element type (line 492)
        # Getting the type of 'y' (line 492)
        y_40819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 50), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 492, 47), tuple_40817, y_40819)
        
        # Processing the call keyword arguments (line 492)
        kwargs_40820 = {}
        # Getting the type of 'transDataInv' (line 492)
        transDataInv_40815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 17), 'transDataInv', False)
        # Obtaining the member 'transform_point' of a type (line 492)
        transform_point_40816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 17), transDataInv_40815, 'transform_point')
        # Calling transform_point(args, kwargs) (line 492)
        transform_point_call_result_40821 = invoke(stypy.reporting.localization.Localization(__file__, 492, 17), transform_point_40816, *[tuple_40817], **kwargs_40820)
        
        # Assigning a type to the variable 'call_assignment_39312' (line 492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'call_assignment_39312', transform_point_call_result_40821)
        
        # Assigning a Call to a Name (line 492):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_40824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 8), 'int')
        # Processing the call keyword arguments
        kwargs_40825 = {}
        # Getting the type of 'call_assignment_39312' (line 492)
        call_assignment_39312_40822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'call_assignment_39312', False)
        # Obtaining the member '__getitem__' of a type (line 492)
        getitem___40823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 8), call_assignment_39312_40822, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_40826 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___40823, *[int_40824], **kwargs_40825)
        
        # Assigning a type to the variable 'call_assignment_39313' (line 492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'call_assignment_39313', getitem___call_result_40826)
        
        # Assigning a Name to a Name (line 492):
        # Getting the type of 'call_assignment_39313' (line 492)
        call_assignment_39313_40827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'call_assignment_39313')
        # Assigning a type to the variable 'dx' (line 492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'dx', call_assignment_39313_40827)
        
        # Assigning a Call to a Name (line 492):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_40830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 8), 'int')
        # Processing the call keyword arguments
        kwargs_40831 = {}
        # Getting the type of 'call_assignment_39312' (line 492)
        call_assignment_39312_40828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'call_assignment_39312', False)
        # Obtaining the member '__getitem__' of a type (line 492)
        getitem___40829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 8), call_assignment_39312_40828, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_40832 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___40829, *[int_40830], **kwargs_40831)
        
        # Assigning a type to the variable 'call_assignment_39314' (line 492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'call_assignment_39314', getitem___call_result_40832)
        
        # Assigning a Name to a Name (line 492):
        # Getting the type of 'call_assignment_39314' (line 492)
        call_assignment_39314_40833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 8), 'call_assignment_39314')
        # Assigning a type to the variable 'dy' (line 492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 492, 12), 'dy', call_assignment_39314_40833)
        
        # Assigning a Call to a Name (line 493):
        
        # Assigning a Call to a Name (line 493):
        
        # Call to transform_angles(...): (line 493)
        # Processing the call arguments (line 493)
        
        # Call to array(...): (line 493)
        # Processing the call arguments (line 493)
        
        # Obtaining an instance of the builtin type 'list' (line 493)
        list_40838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 493, 59), 'list')
        # Adding type elements to the builtin type 'list' instance (line 493)
        # Adding element type (line 493)
        # Getting the type of 'rotation' (line 493)
        rotation_40839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 60), 'rotation', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 493, 59), list_40838, rotation_40839)
        
        # Processing the call keyword arguments (line 493)
        kwargs_40840 = {}
        # Getting the type of 'np' (line 493)
        np_40836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 50), 'np', False)
        # Obtaining the member 'array' of a type (line 493)
        array_40837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 50), np_40836, 'array')
        # Calling array(args, kwargs) (line 493)
        array_call_result_40841 = invoke(stypy.reporting.localization.Localization(__file__, 493, 50), array_40837, *[list_40838], **kwargs_40840)
        
        
        # Call to array(...): (line 494)
        # Processing the call arguments (line 494)
        
        # Obtaining an instance of the builtin type 'list' (line 494)
        list_40844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 59), 'list')
        # Adding type elements to the builtin type 'list' instance (line 494)
        # Adding element type (line 494)
        
        # Obtaining an instance of the builtin type 'list' (line 494)
        list_40845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 60), 'list')
        # Adding type elements to the builtin type 'list' instance (line 494)
        # Adding element type (line 494)
        # Getting the type of 'x' (line 494)
        x_40846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 61), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 494, 60), list_40845, x_40846)
        # Adding element type (line 494)
        # Getting the type of 'y' (line 494)
        y_40847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 64), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 494, 60), list_40845, y_40847)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 494, 59), list_40844, list_40845)
        
        # Processing the call keyword arguments (line 494)
        kwargs_40848 = {}
        # Getting the type of 'np' (line 494)
        np_40842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 50), 'np', False)
        # Obtaining the member 'array' of a type (line 494)
        array_40843 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 50), np_40842, 'array')
        # Calling array(args, kwargs) (line 494)
        array_call_result_40849 = invoke(stypy.reporting.localization.Localization(__file__, 494, 50), array_40843, *[list_40844], **kwargs_40848)
        
        # Processing the call keyword arguments (line 493)
        kwargs_40850 = {}
        # Getting the type of 'transDataInv' (line 493)
        transDataInv_40834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 20), 'transDataInv', False)
        # Obtaining the member 'transform_angles' of a type (line 493)
        transform_angles_40835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 493, 20), transDataInv_40834, 'transform_angles')
        # Calling transform_angles(args, kwargs) (line 493)
        transform_angles_call_result_40851 = invoke(stypy.reporting.localization.Localization(__file__, 493, 20), transform_angles_40835, *[array_call_result_40841, array_call_result_40849], **kwargs_40850)
        
        # Assigning a type to the variable 'drotation' (line 493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 8), 'drotation', transform_angles_call_result_40851)
        
        # Assigning a Call to a Name (line 495):
        
        # Assigning a Call to a Name (line 495):
        
        # Call to ClabelText(...): (line 495)
        # Processing the call arguments (line 495)
        # Getting the type of 'dx' (line 495)
        dx_40853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 23), 'dx', False)
        # Getting the type of 'dy' (line 495)
        dy_40854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 27), 'dy', False)
        # Processing the call keyword arguments (line 495)
        
        # Obtaining the type of the subscript
        int_40855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 50), 'int')
        # Getting the type of 'drotation' (line 495)
        drotation_40856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 40), 'drotation', False)
        # Obtaining the member '__getitem__' of a type (line 495)
        getitem___40857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 40), drotation_40856, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 495)
        subscript_call_result_40858 = invoke(stypy.reporting.localization.Localization(__file__, 495, 40), getitem___40857, int_40855)
        
        keyword_40859 = subscript_call_result_40858
        unicode_40860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 496, 43), 'unicode', u'center')
        keyword_40861 = unicode_40860
        unicode_40862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 41), 'unicode', u'center')
        keyword_40863 = unicode_40862
        kwargs_40864 = {'verticalalignment': keyword_40863, 'rotation': keyword_40859, 'horizontalalignment': keyword_40861}
        # Getting the type of 'ClabelText' (line 495)
        ClabelText_40852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 12), 'ClabelText', False)
        # Calling ClabelText(args, kwargs) (line 495)
        ClabelText_call_result_40865 = invoke(stypy.reporting.localization.Localization(__file__, 495, 12), ClabelText_40852, *[dx_40853, dy_40854], **kwargs_40864)
        
        # Assigning a type to the variable 't' (line 495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 8), 't', ClabelText_call_result_40865)
        # Getting the type of 't' (line 499)
        t_40866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 15), 't')
        # Assigning a type to the variable 'stypy_return_type' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 8), 'stypy_return_type', t_40866)
        
        # ################# End of '_get_label_clabeltext(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_label_clabeltext' in the type store
        # Getting the type of 'stypy_return_type' (line 486)
        stypy_return_type_40867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40867)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_label_clabeltext'
        return stypy_return_type_40867


    @norecursion
    def _add_label(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_add_label'
        module_type_store = module_type_store.open_function_context('_add_label', 501, 4, False)
        # Assigning a type to the variable 'self' (line 502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler._add_label.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler._add_label.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler._add_label.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler._add_label.__dict__.__setitem__('stypy_function_name', 'ContourLabeler._add_label')
        ContourLabeler._add_label.__dict__.__setitem__('stypy_param_names_list', ['t', 'x', 'y', 'lev', 'cvalue'])
        ContourLabeler._add_label.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler._add_label.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler._add_label.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler._add_label.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler._add_label.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler._add_label.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler._add_label', ['t', 'x', 'y', 'lev', 'cvalue'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_add_label', localization, ['t', 'x', 'y', 'lev', 'cvalue'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_add_label(...)' code ##################

        
        # Assigning a Call to a Name (line 502):
        
        # Assigning a Call to a Name (line 502):
        
        # Call to to_rgba(...): (line 502)
        # Processing the call arguments (line 502)
        # Getting the type of 'cvalue' (line 502)
        cvalue_40871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 43), 'cvalue', False)
        # Processing the call keyword arguments (line 502)
        # Getting the type of 'self' (line 502)
        self_40872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 57), 'self', False)
        # Obtaining the member 'alpha' of a type (line 502)
        alpha_40873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 57), self_40872, 'alpha')
        keyword_40874 = alpha_40873
        kwargs_40875 = {'alpha': keyword_40874}
        # Getting the type of 'self' (line 502)
        self_40868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 16), 'self', False)
        # Obtaining the member 'labelMappable' of a type (line 502)
        labelMappable_40869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 16), self_40868, 'labelMappable')
        # Obtaining the member 'to_rgba' of a type (line 502)
        to_rgba_40870 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 502, 16), labelMappable_40869, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 502)
        to_rgba_call_result_40876 = invoke(stypy.reporting.localization.Localization(__file__, 502, 16), to_rgba_40870, *[cvalue_40871], **kwargs_40875)
        
        # Assigning a type to the variable 'color' (line 502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 8), 'color', to_rgba_call_result_40876)
        
        # Assigning a Call to a Name (line 504):
        
        # Assigning a Call to a Name (line 504):
        
        # Call to get_text(...): (line 504)
        # Processing the call arguments (line 504)
        # Getting the type of 'lev' (line 504)
        lev_40879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 30), 'lev', False)
        # Getting the type of 'self' (line 504)
        self_40880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 35), 'self', False)
        # Obtaining the member 'labelFmt' of a type (line 504)
        labelFmt_40881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 35), self_40880, 'labelFmt')
        # Processing the call keyword arguments (line 504)
        kwargs_40882 = {}
        # Getting the type of 'self' (line 504)
        self_40877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 16), 'self', False)
        # Obtaining the member 'get_text' of a type (line 504)
        get_text_40878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 504, 16), self_40877, 'get_text')
        # Calling get_text(args, kwargs) (line 504)
        get_text_call_result_40883 = invoke(stypy.reporting.localization.Localization(__file__, 504, 16), get_text_40878, *[lev_40879, labelFmt_40881], **kwargs_40882)
        
        # Assigning a type to the variable '_text' (line 504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 504, 8), '_text', get_text_call_result_40883)
        
        # Call to set_label_props(...): (line 505)
        # Processing the call arguments (line 505)
        # Getting the type of 't' (line 505)
        t_40886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 29), 't', False)
        # Getting the type of '_text' (line 505)
        _text_40887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 32), '_text', False)
        # Getting the type of 'color' (line 505)
        color_40888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 39), 'color', False)
        # Processing the call keyword arguments (line 505)
        kwargs_40889 = {}
        # Getting the type of 'self' (line 505)
        self_40884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 505, 8), 'self', False)
        # Obtaining the member 'set_label_props' of a type (line 505)
        set_label_props_40885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 505, 8), self_40884, 'set_label_props')
        # Calling set_label_props(args, kwargs) (line 505)
        set_label_props_call_result_40890 = invoke(stypy.reporting.localization.Localization(__file__, 505, 8), set_label_props_40885, *[t_40886, _text_40887, color_40888], **kwargs_40889)
        
        
        # Call to append(...): (line 506)
        # Processing the call arguments (line 506)
        # Getting the type of 't' (line 506)
        t_40894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 31), 't', False)
        # Processing the call keyword arguments (line 506)
        kwargs_40895 = {}
        # Getting the type of 'self' (line 506)
        self_40891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 8), 'self', False)
        # Obtaining the member 'labelTexts' of a type (line 506)
        labelTexts_40892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 8), self_40891, 'labelTexts')
        # Obtaining the member 'append' of a type (line 506)
        append_40893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 8), labelTexts_40892, 'append')
        # Calling append(args, kwargs) (line 506)
        append_call_result_40896 = invoke(stypy.reporting.localization.Localization(__file__, 506, 8), append_40893, *[t_40894], **kwargs_40895)
        
        
        # Call to append(...): (line 507)
        # Processing the call arguments (line 507)
        # Getting the type of 'cvalue' (line 507)
        cvalue_40900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 33), 'cvalue', False)
        # Processing the call keyword arguments (line 507)
        kwargs_40901 = {}
        # Getting the type of 'self' (line 507)
        self_40897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 8), 'self', False)
        # Obtaining the member 'labelCValues' of a type (line 507)
        labelCValues_40898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 507, 8), self_40897, 'labelCValues')
        # Obtaining the member 'append' of a type (line 507)
        append_40899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 507, 8), labelCValues_40898, 'append')
        # Calling append(args, kwargs) (line 507)
        append_call_result_40902 = invoke(stypy.reporting.localization.Localization(__file__, 507, 8), append_40899, *[cvalue_40900], **kwargs_40901)
        
        
        # Call to append(...): (line 508)
        # Processing the call arguments (line 508)
        
        # Obtaining an instance of the builtin type 'tuple' (line 508)
        tuple_40906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 508)
        # Adding element type (line 508)
        # Getting the type of 'x' (line 508)
        x_40907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 30), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 508, 30), tuple_40906, x_40907)
        # Adding element type (line 508)
        # Getting the type of 'y' (line 508)
        y_40908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 33), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 508, 30), tuple_40906, y_40908)
        
        # Processing the call keyword arguments (line 508)
        kwargs_40909 = {}
        # Getting the type of 'self' (line 508)
        self_40903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'self', False)
        # Obtaining the member 'labelXYs' of a type (line 508)
        labelXYs_40904 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 8), self_40903, 'labelXYs')
        # Obtaining the member 'append' of a type (line 508)
        append_40905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 8), labelXYs_40904, 'append')
        # Calling append(args, kwargs) (line 508)
        append_call_result_40910 = invoke(stypy.reporting.localization.Localization(__file__, 508, 8), append_40905, *[tuple_40906], **kwargs_40909)
        
        
        # Call to add_artist(...): (line 511)
        # Processing the call arguments (line 511)
        # Getting the type of 't' (line 511)
        t_40914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 27), 't', False)
        # Processing the call keyword arguments (line 511)
        kwargs_40915 = {}
        # Getting the type of 'self' (line 511)
        self_40911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 511)
        ax_40912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 8), self_40911, 'ax')
        # Obtaining the member 'add_artist' of a type (line 511)
        add_artist_40913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 8), ax_40912, 'add_artist')
        # Calling add_artist(args, kwargs) (line 511)
        add_artist_call_result_40916 = invoke(stypy.reporting.localization.Localization(__file__, 511, 8), add_artist_40913, *[t_40914], **kwargs_40915)
        
        
        # ################# End of '_add_label(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_add_label' in the type store
        # Getting the type of 'stypy_return_type' (line 501)
        stypy_return_type_40917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40917)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_add_label'
        return stypy_return_type_40917


    @norecursion
    def add_label(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_label'
        module_type_store = module_type_store.open_function_context('add_label', 513, 4, False)
        # Assigning a type to the variable 'self' (line 514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 514, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.add_label.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.add_label.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.add_label.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.add_label.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.add_label')
        ContourLabeler.add_label.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'rotation', 'lev', 'cvalue'])
        ContourLabeler.add_label.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.add_label.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.add_label.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.add_label.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.add_label.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.add_label.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.add_label', ['x', 'y', 'rotation', 'lev', 'cvalue'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_label', localization, ['x', 'y', 'rotation', 'lev', 'cvalue'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_label(...)' code ##################

        unicode_40918 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 516, (-1)), 'unicode', u'\n        Add contour label using :class:`~matplotlib.text.Text` class.\n        ')
        
        # Assigning a Call to a Name (line 518):
        
        # Assigning a Call to a Name (line 518):
        
        # Call to _get_label_text(...): (line 518)
        # Processing the call arguments (line 518)
        # Getting the type of 'x' (line 518)
        x_40921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 33), 'x', False)
        # Getting the type of 'y' (line 518)
        y_40922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 36), 'y', False)
        # Getting the type of 'rotation' (line 518)
        rotation_40923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 39), 'rotation', False)
        # Processing the call keyword arguments (line 518)
        kwargs_40924 = {}
        # Getting the type of 'self' (line 518)
        self_40919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 518, 12), 'self', False)
        # Obtaining the member '_get_label_text' of a type (line 518)
        _get_label_text_40920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 518, 12), self_40919, '_get_label_text')
        # Calling _get_label_text(args, kwargs) (line 518)
        _get_label_text_call_result_40925 = invoke(stypy.reporting.localization.Localization(__file__, 518, 12), _get_label_text_40920, *[x_40921, y_40922, rotation_40923], **kwargs_40924)
        
        # Assigning a type to the variable 't' (line 518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 8), 't', _get_label_text_call_result_40925)
        
        # Call to _add_label(...): (line 519)
        # Processing the call arguments (line 519)
        # Getting the type of 't' (line 519)
        t_40928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 24), 't', False)
        # Getting the type of 'x' (line 519)
        x_40929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 27), 'x', False)
        # Getting the type of 'y' (line 519)
        y_40930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 30), 'y', False)
        # Getting the type of 'lev' (line 519)
        lev_40931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 33), 'lev', False)
        # Getting the type of 'cvalue' (line 519)
        cvalue_40932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 38), 'cvalue', False)
        # Processing the call keyword arguments (line 519)
        kwargs_40933 = {}
        # Getting the type of 'self' (line 519)
        self_40926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 519, 8), 'self', False)
        # Obtaining the member '_add_label' of a type (line 519)
        _add_label_40927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 519, 8), self_40926, '_add_label')
        # Calling _add_label(args, kwargs) (line 519)
        _add_label_call_result_40934 = invoke(stypy.reporting.localization.Localization(__file__, 519, 8), _add_label_40927, *[t_40928, x_40929, y_40930, lev_40931, cvalue_40932], **kwargs_40933)
        
        
        # ################# End of 'add_label(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_label' in the type store
        # Getting the type of 'stypy_return_type' (line 513)
        stypy_return_type_40935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40935)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_label'
        return stypy_return_type_40935


    @norecursion
    def add_label_clabeltext(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'add_label_clabeltext'
        module_type_store = module_type_store.open_function_context('add_label_clabeltext', 521, 4, False)
        # Assigning a type to the variable 'self' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.add_label_clabeltext.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.add_label_clabeltext.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.add_label_clabeltext.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.add_label_clabeltext.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.add_label_clabeltext')
        ContourLabeler.add_label_clabeltext.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'rotation', 'lev', 'cvalue'])
        ContourLabeler.add_label_clabeltext.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.add_label_clabeltext.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.add_label_clabeltext.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.add_label_clabeltext.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.add_label_clabeltext.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.add_label_clabeltext.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.add_label_clabeltext', ['x', 'y', 'rotation', 'lev', 'cvalue'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_label_clabeltext', localization, ['x', 'y', 'rotation', 'lev', 'cvalue'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_label_clabeltext(...)' code ##################

        unicode_40936 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 524, (-1)), 'unicode', u'\n        Add contour label using :class:`ClabelText` class.\n        ')
        
        # Assigning a Call to a Name (line 530):
        
        # Assigning a Call to a Name (line 530):
        
        # Call to _get_label_clabeltext(...): (line 530)
        # Processing the call arguments (line 530)
        # Getting the type of 'x' (line 530)
        x_40939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 39), 'x', False)
        # Getting the type of 'y' (line 530)
        y_40940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 42), 'y', False)
        # Getting the type of 'rotation' (line 530)
        rotation_40941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 45), 'rotation', False)
        # Processing the call keyword arguments (line 530)
        kwargs_40942 = {}
        # Getting the type of 'self' (line 530)
        self_40937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 12), 'self', False)
        # Obtaining the member '_get_label_clabeltext' of a type (line 530)
        _get_label_clabeltext_40938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 530, 12), self_40937, '_get_label_clabeltext')
        # Calling _get_label_clabeltext(args, kwargs) (line 530)
        _get_label_clabeltext_call_result_40943 = invoke(stypy.reporting.localization.Localization(__file__, 530, 12), _get_label_clabeltext_40938, *[x_40939, y_40940, rotation_40941], **kwargs_40942)
        
        # Assigning a type to the variable 't' (line 530)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 530, 8), 't', _get_label_clabeltext_call_result_40943)
        
        # Call to _add_label(...): (line 531)
        # Processing the call arguments (line 531)
        # Getting the type of 't' (line 531)
        t_40946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 24), 't', False)
        # Getting the type of 'x' (line 531)
        x_40947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 27), 'x', False)
        # Getting the type of 'y' (line 531)
        y_40948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 30), 'y', False)
        # Getting the type of 'lev' (line 531)
        lev_40949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 33), 'lev', False)
        # Getting the type of 'cvalue' (line 531)
        cvalue_40950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 38), 'cvalue', False)
        # Processing the call keyword arguments (line 531)
        kwargs_40951 = {}
        # Getting the type of 'self' (line 531)
        self_40944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 8), 'self', False)
        # Obtaining the member '_add_label' of a type (line 531)
        _add_label_40945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 531, 8), self_40944, '_add_label')
        # Calling _add_label(args, kwargs) (line 531)
        _add_label_call_result_40952 = invoke(stypy.reporting.localization.Localization(__file__, 531, 8), _add_label_40945, *[t_40946, x_40947, y_40948, lev_40949, cvalue_40950], **kwargs_40951)
        
        
        # ################# End of 'add_label_clabeltext(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_label_clabeltext' in the type store
        # Getting the type of 'stypy_return_type' (line 521)
        stypy_return_type_40953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 521, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_40953)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_label_clabeltext'
        return stypy_return_type_40953


    @norecursion
    def add_label_near(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'True' (line 533)
        True_40954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 42), 'True')
        int_40955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 533, 63), 'int')
        # Getting the type of 'None' (line 534)
        None_40956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 33), 'None')
        defaults = [True_40954, int_40955, None_40956]
        # Create a new context for function 'add_label_near'
        module_type_store = module_type_store.open_function_context('add_label_near', 533, 4, False)
        # Assigning a type to the variable 'self' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.add_label_near.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.add_label_near.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.add_label_near.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.add_label_near.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.add_label_near')
        ContourLabeler.add_label_near.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'inline', 'inline_spacing', 'transform'])
        ContourLabeler.add_label_near.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.add_label_near.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.add_label_near.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.add_label_near.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.add_label_near.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.add_label_near.__dict__.__setitem__('stypy_declared_arg_number', 6)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.add_label_near', ['x', 'y', 'inline', 'inline_spacing', 'transform'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'add_label_near', localization, ['x', 'y', 'inline', 'inline_spacing', 'transform'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'add_label_near(...)' code ##################

        unicode_40957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 551, (-1)), 'unicode', u'\n        Add a label near the point (x, y). If transform is None\n        (default), (x, y) is in data coordinates; if transform is\n        False, (x, y) is in display coordinates; otherwise, the\n        specified transform will be used to translate (x, y) into\n        display coordinates.\n\n        *inline*:\n          controls whether the underlying contour is removed or\n          not. Default is *True*.\n\n        *inline_spacing*:\n          space in pixels to leave on each side of label when\n          placing inline.  Defaults to 5.  This spacing will be\n          exact for labels at locations where the contour is\n          straight, less so for labels on curved contours.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 553)
        # Getting the type of 'transform' (line 553)
        transform_40958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 11), 'transform')
        # Getting the type of 'None' (line 553)
        None_40959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 553, 24), 'None')
        
        (may_be_40960, more_types_in_union_40961) = may_be_none(transform_40958, None_40959)

        if may_be_40960:

            if more_types_in_union_40961:
                # Runtime conditional SSA (line 553)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 554):
            
            # Assigning a Attribute to a Name (line 554):
            # Getting the type of 'self' (line 554)
            self_40962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 24), 'self')
            # Obtaining the member 'ax' of a type (line 554)
            ax_40963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 24), self_40962, 'ax')
            # Obtaining the member 'transData' of a type (line 554)
            transData_40964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 554, 24), ax_40963, 'transData')
            # Assigning a type to the variable 'transform' (line 554)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 554, 12), 'transform', transData_40964)

            if more_types_in_union_40961:
                # SSA join for if statement (line 553)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'transform' (line 556)
        transform_40965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 11), 'transform')
        # Testing the type of an if condition (line 556)
        if_condition_40966 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 556, 8), transform_40965)
        # Assigning a type to the variable 'if_condition_40966' (line 556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 556, 8), 'if_condition_40966', if_condition_40966)
        # SSA begins for if statement (line 556)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 557):
        
        # Assigning a Call to a Name:
        
        # Call to transform_point(...): (line 557)
        # Processing the call arguments (line 557)
        
        # Obtaining an instance of the builtin type 'tuple' (line 557)
        tuple_40969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 557)
        # Adding element type (line 557)
        # Getting the type of 'x' (line 557)
        x_40970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 46), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 557, 46), tuple_40969, x_40970)
        # Adding element type (line 557)
        # Getting the type of 'y' (line 557)
        y_40971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 49), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 557, 46), tuple_40969, y_40971)
        
        # Processing the call keyword arguments (line 557)
        kwargs_40972 = {}
        # Getting the type of 'transform' (line 557)
        transform_40967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 19), 'transform', False)
        # Obtaining the member 'transform_point' of a type (line 557)
        transform_point_40968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 19), transform_40967, 'transform_point')
        # Calling transform_point(args, kwargs) (line 557)
        transform_point_call_result_40973 = invoke(stypy.reporting.localization.Localization(__file__, 557, 19), transform_point_40968, *[tuple_40969], **kwargs_40972)
        
        # Assigning a type to the variable 'call_assignment_39315' (line 557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'call_assignment_39315', transform_point_call_result_40973)
        
        # Assigning a Call to a Name (line 557):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_40976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 12), 'int')
        # Processing the call keyword arguments
        kwargs_40977 = {}
        # Getting the type of 'call_assignment_39315' (line 557)
        call_assignment_39315_40974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'call_assignment_39315', False)
        # Obtaining the member '__getitem__' of a type (line 557)
        getitem___40975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 12), call_assignment_39315_40974, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_40978 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___40975, *[int_40976], **kwargs_40977)
        
        # Assigning a type to the variable 'call_assignment_39316' (line 557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'call_assignment_39316', getitem___call_result_40978)
        
        # Assigning a Name to a Name (line 557):
        # Getting the type of 'call_assignment_39316' (line 557)
        call_assignment_39316_40979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'call_assignment_39316')
        # Assigning a type to the variable 'x' (line 557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'x', call_assignment_39316_40979)
        
        # Assigning a Call to a Name (line 557):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_40982 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, 12), 'int')
        # Processing the call keyword arguments
        kwargs_40983 = {}
        # Getting the type of 'call_assignment_39315' (line 557)
        call_assignment_39315_40980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'call_assignment_39315', False)
        # Obtaining the member '__getitem__' of a type (line 557)
        getitem___40981 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 557, 12), call_assignment_39315_40980, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_40984 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___40981, *[int_40982], **kwargs_40983)
        
        # Assigning a type to the variable 'call_assignment_39317' (line 557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'call_assignment_39317', getitem___call_result_40984)
        
        # Assigning a Name to a Name (line 557):
        # Getting the type of 'call_assignment_39317' (line 557)
        call_assignment_39317_40985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 557, 12), 'call_assignment_39317')
        # Assigning a type to the variable 'y' (line 557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 557, 15), 'y', call_assignment_39317_40985)
        # SSA join for if statement (line 556)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Tuple (line 560):
        
        # Assigning a Subscript to a Name (line 560):
        
        # Obtaining the type of the subscript
        int_40986 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 8), 'int')
        
        # Obtaining the type of the subscript
        int_40987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 41), 'int')
        slice_40988 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 560, 43), None, int_40987, None)
        
        # Call to find_nearest_contour(...): (line 560)
        # Processing the call arguments (line 560)
        # Getting the type of 'x' (line 561)
        x_40991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 12), 'x', False)
        # Getting the type of 'y' (line 561)
        y_40992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 15), 'y', False)
        # Getting the type of 'self' (line 561)
        self_40993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 18), 'self', False)
        # Obtaining the member 'labelIndiceList' of a type (line 561)
        labelIndiceList_40994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 18), self_40993, 'labelIndiceList')
        # Processing the call keyword arguments (line 560)
        kwargs_40995 = {}
        # Getting the type of 'self' (line 560)
        self_40989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 43), 'self', False)
        # Obtaining the member 'find_nearest_contour' of a type (line 560)
        find_nearest_contour_40990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 43), self_40989, 'find_nearest_contour')
        # Calling find_nearest_contour(args, kwargs) (line 560)
        find_nearest_contour_call_result_40996 = invoke(stypy.reporting.localization.Localization(__file__, 560, 43), find_nearest_contour_40990, *[x_40991, y_40992, labelIndiceList_40994], **kwargs_40995)
        
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___40997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 43), find_nearest_contour_call_result_40996, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_40998 = invoke(stypy.reporting.localization.Localization(__file__, 560, 43), getitem___40997, slice_40988)
        
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___40999 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 8), subscript_call_result_40998, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_41000 = invoke(stypy.reporting.localization.Localization(__file__, 560, 8), getitem___40999, int_40986)
        
        # Assigning a type to the variable 'tuple_var_assignment_39318' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'tuple_var_assignment_39318', subscript_call_result_41000)
        
        # Assigning a Subscript to a Name (line 560):
        
        # Obtaining the type of the subscript
        int_41001 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 8), 'int')
        
        # Obtaining the type of the subscript
        int_41002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 41), 'int')
        slice_41003 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 560, 43), None, int_41002, None)
        
        # Call to find_nearest_contour(...): (line 560)
        # Processing the call arguments (line 560)
        # Getting the type of 'x' (line 561)
        x_41006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 12), 'x', False)
        # Getting the type of 'y' (line 561)
        y_41007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 15), 'y', False)
        # Getting the type of 'self' (line 561)
        self_41008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 18), 'self', False)
        # Obtaining the member 'labelIndiceList' of a type (line 561)
        labelIndiceList_41009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 18), self_41008, 'labelIndiceList')
        # Processing the call keyword arguments (line 560)
        kwargs_41010 = {}
        # Getting the type of 'self' (line 560)
        self_41004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 43), 'self', False)
        # Obtaining the member 'find_nearest_contour' of a type (line 560)
        find_nearest_contour_41005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 43), self_41004, 'find_nearest_contour')
        # Calling find_nearest_contour(args, kwargs) (line 560)
        find_nearest_contour_call_result_41011 = invoke(stypy.reporting.localization.Localization(__file__, 560, 43), find_nearest_contour_41005, *[x_41006, y_41007, labelIndiceList_41009], **kwargs_41010)
        
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___41012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 43), find_nearest_contour_call_result_41011, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_41013 = invoke(stypy.reporting.localization.Localization(__file__, 560, 43), getitem___41012, slice_41003)
        
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___41014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 8), subscript_call_result_41013, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_41015 = invoke(stypy.reporting.localization.Localization(__file__, 560, 8), getitem___41014, int_41001)
        
        # Assigning a type to the variable 'tuple_var_assignment_39319' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'tuple_var_assignment_39319', subscript_call_result_41015)
        
        # Assigning a Subscript to a Name (line 560):
        
        # Obtaining the type of the subscript
        int_41016 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 8), 'int')
        
        # Obtaining the type of the subscript
        int_41017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 41), 'int')
        slice_41018 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 560, 43), None, int_41017, None)
        
        # Call to find_nearest_contour(...): (line 560)
        # Processing the call arguments (line 560)
        # Getting the type of 'x' (line 561)
        x_41021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 12), 'x', False)
        # Getting the type of 'y' (line 561)
        y_41022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 15), 'y', False)
        # Getting the type of 'self' (line 561)
        self_41023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 18), 'self', False)
        # Obtaining the member 'labelIndiceList' of a type (line 561)
        labelIndiceList_41024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 18), self_41023, 'labelIndiceList')
        # Processing the call keyword arguments (line 560)
        kwargs_41025 = {}
        # Getting the type of 'self' (line 560)
        self_41019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 43), 'self', False)
        # Obtaining the member 'find_nearest_contour' of a type (line 560)
        find_nearest_contour_41020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 43), self_41019, 'find_nearest_contour')
        # Calling find_nearest_contour(args, kwargs) (line 560)
        find_nearest_contour_call_result_41026 = invoke(stypy.reporting.localization.Localization(__file__, 560, 43), find_nearest_contour_41020, *[x_41021, y_41022, labelIndiceList_41024], **kwargs_41025)
        
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___41027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 43), find_nearest_contour_call_result_41026, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_41028 = invoke(stypy.reporting.localization.Localization(__file__, 560, 43), getitem___41027, slice_41018)
        
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___41029 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 8), subscript_call_result_41028, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_41030 = invoke(stypy.reporting.localization.Localization(__file__, 560, 8), getitem___41029, int_41016)
        
        # Assigning a type to the variable 'tuple_var_assignment_39320' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'tuple_var_assignment_39320', subscript_call_result_41030)
        
        # Assigning a Subscript to a Name (line 560):
        
        # Obtaining the type of the subscript
        int_41031 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 8), 'int')
        
        # Obtaining the type of the subscript
        int_41032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 41), 'int')
        slice_41033 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 560, 43), None, int_41032, None)
        
        # Call to find_nearest_contour(...): (line 560)
        # Processing the call arguments (line 560)
        # Getting the type of 'x' (line 561)
        x_41036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 12), 'x', False)
        # Getting the type of 'y' (line 561)
        y_41037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 15), 'y', False)
        # Getting the type of 'self' (line 561)
        self_41038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 18), 'self', False)
        # Obtaining the member 'labelIndiceList' of a type (line 561)
        labelIndiceList_41039 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 18), self_41038, 'labelIndiceList')
        # Processing the call keyword arguments (line 560)
        kwargs_41040 = {}
        # Getting the type of 'self' (line 560)
        self_41034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 43), 'self', False)
        # Obtaining the member 'find_nearest_contour' of a type (line 560)
        find_nearest_contour_41035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 43), self_41034, 'find_nearest_contour')
        # Calling find_nearest_contour(args, kwargs) (line 560)
        find_nearest_contour_call_result_41041 = invoke(stypy.reporting.localization.Localization(__file__, 560, 43), find_nearest_contour_41035, *[x_41036, y_41037, labelIndiceList_41039], **kwargs_41040)
        
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___41042 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 43), find_nearest_contour_call_result_41041, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_41043 = invoke(stypy.reporting.localization.Localization(__file__, 560, 43), getitem___41042, slice_41033)
        
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___41044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 8), subscript_call_result_41043, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_41045 = invoke(stypy.reporting.localization.Localization(__file__, 560, 8), getitem___41044, int_41031)
        
        # Assigning a type to the variable 'tuple_var_assignment_39321' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'tuple_var_assignment_39321', subscript_call_result_41045)
        
        # Assigning a Subscript to a Name (line 560):
        
        # Obtaining the type of the subscript
        int_41046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 560, 8), 'int')
        
        # Obtaining the type of the subscript
        int_41047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 561, 41), 'int')
        slice_41048 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 560, 43), None, int_41047, None)
        
        # Call to find_nearest_contour(...): (line 560)
        # Processing the call arguments (line 560)
        # Getting the type of 'x' (line 561)
        x_41051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 12), 'x', False)
        # Getting the type of 'y' (line 561)
        y_41052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 15), 'y', False)
        # Getting the type of 'self' (line 561)
        self_41053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 18), 'self', False)
        # Obtaining the member 'labelIndiceList' of a type (line 561)
        labelIndiceList_41054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 561, 18), self_41053, 'labelIndiceList')
        # Processing the call keyword arguments (line 560)
        kwargs_41055 = {}
        # Getting the type of 'self' (line 560)
        self_41049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 43), 'self', False)
        # Obtaining the member 'find_nearest_contour' of a type (line 560)
        find_nearest_contour_41050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 43), self_41049, 'find_nearest_contour')
        # Calling find_nearest_contour(args, kwargs) (line 560)
        find_nearest_contour_call_result_41056 = invoke(stypy.reporting.localization.Localization(__file__, 560, 43), find_nearest_contour_41050, *[x_41051, y_41052, labelIndiceList_41054], **kwargs_41055)
        
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___41057 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 43), find_nearest_contour_call_result_41056, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_41058 = invoke(stypy.reporting.localization.Localization(__file__, 560, 43), getitem___41057, slice_41048)
        
        # Obtaining the member '__getitem__' of a type (line 560)
        getitem___41059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 560, 8), subscript_call_result_41058, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 560)
        subscript_call_result_41060 = invoke(stypy.reporting.localization.Localization(__file__, 560, 8), getitem___41059, int_41046)
        
        # Assigning a type to the variable 'tuple_var_assignment_39322' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'tuple_var_assignment_39322', subscript_call_result_41060)
        
        # Assigning a Name to a Name (line 560):
        # Getting the type of 'tuple_var_assignment_39318' (line 560)
        tuple_var_assignment_39318_41061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'tuple_var_assignment_39318')
        # Assigning a type to the variable 'conmin' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'conmin', tuple_var_assignment_39318_41061)
        
        # Assigning a Name to a Name (line 560):
        # Getting the type of 'tuple_var_assignment_39319' (line 560)
        tuple_var_assignment_39319_41062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'tuple_var_assignment_39319')
        # Assigning a type to the variable 'segmin' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 16), 'segmin', tuple_var_assignment_39319_41062)
        
        # Assigning a Name to a Name (line 560):
        # Getting the type of 'tuple_var_assignment_39320' (line 560)
        tuple_var_assignment_39320_41063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'tuple_var_assignment_39320')
        # Assigning a type to the variable 'imin' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 24), 'imin', tuple_var_assignment_39320_41063)
        
        # Assigning a Name to a Name (line 560):
        # Getting the type of 'tuple_var_assignment_39321' (line 560)
        tuple_var_assignment_39321_41064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'tuple_var_assignment_39321')
        # Assigning a type to the variable 'xmin' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 30), 'xmin', tuple_var_assignment_39321_41064)
        
        # Assigning a Name to a Name (line 560):
        # Getting the type of 'tuple_var_assignment_39322' (line 560)
        tuple_var_assignment_39322_41065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 560, 8), 'tuple_var_assignment_39322')
        # Assigning a type to the variable 'ymin' (line 560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 560, 36), 'ymin', tuple_var_assignment_39322_41065)
        
        # Assigning a Call to a Name (line 567):
        
        # Assigning a Call to a Name (line 567):
        
        # Call to get_paths(...): (line 567)
        # Processing the call keyword arguments (line 567)
        kwargs_41072 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'conmin' (line 567)
        conmin_41066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 33), 'conmin', False)
        # Getting the type of 'self' (line 567)
        self_41067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 16), 'self', False)
        # Obtaining the member 'collections' of a type (line 567)
        collections_41068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 16), self_41067, 'collections')
        # Obtaining the member '__getitem__' of a type (line 567)
        getitem___41069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 16), collections_41068, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 567)
        subscript_call_result_41070 = invoke(stypy.reporting.localization.Localization(__file__, 567, 16), getitem___41069, conmin_41066)
        
        # Obtaining the member 'get_paths' of a type (line 567)
        get_paths_41071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 567, 16), subscript_call_result_41070, 'get_paths')
        # Calling get_paths(args, kwargs) (line 567)
        get_paths_call_result_41073 = invoke(stypy.reporting.localization.Localization(__file__, 567, 16), get_paths_41071, *[], **kwargs_41072)
        
        # Assigning a type to the variable 'paths' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 8), 'paths', get_paths_call_result_41073)
        
        # Assigning a Subscript to a Name (line 569):
        
        # Assigning a Subscript to a Name (line 569):
        
        # Obtaining the type of the subscript
        # Getting the type of 'segmin' (line 569)
        segmin_41074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 28), 'segmin')
        # Getting the type of 'paths' (line 569)
        paths_41075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 22), 'paths')
        # Obtaining the member '__getitem__' of a type (line 569)
        getitem___41076 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 569, 22), paths_41075, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 569)
        subscript_call_result_41077 = invoke(stypy.reporting.localization.Localization(__file__, 569, 22), getitem___41076, segmin_41074)
        
        # Assigning a type to the variable 'active_path' (line 569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 8), 'active_path', subscript_call_result_41077)
        
        # Assigning a Attribute to a Name (line 571):
        
        # Assigning a Attribute to a Name (line 571):
        # Getting the type of 'active_path' (line 571)
        active_path_41078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 13), 'active_path')
        # Obtaining the member 'vertices' of a type (line 571)
        vertices_41079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 571, 13), active_path_41078, 'vertices')
        # Assigning a type to the variable 'lc' (line 571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 8), 'lc', vertices_41079)
        
        # Assigning a Call to a Name (line 573):
        
        # Assigning a Call to a Name (line 573):
        
        # Call to transform_point(...): (line 573)
        # Processing the call arguments (line 573)
        
        # Obtaining an instance of the builtin type 'list' (line 573)
        list_41087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 573, 61), 'list')
        # Adding type elements to the builtin type 'list' instance (line 573)
        # Adding element type (line 573)
        # Getting the type of 'xmin' (line 573)
        xmin_41088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 62), 'xmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 573, 61), list_41087, xmin_41088)
        # Adding element type (line 573)
        # Getting the type of 'ymin' (line 573)
        ymin_41089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 68), 'ymin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 573, 61), list_41087, ymin_41089)
        
        # Processing the call keyword arguments (line 573)
        kwargs_41090 = {}
        
        # Call to inverted(...): (line 573)
        # Processing the call keyword arguments (line 573)
        kwargs_41084 = {}
        # Getting the type of 'self' (line 573)
        self_41080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 573, 16), 'self', False)
        # Obtaining the member 'ax' of a type (line 573)
        ax_41081 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 16), self_41080, 'ax')
        # Obtaining the member 'transData' of a type (line 573)
        transData_41082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 16), ax_41081, 'transData')
        # Obtaining the member 'inverted' of a type (line 573)
        inverted_41083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 16), transData_41082, 'inverted')
        # Calling inverted(args, kwargs) (line 573)
        inverted_call_result_41085 = invoke(stypy.reporting.localization.Localization(__file__, 573, 16), inverted_41083, *[], **kwargs_41084)
        
        # Obtaining the member 'transform_point' of a type (line 573)
        transform_point_41086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 573, 16), inverted_call_result_41085, 'transform_point')
        # Calling transform_point(args, kwargs) (line 573)
        transform_point_call_result_41091 = invoke(stypy.reporting.localization.Localization(__file__, 573, 16), transform_point_41086, *[list_41087], **kwargs_41090)
        
        # Assigning a type to the variable 'xcmin' (line 573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 573, 8), 'xcmin', transform_point_call_result_41091)
        
        
        
        # Call to allclose(...): (line 575)
        # Processing the call arguments (line 575)
        # Getting the type of 'xcmin' (line 575)
        xcmin_41094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 27), 'xcmin', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'imin' (line 575)
        imin_41095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 37), 'imin', False)
        # Getting the type of 'lc' (line 575)
        lc_41096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 34), 'lc', False)
        # Obtaining the member '__getitem__' of a type (line 575)
        getitem___41097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 34), lc_41096, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 575)
        subscript_call_result_41098 = invoke(stypy.reporting.localization.Localization(__file__, 575, 34), getitem___41097, imin_41095)
        
        # Processing the call keyword arguments (line 575)
        kwargs_41099 = {}
        # Getting the type of 'np' (line 575)
        np_41092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 575, 15), 'np', False)
        # Obtaining the member 'allclose' of a type (line 575)
        allclose_41093 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 575, 15), np_41092, 'allclose')
        # Calling allclose(args, kwargs) (line 575)
        allclose_call_result_41100 = invoke(stypy.reporting.localization.Localization(__file__, 575, 15), allclose_41093, *[xcmin_41094, subscript_call_result_41098], **kwargs_41099)
        
        # Applying the 'not' unary operator (line 575)
        result_not__41101 = python_operator(stypy.reporting.localization.Localization(__file__, 575, 11), 'not', allclose_call_result_41100)
        
        # Testing the type of an if condition (line 575)
        if_condition_41102 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 575, 8), result_not__41101)
        # Assigning a type to the variable 'if_condition_41102' (line 575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 575, 8), 'if_condition_41102', if_condition_41102)
        # SSA begins for if statement (line 575)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 577):
        
        # Assigning a Subscript to a Name (line 577):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 577)
        tuple_41103 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 577, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 577)
        # Adding element type (line 577)
        
        # Obtaining the type of the subscript
        # Getting the type of 'imin' (line 577)
        imin_41104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 27), 'imin')
        slice_41105 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 577, 23), None, imin_41104, None)
        # Getting the type of 'lc' (line 577)
        lc_41106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 23), 'lc')
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___41107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 23), lc_41106, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_41108 = invoke(stypy.reporting.localization.Localization(__file__, 577, 23), getitem___41107, slice_41105)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 577, 23), tuple_41103, subscript_call_result_41108)
        # Adding element type (line 577)
        
        # Obtaining the type of the subscript
        # Getting the type of 'None' (line 577)
        None_41109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 50), 'None')
        slice_41110 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 577, 34), None, None, None)
        
        # Call to array(...): (line 577)
        # Processing the call arguments (line 577)
        # Getting the type of 'xcmin' (line 577)
        xcmin_41113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 43), 'xcmin', False)
        # Processing the call keyword arguments (line 577)
        kwargs_41114 = {}
        # Getting the type of 'np' (line 577)
        np_41111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 34), 'np', False)
        # Obtaining the member 'array' of a type (line 577)
        array_41112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 34), np_41111, 'array')
        # Calling array(args, kwargs) (line 577)
        array_call_result_41115 = invoke(stypy.reporting.localization.Localization(__file__, 577, 34), array_41112, *[xcmin_41113], **kwargs_41114)
        
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___41116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 34), array_call_result_41115, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_41117 = invoke(stypy.reporting.localization.Localization(__file__, 577, 34), getitem___41116, (None_41109, slice_41110))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 577, 23), tuple_41103, subscript_call_result_41117)
        # Adding element type (line 577)
        
        # Obtaining the type of the subscript
        # Getting the type of 'imin' (line 577)
        imin_41118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 63), 'imin')
        slice_41119 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 577, 60), imin_41118, None, None)
        # Getting the type of 'lc' (line 577)
        lc_41120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 60), 'lc')
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___41121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 60), lc_41120, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_41122 = invoke(stypy.reporting.localization.Localization(__file__, 577, 60), getitem___41121, slice_41119)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 577, 23), tuple_41103, subscript_call_result_41122)
        
        # Getting the type of 'np' (line 577)
        np_41123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 17), 'np')
        # Obtaining the member 'r_' of a type (line 577)
        r__41124 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 17), np_41123, 'r_')
        # Obtaining the member '__getitem__' of a type (line 577)
        getitem___41125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 17), r__41124, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 577)
        subscript_call_result_41126 = invoke(stypy.reporting.localization.Localization(__file__, 577, 17), getitem___41125, tuple_41103)
        
        # Assigning a type to the variable 'lc' (line 577)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 12), 'lc', subscript_call_result_41126)
        
        # Assigning a Call to a Subscript (line 579):
        
        # Assigning a Call to a Subscript (line 579):
        
        # Call to Path(...): (line 579)
        # Processing the call arguments (line 579)
        # Getting the type of 'lc' (line 579)
        lc_41129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 39), 'lc', False)
        # Processing the call keyword arguments (line 579)
        kwargs_41130 = {}
        # Getting the type of 'mpath' (line 579)
        mpath_41127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 28), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 579)
        Path_41128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 579, 28), mpath_41127, 'Path')
        # Calling Path(args, kwargs) (line 579)
        Path_call_result_41131 = invoke(stypy.reporting.localization.Localization(__file__, 579, 28), Path_41128, *[lc_41129], **kwargs_41130)
        
        # Getting the type of 'paths' (line 579)
        paths_41132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 12), 'paths')
        # Getting the type of 'segmin' (line 579)
        segmin_41133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 579, 18), 'segmin')
        # Storing an element on a container (line 579)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 579, 12), paths_41132, (segmin_41133, Path_call_result_41131))
        # SSA join for if statement (line 575)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 582):
        
        # Assigning a Call to a Name (line 582):
        
        # Call to index(...): (line 582)
        # Processing the call arguments (line 582)
        # Getting the type of 'conmin' (line 582)
        conmin_41137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 42), 'conmin', False)
        # Processing the call keyword arguments (line 582)
        kwargs_41138 = {}
        # Getting the type of 'self' (line 582)
        self_41134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 15), 'self', False)
        # Obtaining the member 'labelIndiceList' of a type (line 582)
        labelIndiceList_41135 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 15), self_41134, 'labelIndiceList')
        # Obtaining the member 'index' of a type (line 582)
        index_41136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 15), labelIndiceList_41135, 'index')
        # Calling index(args, kwargs) (line 582)
        index_call_result_41139 = invoke(stypy.reporting.localization.Localization(__file__, 582, 15), index_41136, *[conmin_41137], **kwargs_41138)
        
        # Assigning a type to the variable 'lmin' (line 582)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 582, 8), 'lmin', index_call_result_41139)
        
        # Assigning a Call to a Name (line 585):
        
        # Assigning a Call to a Name (line 585):
        
        # Call to get_paths(...): (line 585)
        # Processing the call keyword arguments (line 585)
        kwargs_41146 = {}
        
        # Obtaining the type of the subscript
        # Getting the type of 'conmin' (line 585)
        conmin_41140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 33), 'conmin', False)
        # Getting the type of 'self' (line 585)
        self_41141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 16), 'self', False)
        # Obtaining the member 'collections' of a type (line 585)
        collections_41142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 16), self_41141, 'collections')
        # Obtaining the member '__getitem__' of a type (line 585)
        getitem___41143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 16), collections_41142, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 585)
        subscript_call_result_41144 = invoke(stypy.reporting.localization.Localization(__file__, 585, 16), getitem___41143, conmin_41140)
        
        # Obtaining the member 'get_paths' of a type (line 585)
        get_paths_41145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 585, 16), subscript_call_result_41144, 'get_paths')
        # Calling get_paths(args, kwargs) (line 585)
        get_paths_call_result_41147 = invoke(stypy.reporting.localization.Localization(__file__, 585, 16), get_paths_41145, *[], **kwargs_41146)
        
        # Assigning a type to the variable 'paths' (line 585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 8), 'paths', get_paths_call_result_41147)
        
        # Assigning a Attribute to a Name (line 586):
        
        # Assigning a Attribute to a Name (line 586):
        
        # Obtaining the type of the subscript
        # Getting the type of 'segmin' (line 586)
        segmin_41148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 19), 'segmin')
        # Getting the type of 'paths' (line 586)
        paths_41149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 13), 'paths')
        # Obtaining the member '__getitem__' of a type (line 586)
        getitem___41150 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 586, 13), paths_41149, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 586)
        subscript_call_result_41151 = invoke(stypy.reporting.localization.Localization(__file__, 586, 13), getitem___41150, segmin_41148)
        
        # Obtaining the member 'vertices' of a type (line 586)
        vertices_41152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 586, 13), subscript_call_result_41151, 'vertices')
        # Assigning a type to the variable 'lc' (line 586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 8), 'lc', vertices_41152)
        
        # Assigning a Call to a Name (line 589):
        
        # Assigning a Call to a Name (line 589):
        
        # Call to transform(...): (line 589)
        # Processing the call arguments (line 589)
        # Getting the type of 'lc' (line 589)
        lc_41157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 42), 'lc', False)
        # Processing the call keyword arguments (line 589)
        kwargs_41158 = {}
        # Getting the type of 'self' (line 589)
        self_41153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 589, 14), 'self', False)
        # Obtaining the member 'ax' of a type (line 589)
        ax_41154 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 14), self_41153, 'ax')
        # Obtaining the member 'transData' of a type (line 589)
        transData_41155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 14), ax_41154, 'transData')
        # Obtaining the member 'transform' of a type (line 589)
        transform_41156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 589, 14), transData_41155, 'transform')
        # Calling transform(args, kwargs) (line 589)
        transform_call_result_41159 = invoke(stypy.reporting.localization.Localization(__file__, 589, 14), transform_41156, *[lc_41157], **kwargs_41158)
        
        # Assigning a type to the variable 'slc' (line 589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 589, 8), 'slc', transform_call_result_41159)
        
        # Assigning a Call to a Name (line 592):
        
        # Assigning a Call to a Name (line 592):
        
        # Call to get_label_width(...): (line 592)
        # Processing the call arguments (line 592)
        
        # Obtaining the type of the subscript
        # Getting the type of 'lmin' (line 592)
        lmin_41162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 54), 'lmin', False)
        # Getting the type of 'self' (line 592)
        self_41163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 34), 'self', False)
        # Obtaining the member 'labelLevelList' of a type (line 592)
        labelLevelList_41164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 34), self_41163, 'labelLevelList')
        # Obtaining the member '__getitem__' of a type (line 592)
        getitem___41165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 34), labelLevelList_41164, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 592)
        subscript_call_result_41166 = invoke(stypy.reporting.localization.Localization(__file__, 592, 34), getitem___41165, lmin_41162)
        
        # Getting the type of 'self' (line 593)
        self_41167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 34), 'self', False)
        # Obtaining the member 'labelFmt' of a type (line 593)
        labelFmt_41168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 34), self_41167, 'labelFmt')
        
        # Obtaining the type of the subscript
        # Getting the type of 'lmin' (line 593)
        lmin_41169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 72), 'lmin', False)
        # Getting the type of 'self' (line 593)
        self_41170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 49), 'self', False)
        # Obtaining the member 'labelFontSizeList' of a type (line 593)
        labelFontSizeList_41171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 49), self_41170, 'labelFontSizeList')
        # Obtaining the member '__getitem__' of a type (line 593)
        getitem___41172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 593, 49), labelFontSizeList_41171, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 593)
        subscript_call_result_41173 = invoke(stypy.reporting.localization.Localization(__file__, 593, 49), getitem___41172, lmin_41169)
        
        # Processing the call keyword arguments (line 592)
        kwargs_41174 = {}
        # Getting the type of 'self' (line 592)
        self_41160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 13), 'self', False)
        # Obtaining the member 'get_label_width' of a type (line 592)
        get_label_width_41161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 13), self_41160, 'get_label_width')
        # Calling get_label_width(args, kwargs) (line 592)
        get_label_width_call_result_41175 = invoke(stypy.reporting.localization.Localization(__file__, 592, 13), get_label_width_41161, *[subscript_call_result_41166, labelFmt_41168, subscript_call_result_41173], **kwargs_41174)
        
        # Assigning a type to the variable 'lw' (line 592)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 8), 'lw', get_label_width_call_result_41175)
        
        # Getting the type of 'inline' (line 596)
        inline_41176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 11), 'inline')
        # Testing the type of an if condition (line 596)
        if_condition_41177 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 596, 8), inline_41176)
        # Assigning a type to the variable 'if_condition_41177' (line 596)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 596, 8), 'if_condition_41177', if_condition_41177)
        # SSA begins for if statement (line 596)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 597):
        
        # Assigning a Name to a Name (line 597):
        # Getting the type of 'lc' (line 597)
        lc_41178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 20), 'lc')
        # Assigning a type to the variable 'lcarg' (line 597)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 12), 'lcarg', lc_41178)
        # SSA branch for the else part of an if statement (line 596)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 599):
        
        # Assigning a Name to a Name (line 599):
        # Getting the type of 'None' (line 599)
        None_41179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 20), 'None')
        # Assigning a type to the variable 'lcarg' (line 599)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 599, 12), 'lcarg', None_41179)
        # SSA join for if statement (line 596)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 600):
        
        # Assigning a Call to a Name:
        
        # Call to calc_label_rot_and_inline(...): (line 600)
        # Processing the call arguments (line 600)
        # Getting the type of 'slc' (line 601)
        slc_41182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 12), 'slc', False)
        # Getting the type of 'imin' (line 601)
        imin_41183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 17), 'imin', False)
        # Getting the type of 'lw' (line 601)
        lw_41184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 23), 'lw', False)
        # Getting the type of 'lcarg' (line 601)
        lcarg_41185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 601, 27), 'lcarg', False)
        # Getting the type of 'inline_spacing' (line 602)
        inline_spacing_41186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 12), 'inline_spacing', False)
        # Processing the call keyword arguments (line 600)
        kwargs_41187 = {}
        # Getting the type of 'self' (line 600)
        self_41180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 24), 'self', False)
        # Obtaining the member 'calc_label_rot_and_inline' of a type (line 600)
        calc_label_rot_and_inline_41181 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 24), self_41180, 'calc_label_rot_and_inline')
        # Calling calc_label_rot_and_inline(args, kwargs) (line 600)
        calc_label_rot_and_inline_call_result_41188 = invoke(stypy.reporting.localization.Localization(__file__, 600, 24), calc_label_rot_and_inline_41181, *[slc_41182, imin_41183, lw_41184, lcarg_41185, inline_spacing_41186], **kwargs_41187)
        
        # Assigning a type to the variable 'call_assignment_39323' (line 600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'call_assignment_39323', calc_label_rot_and_inline_call_result_41188)
        
        # Assigning a Call to a Name (line 600):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_41191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 600, 8), 'int')
        # Processing the call keyword arguments
        kwargs_41192 = {}
        # Getting the type of 'call_assignment_39323' (line 600)
        call_assignment_39323_41189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'call_assignment_39323', False)
        # Obtaining the member '__getitem__' of a type (line 600)
        getitem___41190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 8), call_assignment_39323_41189, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_41193 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___41190, *[int_41191], **kwargs_41192)
        
        # Assigning a type to the variable 'call_assignment_39324' (line 600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'call_assignment_39324', getitem___call_result_41193)
        
        # Assigning a Name to a Name (line 600):
        # Getting the type of 'call_assignment_39324' (line 600)
        call_assignment_39324_41194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'call_assignment_39324')
        # Assigning a type to the variable 'rotation' (line 600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'rotation', call_assignment_39324_41194)
        
        # Assigning a Call to a Name (line 600):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_41197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 600, 8), 'int')
        # Processing the call keyword arguments
        kwargs_41198 = {}
        # Getting the type of 'call_assignment_39323' (line 600)
        call_assignment_39323_41195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'call_assignment_39323', False)
        # Obtaining the member '__getitem__' of a type (line 600)
        getitem___41196 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 600, 8), call_assignment_39323_41195, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_41199 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___41196, *[int_41197], **kwargs_41198)
        
        # Assigning a type to the variable 'call_assignment_39325' (line 600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'call_assignment_39325', getitem___call_result_41199)
        
        # Assigning a Name to a Name (line 600):
        # Getting the type of 'call_assignment_39325' (line 600)
        call_assignment_39325_41200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 8), 'call_assignment_39325')
        # Assigning a type to the variable 'nlc' (line 600)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 18), 'nlc', call_assignment_39325_41200)
        
        # Call to add_label(...): (line 604)
        # Processing the call arguments (line 604)
        # Getting the type of 'xmin' (line 604)
        xmin_41203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 23), 'xmin', False)
        # Getting the type of 'ymin' (line 604)
        ymin_41204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 29), 'ymin', False)
        # Getting the type of 'rotation' (line 604)
        rotation_41205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 35), 'rotation', False)
        
        # Obtaining the type of the subscript
        # Getting the type of 'lmin' (line 604)
        lmin_41206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 65), 'lmin', False)
        # Getting the type of 'self' (line 604)
        self_41207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 45), 'self', False)
        # Obtaining the member 'labelLevelList' of a type (line 604)
        labelLevelList_41208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 45), self_41207, 'labelLevelList')
        # Obtaining the member '__getitem__' of a type (line 604)
        getitem___41209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 45), labelLevelList_41208, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 604)
        subscript_call_result_41210 = invoke(stypy.reporting.localization.Localization(__file__, 604, 45), getitem___41209, lmin_41206)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'lmin' (line 605)
        lmin_41211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 44), 'lmin', False)
        # Getting the type of 'self' (line 605)
        self_41212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 605, 23), 'self', False)
        # Obtaining the member 'labelCValueList' of a type (line 605)
        labelCValueList_41213 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 23), self_41212, 'labelCValueList')
        # Obtaining the member '__getitem__' of a type (line 605)
        getitem___41214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 605, 23), labelCValueList_41213, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 605)
        subscript_call_result_41215 = invoke(stypy.reporting.localization.Localization(__file__, 605, 23), getitem___41214, lmin_41211)
        
        # Processing the call keyword arguments (line 604)
        kwargs_41216 = {}
        # Getting the type of 'self' (line 604)
        self_41201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 8), 'self', False)
        # Obtaining the member 'add_label' of a type (line 604)
        add_label_41202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 8), self_41201, 'add_label')
        # Calling add_label(args, kwargs) (line 604)
        add_label_call_result_41217 = invoke(stypy.reporting.localization.Localization(__file__, 604, 8), add_label_41202, *[xmin_41203, ymin_41204, rotation_41205, subscript_call_result_41210, subscript_call_result_41215], **kwargs_41216)
        
        
        # Getting the type of 'inline' (line 607)
        inline_41218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 11), 'inline')
        # Testing the type of an if condition (line 607)
        if_condition_41219 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 607, 8), inline_41218)
        # Assigning a type to the variable 'if_condition_41219' (line 607)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 8), 'if_condition_41219', if_condition_41219)
        # SSA begins for if statement (line 607)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to pop(...): (line 609)
        # Processing the call arguments (line 609)
        # Getting the type of 'segmin' (line 609)
        segmin_41222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 22), 'segmin', False)
        # Processing the call keyword arguments (line 609)
        kwargs_41223 = {}
        # Getting the type of 'paths' (line 609)
        paths_41220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 12), 'paths', False)
        # Obtaining the member 'pop' of a type (line 609)
        pop_41221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 609, 12), paths_41220, 'pop')
        # Calling pop(args, kwargs) (line 609)
        pop_call_result_41224 = invoke(stypy.reporting.localization.Localization(__file__, 609, 12), pop_41221, *[segmin_41222], **kwargs_41223)
        
        
        # Getting the type of 'nlc' (line 612)
        nlc_41225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 21), 'nlc')
        # Testing the type of a for loop iterable (line 612)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 612, 12), nlc_41225)
        # Getting the type of the for loop variable (line 612)
        for_loop_var_41226 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 612, 12), nlc_41225)
        # Assigning a type to the variable 'n' (line 612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 12), 'n', for_loop_var_41226)
        # SSA begins for a for statement (line 612)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Call to len(...): (line 613)
        # Processing the call arguments (line 613)
        # Getting the type of 'n' (line 613)
        n_41228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 23), 'n', False)
        # Processing the call keyword arguments (line 613)
        kwargs_41229 = {}
        # Getting the type of 'len' (line 613)
        len_41227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 613, 19), 'len', False)
        # Calling len(args, kwargs) (line 613)
        len_call_result_41230 = invoke(stypy.reporting.localization.Localization(__file__, 613, 19), len_41227, *[n_41228], **kwargs_41229)
        
        int_41231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 613, 28), 'int')
        # Applying the binary operator '>' (line 613)
        result_gt_41232 = python_operator(stypy.reporting.localization.Localization(__file__, 613, 19), '>', len_call_result_41230, int_41231)
        
        # Testing the type of an if condition (line 613)
        if_condition_41233 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 613, 16), result_gt_41232)
        # Assigning a type to the variable 'if_condition_41233' (line 613)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 613, 16), 'if_condition_41233', if_condition_41233)
        # SSA begins for if statement (line 613)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 614)
        # Processing the call arguments (line 614)
        
        # Call to Path(...): (line 614)
        # Processing the call arguments (line 614)
        # Getting the type of 'n' (line 614)
        n_41238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 44), 'n', False)
        # Processing the call keyword arguments (line 614)
        kwargs_41239 = {}
        # Getting the type of 'mpath' (line 614)
        mpath_41236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 33), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 614)
        Path_41237 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 33), mpath_41236, 'Path')
        # Calling Path(args, kwargs) (line 614)
        Path_call_result_41240 = invoke(stypy.reporting.localization.Localization(__file__, 614, 33), Path_41237, *[n_41238], **kwargs_41239)
        
        # Processing the call keyword arguments (line 614)
        kwargs_41241 = {}
        # Getting the type of 'paths' (line 614)
        paths_41234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 614, 20), 'paths', False)
        # Obtaining the member 'append' of a type (line 614)
        append_41235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 614, 20), paths_41234, 'append')
        # Calling append(args, kwargs) (line 614)
        append_call_result_41242 = invoke(stypy.reporting.localization.Localization(__file__, 614, 20), append_41235, *[Path_call_result_41240], **kwargs_41241)
        
        # SSA join for if statement (line 613)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 607)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'add_label_near(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'add_label_near' in the type store
        # Getting the type of 'stypy_return_type' (line 533)
        stypy_return_type_41243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_41243)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'add_label_near'
        return stypy_return_type_41243


    @norecursion
    def pop_label(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        int_41244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 616, 30), 'int')
        defaults = [int_41244]
        # Create a new context for function 'pop_label'
        module_type_store = module_type_store.open_function_context('pop_label', 616, 4, False)
        # Assigning a type to the variable 'self' (line 617)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.pop_label.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.pop_label.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.pop_label.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.pop_label.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.pop_label')
        ContourLabeler.pop_label.__dict__.__setitem__('stypy_param_names_list', ['index'])
        ContourLabeler.pop_label.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.pop_label.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.pop_label.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.pop_label.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.pop_label.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.pop_label.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.pop_label', ['index'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pop_label', localization, ['index'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pop_label(...)' code ##################

        unicode_41245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 617, 8), 'unicode', u'Defaults to removing last label, but any index can be supplied')
        
        # Call to pop(...): (line 618)
        # Processing the call arguments (line 618)
        # Getting the type of 'index' (line 618)
        index_41249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 30), 'index', False)
        # Processing the call keyword arguments (line 618)
        kwargs_41250 = {}
        # Getting the type of 'self' (line 618)
        self_41246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 618, 8), 'self', False)
        # Obtaining the member 'labelCValues' of a type (line 618)
        labelCValues_41247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 8), self_41246, 'labelCValues')
        # Obtaining the member 'pop' of a type (line 618)
        pop_41248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 618, 8), labelCValues_41247, 'pop')
        # Calling pop(args, kwargs) (line 618)
        pop_call_result_41251 = invoke(stypy.reporting.localization.Localization(__file__, 618, 8), pop_41248, *[index_41249], **kwargs_41250)
        
        
        # Assigning a Call to a Name (line 619):
        
        # Assigning a Call to a Name (line 619):
        
        # Call to pop(...): (line 619)
        # Processing the call arguments (line 619)
        # Getting the type of 'index' (line 619)
        index_41255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 32), 'index', False)
        # Processing the call keyword arguments (line 619)
        kwargs_41256 = {}
        # Getting the type of 'self' (line 619)
        self_41252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 12), 'self', False)
        # Obtaining the member 'labelTexts' of a type (line 619)
        labelTexts_41253 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 12), self_41252, 'labelTexts')
        # Obtaining the member 'pop' of a type (line 619)
        pop_41254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 12), labelTexts_41253, 'pop')
        # Calling pop(args, kwargs) (line 619)
        pop_call_result_41257 = invoke(stypy.reporting.localization.Localization(__file__, 619, 12), pop_41254, *[index_41255], **kwargs_41256)
        
        # Assigning a type to the variable 't' (line 619)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 619, 8), 't', pop_call_result_41257)
        
        # Call to remove(...): (line 620)
        # Processing the call keyword arguments (line 620)
        kwargs_41260 = {}
        # Getting the type of 't' (line 620)
        t_41258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 8), 't', False)
        # Obtaining the member 'remove' of a type (line 620)
        remove_41259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 620, 8), t_41258, 'remove')
        # Calling remove(args, kwargs) (line 620)
        remove_call_result_41261 = invoke(stypy.reporting.localization.Localization(__file__, 620, 8), remove_41259, *[], **kwargs_41260)
        
        
        # ################# End of 'pop_label(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pop_label' in the type store
        # Getting the type of 'stypy_return_type' (line 616)
        stypy_return_type_41262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 616, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_41262)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pop_label'
        return stypy_return_type_41262


    @norecursion
    def labels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'labels'
        module_type_store = module_type_store.open_function_context('labels', 622, 4, False)
        # Assigning a type to the variable 'self' (line 623)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 623, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourLabeler.labels.__dict__.__setitem__('stypy_localization', localization)
        ContourLabeler.labels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourLabeler.labels.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourLabeler.labels.__dict__.__setitem__('stypy_function_name', 'ContourLabeler.labels')
        ContourLabeler.labels.__dict__.__setitem__('stypy_param_names_list', ['inline', 'inline_spacing'])
        ContourLabeler.labels.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourLabeler.labels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourLabeler.labels.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourLabeler.labels.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourLabeler.labels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourLabeler.labels.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.labels', ['inline', 'inline_spacing'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'labels', localization, ['inline', 'inline_spacing'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'labels(...)' code ##################

        
        # Getting the type of 'self' (line 624)
        self_41263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 624, 11), 'self')
        # Obtaining the member '_use_clabeltext' of a type (line 624)
        _use_clabeltext_41264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 624, 11), self_41263, '_use_clabeltext')
        # Testing the type of an if condition (line 624)
        if_condition_41265 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 624, 8), _use_clabeltext_41264)
        # Assigning a type to the variable 'if_condition_41265' (line 624)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 624, 8), 'if_condition_41265', if_condition_41265)
        # SSA begins for if statement (line 624)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 625):
        
        # Assigning a Attribute to a Name (line 625):
        # Getting the type of 'self' (line 625)
        self_41266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 24), 'self')
        # Obtaining the member 'add_label_clabeltext' of a type (line 625)
        add_label_clabeltext_41267 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 625, 24), self_41266, 'add_label_clabeltext')
        # Assigning a type to the variable 'add_label' (line 625)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 12), 'add_label', add_label_clabeltext_41267)
        # SSA branch for the else part of an if statement (line 624)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 627):
        
        # Assigning a Attribute to a Name (line 627):
        # Getting the type of 'self' (line 627)
        self_41268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 627, 24), 'self')
        # Obtaining the member 'add_label' of a type (line 627)
        add_label_41269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 627, 24), self_41268, 'add_label')
        # Assigning a type to the variable 'add_label' (line 627)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 627, 12), 'add_label', add_label_41269)
        # SSA join for if statement (line 624)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to zip(...): (line 629)
        # Processing the call arguments (line 629)
        # Getting the type of 'self' (line 630)
        self_41271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 16), 'self', False)
        # Obtaining the member 'labelIndiceList' of a type (line 630)
        labelIndiceList_41272 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 16), self_41271, 'labelIndiceList')
        # Getting the type of 'self' (line 630)
        self_41273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 38), 'self', False)
        # Obtaining the member 'labelLevelList' of a type (line 630)
        labelLevelList_41274 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 38), self_41273, 'labelLevelList')
        # Getting the type of 'self' (line 631)
        self_41275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 16), 'self', False)
        # Obtaining the member 'labelFontSizeList' of a type (line 631)
        labelFontSizeList_41276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 16), self_41275, 'labelFontSizeList')
        # Getting the type of 'self' (line 631)
        self_41277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 631, 40), 'self', False)
        # Obtaining the member 'labelCValueList' of a type (line 631)
        labelCValueList_41278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 631, 40), self_41277, 'labelCValueList')
        # Processing the call keyword arguments (line 629)
        kwargs_41279 = {}
        # Getting the type of 'zip' (line 629)
        zip_41270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 629, 40), 'zip', False)
        # Calling zip(args, kwargs) (line 629)
        zip_call_result_41280 = invoke(stypy.reporting.localization.Localization(__file__, 629, 40), zip_41270, *[labelIndiceList_41272, labelLevelList_41274, labelFontSizeList_41276, labelCValueList_41278], **kwargs_41279)
        
        # Testing the type of a for loop iterable (line 629)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 629, 8), zip_call_result_41280)
        # Getting the type of the for loop variable (line 629)
        for_loop_var_41281 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 629, 8), zip_call_result_41280)
        # Assigning a type to the variable 'icon' (line 629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 8), 'icon', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 8), for_loop_var_41281))
        # Assigning a type to the variable 'lev' (line 629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 8), 'lev', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 8), for_loop_var_41281))
        # Assigning a type to the variable 'fsize' (line 629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 8), 'fsize', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 8), for_loop_var_41281))
        # Assigning a type to the variable 'cvalue' (line 629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 629, 8), 'cvalue', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 629, 8), for_loop_var_41281))
        # SSA begins for a for statement (line 629)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 633):
        
        # Assigning a Subscript to a Name (line 633):
        
        # Obtaining the type of the subscript
        # Getting the type of 'icon' (line 633)
        icon_41282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 35), 'icon')
        # Getting the type of 'self' (line 633)
        self_41283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 633, 18), 'self')
        # Obtaining the member 'collections' of a type (line 633)
        collections_41284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 18), self_41283, 'collections')
        # Obtaining the member '__getitem__' of a type (line 633)
        getitem___41285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 633, 18), collections_41284, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 633)
        subscript_call_result_41286 = invoke(stypy.reporting.localization.Localization(__file__, 633, 18), getitem___41285, icon_41282)
        
        # Assigning a type to the variable 'con' (line 633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 12), 'con', subscript_call_result_41286)
        
        # Assigning a Call to a Name (line 634):
        
        # Assigning a Call to a Name (line 634):
        
        # Call to get_transform(...): (line 634)
        # Processing the call keyword arguments (line 634)
        kwargs_41289 = {}
        # Getting the type of 'con' (line 634)
        con_41287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 634, 20), 'con', False)
        # Obtaining the member 'get_transform' of a type (line 634)
        get_transform_41288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 634, 20), con_41287, 'get_transform')
        # Calling get_transform(args, kwargs) (line 634)
        get_transform_call_result_41290 = invoke(stypy.reporting.localization.Localization(__file__, 634, 20), get_transform_41288, *[], **kwargs_41289)
        
        # Assigning a type to the variable 'trans' (line 634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 634, 12), 'trans', get_transform_call_result_41290)
        
        # Assigning a Call to a Name (line 635):
        
        # Assigning a Call to a Name (line 635):
        
        # Call to get_label_width(...): (line 635)
        # Processing the call arguments (line 635)
        # Getting the type of 'lev' (line 635)
        lev_41293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 38), 'lev', False)
        # Getting the type of 'self' (line 635)
        self_41294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 43), 'self', False)
        # Obtaining the member 'labelFmt' of a type (line 635)
        labelFmt_41295 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 43), self_41294, 'labelFmt')
        # Getting the type of 'fsize' (line 635)
        fsize_41296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 58), 'fsize', False)
        # Processing the call keyword arguments (line 635)
        kwargs_41297 = {}
        # Getting the type of 'self' (line 635)
        self_41291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 635, 17), 'self', False)
        # Obtaining the member 'get_label_width' of a type (line 635)
        get_label_width_41292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 635, 17), self_41291, 'get_label_width')
        # Calling get_label_width(args, kwargs) (line 635)
        get_label_width_call_result_41298 = invoke(stypy.reporting.localization.Localization(__file__, 635, 17), get_label_width_41292, *[lev_41293, labelFmt_41295, fsize_41296], **kwargs_41297)
        
        # Assigning a type to the variable 'lw' (line 635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 635, 12), 'lw', get_label_width_call_result_41298)
        
        # Getting the type of 'lw' (line 636)
        lw_41299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 12), 'lw')
        # Getting the type of 'self' (line 636)
        self_41300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 636, 18), 'self')
        # Obtaining the member 'ax' of a type (line 636)
        ax_41301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 18), self_41300, 'ax')
        # Obtaining the member 'figure' of a type (line 636)
        figure_41302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 18), ax_41301, 'figure')
        # Obtaining the member 'dpi' of a type (line 636)
        dpi_41303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 636, 18), figure_41302, 'dpi')
        float_41304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 636, 39), 'float')
        # Applying the binary operator 'div' (line 636)
        result_div_41305 = python_operator(stypy.reporting.localization.Localization(__file__, 636, 18), 'div', dpi_41303, float_41304)
        
        # Applying the binary operator '*=' (line 636)
        result_imul_41306 = python_operator(stypy.reporting.localization.Localization(__file__, 636, 12), '*=', lw_41299, result_div_41305)
        # Assigning a type to the variable 'lw' (line 636)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 636, 12), 'lw', result_imul_41306)
        
        
        # Assigning a List to a Name (line 637):
        
        # Assigning a List to a Name (line 637):
        
        # Obtaining an instance of the builtin type 'list' (line 637)
        list_41307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 637, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 637)
        
        # Assigning a type to the variable 'additions' (line 637)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 637, 12), 'additions', list_41307)
        
        # Assigning a Call to a Name (line 638):
        
        # Assigning a Call to a Name (line 638):
        
        # Call to get_paths(...): (line 638)
        # Processing the call keyword arguments (line 638)
        kwargs_41310 = {}
        # Getting the type of 'con' (line 638)
        con_41308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 638, 20), 'con', False)
        # Obtaining the member 'get_paths' of a type (line 638)
        get_paths_41309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 638, 20), con_41308, 'get_paths')
        # Calling get_paths(args, kwargs) (line 638)
        get_paths_call_result_41311 = invoke(stypy.reporting.localization.Localization(__file__, 638, 20), get_paths_41309, *[], **kwargs_41310)
        
        # Assigning a type to the variable 'paths' (line 638)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 638, 12), 'paths', get_paths_call_result_41311)
        
        
        # Call to enumerate(...): (line 639)
        # Processing the call arguments (line 639)
        # Getting the type of 'paths' (line 639)
        paths_41313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 46), 'paths', False)
        # Processing the call keyword arguments (line 639)
        kwargs_41314 = {}
        # Getting the type of 'enumerate' (line 639)
        enumerate_41312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 639, 36), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 639)
        enumerate_call_result_41315 = invoke(stypy.reporting.localization.Localization(__file__, 639, 36), enumerate_41312, *[paths_41313], **kwargs_41314)
        
        # Testing the type of a for loop iterable (line 639)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 639, 12), enumerate_call_result_41315)
        # Getting the type of the for loop variable (line 639)
        for_loop_var_41316 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 639, 12), enumerate_call_result_41315)
        # Assigning a type to the variable 'segNum' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 12), 'segNum', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), for_loop_var_41316))
        # Assigning a type to the variable 'linepath' (line 639)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 639, 12), 'linepath', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 639, 12), for_loop_var_41316))
        # SSA begins for a for statement (line 639)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Attribute to a Name (line 640):
        
        # Assigning a Attribute to a Name (line 640):
        # Getting the type of 'linepath' (line 640)
        linepath_41317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 21), 'linepath')
        # Obtaining the member 'vertices' of a type (line 640)
        vertices_41318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 640, 21), linepath_41317, 'vertices')
        # Assigning a type to the variable 'lc' (line 640)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 16), 'lc', vertices_41318)
        
        # Assigning a Call to a Name (line 641):
        
        # Assigning a Call to a Name (line 641):
        
        # Call to transform(...): (line 641)
        # Processing the call arguments (line 641)
        # Getting the type of 'lc' (line 641)
        lc_41321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 39), 'lc', False)
        # Processing the call keyword arguments (line 641)
        kwargs_41322 = {}
        # Getting the type of 'trans' (line 641)
        trans_41319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 23), 'trans', False)
        # Obtaining the member 'transform' of a type (line 641)
        transform_41320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 23), trans_41319, 'transform')
        # Calling transform(args, kwargs) (line 641)
        transform_call_result_41323 = invoke(stypy.reporting.localization.Localization(__file__, 641, 23), transform_41320, *[lc_41321], **kwargs_41322)
        
        # Assigning a type to the variable 'slc0' (line 641)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 16), 'slc0', transform_call_result_41323)
        
        
        # Call to is_closed_polygon(...): (line 647)
        # Processing the call arguments (line 647)
        # Getting the type of 'lc' (line 647)
        lc_41326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 42), 'lc', False)
        # Processing the call keyword arguments (line 647)
        kwargs_41327 = {}
        # Getting the type of 'mlab' (line 647)
        mlab_41324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 19), 'mlab', False)
        # Obtaining the member 'is_closed_polygon' of a type (line 647)
        is_closed_polygon_41325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 19), mlab_41324, 'is_closed_polygon')
        # Calling is_closed_polygon(args, kwargs) (line 647)
        is_closed_polygon_call_result_41328 = invoke(stypy.reporting.localization.Localization(__file__, 647, 19), is_closed_polygon_41325, *[lc_41326], **kwargs_41327)
        
        # Testing the type of an if condition (line 647)
        if_condition_41329 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 647, 16), is_closed_polygon_call_result_41328)
        # Assigning a type to the variable 'if_condition_41329' (line 647)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 16), 'if_condition_41329', if_condition_41329)
        # SSA begins for if statement (line 647)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 648):
        
        # Assigning a Subscript to a Name (line 648):
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 648)
        tuple_41330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 648)
        # Adding element type (line 648)
        # Getting the type of 'slc0' (line 648)
        slc0_41331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 32), 'slc0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 648, 32), tuple_41330, slc0_41331)
        # Adding element type (line 648)
        
        # Obtaining the type of the subscript
        int_41332 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 43), 'int')
        int_41333 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 45), 'int')
        slice_41334 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 648, 38), int_41332, int_41333, None)
        slice_41335 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 648, 38), None, None, None)
        # Getting the type of 'slc0' (line 648)
        slc0_41336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 38), 'slc0')
        # Obtaining the member '__getitem__' of a type (line 648)
        getitem___41337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 38), slc0_41336, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 648)
        subscript_call_result_41338 = invoke(stypy.reporting.localization.Localization(__file__, 648, 38), getitem___41337, (slice_41334, slice_41335))
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 648, 32), tuple_41330, subscript_call_result_41338)
        
        # Getting the type of 'np' (line 648)
        np_41339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 26), 'np')
        # Obtaining the member 'r_' of a type (line 648)
        r__41340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 26), np_41339, 'r_')
        # Obtaining the member '__getitem__' of a type (line 648)
        getitem___41341 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 26), r__41340, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 648)
        subscript_call_result_41342 = invoke(stypy.reporting.localization.Localization(__file__, 648, 26), getitem___41341, tuple_41330)
        
        # Assigning a type to the variable 'slc' (line 648)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 20), 'slc', subscript_call_result_41342)
        # SSA branch for the else part of an if statement (line 647)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 650):
        
        # Assigning a Name to a Name (line 650):
        # Getting the type of 'slc0' (line 650)
        slc0_41343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 26), 'slc0')
        # Assigning a type to the variable 'slc' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 20), 'slc', slc0_41343)
        # SSA join for if statement (line 647)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to print_label(...): (line 653)
        # Processing the call arguments (line 653)
        # Getting the type of 'slc' (line 653)
        slc_41346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 36), 'slc', False)
        # Getting the type of 'lw' (line 653)
        lw_41347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 41), 'lw', False)
        # Processing the call keyword arguments (line 653)
        kwargs_41348 = {}
        # Getting the type of 'self' (line 653)
        self_41344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 19), 'self', False)
        # Obtaining the member 'print_label' of a type (line 653)
        print_label_41345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 19), self_41344, 'print_label')
        # Calling print_label(args, kwargs) (line 653)
        print_label_call_result_41349 = invoke(stypy.reporting.localization.Localization(__file__, 653, 19), print_label_41345, *[slc_41346, lw_41347], **kwargs_41348)
        
        # Testing the type of an if condition (line 653)
        if_condition_41350 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 653, 16), print_label_call_result_41349)
        # Assigning a type to the variable 'if_condition_41350' (line 653)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 653, 16), 'if_condition_41350', if_condition_41350)
        # SSA begins for if statement (line 653)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 654):
        
        # Assigning a Call to a Name:
        
        # Call to locate_label(...): (line 654)
        # Processing the call arguments (line 654)
        # Getting the type of 'slc' (line 654)
        slc_41353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 50), 'slc', False)
        # Getting the type of 'lw' (line 654)
        lw_41354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 55), 'lw', False)
        # Processing the call keyword arguments (line 654)
        kwargs_41355 = {}
        # Getting the type of 'self' (line 654)
        self_41351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 32), 'self', False)
        # Obtaining the member 'locate_label' of a type (line 654)
        locate_label_41352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 32), self_41351, 'locate_label')
        # Calling locate_label(args, kwargs) (line 654)
        locate_label_call_result_41356 = invoke(stypy.reporting.localization.Localization(__file__, 654, 32), locate_label_41352, *[slc_41353, lw_41354], **kwargs_41355)
        
        # Assigning a type to the variable 'call_assignment_39326' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 20), 'call_assignment_39326', locate_label_call_result_41356)
        
        # Assigning a Call to a Name (line 654):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_41359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, 20), 'int')
        # Processing the call keyword arguments
        kwargs_41360 = {}
        # Getting the type of 'call_assignment_39326' (line 654)
        call_assignment_39326_41357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 20), 'call_assignment_39326', False)
        # Obtaining the member '__getitem__' of a type (line 654)
        getitem___41358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 20), call_assignment_39326_41357, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_41361 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___41358, *[int_41359], **kwargs_41360)
        
        # Assigning a type to the variable 'call_assignment_39327' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 20), 'call_assignment_39327', getitem___call_result_41361)
        
        # Assigning a Name to a Name (line 654):
        # Getting the type of 'call_assignment_39327' (line 654)
        call_assignment_39327_41362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 20), 'call_assignment_39327')
        # Assigning a type to the variable 'x' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 20), 'x', call_assignment_39327_41362)
        
        # Assigning a Call to a Name (line 654):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_41365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, 20), 'int')
        # Processing the call keyword arguments
        kwargs_41366 = {}
        # Getting the type of 'call_assignment_39326' (line 654)
        call_assignment_39326_41363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 20), 'call_assignment_39326', False)
        # Obtaining the member '__getitem__' of a type (line 654)
        getitem___41364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 20), call_assignment_39326_41363, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_41367 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___41364, *[int_41365], **kwargs_41366)
        
        # Assigning a type to the variable 'call_assignment_39328' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 20), 'call_assignment_39328', getitem___call_result_41367)
        
        # Assigning a Name to a Name (line 654):
        # Getting the type of 'call_assignment_39328' (line 654)
        call_assignment_39328_41368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 20), 'call_assignment_39328')
        # Assigning a type to the variable 'y' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 23), 'y', call_assignment_39328_41368)
        
        # Assigning a Call to a Name (line 654):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_41371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 654, 20), 'int')
        # Processing the call keyword arguments
        kwargs_41372 = {}
        # Getting the type of 'call_assignment_39326' (line 654)
        call_assignment_39326_41369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 20), 'call_assignment_39326', False)
        # Obtaining the member '__getitem__' of a type (line 654)
        getitem___41370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 654, 20), call_assignment_39326_41369, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_41373 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___41370, *[int_41371], **kwargs_41372)
        
        # Assigning a type to the variable 'call_assignment_39329' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 20), 'call_assignment_39329', getitem___call_result_41373)
        
        # Assigning a Name to a Name (line 654):
        # Getting the type of 'call_assignment_39329' (line 654)
        call_assignment_39329_41374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 654, 20), 'call_assignment_39329')
        # Assigning a type to the variable 'ind' (line 654)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 654, 26), 'ind', call_assignment_39329_41374)
        
        # Getting the type of 'inline' (line 656)
        inline_41375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 23), 'inline')
        # Testing the type of an if condition (line 656)
        if_condition_41376 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 656, 20), inline_41375)
        # Assigning a type to the variable 'if_condition_41376' (line 656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 20), 'if_condition_41376', if_condition_41376)
        # SSA begins for if statement (line 656)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 657):
        
        # Assigning a Name to a Name (line 657):
        # Getting the type of 'lc' (line 657)
        lc_41377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 32), 'lc')
        # Assigning a type to the variable 'lcarg' (line 657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 657, 24), 'lcarg', lc_41377)
        # SSA branch for the else part of an if statement (line 656)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 659):
        
        # Assigning a Name to a Name (line 659):
        # Getting the type of 'None' (line 659)
        None_41378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 32), 'None')
        # Assigning a type to the variable 'lcarg' (line 659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 659, 24), 'lcarg', None_41378)
        # SSA join for if statement (line 656)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 660):
        
        # Assigning a Call to a Name:
        
        # Call to calc_label_rot_and_inline(...): (line 660)
        # Processing the call arguments (line 660)
        # Getting the type of 'slc0' (line 661)
        slc0_41381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 24), 'slc0', False)
        # Getting the type of 'ind' (line 661)
        ind_41382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 30), 'ind', False)
        # Getting the type of 'lw' (line 661)
        lw_41383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 35), 'lw', False)
        # Getting the type of 'lcarg' (line 661)
        lcarg_41384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 39), 'lcarg', False)
        # Getting the type of 'inline_spacing' (line 662)
        inline_spacing_41385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 24), 'inline_spacing', False)
        # Processing the call keyword arguments (line 660)
        kwargs_41386 = {}
        # Getting the type of 'self' (line 660)
        self_41379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 36), 'self', False)
        # Obtaining the member 'calc_label_rot_and_inline' of a type (line 660)
        calc_label_rot_and_inline_41380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 36), self_41379, 'calc_label_rot_and_inline')
        # Calling calc_label_rot_and_inline(args, kwargs) (line 660)
        calc_label_rot_and_inline_call_result_41387 = invoke(stypy.reporting.localization.Localization(__file__, 660, 36), calc_label_rot_and_inline_41380, *[slc0_41381, ind_41382, lw_41383, lcarg_41384, inline_spacing_41385], **kwargs_41386)
        
        # Assigning a type to the variable 'call_assignment_39330' (line 660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 20), 'call_assignment_39330', calc_label_rot_and_inline_call_result_41387)
        
        # Assigning a Call to a Name (line 660):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_41390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 660, 20), 'int')
        # Processing the call keyword arguments
        kwargs_41391 = {}
        # Getting the type of 'call_assignment_39330' (line 660)
        call_assignment_39330_41388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 20), 'call_assignment_39330', False)
        # Obtaining the member '__getitem__' of a type (line 660)
        getitem___41389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 20), call_assignment_39330_41388, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_41392 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___41389, *[int_41390], **kwargs_41391)
        
        # Assigning a type to the variable 'call_assignment_39331' (line 660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 20), 'call_assignment_39331', getitem___call_result_41392)
        
        # Assigning a Name to a Name (line 660):
        # Getting the type of 'call_assignment_39331' (line 660)
        call_assignment_39331_41393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 20), 'call_assignment_39331')
        # Assigning a type to the variable 'rotation' (line 660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 20), 'rotation', call_assignment_39331_41393)
        
        # Assigning a Call to a Name (line 660):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_41396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 660, 20), 'int')
        # Processing the call keyword arguments
        kwargs_41397 = {}
        # Getting the type of 'call_assignment_39330' (line 660)
        call_assignment_39330_41394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 20), 'call_assignment_39330', False)
        # Obtaining the member '__getitem__' of a type (line 660)
        getitem___41395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 20), call_assignment_39330_41394, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_41398 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___41395, *[int_41396], **kwargs_41397)
        
        # Assigning a type to the variable 'call_assignment_39332' (line 660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 20), 'call_assignment_39332', getitem___call_result_41398)
        
        # Assigning a Name to a Name (line 660):
        # Getting the type of 'call_assignment_39332' (line 660)
        call_assignment_39332_41399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 20), 'call_assignment_39332')
        # Assigning a type to the variable 'new' (line 660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 30), 'new', call_assignment_39332_41399)
        
        # Call to add_label(...): (line 665)
        # Processing the call arguments (line 665)
        # Getting the type of 'x' (line 665)
        x_41401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 30), 'x', False)
        # Getting the type of 'y' (line 665)
        y_41402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 33), 'y', False)
        # Getting the type of 'rotation' (line 665)
        rotation_41403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 36), 'rotation', False)
        # Getting the type of 'lev' (line 665)
        lev_41404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 46), 'lev', False)
        # Getting the type of 'cvalue' (line 665)
        cvalue_41405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 51), 'cvalue', False)
        # Processing the call keyword arguments (line 665)
        kwargs_41406 = {}
        # Getting the type of 'add_label' (line 665)
        add_label_41400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 20), 'add_label', False)
        # Calling add_label(args, kwargs) (line 665)
        add_label_call_result_41407 = invoke(stypy.reporting.localization.Localization(__file__, 665, 20), add_label_41400, *[x_41401, y_41402, rotation_41403, lev_41404, cvalue_41405], **kwargs_41406)
        
        
        # Getting the type of 'inline' (line 668)
        inline_41408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 668, 23), 'inline')
        # Testing the type of an if condition (line 668)
        if_condition_41409 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 668, 20), inline_41408)
        # Assigning a type to the variable 'if_condition_41409' (line 668)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 668, 20), 'if_condition_41409', if_condition_41409)
        # SSA begins for if statement (line 668)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'new' (line 669)
        new_41410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 33), 'new')
        # Testing the type of a for loop iterable (line 669)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 669, 24), new_41410)
        # Getting the type of the for loop variable (line 669)
        for_loop_var_41411 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 669, 24), new_41410)
        # Assigning a type to the variable 'n' (line 669)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 24), 'n', for_loop_var_41411)
        # SSA begins for a for statement (line 669)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        
        # Call to len(...): (line 671)
        # Processing the call arguments (line 671)
        # Getting the type of 'n' (line 671)
        n_41413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 35), 'n', False)
        # Processing the call keyword arguments (line 671)
        kwargs_41414 = {}
        # Getting the type of 'len' (line 671)
        len_41412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 31), 'len', False)
        # Calling len(args, kwargs) (line 671)
        len_call_result_41415 = invoke(stypy.reporting.localization.Localization(__file__, 671, 31), len_41412, *[n_41413], **kwargs_41414)
        
        int_41416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 671, 40), 'int')
        # Applying the binary operator '>' (line 671)
        result_gt_41417 = python_operator(stypy.reporting.localization.Localization(__file__, 671, 31), '>', len_call_result_41415, int_41416)
        
        # Testing the type of an if condition (line 671)
        if_condition_41418 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 671, 28), result_gt_41417)
        # Assigning a type to the variable 'if_condition_41418' (line 671)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 671, 28), 'if_condition_41418', if_condition_41418)
        # SSA begins for if statement (line 671)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 672)
        # Processing the call arguments (line 672)
        
        # Call to Path(...): (line 672)
        # Processing the call arguments (line 672)
        # Getting the type of 'n' (line 672)
        n_41423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 60), 'n', False)
        # Processing the call keyword arguments (line 672)
        kwargs_41424 = {}
        # Getting the type of 'mpath' (line 672)
        mpath_41421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 49), 'mpath', False)
        # Obtaining the member 'Path' of a type (line 672)
        Path_41422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 49), mpath_41421, 'Path')
        # Calling Path(args, kwargs) (line 672)
        Path_call_result_41425 = invoke(stypy.reporting.localization.Localization(__file__, 672, 49), Path_41422, *[n_41423], **kwargs_41424)
        
        # Processing the call keyword arguments (line 672)
        kwargs_41426 = {}
        # Getting the type of 'additions' (line 672)
        additions_41419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 32), 'additions', False)
        # Obtaining the member 'append' of a type (line 672)
        append_41420 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 32), additions_41419, 'append')
        # Calling append(args, kwargs) (line 672)
        append_call_result_41427 = invoke(stypy.reporting.localization.Localization(__file__, 672, 32), append_41420, *[Path_call_result_41425], **kwargs_41426)
        
        # SSA join for if statement (line 671)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 668)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 653)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 674)
        # Processing the call arguments (line 674)
        # Getting the type of 'linepath' (line 674)
        linepath_41430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 37), 'linepath', False)
        # Processing the call keyword arguments (line 674)
        kwargs_41431 = {}
        # Getting the type of 'additions' (line 674)
        additions_41428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 20), 'additions', False)
        # Obtaining the member 'append' of a type (line 674)
        append_41429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 20), additions_41428, 'append')
        # Calling append(args, kwargs) (line 674)
        append_call_result_41432 = invoke(stypy.reporting.localization.Localization(__file__, 674, 20), append_41429, *[linepath_41430], **kwargs_41431)
        
        # SSA join for if statement (line 653)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'inline' (line 678)
        inline_41433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 15), 'inline')
        # Testing the type of an if condition (line 678)
        if_condition_41434 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 678, 12), inline_41433)
        # Assigning a type to the variable 'if_condition_41434' (line 678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 12), 'if_condition_41434', if_condition_41434)
        # SSA begins for if statement (line 678)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Deleting a member
        # Getting the type of 'paths' (line 679)
        paths_41435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 20), 'paths')
        
        # Obtaining the type of the subscript
        slice_41436 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 679, 20), None, None, None)
        # Getting the type of 'paths' (line 679)
        paths_41437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 679, 20), 'paths')
        # Obtaining the member '__getitem__' of a type (line 679)
        getitem___41438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 679, 20), paths_41437, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 679)
        subscript_call_result_41439 = invoke(stypy.reporting.localization.Localization(__file__, 679, 20), getitem___41438, slice_41436)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 679, 16), paths_41435, subscript_call_result_41439)
        
        # Call to extend(...): (line 680)
        # Processing the call arguments (line 680)
        # Getting the type of 'additions' (line 680)
        additions_41442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 29), 'additions', False)
        # Processing the call keyword arguments (line 680)
        kwargs_41443 = {}
        # Getting the type of 'paths' (line 680)
        paths_41440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 16), 'paths', False)
        # Obtaining the member 'extend' of a type (line 680)
        extend_41441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 680, 16), paths_41440, 'extend')
        # Calling extend(args, kwargs) (line 680)
        extend_call_result_41444 = invoke(stypy.reporting.localization.Localization(__file__, 680, 16), extend_41441, *[additions_41442], **kwargs_41443)
        
        # SSA join for if statement (line 678)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'labels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'labels' in the type store
        # Getting the type of 'stypy_return_type' (line 622)
        stypy_return_type_41445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_41445)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'labels'
        return stypy_return_type_41445


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 57, 0, False)
        # Assigning a type to the variable 'self' (line 58)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 58, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourLabeler.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'ContourLabeler' (line 57)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 0), 'ContourLabeler', ContourLabeler)

@norecursion
def _find_closest_point_on_leg(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_find_closest_point_on_leg'
    module_type_store = module_type_store.open_function_context('_find_closest_point_on_leg', 683, 0, False)
    
    # Passed parameters checking function
    _find_closest_point_on_leg.stypy_localization = localization
    _find_closest_point_on_leg.stypy_type_of_self = None
    _find_closest_point_on_leg.stypy_type_store = module_type_store
    _find_closest_point_on_leg.stypy_function_name = '_find_closest_point_on_leg'
    _find_closest_point_on_leg.stypy_param_names_list = ['p1', 'p2', 'p0']
    _find_closest_point_on_leg.stypy_varargs_param_name = None
    _find_closest_point_on_leg.stypy_kwargs_param_name = None
    _find_closest_point_on_leg.stypy_call_defaults = defaults
    _find_closest_point_on_leg.stypy_call_varargs = varargs
    _find_closest_point_on_leg.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_find_closest_point_on_leg', ['p1', 'p2', 'p0'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_find_closest_point_on_leg', localization, ['p1', 'p2', 'p0'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_find_closest_point_on_leg(...)' code ##################

    unicode_41446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 684, 4), 'unicode', u'find closest point to p0 on line segment connecting p1 and p2')
    
    
    # Call to all(...): (line 687)
    # Processing the call arguments (line 687)
    
    # Getting the type of 'p2' (line 687)
    p2_41449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 14), 'p2', False)
    # Getting the type of 'p1' (line 687)
    p1_41450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 20), 'p1', False)
    # Applying the binary operator '==' (line 687)
    result_eq_41451 = python_operator(stypy.reporting.localization.Localization(__file__, 687, 14), '==', p2_41449, p1_41450)
    
    # Processing the call keyword arguments (line 687)
    kwargs_41452 = {}
    # Getting the type of 'np' (line 687)
    np_41447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 7), 'np', False)
    # Obtaining the member 'all' of a type (line 687)
    all_41448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 687, 7), np_41447, 'all')
    # Calling all(args, kwargs) (line 687)
    all_call_result_41453 = invoke(stypy.reporting.localization.Localization(__file__, 687, 7), all_41448, *[result_eq_41451], **kwargs_41452)
    
    # Testing the type of an if condition (line 687)
    if_condition_41454 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 687, 4), all_call_result_41453)
    # Assigning a type to the variable 'if_condition_41454' (line 687)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 4), 'if_condition_41454', if_condition_41454)
    # SSA begins for if statement (line 687)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 688):
    
    # Assigning a Call to a Name (line 688):
    
    # Call to sum(...): (line 688)
    # Processing the call arguments (line 688)
    # Getting the type of 'p0' (line 688)
    p0_41457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 20), 'p0', False)
    # Getting the type of 'p1' (line 688)
    p1_41458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 25), 'p1', False)
    # Applying the binary operator '-' (line 688)
    result_sub_41459 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 20), '-', p0_41457, p1_41458)
    
    int_41460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 30), 'int')
    # Applying the binary operator '**' (line 688)
    result_pow_41461 = python_operator(stypy.reporting.localization.Localization(__file__, 688, 19), '**', result_sub_41459, int_41460)
    
    # Processing the call keyword arguments (line 688)
    kwargs_41462 = {}
    # Getting the type of 'np' (line 688)
    np_41455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 12), 'np', False)
    # Obtaining the member 'sum' of a type (line 688)
    sum_41456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 12), np_41455, 'sum')
    # Calling sum(args, kwargs) (line 688)
    sum_call_result_41463 = invoke(stypy.reporting.localization.Localization(__file__, 688, 12), sum_41456, *[result_pow_41461], **kwargs_41462)
    
    # Assigning a type to the variable 'd' (line 688)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 688, 8), 'd', sum_call_result_41463)
    
    # Obtaining an instance of the builtin type 'tuple' (line 689)
    tuple_41464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 689, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 689)
    # Adding element type (line 689)
    # Getting the type of 'd' (line 689)
    d_41465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 15), 'd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 689, 15), tuple_41464, d_41465)
    # Adding element type (line 689)
    # Getting the type of 'p1' (line 689)
    p1_41466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 689, 18), 'p1')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 689, 15), tuple_41464, p1_41466)
    
    # Assigning a type to the variable 'stypy_return_type' (line 689)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 689, 8), 'stypy_return_type', tuple_41464)
    # SSA join for if statement (line 687)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 691):
    
    # Assigning a BinOp to a Name (line 691):
    # Getting the type of 'p2' (line 691)
    p2_41467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 10), 'p2')
    # Getting the type of 'p1' (line 691)
    p1_41468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 15), 'p1')
    # Applying the binary operator '-' (line 691)
    result_sub_41469 = python_operator(stypy.reporting.localization.Localization(__file__, 691, 10), '-', p2_41467, p1_41468)
    
    # Assigning a type to the variable 'd21' (line 691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 691, 4), 'd21', result_sub_41469)
    
    # Assigning a BinOp to a Name (line 692):
    
    # Assigning a BinOp to a Name (line 692):
    # Getting the type of 'p0' (line 692)
    p0_41470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 10), 'p0')
    # Getting the type of 'p1' (line 692)
    p1_41471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 15), 'p1')
    # Applying the binary operator '-' (line 692)
    result_sub_41472 = python_operator(stypy.reporting.localization.Localization(__file__, 692, 10), '-', p0_41470, p1_41471)
    
    # Assigning a type to the variable 'd01' (line 692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 692, 4), 'd01', result_sub_41472)
    
    # Assigning a BinOp to a Name (line 695):
    
    # Assigning a BinOp to a Name (line 695):
    
    # Call to dot(...): (line 695)
    # Processing the call arguments (line 695)
    # Getting the type of 'd01' (line 695)
    d01_41475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 18), 'd01', False)
    # Getting the type of 'd21' (line 695)
    d21_41476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 23), 'd21', False)
    # Processing the call keyword arguments (line 695)
    kwargs_41477 = {}
    # Getting the type of 'np' (line 695)
    np_41473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 11), 'np', False)
    # Obtaining the member 'dot' of a type (line 695)
    dot_41474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 11), np_41473, 'dot')
    # Calling dot(args, kwargs) (line 695)
    dot_call_result_41478 = invoke(stypy.reporting.localization.Localization(__file__, 695, 11), dot_41474, *[d01_41475, d21_41476], **kwargs_41477)
    
    
    # Call to dot(...): (line 695)
    # Processing the call arguments (line 695)
    # Getting the type of 'd21' (line 695)
    d21_41481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 37), 'd21', False)
    # Getting the type of 'd21' (line 695)
    d21_41482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 42), 'd21', False)
    # Processing the call keyword arguments (line 695)
    kwargs_41483 = {}
    # Getting the type of 'np' (line 695)
    np_41479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 695, 30), 'np', False)
    # Obtaining the member 'dot' of a type (line 695)
    dot_41480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 695, 30), np_41479, 'dot')
    # Calling dot(args, kwargs) (line 695)
    dot_call_result_41484 = invoke(stypy.reporting.localization.Localization(__file__, 695, 30), dot_41480, *[d21_41481, d21_41482], **kwargs_41483)
    
    # Applying the binary operator 'div' (line 695)
    result_div_41485 = python_operator(stypy.reporting.localization.Localization(__file__, 695, 11), 'div', dot_call_result_41478, dot_call_result_41484)
    
    # Assigning a type to the variable 'proj' (line 695)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 695, 4), 'proj', result_div_41485)
    
    
    # Getting the type of 'proj' (line 696)
    proj_41486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 7), 'proj')
    int_41487 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 696, 14), 'int')
    # Applying the binary operator '<' (line 696)
    result_lt_41488 = python_operator(stypy.reporting.localization.Localization(__file__, 696, 7), '<', proj_41486, int_41487)
    
    # Testing the type of an if condition (line 696)
    if_condition_41489 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 696, 4), result_lt_41488)
    # Assigning a type to the variable 'if_condition_41489' (line 696)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 4), 'if_condition_41489', if_condition_41489)
    # SSA begins for if statement (line 696)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 697):
    
    # Assigning a Num to a Name (line 697):
    int_41490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 697, 15), 'int')
    # Assigning a type to the variable 'proj' (line 697)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 8), 'proj', int_41490)
    # SSA join for if statement (line 696)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'proj' (line 698)
    proj_41491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 7), 'proj')
    int_41492 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 698, 14), 'int')
    # Applying the binary operator '>' (line 698)
    result_gt_41493 = python_operator(stypy.reporting.localization.Localization(__file__, 698, 7), '>', proj_41491, int_41492)
    
    # Testing the type of an if condition (line 698)
    if_condition_41494 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 698, 4), result_gt_41493)
    # Assigning a type to the variable 'if_condition_41494' (line 698)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 698, 4), 'if_condition_41494', if_condition_41494)
    # SSA begins for if statement (line 698)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Name (line 699):
    
    # Assigning a Num to a Name (line 699):
    int_41495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 699, 15), 'int')
    # Assigning a type to the variable 'proj' (line 699)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 8), 'proj', int_41495)
    # SSA join for if statement (line 698)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a BinOp to a Name (line 700):
    
    # Assigning a BinOp to a Name (line 700):
    # Getting the type of 'p1' (line 700)
    p1_41496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 9), 'p1')
    # Getting the type of 'proj' (line 700)
    proj_41497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 14), 'proj')
    # Getting the type of 'd21' (line 700)
    d21_41498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 700, 21), 'd21')
    # Applying the binary operator '*' (line 700)
    result_mul_41499 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 14), '*', proj_41497, d21_41498)
    
    # Applying the binary operator '+' (line 700)
    result_add_41500 = python_operator(stypy.reporting.localization.Localization(__file__, 700, 9), '+', p1_41496, result_mul_41499)
    
    # Assigning a type to the variable 'pc' (line 700)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 700, 4), 'pc', result_add_41500)
    
    # Assigning a Call to a Name (line 703):
    
    # Assigning a Call to a Name (line 703):
    
    # Call to sum(...): (line 703)
    # Processing the call arguments (line 703)
    # Getting the type of 'pc' (line 703)
    pc_41503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 16), 'pc', False)
    # Getting the type of 'p0' (line 703)
    p0_41504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 19), 'p0', False)
    # Applying the binary operator '-' (line 703)
    result_sub_41505 = python_operator(stypy.reporting.localization.Localization(__file__, 703, 16), '-', pc_41503, p0_41504)
    
    int_41506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 703, 24), 'int')
    # Applying the binary operator '**' (line 703)
    result_pow_41507 = python_operator(stypy.reporting.localization.Localization(__file__, 703, 15), '**', result_sub_41505, int_41506)
    
    # Processing the call keyword arguments (line 703)
    kwargs_41508 = {}
    # Getting the type of 'np' (line 703)
    np_41501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 703, 8), 'np', False)
    # Obtaining the member 'sum' of a type (line 703)
    sum_41502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 703, 8), np_41501, 'sum')
    # Calling sum(args, kwargs) (line 703)
    sum_call_result_41509 = invoke(stypy.reporting.localization.Localization(__file__, 703, 8), sum_41502, *[result_pow_41507], **kwargs_41508)
    
    # Assigning a type to the variable 'd' (line 703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 703, 4), 'd', sum_call_result_41509)
    
    # Obtaining an instance of the builtin type 'tuple' (line 705)
    tuple_41510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 705, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 705)
    # Adding element type (line 705)
    # Getting the type of 'd' (line 705)
    d_41511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 11), 'd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 705, 11), tuple_41510, d_41511)
    # Adding element type (line 705)
    # Getting the type of 'pc' (line 705)
    pc_41512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 14), 'pc')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 705, 11), tuple_41510, pc_41512)
    
    # Assigning a type to the variable 'stypy_return_type' (line 705)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 4), 'stypy_return_type', tuple_41510)
    
    # ################# End of '_find_closest_point_on_leg(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_find_closest_point_on_leg' in the type store
    # Getting the type of 'stypy_return_type' (line 683)
    stypy_return_type_41513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 683, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_41513)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_find_closest_point_on_leg'
    return stypy_return_type_41513

# Assigning a type to the variable '_find_closest_point_on_leg' (line 683)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 683, 0), '_find_closest_point_on_leg', _find_closest_point_on_leg)

@norecursion
def _find_closest_point_on_path(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_find_closest_point_on_path'
    module_type_store = module_type_store.open_function_context('_find_closest_point_on_path', 708, 0, False)
    
    # Passed parameters checking function
    _find_closest_point_on_path.stypy_localization = localization
    _find_closest_point_on_path.stypy_type_of_self = None
    _find_closest_point_on_path.stypy_type_store = module_type_store
    _find_closest_point_on_path.stypy_function_name = '_find_closest_point_on_path'
    _find_closest_point_on_path.stypy_param_names_list = ['lc', 'point']
    _find_closest_point_on_path.stypy_varargs_param_name = None
    _find_closest_point_on_path.stypy_kwargs_param_name = None
    _find_closest_point_on_path.stypy_call_defaults = defaults
    _find_closest_point_on_path.stypy_call_varargs = varargs
    _find_closest_point_on_path.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_find_closest_point_on_path', ['lc', 'point'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_find_closest_point_on_path', localization, ['lc', 'point'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_find_closest_point_on_path(...)' code ##################

    unicode_41514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, (-1)), 'unicode', u'\n    lc: coordinates of vertices\n    point: coordinates of test point\n    ')
    
    # Assigning a Call to a Name (line 715):
    
    # Assigning a Call to a Name (line 715):
    
    # Call to sum(...): (line 715)
    # Processing the call arguments (line 715)
    # Getting the type of 'lc' (line 715)
    lc_41517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 17), 'lc', False)
    
    # Obtaining the type of the subscript
    # Getting the type of 'None' (line 715)
    None_41518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 28), 'None', False)
    slice_41519 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 715, 22), None, None, None)
    # Getting the type of 'point' (line 715)
    point_41520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 22), 'point', False)
    # Obtaining the member '__getitem__' of a type (line 715)
    getitem___41521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 22), point_41520, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 715)
    subscript_call_result_41522 = invoke(stypy.reporting.localization.Localization(__file__, 715, 22), getitem___41521, (None_41518, slice_41519))
    
    # Applying the binary operator '-' (line 715)
    result_sub_41523 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 17), '-', lc_41517, subscript_call_result_41522)
    
    int_41524 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 39), 'int')
    # Applying the binary operator '**' (line 715)
    result_pow_41525 = python_operator(stypy.reporting.localization.Localization(__file__, 715, 16), '**', result_sub_41523, int_41524)
    
    int_41526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 715, 42), 'int')
    # Processing the call keyword arguments (line 715)
    kwargs_41527 = {}
    # Getting the type of 'np' (line 715)
    np_41515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 9), 'np', False)
    # Obtaining the member 'sum' of a type (line 715)
    sum_41516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 715, 9), np_41515, 'sum')
    # Calling sum(args, kwargs) (line 715)
    sum_call_result_41528 = invoke(stypy.reporting.localization.Localization(__file__, 715, 9), sum_41516, *[result_pow_41525, int_41526], **kwargs_41527)
    
    # Assigning a type to the variable 'ds' (line 715)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 4), 'ds', sum_call_result_41528)
    
    # Assigning a Call to a Name (line 716):
    
    # Assigning a Call to a Name (line 716):
    
    # Call to argmin(...): (line 716)
    # Processing the call arguments (line 716)
    # Getting the type of 'ds' (line 716)
    ds_41531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 21), 'ds', False)
    # Processing the call keyword arguments (line 716)
    kwargs_41532 = {}
    # Getting the type of 'np' (line 716)
    np_41529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 11), 'np', False)
    # Obtaining the member 'argmin' of a type (line 716)
    argmin_41530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 716, 11), np_41529, 'argmin')
    # Calling argmin(args, kwargs) (line 716)
    argmin_call_result_41533 = invoke(stypy.reporting.localization.Localization(__file__, 716, 11), argmin_41530, *[ds_41531], **kwargs_41532)
    
    # Assigning a type to the variable 'imin' (line 716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 4), 'imin', argmin_call_result_41533)
    
    # Assigning a Attribute to a Name (line 718):
    
    # Assigning a Attribute to a Name (line 718):
    # Getting the type of 'np' (line 718)
    np_41534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 11), 'np')
    # Obtaining the member 'inf' of a type (line 718)
    inf_41535 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 11), np_41534, 'inf')
    # Assigning a type to the variable 'dmin' (line 718)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 4), 'dmin', inf_41535)
    
    # Assigning a Name to a Name (line 719):
    
    # Assigning a Name to a Name (line 719):
    # Getting the type of 'None' (line 719)
    None_41536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 719, 12), 'None')
    # Assigning a type to the variable 'xcmin' (line 719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 719, 4), 'xcmin', None_41536)
    
    # Assigning a Tuple to a Name (line 720):
    
    # Assigning a Tuple to a Name (line 720):
    
    # Obtaining an instance of the builtin type 'tuple' (line 720)
    tuple_41537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 720, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 720)
    # Adding element type (line 720)
    # Getting the type of 'None' (line 720)
    None_41538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 14), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 720, 14), tuple_41537, None_41538)
    # Adding element type (line 720)
    # Getting the type of 'None' (line 720)
    None_41539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 720, 20), 'None')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 720, 14), tuple_41537, None_41539)
    
    # Assigning a type to the variable 'legmin' (line 720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 720, 4), 'legmin', tuple_41537)
    
    # Assigning a Call to a Name (line 722):
    
    # Assigning a Call to a Name (line 722):
    
    # Call to is_closed_polygon(...): (line 722)
    # Processing the call arguments (line 722)
    # Getting the type of 'lc' (line 722)
    lc_41542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 36), 'lc', False)
    # Processing the call keyword arguments (line 722)
    kwargs_41543 = {}
    # Getting the type of 'mlab' (line 722)
    mlab_41540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 13), 'mlab', False)
    # Obtaining the member 'is_closed_polygon' of a type (line 722)
    is_closed_polygon_41541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 722, 13), mlab_41540, 'is_closed_polygon')
    # Calling is_closed_polygon(args, kwargs) (line 722)
    is_closed_polygon_call_result_41544 = invoke(stypy.reporting.localization.Localization(__file__, 722, 13), is_closed_polygon_41541, *[lc_41542], **kwargs_41543)
    
    # Assigning a type to the variable 'closed' (line 722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 722, 4), 'closed', is_closed_polygon_call_result_41544)
    
    # Assigning a List to a Name (line 725):
    
    # Assigning a List to a Name (line 725):
    
    # Obtaining an instance of the builtin type 'list' (line 725)
    list_41545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 725)
    
    # Assigning a type to the variable 'legs' (line 725)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 725, 4), 'legs', list_41545)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'imin' (line 726)
    imin_41546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 7), 'imin')
    int_41547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 14), 'int')
    # Applying the binary operator '>' (line 726)
    result_gt_41548 = python_operator(stypy.reporting.localization.Localization(__file__, 726, 7), '>', imin_41546, int_41547)
    
    # Getting the type of 'closed' (line 726)
    closed_41549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 19), 'closed')
    # Applying the binary operator 'or' (line 726)
    result_or_keyword_41550 = python_operator(stypy.reporting.localization.Localization(__file__, 726, 7), 'or', result_gt_41548, closed_41549)
    
    # Testing the type of an if condition (line 726)
    if_condition_41551 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 726, 4), result_or_keyword_41550)
    # Assigning a type to the variable 'if_condition_41551' (line 726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 4), 'if_condition_41551', if_condition_41551)
    # SSA begins for if statement (line 726)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 727)
    # Processing the call arguments (line 727)
    
    # Obtaining an instance of the builtin type 'tuple' (line 727)
    tuple_41554 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 727)
    # Adding element type (line 727)
    # Getting the type of 'imin' (line 727)
    imin_41555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 22), 'imin', False)
    int_41556 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 27), 'int')
    # Applying the binary operator '-' (line 727)
    result_sub_41557 = python_operator(stypy.reporting.localization.Localization(__file__, 727, 22), '-', imin_41555, int_41556)
    
    
    # Call to len(...): (line 727)
    # Processing the call arguments (line 727)
    # Getting the type of 'lc' (line 727)
    lc_41559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 36), 'lc', False)
    # Processing the call keyword arguments (line 727)
    kwargs_41560 = {}
    # Getting the type of 'len' (line 727)
    len_41558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 32), 'len', False)
    # Calling len(args, kwargs) (line 727)
    len_call_result_41561 = invoke(stypy.reporting.localization.Localization(__file__, 727, 32), len_41558, *[lc_41559], **kwargs_41560)
    
    # Applying the binary operator '%' (line 727)
    result_mod_41562 = python_operator(stypy.reporting.localization.Localization(__file__, 727, 21), '%', result_sub_41557, len_call_result_41561)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 21), tuple_41554, result_mod_41562)
    # Adding element type (line 727)
    # Getting the type of 'imin' (line 727)
    imin_41563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 41), 'imin', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 727, 21), tuple_41554, imin_41563)
    
    # Processing the call keyword arguments (line 727)
    kwargs_41564 = {}
    # Getting the type of 'legs' (line 727)
    legs_41552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 727, 8), 'legs', False)
    # Obtaining the member 'append' of a type (line 727)
    append_41553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 727, 8), legs_41552, 'append')
    # Calling append(args, kwargs) (line 727)
    append_call_result_41565 = invoke(stypy.reporting.localization.Localization(__file__, 727, 8), append_41553, *[tuple_41554], **kwargs_41564)
    
    # SSA join for if statement (line 726)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'imin' (line 728)
    imin_41566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 7), 'imin')
    
    # Call to len(...): (line 728)
    # Processing the call arguments (line 728)
    # Getting the type of 'lc' (line 728)
    lc_41568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 18), 'lc', False)
    # Processing the call keyword arguments (line 728)
    kwargs_41569 = {}
    # Getting the type of 'len' (line 728)
    len_41567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 14), 'len', False)
    # Calling len(args, kwargs) (line 728)
    len_call_result_41570 = invoke(stypy.reporting.localization.Localization(__file__, 728, 14), len_41567, *[lc_41568], **kwargs_41569)
    
    int_41571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 728, 24), 'int')
    # Applying the binary operator '-' (line 728)
    result_sub_41572 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 14), '-', len_call_result_41570, int_41571)
    
    # Applying the binary operator '<' (line 728)
    result_lt_41573 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 7), '<', imin_41566, result_sub_41572)
    
    # Getting the type of 'closed' (line 728)
    closed_41574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 29), 'closed')
    # Applying the binary operator 'or' (line 728)
    result_or_keyword_41575 = python_operator(stypy.reporting.localization.Localization(__file__, 728, 7), 'or', result_lt_41573, closed_41574)
    
    # Testing the type of an if condition (line 728)
    if_condition_41576 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 728, 4), result_or_keyword_41575)
    # Assigning a type to the variable 'if_condition_41576' (line 728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 728, 4), 'if_condition_41576', if_condition_41576)
    # SSA begins for if statement (line 728)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 729)
    # Processing the call arguments (line 729)
    
    # Obtaining an instance of the builtin type 'tuple' (line 729)
    tuple_41579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 729)
    # Adding element type (line 729)
    # Getting the type of 'imin' (line 729)
    imin_41580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 21), 'imin', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 729, 21), tuple_41579, imin_41580)
    # Adding element type (line 729)
    # Getting the type of 'imin' (line 729)
    imin_41581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 28), 'imin', False)
    int_41582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 729, 33), 'int')
    # Applying the binary operator '+' (line 729)
    result_add_41583 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 28), '+', imin_41581, int_41582)
    
    
    # Call to len(...): (line 729)
    # Processing the call arguments (line 729)
    # Getting the type of 'lc' (line 729)
    lc_41585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 42), 'lc', False)
    # Processing the call keyword arguments (line 729)
    kwargs_41586 = {}
    # Getting the type of 'len' (line 729)
    len_41584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 38), 'len', False)
    # Calling len(args, kwargs) (line 729)
    len_call_result_41587 = invoke(stypy.reporting.localization.Localization(__file__, 729, 38), len_41584, *[lc_41585], **kwargs_41586)
    
    # Applying the binary operator '%' (line 729)
    result_mod_41588 = python_operator(stypy.reporting.localization.Localization(__file__, 729, 27), '%', result_add_41583, len_call_result_41587)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 729, 21), tuple_41579, result_mod_41588)
    
    # Processing the call keyword arguments (line 729)
    kwargs_41589 = {}
    # Getting the type of 'legs' (line 729)
    legs_41577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 729, 8), 'legs', False)
    # Obtaining the member 'append' of a type (line 729)
    append_41578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 729, 8), legs_41577, 'append')
    # Calling append(args, kwargs) (line 729)
    append_call_result_41590 = invoke(stypy.reporting.localization.Localization(__file__, 729, 8), append_41578, *[tuple_41579], **kwargs_41589)
    
    # SSA join for if statement (line 728)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'legs' (line 731)
    legs_41591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 15), 'legs')
    # Testing the type of a for loop iterable (line 731)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 731, 4), legs_41591)
    # Getting the type of the for loop variable (line 731)
    for_loop_var_41592 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 731, 4), legs_41591)
    # Assigning a type to the variable 'leg' (line 731)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 4), 'leg', for_loop_var_41592)
    # SSA begins for a for statement (line 731)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Tuple (line 732):
    
    # Assigning a Call to a Name:
    
    # Call to _find_closest_point_on_leg(...): (line 732)
    # Processing the call arguments (line 732)
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_41594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 50), 'int')
    # Getting the type of 'leg' (line 732)
    leg_41595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 46), 'leg', False)
    # Obtaining the member '__getitem__' of a type (line 732)
    getitem___41596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 46), leg_41595, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 732)
    subscript_call_result_41597 = invoke(stypy.reporting.localization.Localization(__file__, 732, 46), getitem___41596, int_41594)
    
    # Getting the type of 'lc' (line 732)
    lc_41598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 43), 'lc', False)
    # Obtaining the member '__getitem__' of a type (line 732)
    getitem___41599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 43), lc_41598, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 732)
    subscript_call_result_41600 = invoke(stypy.reporting.localization.Localization(__file__, 732, 43), getitem___41599, subscript_call_result_41597)
    
    
    # Obtaining the type of the subscript
    
    # Obtaining the type of the subscript
    int_41601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 62), 'int')
    # Getting the type of 'leg' (line 732)
    leg_41602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 58), 'leg', False)
    # Obtaining the member '__getitem__' of a type (line 732)
    getitem___41603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 58), leg_41602, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 732)
    subscript_call_result_41604 = invoke(stypy.reporting.localization.Localization(__file__, 732, 58), getitem___41603, int_41601)
    
    # Getting the type of 'lc' (line 732)
    lc_41605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 55), 'lc', False)
    # Obtaining the member '__getitem__' of a type (line 732)
    getitem___41606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 55), lc_41605, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 732)
    subscript_call_result_41607 = invoke(stypy.reporting.localization.Localization(__file__, 732, 55), getitem___41606, subscript_call_result_41604)
    
    # Getting the type of 'point' (line 732)
    point_41608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 67), 'point', False)
    # Processing the call keyword arguments (line 732)
    kwargs_41609 = {}
    # Getting the type of '_find_closest_point_on_leg' (line 732)
    _find_closest_point_on_leg_41593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 16), '_find_closest_point_on_leg', False)
    # Calling _find_closest_point_on_leg(args, kwargs) (line 732)
    _find_closest_point_on_leg_call_result_41610 = invoke(stypy.reporting.localization.Localization(__file__, 732, 16), _find_closest_point_on_leg_41593, *[subscript_call_result_41600, subscript_call_result_41607, point_41608], **kwargs_41609)
    
    # Assigning a type to the variable 'call_assignment_39333' (line 732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 8), 'call_assignment_39333', _find_closest_point_on_leg_call_result_41610)
    
    # Assigning a Call to a Name (line 732):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_41613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 8), 'int')
    # Processing the call keyword arguments
    kwargs_41614 = {}
    # Getting the type of 'call_assignment_39333' (line 732)
    call_assignment_39333_41611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 8), 'call_assignment_39333', False)
    # Obtaining the member '__getitem__' of a type (line 732)
    getitem___41612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 8), call_assignment_39333_41611, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_41615 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___41612, *[int_41613], **kwargs_41614)
    
    # Assigning a type to the variable 'call_assignment_39334' (line 732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 8), 'call_assignment_39334', getitem___call_result_41615)
    
    # Assigning a Name to a Name (line 732):
    # Getting the type of 'call_assignment_39334' (line 732)
    call_assignment_39334_41616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 8), 'call_assignment_39334')
    # Assigning a type to the variable 'd' (line 732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 8), 'd', call_assignment_39334_41616)
    
    # Assigning a Call to a Name (line 732):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_41619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 732, 8), 'int')
    # Processing the call keyword arguments
    kwargs_41620 = {}
    # Getting the type of 'call_assignment_39333' (line 732)
    call_assignment_39333_41617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 8), 'call_assignment_39333', False)
    # Obtaining the member '__getitem__' of a type (line 732)
    getitem___41618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 732, 8), call_assignment_39333_41617, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_41621 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___41618, *[int_41619], **kwargs_41620)
    
    # Assigning a type to the variable 'call_assignment_39335' (line 732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 8), 'call_assignment_39335', getitem___call_result_41621)
    
    # Assigning a Name to a Name (line 732):
    # Getting the type of 'call_assignment_39335' (line 732)
    call_assignment_39335_41622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 732, 8), 'call_assignment_39335')
    # Assigning a type to the variable 'xc' (line 732)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 732, 11), 'xc', call_assignment_39335_41622)
    
    
    # Getting the type of 'd' (line 733)
    d_41623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 11), 'd')
    # Getting the type of 'dmin' (line 733)
    dmin_41624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 15), 'dmin')
    # Applying the binary operator '<' (line 733)
    result_lt_41625 = python_operator(stypy.reporting.localization.Localization(__file__, 733, 11), '<', d_41623, dmin_41624)
    
    # Testing the type of an if condition (line 733)
    if_condition_41626 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 733, 8), result_lt_41625)
    # Assigning a type to the variable 'if_condition_41626' (line 733)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 8), 'if_condition_41626', if_condition_41626)
    # SSA begins for if statement (line 733)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 734):
    
    # Assigning a Name to a Name (line 734):
    # Getting the type of 'd' (line 734)
    d_41627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 734, 19), 'd')
    # Assigning a type to the variable 'dmin' (line 734)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 734, 12), 'dmin', d_41627)
    
    # Assigning a Name to a Name (line 735):
    
    # Assigning a Name to a Name (line 735):
    # Getting the type of 'xc' (line 735)
    xc_41628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 735, 20), 'xc')
    # Assigning a type to the variable 'xcmin' (line 735)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 735, 12), 'xcmin', xc_41628)
    
    # Assigning a Name to a Name (line 736):
    
    # Assigning a Name to a Name (line 736):
    # Getting the type of 'leg' (line 736)
    leg_41629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 21), 'leg')
    # Assigning a type to the variable 'legmin' (line 736)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 12), 'legmin', leg_41629)
    # SSA join for if statement (line 733)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 738)
    tuple_41630 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 738, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 738)
    # Adding element type (line 738)
    # Getting the type of 'dmin' (line 738)
    dmin_41631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 12), 'dmin')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 738, 12), tuple_41630, dmin_41631)
    # Adding element type (line 738)
    # Getting the type of 'xcmin' (line 738)
    xcmin_41632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 18), 'xcmin')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 738, 12), tuple_41630, xcmin_41632)
    # Adding element type (line 738)
    # Getting the type of 'legmin' (line 738)
    legmin_41633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 25), 'legmin')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 738, 12), tuple_41630, legmin_41633)
    
    # Assigning a type to the variable 'stypy_return_type' (line 738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 4), 'stypy_return_type', tuple_41630)
    
    # ################# End of '_find_closest_point_on_path(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_find_closest_point_on_path' in the type store
    # Getting the type of 'stypy_return_type' (line 708)
    stypy_return_type_41634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_41634)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_find_closest_point_on_path'
    return stypy_return_type_41634

# Assigning a type to the variable '_find_closest_point_on_path' (line 708)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 708, 0), '_find_closest_point_on_path', _find_closest_point_on_path)
# Declaration of the 'ContourSet' class
# Getting the type of 'cm' (line 741)
cm_41635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 17), 'cm')
# Obtaining the member 'ScalarMappable' of a type (line 741)
ScalarMappable_41636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 741, 17), cm_41635, 'ScalarMappable')
# Getting the type of 'ContourLabeler' (line 741)
ContourLabeler_41637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 36), 'ContourLabeler')

class ContourSet(ScalarMappable_41636, ContourLabeler_41637, ):
    unicode_41638 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 760, (-1)), 'unicode', u'\n    Store a set of contour lines or filled regions.\n\n    User-callable method: clabel\n\n    Useful attributes:\n      ax:\n        The axes object in which the contours are drawn\n\n      collections:\n        a silent_list of LineCollections or PolyCollections\n\n      levels:\n        contour levels\n\n      layers:\n        same as levels for line contours; half-way between\n        levels for filled contours.  See :meth:`_process_colors`.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 762, 4, False)
        # Assigning a type to the variable 'self' (line 763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet.__init__', ['ax'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_41639 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 801, (-1)), 'unicode', u"\n        Draw contour lines or filled regions, depending on\n        whether keyword arg 'filled' is *False* (default) or *True*.\n\n        The first three arguments must be:\n\n          *ax*: axes object.\n\n          *levels*: [level0, level1, ..., leveln]\n            A list of floating point numbers indicating the contour\n            levels.\n\n          *allsegs*: [level0segs, level1segs, ...]\n            List of all the polygon segments for all the *levels*.\n            For contour lines ``len(allsegs) == len(levels)``, and for\n            filled contour regions ``len(allsegs) = len(levels)-1``.\n\n            level0segs = [polygon0, polygon1, ...]\n\n            polygon0 = array_like [[x0,y0], [x1,y1], ...]\n\n          *allkinds*: *None* or [level0kinds, level1kinds, ...]\n            Optional list of all the polygon vertex kinds (code types), as\n            described and used in Path.   This is used to allow multiply-\n            connected paths such as holes within filled polygons.\n            If not *None*, len(allkinds) == len(allsegs).\n\n            level0kinds = [polygon0kinds, ...]\n\n            polygon0kinds = [vertexcode0, vertexcode1, ...]\n\n            If *allkinds* is not *None*, usually all polygons for a particular\n            contour level are grouped together so that\n\n            level0segs = [polygon0] and level0kinds = [polygon0kinds].\n\n        Keyword arguments are as described in\n        :attr:`matplotlib.contour.QuadContourSet.contour_doc`.\n        ")
        
        # Assigning a Name to a Attribute (line 802):
        
        # Assigning a Name to a Attribute (line 802):
        # Getting the type of 'ax' (line 802)
        ax_41640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 18), 'ax')
        # Getting the type of 'self' (line 802)
        self_41641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 802, 8), 'self')
        # Setting the type of the member 'ax' of a type (line 802)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 802, 8), self_41641, 'ax', ax_41640)
        
        # Assigning a Call to a Attribute (line 803):
        
        # Assigning a Call to a Attribute (line 803):
        
        # Call to pop(...): (line 803)
        # Processing the call arguments (line 803)
        unicode_41644 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 803, 33), 'unicode', u'levels')
        # Getting the type of 'None' (line 803)
        None_41645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 43), 'None', False)
        # Processing the call keyword arguments (line 803)
        kwargs_41646 = {}
        # Getting the type of 'kwargs' (line 803)
        kwargs_41642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 22), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 803)
        pop_41643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 22), kwargs_41642, 'pop')
        # Calling pop(args, kwargs) (line 803)
        pop_call_result_41647 = invoke(stypy.reporting.localization.Localization(__file__, 803, 22), pop_41643, *[unicode_41644, None_41645], **kwargs_41646)
        
        # Getting the type of 'self' (line 803)
        self_41648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 8), 'self')
        # Setting the type of the member 'levels' of a type (line 803)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 803, 8), self_41648, 'levels', pop_call_result_41647)
        
        # Assigning a Call to a Attribute (line 804):
        
        # Assigning a Call to a Attribute (line 804):
        
        # Call to pop(...): (line 804)
        # Processing the call arguments (line 804)
        unicode_41651 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 33), 'unicode', u'filled')
        # Getting the type of 'False' (line 804)
        False_41652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 43), 'False', False)
        # Processing the call keyword arguments (line 804)
        kwargs_41653 = {}
        # Getting the type of 'kwargs' (line 804)
        kwargs_41649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 22), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 804)
        pop_41650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 22), kwargs_41649, 'pop')
        # Calling pop(args, kwargs) (line 804)
        pop_call_result_41654 = invoke(stypy.reporting.localization.Localization(__file__, 804, 22), pop_41650, *[unicode_41651, False_41652], **kwargs_41653)
        
        # Getting the type of 'self' (line 804)
        self_41655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 804, 8), 'self')
        # Setting the type of the member 'filled' of a type (line 804)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 804, 8), self_41655, 'filled', pop_call_result_41654)
        
        # Assigning a Call to a Attribute (line 805):
        
        # Assigning a Call to a Attribute (line 805):
        
        # Call to pop(...): (line 805)
        # Processing the call arguments (line 805)
        unicode_41658 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, 37), 'unicode', u'linewidths')
        # Getting the type of 'None' (line 805)
        None_41659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 51), 'None', False)
        # Processing the call keyword arguments (line 805)
        kwargs_41660 = {}
        # Getting the type of 'kwargs' (line 805)
        kwargs_41656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 26), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 805)
        pop_41657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 26), kwargs_41656, 'pop')
        # Calling pop(args, kwargs) (line 805)
        pop_call_result_41661 = invoke(stypy.reporting.localization.Localization(__file__, 805, 26), pop_41657, *[unicode_41658, None_41659], **kwargs_41660)
        
        # Getting the type of 'self' (line 805)
        self_41662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 8), 'self')
        # Setting the type of the member 'linewidths' of a type (line 805)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 8), self_41662, 'linewidths', pop_call_result_41661)
        
        # Assigning a Call to a Attribute (line 806):
        
        # Assigning a Call to a Attribute (line 806):
        
        # Call to pop(...): (line 806)
        # Processing the call arguments (line 806)
        unicode_41665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 806, 37), 'unicode', u'linestyles')
        # Getting the type of 'None' (line 806)
        None_41666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 51), 'None', False)
        # Processing the call keyword arguments (line 806)
        kwargs_41667 = {}
        # Getting the type of 'kwargs' (line 806)
        kwargs_41663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 26), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 806)
        pop_41664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 26), kwargs_41663, 'pop')
        # Calling pop(args, kwargs) (line 806)
        pop_call_result_41668 = invoke(stypy.reporting.localization.Localization(__file__, 806, 26), pop_41664, *[unicode_41665, None_41666], **kwargs_41667)
        
        # Getting the type of 'self' (line 806)
        self_41669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 8), 'self')
        # Setting the type of the member 'linestyles' of a type (line 806)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 8), self_41669, 'linestyles', pop_call_result_41668)
        
        # Assigning a Call to a Attribute (line 808):
        
        # Assigning a Call to a Attribute (line 808):
        
        # Call to pop(...): (line 808)
        # Processing the call arguments (line 808)
        unicode_41672 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 34), 'unicode', u'hatches')
        
        # Obtaining an instance of the builtin type 'list' (line 808)
        list_41673 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 808, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 808)
        # Adding element type (line 808)
        # Getting the type of 'None' (line 808)
        None_41674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 46), 'None', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 808, 45), list_41673, None_41674)
        
        # Processing the call keyword arguments (line 808)
        kwargs_41675 = {}
        # Getting the type of 'kwargs' (line 808)
        kwargs_41670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 23), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 808)
        pop_41671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 23), kwargs_41670, 'pop')
        # Calling pop(args, kwargs) (line 808)
        pop_call_result_41676 = invoke(stypy.reporting.localization.Localization(__file__, 808, 23), pop_41671, *[unicode_41672, list_41673], **kwargs_41675)
        
        # Getting the type of 'self' (line 808)
        self_41677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 8), 'self')
        # Setting the type of the member 'hatches' of a type (line 808)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 8), self_41677, 'hatches', pop_call_result_41676)
        
        # Assigning a Call to a Attribute (line 810):
        
        # Assigning a Call to a Attribute (line 810):
        
        # Call to pop(...): (line 810)
        # Processing the call arguments (line 810)
        unicode_41680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, 32), 'unicode', u'alpha')
        # Getting the type of 'None' (line 810)
        None_41681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 41), 'None', False)
        # Processing the call keyword arguments (line 810)
        kwargs_41682 = {}
        # Getting the type of 'kwargs' (line 810)
        kwargs_41678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 21), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 810)
        pop_41679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 810, 21), kwargs_41678, 'pop')
        # Calling pop(args, kwargs) (line 810)
        pop_call_result_41683 = invoke(stypy.reporting.localization.Localization(__file__, 810, 21), pop_41679, *[unicode_41680, None_41681], **kwargs_41682)
        
        # Getting the type of 'self' (line 810)
        self_41684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 8), 'self')
        # Setting the type of the member 'alpha' of a type (line 810)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 810, 8), self_41684, 'alpha', pop_call_result_41683)
        
        # Assigning a Call to a Attribute (line 811):
        
        # Assigning a Call to a Attribute (line 811):
        
        # Call to pop(...): (line 811)
        # Processing the call arguments (line 811)
        unicode_41687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 33), 'unicode', u'origin')
        # Getting the type of 'None' (line 811)
        None_41688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 43), 'None', False)
        # Processing the call keyword arguments (line 811)
        kwargs_41689 = {}
        # Getting the type of 'kwargs' (line 811)
        kwargs_41685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 22), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 811)
        pop_41686 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 22), kwargs_41685, 'pop')
        # Calling pop(args, kwargs) (line 811)
        pop_call_result_41690 = invoke(stypy.reporting.localization.Localization(__file__, 811, 22), pop_41686, *[unicode_41687, None_41688], **kwargs_41689)
        
        # Getting the type of 'self' (line 811)
        self_41691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'self')
        # Setting the type of the member 'origin' of a type (line 811)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 811, 8), self_41691, 'origin', pop_call_result_41690)
        
        # Assigning a Call to a Attribute (line 812):
        
        # Assigning a Call to a Attribute (line 812):
        
        # Call to pop(...): (line 812)
        # Processing the call arguments (line 812)
        unicode_41694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 812, 33), 'unicode', u'extent')
        # Getting the type of 'None' (line 812)
        None_41695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 43), 'None', False)
        # Processing the call keyword arguments (line 812)
        kwargs_41696 = {}
        # Getting the type of 'kwargs' (line 812)
        kwargs_41692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 22), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 812)
        pop_41693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 22), kwargs_41692, 'pop')
        # Calling pop(args, kwargs) (line 812)
        pop_call_result_41697 = invoke(stypy.reporting.localization.Localization(__file__, 812, 22), pop_41693, *[unicode_41694, None_41695], **kwargs_41696)
        
        # Getting the type of 'self' (line 812)
        self_41698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 8), 'self')
        # Setting the type of the member 'extent' of a type (line 812)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 8), self_41698, 'extent', pop_call_result_41697)
        
        # Assigning a Call to a Name (line 813):
        
        # Assigning a Call to a Name (line 813):
        
        # Call to pop(...): (line 813)
        # Processing the call arguments (line 813)
        unicode_41701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 26), 'unicode', u'cmap')
        # Getting the type of 'None' (line 813)
        None_41702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 34), 'None', False)
        # Processing the call keyword arguments (line 813)
        kwargs_41703 = {}
        # Getting the type of 'kwargs' (line 813)
        kwargs_41699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 15), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 813)
        pop_41700 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 813, 15), kwargs_41699, 'pop')
        # Calling pop(args, kwargs) (line 813)
        pop_call_result_41704 = invoke(stypy.reporting.localization.Localization(__file__, 813, 15), pop_41700, *[unicode_41701, None_41702], **kwargs_41703)
        
        # Assigning a type to the variable 'cmap' (line 813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 813, 8), 'cmap', pop_call_result_41704)
        
        # Assigning a Call to a Attribute (line 814):
        
        # Assigning a Call to a Attribute (line 814):
        
        # Call to pop(...): (line 814)
        # Processing the call arguments (line 814)
        unicode_41707 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 814, 33), 'unicode', u'colors')
        # Getting the type of 'None' (line 814)
        None_41708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 43), 'None', False)
        # Processing the call keyword arguments (line 814)
        kwargs_41709 = {}
        # Getting the type of 'kwargs' (line 814)
        kwargs_41705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 22), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 814)
        pop_41706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 22), kwargs_41705, 'pop')
        # Calling pop(args, kwargs) (line 814)
        pop_call_result_41710 = invoke(stypy.reporting.localization.Localization(__file__, 814, 22), pop_41706, *[unicode_41707, None_41708], **kwargs_41709)
        
        # Getting the type of 'self' (line 814)
        self_41711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 814, 8), 'self')
        # Setting the type of the member 'colors' of a type (line 814)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 814, 8), self_41711, 'colors', pop_call_result_41710)
        
        # Assigning a Call to a Name (line 815):
        
        # Assigning a Call to a Name (line 815):
        
        # Call to pop(...): (line 815)
        # Processing the call arguments (line 815)
        unicode_41714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 815, 26), 'unicode', u'norm')
        # Getting the type of 'None' (line 815)
        None_41715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 34), 'None', False)
        # Processing the call keyword arguments (line 815)
        kwargs_41716 = {}
        # Getting the type of 'kwargs' (line 815)
        kwargs_41712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 15), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 815)
        pop_41713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 815, 15), kwargs_41712, 'pop')
        # Calling pop(args, kwargs) (line 815)
        pop_call_result_41717 = invoke(stypy.reporting.localization.Localization(__file__, 815, 15), pop_41713, *[unicode_41714, None_41715], **kwargs_41716)
        
        # Assigning a type to the variable 'norm' (line 815)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 815, 8), 'norm', pop_call_result_41717)
        
        # Assigning a Call to a Name (line 816):
        
        # Assigning a Call to a Name (line 816):
        
        # Call to pop(...): (line 816)
        # Processing the call arguments (line 816)
        unicode_41720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 816, 26), 'unicode', u'vmin')
        # Getting the type of 'None' (line 816)
        None_41721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 34), 'None', False)
        # Processing the call keyword arguments (line 816)
        kwargs_41722 = {}
        # Getting the type of 'kwargs' (line 816)
        kwargs_41718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 816, 15), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 816)
        pop_41719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 816, 15), kwargs_41718, 'pop')
        # Calling pop(args, kwargs) (line 816)
        pop_call_result_41723 = invoke(stypy.reporting.localization.Localization(__file__, 816, 15), pop_41719, *[unicode_41720, None_41721], **kwargs_41722)
        
        # Assigning a type to the variable 'vmin' (line 816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 816, 8), 'vmin', pop_call_result_41723)
        
        # Assigning a Call to a Name (line 817):
        
        # Assigning a Call to a Name (line 817):
        
        # Call to pop(...): (line 817)
        # Processing the call arguments (line 817)
        unicode_41726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, 26), 'unicode', u'vmax')
        # Getting the type of 'None' (line 817)
        None_41727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 34), 'None', False)
        # Processing the call keyword arguments (line 817)
        kwargs_41728 = {}
        # Getting the type of 'kwargs' (line 817)
        kwargs_41724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 15), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 817)
        pop_41725 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 15), kwargs_41724, 'pop')
        # Calling pop(args, kwargs) (line 817)
        pop_call_result_41729 = invoke(stypy.reporting.localization.Localization(__file__, 817, 15), pop_41725, *[unicode_41726, None_41727], **kwargs_41728)
        
        # Assigning a type to the variable 'vmax' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'vmax', pop_call_result_41729)
        
        # Assigning a Call to a Attribute (line 818):
        
        # Assigning a Call to a Attribute (line 818):
        
        # Call to pop(...): (line 818)
        # Processing the call arguments (line 818)
        unicode_41732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 33), 'unicode', u'extend')
        unicode_41733 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 43), 'unicode', u'neither')
        # Processing the call keyword arguments (line 818)
        kwargs_41734 = {}
        # Getting the type of 'kwargs' (line 818)
        kwargs_41730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 22), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 818)
        pop_41731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 22), kwargs_41730, 'pop')
        # Calling pop(args, kwargs) (line 818)
        pop_call_result_41735 = invoke(stypy.reporting.localization.Localization(__file__, 818, 22), pop_41731, *[unicode_41732, unicode_41733], **kwargs_41734)
        
        # Getting the type of 'self' (line 818)
        self_41736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'self')
        # Setting the type of the member 'extend' of a type (line 818)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 8), self_41736, 'extend', pop_call_result_41735)
        
        # Assigning a Call to a Attribute (line 819):
        
        # Assigning a Call to a Attribute (line 819):
        
        # Call to pop(...): (line 819)
        # Processing the call arguments (line 819)
        unicode_41739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 819, 38), 'unicode', u'antialiased')
        # Getting the type of 'None' (line 819)
        None_41740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 53), 'None', False)
        # Processing the call keyword arguments (line 819)
        kwargs_41741 = {}
        # Getting the type of 'kwargs' (line 819)
        kwargs_41737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 27), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 819)
        pop_41738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 27), kwargs_41737, 'pop')
        # Calling pop(args, kwargs) (line 819)
        pop_call_result_41742 = invoke(stypy.reporting.localization.Localization(__file__, 819, 27), pop_41738, *[unicode_41739, None_41740], **kwargs_41741)
        
        # Getting the type of 'self' (line 819)
        self_41743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 8), 'self')
        # Setting the type of the member 'antialiased' of a type (line 819)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 819, 8), self_41743, 'antialiased', pop_call_result_41742)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 820)
        self_41744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 11), 'self')
        # Obtaining the member 'antialiased' of a type (line 820)
        antialiased_41745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 11), self_41744, 'antialiased')
        # Getting the type of 'None' (line 820)
        None_41746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 31), 'None')
        # Applying the binary operator 'is' (line 820)
        result_is__41747 = python_operator(stypy.reporting.localization.Localization(__file__, 820, 11), 'is', antialiased_41745, None_41746)
        
        # Getting the type of 'self' (line 820)
        self_41748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 40), 'self')
        # Obtaining the member 'filled' of a type (line 820)
        filled_41749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 40), self_41748, 'filled')
        # Applying the binary operator 'and' (line 820)
        result_and_keyword_41750 = python_operator(stypy.reporting.localization.Localization(__file__, 820, 11), 'and', result_is__41747, filled_41749)
        
        # Testing the type of an if condition (line 820)
        if_condition_41751 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 820, 8), result_and_keyword_41750)
        # Assigning a type to the variable 'if_condition_41751' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'if_condition_41751', if_condition_41751)
        # SSA begins for if statement (line 820)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 821):
        
        # Assigning a Name to a Attribute (line 821):
        # Getting the type of 'False' (line 821)
        False_41752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 31), 'False')
        # Getting the type of 'self' (line 821)
        self_41753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 12), 'self')
        # Setting the type of the member 'antialiased' of a type (line 821)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 821, 12), self_41753, 'antialiased', False_41752)
        # SSA join for if statement (line 820)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 827):
        
        # Assigning a Call to a Attribute (line 827):
        
        # Call to pop(...): (line 827)
        # Processing the call arguments (line 827)
        unicode_41756 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 33), 'unicode', u'nchunk')
        int_41757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 43), 'int')
        # Processing the call keyword arguments (line 827)
        kwargs_41758 = {}
        # Getting the type of 'kwargs' (line 827)
        kwargs_41754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 22), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 827)
        pop_41755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 22), kwargs_41754, 'pop')
        # Calling pop(args, kwargs) (line 827)
        pop_call_result_41759 = invoke(stypy.reporting.localization.Localization(__file__, 827, 22), pop_41755, *[unicode_41756, int_41757], **kwargs_41758)
        
        # Getting the type of 'self' (line 827)
        self_41760 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 8), 'self')
        # Setting the type of the member 'nchunk' of a type (line 827)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 8), self_41760, 'nchunk', pop_call_result_41759)
        
        # Assigning a Call to a Attribute (line 828):
        
        # Assigning a Call to a Attribute (line 828):
        
        # Call to pop(...): (line 828)
        # Processing the call arguments (line 828)
        unicode_41763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 828, 34), 'unicode', u'locator')
        # Getting the type of 'None' (line 828)
        None_41764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 45), 'None', False)
        # Processing the call keyword arguments (line 828)
        kwargs_41765 = {}
        # Getting the type of 'kwargs' (line 828)
        kwargs_41761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 23), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 828)
        pop_41762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 23), kwargs_41761, 'pop')
        # Calling pop(args, kwargs) (line 828)
        pop_call_result_41766 = invoke(stypy.reporting.localization.Localization(__file__, 828, 23), pop_41762, *[unicode_41763, None_41764], **kwargs_41765)
        
        # Getting the type of 'self' (line 828)
        self_41767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 8), 'self')
        # Setting the type of the member 'locator' of a type (line 828)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 828, 8), self_41767, 'locator', pop_call_result_41766)
        
        
        # Evaluating a boolean operation
        
        # Call to isinstance(...): (line 829)
        # Processing the call arguments (line 829)
        # Getting the type of 'norm' (line 829)
        norm_41769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 23), 'norm', False)
        # Getting the type of 'colors' (line 829)
        colors_41770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 29), 'colors', False)
        # Obtaining the member 'LogNorm' of a type (line 829)
        LogNorm_41771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 829, 29), colors_41770, 'LogNorm')
        # Processing the call keyword arguments (line 829)
        kwargs_41772 = {}
        # Getting the type of 'isinstance' (line 829)
        isinstance_41768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 829, 12), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 829)
        isinstance_call_result_41773 = invoke(stypy.reporting.localization.Localization(__file__, 829, 12), isinstance_41768, *[norm_41769, LogNorm_41771], **kwargs_41772)
        
        
        # Call to isinstance(...): (line 830)
        # Processing the call arguments (line 830)
        # Getting the type of 'self' (line 830)
        self_41775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 30), 'self', False)
        # Obtaining the member 'locator' of a type (line 830)
        locator_41776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 30), self_41775, 'locator')
        # Getting the type of 'ticker' (line 830)
        ticker_41777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 44), 'ticker', False)
        # Obtaining the member 'LogLocator' of a type (line 830)
        LogLocator_41778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 44), ticker_41777, 'LogLocator')
        # Processing the call keyword arguments (line 830)
        kwargs_41779 = {}
        # Getting the type of 'isinstance' (line 830)
        isinstance_41774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 830)
        isinstance_call_result_41780 = invoke(stypy.reporting.localization.Localization(__file__, 830, 19), isinstance_41774, *[locator_41776, LogLocator_41778], **kwargs_41779)
        
        # Applying the binary operator 'or' (line 829)
        result_or_keyword_41781 = python_operator(stypy.reporting.localization.Localization(__file__, 829, 12), 'or', isinstance_call_result_41773, isinstance_call_result_41780)
        
        # Testing the type of an if condition (line 829)
        if_condition_41782 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 829, 8), result_or_keyword_41781)
        # Assigning a type to the variable 'if_condition_41782' (line 829)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 829, 8), 'if_condition_41782', if_condition_41782)
        # SSA begins for if statement (line 829)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 831):
        
        # Assigning a Name to a Attribute (line 831):
        # Getting the type of 'True' (line 831)
        True_41783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 28), 'True')
        # Getting the type of 'self' (line 831)
        self_41784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 12), 'self')
        # Setting the type of the member 'logscale' of a type (line 831)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 12), self_41784, 'logscale', True_41783)
        
        # Type idiom detected: calculating its left and rigth part (line 832)
        # Getting the type of 'norm' (line 832)
        norm_41785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 15), 'norm')
        # Getting the type of 'None' (line 832)
        None_41786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 832, 23), 'None')
        
        (may_be_41787, more_types_in_union_41788) = may_be_none(norm_41785, None_41786)

        if may_be_41787:

            if more_types_in_union_41788:
                # Runtime conditional SSA (line 832)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 833):
            
            # Assigning a Call to a Name (line 833):
            
            # Call to LogNorm(...): (line 833)
            # Processing the call keyword arguments (line 833)
            kwargs_41791 = {}
            # Getting the type of 'colors' (line 833)
            colors_41789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 23), 'colors', False)
            # Obtaining the member 'LogNorm' of a type (line 833)
            LogNorm_41790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 833, 23), colors_41789, 'LogNorm')
            # Calling LogNorm(args, kwargs) (line 833)
            LogNorm_call_result_41792 = invoke(stypy.reporting.localization.Localization(__file__, 833, 23), LogNorm_41790, *[], **kwargs_41791)
            
            # Assigning a type to the variable 'norm' (line 833)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 16), 'norm', LogNorm_call_result_41792)

            if more_types_in_union_41788:
                # SSA join for if statement (line 832)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 834)
        self_41793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 15), 'self')
        # Obtaining the member 'extend' of a type (line 834)
        extend_41794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 834, 15), self_41793, 'extend')
        unicode_41795 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 834, 34), 'unicode', u'neither')
        # Applying the binary operator 'isnot' (line 834)
        result_is_not_41796 = python_operator(stypy.reporting.localization.Localization(__file__, 834, 15), 'isnot', extend_41794, unicode_41795)
        
        # Testing the type of an if condition (line 834)
        if_condition_41797 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 834, 12), result_is_not_41796)
        # Assigning a type to the variable 'if_condition_41797' (line 834)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 12), 'if_condition_41797', if_condition_41797)
        # SSA begins for if statement (line 834)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 835)
        # Processing the call arguments (line 835)
        unicode_41799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 835, 33), 'unicode', u'extend kwarg does not work yet with log  scale')
        # Processing the call keyword arguments (line 835)
        kwargs_41800 = {}
        # Getting the type of 'ValueError' (line 835)
        ValueError_41798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 835, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 835)
        ValueError_call_result_41801 = invoke(stypy.reporting.localization.Localization(__file__, 835, 22), ValueError_41798, *[unicode_41799], **kwargs_41800)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 835, 16), ValueError_call_result_41801, 'raise parameter', BaseException)
        # SSA join for if statement (line 834)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 829)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 838):
        
        # Assigning a Name to a Attribute (line 838):
        # Getting the type of 'False' (line 838)
        False_41802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 28), 'False')
        # Getting the type of 'self' (line 838)
        self_41803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 838, 12), 'self')
        # Setting the type of the member 'logscale' of a type (line 838)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 838, 12), self_41803, 'logscale', False_41802)
        # SSA join for if statement (line 829)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 840)
        self_41804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 11), 'self')
        # Obtaining the member 'origin' of a type (line 840)
        origin_41805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 11), self_41804, 'origin')
        
        # Obtaining an instance of the builtin type 'list' (line 840)
        list_41806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 840)
        # Adding element type (line 840)
        # Getting the type of 'None' (line 840)
        None_41807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 31), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 840, 30), list_41806, None_41807)
        # Adding element type (line 840)
        unicode_41808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 37), 'unicode', u'lower')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 840, 30), list_41806, unicode_41808)
        # Adding element type (line 840)
        unicode_41809 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 46), 'unicode', u'upper')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 840, 30), list_41806, unicode_41809)
        # Adding element type (line 840)
        unicode_41810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 55), 'unicode', u'image')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 840, 30), list_41806, unicode_41810)
        
        # Applying the binary operator 'notin' (line 840)
        result_contains_41811 = python_operator(stypy.reporting.localization.Localization(__file__, 840, 11), 'notin', origin_41805, list_41806)
        
        # Testing the type of an if condition (line 840)
        if_condition_41812 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 840, 8), result_contains_41811)
        # Assigning a type to the variable 'if_condition_41812' (line 840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 8), 'if_condition_41812', if_condition_41812)
        # SSA begins for if statement (line 840)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 841)
        # Processing the call arguments (line 841)
        unicode_41814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 841, 29), 'unicode', u"If given, *origin* must be one of [ 'lower' | 'upper' | 'image']")
        # Processing the call keyword arguments (line 841)
        kwargs_41815 = {}
        # Getting the type of 'ValueError' (line 841)
        ValueError_41813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 841)
        ValueError_call_result_41816 = invoke(stypy.reporting.localization.Localization(__file__, 841, 18), ValueError_41813, *[unicode_41814], **kwargs_41815)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 841, 12), ValueError_call_result_41816, 'raise parameter', BaseException)
        # SSA join for if statement (line 840)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 843)
        self_41817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 11), 'self')
        # Obtaining the member 'extent' of a type (line 843)
        extent_41818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 843, 11), self_41817, 'extent')
        # Getting the type of 'None' (line 843)
        None_41819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 30), 'None')
        # Applying the binary operator 'isnot' (line 843)
        result_is_not_41820 = python_operator(stypy.reporting.localization.Localization(__file__, 843, 11), 'isnot', extent_41818, None_41819)
        
        
        
        # Call to len(...): (line 843)
        # Processing the call arguments (line 843)
        # Getting the type of 'self' (line 843)
        self_41822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 43), 'self', False)
        # Obtaining the member 'extent' of a type (line 843)
        extent_41823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 843, 43), self_41822, 'extent')
        # Processing the call keyword arguments (line 843)
        kwargs_41824 = {}
        # Getting the type of 'len' (line 843)
        len_41821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 843, 39), 'len', False)
        # Calling len(args, kwargs) (line 843)
        len_call_result_41825 = invoke(stypy.reporting.localization.Localization(__file__, 843, 39), len_41821, *[extent_41823], **kwargs_41824)
        
        int_41826 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 843, 59), 'int')
        # Applying the binary operator '!=' (line 843)
        result_ne_41827 = python_operator(stypy.reporting.localization.Localization(__file__, 843, 39), '!=', len_call_result_41825, int_41826)
        
        # Applying the binary operator 'and' (line 843)
        result_and_keyword_41828 = python_operator(stypy.reporting.localization.Localization(__file__, 843, 11), 'and', result_is_not_41820, result_ne_41827)
        
        # Testing the type of an if condition (line 843)
        if_condition_41829 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 843, 8), result_and_keyword_41828)
        # Assigning a type to the variable 'if_condition_41829' (line 843)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 843, 8), 'if_condition_41829', if_condition_41829)
        # SSA begins for if statement (line 843)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 844)
        # Processing the call arguments (line 844)
        unicode_41831 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 844, 29), 'unicode', u"If given, *extent* must be '[ *None* | (x0,x1,y0,y1) ]'")
        # Processing the call keyword arguments (line 844)
        kwargs_41832 = {}
        # Getting the type of 'ValueError' (line 844)
        ValueError_41830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 844)
        ValueError_call_result_41833 = invoke(stypy.reporting.localization.Localization(__file__, 844, 18), ValueError_41830, *[unicode_41831], **kwargs_41832)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 844, 12), ValueError_call_result_41833, 'raise parameter', BaseException)
        # SSA join for if statement (line 843)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 846)
        self_41834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 11), 'self')
        # Obtaining the member 'colors' of a type (line 846)
        colors_41835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 846, 11), self_41834, 'colors')
        # Getting the type of 'None' (line 846)
        None_41836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 30), 'None')
        # Applying the binary operator 'isnot' (line 846)
        result_is_not_41837 = python_operator(stypy.reporting.localization.Localization(__file__, 846, 11), 'isnot', colors_41835, None_41836)
        
        
        # Getting the type of 'cmap' (line 846)
        cmap_41838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 39), 'cmap')
        # Getting the type of 'None' (line 846)
        None_41839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 51), 'None')
        # Applying the binary operator 'isnot' (line 846)
        result_is_not_41840 = python_operator(stypy.reporting.localization.Localization(__file__, 846, 39), 'isnot', cmap_41838, None_41839)
        
        # Applying the binary operator 'and' (line 846)
        result_and_keyword_41841 = python_operator(stypy.reporting.localization.Localization(__file__, 846, 11), 'and', result_is_not_41837, result_is_not_41840)
        
        # Testing the type of an if condition (line 846)
        if_condition_41842 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 846, 8), result_and_keyword_41841)
        # Assigning a type to the variable 'if_condition_41842' (line 846)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 8), 'if_condition_41842', if_condition_41842)
        # SSA begins for if statement (line 846)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 847)
        # Processing the call arguments (line 847)
        unicode_41844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 847, 29), 'unicode', u'Either colors or cmap must be None')
        # Processing the call keyword arguments (line 847)
        kwargs_41845 = {}
        # Getting the type of 'ValueError' (line 847)
        ValueError_41843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 847)
        ValueError_call_result_41846 = invoke(stypy.reporting.localization.Localization(__file__, 847, 18), ValueError_41843, *[unicode_41844], **kwargs_41845)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 847, 12), ValueError_call_result_41846, 'raise parameter', BaseException)
        # SSA join for if statement (line 846)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 848)
        self_41847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 11), 'self')
        # Obtaining the member 'origin' of a type (line 848)
        origin_41848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 11), self_41847, 'origin')
        unicode_41849 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 848, 26), 'unicode', u'image')
        # Applying the binary operator '==' (line 848)
        result_eq_41850 = python_operator(stypy.reporting.localization.Localization(__file__, 848, 11), '==', origin_41848, unicode_41849)
        
        # Testing the type of an if condition (line 848)
        if_condition_41851 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 848, 8), result_eq_41850)
        # Assigning a type to the variable 'if_condition_41851' (line 848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 8), 'if_condition_41851', if_condition_41851)
        # SSA begins for if statement (line 848)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Attribute (line 849):
        
        # Assigning a Subscript to a Attribute (line 849):
        
        # Obtaining the type of the subscript
        unicode_41852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 849, 39), 'unicode', u'image.origin')
        # Getting the type of 'mpl' (line 849)
        mpl_41853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 26), 'mpl')
        # Obtaining the member 'rcParams' of a type (line 849)
        rcParams_41854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 849, 26), mpl_41853, 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 849)
        getitem___41855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 849, 26), rcParams_41854, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 849)
        subscript_call_result_41856 = invoke(stypy.reporting.localization.Localization(__file__, 849, 26), getitem___41855, unicode_41852)
        
        # Getting the type of 'self' (line 849)
        self_41857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 12), 'self')
        # Setting the type of the member 'origin' of a type (line 849)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 849, 12), self_41857, 'origin', subscript_call_result_41856)
        # SSA join for if statement (line 848)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 851):
        
        # Assigning a Call to a Attribute (line 851):
        
        # Call to pop(...): (line 851)
        # Processing the call arguments (line 851)
        unicode_41860 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 851, 37), 'unicode', u'transform')
        # Getting the type of 'None' (line 851)
        None_41861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 50), 'None', False)
        # Processing the call keyword arguments (line 851)
        kwargs_41862 = {}
        # Getting the type of 'kwargs' (line 851)
        kwargs_41858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 26), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 851)
        pop_41859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 26), kwargs_41858, 'pop')
        # Calling pop(args, kwargs) (line 851)
        pop_call_result_41863 = invoke(stypy.reporting.localization.Localization(__file__, 851, 26), pop_41859, *[unicode_41860, None_41861], **kwargs_41862)
        
        # Getting the type of 'self' (line 851)
        self_41864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 8), 'self')
        # Setting the type of the member '_transform' of a type (line 851)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 8), self_41864, '_transform', pop_call_result_41863)
        
        # Assigning a Call to a Name (line 853):
        
        # Assigning a Call to a Name (line 853):
        
        # Call to _process_args(...): (line 853)
        # Getting the type of 'args' (line 853)
        args_41867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 37), 'args', False)
        # Processing the call keyword arguments (line 853)
        # Getting the type of 'kwargs' (line 853)
        kwargs_41868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 45), 'kwargs', False)
        kwargs_41869 = {'kwargs_41868': kwargs_41868}
        # Getting the type of 'self' (line 853)
        self_41865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 853, 17), 'self', False)
        # Obtaining the member '_process_args' of a type (line 853)
        _process_args_41866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 853, 17), self_41865, '_process_args')
        # Calling _process_args(args, kwargs) (line 853)
        _process_args_call_result_41870 = invoke(stypy.reporting.localization.Localization(__file__, 853, 17), _process_args_41866, *[args_41867], **kwargs_41869)
        
        # Assigning a type to the variable 'kwargs' (line 853)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 853, 8), 'kwargs', _process_args_call_result_41870)
        
        # Call to _process_levels(...): (line 854)
        # Processing the call keyword arguments (line 854)
        kwargs_41873 = {}
        # Getting the type of 'self' (line 854)
        self_41871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'self', False)
        # Obtaining the member '_process_levels' of a type (line 854)
        _process_levels_41872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 854, 8), self_41871, '_process_levels')
        # Calling _process_levels(args, kwargs) (line 854)
        _process_levels_call_result_41874 = invoke(stypy.reporting.localization.Localization(__file__, 854, 8), _process_levels_41872, *[], **kwargs_41873)
        
        
        
        # Getting the type of 'self' (line 856)
        self_41875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 11), 'self')
        # Obtaining the member 'colors' of a type (line 856)
        colors_41876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 856, 11), self_41875, 'colors')
        # Getting the type of 'None' (line 856)
        None_41877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 856, 30), 'None')
        # Applying the binary operator 'isnot' (line 856)
        result_is_not_41878 = python_operator(stypy.reporting.localization.Localization(__file__, 856, 11), 'isnot', colors_41876, None_41877)
        
        # Testing the type of an if condition (line 856)
        if_condition_41879 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 856, 8), result_is_not_41878)
        # Assigning a type to the variable 'if_condition_41879' (line 856)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 856, 8), 'if_condition_41879', if_condition_41879)
        # SSA begins for if statement (line 856)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 857):
        
        # Assigning a Call to a Name (line 857):
        
        # Call to len(...): (line 857)
        # Processing the call arguments (line 857)
        # Getting the type of 'self' (line 857)
        self_41881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 26), 'self', False)
        # Obtaining the member 'levels' of a type (line 857)
        levels_41882 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 857, 26), self_41881, 'levels')
        # Processing the call keyword arguments (line 857)
        kwargs_41883 = {}
        # Getting the type of 'len' (line 857)
        len_41880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 22), 'len', False)
        # Calling len(args, kwargs) (line 857)
        len_call_result_41884 = invoke(stypy.reporting.localization.Localization(__file__, 857, 22), len_41880, *[levels_41882], **kwargs_41883)
        
        # Assigning a type to the variable 'ncolors' (line 857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 12), 'ncolors', len_call_result_41884)
        
        # Getting the type of 'self' (line 858)
        self_41885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 15), 'self')
        # Obtaining the member 'filled' of a type (line 858)
        filled_41886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 858, 15), self_41885, 'filled')
        # Testing the type of an if condition (line 858)
        if_condition_41887 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 858, 12), filled_41886)
        # Assigning a type to the variable 'if_condition_41887' (line 858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 12), 'if_condition_41887', if_condition_41887)
        # SSA begins for if statement (line 858)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'ncolors' (line 859)
        ncolors_41888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 16), 'ncolors')
        int_41889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 859, 27), 'int')
        # Applying the binary operator '-=' (line 859)
        result_isub_41890 = python_operator(stypy.reporting.localization.Localization(__file__, 859, 16), '-=', ncolors_41888, int_41889)
        # Assigning a type to the variable 'ncolors' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 16), 'ncolors', result_isub_41890)
        
        # SSA join for if statement (line 858)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Num to a Name (line 860):
        
        # Assigning a Num to a Name (line 860):
        int_41891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 860, 17), 'int')
        # Assigning a type to the variable 'i0' (line 860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 12), 'i0', int_41891)
        
        # Assigning a Compare to a Name (line 864):
        
        # Assigning a Compare to a Name (line 864):
        
        # Getting the type of 'self' (line 864)
        self_41892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 25), 'self')
        # Obtaining the member 'extend' of a type (line 864)
        extend_41893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 864, 25), self_41892, 'extend')
        
        # Obtaining an instance of the builtin type 'list' (line 864)
        list_41894 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 864, 40), 'list')
        # Adding type elements to the builtin type 'list' instance (line 864)
        # Adding element type (line 864)
        unicode_41895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 864, 41), 'unicode', u'min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 864, 40), list_41894, unicode_41895)
        # Adding element type (line 864)
        unicode_41896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 864, 48), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 864, 40), list_41894, unicode_41896)
        
        # Applying the binary operator 'in' (line 864)
        result_contains_41897 = python_operator(stypy.reporting.localization.Localization(__file__, 864, 25), 'in', extend_41893, list_41894)
        
        # Assigning a type to the variable 'extend_min' (line 864)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 864, 12), 'extend_min', result_contains_41897)
        
        # Assigning a Compare to a Name (line 865):
        
        # Assigning a Compare to a Name (line 865):
        
        # Getting the type of 'self' (line 865)
        self_41898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 25), 'self')
        # Obtaining the member 'extend' of a type (line 865)
        extend_41899 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 865, 25), self_41898, 'extend')
        
        # Obtaining an instance of the builtin type 'list' (line 865)
        list_41900 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 865, 40), 'list')
        # Adding type elements to the builtin type 'list' instance (line 865)
        # Adding element type (line 865)
        unicode_41901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 865, 41), 'unicode', u'max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 865, 40), list_41900, unicode_41901)
        # Adding element type (line 865)
        unicode_41902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 865, 48), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 865, 40), list_41900, unicode_41902)
        
        # Applying the binary operator 'in' (line 865)
        result_contains_41903 = python_operator(stypy.reporting.localization.Localization(__file__, 865, 25), 'in', extend_41899, list_41900)
        
        # Assigning a type to the variable 'extend_max' (line 865)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 865, 12), 'extend_max', result_contains_41903)
        
        # Assigning a Name to a Name (line 866):
        
        # Assigning a Name to a Name (line 866):
        # Getting the type of 'False' (line 866)
        False_41904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 866, 33), 'False')
        # Assigning a type to the variable 'use_set_under_over' (line 866)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 866, 12), 'use_set_under_over', False_41904)
        
        # Assigning a BinOp to a Name (line 871):
        
        # Assigning a BinOp to a Name (line 871):
        # Getting the type of 'ncolors' (line 871)
        ncolors_41905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 27), 'ncolors')
        
        # Call to int(...): (line 871)
        # Processing the call arguments (line 871)
        # Getting the type of 'extend_min' (line 871)
        extend_min_41907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 41), 'extend_min', False)
        # Processing the call keyword arguments (line 871)
        kwargs_41908 = {}
        # Getting the type of 'int' (line 871)
        int_41906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 37), 'int', False)
        # Calling int(args, kwargs) (line 871)
        int_call_result_41909 = invoke(stypy.reporting.localization.Localization(__file__, 871, 37), int_41906, *[extend_min_41907], **kwargs_41908)
        
        # Applying the binary operator '+' (line 871)
        result_add_41910 = python_operator(stypy.reporting.localization.Localization(__file__, 871, 27), '+', ncolors_41905, int_call_result_41909)
        
        
        # Call to int(...): (line 871)
        # Processing the call arguments (line 871)
        # Getting the type of 'extend_max' (line 871)
        extend_max_41912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 59), 'extend_max', False)
        # Processing the call keyword arguments (line 871)
        kwargs_41913 = {}
        # Getting the type of 'int' (line 871)
        int_41911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 55), 'int', False)
        # Calling int(args, kwargs) (line 871)
        int_call_result_41914 = invoke(stypy.reporting.localization.Localization(__file__, 871, 55), int_41911, *[extend_max_41912], **kwargs_41913)
        
        # Applying the binary operator '+' (line 871)
        result_add_41915 = python_operator(stypy.reporting.localization.Localization(__file__, 871, 53), '+', result_add_41910, int_call_result_41914)
        
        # Assigning a type to the variable 'total_levels' (line 871)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 871, 12), 'total_levels', result_add_41915)
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 872)
        # Processing the call arguments (line 872)
        # Getting the type of 'self' (line 872)
        self_41917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 20), 'self', False)
        # Obtaining the member 'colors' of a type (line 872)
        colors_41918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 872, 20), self_41917, 'colors')
        # Processing the call keyword arguments (line 872)
        kwargs_41919 = {}
        # Getting the type of 'len' (line 872)
        len_41916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 16), 'len', False)
        # Calling len(args, kwargs) (line 872)
        len_call_result_41920 = invoke(stypy.reporting.localization.Localization(__file__, 872, 16), len_41916, *[colors_41918], **kwargs_41919)
        
        # Getting the type of 'total_levels' (line 872)
        total_levels_41921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 36), 'total_levels')
        # Applying the binary operator '==' (line 872)
        result_eq_41922 = python_operator(stypy.reporting.localization.Localization(__file__, 872, 16), '==', len_call_result_41920, total_levels_41921)
        
        
        # Call to any(...): (line 873)
        # Processing the call arguments (line 873)
        
        # Obtaining an instance of the builtin type 'list' (line 873)
        list_41924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 873, 24), 'list')
        # Adding type elements to the builtin type 'list' instance (line 873)
        # Adding element type (line 873)
        # Getting the type of 'extend_min' (line 873)
        extend_min_41925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 25), 'extend_min', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 873, 24), list_41924, extend_min_41925)
        # Adding element type (line 873)
        # Getting the type of 'extend_max' (line 873)
        extend_max_41926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 37), 'extend_max', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 873, 24), list_41924, extend_max_41926)
        
        # Processing the call keyword arguments (line 873)
        kwargs_41927 = {}
        # Getting the type of 'any' (line 873)
        any_41923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 20), 'any', False)
        # Calling any(args, kwargs) (line 873)
        any_call_result_41928 = invoke(stypy.reporting.localization.Localization(__file__, 873, 20), any_41923, *[list_41924], **kwargs_41927)
        
        # Applying the binary operator 'and' (line 872)
        result_and_keyword_41929 = python_operator(stypy.reporting.localization.Localization(__file__, 872, 16), 'and', result_eq_41922, any_call_result_41928)
        
        # Testing the type of an if condition (line 872)
        if_condition_41930 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 872, 12), result_and_keyword_41929)
        # Assigning a type to the variable 'if_condition_41930' (line 872)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 872, 12), 'if_condition_41930', if_condition_41930)
        # SSA begins for if statement (line 872)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 874):
        
        # Assigning a Name to a Name (line 874):
        # Getting the type of 'True' (line 874)
        True_41931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 37), 'True')
        # Assigning a type to the variable 'use_set_under_over' (line 874)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 874, 16), 'use_set_under_over', True_41931)
        
        # Getting the type of 'extend_min' (line 875)
        extend_min_41932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 875, 19), 'extend_min')
        # Testing the type of an if condition (line 875)
        if_condition_41933 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 875, 16), extend_min_41932)
        # Assigning a type to the variable 'if_condition_41933' (line 875)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 875, 16), 'if_condition_41933', if_condition_41933)
        # SSA begins for if statement (line 875)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 876):
        
        # Assigning a Num to a Name (line 876):
        int_41934 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 876, 25), 'int')
        # Assigning a type to the variable 'i0' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 20), 'i0', int_41934)
        # SSA join for if statement (line 875)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 872)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 878):
        
        # Assigning a Call to a Name (line 878):
        
        # Call to ListedColormap(...): (line 878)
        # Processing the call arguments (line 878)
        
        # Obtaining the type of the subscript
        # Getting the type of 'i0' (line 878)
        i0_41937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 53), 'i0', False)
        # Getting the type of 'None' (line 878)
        None_41938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 56), 'None', False)
        slice_41939 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 878, 41), i0_41937, None_41938, None)
        # Getting the type of 'self' (line 878)
        self_41940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 41), 'self', False)
        # Obtaining the member 'colors' of a type (line 878)
        colors_41941 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 41), self_41940, 'colors')
        # Obtaining the member '__getitem__' of a type (line 878)
        getitem___41942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 41), colors_41941, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 878)
        subscript_call_result_41943 = invoke(stypy.reporting.localization.Localization(__file__, 878, 41), getitem___41942, slice_41939)
        
        # Processing the call keyword arguments (line 878)
        # Getting the type of 'ncolors' (line 878)
        ncolors_41944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 65), 'ncolors', False)
        keyword_41945 = ncolors_41944
        kwargs_41946 = {'N': keyword_41945}
        # Getting the type of 'colors' (line 878)
        colors_41935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 19), 'colors', False)
        # Obtaining the member 'ListedColormap' of a type (line 878)
        ListedColormap_41936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 19), colors_41935, 'ListedColormap')
        # Calling ListedColormap(args, kwargs) (line 878)
        ListedColormap_call_result_41947 = invoke(stypy.reporting.localization.Localization(__file__, 878, 19), ListedColormap_41936, *[subscript_call_result_41943], **kwargs_41946)
        
        # Assigning a type to the variable 'cmap' (line 878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 12), 'cmap', ListedColormap_call_result_41947)
        
        # Getting the type of 'use_set_under_over' (line 880)
        use_set_under_over_41948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 15), 'use_set_under_over')
        # Testing the type of an if condition (line 880)
        if_condition_41949 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 880, 12), use_set_under_over_41948)
        # Assigning a type to the variable 'if_condition_41949' (line 880)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 880, 12), 'if_condition_41949', if_condition_41949)
        # SSA begins for if statement (line 880)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'extend_min' (line 881)
        extend_min_41950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 19), 'extend_min')
        # Testing the type of an if condition (line 881)
        if_condition_41951 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 881, 16), extend_min_41950)
        # Assigning a type to the variable 'if_condition_41951' (line 881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 881, 16), 'if_condition_41951', if_condition_41951)
        # SSA begins for if statement (line 881)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_under(...): (line 882)
        # Processing the call arguments (line 882)
        
        # Obtaining the type of the subscript
        int_41954 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 882, 47), 'int')
        # Getting the type of 'self' (line 882)
        self_41955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 35), 'self', False)
        # Obtaining the member 'colors' of a type (line 882)
        colors_41956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 35), self_41955, 'colors')
        # Obtaining the member '__getitem__' of a type (line 882)
        getitem___41957 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 35), colors_41956, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 882)
        subscript_call_result_41958 = invoke(stypy.reporting.localization.Localization(__file__, 882, 35), getitem___41957, int_41954)
        
        # Processing the call keyword arguments (line 882)
        kwargs_41959 = {}
        # Getting the type of 'cmap' (line 882)
        cmap_41952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 20), 'cmap', False)
        # Obtaining the member 'set_under' of a type (line 882)
        set_under_41953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 20), cmap_41952, 'set_under')
        # Calling set_under(args, kwargs) (line 882)
        set_under_call_result_41960 = invoke(stypy.reporting.localization.Localization(__file__, 882, 20), set_under_41953, *[subscript_call_result_41958], **kwargs_41959)
        
        # SSA join for if statement (line 881)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'extend_max' (line 883)
        extend_max_41961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 19), 'extend_max')
        # Testing the type of an if condition (line 883)
        if_condition_41962 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 883, 16), extend_max_41961)
        # Assigning a type to the variable 'if_condition_41962' (line 883)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 883, 16), 'if_condition_41962', if_condition_41962)
        # SSA begins for if statement (line 883)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_over(...): (line 884)
        # Processing the call arguments (line 884)
        
        # Obtaining the type of the subscript
        int_41965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 46), 'int')
        # Getting the type of 'self' (line 884)
        self_41966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 34), 'self', False)
        # Obtaining the member 'colors' of a type (line 884)
        colors_41967 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 34), self_41966, 'colors')
        # Obtaining the member '__getitem__' of a type (line 884)
        getitem___41968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 34), colors_41967, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 884)
        subscript_call_result_41969 = invoke(stypy.reporting.localization.Localization(__file__, 884, 34), getitem___41968, int_41965)
        
        # Processing the call keyword arguments (line 884)
        kwargs_41970 = {}
        # Getting the type of 'cmap' (line 884)
        cmap_41963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 20), 'cmap', False)
        # Obtaining the member 'set_over' of a type (line 884)
        set_over_41964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 884, 20), cmap_41963, 'set_over')
        # Calling set_over(args, kwargs) (line 884)
        set_over_call_result_41971 = invoke(stypy.reporting.localization.Localization(__file__, 884, 20), set_over_41964, *[subscript_call_result_41969], **kwargs_41970)
        
        # SSA join for if statement (line 883)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 880)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 856)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 886)
        self_41972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 886, 11), 'self')
        # Obtaining the member 'filled' of a type (line 886)
        filled_41973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 886, 11), self_41972, 'filled')
        # Testing the type of an if condition (line 886)
        if_condition_41974 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 886, 8), filled_41973)
        # Assigning a type to the variable 'if_condition_41974' (line 886)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 886, 8), 'if_condition_41974', if_condition_41974)
        # SSA begins for if statement (line 886)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Attribute (line 887):
        
        # Assigning a Call to a Attribute (line 887):
        
        # Call to silent_list(...): (line 887)
        # Processing the call arguments (line 887)
        unicode_41977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 887, 49), 'unicode', u'mcoll.PathCollection')
        # Processing the call keyword arguments (line 887)
        kwargs_41978 = {}
        # Getting the type of 'cbook' (line 887)
        cbook_41975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 31), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 887)
        silent_list_41976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 31), cbook_41975, 'silent_list')
        # Calling silent_list(args, kwargs) (line 887)
        silent_list_call_result_41979 = invoke(stypy.reporting.localization.Localization(__file__, 887, 31), silent_list_41976, *[unicode_41977], **kwargs_41978)
        
        # Getting the type of 'self' (line 887)
        self_41980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 12), 'self')
        # Setting the type of the member 'collections' of a type (line 887)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 887, 12), self_41980, 'collections', silent_list_call_result_41979)
        # SSA branch for the else part of an if statement (line 886)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 889):
        
        # Assigning a Call to a Attribute (line 889):
        
        # Call to silent_list(...): (line 889)
        # Processing the call arguments (line 889)
        unicode_41983 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 889, 49), 'unicode', u'mcoll.LineCollection')
        # Processing the call keyword arguments (line 889)
        kwargs_41984 = {}
        # Getting the type of 'cbook' (line 889)
        cbook_41981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 31), 'cbook', False)
        # Obtaining the member 'silent_list' of a type (line 889)
        silent_list_41982 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 31), cbook_41981, 'silent_list')
        # Calling silent_list(args, kwargs) (line 889)
        silent_list_call_result_41985 = invoke(stypy.reporting.localization.Localization(__file__, 889, 31), silent_list_41982, *[unicode_41983], **kwargs_41984)
        
        # Getting the type of 'self' (line 889)
        self_41986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 12), 'self')
        # Setting the type of the member 'collections' of a type (line 889)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 889, 12), self_41986, 'collections', silent_list_call_result_41985)
        # SSA join for if statement (line 886)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Attribute (line 891):
        
        # Assigning a List to a Attribute (line 891):
        
        # Obtaining an instance of the builtin type 'list' (line 891)
        list_41987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 891, 26), 'list')
        # Adding type elements to the builtin type 'list' instance (line 891)
        
        # Getting the type of 'self' (line 891)
        self_41988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 891, 8), 'self')
        # Setting the type of the member 'labelTexts' of a type (line 891)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 891, 8), self_41988, 'labelTexts', list_41987)
        
        # Assigning a List to a Attribute (line 892):
        
        # Assigning a List to a Attribute (line 892):
        
        # Obtaining an instance of the builtin type 'list' (line 892)
        list_41989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 892, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 892)
        
        # Getting the type of 'self' (line 892)
        self_41990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 892, 8), 'self')
        # Setting the type of the member 'labelCValues' of a type (line 892)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 892, 8), self_41990, 'labelCValues', list_41989)
        
        # Assigning a Dict to a Name (line 894):
        
        # Assigning a Dict to a Name (line 894):
        
        # Obtaining an instance of the builtin type 'dict' (line 894)
        dict_41991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 894, 13), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 894)
        # Adding element type (key, value) (line 894)
        unicode_41992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 894, 14), 'unicode', u'cmap')
        # Getting the type of 'cmap' (line 894)
        cmap_41993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 894, 22), 'cmap')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 894, 13), dict_41991, (unicode_41992, cmap_41993))
        
        # Assigning a type to the variable 'kw' (line 894)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 894, 8), 'kw', dict_41991)
        
        # Type idiom detected: calculating its left and rigth part (line 895)
        # Getting the type of 'norm' (line 895)
        norm_41994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 8), 'norm')
        # Getting the type of 'None' (line 895)
        None_41995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 23), 'None')
        
        (may_be_41996, more_types_in_union_41997) = may_not_be_none(norm_41994, None_41995)

        if may_be_41996:

            if more_types_in_union_41997:
                # Runtime conditional SSA (line 895)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Subscript (line 896):
            
            # Assigning a Name to a Subscript (line 896):
            # Getting the type of 'norm' (line 896)
            norm_41998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 25), 'norm')
            # Getting the type of 'kw' (line 896)
            kw_41999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 12), 'kw')
            unicode_42000 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 15), 'unicode', u'norm')
            # Storing an element on a container (line 896)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 896, 12), kw_41999, (unicode_42000, norm_41998))

            if more_types_in_union_41997:
                # SSA join for if statement (line 895)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to __init__(...): (line 898)
        # Processing the call arguments (line 898)
        # Getting the type of 'self' (line 898)
        self_42004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 35), 'self', False)
        # Processing the call keyword arguments (line 898)
        # Getting the type of 'kw' (line 898)
        kw_42005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 43), 'kw', False)
        kwargs_42006 = {'kw_42005': kw_42005}
        # Getting the type of 'cm' (line 898)
        cm_42001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 8), 'cm', False)
        # Obtaining the member 'ScalarMappable' of a type (line 898)
        ScalarMappable_42002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 8), cm_42001, 'ScalarMappable')
        # Obtaining the member '__init__' of a type (line 898)
        init___42003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 898, 8), ScalarMappable_42002, '__init__')
        # Calling __init__(args, kwargs) (line 898)
        init___call_result_42007 = invoke(stypy.reporting.localization.Localization(__file__, 898, 8), init___42003, *[self_42004], **kwargs_42006)
        
        
        # Type idiom detected: calculating its left and rigth part (line 899)
        # Getting the type of 'vmin' (line 899)
        vmin_42008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 8), 'vmin')
        # Getting the type of 'None' (line 899)
        None_42009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 23), 'None')
        
        (may_be_42010, more_types_in_union_42011) = may_not_be_none(vmin_42008, None_42009)

        if may_be_42010:

            if more_types_in_union_42011:
                # Runtime conditional SSA (line 899)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 900):
            
            # Assigning a Name to a Attribute (line 900):
            # Getting the type of 'vmin' (line 900)
            vmin_42012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 29), 'vmin')
            # Getting the type of 'self' (line 900)
            self_42013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 12), 'self')
            # Obtaining the member 'norm' of a type (line 900)
            norm_42014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 12), self_42013, 'norm')
            # Setting the type of the member 'vmin' of a type (line 900)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 12), norm_42014, 'vmin', vmin_42012)

            if more_types_in_union_42011:
                # SSA join for if statement (line 899)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 901)
        # Getting the type of 'vmax' (line 901)
        vmax_42015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 8), 'vmax')
        # Getting the type of 'None' (line 901)
        None_42016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 23), 'None')
        
        (may_be_42017, more_types_in_union_42018) = may_not_be_none(vmax_42015, None_42016)

        if may_be_42017:

            if more_types_in_union_42018:
                # Runtime conditional SSA (line 901)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Name to a Attribute (line 902):
            
            # Assigning a Name to a Attribute (line 902):
            # Getting the type of 'vmax' (line 902)
            vmax_42019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 29), 'vmax')
            # Getting the type of 'self' (line 902)
            self_42020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 12), 'self')
            # Obtaining the member 'norm' of a type (line 902)
            norm_42021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 12), self_42020, 'norm')
            # Setting the type of the member 'vmax' of a type (line 902)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 12), norm_42021, 'vmax', vmax_42019)

            if more_types_in_union_42018:
                # SSA join for if statement (line 901)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to _process_colors(...): (line 903)
        # Processing the call keyword arguments (line 903)
        kwargs_42024 = {}
        # Getting the type of 'self' (line 903)
        self_42022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 8), 'self', False)
        # Obtaining the member '_process_colors' of a type (line 903)
        _process_colors_42023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 8), self_42022, '_process_colors')
        # Calling _process_colors(args, kwargs) (line 903)
        _process_colors_call_result_42025 = invoke(stypy.reporting.localization.Localization(__file__, 903, 8), _process_colors_42023, *[], **kwargs_42024)
        
        
        # Assigning a Call to a Tuple (line 905):
        
        # Assigning a Call to a Name:
        
        # Call to _get_allsegs_and_allkinds(...): (line 905)
        # Processing the call keyword arguments (line 905)
        kwargs_42028 = {}
        # Getting the type of 'self' (line 905)
        self_42026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 38), 'self', False)
        # Obtaining the member '_get_allsegs_and_allkinds' of a type (line 905)
        _get_allsegs_and_allkinds_42027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 38), self_42026, '_get_allsegs_and_allkinds')
        # Calling _get_allsegs_and_allkinds(args, kwargs) (line 905)
        _get_allsegs_and_allkinds_call_result_42029 = invoke(stypy.reporting.localization.Localization(__file__, 905, 38), _get_allsegs_and_allkinds_42027, *[], **kwargs_42028)
        
        # Assigning a type to the variable 'call_assignment_39336' (line 905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'call_assignment_39336', _get_allsegs_and_allkinds_call_result_42029)
        
        # Assigning a Call to a Name (line 905):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_42032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 8), 'int')
        # Processing the call keyword arguments
        kwargs_42033 = {}
        # Getting the type of 'call_assignment_39336' (line 905)
        call_assignment_39336_42030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'call_assignment_39336', False)
        # Obtaining the member '__getitem__' of a type (line 905)
        getitem___42031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 8), call_assignment_39336_42030, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_42034 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___42031, *[int_42032], **kwargs_42033)
        
        # Assigning a type to the variable 'call_assignment_39337' (line 905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'call_assignment_39337', getitem___call_result_42034)
        
        # Assigning a Name to a Attribute (line 905):
        # Getting the type of 'call_assignment_39337' (line 905)
        call_assignment_39337_42035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'call_assignment_39337')
        # Getting the type of 'self' (line 905)
        self_42036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'self')
        # Setting the type of the member 'allsegs' of a type (line 905)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 8), self_42036, 'allsegs', call_assignment_39337_42035)
        
        # Assigning a Call to a Name (line 905):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_42039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 8), 'int')
        # Processing the call keyword arguments
        kwargs_42040 = {}
        # Getting the type of 'call_assignment_39336' (line 905)
        call_assignment_39336_42037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'call_assignment_39336', False)
        # Obtaining the member '__getitem__' of a type (line 905)
        getitem___42038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 8), call_assignment_39336_42037, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_42041 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___42038, *[int_42039], **kwargs_42040)
        
        # Assigning a type to the variable 'call_assignment_39338' (line 905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'call_assignment_39338', getitem___call_result_42041)
        
        # Assigning a Name to a Attribute (line 905):
        # Getting the type of 'call_assignment_39338' (line 905)
        call_assignment_39338_42042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'call_assignment_39338')
        # Getting the type of 'self' (line 905)
        self_42043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 22), 'self')
        # Setting the type of the member 'allkinds' of a type (line 905)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 22), self_42043, 'allkinds', call_assignment_39338_42042)
        
        # Getting the type of 'self' (line 907)
        self_42044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 11), 'self')
        # Obtaining the member 'filled' of a type (line 907)
        filled_42045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 907, 11), self_42044, 'filled')
        # Testing the type of an if condition (line 907)
        if_condition_42046 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 907, 8), filled_42045)
        # Assigning a type to the variable 'if_condition_42046' (line 907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 907, 8), 'if_condition_42046', if_condition_42046)
        # SSA begins for if statement (line 907)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'self' (line 908)
        self_42047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 15), 'self')
        # Obtaining the member 'linewidths' of a type (line 908)
        linewidths_42048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 908, 15), self_42047, 'linewidths')
        # Getting the type of 'None' (line 908)
        None_42049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 38), 'None')
        # Applying the binary operator 'isnot' (line 908)
        result_is_not_42050 = python_operator(stypy.reporting.localization.Localization(__file__, 908, 15), 'isnot', linewidths_42048, None_42049)
        
        # Testing the type of an if condition (line 908)
        if_condition_42051 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 908, 12), result_is_not_42050)
        # Assigning a type to the variable 'if_condition_42051' (line 908)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 12), 'if_condition_42051', if_condition_42051)
        # SSA begins for if statement (line 908)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 909)
        # Processing the call arguments (line 909)
        unicode_42054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 909, 30), 'unicode', u'linewidths is ignored by contourf')
        # Processing the call keyword arguments (line 909)
        kwargs_42055 = {}
        # Getting the type of 'warnings' (line 909)
        warnings_42052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 909, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 909)
        warn_42053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 909, 16), warnings_42052, 'warn')
        # Calling warn(args, kwargs) (line 909)
        warn_call_result_42056 = invoke(stypy.reporting.localization.Localization(__file__, 909, 16), warn_42053, *[unicode_42054], **kwargs_42055)
        
        # SSA join for if statement (line 908)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 912):
        
        # Assigning a Call to a Name:
        
        # Call to _get_lowers_and_uppers(...): (line 912)
        # Processing the call keyword arguments (line 912)
        kwargs_42059 = {}
        # Getting the type of 'self' (line 912)
        self_42057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 29), 'self', False)
        # Obtaining the member '_get_lowers_and_uppers' of a type (line 912)
        _get_lowers_and_uppers_42058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 29), self_42057, '_get_lowers_and_uppers')
        # Calling _get_lowers_and_uppers(args, kwargs) (line 912)
        _get_lowers_and_uppers_call_result_42060 = invoke(stypy.reporting.localization.Localization(__file__, 912, 29), _get_lowers_and_uppers_42058, *[], **kwargs_42059)
        
        # Assigning a type to the variable 'call_assignment_39339' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 12), 'call_assignment_39339', _get_lowers_and_uppers_call_result_42060)
        
        # Assigning a Call to a Name (line 912):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_42063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 912, 12), 'int')
        # Processing the call keyword arguments
        kwargs_42064 = {}
        # Getting the type of 'call_assignment_39339' (line 912)
        call_assignment_39339_42061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 12), 'call_assignment_39339', False)
        # Obtaining the member '__getitem__' of a type (line 912)
        getitem___42062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 12), call_assignment_39339_42061, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_42065 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___42062, *[int_42063], **kwargs_42064)
        
        # Assigning a type to the variable 'call_assignment_39340' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 12), 'call_assignment_39340', getitem___call_result_42065)
        
        # Assigning a Name to a Name (line 912):
        # Getting the type of 'call_assignment_39340' (line 912)
        call_assignment_39340_42066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 12), 'call_assignment_39340')
        # Assigning a type to the variable 'lowers' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 12), 'lowers', call_assignment_39340_42066)
        
        # Assigning a Call to a Name (line 912):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_42069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 912, 12), 'int')
        # Processing the call keyword arguments
        kwargs_42070 = {}
        # Getting the type of 'call_assignment_39339' (line 912)
        call_assignment_39339_42067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 12), 'call_assignment_39339', False)
        # Obtaining the member '__getitem__' of a type (line 912)
        getitem___42068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 12), call_assignment_39339_42067, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_42071 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___42068, *[int_42069], **kwargs_42070)
        
        # Assigning a type to the variable 'call_assignment_39341' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 12), 'call_assignment_39341', getitem___call_result_42071)
        
        # Assigning a Name to a Name (line 912):
        # Getting the type of 'call_assignment_39341' (line 912)
        call_assignment_39341_42072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 12), 'call_assignment_39341')
        # Assigning a type to the variable 'uppers' (line 912)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 912, 20), 'uppers', call_assignment_39341_42072)
        
        # Type idiom detected: calculating its left and rigth part (line 915)
        # Getting the type of 'self' (line 915)
        self_42073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 15), 'self')
        # Obtaining the member 'allkinds' of a type (line 915)
        allkinds_42074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 15), self_42073, 'allkinds')
        # Getting the type of 'None' (line 915)
        None_42075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 32), 'None')
        
        (may_be_42076, more_types_in_union_42077) = may_be_none(allkinds_42074, None_42075)

        if may_be_42076:

            if more_types_in_union_42077:
                # Runtime conditional SSA (line 915)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Attribute (line 916):
            
            # Assigning a BinOp to a Attribute (line 916):
            
            # Obtaining an instance of the builtin type 'list' (line 916)
            list_42078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 916, 32), 'list')
            # Adding type elements to the builtin type 'list' instance (line 916)
            # Adding element type (line 916)
            # Getting the type of 'None' (line 916)
            None_42079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 33), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 916, 32), list_42078, None_42079)
            
            
            # Call to len(...): (line 916)
            # Processing the call arguments (line 916)
            # Getting the type of 'self' (line 916)
            self_42081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 45), 'self', False)
            # Obtaining the member 'allsegs' of a type (line 916)
            allsegs_42082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 45), self_42081, 'allsegs')
            # Processing the call keyword arguments (line 916)
            kwargs_42083 = {}
            # Getting the type of 'len' (line 916)
            len_42080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 41), 'len', False)
            # Calling len(args, kwargs) (line 916)
            len_call_result_42084 = invoke(stypy.reporting.localization.Localization(__file__, 916, 41), len_42080, *[allsegs_42082], **kwargs_42083)
            
            # Applying the binary operator '*' (line 916)
            result_mul_42085 = python_operator(stypy.reporting.localization.Localization(__file__, 916, 32), '*', list_42078, len_call_result_42084)
            
            # Getting the type of 'self' (line 916)
            self_42086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 916, 16), 'self')
            # Setting the type of the member 'allkinds' of a type (line 916)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 916, 16), self_42086, 'allkinds', result_mul_42085)

            if more_types_in_union_42077:
                # SSA join for if statement (line 915)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 919):
        
        # Assigning a Call to a Name (line 919):
        
        # Call to pop(...): (line 919)
        # Processing the call arguments (line 919)
        unicode_42089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, 32), 'unicode', u'zorder')
        int_42090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 919, 42), 'int')
        # Processing the call keyword arguments (line 919)
        kwargs_42091 = {}
        # Getting the type of 'kwargs' (line 919)
        kwargs_42087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 21), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 919)
        pop_42088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 919, 21), kwargs_42087, 'pop')
        # Calling pop(args, kwargs) (line 919)
        pop_call_result_42092 = invoke(stypy.reporting.localization.Localization(__file__, 919, 21), pop_42088, *[unicode_42089, int_42090], **kwargs_42091)
        
        # Assigning a type to the variable 'zorder' (line 919)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 12), 'zorder', pop_call_result_42092)
        
        
        # Call to zip(...): (line 921)
        # Processing the call arguments (line 921)
        # Getting the type of 'lowers' (line 921)
        lowers_42094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 24), 'lowers', False)
        # Getting the type of 'uppers' (line 921)
        uppers_42095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 32), 'uppers', False)
        # Getting the type of 'self' (line 921)
        self_42096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 40), 'self', False)
        # Obtaining the member 'allsegs' of a type (line 921)
        allsegs_42097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 40), self_42096, 'allsegs')
        # Getting the type of 'self' (line 921)
        self_42098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 54), 'self', False)
        # Obtaining the member 'allkinds' of a type (line 921)
        allkinds_42099 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 54), self_42098, 'allkinds')
        # Processing the call keyword arguments (line 921)
        kwargs_42100 = {}
        # Getting the type of 'zip' (line 921)
        zip_42093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 20), 'zip', False)
        # Calling zip(args, kwargs) (line 921)
        zip_call_result_42101 = invoke(stypy.reporting.localization.Localization(__file__, 921, 20), zip_42093, *[lowers_42094, uppers_42095, allsegs_42097, allkinds_42099], **kwargs_42100)
        
        # Testing the type of a for loop iterable (line 920)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 920, 12), zip_call_result_42101)
        # Getting the type of the for loop variable (line 920)
        for_loop_var_42102 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 920, 12), zip_call_result_42101)
        # Assigning a type to the variable 'level' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 12), 'level', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 920, 12), for_loop_var_42102))
        # Assigning a type to the variable 'level_upper' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 12), 'level_upper', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 920, 12), for_loop_var_42102))
        # Assigning a type to the variable 'segs' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 12), 'segs', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 920, 12), for_loop_var_42102))
        # Assigning a type to the variable 'kinds' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 12), 'kinds', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 920, 12), for_loop_var_42102))
        # SSA begins for a for statement (line 920)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 922):
        
        # Assigning a Call to a Name (line 922):
        
        # Call to _make_paths(...): (line 922)
        # Processing the call arguments (line 922)
        # Getting the type of 'segs' (line 922)
        segs_42105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 41), 'segs', False)
        # Getting the type of 'kinds' (line 922)
        kinds_42106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 47), 'kinds', False)
        # Processing the call keyword arguments (line 922)
        kwargs_42107 = {}
        # Getting the type of 'self' (line 922)
        self_42103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 24), 'self', False)
        # Obtaining the member '_make_paths' of a type (line 922)
        _make_paths_42104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 24), self_42103, '_make_paths')
        # Calling _make_paths(args, kwargs) (line 922)
        _make_paths_call_result_42108 = invoke(stypy.reporting.localization.Localization(__file__, 922, 24), _make_paths_42104, *[segs_42105, kinds_42106], **kwargs_42107)
        
        # Assigning a type to the variable 'paths' (line 922)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 16), 'paths', _make_paths_call_result_42108)
        
        # Assigning a Call to a Name (line 924):
        
        # Assigning a Call to a Name (line 924):
        
        # Call to PathCollection(...): (line 924)
        # Processing the call arguments (line 924)
        # Getting the type of 'paths' (line 925)
        paths_42111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 925, 20), 'paths', False)
        # Processing the call keyword arguments (line 924)
        
        # Obtaining an instance of the builtin type 'tuple' (line 926)
        tuple_42112 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 926, 34), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 926)
        # Adding element type (line 926)
        # Getting the type of 'self' (line 926)
        self_42113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 34), 'self', False)
        # Obtaining the member 'antialiased' of a type (line 926)
        antialiased_42114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 926, 34), self_42113, 'antialiased')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 926, 34), tuple_42112, antialiased_42114)
        
        keyword_42115 = tuple_42112
        unicode_42116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 927, 31), 'unicode', u'none')
        keyword_42117 = unicode_42116
        # Getting the type of 'self' (line 928)
        self_42118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 26), 'self', False)
        # Obtaining the member 'alpha' of a type (line 928)
        alpha_42119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 928, 26), self_42118, 'alpha')
        keyword_42120 = alpha_42119
        
        # Call to get_transform(...): (line 929)
        # Processing the call keyword arguments (line 929)
        kwargs_42123 = {}
        # Getting the type of 'self' (line 929)
        self_42121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 30), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 929)
        get_transform_42122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 30), self_42121, 'get_transform')
        # Calling get_transform(args, kwargs) (line 929)
        get_transform_call_result_42124 = invoke(stypy.reporting.localization.Localization(__file__, 929, 30), get_transform_42122, *[], **kwargs_42123)
        
        keyword_42125 = get_transform_call_result_42124
        # Getting the type of 'zorder' (line 930)
        zorder_42126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 27), 'zorder', False)
        keyword_42127 = zorder_42126
        kwargs_42128 = {'edgecolors': keyword_42117, 'antialiaseds': keyword_42115, 'zorder': keyword_42127, 'transform': keyword_42125, 'alpha': keyword_42120}
        # Getting the type of 'mcoll' (line 924)
        mcoll_42109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 22), 'mcoll', False)
        # Obtaining the member 'PathCollection' of a type (line 924)
        PathCollection_42110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 924, 22), mcoll_42109, 'PathCollection')
        # Calling PathCollection(args, kwargs) (line 924)
        PathCollection_call_result_42129 = invoke(stypy.reporting.localization.Localization(__file__, 924, 22), PathCollection_42110, *[paths_42111], **kwargs_42128)
        
        # Assigning a type to the variable 'col' (line 924)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 924, 16), 'col', PathCollection_call_result_42129)
        
        # Call to add_collection(...): (line 931)
        # Processing the call arguments (line 931)
        # Getting the type of 'col' (line 931)
        col_42133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 39), 'col', False)
        # Processing the call keyword arguments (line 931)
        # Getting the type of 'False' (line 931)
        False_42134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 52), 'False', False)
        keyword_42135 = False_42134
        kwargs_42136 = {'autolim': keyword_42135}
        # Getting the type of 'self' (line 931)
        self_42130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 16), 'self', False)
        # Obtaining the member 'ax' of a type (line 931)
        ax_42131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 16), self_42130, 'ax')
        # Obtaining the member 'add_collection' of a type (line 931)
        add_collection_42132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 16), ax_42131, 'add_collection')
        # Calling add_collection(args, kwargs) (line 931)
        add_collection_call_result_42137 = invoke(stypy.reporting.localization.Localization(__file__, 931, 16), add_collection_42132, *[col_42133], **kwargs_42136)
        
        
        # Call to append(...): (line 932)
        # Processing the call arguments (line 932)
        # Getting the type of 'col' (line 932)
        col_42141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 40), 'col', False)
        # Processing the call keyword arguments (line 932)
        kwargs_42142 = {}
        # Getting the type of 'self' (line 932)
        self_42138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 16), 'self', False)
        # Obtaining the member 'collections' of a type (line 932)
        collections_42139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 16), self_42138, 'collections')
        # Obtaining the member 'append' of a type (line 932)
        append_42140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 16), collections_42139, 'append')
        # Calling append(args, kwargs) (line 932)
        append_call_result_42143 = invoke(stypy.reporting.localization.Localization(__file__, 932, 16), append_42140, *[col_42141], **kwargs_42142)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 907)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 934):
        
        # Assigning a Call to a Name (line 934):
        
        # Call to _process_linewidths(...): (line 934)
        # Processing the call keyword arguments (line 934)
        kwargs_42146 = {}
        # Getting the type of 'self' (line 934)
        self_42144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 26), 'self', False)
        # Obtaining the member '_process_linewidths' of a type (line 934)
        _process_linewidths_42145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 26), self_42144, '_process_linewidths')
        # Calling _process_linewidths(args, kwargs) (line 934)
        _process_linewidths_call_result_42147 = invoke(stypy.reporting.localization.Localization(__file__, 934, 26), _process_linewidths_42145, *[], **kwargs_42146)
        
        # Assigning a type to the variable 'tlinewidths' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 12), 'tlinewidths', _process_linewidths_call_result_42147)
        
        # Assigning a Name to a Attribute (line 935):
        
        # Assigning a Name to a Attribute (line 935):
        # Getting the type of 'tlinewidths' (line 935)
        tlinewidths_42148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 31), 'tlinewidths')
        # Getting the type of 'self' (line 935)
        self_42149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 12), 'self')
        # Setting the type of the member 'tlinewidths' of a type (line 935)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 12), self_42149, 'tlinewidths', tlinewidths_42148)
        
        # Assigning a Call to a Name (line 936):
        
        # Assigning a Call to a Name (line 936):
        
        # Call to _process_linestyles(...): (line 936)
        # Processing the call keyword arguments (line 936)
        kwargs_42152 = {}
        # Getting the type of 'self' (line 936)
        self_42150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 26), 'self', False)
        # Obtaining the member '_process_linestyles' of a type (line 936)
        _process_linestyles_42151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 26), self_42150, '_process_linestyles')
        # Calling _process_linestyles(args, kwargs) (line 936)
        _process_linestyles_call_result_42153 = invoke(stypy.reporting.localization.Localization(__file__, 936, 26), _process_linestyles_42151, *[], **kwargs_42152)
        
        # Assigning a type to the variable 'tlinestyles' (line 936)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 936, 12), 'tlinestyles', _process_linestyles_call_result_42153)
        
        # Assigning a Attribute to a Name (line 937):
        
        # Assigning a Attribute to a Name (line 937):
        # Getting the type of 'self' (line 937)
        self_42154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 937, 17), 'self')
        # Obtaining the member 'antialiased' of a type (line 937)
        antialiased_42155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 937, 17), self_42154, 'antialiased')
        # Assigning a type to the variable 'aa' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 12), 'aa', antialiased_42155)
        
        # Type idiom detected: calculating its left and rigth part (line 938)
        # Getting the type of 'aa' (line 938)
        aa_42156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 12), 'aa')
        # Getting the type of 'None' (line 938)
        None_42157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 25), 'None')
        
        (may_be_42158, more_types_in_union_42159) = may_not_be_none(aa_42156, None_42157)

        if may_be_42158:

            if more_types_in_union_42159:
                # Runtime conditional SSA (line 938)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Tuple to a Name (line 939):
            
            # Assigning a Tuple to a Name (line 939):
            
            # Obtaining an instance of the builtin type 'tuple' (line 939)
            tuple_42160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 939, 22), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 939)
            # Adding element type (line 939)
            # Getting the type of 'self' (line 939)
            self_42161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 22), 'self')
            # Obtaining the member 'antialiased' of a type (line 939)
            antialiased_42162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 939, 22), self_42161, 'antialiased')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 939, 22), tuple_42160, antialiased_42162)
            
            # Assigning a type to the variable 'aa' (line 939)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 939, 16), 'aa', tuple_42160)

            if more_types_in_union_42159:
                # SSA join for if statement (line 938)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 941):
        
        # Assigning a Call to a Name (line 941):
        
        # Call to pop(...): (line 941)
        # Processing the call arguments (line 941)
        unicode_42165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 32), 'unicode', u'zorder')
        int_42166 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 42), 'int')
        # Processing the call keyword arguments (line 941)
        kwargs_42167 = {}
        # Getting the type of 'kwargs' (line 941)
        kwargs_42163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 21), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 941)
        pop_42164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 941, 21), kwargs_42163, 'pop')
        # Calling pop(args, kwargs) (line 941)
        pop_call_result_42168 = invoke(stypy.reporting.localization.Localization(__file__, 941, 21), pop_42164, *[unicode_42165, int_42166], **kwargs_42167)
        
        # Assigning a type to the variable 'zorder' (line 941)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 941, 12), 'zorder', pop_call_result_42168)
        
        
        # Call to zip(...): (line 943)
        # Processing the call arguments (line 943)
        # Getting the type of 'self' (line 943)
        self_42170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 24), 'self', False)
        # Obtaining the member 'levels' of a type (line 943)
        levels_42171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 24), self_42170, 'levels')
        # Getting the type of 'tlinewidths' (line 943)
        tlinewidths_42172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 37), 'tlinewidths', False)
        # Getting the type of 'tlinestyles' (line 943)
        tlinestyles_42173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 50), 'tlinestyles', False)
        # Getting the type of 'self' (line 943)
        self_42174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 63), 'self', False)
        # Obtaining the member 'allsegs' of a type (line 943)
        allsegs_42175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 943, 63), self_42174, 'allsegs')
        # Processing the call keyword arguments (line 943)
        kwargs_42176 = {}
        # Getting the type of 'zip' (line 943)
        zip_42169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 943, 20), 'zip', False)
        # Calling zip(args, kwargs) (line 943)
        zip_call_result_42177 = invoke(stypy.reporting.localization.Localization(__file__, 943, 20), zip_42169, *[levels_42171, tlinewidths_42172, tlinestyles_42173, allsegs_42175], **kwargs_42176)
        
        # Testing the type of a for loop iterable (line 942)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 942, 12), zip_call_result_42177)
        # Getting the type of the for loop variable (line 942)
        for_loop_var_42178 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 942, 12), zip_call_result_42177)
        # Assigning a type to the variable 'level' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 12), 'level', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 942, 12), for_loop_var_42178))
        # Assigning a type to the variable 'width' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 12), 'width', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 942, 12), for_loop_var_42178))
        # Assigning a type to the variable 'lstyle' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 12), 'lstyle', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 942, 12), for_loop_var_42178))
        # Assigning a type to the variable 'segs' (line 942)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 942, 12), 'segs', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 942, 12), for_loop_var_42178))
        # SSA begins for a for statement (line 942)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 944):
        
        # Assigning a Call to a Name (line 944):
        
        # Call to LineCollection(...): (line 944)
        # Processing the call arguments (line 944)
        # Getting the type of 'segs' (line 945)
        segs_42181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 20), 'segs', False)
        # Processing the call keyword arguments (line 944)
        # Getting the type of 'aa' (line 946)
        aa_42182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 33), 'aa', False)
        keyword_42183 = aa_42182
        # Getting the type of 'width' (line 947)
        width_42184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 31), 'width', False)
        keyword_42185 = width_42184
        
        # Obtaining an instance of the builtin type 'list' (line 948)
        list_42186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 948, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 948)
        # Adding element type (line 948)
        # Getting the type of 'lstyle' (line 948)
        lstyle_42187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 948, 32), 'lstyle', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 948, 31), list_42186, lstyle_42187)
        
        keyword_42188 = list_42186
        # Getting the type of 'self' (line 949)
        self_42189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 949, 26), 'self', False)
        # Obtaining the member 'alpha' of a type (line 949)
        alpha_42190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 949, 26), self_42189, 'alpha')
        keyword_42191 = alpha_42190
        
        # Call to get_transform(...): (line 950)
        # Processing the call keyword arguments (line 950)
        kwargs_42194 = {}
        # Getting the type of 'self' (line 950)
        self_42192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 30), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 950)
        get_transform_42193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 950, 30), self_42192, 'get_transform')
        # Calling get_transform(args, kwargs) (line 950)
        get_transform_call_result_42195 = invoke(stypy.reporting.localization.Localization(__file__, 950, 30), get_transform_42193, *[], **kwargs_42194)
        
        keyword_42196 = get_transform_call_result_42195
        # Getting the type of 'zorder' (line 951)
        zorder_42197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 951, 27), 'zorder', False)
        keyword_42198 = zorder_42197
        kwargs_42199 = {'antialiaseds': keyword_42183, 'linestyles': keyword_42188, 'transform': keyword_42196, 'linewidths': keyword_42185, 'zorder': keyword_42198, 'alpha': keyword_42191}
        # Getting the type of 'mcoll' (line 944)
        mcoll_42179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 22), 'mcoll', False)
        # Obtaining the member 'LineCollection' of a type (line 944)
        LineCollection_42180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 944, 22), mcoll_42179, 'LineCollection')
        # Calling LineCollection(args, kwargs) (line 944)
        LineCollection_call_result_42200 = invoke(stypy.reporting.localization.Localization(__file__, 944, 22), LineCollection_42180, *[segs_42181], **kwargs_42199)
        
        # Assigning a type to the variable 'col' (line 944)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 944, 16), 'col', LineCollection_call_result_42200)
        
        # Call to set_label(...): (line 952)
        # Processing the call arguments (line 952)
        unicode_42203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 952, 30), 'unicode', u'_nolegend_')
        # Processing the call keyword arguments (line 952)
        kwargs_42204 = {}
        # Getting the type of 'col' (line 952)
        col_42201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 952, 16), 'col', False)
        # Obtaining the member 'set_label' of a type (line 952)
        set_label_42202 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 952, 16), col_42201, 'set_label')
        # Calling set_label(args, kwargs) (line 952)
        set_label_call_result_42205 = invoke(stypy.reporting.localization.Localization(__file__, 952, 16), set_label_42202, *[unicode_42203], **kwargs_42204)
        
        
        # Call to add_collection(...): (line 953)
        # Processing the call arguments (line 953)
        # Getting the type of 'col' (line 953)
        col_42209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 39), 'col', False)
        # Processing the call keyword arguments (line 953)
        # Getting the type of 'False' (line 953)
        False_42210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 52), 'False', False)
        keyword_42211 = False_42210
        kwargs_42212 = {'autolim': keyword_42211}
        # Getting the type of 'self' (line 953)
        self_42206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 953, 16), 'self', False)
        # Obtaining the member 'ax' of a type (line 953)
        ax_42207 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 16), self_42206, 'ax')
        # Obtaining the member 'add_collection' of a type (line 953)
        add_collection_42208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 953, 16), ax_42207, 'add_collection')
        # Calling add_collection(args, kwargs) (line 953)
        add_collection_call_result_42213 = invoke(stypy.reporting.localization.Localization(__file__, 953, 16), add_collection_42208, *[col_42209], **kwargs_42212)
        
        
        # Call to append(...): (line 954)
        # Processing the call arguments (line 954)
        # Getting the type of 'col' (line 954)
        col_42217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 40), 'col', False)
        # Processing the call keyword arguments (line 954)
        kwargs_42218 = {}
        # Getting the type of 'self' (line 954)
        self_42214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 954, 16), 'self', False)
        # Obtaining the member 'collections' of a type (line 954)
        collections_42215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 16), self_42214, 'collections')
        # Obtaining the member 'append' of a type (line 954)
        append_42216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 954, 16), collections_42215, 'append')
        # Calling append(args, kwargs) (line 954)
        append_call_result_42219 = invoke(stypy.reporting.localization.Localization(__file__, 954, 16), append_42216, *[col_42217], **kwargs_42218)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 907)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 956)
        self_42220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 956, 19), 'self')
        # Obtaining the member 'collections' of a type (line 956)
        collections_42221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 956, 19), self_42220, 'collections')
        # Testing the type of a for loop iterable (line 956)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 956, 8), collections_42221)
        # Getting the type of the for loop variable (line 956)
        for_loop_var_42222 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 956, 8), collections_42221)
        # Assigning a type to the variable 'col' (line 956)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 956, 8), 'col', for_loop_var_42222)
        # SSA begins for a for statement (line 956)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a List to a Subscript (line 957):
        
        # Assigning a List to a Subscript (line 957):
        
        # Obtaining an instance of the builtin type 'list' (line 957)
        list_42223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 957)
        # Adding element type (line 957)
        
        # Obtaining the type of the subscript
        int_42224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 48), 'int')
        # Getting the type of 'self' (line 957)
        self_42225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 37), 'self')
        # Obtaining the member '_mins' of a type (line 957)
        _mins_42226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 37), self_42225, '_mins')
        # Obtaining the member '__getitem__' of a type (line 957)
        getitem___42227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 37), _mins_42226, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 957)
        subscript_call_result_42228 = invoke(stypy.reporting.localization.Localization(__file__, 957, 37), getitem___42227, int_42224)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 957, 36), list_42223, subscript_call_result_42228)
        # Adding element type (line 957)
        
        # Obtaining the type of the subscript
        int_42229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 957, 63), 'int')
        # Getting the type of 'self' (line 957)
        self_42230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 52), 'self')
        # Obtaining the member '_maxs' of a type (line 957)
        _maxs_42231 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 52), self_42230, '_maxs')
        # Obtaining the member '__getitem__' of a type (line 957)
        getitem___42232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 52), _maxs_42231, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 957)
        subscript_call_result_42233 = invoke(stypy.reporting.localization.Localization(__file__, 957, 52), getitem___42232, int_42229)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 957, 36), list_42223, subscript_call_result_42233)
        
        # Getting the type of 'col' (line 957)
        col_42234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 957, 12), 'col')
        # Obtaining the member 'sticky_edges' of a type (line 957)
        sticky_edges_42235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 12), col_42234, 'sticky_edges')
        # Obtaining the member 'x' of a type (line 957)
        x_42236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 957, 12), sticky_edges_42235, 'x')
        slice_42237 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 957, 12), None, None, None)
        # Storing an element on a container (line 957)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 957, 12), x_42236, (slice_42237, list_42223))
        
        # Assigning a List to a Subscript (line 958):
        
        # Assigning a List to a Subscript (line 958):
        
        # Obtaining an instance of the builtin type 'list' (line 958)
        list_42238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 36), 'list')
        # Adding type elements to the builtin type 'list' instance (line 958)
        # Adding element type (line 958)
        
        # Obtaining the type of the subscript
        int_42239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 48), 'int')
        # Getting the type of 'self' (line 958)
        self_42240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 37), 'self')
        # Obtaining the member '_mins' of a type (line 958)
        _mins_42241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 37), self_42240, '_mins')
        # Obtaining the member '__getitem__' of a type (line 958)
        getitem___42242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 37), _mins_42241, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 958)
        subscript_call_result_42243 = invoke(stypy.reporting.localization.Localization(__file__, 958, 37), getitem___42242, int_42239)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 958, 36), list_42238, subscript_call_result_42243)
        # Adding element type (line 958)
        
        # Obtaining the type of the subscript
        int_42244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, 63), 'int')
        # Getting the type of 'self' (line 958)
        self_42245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 52), 'self')
        # Obtaining the member '_maxs' of a type (line 958)
        _maxs_42246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 52), self_42245, '_maxs')
        # Obtaining the member '__getitem__' of a type (line 958)
        getitem___42247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 52), _maxs_42246, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 958)
        subscript_call_result_42248 = invoke(stypy.reporting.localization.Localization(__file__, 958, 52), getitem___42247, int_42244)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 958, 36), list_42238, subscript_call_result_42248)
        
        # Getting the type of 'col' (line 958)
        col_42249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 12), 'col')
        # Obtaining the member 'sticky_edges' of a type (line 958)
        sticky_edges_42250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 12), col_42249, 'sticky_edges')
        # Obtaining the member 'y' of a type (line 958)
        y_42251 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 958, 12), sticky_edges_42250, 'y')
        slice_42252 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 958, 12), None, None, None)
        # Storing an element on a container (line 958)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 958, 12), y_42251, (slice_42252, list_42238))
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to update_datalim(...): (line 959)
        # Processing the call arguments (line 959)
        
        # Obtaining an instance of the builtin type 'list' (line 959)
        list_42256 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 959, 31), 'list')
        # Adding type elements to the builtin type 'list' instance (line 959)
        # Adding element type (line 959)
        # Getting the type of 'self' (line 959)
        self_42257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 32), 'self', False)
        # Obtaining the member '_mins' of a type (line 959)
        _mins_42258 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 32), self_42257, '_mins')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 959, 31), list_42256, _mins_42258)
        # Adding element type (line 959)
        # Getting the type of 'self' (line 959)
        self_42259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 44), 'self', False)
        # Obtaining the member '_maxs' of a type (line 959)
        _maxs_42260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 44), self_42259, '_maxs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 959, 31), list_42256, _maxs_42260)
        
        # Processing the call keyword arguments (line 959)
        kwargs_42261 = {}
        # Getting the type of 'self' (line 959)
        self_42253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 959)
        ax_42254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 8), self_42253, 'ax')
        # Obtaining the member 'update_datalim' of a type (line 959)
        update_datalim_42255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 8), ax_42254, 'update_datalim')
        # Calling update_datalim(args, kwargs) (line 959)
        update_datalim_call_result_42262 = invoke(stypy.reporting.localization.Localization(__file__, 959, 8), update_datalim_42255, *[list_42256], **kwargs_42261)
        
        
        # Call to autoscale_view(...): (line 960)
        # Processing the call keyword arguments (line 960)
        # Getting the type of 'True' (line 960)
        True_42266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 37), 'True', False)
        keyword_42267 = True_42266
        kwargs_42268 = {'tight': keyword_42267}
        # Getting the type of 'self' (line 960)
        self_42263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 8), 'self', False)
        # Obtaining the member 'ax' of a type (line 960)
        ax_42264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 8), self_42263, 'ax')
        # Obtaining the member 'autoscale_view' of a type (line 960)
        autoscale_view_42265 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 960, 8), ax_42264, 'autoscale_view')
        # Calling autoscale_view(args, kwargs) (line 960)
        autoscale_view_call_result_42269 = invoke(stypy.reporting.localization.Localization(__file__, 960, 8), autoscale_view_42265, *[], **kwargs_42268)
        
        
        # Call to changed(...): (line 962)
        # Processing the call keyword arguments (line 962)
        kwargs_42272 = {}
        # Getting the type of 'self' (line 962)
        self_42270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 8), 'self', False)
        # Obtaining the member 'changed' of a type (line 962)
        changed_42271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 962, 8), self_42270, 'changed')
        # Calling changed(args, kwargs) (line 962)
        changed_call_result_42273 = invoke(stypy.reporting.localization.Localization(__file__, 962, 8), changed_42271, *[], **kwargs_42272)
        
        
        # Getting the type of 'kwargs' (line 964)
        kwargs_42274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 11), 'kwargs')
        # Testing the type of an if condition (line 964)
        if_condition_42275 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 964, 8), kwargs_42274)
        # Assigning a type to the variable 'if_condition_42275' (line 964)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 8), 'if_condition_42275', if_condition_42275)
        # SSA begins for if statement (line 964)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 965):
        
        # Assigning a Call to a Name (line 965):
        
        # Call to join(...): (line 965)
        # Processing the call arguments (line 965)
        
        # Call to map(...): (line 965)
        # Processing the call arguments (line 965)
        # Getting the type of 'repr' (line 965)
        repr_42279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 30), 'repr', False)
        # Getting the type of 'kwargs' (line 965)
        kwargs_42280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 36), 'kwargs', False)
        # Processing the call keyword arguments (line 965)
        kwargs_42281 = {}
        # Getting the type of 'map' (line 965)
        map_42278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 965, 26), 'map', False)
        # Calling map(args, kwargs) (line 965)
        map_call_result_42282 = invoke(stypy.reporting.localization.Localization(__file__, 965, 26), map_42278, *[repr_42279, kwargs_42280], **kwargs_42281)
        
        # Processing the call keyword arguments (line 965)
        kwargs_42283 = {}
        unicode_42276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 965, 16), 'unicode', u', ')
        # Obtaining the member 'join' of a type (line 965)
        join_42277 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 965, 16), unicode_42276, 'join')
        # Calling join(args, kwargs) (line 965)
        join_call_result_42284 = invoke(stypy.reporting.localization.Localization(__file__, 965, 16), join_42277, *[map_call_result_42282], **kwargs_42283)
        
        # Assigning a type to the variable 's' (line 965)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 965, 12), 's', join_call_result_42284)
        
        # Call to warn(...): (line 966)
        # Processing the call arguments (line 966)
        unicode_42287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 966, 26), 'unicode', u'The following kwargs were not used by contour: ')
        # Getting the type of 's' (line 967)
        s_42288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 967, 26), 's', False)
        # Applying the binary operator '+' (line 966)
        result_add_42289 = python_operator(stypy.reporting.localization.Localization(__file__, 966, 26), '+', unicode_42287, s_42288)
        
        # Processing the call keyword arguments (line 966)
        kwargs_42290 = {}
        # Getting the type of 'warnings' (line 966)
        warnings_42285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 966, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 966)
        warn_42286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 966, 12), warnings_42285, 'warn')
        # Calling warn(args, kwargs) (line 966)
        warn_call_result_42291 = invoke(stypy.reporting.localization.Localization(__file__, 966, 12), warn_42286, *[result_add_42289], **kwargs_42290)
        
        # SSA join for if statement (line 964)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_transform'
        module_type_store = module_type_store.open_function_context('get_transform', 969, 4, False)
        # Assigning a type to the variable 'self' (line 970)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 970, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet.get_transform.__dict__.__setitem__('stypy_localization', localization)
        ContourSet.get_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet.get_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet.get_transform.__dict__.__setitem__('stypy_function_name', 'ContourSet.get_transform')
        ContourSet.get_transform.__dict__.__setitem__('stypy_param_names_list', [])
        ContourSet.get_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet.get_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet.get_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet.get_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet.get_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet.get_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet.get_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_transform(...)' code ##################

        unicode_42292 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 973, (-1)), 'unicode', u'\n        Return the :class:`~matplotlib.transforms.Transform`\n        instance used by this ContourSet.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 974)
        # Getting the type of 'self' (line 974)
        self_42293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 11), 'self')
        # Obtaining the member '_transform' of a type (line 974)
        _transform_42294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 11), self_42293, '_transform')
        # Getting the type of 'None' (line 974)
        None_42295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 30), 'None')
        
        (may_be_42296, more_types_in_union_42297) = may_be_none(_transform_42294, None_42295)

        if may_be_42296:

            if more_types_in_union_42297:
                # Runtime conditional SSA (line 974)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Attribute (line 975):
            
            # Assigning a Attribute to a Attribute (line 975):
            # Getting the type of 'self' (line 975)
            self_42298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 30), 'self')
            # Obtaining the member 'ax' of a type (line 975)
            ax_42299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 30), self_42298, 'ax')
            # Obtaining the member 'transData' of a type (line 975)
            transData_42300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 30), ax_42299, 'transData')
            # Getting the type of 'self' (line 975)
            self_42301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 12), 'self')
            # Setting the type of the member '_transform' of a type (line 975)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 975, 12), self_42301, '_transform', transData_42300)

            if more_types_in_union_42297:
                # Runtime conditional SSA for else branch (line 974)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_42296) or more_types_in_union_42297):
            
            
            # Evaluating a boolean operation
            
            
            # Call to isinstance(...): (line 976)
            # Processing the call arguments (line 976)
            # Getting the type of 'self' (line 976)
            self_42303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 29), 'self', False)
            # Obtaining the member '_transform' of a type (line 976)
            _transform_42304 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 29), self_42303, '_transform')
            # Getting the type of 'mtransforms' (line 976)
            mtransforms_42305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 46), 'mtransforms', False)
            # Obtaining the member 'Transform' of a type (line 976)
            Transform_42306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 46), mtransforms_42305, 'Transform')
            # Processing the call keyword arguments (line 976)
            kwargs_42307 = {}
            # Getting the type of 'isinstance' (line 976)
            isinstance_42302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 18), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 976)
            isinstance_call_result_42308 = invoke(stypy.reporting.localization.Localization(__file__, 976, 18), isinstance_42302, *[_transform_42304, Transform_42306], **kwargs_42307)
            
            # Applying the 'not' unary operator (line 976)
            result_not__42309 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 14), 'not', isinstance_call_result_42308)
            
            
            # Call to hasattr(...): (line 977)
            # Processing the call arguments (line 977)
            # Getting the type of 'self' (line 977)
            self_42311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 26), 'self', False)
            # Obtaining the member '_transform' of a type (line 977)
            _transform_42312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 977, 26), self_42311, '_transform')
            unicode_42313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 977, 43), 'unicode', u'_as_mpl_transform')
            # Processing the call keyword arguments (line 977)
            kwargs_42314 = {}
            # Getting the type of 'hasattr' (line 977)
            hasattr_42310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 977, 18), 'hasattr', False)
            # Calling hasattr(args, kwargs) (line 977)
            hasattr_call_result_42315 = invoke(stypy.reporting.localization.Localization(__file__, 977, 18), hasattr_42310, *[_transform_42312, unicode_42313], **kwargs_42314)
            
            # Applying the binary operator 'and' (line 976)
            result_and_keyword_42316 = python_operator(stypy.reporting.localization.Localization(__file__, 976, 14), 'and', result_not__42309, hasattr_call_result_42315)
            
            # Testing the type of an if condition (line 976)
            if_condition_42317 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 976, 13), result_and_keyword_42316)
            # Assigning a type to the variable 'if_condition_42317' (line 976)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 976, 13), 'if_condition_42317', if_condition_42317)
            # SSA begins for if statement (line 976)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 978):
            
            # Assigning a Call to a Attribute (line 978):
            
            # Call to _as_mpl_transform(...): (line 978)
            # Processing the call arguments (line 978)
            # Getting the type of 'self' (line 978)
            self_42321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 64), 'self', False)
            # Obtaining the member 'ax' of a type (line 978)
            ax_42322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 64), self_42321, 'ax')
            # Processing the call keyword arguments (line 978)
            kwargs_42323 = {}
            # Getting the type of 'self' (line 978)
            self_42318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 30), 'self', False)
            # Obtaining the member '_transform' of a type (line 978)
            _transform_42319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 30), self_42318, '_transform')
            # Obtaining the member '_as_mpl_transform' of a type (line 978)
            _as_mpl_transform_42320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 30), _transform_42319, '_as_mpl_transform')
            # Calling _as_mpl_transform(args, kwargs) (line 978)
            _as_mpl_transform_call_result_42324 = invoke(stypy.reporting.localization.Localization(__file__, 978, 30), _as_mpl_transform_42320, *[ax_42322], **kwargs_42323)
            
            # Getting the type of 'self' (line 978)
            self_42325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 12), 'self')
            # Setting the type of the member '_transform' of a type (line 978)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 978, 12), self_42325, '_transform', _as_mpl_transform_call_result_42324)
            # SSA join for if statement (line 976)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_42296 and more_types_in_union_42297):
                # SSA join for if statement (line 974)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'self' (line 979)
        self_42326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 15), 'self')
        # Obtaining the member '_transform' of a type (line 979)
        _transform_42327 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 979, 15), self_42326, '_transform')
        # Assigning a type to the variable 'stypy_return_type' (line 979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 8), 'stypy_return_type', _transform_42327)
        
        # ################# End of 'get_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 969)
        stypy_return_type_42328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 969, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42328)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_transform'
        return stypy_return_type_42328


    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 981, 4, False)
        # Assigning a type to the variable 'self' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        ContourSet.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet.__getstate__.__dict__.__setitem__('stypy_function_name', 'ContourSet.__getstate__')
        ContourSet.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        ContourSet.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        
        # Assigning a Call to a Name (line 982):
        
        # Assigning a Call to a Name (line 982):
        
        # Call to copy(...): (line 982)
        # Processing the call keyword arguments (line 982)
        kwargs_42332 = {}
        # Getting the type of 'self' (line 982)
        self_42329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 16), 'self', False)
        # Obtaining the member '__dict__' of a type (line 982)
        dict___42330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 16), self_42329, '__dict__')
        # Obtaining the member 'copy' of a type (line 982)
        copy_42331 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 982, 16), dict___42330, 'copy')
        # Calling copy(args, kwargs) (line 982)
        copy_call_result_42333 = invoke(stypy.reporting.localization.Localization(__file__, 982, 16), copy_42331, *[], **kwargs_42332)
        
        # Assigning a type to the variable 'state' (line 982)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 982, 8), 'state', copy_call_result_42333)
        
        # Assigning a Name to a Subscript (line 986):
        
        # Assigning a Name to a Subscript (line 986):
        # Getting the type of 'None' (line 986)
        None_42334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 38), 'None')
        # Getting the type of 'state' (line 986)
        state_42335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'state')
        unicode_42336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 14), 'unicode', u'_contour_generator')
        # Storing an element on a container (line 986)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 986, 8), state_42335, (unicode_42336, None_42334))
        # Getting the type of 'state' (line 987)
        state_42337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 15), 'state')
        # Assigning a type to the variable 'stypy_return_type' (line 987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 8), 'stypy_return_type', state_42337)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 981)
        stypy_return_type_42338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42338)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_42338


    @norecursion
    def legend_elements(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        unicode_42339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 989, 44), 'unicode', u'x')
        # Getting the type of 'str' (line 989)
        str_42340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 60), 'str')
        defaults = [unicode_42339, str_42340]
        # Create a new context for function 'legend_elements'
        module_type_store = module_type_store.open_function_context('legend_elements', 989, 4, False)
        # Assigning a type to the variable 'self' (line 990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet.legend_elements.__dict__.__setitem__('stypy_localization', localization)
        ContourSet.legend_elements.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet.legend_elements.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet.legend_elements.__dict__.__setitem__('stypy_function_name', 'ContourSet.legend_elements')
        ContourSet.legend_elements.__dict__.__setitem__('stypy_param_names_list', ['variable_name', 'str_format'])
        ContourSet.legend_elements.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet.legend_elements.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet.legend_elements.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet.legend_elements.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet.legend_elements.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet.legend_elements.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet.legend_elements', ['variable_name', 'str_format'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'legend_elements', localization, ['variable_name', 'str_format'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'legend_elements(...)' code ##################

        unicode_42341 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1000, (-1)), 'unicode', u'\n        Return a list of artist and labels suitable for passing through\n        to :func:`plt.legend` which represent this ContourSet.\n\n        Args:\n\n            *variable_name*: the string used inside the inequality used\n              on the labels\n\n            *str_format*: function used to format the numbers in the labels\n        ')
        
        # Assigning a List to a Name (line 1001):
        
        # Assigning a List to a Name (line 1001):
        
        # Obtaining an instance of the builtin type 'list' (line 1001)
        list_42342 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1001, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1001)
        
        # Assigning a type to the variable 'artists' (line 1001)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1001, 8), 'artists', list_42342)
        
        # Assigning a List to a Name (line 1002):
        
        # Assigning a List to a Name (line 1002):
        
        # Obtaining an instance of the builtin type 'list' (line 1002)
        list_42343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1002, 17), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1002)
        
        # Assigning a type to the variable 'labels' (line 1002)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1002, 8), 'labels', list_42343)
        
        # Getting the type of 'self' (line 1004)
        self_42344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 11), 'self')
        # Obtaining the member 'filled' of a type (line 1004)
        filled_42345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1004, 11), self_42344, 'filled')
        # Testing the type of an if condition (line 1004)
        if_condition_42346 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1004, 8), filled_42345)
        # Assigning a type to the variable 'if_condition_42346' (line 1004)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1004, 8), 'if_condition_42346', if_condition_42346)
        # SSA begins for if statement (line 1004)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1005):
        
        # Assigning a Call to a Name:
        
        # Call to _get_lowers_and_uppers(...): (line 1005)
        # Processing the call keyword arguments (line 1005)
        kwargs_42349 = {}
        # Getting the type of 'self' (line 1005)
        self_42347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 29), 'self', False)
        # Obtaining the member '_get_lowers_and_uppers' of a type (line 1005)
        _get_lowers_and_uppers_42348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 29), self_42347, '_get_lowers_and_uppers')
        # Calling _get_lowers_and_uppers(args, kwargs) (line 1005)
        _get_lowers_and_uppers_call_result_42350 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 29), _get_lowers_and_uppers_42348, *[], **kwargs_42349)
        
        # Assigning a type to the variable 'call_assignment_39342' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 12), 'call_assignment_39342', _get_lowers_and_uppers_call_result_42350)
        
        # Assigning a Call to a Name (line 1005):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_42353 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, 12), 'int')
        # Processing the call keyword arguments
        kwargs_42354 = {}
        # Getting the type of 'call_assignment_39342' (line 1005)
        call_assignment_39342_42351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 12), 'call_assignment_39342', False)
        # Obtaining the member '__getitem__' of a type (line 1005)
        getitem___42352 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 12), call_assignment_39342_42351, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_42355 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___42352, *[int_42353], **kwargs_42354)
        
        # Assigning a type to the variable 'call_assignment_39343' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 12), 'call_assignment_39343', getitem___call_result_42355)
        
        # Assigning a Name to a Name (line 1005):
        # Getting the type of 'call_assignment_39343' (line 1005)
        call_assignment_39343_42356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 12), 'call_assignment_39343')
        # Assigning a type to the variable 'lowers' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 12), 'lowers', call_assignment_39343_42356)
        
        # Assigning a Call to a Name (line 1005):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_42359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, 12), 'int')
        # Processing the call keyword arguments
        kwargs_42360 = {}
        # Getting the type of 'call_assignment_39342' (line 1005)
        call_assignment_39342_42357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 12), 'call_assignment_39342', False)
        # Obtaining the member '__getitem__' of a type (line 1005)
        getitem___42358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1005, 12), call_assignment_39342_42357, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_42361 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___42358, *[int_42359], **kwargs_42360)
        
        # Assigning a type to the variable 'call_assignment_39344' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 12), 'call_assignment_39344', getitem___call_result_42361)
        
        # Assigning a Name to a Name (line 1005):
        # Getting the type of 'call_assignment_39344' (line 1005)
        call_assignment_39344_42362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 12), 'call_assignment_39344')
        # Assigning a type to the variable 'uppers' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 20), 'uppers', call_assignment_39344_42362)
        
        # Assigning a Call to a Name (line 1006):
        
        # Assigning a Call to a Name (line 1006):
        
        # Call to len(...): (line 1006)
        # Processing the call arguments (line 1006)
        # Getting the type of 'self' (line 1006)
        self_42364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 27), 'self', False)
        # Obtaining the member 'collections' of a type (line 1006)
        collections_42365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1006, 27), self_42364, 'collections')
        # Processing the call keyword arguments (line 1006)
        kwargs_42366 = {}
        # Getting the type of 'len' (line 1006)
        len_42363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1006, 23), 'len', False)
        # Calling len(args, kwargs) (line 1006)
        len_call_result_42367 = invoke(stypy.reporting.localization.Localization(__file__, 1006, 23), len_42363, *[collections_42365], **kwargs_42366)
        
        # Assigning a type to the variable 'n_levels' (line 1006)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1006, 12), 'n_levels', len_call_result_42367)
        
        
        # Call to enumerate(...): (line 1008)
        # Processing the call arguments (line 1008)
        
        # Call to zip(...): (line 1009)
        # Processing the call arguments (line 1009)
        # Getting the type of 'self' (line 1009)
        self_42370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 24), 'self', False)
        # Obtaining the member 'collections' of a type (line 1009)
        collections_42371 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1009, 24), self_42370, 'collections')
        # Getting the type of 'lowers' (line 1009)
        lowers_42372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 42), 'lowers', False)
        # Getting the type of 'uppers' (line 1009)
        uppers_42373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 50), 'uppers', False)
        # Processing the call keyword arguments (line 1009)
        kwargs_42374 = {}
        # Getting the type of 'zip' (line 1009)
        zip_42369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1009, 20), 'zip', False)
        # Calling zip(args, kwargs) (line 1009)
        zip_call_result_42375 = invoke(stypy.reporting.localization.Localization(__file__, 1009, 20), zip_42369, *[collections_42371, lowers_42372, uppers_42373], **kwargs_42374)
        
        # Processing the call keyword arguments (line 1008)
        kwargs_42376 = {}
        # Getting the type of 'enumerate' (line 1008)
        enumerate_42368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 49), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 1008)
        enumerate_call_result_42377 = invoke(stypy.reporting.localization.Localization(__file__, 1008, 49), enumerate_42368, *[zip_call_result_42375], **kwargs_42376)
        
        # Testing the type of a for loop iterable (line 1008)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1008, 12), enumerate_call_result_42377)
        # Getting the type of the for loop variable (line 1008)
        for_loop_var_42378 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1008, 12), enumerate_call_result_42377)
        # Assigning a type to the variable 'i' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 12), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1008, 12), for_loop_var_42378))
        # Assigning a type to the variable 'collection' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 12), 'collection', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1008, 12), for_loop_var_42378))
        # Assigning a type to the variable 'lower' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 12), 'lower', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1008, 12), for_loop_var_42378))
        # Assigning a type to the variable 'upper' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 12), 'upper', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1008, 12), for_loop_var_42378))
        # SSA begins for a for statement (line 1008)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1010):
        
        # Assigning a Call to a Name (line 1010):
        
        # Call to Rectangle(...): (line 1010)
        # Processing the call arguments (line 1010)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1011)
        tuple_42381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1011, 21), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1011)
        # Adding element type (line 1011)
        int_42382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1011, 21), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1011, 21), tuple_42381, int_42382)
        # Adding element type (line 1011)
        int_42383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1011, 24), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1011, 21), tuple_42381, int_42383)
        
        int_42384 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1011, 28), 'int')
        int_42385 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1011, 31), 'int')
        # Processing the call keyword arguments (line 1010)
        
        # Obtaining the type of the subscript
        int_42386 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1012, 57), 'int')
        
        # Call to get_facecolor(...): (line 1012)
        # Processing the call keyword arguments (line 1012)
        kwargs_42389 = {}
        # Getting the type of 'collection' (line 1012)
        collection_42387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1012, 30), 'collection', False)
        # Obtaining the member 'get_facecolor' of a type (line 1012)
        get_facecolor_42388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1012, 30), collection_42387, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 1012)
        get_facecolor_call_result_42390 = invoke(stypy.reporting.localization.Localization(__file__, 1012, 30), get_facecolor_42388, *[], **kwargs_42389)
        
        # Obtaining the member '__getitem__' of a type (line 1012)
        getitem___42391 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1012, 30), get_facecolor_call_result_42390, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1012)
        subscript_call_result_42392 = invoke(stypy.reporting.localization.Localization(__file__, 1012, 30), getitem___42391, int_42386)
        
        keyword_42393 = subscript_call_result_42392
        
        # Call to get_hatch(...): (line 1013)
        # Processing the call keyword arguments (line 1013)
        kwargs_42396 = {}
        # Getting the type of 'collection' (line 1013)
        collection_42394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1013, 26), 'collection', False)
        # Obtaining the member 'get_hatch' of a type (line 1013)
        get_hatch_42395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1013, 26), collection_42394, 'get_hatch')
        # Calling get_hatch(args, kwargs) (line 1013)
        get_hatch_call_result_42397 = invoke(stypy.reporting.localization.Localization(__file__, 1013, 26), get_hatch_42395, *[], **kwargs_42396)
        
        keyword_42398 = get_hatch_call_result_42397
        
        # Call to get_alpha(...): (line 1014)
        # Processing the call keyword arguments (line 1014)
        kwargs_42401 = {}
        # Getting the type of 'collection' (line 1014)
        collection_42399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1014, 26), 'collection', False)
        # Obtaining the member 'get_alpha' of a type (line 1014)
        get_alpha_42400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1014, 26), collection_42399, 'get_alpha')
        # Calling get_alpha(args, kwargs) (line 1014)
        get_alpha_call_result_42402 = invoke(stypy.reporting.localization.Localization(__file__, 1014, 26), get_alpha_42400, *[], **kwargs_42401)
        
        keyword_42403 = get_alpha_call_result_42402
        kwargs_42404 = {'alpha': keyword_42403, 'facecolor': keyword_42393, 'hatch': keyword_42398}
        # Getting the type of 'mpatches' (line 1010)
        mpatches_42379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 24), 'mpatches', False)
        # Obtaining the member 'Rectangle' of a type (line 1010)
        Rectangle_42380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1010, 24), mpatches_42379, 'Rectangle')
        # Calling Rectangle(args, kwargs) (line 1010)
        Rectangle_call_result_42405 = invoke(stypy.reporting.localization.Localization(__file__, 1010, 24), Rectangle_42380, *[tuple_42381, int_42384, int_42385], **kwargs_42404)
        
        # Assigning a type to the variable 'patch' (line 1010)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1010, 16), 'patch', Rectangle_call_result_42405)
        
        # Call to append(...): (line 1015)
        # Processing the call arguments (line 1015)
        # Getting the type of 'patch' (line 1015)
        patch_42408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 31), 'patch', False)
        # Processing the call keyword arguments (line 1015)
        kwargs_42409 = {}
        # Getting the type of 'artists' (line 1015)
        artists_42406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1015, 16), 'artists', False)
        # Obtaining the member 'append' of a type (line 1015)
        append_42407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1015, 16), artists_42406, 'append')
        # Calling append(args, kwargs) (line 1015)
        append_call_result_42410 = invoke(stypy.reporting.localization.Localization(__file__, 1015, 16), append_42407, *[patch_42408], **kwargs_42409)
        
        
        # Assigning a Call to a Name (line 1017):
        
        # Assigning a Call to a Name (line 1017):
        
        # Call to str_format(...): (line 1017)
        # Processing the call arguments (line 1017)
        # Getting the type of 'lower' (line 1017)
        lower_42412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 35), 'lower', False)
        # Processing the call keyword arguments (line 1017)
        kwargs_42413 = {}
        # Getting the type of 'str_format' (line 1017)
        str_format_42411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1017, 24), 'str_format', False)
        # Calling str_format(args, kwargs) (line 1017)
        str_format_call_result_42414 = invoke(stypy.reporting.localization.Localization(__file__, 1017, 24), str_format_42411, *[lower_42412], **kwargs_42413)
        
        # Assigning a type to the variable 'lower' (line 1017)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1017, 16), 'lower', str_format_call_result_42414)
        
        # Assigning a Call to a Name (line 1018):
        
        # Assigning a Call to a Name (line 1018):
        
        # Call to str_format(...): (line 1018)
        # Processing the call arguments (line 1018)
        # Getting the type of 'upper' (line 1018)
        upper_42416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 35), 'upper', False)
        # Processing the call keyword arguments (line 1018)
        kwargs_42417 = {}
        # Getting the type of 'str_format' (line 1018)
        str_format_42415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1018, 24), 'str_format', False)
        # Calling str_format(args, kwargs) (line 1018)
        str_format_call_result_42418 = invoke(stypy.reporting.localization.Localization(__file__, 1018, 24), str_format_42415, *[upper_42416], **kwargs_42417)
        
        # Assigning a type to the variable 'upper' (line 1018)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1018, 16), 'upper', str_format_call_result_42418)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 1020)
        i_42419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 19), 'i')
        int_42420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 24), 'int')
        # Applying the binary operator '==' (line 1020)
        result_eq_42421 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 19), '==', i_42419, int_42420)
        
        
        # Getting the type of 'self' (line 1020)
        self_42422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1020, 30), 'self')
        # Obtaining the member 'extend' of a type (line 1020)
        extend_42423 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1020, 30), self_42422, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1020)
        tuple_42424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1020)
        # Adding element type (line 1020)
        unicode_42425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 46), 'unicode', u'min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1020, 46), tuple_42424, unicode_42425)
        # Adding element type (line 1020)
        unicode_42426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1020, 53), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1020, 46), tuple_42424, unicode_42426)
        
        # Applying the binary operator 'in' (line 1020)
        result_contains_42427 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 30), 'in', extend_42423, tuple_42424)
        
        # Applying the binary operator 'and' (line 1020)
        result_and_keyword_42428 = python_operator(stypy.reporting.localization.Localization(__file__, 1020, 19), 'and', result_eq_42421, result_contains_42427)
        
        # Testing the type of an if condition (line 1020)
        if_condition_42429 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1020, 16), result_and_keyword_42428)
        # Assigning a type to the variable 'if_condition_42429' (line 1020)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1020, 16), 'if_condition_42429', if_condition_42429)
        # SSA begins for if statement (line 1020)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1021)
        # Processing the call arguments (line 1021)
        unicode_42432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 34), 'unicode', u'$%s \\leq %s$')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1021)
        tuple_42433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1021, 53), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1021)
        # Adding element type (line 1021)
        # Getting the type of 'variable_name' (line 1021)
        variable_name_42434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 53), 'variable_name', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1021, 53), tuple_42433, variable_name_42434)
        # Adding element type (line 1021)
        # Getting the type of 'lower' (line 1022)
        lower_42435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1022, 53), 'lower', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1021, 53), tuple_42433, lower_42435)
        
        # Applying the binary operator '%' (line 1021)
        result_mod_42436 = python_operator(stypy.reporting.localization.Localization(__file__, 1021, 34), '%', unicode_42432, tuple_42433)
        
        # Processing the call keyword arguments (line 1021)
        kwargs_42437 = {}
        # Getting the type of 'labels' (line 1021)
        labels_42430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1021, 20), 'labels', False)
        # Obtaining the member 'append' of a type (line 1021)
        append_42431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1021, 20), labels_42430, 'append')
        # Calling append(args, kwargs) (line 1021)
        append_call_result_42438 = invoke(stypy.reporting.localization.Localization(__file__, 1021, 20), append_42431, *[result_mod_42436], **kwargs_42437)
        
        # SSA branch for the else part of an if statement (line 1020)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'i' (line 1023)
        i_42439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 21), 'i')
        # Getting the type of 'n_levels' (line 1023)
        n_levels_42440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 26), 'n_levels')
        int_42441 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 37), 'int')
        # Applying the binary operator '-' (line 1023)
        result_sub_42442 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 26), '-', n_levels_42440, int_42441)
        
        # Applying the binary operator '==' (line 1023)
        result_eq_42443 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 21), '==', i_42439, result_sub_42442)
        
        
        # Getting the type of 'self' (line 1023)
        self_42444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1023, 43), 'self')
        # Obtaining the member 'extend' of a type (line 1023)
        extend_42445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1023, 43), self_42444, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1023)
        tuple_42446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 59), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1023)
        # Adding element type (line 1023)
        unicode_42447 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 59), 'unicode', u'max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1023, 59), tuple_42446, unicode_42447)
        # Adding element type (line 1023)
        unicode_42448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, 66), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1023, 59), tuple_42446, unicode_42448)
        
        # Applying the binary operator 'in' (line 1023)
        result_contains_42449 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 43), 'in', extend_42445, tuple_42446)
        
        # Applying the binary operator 'and' (line 1023)
        result_and_keyword_42450 = python_operator(stypy.reporting.localization.Localization(__file__, 1023, 21), 'and', result_eq_42443, result_contains_42449)
        
        # Testing the type of an if condition (line 1023)
        if_condition_42451 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1023, 21), result_and_keyword_42450)
        # Assigning a type to the variable 'if_condition_42451' (line 1023)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1023, 21), 'if_condition_42451', if_condition_42451)
        # SSA begins for if statement (line 1023)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1024)
        # Processing the call arguments (line 1024)
        unicode_42454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 34), 'unicode', u'$%s > %s$')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1024)
        tuple_42455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1024, 50), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1024)
        # Adding element type (line 1024)
        # Getting the type of 'variable_name' (line 1024)
        variable_name_42456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 50), 'variable_name', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1024, 50), tuple_42455, variable_name_42456)
        # Adding element type (line 1024)
        # Getting the type of 'upper' (line 1025)
        upper_42457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 50), 'upper', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1024, 50), tuple_42455, upper_42457)
        
        # Applying the binary operator '%' (line 1024)
        result_mod_42458 = python_operator(stypy.reporting.localization.Localization(__file__, 1024, 34), '%', unicode_42454, tuple_42455)
        
        # Processing the call keyword arguments (line 1024)
        kwargs_42459 = {}
        # Getting the type of 'labels' (line 1024)
        labels_42452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 20), 'labels', False)
        # Obtaining the member 'append' of a type (line 1024)
        append_42453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1024, 20), labels_42452, 'append')
        # Calling append(args, kwargs) (line 1024)
        append_call_result_42460 = invoke(stypy.reporting.localization.Localization(__file__, 1024, 20), append_42453, *[result_mod_42458], **kwargs_42459)
        
        # SSA branch for the else part of an if statement (line 1023)
        module_type_store.open_ssa_branch('else')
        
        # Call to append(...): (line 1027)
        # Processing the call arguments (line 1027)
        unicode_42463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 34), 'unicode', u'$%s < %s \\leq %s$')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1027)
        tuple_42464 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1027, 58), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1027)
        # Adding element type (line 1027)
        # Getting the type of 'lower' (line 1027)
        lower_42465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 58), 'lower', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1027, 58), tuple_42464, lower_42465)
        # Adding element type (line 1027)
        # Getting the type of 'variable_name' (line 1028)
        variable_name_42466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 58), 'variable_name', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1027, 58), tuple_42464, variable_name_42466)
        # Adding element type (line 1027)
        # Getting the type of 'upper' (line 1029)
        upper_42467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 58), 'upper', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1027, 58), tuple_42464, upper_42467)
        
        # Applying the binary operator '%' (line 1027)
        result_mod_42468 = python_operator(stypy.reporting.localization.Localization(__file__, 1027, 34), '%', unicode_42463, tuple_42464)
        
        # Processing the call keyword arguments (line 1027)
        kwargs_42469 = {}
        # Getting the type of 'labels' (line 1027)
        labels_42461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1027, 20), 'labels', False)
        # Obtaining the member 'append' of a type (line 1027)
        append_42462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1027, 20), labels_42461, 'append')
        # Calling append(args, kwargs) (line 1027)
        append_call_result_42470 = invoke(stypy.reporting.localization.Localization(__file__, 1027, 20), append_42462, *[result_mod_42468], **kwargs_42469)
        
        # SSA join for if statement (line 1023)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1020)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1004)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to zip(...): (line 1031)
        # Processing the call arguments (line 1031)
        # Getting the type of 'self' (line 1031)
        self_42472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 41), 'self', False)
        # Obtaining the member 'collections' of a type (line 1031)
        collections_42473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 41), self_42472, 'collections')
        # Getting the type of 'self' (line 1031)
        self_42474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 59), 'self', False)
        # Obtaining the member 'levels' of a type (line 1031)
        levels_42475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1031, 59), self_42474, 'levels')
        # Processing the call keyword arguments (line 1031)
        kwargs_42476 = {}
        # Getting the type of 'zip' (line 1031)
        zip_42471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1031, 37), 'zip', False)
        # Calling zip(args, kwargs) (line 1031)
        zip_call_result_42477 = invoke(stypy.reporting.localization.Localization(__file__, 1031, 37), zip_42471, *[collections_42473, levels_42475], **kwargs_42476)
        
        # Testing the type of a for loop iterable (line 1031)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1031, 12), zip_call_result_42477)
        # Getting the type of the for loop variable (line 1031)
        for_loop_var_42478 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1031, 12), zip_call_result_42477)
        # Assigning a type to the variable 'collection' (line 1031)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 12), 'collection', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1031, 12), for_loop_var_42478))
        # Assigning a type to the variable 'level' (line 1031)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1031, 12), 'level', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1031, 12), for_loop_var_42478))
        # SSA begins for a for statement (line 1031)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Call to a Name (line 1033):
        
        # Assigning a Call to a Name (line 1033):
        
        # Call to LineCollection(...): (line 1033)
        # Processing the call arguments (line 1033)
        # Getting the type of 'None' (line 1033)
        None_42481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 45), 'None', False)
        # Processing the call keyword arguments (line 1033)
        kwargs_42482 = {}
        # Getting the type of 'mcoll' (line 1033)
        mcoll_42479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1033, 24), 'mcoll', False)
        # Obtaining the member 'LineCollection' of a type (line 1033)
        LineCollection_42480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1033, 24), mcoll_42479, 'LineCollection')
        # Calling LineCollection(args, kwargs) (line 1033)
        LineCollection_call_result_42483 = invoke(stypy.reporting.localization.Localization(__file__, 1033, 24), LineCollection_42480, *[None_42481], **kwargs_42482)
        
        # Assigning a type to the variable 'patch' (line 1033)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1033, 16), 'patch', LineCollection_call_result_42483)
        
        # Call to update_from(...): (line 1034)
        # Processing the call arguments (line 1034)
        # Getting the type of 'collection' (line 1034)
        collection_42486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 34), 'collection', False)
        # Processing the call keyword arguments (line 1034)
        kwargs_42487 = {}
        # Getting the type of 'patch' (line 1034)
        patch_42484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 16), 'patch', False)
        # Obtaining the member 'update_from' of a type (line 1034)
        update_from_42485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 16), patch_42484, 'update_from')
        # Calling update_from(args, kwargs) (line 1034)
        update_from_call_result_42488 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 16), update_from_42485, *[collection_42486], **kwargs_42487)
        
        
        # Call to append(...): (line 1036)
        # Processing the call arguments (line 1036)
        # Getting the type of 'patch' (line 1036)
        patch_42491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 31), 'patch', False)
        # Processing the call keyword arguments (line 1036)
        kwargs_42492 = {}
        # Getting the type of 'artists' (line 1036)
        artists_42489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1036, 16), 'artists', False)
        # Obtaining the member 'append' of a type (line 1036)
        append_42490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1036, 16), artists_42489, 'append')
        # Calling append(args, kwargs) (line 1036)
        append_call_result_42493 = invoke(stypy.reporting.localization.Localization(__file__, 1036, 16), append_42490, *[patch_42491], **kwargs_42492)
        
        
        # Assigning a Call to a Name (line 1038):
        
        # Assigning a Call to a Name (line 1038):
        
        # Call to str_format(...): (line 1038)
        # Processing the call arguments (line 1038)
        # Getting the type of 'level' (line 1038)
        level_42495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 35), 'level', False)
        # Processing the call keyword arguments (line 1038)
        kwargs_42496 = {}
        # Getting the type of 'str_format' (line 1038)
        str_format_42494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 24), 'str_format', False)
        # Calling str_format(args, kwargs) (line 1038)
        str_format_call_result_42497 = invoke(stypy.reporting.localization.Localization(__file__, 1038, 24), str_format_42494, *[level_42495], **kwargs_42496)
        
        # Assigning a type to the variable 'level' (line 1038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1038, 16), 'level', str_format_call_result_42497)
        
        # Call to append(...): (line 1039)
        # Processing the call arguments (line 1039)
        unicode_42500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 30), 'unicode', u'$%s = %s$')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1039)
        tuple_42501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 46), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1039)
        # Adding element type (line 1039)
        # Getting the type of 'variable_name' (line 1039)
        variable_name_42502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 46), 'variable_name', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 46), tuple_42501, variable_name_42502)
        # Adding element type (line 1039)
        # Getting the type of 'level' (line 1039)
        level_42503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 61), 'level', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1039, 46), tuple_42501, level_42503)
        
        # Applying the binary operator '%' (line 1039)
        result_mod_42504 = python_operator(stypy.reporting.localization.Localization(__file__, 1039, 30), '%', unicode_42500, tuple_42501)
        
        # Processing the call keyword arguments (line 1039)
        kwargs_42505 = {}
        # Getting the type of 'labels' (line 1039)
        labels_42498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 16), 'labels', False)
        # Obtaining the member 'append' of a type (line 1039)
        append_42499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1039, 16), labels_42498, 'append')
        # Calling append(args, kwargs) (line 1039)
        append_call_result_42506 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 16), append_42499, *[result_mod_42504], **kwargs_42505)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1004)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1041)
        tuple_42507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1041)
        # Adding element type (line 1041)
        # Getting the type of 'artists' (line 1041)
        artists_42508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 15), 'artists')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 15), tuple_42507, artists_42508)
        # Adding element type (line 1041)
        # Getting the type of 'labels' (line 1041)
        labels_42509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 24), 'labels')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1041, 15), tuple_42507, labels_42509)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1041)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1041, 8), 'stypy_return_type', tuple_42507)
        
        # ################# End of 'legend_elements(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'legend_elements' in the type store
        # Getting the type of 'stypy_return_type' (line 989)
        stypy_return_type_42510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 989, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42510)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'legend_elements'
        return stypy_return_type_42510


    @norecursion
    def _process_args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_args'
        module_type_store = module_type_store.open_function_context('_process_args', 1043, 4, False)
        # Assigning a type to the variable 'self' (line 1044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet._process_args.__dict__.__setitem__('stypy_localization', localization)
        ContourSet._process_args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet._process_args.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet._process_args.__dict__.__setitem__('stypy_function_name', 'ContourSet._process_args')
        ContourSet._process_args.__dict__.__setitem__('stypy_param_names_list', [])
        ContourSet._process_args.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        ContourSet._process_args.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        ContourSet._process_args.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet._process_args.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet._process_args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet._process_args.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet._process_args', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_args', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_args(...)' code ##################

        unicode_42511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, (-1)), 'unicode', u'\n        Process *args* and *kwargs*; override in derived classes.\n\n        Must set self.levels, self.zmin and self.zmax, and update axes\n        limits.\n        ')
        
        # Assigning a Subscript to a Attribute (line 1050):
        
        # Assigning a Subscript to a Attribute (line 1050):
        
        # Obtaining the type of the subscript
        int_42512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1050, 27), 'int')
        # Getting the type of 'args' (line 1050)
        args_42513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 22), 'args')
        # Obtaining the member '__getitem__' of a type (line 1050)
        getitem___42514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 22), args_42513, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1050)
        subscript_call_result_42515 = invoke(stypy.reporting.localization.Localization(__file__, 1050, 22), getitem___42514, int_42512)
        
        # Getting the type of 'self' (line 1050)
        self_42516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1050, 8), 'self')
        # Setting the type of the member 'levels' of a type (line 1050)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1050, 8), self_42516, 'levels', subscript_call_result_42515)
        
        # Assigning a Subscript to a Attribute (line 1051):
        
        # Assigning a Subscript to a Attribute (line 1051):
        
        # Obtaining the type of the subscript
        int_42517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1051, 28), 'int')
        # Getting the type of 'args' (line 1051)
        args_42518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 23), 'args')
        # Obtaining the member '__getitem__' of a type (line 1051)
        getitem___42519 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 23), args_42518, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1051)
        subscript_call_result_42520 = invoke(stypy.reporting.localization.Localization(__file__, 1051, 23), getitem___42519, int_42517)
        
        # Getting the type of 'self' (line 1051)
        self_42521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1051, 8), 'self')
        # Setting the type of the member 'allsegs' of a type (line 1051)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1051, 8), self_42521, 'allsegs', subscript_call_result_42520)
        
        # Assigning a BoolOp to a Attribute (line 1052):
        
        # Assigning a BoolOp to a Attribute (line 1052):
        
        # Evaluating a boolean operation
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 1052)
        # Processing the call arguments (line 1052)
        # Getting the type of 'args' (line 1052)
        args_42523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 28), 'args', False)
        # Processing the call keyword arguments (line 1052)
        kwargs_42524 = {}
        # Getting the type of 'len' (line 1052)
        len_42522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 24), 'len', False)
        # Calling len(args, kwargs) (line 1052)
        len_call_result_42525 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 24), len_42522, *[args_42523], **kwargs_42524)
        
        int_42526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 36), 'int')
        # Applying the binary operator '>' (line 1052)
        result_gt_42527 = python_operator(stypy.reporting.localization.Localization(__file__, 1052, 24), '>', len_call_result_42525, int_42526)
        
        
        # Obtaining the type of the subscript
        int_42528 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 47), 'int')
        # Getting the type of 'args' (line 1052)
        args_42529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 42), 'args')
        # Obtaining the member '__getitem__' of a type (line 1052)
        getitem___42530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 42), args_42529, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1052)
        subscript_call_result_42531 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 42), getitem___42530, int_42528)
        
        # Applying the binary operator 'and' (line 1052)
        result_and_keyword_42532 = python_operator(stypy.reporting.localization.Localization(__file__, 1052, 24), 'and', result_gt_42527, subscript_call_result_42531)
        
        # Getting the type of 'None' (line 1052)
        None_42533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 53), 'None')
        # Applying the binary operator 'or' (line 1052)
        result_or_keyword_42534 = python_operator(stypy.reporting.localization.Localization(__file__, 1052, 24), 'or', result_and_keyword_42532, None_42533)
        
        # Getting the type of 'self' (line 1052)
        self_42535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'self')
        # Setting the type of the member 'allkinds' of a type (line 1052)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 8), self_42535, 'allkinds', result_or_keyword_42534)
        
        # Assigning a Call to a Attribute (line 1053):
        
        # Assigning a Call to a Attribute (line 1053):
        
        # Call to max(...): (line 1053)
        # Processing the call arguments (line 1053)
        # Getting the type of 'self' (line 1053)
        self_42538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 27), 'self', False)
        # Obtaining the member 'levels' of a type (line 1053)
        levels_42539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 27), self_42538, 'levels')
        # Processing the call keyword arguments (line 1053)
        kwargs_42540 = {}
        # Getting the type of 'np' (line 1053)
        np_42536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 20), 'np', False)
        # Obtaining the member 'max' of a type (line 1053)
        max_42537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 20), np_42536, 'max')
        # Calling max(args, kwargs) (line 1053)
        max_call_result_42541 = invoke(stypy.reporting.localization.Localization(__file__, 1053, 20), max_42537, *[levels_42539], **kwargs_42540)
        
        # Getting the type of 'self' (line 1053)
        self_42542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 8), 'self')
        # Setting the type of the member 'zmax' of a type (line 1053)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 8), self_42542, 'zmax', max_call_result_42541)
        
        # Assigning a Call to a Attribute (line 1054):
        
        # Assigning a Call to a Attribute (line 1054):
        
        # Call to min(...): (line 1054)
        # Processing the call arguments (line 1054)
        # Getting the type of 'self' (line 1054)
        self_42545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 27), 'self', False)
        # Obtaining the member 'levels' of a type (line 1054)
        levels_42546 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 27), self_42545, 'levels')
        # Processing the call keyword arguments (line 1054)
        kwargs_42547 = {}
        # Getting the type of 'np' (line 1054)
        np_42543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 20), 'np', False)
        # Obtaining the member 'min' of a type (line 1054)
        min_42544 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 20), np_42543, 'min')
        # Calling min(args, kwargs) (line 1054)
        min_call_result_42548 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 20), min_42544, *[levels_42546], **kwargs_42547)
        
        # Getting the type of 'self' (line 1054)
        self_42549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 8), 'self')
        # Setting the type of the member 'zmin' of a type (line 1054)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 8), self_42549, 'zmin', min_call_result_42548)
        
        # Assigning a Name to a Attribute (line 1055):
        
        # Assigning a Name to a Attribute (line 1055):
        # Getting the type of 'False' (line 1055)
        False_42550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 21), 'False')
        # Getting the type of 'self' (line 1055)
        self_42551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 8), 'self')
        # Setting the type of the member '_auto' of a type (line 1055)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1055, 8), self_42551, '_auto', False_42550)
        
        # Getting the type of 'self' (line 1058)
        self_42552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 11), 'self')
        # Obtaining the member 'filled' of a type (line 1058)
        filled_42553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1058, 11), self_42552, 'filled')
        # Testing the type of an if condition (line 1058)
        if_condition_42554 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1058, 8), filled_42553)
        # Assigning a type to the variable 'if_condition_42554' (line 1058)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1058, 8), 'if_condition_42554', if_condition_42554)
        # SSA begins for if statement (line 1058)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Call to len(...): (line 1059)
        # Processing the call arguments (line 1059)
        # Getting the type of 'self' (line 1059)
        self_42556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 19), 'self', False)
        # Obtaining the member 'allsegs' of a type (line 1059)
        allsegs_42557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1059, 19), self_42556, 'allsegs')
        # Processing the call keyword arguments (line 1059)
        kwargs_42558 = {}
        # Getting the type of 'len' (line 1059)
        len_42555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 15), 'len', False)
        # Calling len(args, kwargs) (line 1059)
        len_call_result_42559 = invoke(stypy.reporting.localization.Localization(__file__, 1059, 15), len_42555, *[allsegs_42557], **kwargs_42558)
        
        
        # Call to len(...): (line 1059)
        # Processing the call arguments (line 1059)
        # Getting the type of 'self' (line 1059)
        self_42561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 40), 'self', False)
        # Obtaining the member 'levels' of a type (line 1059)
        levels_42562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1059, 40), self_42561, 'levels')
        # Processing the call keyword arguments (line 1059)
        kwargs_42563 = {}
        # Getting the type of 'len' (line 1059)
        len_42560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 36), 'len', False)
        # Calling len(args, kwargs) (line 1059)
        len_call_result_42564 = invoke(stypy.reporting.localization.Localization(__file__, 1059, 36), len_42560, *[levels_42562], **kwargs_42563)
        
        int_42565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1059, 55), 'int')
        # Applying the binary operator '-' (line 1059)
        result_sub_42566 = python_operator(stypy.reporting.localization.Localization(__file__, 1059, 36), '-', len_call_result_42564, int_42565)
        
        # Applying the binary operator '!=' (line 1059)
        result_ne_42567 = python_operator(stypy.reporting.localization.Localization(__file__, 1059, 15), '!=', len_call_result_42559, result_sub_42566)
        
        # Testing the type of an if condition (line 1059)
        if_condition_42568 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1059, 12), result_ne_42567)
        # Assigning a type to the variable 'if_condition_42568' (line 1059)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1059, 12), 'if_condition_42568', if_condition_42568)
        # SSA begins for if statement (line 1059)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1060)
        # Processing the call arguments (line 1060)
        unicode_42570 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1060, 33), 'unicode', u'must be one less number of segments as levels')
        # Processing the call keyword arguments (line 1060)
        kwargs_42571 = {}
        # Getting the type of 'ValueError' (line 1060)
        ValueError_42569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1060)
        ValueError_call_result_42572 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 22), ValueError_42569, *[unicode_42570], **kwargs_42571)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1060, 16), ValueError_call_result_42572, 'raise parameter', BaseException)
        # SSA join for if statement (line 1059)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1058)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to len(...): (line 1063)
        # Processing the call arguments (line 1063)
        # Getting the type of 'self' (line 1063)
        self_42574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 19), 'self', False)
        # Obtaining the member 'allsegs' of a type (line 1063)
        allsegs_42575 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1063, 19), self_42574, 'allsegs')
        # Processing the call keyword arguments (line 1063)
        kwargs_42576 = {}
        # Getting the type of 'len' (line 1063)
        len_42573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 15), 'len', False)
        # Calling len(args, kwargs) (line 1063)
        len_call_result_42577 = invoke(stypy.reporting.localization.Localization(__file__, 1063, 15), len_42573, *[allsegs_42575], **kwargs_42576)
        
        
        # Call to len(...): (line 1063)
        # Processing the call arguments (line 1063)
        # Getting the type of 'self' (line 1063)
        self_42579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 40), 'self', False)
        # Obtaining the member 'levels' of a type (line 1063)
        levels_42580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1063, 40), self_42579, 'levels')
        # Processing the call keyword arguments (line 1063)
        kwargs_42581 = {}
        # Getting the type of 'len' (line 1063)
        len_42578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 36), 'len', False)
        # Calling len(args, kwargs) (line 1063)
        len_call_result_42582 = invoke(stypy.reporting.localization.Localization(__file__, 1063, 36), len_42578, *[levels_42580], **kwargs_42581)
        
        # Applying the binary operator '!=' (line 1063)
        result_ne_42583 = python_operator(stypy.reporting.localization.Localization(__file__, 1063, 15), '!=', len_call_result_42577, len_call_result_42582)
        
        # Testing the type of an if condition (line 1063)
        if_condition_42584 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1063, 12), result_ne_42583)
        # Assigning a type to the variable 'if_condition_42584' (line 1063)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1063, 12), 'if_condition_42584', if_condition_42584)
        # SSA begins for if statement (line 1063)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1064)
        # Processing the call arguments (line 1064)
        unicode_42586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1064, 33), 'unicode', u'must be same number of segments as levels')
        # Processing the call keyword arguments (line 1064)
        kwargs_42587 = {}
        # Getting the type of 'ValueError' (line 1064)
        ValueError_42585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1064, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1064)
        ValueError_call_result_42588 = invoke(stypy.reporting.localization.Localization(__file__, 1064, 22), ValueError_42585, *[unicode_42586], **kwargs_42587)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1064, 16), ValueError_call_result_42588, 'raise parameter', BaseException)
        # SSA join for if statement (line 1063)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1058)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 1067)
        self_42589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 12), 'self')
        # Obtaining the member 'allkinds' of a type (line 1067)
        allkinds_42590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1067, 12), self_42589, 'allkinds')
        # Getting the type of 'None' (line 1067)
        None_42591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1067, 33), 'None')
        # Applying the binary operator 'isnot' (line 1067)
        result_is_not_42592 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 12), 'isnot', allkinds_42590, None_42591)
        
        
        
        # Call to len(...): (line 1068)
        # Processing the call arguments (line 1068)
        # Getting the type of 'self' (line 1068)
        self_42594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 20), 'self', False)
        # Obtaining the member 'allkinds' of a type (line 1068)
        allkinds_42595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 20), self_42594, 'allkinds')
        # Processing the call keyword arguments (line 1068)
        kwargs_42596 = {}
        # Getting the type of 'len' (line 1068)
        len_42593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 16), 'len', False)
        # Calling len(args, kwargs) (line 1068)
        len_call_result_42597 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 16), len_42593, *[allkinds_42595], **kwargs_42596)
        
        
        # Call to len(...): (line 1068)
        # Processing the call arguments (line 1068)
        # Getting the type of 'self' (line 1068)
        self_42599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 42), 'self', False)
        # Obtaining the member 'allsegs' of a type (line 1068)
        allsegs_42600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1068, 42), self_42599, 'allsegs')
        # Processing the call keyword arguments (line 1068)
        kwargs_42601 = {}
        # Getting the type of 'len' (line 1068)
        len_42598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 38), 'len', False)
        # Calling len(args, kwargs) (line 1068)
        len_call_result_42602 = invoke(stypy.reporting.localization.Localization(__file__, 1068, 38), len_42598, *[allsegs_42600], **kwargs_42601)
        
        # Applying the binary operator '!=' (line 1068)
        result_ne_42603 = python_operator(stypy.reporting.localization.Localization(__file__, 1068, 16), '!=', len_call_result_42597, len_call_result_42602)
        
        # Applying the binary operator 'and' (line 1067)
        result_and_keyword_42604 = python_operator(stypy.reporting.localization.Localization(__file__, 1067, 12), 'and', result_is_not_42592, result_ne_42603)
        
        # Testing the type of an if condition (line 1067)
        if_condition_42605 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1067, 8), result_and_keyword_42604)
        # Assigning a type to the variable 'if_condition_42605' (line 1067)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1067, 8), 'if_condition_42605', if_condition_42605)
        # SSA begins for if statement (line 1067)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1069)
        # Processing the call arguments (line 1069)
        unicode_42607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1069, 29), 'unicode', u'allkinds has different length to allsegs')
        # Processing the call keyword arguments (line 1069)
        kwargs_42608 = {}
        # Getting the type of 'ValueError' (line 1069)
        ValueError_42606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1069, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1069)
        ValueError_call_result_42609 = invoke(stypy.reporting.localization.Localization(__file__, 1069, 18), ValueError_42606, *[unicode_42607], **kwargs_42608)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1069, 12), ValueError_call_result_42609, 'raise parameter', BaseException)
        # SSA join for if statement (line 1067)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a ListComp to a Name (line 1072):
        
        # Assigning a ListComp to a Name (line 1072):
        # Calculating list comprehension
        # Calculating comprehension expression
        # Getting the type of 'self' (line 1072)
        self_42611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 36), 'self')
        # Obtaining the member 'allsegs' of a type (line 1072)
        allsegs_42612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 36), self_42611, 'allsegs')
        comprehension_42613 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1072, 23), allsegs_42612)
        # Assigning a type to the variable 'seg' (line 1072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1072, 23), 'seg', comprehension_42613)
        # Calculating comprehension expression
        # Getting the type of 'seg' (line 1072)
        seg_42614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 58), 'seg')
        comprehension_42615 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1072, 23), seg_42614)
        # Assigning a type to the variable 's' (line 1072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1072, 23), 's', comprehension_42615)
        # Getting the type of 's' (line 1072)
        s_42610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 23), 's')
        list_42616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1072, 23), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1072, 23), list_42616, s_42610)
        # Assigning a type to the variable 'flatseglist' (line 1072)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1072, 8), 'flatseglist', list_42616)
        
        # Assigning a Call to a Name (line 1073):
        
        # Assigning a Call to a Name (line 1073):
        
        # Call to concatenate(...): (line 1073)
        # Processing the call arguments (line 1073)
        # Getting the type of 'flatseglist' (line 1073)
        flatseglist_42619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 32), 'flatseglist', False)
        # Processing the call keyword arguments (line 1073)
        int_42620 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1073, 50), 'int')
        keyword_42621 = int_42620
        kwargs_42622 = {'axis': keyword_42621}
        # Getting the type of 'np' (line 1073)
        np_42617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 17), 'np', False)
        # Obtaining the member 'concatenate' of a type (line 1073)
        concatenate_42618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1073, 17), np_42617, 'concatenate')
        # Calling concatenate(args, kwargs) (line 1073)
        concatenate_call_result_42623 = invoke(stypy.reporting.localization.Localization(__file__, 1073, 17), concatenate_42618, *[flatseglist_42619], **kwargs_42622)
        
        # Assigning a type to the variable 'points' (line 1073)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1073, 8), 'points', concatenate_call_result_42623)
        
        # Assigning a Call to a Attribute (line 1074):
        
        # Assigning a Call to a Attribute (line 1074):
        
        # Call to min(...): (line 1074)
        # Processing the call keyword arguments (line 1074)
        int_42626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1074, 37), 'int')
        keyword_42627 = int_42626
        kwargs_42628 = {'axis': keyword_42627}
        # Getting the type of 'points' (line 1074)
        points_42624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 21), 'points', False)
        # Obtaining the member 'min' of a type (line 1074)
        min_42625 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 21), points_42624, 'min')
        # Calling min(args, kwargs) (line 1074)
        min_call_result_42629 = invoke(stypy.reporting.localization.Localization(__file__, 1074, 21), min_42625, *[], **kwargs_42628)
        
        # Getting the type of 'self' (line 1074)
        self_42630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'self')
        # Setting the type of the member '_mins' of a type (line 1074)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 8), self_42630, '_mins', min_call_result_42629)
        
        # Assigning a Call to a Attribute (line 1075):
        
        # Assigning a Call to a Attribute (line 1075):
        
        # Call to max(...): (line 1075)
        # Processing the call keyword arguments (line 1075)
        int_42633 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1075, 37), 'int')
        keyword_42634 = int_42633
        kwargs_42635 = {'axis': keyword_42634}
        # Getting the type of 'points' (line 1075)
        points_42631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 21), 'points', False)
        # Obtaining the member 'max' of a type (line 1075)
        max_42632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 21), points_42631, 'max')
        # Calling max(args, kwargs) (line 1075)
        max_call_result_42636 = invoke(stypy.reporting.localization.Localization(__file__, 1075, 21), max_42632, *[], **kwargs_42635)
        
        # Getting the type of 'self' (line 1075)
        self_42637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 8), 'self')
        # Setting the type of the member '_maxs' of a type (line 1075)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 8), self_42637, '_maxs', max_call_result_42636)
        # Getting the type of 'kwargs' (line 1077)
        kwargs_42638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 15), 'kwargs')
        # Assigning a type to the variable 'stypy_return_type' (line 1077)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1077, 8), 'stypy_return_type', kwargs_42638)
        
        # ################# End of '_process_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_args' in the type store
        # Getting the type of 'stypy_return_type' (line 1043)
        stypy_return_type_42639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42639)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_args'
        return stypy_return_type_42639


    @norecursion
    def _get_allsegs_and_allkinds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_allsegs_and_allkinds'
        module_type_store = module_type_store.open_function_context('_get_allsegs_and_allkinds', 1079, 4, False)
        # Assigning a type to the variable 'self' (line 1080)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1080, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_localization', localization)
        ContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_function_name', 'ContourSet._get_allsegs_and_allkinds')
        ContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_param_names_list', [])
        ContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet._get_allsegs_and_allkinds', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_allsegs_and_allkinds', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_allsegs_and_allkinds(...)' code ##################

        unicode_42640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, (-1)), 'unicode', u'\n        Override in derived classes to create and return allsegs and allkinds.\n        allkinds can be None.\n        ')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1084)
        tuple_42641 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1084, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1084)
        # Adding element type (line 1084)
        # Getting the type of 'self' (line 1084)
        self_42642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 15), 'self')
        # Obtaining the member 'allsegs' of a type (line 1084)
        allsegs_42643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1084, 15), self_42642, 'allsegs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1084, 15), tuple_42641, allsegs_42643)
        # Adding element type (line 1084)
        # Getting the type of 'self' (line 1084)
        self_42644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1084, 29), 'self')
        # Obtaining the member 'allkinds' of a type (line 1084)
        allkinds_42645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1084, 29), self_42644, 'allkinds')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1084, 15), tuple_42641, allkinds_42645)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1084)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1084, 8), 'stypy_return_type', tuple_42641)
        
        # ################# End of '_get_allsegs_and_allkinds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_allsegs_and_allkinds' in the type store
        # Getting the type of 'stypy_return_type' (line 1079)
        stypy_return_type_42646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42646)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_allsegs_and_allkinds'
        return stypy_return_type_42646


    @norecursion
    def _get_lowers_and_uppers(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_lowers_and_uppers'
        module_type_store = module_type_store.open_function_context('_get_lowers_and_uppers', 1086, 4, False)
        # Assigning a type to the variable 'self' (line 1087)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1087, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet._get_lowers_and_uppers.__dict__.__setitem__('stypy_localization', localization)
        ContourSet._get_lowers_and_uppers.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet._get_lowers_and_uppers.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet._get_lowers_and_uppers.__dict__.__setitem__('stypy_function_name', 'ContourSet._get_lowers_and_uppers')
        ContourSet._get_lowers_and_uppers.__dict__.__setitem__('stypy_param_names_list', [])
        ContourSet._get_lowers_and_uppers.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet._get_lowers_and_uppers.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet._get_lowers_and_uppers.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet._get_lowers_and_uppers.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet._get_lowers_and_uppers.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet._get_lowers_and_uppers.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet._get_lowers_and_uppers', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_lowers_and_uppers', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_lowers_and_uppers(...)' code ##################

        unicode_42647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1089, (-1)), 'unicode', u'\n        Return (lowers,uppers) for filled contours.\n        ')
        
        # Assigning a Subscript to a Name (line 1090):
        
        # Assigning a Subscript to a Name (line 1090):
        
        # Obtaining the type of the subscript
        int_42648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 31), 'int')
        slice_42649 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1090, 17), None, int_42648, None)
        # Getting the type of 'self' (line 1090)
        self_42650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1090, 17), 'self')
        # Obtaining the member '_levels' of a type (line 1090)
        _levels_42651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 17), self_42650, '_levels')
        # Obtaining the member '__getitem__' of a type (line 1090)
        getitem___42652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1090, 17), _levels_42651, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1090)
        subscript_call_result_42653 = invoke(stypy.reporting.localization.Localization(__file__, 1090, 17), getitem___42652, slice_42649)
        
        # Assigning a type to the variable 'lowers' (line 1090)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1090, 8), 'lowers', subscript_call_result_42653)
        
        
        # Getting the type of 'self' (line 1091)
        self_42654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 11), 'self')
        # Obtaining the member 'zmin' of a type (line 1091)
        zmin_42655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 11), self_42654, 'zmin')
        
        # Obtaining the type of the subscript
        int_42656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1091, 31), 'int')
        # Getting the type of 'lowers' (line 1091)
        lowers_42657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1091, 24), 'lowers')
        # Obtaining the member '__getitem__' of a type (line 1091)
        getitem___42658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1091, 24), lowers_42657, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1091)
        subscript_call_result_42659 = invoke(stypy.reporting.localization.Localization(__file__, 1091, 24), getitem___42658, int_42656)
        
        # Applying the binary operator '==' (line 1091)
        result_eq_42660 = python_operator(stypy.reporting.localization.Localization(__file__, 1091, 11), '==', zmin_42655, subscript_call_result_42659)
        
        # Testing the type of an if condition (line 1091)
        if_condition_42661 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1091, 8), result_eq_42660)
        # Assigning a type to the variable 'if_condition_42661' (line 1091)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1091, 8), 'if_condition_42661', if_condition_42661)
        # SSA begins for if statement (line 1091)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1093):
        
        # Assigning a Call to a Name (line 1093):
        
        # Call to copy(...): (line 1093)
        # Processing the call keyword arguments (line 1093)
        kwargs_42664 = {}
        # Getting the type of 'lowers' (line 1093)
        lowers_42662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1093, 21), 'lowers', False)
        # Obtaining the member 'copy' of a type (line 1093)
        copy_42663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1093, 21), lowers_42662, 'copy')
        # Calling copy(args, kwargs) (line 1093)
        copy_call_result_42665 = invoke(stypy.reporting.localization.Localization(__file__, 1093, 21), copy_42663, *[], **kwargs_42664)
        
        # Assigning a type to the variable 'lowers' (line 1093)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1093, 12), 'lowers', copy_call_result_42665)
        
        # Getting the type of 'self' (line 1094)
        self_42666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1094, 15), 'self')
        # Obtaining the member 'logscale' of a type (line 1094)
        logscale_42667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1094, 15), self_42666, 'logscale')
        # Testing the type of an if condition (line 1094)
        if_condition_42668 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1094, 12), logscale_42667)
        # Assigning a type to the variable 'if_condition_42668' (line 1094)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1094, 12), 'if_condition_42668', if_condition_42668)
        # SSA begins for if statement (line 1094)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Subscript (line 1095):
        
        # Assigning a BinOp to a Subscript (line 1095):
        float_42669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 28), 'float')
        # Getting the type of 'self' (line 1095)
        self_42670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 35), 'self')
        # Obtaining the member 'zmin' of a type (line 1095)
        zmin_42671 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1095, 35), self_42670, 'zmin')
        # Applying the binary operator '*' (line 1095)
        result_mul_42672 = python_operator(stypy.reporting.localization.Localization(__file__, 1095, 28), '*', float_42669, zmin_42671)
        
        # Getting the type of 'lowers' (line 1095)
        lowers_42673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1095, 16), 'lowers')
        int_42674 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1095, 23), 'int')
        # Storing an element on a container (line 1095)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1095, 16), lowers_42673, (int_42674, result_mul_42672))
        # SSA branch for the else part of an if statement (line 1094)
        module_type_store.open_ssa_branch('else')
        
        # Getting the type of 'lowers' (line 1097)
        lowers_42675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 16), 'lowers')
        
        # Obtaining the type of the subscript
        int_42676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1097, 23), 'int')
        # Getting the type of 'lowers' (line 1097)
        lowers_42677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 16), 'lowers')
        # Obtaining the member '__getitem__' of a type (line 1097)
        getitem___42678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1097, 16), lowers_42677, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1097)
        subscript_call_result_42679 = invoke(stypy.reporting.localization.Localization(__file__, 1097, 16), getitem___42678, int_42676)
        
        int_42680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1097, 29), 'int')
        # Applying the binary operator '-=' (line 1097)
        result_isub_42681 = python_operator(stypy.reporting.localization.Localization(__file__, 1097, 16), '-=', subscript_call_result_42679, int_42680)
        # Getting the type of 'lowers' (line 1097)
        lowers_42682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1097, 16), 'lowers')
        int_42683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1097, 23), 'int')
        # Storing an element on a container (line 1097)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1097, 16), lowers_42682, (int_42683, result_isub_42681))
        
        # SSA join for if statement (line 1094)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1091)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Subscript to a Name (line 1098):
        
        # Assigning a Subscript to a Name (line 1098):
        
        # Obtaining the type of the subscript
        int_42684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1098, 30), 'int')
        slice_42685 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1098, 17), int_42684, None, None)
        # Getting the type of 'self' (line 1098)
        self_42686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1098, 17), 'self')
        # Obtaining the member '_levels' of a type (line 1098)
        _levels_42687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1098, 17), self_42686, '_levels')
        # Obtaining the member '__getitem__' of a type (line 1098)
        getitem___42688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1098, 17), _levels_42687, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1098)
        subscript_call_result_42689 = invoke(stypy.reporting.localization.Localization(__file__, 1098, 17), getitem___42688, slice_42685)
        
        # Assigning a type to the variable 'uppers' (line 1098)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1098, 8), 'uppers', subscript_call_result_42689)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1099)
        tuple_42690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1099, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1099)
        # Adding element type (line 1099)
        # Getting the type of 'lowers' (line 1099)
        lowers_42691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 16), 'lowers')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1099, 16), tuple_42690, lowers_42691)
        # Adding element type (line 1099)
        # Getting the type of 'uppers' (line 1099)
        uppers_42692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1099, 24), 'uppers')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1099, 16), tuple_42690, uppers_42692)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1099)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1099, 8), 'stypy_return_type', tuple_42690)
        
        # ################# End of '_get_lowers_and_uppers(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_lowers_and_uppers' in the type store
        # Getting the type of 'stypy_return_type' (line 1086)
        stypy_return_type_42693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1086, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42693)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_lowers_and_uppers'
        return stypy_return_type_42693


    @norecursion
    def _make_paths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_make_paths'
        module_type_store = module_type_store.open_function_context('_make_paths', 1101, 4, False)
        # Assigning a type to the variable 'self' (line 1102)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1102, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet._make_paths.__dict__.__setitem__('stypy_localization', localization)
        ContourSet._make_paths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet._make_paths.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet._make_paths.__dict__.__setitem__('stypy_function_name', 'ContourSet._make_paths')
        ContourSet._make_paths.__dict__.__setitem__('stypy_param_names_list', ['segs', 'kinds'])
        ContourSet._make_paths.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet._make_paths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet._make_paths.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet._make_paths.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet._make_paths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet._make_paths.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet._make_paths', ['segs', 'kinds'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_make_paths', localization, ['segs', 'kinds'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_make_paths(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1102)
        # Getting the type of 'kinds' (line 1102)
        kinds_42694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 8), 'kinds')
        # Getting the type of 'None' (line 1102)
        None_42695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 24), 'None')
        
        (may_be_42696, more_types_in_union_42697) = may_not_be_none(kinds_42694, None_42695)

        if may_be_42696:

            if more_types_in_union_42697:
                # Runtime conditional SSA (line 1102)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Calculating list comprehension
            # Calculating comprehension expression
            
            # Call to zip(...): (line 1104)
            # Processing the call arguments (line 1104)
            # Getting the type of 'segs' (line 1104)
            segs_42706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 41), 'segs', False)
            # Getting the type of 'kinds' (line 1104)
            kinds_42707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 47), 'kinds', False)
            # Processing the call keyword arguments (line 1104)
            kwargs_42708 = {}
            # Getting the type of 'zip' (line 1104)
            zip_42705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 37), 'zip', False)
            # Calling zip(args, kwargs) (line 1104)
            zip_call_result_42709 = invoke(stypy.reporting.localization.Localization(__file__, 1104, 37), zip_42705, *[segs_42706, kinds_42707], **kwargs_42708)
            
            comprehension_42710 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1103, 20), zip_call_result_42709)
            # Assigning a type to the variable 'seg' (line 1103)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 20), 'seg', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1103, 20), comprehension_42710))
            # Assigning a type to the variable 'kind' (line 1103)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 20), 'kind', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1103, 20), comprehension_42710))
            
            # Call to Path(...): (line 1103)
            # Processing the call arguments (line 1103)
            # Getting the type of 'seg' (line 1103)
            seg_42700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 31), 'seg', False)
            # Processing the call keyword arguments (line 1103)
            # Getting the type of 'kind' (line 1103)
            kind_42701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 42), 'kind', False)
            keyword_42702 = kind_42701
            kwargs_42703 = {'codes': keyword_42702}
            # Getting the type of 'mpath' (line 1103)
            mpath_42698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 20), 'mpath', False)
            # Obtaining the member 'Path' of a type (line 1103)
            Path_42699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1103, 20), mpath_42698, 'Path')
            # Calling Path(args, kwargs) (line 1103)
            Path_call_result_42704 = invoke(stypy.reporting.localization.Localization(__file__, 1103, 20), Path_42699, *[seg_42700], **kwargs_42703)
            
            list_42711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1103, 20), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1103, 20), list_42711, Path_call_result_42704)
            # Assigning a type to the variable 'stypy_return_type' (line 1103)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1103, 12), 'stypy_return_type', list_42711)

            if more_types_in_union_42697:
                # Runtime conditional SSA for else branch (line 1102)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_42696) or more_types_in_union_42697):
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'segs' (line 1106)
            segs_42717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 47), 'segs')
            comprehension_42718 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1106, 20), segs_42717)
            # Assigning a type to the variable 'seg' (line 1106)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 20), 'seg', comprehension_42718)
            
            # Call to Path(...): (line 1106)
            # Processing the call arguments (line 1106)
            # Getting the type of 'seg' (line 1106)
            seg_42714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 31), 'seg', False)
            # Processing the call keyword arguments (line 1106)
            kwargs_42715 = {}
            # Getting the type of 'mpath' (line 1106)
            mpath_42712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1106, 20), 'mpath', False)
            # Obtaining the member 'Path' of a type (line 1106)
            Path_42713 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1106, 20), mpath_42712, 'Path')
            # Calling Path(args, kwargs) (line 1106)
            Path_call_result_42716 = invoke(stypy.reporting.localization.Localization(__file__, 1106, 20), Path_42713, *[seg_42714], **kwargs_42715)
            
            list_42719 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1106, 20), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1106, 20), list_42719, Path_call_result_42716)
            # Assigning a type to the variable 'stypy_return_type' (line 1106)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1106, 12), 'stypy_return_type', list_42719)

            if (may_be_42696 and more_types_in_union_42697):
                # SSA join for if statement (line 1102)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '_make_paths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_make_paths' in the type store
        # Getting the type of 'stypy_return_type' (line 1101)
        stypy_return_type_42720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42720)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_make_paths'
        return stypy_return_type_42720


    @norecursion
    def changed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'changed'
        module_type_store = module_type_store.open_function_context('changed', 1108, 4, False)
        # Assigning a type to the variable 'self' (line 1109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet.changed.__dict__.__setitem__('stypy_localization', localization)
        ContourSet.changed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet.changed.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet.changed.__dict__.__setitem__('stypy_function_name', 'ContourSet.changed')
        ContourSet.changed.__dict__.__setitem__('stypy_param_names_list', [])
        ContourSet.changed.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet.changed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet.changed.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet.changed.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet.changed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet.changed.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet.changed', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'changed', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'changed(...)' code ##################

        
        # Assigning a ListComp to a Name (line 1109):
        
        # Assigning a ListComp to a Name (line 1109):
        # Calculating list comprehension
        # Calculating comprehension expression
        
        # Call to to_rgba(...): (line 1110)
        # Processing the call arguments (line 1110)
        # Getting the type of 'self' (line 1110)
        self_42728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 44), 'self', False)
        # Obtaining the member 'cvalues' of a type (line 1110)
        cvalues_42729 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 44), self_42728, 'cvalues')
        # Processing the call keyword arguments (line 1110)
        # Getting the type of 'self' (line 1110)
        self_42730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 64), 'self', False)
        # Obtaining the member 'alpha' of a type (line 1110)
        alpha_42731 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 64), self_42730, 'alpha')
        keyword_42732 = alpha_42731
        kwargs_42733 = {'alpha': keyword_42732}
        # Getting the type of 'self' (line 1110)
        self_42726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 31), 'self', False)
        # Obtaining the member 'to_rgba' of a type (line 1110)
        to_rgba_42727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 31), self_42726, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 1110)
        to_rgba_call_result_42734 = invoke(stypy.reporting.localization.Localization(__file__, 1110, 31), to_rgba_42727, *[cvalues_42729], **kwargs_42733)
        
        comprehension_42735 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 19), to_rgba_call_result_42734)
        # Assigning a type to the variable 'rgba' (line 1109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 19), 'rgba', comprehension_42735)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1109)
        tuple_42721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 20), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1109)
        # Adding element type (line 1109)
        
        # Call to tuple(...): (line 1109)
        # Processing the call arguments (line 1109)
        # Getting the type of 'rgba' (line 1109)
        rgba_42723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 26), 'rgba', False)
        # Processing the call keyword arguments (line 1109)
        kwargs_42724 = {}
        # Getting the type of 'tuple' (line 1109)
        tuple_42722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 20), 'tuple', False)
        # Calling tuple(args, kwargs) (line 1109)
        tuple_call_result_42725 = invoke(stypy.reporting.localization.Localization(__file__, 1109, 20), tuple_42722, *[rgba_42723], **kwargs_42724)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 20), tuple_42721, tuple_call_result_42725)
        
        list_42736 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1109, 19), 'list')
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1109, 19), list_42736, tuple_42721)
        # Assigning a type to the variable 'tcolors' (line 1109)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1109, 8), 'tcolors', list_42736)
        
        # Assigning a Name to a Attribute (line 1111):
        
        # Assigning a Name to a Attribute (line 1111):
        # Getting the type of 'tcolors' (line 1111)
        tcolors_42737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 23), 'tcolors')
        # Getting the type of 'self' (line 1111)
        self_42738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 8), 'self')
        # Setting the type of the member 'tcolors' of a type (line 1111)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1111, 8), self_42738, 'tcolors', tcolors_42737)
        
        # Assigning a BinOp to a Name (line 1112):
        
        # Assigning a BinOp to a Name (line 1112):
        # Getting the type of 'self' (line 1112)
        self_42739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 18), 'self')
        # Obtaining the member 'hatches' of a type (line 1112)
        hatches_42740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1112, 18), self_42739, 'hatches')
        
        # Call to len(...): (line 1112)
        # Processing the call arguments (line 1112)
        # Getting the type of 'tcolors' (line 1112)
        tcolors_42742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 37), 'tcolors', False)
        # Processing the call keyword arguments (line 1112)
        kwargs_42743 = {}
        # Getting the type of 'len' (line 1112)
        len_42741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1112, 33), 'len', False)
        # Calling len(args, kwargs) (line 1112)
        len_call_result_42744 = invoke(stypy.reporting.localization.Localization(__file__, 1112, 33), len_42741, *[tcolors_42742], **kwargs_42743)
        
        # Applying the binary operator '*' (line 1112)
        result_mul_42745 = python_operator(stypy.reporting.localization.Localization(__file__, 1112, 18), '*', hatches_42740, len_call_result_42744)
        
        # Assigning a type to the variable 'hatches' (line 1112)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1112, 8), 'hatches', result_mul_42745)
        
        
        # Call to zip(...): (line 1113)
        # Processing the call arguments (line 1113)
        # Getting the type of 'tcolors' (line 1113)
        tcolors_42747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 44), 'tcolors', False)
        # Getting the type of 'hatches' (line 1113)
        hatches_42748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 53), 'hatches', False)
        # Getting the type of 'self' (line 1114)
        self_42749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1114, 44), 'self', False)
        # Obtaining the member 'collections' of a type (line 1114)
        collections_42750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1114, 44), self_42749, 'collections')
        # Processing the call keyword arguments (line 1113)
        kwargs_42751 = {}
        # Getting the type of 'zip' (line 1113)
        zip_42746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 40), 'zip', False)
        # Calling zip(args, kwargs) (line 1113)
        zip_call_result_42752 = invoke(stypy.reporting.localization.Localization(__file__, 1113, 40), zip_42746, *[tcolors_42747, hatches_42748, collections_42750], **kwargs_42751)
        
        # Testing the type of a for loop iterable (line 1113)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1113, 8), zip_call_result_42752)
        # Getting the type of the for loop variable (line 1113)
        for_loop_var_42753 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1113, 8), zip_call_result_42752)
        # Assigning a type to the variable 'color' (line 1113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 8), 'color', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1113, 8), for_loop_var_42753))
        # Assigning a type to the variable 'hatch' (line 1113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 8), 'hatch', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1113, 8), for_loop_var_42753))
        # Assigning a type to the variable 'collection' (line 1113)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1113, 8), 'collection', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1113, 8), for_loop_var_42753))
        # SSA begins for a for statement (line 1113)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Getting the type of 'self' (line 1115)
        self_42754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 15), 'self')
        # Obtaining the member 'filled' of a type (line 1115)
        filled_42755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 15), self_42754, 'filled')
        # Testing the type of an if condition (line 1115)
        if_condition_42756 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1115, 12), filled_42755)
        # Assigning a type to the variable 'if_condition_42756' (line 1115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 12), 'if_condition_42756', if_condition_42756)
        # SSA begins for if statement (line 1115)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_facecolor(...): (line 1116)
        # Processing the call arguments (line 1116)
        # Getting the type of 'color' (line 1116)
        color_42759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 41), 'color', False)
        # Processing the call keyword arguments (line 1116)
        kwargs_42760 = {}
        # Getting the type of 'collection' (line 1116)
        collection_42757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 16), 'collection', False)
        # Obtaining the member 'set_facecolor' of a type (line 1116)
        set_facecolor_42758 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 16), collection_42757, 'set_facecolor')
        # Calling set_facecolor(args, kwargs) (line 1116)
        set_facecolor_call_result_42761 = invoke(stypy.reporting.localization.Localization(__file__, 1116, 16), set_facecolor_42758, *[color_42759], **kwargs_42760)
        
        
        # Call to set_hatch(...): (line 1118)
        # Processing the call arguments (line 1118)
        # Getting the type of 'hatch' (line 1118)
        hatch_42764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 37), 'hatch', False)
        # Processing the call keyword arguments (line 1118)
        kwargs_42765 = {}
        # Getting the type of 'collection' (line 1118)
        collection_42762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1118, 16), 'collection', False)
        # Obtaining the member 'set_hatch' of a type (line 1118)
        set_hatch_42763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1118, 16), collection_42762, 'set_hatch')
        # Calling set_hatch(args, kwargs) (line 1118)
        set_hatch_call_result_42766 = invoke(stypy.reporting.localization.Localization(__file__, 1118, 16), set_hatch_42763, *[hatch_42764], **kwargs_42765)
        
        # SSA branch for the else part of an if statement (line 1115)
        module_type_store.open_ssa_branch('else')
        
        # Call to set_color(...): (line 1120)
        # Processing the call arguments (line 1120)
        # Getting the type of 'color' (line 1120)
        color_42769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 37), 'color', False)
        # Processing the call keyword arguments (line 1120)
        kwargs_42770 = {}
        # Getting the type of 'collection' (line 1120)
        collection_42767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 16), 'collection', False)
        # Obtaining the member 'set_color' of a type (line 1120)
        set_color_42768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 16), collection_42767, 'set_color')
        # Calling set_color(args, kwargs) (line 1120)
        set_color_call_result_42771 = invoke(stypy.reporting.localization.Localization(__file__, 1120, 16), set_color_42768, *[color_42769], **kwargs_42770)
        
        # SSA join for if statement (line 1115)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Call to zip(...): (line 1121)
        # Processing the call arguments (line 1121)
        # Getting the type of 'self' (line 1121)
        self_42773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 29), 'self', False)
        # Obtaining the member 'labelTexts' of a type (line 1121)
        labelTexts_42774 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 29), self_42773, 'labelTexts')
        # Getting the type of 'self' (line 1121)
        self_42775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 46), 'self', False)
        # Obtaining the member 'labelCValues' of a type (line 1121)
        labelCValues_42776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1121, 46), self_42775, 'labelCValues')
        # Processing the call keyword arguments (line 1121)
        kwargs_42777 = {}
        # Getting the type of 'zip' (line 1121)
        zip_42772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1121, 25), 'zip', False)
        # Calling zip(args, kwargs) (line 1121)
        zip_call_result_42778 = invoke(stypy.reporting.localization.Localization(__file__, 1121, 25), zip_42772, *[labelTexts_42774, labelCValues_42776], **kwargs_42777)
        
        # Testing the type of a for loop iterable (line 1121)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1121, 8), zip_call_result_42778)
        # Getting the type of the for loop variable (line 1121)
        for_loop_var_42779 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1121, 8), zip_call_result_42778)
        # Assigning a type to the variable 'label' (line 1121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1121, 8), 'label', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1121, 8), for_loop_var_42779))
        # Assigning a type to the variable 'cv' (line 1121)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1121, 8), 'cv', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1121, 8), for_loop_var_42779))
        # SSA begins for a for statement (line 1121)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Call to set_alpha(...): (line 1122)
        # Processing the call arguments (line 1122)
        # Getting the type of 'self' (line 1122)
        self_42782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 28), 'self', False)
        # Obtaining the member 'alpha' of a type (line 1122)
        alpha_42783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 28), self_42782, 'alpha')
        # Processing the call keyword arguments (line 1122)
        kwargs_42784 = {}
        # Getting the type of 'label' (line 1122)
        label_42780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1122, 12), 'label', False)
        # Obtaining the member 'set_alpha' of a type (line 1122)
        set_alpha_42781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1122, 12), label_42780, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 1122)
        set_alpha_call_result_42785 = invoke(stypy.reporting.localization.Localization(__file__, 1122, 12), set_alpha_42781, *[alpha_42783], **kwargs_42784)
        
        
        # Call to set_color(...): (line 1123)
        # Processing the call arguments (line 1123)
        
        # Call to to_rgba(...): (line 1123)
        # Processing the call arguments (line 1123)
        # Getting the type of 'cv' (line 1123)
        cv_42791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 55), 'cv', False)
        # Processing the call keyword arguments (line 1123)
        kwargs_42792 = {}
        # Getting the type of 'self' (line 1123)
        self_42788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 28), 'self', False)
        # Obtaining the member 'labelMappable' of a type (line 1123)
        labelMappable_42789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 28), self_42788, 'labelMappable')
        # Obtaining the member 'to_rgba' of a type (line 1123)
        to_rgba_42790 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 28), labelMappable_42789, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 1123)
        to_rgba_call_result_42793 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 28), to_rgba_42790, *[cv_42791], **kwargs_42792)
        
        # Processing the call keyword arguments (line 1123)
        kwargs_42794 = {}
        # Getting the type of 'label' (line 1123)
        label_42786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1123, 12), 'label', False)
        # Obtaining the member 'set_color' of a type (line 1123)
        set_color_42787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1123, 12), label_42786, 'set_color')
        # Calling set_color(args, kwargs) (line 1123)
        set_color_call_result_42795 = invoke(stypy.reporting.localization.Localization(__file__, 1123, 12), set_color_42787, *[to_rgba_call_result_42793], **kwargs_42794)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to changed(...): (line 1125)
        # Processing the call arguments (line 1125)
        # Getting the type of 'self' (line 1125)
        self_42799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 34), 'self', False)
        # Processing the call keyword arguments (line 1125)
        kwargs_42800 = {}
        # Getting the type of 'cm' (line 1125)
        cm_42796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 8), 'cm', False)
        # Obtaining the member 'ScalarMappable' of a type (line 1125)
        ScalarMappable_42797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 8), cm_42796, 'ScalarMappable')
        # Obtaining the member 'changed' of a type (line 1125)
        changed_42798 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 8), ScalarMappable_42797, 'changed')
        # Calling changed(args, kwargs) (line 1125)
        changed_call_result_42801 = invoke(stypy.reporting.localization.Localization(__file__, 1125, 8), changed_42798, *[self_42799], **kwargs_42800)
        
        
        # ################# End of 'changed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'changed' in the type store
        # Getting the type of 'stypy_return_type' (line 1108)
        stypy_return_type_42802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42802)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'changed'
        return stypy_return_type_42802


    @norecursion
    def _autolev(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_autolev'
        module_type_store = module_type_store.open_function_context('_autolev', 1127, 4, False)
        # Assigning a type to the variable 'self' (line 1128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet._autolev.__dict__.__setitem__('stypy_localization', localization)
        ContourSet._autolev.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet._autolev.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet._autolev.__dict__.__setitem__('stypy_function_name', 'ContourSet._autolev')
        ContourSet._autolev.__dict__.__setitem__('stypy_param_names_list', ['N'])
        ContourSet._autolev.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet._autolev.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet._autolev.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet._autolev.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet._autolev.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet._autolev.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet._autolev', ['N'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_autolev', localization, ['N'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_autolev(...)' code ##################

        unicode_42803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, (-1)), 'unicode', u'\n        Select contour levels to span the data.\n\n        We need two more levels for filled contours than for\n        line contours, because for the latter we need to specify\n        the lower and upper boundary of each range. For example,\n        a single contour boundary, say at z = 0, requires only\n        one contour line, but two filled regions, and therefore\n        three levels to provide boundaries for both regions.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1138)
        # Getting the type of 'self' (line 1138)
        self_42804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 11), 'self')
        # Obtaining the member 'locator' of a type (line 1138)
        locator_42805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 11), self_42804, 'locator')
        # Getting the type of 'None' (line 1138)
        None_42806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 27), 'None')
        
        (may_be_42807, more_types_in_union_42808) = may_be_none(locator_42805, None_42806)

        if may_be_42807:

            if more_types_in_union_42808:
                # Runtime conditional SSA (line 1138)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Getting the type of 'self' (line 1139)
            self_42809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 15), 'self')
            # Obtaining the member 'logscale' of a type (line 1139)
            logscale_42810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 15), self_42809, 'logscale')
            # Testing the type of an if condition (line 1139)
            if_condition_42811 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1139, 12), logscale_42810)
            # Assigning a type to the variable 'if_condition_42811' (line 1139)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1139, 12), 'if_condition_42811', if_condition_42811)
            # SSA begins for if statement (line 1139)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 1140):
            
            # Assigning a Call to a Attribute (line 1140):
            
            # Call to LogLocator(...): (line 1140)
            # Processing the call keyword arguments (line 1140)
            kwargs_42814 = {}
            # Getting the type of 'ticker' (line 1140)
            ticker_42812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 31), 'ticker', False)
            # Obtaining the member 'LogLocator' of a type (line 1140)
            LogLocator_42813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 31), ticker_42812, 'LogLocator')
            # Calling LogLocator(args, kwargs) (line 1140)
            LogLocator_call_result_42815 = invoke(stypy.reporting.localization.Localization(__file__, 1140, 31), LogLocator_42813, *[], **kwargs_42814)
            
            # Getting the type of 'self' (line 1140)
            self_42816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 16), 'self')
            # Setting the type of the member 'locator' of a type (line 1140)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 16), self_42816, 'locator', LogLocator_call_result_42815)
            # SSA branch for the else part of an if statement (line 1139)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Attribute (line 1142):
            
            # Assigning a Call to a Attribute (line 1142):
            
            # Call to MaxNLocator(...): (line 1142)
            # Processing the call arguments (line 1142)
            # Getting the type of 'N' (line 1142)
            N_42819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 50), 'N', False)
            int_42820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1142, 54), 'int')
            # Applying the binary operator '+' (line 1142)
            result_add_42821 = python_operator(stypy.reporting.localization.Localization(__file__, 1142, 50), '+', N_42819, int_42820)
            
            # Processing the call keyword arguments (line 1142)
            int_42822 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1142, 69), 'int')
            keyword_42823 = int_42822
            kwargs_42824 = {'min_n_ticks': keyword_42823}
            # Getting the type of 'ticker' (line 1142)
            ticker_42817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 31), 'ticker', False)
            # Obtaining the member 'MaxNLocator' of a type (line 1142)
            MaxNLocator_42818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1142, 31), ticker_42817, 'MaxNLocator')
            # Calling MaxNLocator(args, kwargs) (line 1142)
            MaxNLocator_call_result_42825 = invoke(stypy.reporting.localization.Localization(__file__, 1142, 31), MaxNLocator_42818, *[result_add_42821], **kwargs_42824)
            
            # Getting the type of 'self' (line 1142)
            self_42826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1142, 16), 'self')
            # Setting the type of the member 'locator' of a type (line 1142)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1142, 16), self_42826, 'locator', MaxNLocator_call_result_42825)
            # SSA join for if statement (line 1139)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_42808:
                # SSA join for if statement (line 1138)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 1144):
        
        # Assigning a Call to a Name (line 1144):
        
        # Call to tick_values(...): (line 1144)
        # Processing the call arguments (line 1144)
        # Getting the type of 'self' (line 1144)
        self_42830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 39), 'self', False)
        # Obtaining the member 'zmin' of a type (line 1144)
        zmin_42831 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 39), self_42830, 'zmin')
        # Getting the type of 'self' (line 1144)
        self_42832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 50), 'self', False)
        # Obtaining the member 'zmax' of a type (line 1144)
        zmax_42833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 50), self_42832, 'zmax')
        # Processing the call keyword arguments (line 1144)
        kwargs_42834 = {}
        # Getting the type of 'self' (line 1144)
        self_42827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1144, 14), 'self', False)
        # Obtaining the member 'locator' of a type (line 1144)
        locator_42828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 14), self_42827, 'locator')
        # Obtaining the member 'tick_values' of a type (line 1144)
        tick_values_42829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1144, 14), locator_42828, 'tick_values')
        # Calling tick_values(args, kwargs) (line 1144)
        tick_values_call_result_42835 = invoke(stypy.reporting.localization.Localization(__file__, 1144, 14), tick_values_42829, *[zmin_42831, zmax_42833], **kwargs_42834)
        
        # Assigning a type to the variable 'lev' (line 1144)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1144, 8), 'lev', tick_values_call_result_42835)
        
        # Assigning a Name to a Attribute (line 1145):
        
        # Assigning a Name to a Attribute (line 1145):
        # Getting the type of 'True' (line 1145)
        True_42836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 21), 'True')
        # Getting the type of 'self' (line 1145)
        self_42837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1145, 8), 'self')
        # Setting the type of the member '_auto' of a type (line 1145)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1145, 8), self_42837, '_auto', True_42836)
        # Getting the type of 'lev' (line 1146)
        lev_42838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 15), 'lev')
        # Assigning a type to the variable 'stypy_return_type' (line 1146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1146, 8), 'stypy_return_type', lev_42838)
        
        # ################# End of '_autolev(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_autolev' in the type store
        # Getting the type of 'stypy_return_type' (line 1127)
        stypy_return_type_42839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_42839)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_autolev'
        return stypy_return_type_42839


    @norecursion
    def _contour_level_args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_contour_level_args'
        module_type_store = module_type_store.open_function_context('_contour_level_args', 1148, 4, False)
        # Assigning a type to the variable 'self' (line 1149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1149, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet._contour_level_args.__dict__.__setitem__('stypy_localization', localization)
        ContourSet._contour_level_args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet._contour_level_args.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet._contour_level_args.__dict__.__setitem__('stypy_function_name', 'ContourSet._contour_level_args')
        ContourSet._contour_level_args.__dict__.__setitem__('stypy_param_names_list', ['z', 'args'])
        ContourSet._contour_level_args.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet._contour_level_args.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet._contour_level_args.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet._contour_level_args.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet._contour_level_args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet._contour_level_args.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet._contour_level_args', ['z', 'args'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_contour_level_args', localization, ['z', 'args'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_contour_level_args(...)' code ##################

        unicode_42840 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1151, (-1)), 'unicode', u'\n        Determine the contour levels and store in self.levels.\n        ')
        
        # Getting the type of 'self' (line 1152)
        self_42841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 11), 'self')
        # Obtaining the member 'filled' of a type (line 1152)
        filled_42842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1152, 11), self_42841, 'filled')
        # Testing the type of an if condition (line 1152)
        if_condition_42843 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1152, 8), filled_42842)
        # Assigning a type to the variable 'if_condition_42843' (line 1152)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1152, 8), 'if_condition_42843', if_condition_42843)
        # SSA begins for if statement (line 1152)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1153):
        
        # Assigning a Str to a Name (line 1153):
        unicode_42844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1153, 17), 'unicode', u'contourf')
        # Assigning a type to the variable 'fn' (line 1153)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1153, 12), 'fn', unicode_42844)
        # SSA branch for the else part of an if statement (line 1152)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 1155):
        
        # Assigning a Str to a Name (line 1155):
        unicode_42845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1155, 17), 'unicode', u'contour')
        # Assigning a type to the variable 'fn' (line 1155)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1155, 12), 'fn', unicode_42845)
        # SSA join for if statement (line 1152)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1156):
        
        # Assigning a Name to a Attribute (line 1156):
        # Getting the type of 'False' (line 1156)
        False_42846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 21), 'False')
        # Getting the type of 'self' (line 1156)
        self_42847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1156, 8), 'self')
        # Setting the type of the member '_auto' of a type (line 1156)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1156, 8), self_42847, '_auto', False_42846)
        
        # Type idiom detected: calculating its left and rigth part (line 1157)
        # Getting the type of 'self' (line 1157)
        self_42848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 11), 'self')
        # Obtaining the member 'levels' of a type (line 1157)
        levels_42849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1157, 11), self_42848, 'levels')
        # Getting the type of 'None' (line 1157)
        None_42850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1157, 26), 'None')
        
        (may_be_42851, more_types_in_union_42852) = may_be_none(levels_42849, None_42850)

        if may_be_42851:

            if more_types_in_union_42852:
                # Runtime conditional SSA (line 1157)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            
            
            # Call to len(...): (line 1158)
            # Processing the call arguments (line 1158)
            # Getting the type of 'args' (line 1158)
            args_42854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 19), 'args', False)
            # Processing the call keyword arguments (line 1158)
            kwargs_42855 = {}
            # Getting the type of 'len' (line 1158)
            len_42853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1158, 15), 'len', False)
            # Calling len(args, kwargs) (line 1158)
            len_call_result_42856 = invoke(stypy.reporting.localization.Localization(__file__, 1158, 15), len_42853, *[args_42854], **kwargs_42855)
            
            int_42857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1158, 28), 'int')
            # Applying the binary operator '==' (line 1158)
            result_eq_42858 = python_operator(stypy.reporting.localization.Localization(__file__, 1158, 15), '==', len_call_result_42856, int_42857)
            
            # Testing the type of an if condition (line 1158)
            if_condition_42859 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1158, 12), result_eq_42858)
            # Assigning a type to the variable 'if_condition_42859' (line 1158)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1158, 12), 'if_condition_42859', if_condition_42859)
            # SSA begins for if statement (line 1158)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 1159):
            
            # Assigning a Call to a Name (line 1159):
            
            # Call to _autolev(...): (line 1159)
            # Processing the call arguments (line 1159)
            int_42862 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1159, 36), 'int')
            # Processing the call keyword arguments (line 1159)
            kwargs_42863 = {}
            # Getting the type of 'self' (line 1159)
            self_42860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1159, 22), 'self', False)
            # Obtaining the member '_autolev' of a type (line 1159)
            _autolev_42861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1159, 22), self_42860, '_autolev')
            # Calling _autolev(args, kwargs) (line 1159)
            _autolev_call_result_42864 = invoke(stypy.reporting.localization.Localization(__file__, 1159, 22), _autolev_42861, *[int_42862], **kwargs_42863)
            
            # Assigning a type to the variable 'lev' (line 1159)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1159, 16), 'lev', _autolev_call_result_42864)
            # SSA branch for the else part of an if statement (line 1158)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Subscript to a Name (line 1161):
            
            # Assigning a Subscript to a Name (line 1161):
            
            # Obtaining the type of the subscript
            int_42865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1161, 33), 'int')
            # Getting the type of 'args' (line 1161)
            args_42866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1161, 28), 'args')
            # Obtaining the member '__getitem__' of a type (line 1161)
            getitem___42867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1161, 28), args_42866, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1161)
            subscript_call_result_42868 = invoke(stypy.reporting.localization.Localization(__file__, 1161, 28), getitem___42867, int_42865)
            
            # Assigning a type to the variable 'level_arg' (line 1161)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1161, 16), 'level_arg', subscript_call_result_42868)
            
            
            # SSA begins for try-except statement (line 1162)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
            
            # Type idiom detected: calculating its left and rigth part (line 1163)
            # Getting the type of 'level_arg' (line 1163)
            level_arg_42869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 28), 'level_arg')
            # Getting the type of 'int' (line 1163)
            int_42870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 42), 'int')
            
            (may_be_42871, more_types_in_union_42872) = may_be_type(level_arg_42869, int_42870)

            if may_be_42871:

                if more_types_in_union_42872:
                    # Runtime conditional SSA (line 1163)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                # Assigning a type to the variable 'level_arg' (line 1163)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 20), 'level_arg', int_42870())
                
                # Assigning a Call to a Name (line 1164):
                
                # Assigning a Call to a Name (line 1164):
                
                # Call to _autolev(...): (line 1164)
                # Processing the call arguments (line 1164)
                # Getting the type of 'level_arg' (line 1164)
                level_arg_42875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 44), 'level_arg', False)
                # Processing the call keyword arguments (line 1164)
                kwargs_42876 = {}
                # Getting the type of 'self' (line 1164)
                self_42873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1164, 30), 'self', False)
                # Obtaining the member '_autolev' of a type (line 1164)
                _autolev_42874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1164, 30), self_42873, '_autolev')
                # Calling _autolev(args, kwargs) (line 1164)
                _autolev_call_result_42877 = invoke(stypy.reporting.localization.Localization(__file__, 1164, 30), _autolev_42874, *[level_arg_42875], **kwargs_42876)
                
                # Assigning a type to the variable 'lev' (line 1164)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1164, 24), 'lev', _autolev_call_result_42877)

                if more_types_in_union_42872:
                    # Runtime conditional SSA for else branch (line 1163)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_42871) or more_types_in_union_42872):
                # Getting the type of 'level_arg' (line 1163)
                level_arg_42878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1163, 20), 'level_arg')
                # Assigning a type to the variable 'level_arg' (line 1163)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1163, 20), 'level_arg', remove_type_from_union(level_arg_42878, int_42870))
                
                # Assigning a Call to a Name (line 1166):
                
                # Assigning a Call to a Name (line 1166):
                
                # Call to astype(...): (line 1166)
                # Processing the call arguments (line 1166)
                # Getting the type of 'np' (line 1166)
                np_42885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 59), 'np', False)
                # Obtaining the member 'float64' of a type (line 1166)
                float64_42886 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 59), np_42885, 'float64')
                # Processing the call keyword arguments (line 1166)
                kwargs_42887 = {}
                
                # Call to asarray(...): (line 1166)
                # Processing the call arguments (line 1166)
                # Getting the type of 'level_arg' (line 1166)
                level_arg_42881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 41), 'level_arg', False)
                # Processing the call keyword arguments (line 1166)
                kwargs_42882 = {}
                # Getting the type of 'np' (line 1166)
                np_42879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1166, 30), 'np', False)
                # Obtaining the member 'asarray' of a type (line 1166)
                asarray_42880 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 30), np_42879, 'asarray')
                # Calling asarray(args, kwargs) (line 1166)
                asarray_call_result_42883 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 30), asarray_42880, *[level_arg_42881], **kwargs_42882)
                
                # Obtaining the member 'astype' of a type (line 1166)
                astype_42884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1166, 30), asarray_call_result_42883, 'astype')
                # Calling astype(args, kwargs) (line 1166)
                astype_call_result_42888 = invoke(stypy.reporting.localization.Localization(__file__, 1166, 30), astype_42884, *[float64_42886], **kwargs_42887)
                
                # Assigning a type to the variable 'lev' (line 1166)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1166, 24), 'lev', astype_call_result_42888)

                if (may_be_42871 and more_types_in_union_42872):
                    # SSA join for if statement (line 1163)
                    module_type_store = module_type_store.join_ssa_context()


            
            # SSA branch for the except part of a try statement (line 1162)
            # SSA branch for the except '<any exception>' branch of a try statement (line 1162)
            module_type_store.open_ssa_branch('except')
            
            # Call to TypeError(...): (line 1168)
            # Processing the call arguments (line 1168)
            
            # Call to format(...): (line 1169)
            # Processing the call arguments (line 1169)
            # Getting the type of 'fn' (line 1170)
            fn_42892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1170, 32), 'fn', False)
            # Processing the call keyword arguments (line 1169)
            kwargs_42893 = {}
            unicode_42890 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1169, 24), 'unicode', u'Last {0} arg must give levels; see help({0})')
            # Obtaining the member 'format' of a type (line 1169)
            format_42891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1169, 24), unicode_42890, 'format')
            # Calling format(args, kwargs) (line 1169)
            format_call_result_42894 = invoke(stypy.reporting.localization.Localization(__file__, 1169, 24), format_42891, *[fn_42892], **kwargs_42893)
            
            # Processing the call keyword arguments (line 1168)
            kwargs_42895 = {}
            # Getting the type of 'TypeError' (line 1168)
            TypeError_42889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1168, 26), 'TypeError', False)
            # Calling TypeError(args, kwargs) (line 1168)
            TypeError_call_result_42896 = invoke(stypy.reporting.localization.Localization(__file__, 1168, 26), TypeError_42889, *[format_call_result_42894], **kwargs_42895)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1168, 20), TypeError_call_result_42896, 'raise parameter', BaseException)
            # SSA join for try-except statement (line 1162)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1158)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a Name to a Attribute (line 1171):
            
            # Assigning a Name to a Attribute (line 1171):
            # Getting the type of 'lev' (line 1171)
            lev_42897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 26), 'lev')
            # Getting the type of 'self' (line 1171)
            self_42898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 12), 'self')
            # Setting the type of the member 'levels' of a type (line 1171)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 12), self_42898, 'levels', lev_42897)

            if more_types_in_union_42852:
                # Runtime conditional SSA for else branch (line 1157)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_42851) or more_types_in_union_42852):
            
            # Assigning a Call to a Attribute (line 1173):
            
            # Assigning a Call to a Attribute (line 1173):
            
            # Call to astype(...): (line 1173)
            # Processing the call arguments (line 1173)
            # Getting the type of 'np' (line 1173)
            np_42906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 57), 'np', False)
            # Obtaining the member 'float64' of a type (line 1173)
            float64_42907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 57), np_42906, 'float64')
            # Processing the call keyword arguments (line 1173)
            kwargs_42908 = {}
            
            # Call to asarray(...): (line 1173)
            # Processing the call arguments (line 1173)
            # Getting the type of 'self' (line 1173)
            self_42901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 37), 'self', False)
            # Obtaining the member 'levels' of a type (line 1173)
            levels_42902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 37), self_42901, 'levels')
            # Processing the call keyword arguments (line 1173)
            kwargs_42903 = {}
            # Getting the type of 'np' (line 1173)
            np_42899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 26), 'np', False)
            # Obtaining the member 'asarray' of a type (line 1173)
            asarray_42900 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 26), np_42899, 'asarray')
            # Calling asarray(args, kwargs) (line 1173)
            asarray_call_result_42904 = invoke(stypy.reporting.localization.Localization(__file__, 1173, 26), asarray_42900, *[levels_42902], **kwargs_42903)
            
            # Obtaining the member 'astype' of a type (line 1173)
            astype_42905 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 26), asarray_call_result_42904, 'astype')
            # Calling astype(args, kwargs) (line 1173)
            astype_call_result_42909 = invoke(stypy.reporting.localization.Localization(__file__, 1173, 26), astype_42905, *[float64_42907], **kwargs_42908)
            
            # Getting the type of 'self' (line 1173)
            self_42910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 12), 'self')
            # Setting the type of the member 'levels' of a type (line 1173)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1173, 12), self_42910, 'levels', astype_call_result_42909)

            if (may_be_42851 and more_types_in_union_42852):
                # SSA join for if statement (line 1157)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'self' (line 1175)
        self_42911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 15), 'self')
        # Obtaining the member 'filled' of a type (line 1175)
        filled_42912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1175, 15), self_42911, 'filled')
        # Applying the 'not' unary operator (line 1175)
        result_not__42913 = python_operator(stypy.reporting.localization.Localization(__file__, 1175, 11), 'not', filled_42912)
        
        # Testing the type of an if condition (line 1175)
        if_condition_42914 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1175, 8), result_not__42913)
        # Assigning a type to the variable 'if_condition_42914' (line 1175)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1175, 8), 'if_condition_42914', if_condition_42914)
        # SSA begins for if statement (line 1175)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1176):
        
        # Assigning a BinOp to a Name (line 1176):
        
        # Getting the type of 'self' (line 1176)
        self_42915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 22), 'self')
        # Obtaining the member 'levels' of a type (line 1176)
        levels_42916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 22), self_42915, 'levels')
        # Getting the type of 'self' (line 1176)
        self_42917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 36), 'self')
        # Obtaining the member 'zmin' of a type (line 1176)
        zmin_42918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 36), self_42917, 'zmin')
        # Applying the binary operator '>' (line 1176)
        result_gt_42919 = python_operator(stypy.reporting.localization.Localization(__file__, 1176, 22), '>', levels_42916, zmin_42918)
        
        
        # Getting the type of 'self' (line 1176)
        self_42920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 50), 'self')
        # Obtaining the member 'levels' of a type (line 1176)
        levels_42921 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 50), self_42920, 'levels')
        # Getting the type of 'self' (line 1176)
        self_42922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 64), 'self')
        # Obtaining the member 'zmax' of a type (line 1176)
        zmax_42923 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1176, 64), self_42922, 'zmax')
        # Applying the binary operator '<' (line 1176)
        result_lt_42924 = python_operator(stypy.reporting.localization.Localization(__file__, 1176, 50), '<', levels_42921, zmax_42923)
        
        # Applying the binary operator '&' (line 1176)
        result_and__42925 = python_operator(stypy.reporting.localization.Localization(__file__, 1176, 21), '&', result_gt_42919, result_lt_42924)
        
        # Assigning a type to the variable 'inside' (line 1176)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1176, 12), 'inside', result_and__42925)
        
        # Assigning a Subscript to a Attribute (line 1177):
        
        # Assigning a Subscript to a Attribute (line 1177):
        
        # Obtaining the type of the subscript
        # Getting the type of 'inside' (line 1177)
        inside_42926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 38), 'inside')
        # Getting the type of 'self' (line 1177)
        self_42927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 26), 'self')
        # Obtaining the member 'levels' of a type (line 1177)
        levels_42928 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 26), self_42927, 'levels')
        # Obtaining the member '__getitem__' of a type (line 1177)
        getitem___42929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 26), levels_42928, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1177)
        subscript_call_result_42930 = invoke(stypy.reporting.localization.Localization(__file__, 1177, 26), getitem___42929, inside_42926)
        
        # Getting the type of 'self' (line 1177)
        self_42931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 12), 'self')
        # Setting the type of the member 'levels' of a type (line 1177)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1177, 12), self_42931, 'levels', subscript_call_result_42930)
        
        
        
        # Call to len(...): (line 1178)
        # Processing the call arguments (line 1178)
        # Getting the type of 'self' (line 1178)
        self_42933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 19), 'self', False)
        # Obtaining the member 'levels' of a type (line 1178)
        levels_42934 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1178, 19), self_42933, 'levels')
        # Processing the call keyword arguments (line 1178)
        kwargs_42935 = {}
        # Getting the type of 'len' (line 1178)
        len_42932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 15), 'len', False)
        # Calling len(args, kwargs) (line 1178)
        len_call_result_42936 = invoke(stypy.reporting.localization.Localization(__file__, 1178, 15), len_42932, *[levels_42934], **kwargs_42935)
        
        int_42937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1178, 35), 'int')
        # Applying the binary operator '==' (line 1178)
        result_eq_42938 = python_operator(stypy.reporting.localization.Localization(__file__, 1178, 15), '==', len_call_result_42936, int_42937)
        
        # Testing the type of an if condition (line 1178)
        if_condition_42939 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1178, 12), result_eq_42938)
        # Assigning a type to the variable 'if_condition_42939' (line 1178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1178, 12), 'if_condition_42939', if_condition_42939)
        # SSA begins for if statement (line 1178)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a List to a Attribute (line 1179):
        
        # Assigning a List to a Attribute (line 1179):
        
        # Obtaining an instance of the builtin type 'list' (line 1179)
        list_42940 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1179, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1179)
        # Adding element type (line 1179)
        # Getting the type of 'self' (line 1179)
        self_42941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 31), 'self')
        # Obtaining the member 'zmin' of a type (line 1179)
        zmin_42942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 31), self_42941, 'zmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1179, 30), list_42940, zmin_42942)
        
        # Getting the type of 'self' (line 1179)
        self_42943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 16), 'self')
        # Setting the type of the member 'levels' of a type (line 1179)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1179, 16), self_42943, 'levels', list_42940)
        
        # Call to warn(...): (line 1180)
        # Processing the call arguments (line 1180)
        unicode_42946 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1180, 30), 'unicode', u'No contour levels were found within the data range.')
        # Processing the call keyword arguments (line 1180)
        kwargs_42947 = {}
        # Getting the type of 'warnings' (line 1180)
        warnings_42944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1180)
        warn_42945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1180, 16), warnings_42944, 'warn')
        # Calling warn(args, kwargs) (line 1180)
        warn_call_result_42948 = invoke(stypy.reporting.localization.Localization(__file__, 1180, 16), warn_42945, *[unicode_42946], **kwargs_42947)
        
        # SSA join for if statement (line 1178)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1175)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 1183)
        self_42949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 11), 'self')
        # Obtaining the member 'filled' of a type (line 1183)
        filled_42950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 11), self_42949, 'filled')
        
        
        # Call to len(...): (line 1183)
        # Processing the call arguments (line 1183)
        # Getting the type of 'self' (line 1183)
        self_42952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 31), 'self', False)
        # Obtaining the member 'levels' of a type (line 1183)
        levels_42953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 31), self_42952, 'levels')
        # Processing the call keyword arguments (line 1183)
        kwargs_42954 = {}
        # Getting the type of 'len' (line 1183)
        len_42951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 27), 'len', False)
        # Calling len(args, kwargs) (line 1183)
        len_call_result_42955 = invoke(stypy.reporting.localization.Localization(__file__, 1183, 27), len_42951, *[levels_42953], **kwargs_42954)
        
        int_42956 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1183, 46), 'int')
        # Applying the binary operator '<' (line 1183)
        result_lt_42957 = python_operator(stypy.reporting.localization.Localization(__file__, 1183, 27), '<', len_call_result_42955, int_42956)
        
        # Applying the binary operator 'and' (line 1183)
        result_and_keyword_42958 = python_operator(stypy.reporting.localization.Localization(__file__, 1183, 11), 'and', filled_42950, result_lt_42957)
        
        # Testing the type of an if condition (line 1183)
        if_condition_42959 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1183, 8), result_and_keyword_42958)
        # Assigning a type to the variable 'if_condition_42959' (line 1183)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1183, 8), 'if_condition_42959', if_condition_42959)
        # SSA begins for if statement (line 1183)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1184)
        # Processing the call arguments (line 1184)
        unicode_42961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1184, 29), 'unicode', u'Filled contours require at least 2 levels.')
        # Processing the call keyword arguments (line 1184)
        kwargs_42962 = {}
        # Getting the type of 'ValueError' (line 1184)
        ValueError_42960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1184)
        ValueError_call_result_42963 = invoke(stypy.reporting.localization.Localization(__file__, 1184, 18), ValueError_42960, *[unicode_42961], **kwargs_42962)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1184, 12), ValueError_call_result_42963, 'raise parameter', BaseException)
        # SSA join for if statement (line 1183)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        
        # Call to len(...): (line 1186)
        # Processing the call arguments (line 1186)
        # Getting the type of 'self' (line 1186)
        self_42965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 15), 'self', False)
        # Obtaining the member 'levels' of a type (line 1186)
        levels_42966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 15), self_42965, 'levels')
        # Processing the call keyword arguments (line 1186)
        kwargs_42967 = {}
        # Getting the type of 'len' (line 1186)
        len_42964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 11), 'len', False)
        # Calling len(args, kwargs) (line 1186)
        len_call_result_42968 = invoke(stypy.reporting.localization.Localization(__file__, 1186, 11), len_42964, *[levels_42966], **kwargs_42967)
        
        int_42969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 30), 'int')
        # Applying the binary operator '>' (line 1186)
        result_gt_42970 = python_operator(stypy.reporting.localization.Localization(__file__, 1186, 11), '>', len_call_result_42968, int_42969)
        
        
        
        # Call to min(...): (line 1186)
        # Processing the call arguments (line 1186)
        
        # Call to diff(...): (line 1186)
        # Processing the call arguments (line 1186)
        # Getting the type of 'self' (line 1186)
        self_42975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 51), 'self', False)
        # Obtaining the member 'levels' of a type (line 1186)
        levels_42976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 51), self_42975, 'levels')
        # Processing the call keyword arguments (line 1186)
        kwargs_42977 = {}
        # Getting the type of 'np' (line 1186)
        np_42973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 43), 'np', False)
        # Obtaining the member 'diff' of a type (line 1186)
        diff_42974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 43), np_42973, 'diff')
        # Calling diff(args, kwargs) (line 1186)
        diff_call_result_42978 = invoke(stypy.reporting.localization.Localization(__file__, 1186, 43), diff_42974, *[levels_42976], **kwargs_42977)
        
        # Processing the call keyword arguments (line 1186)
        kwargs_42979 = {}
        # Getting the type of 'np' (line 1186)
        np_42971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 36), 'np', False)
        # Obtaining the member 'min' of a type (line 1186)
        min_42972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1186, 36), np_42971, 'min')
        # Calling min(args, kwargs) (line 1186)
        min_call_result_42980 = invoke(stypy.reporting.localization.Localization(__file__, 1186, 36), min_42972, *[diff_call_result_42978], **kwargs_42979)
        
        float_42981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 68), 'float')
        # Applying the binary operator '<=' (line 1186)
        result_le_42982 = python_operator(stypy.reporting.localization.Localization(__file__, 1186, 36), '<=', min_call_result_42980, float_42981)
        
        # Applying the binary operator 'and' (line 1186)
        result_and_keyword_42983 = python_operator(stypy.reporting.localization.Localization(__file__, 1186, 11), 'and', result_gt_42970, result_le_42982)
        
        # Testing the type of an if condition (line 1186)
        if_condition_42984 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1186, 8), result_and_keyword_42983)
        # Assigning a type to the variable 'if_condition_42984' (line 1186)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 8), 'if_condition_42984', if_condition_42984)
        # SSA begins for if statement (line 1186)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Call to hasattr(...): (line 1187)
        # Processing the call arguments (line 1187)
        # Getting the type of 'self' (line 1187)
        self_42986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 23), 'self', False)
        unicode_42987 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 29), 'unicode', u'_corner_mask')
        # Processing the call keyword arguments (line 1187)
        kwargs_42988 = {}
        # Getting the type of 'hasattr' (line 1187)
        hasattr_42985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 15), 'hasattr', False)
        # Calling hasattr(args, kwargs) (line 1187)
        hasattr_call_result_42989 = invoke(stypy.reporting.localization.Localization(__file__, 1187, 15), hasattr_42985, *[self_42986, unicode_42987], **kwargs_42988)
        
        
        # Getting the type of 'self' (line 1187)
        self_42990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 49), 'self')
        # Obtaining the member '_corner_mask' of a type (line 1187)
        _corner_mask_42991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1187, 49), self_42990, '_corner_mask')
        unicode_42992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1187, 70), 'unicode', u'legacy')
        # Applying the binary operator '==' (line 1187)
        result_eq_42993 = python_operator(stypy.reporting.localization.Localization(__file__, 1187, 49), '==', _corner_mask_42991, unicode_42992)
        
        # Applying the binary operator 'and' (line 1187)
        result_and_keyword_42994 = python_operator(stypy.reporting.localization.Localization(__file__, 1187, 15), 'and', hasattr_call_result_42989, result_eq_42993)
        
        # Testing the type of an if condition (line 1187)
        if_condition_42995 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1187, 12), result_and_keyword_42994)
        # Assigning a type to the variable 'if_condition_42995' (line 1187)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1187, 12), 'if_condition_42995', if_condition_42995)
        # SSA begins for if statement (line 1187)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 1188)
        # Processing the call arguments (line 1188)
        unicode_42998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1188, 30), 'unicode', u'Contour levels are not increasing')
        # Processing the call keyword arguments (line 1188)
        kwargs_42999 = {}
        # Getting the type of 'warnings' (line 1188)
        warnings_42996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1188)
        warn_42997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 16), warnings_42996, 'warn')
        # Calling warn(args, kwargs) (line 1188)
        warn_call_result_43000 = invoke(stypy.reporting.localization.Localization(__file__, 1188, 16), warn_42997, *[unicode_42998], **kwargs_42999)
        
        # SSA branch for the else part of an if statement (line 1187)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1190)
        # Processing the call arguments (line 1190)
        unicode_43002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1190, 33), 'unicode', u'Contour levels must be increasing')
        # Processing the call keyword arguments (line 1190)
        kwargs_43003 = {}
        # Getting the type of 'ValueError' (line 1190)
        ValueError_43001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1190)
        ValueError_call_result_43004 = invoke(stypy.reporting.localization.Localization(__file__, 1190, 22), ValueError_43001, *[unicode_43002], **kwargs_43003)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1190, 16), ValueError_call_result_43004, 'raise parameter', BaseException)
        # SSA join for if statement (line 1187)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1186)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_contour_level_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_contour_level_args' in the type store
        # Getting the type of 'stypy_return_type' (line 1148)
        stypy_return_type_43005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43005)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_contour_level_args'
        return stypy_return_type_43005


    @norecursion
    def vmin(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'vmin'
        module_type_store = module_type_store.open_function_context('vmin', 1192, 4, False)
        # Assigning a type to the variable 'self' (line 1193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1193, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet.vmin.__dict__.__setitem__('stypy_localization', localization)
        ContourSet.vmin.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet.vmin.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet.vmin.__dict__.__setitem__('stypy_function_name', 'ContourSet.vmin')
        ContourSet.vmin.__dict__.__setitem__('stypy_param_names_list', [])
        ContourSet.vmin.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet.vmin.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet.vmin.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet.vmin.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet.vmin.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet.vmin.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet.vmin', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'vmin', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'vmin(...)' code ##################

        
        # Call to warn(...): (line 1194)
        # Processing the call arguments (line 1194)
        unicode_43008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1194, 22), 'unicode', u'vmin is deprecated and will be removed in 2.2 and not replaced.')
        # Getting the type of 'mplDeprecation' (line 1196)
        mplDeprecation_43009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 1194)
        kwargs_43010 = {}
        # Getting the type of 'warnings' (line 1194)
        warnings_43006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1194)
        warn_43007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 8), warnings_43006, 'warn')
        # Calling warn(args, kwargs) (line 1194)
        warn_call_result_43011 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 8), warn_43007, *[unicode_43008, mplDeprecation_43009], **kwargs_43010)
        
        
        # Call to getattr(...): (line 1197)
        # Processing the call arguments (line 1197)
        # Getting the type of 'self' (line 1197)
        self_43013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 23), 'self', False)
        unicode_43014 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1197, 29), 'unicode', u'_vmin')
        # Getting the type of 'None' (line 1197)
        None_43015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 38), 'None', False)
        # Processing the call keyword arguments (line 1197)
        kwargs_43016 = {}
        # Getting the type of 'getattr' (line 1197)
        getattr_43012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 15), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1197)
        getattr_call_result_43017 = invoke(stypy.reporting.localization.Localization(__file__, 1197, 15), getattr_43012, *[self_43013, unicode_43014, None_43015], **kwargs_43016)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 8), 'stypy_return_type', getattr_call_result_43017)
        
        # ################# End of 'vmin(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'vmin' in the type store
        # Getting the type of 'stypy_return_type' (line 1192)
        stypy_return_type_43018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43018)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'vmin'
        return stypy_return_type_43018


    @norecursion
    def vmax(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'vmax'
        module_type_store = module_type_store.open_function_context('vmax', 1199, 4, False)
        # Assigning a type to the variable 'self' (line 1200)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1200, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet.vmax.__dict__.__setitem__('stypy_localization', localization)
        ContourSet.vmax.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet.vmax.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet.vmax.__dict__.__setitem__('stypy_function_name', 'ContourSet.vmax')
        ContourSet.vmax.__dict__.__setitem__('stypy_param_names_list', [])
        ContourSet.vmax.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet.vmax.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet.vmax.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet.vmax.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet.vmax.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet.vmax.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet.vmax', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'vmax', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'vmax(...)' code ##################

        
        # Call to warn(...): (line 1201)
        # Processing the call arguments (line 1201)
        unicode_43021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1201, 22), 'unicode', u'vmax is deprecated and will be removed in 2.2 and not replaced.')
        # Getting the type of 'mplDeprecation' (line 1203)
        mplDeprecation_43022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 1201)
        kwargs_43023 = {}
        # Getting the type of 'warnings' (line 1201)
        warnings_43019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1201)
        warn_43020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1201, 8), warnings_43019, 'warn')
        # Calling warn(args, kwargs) (line 1201)
        warn_call_result_43024 = invoke(stypy.reporting.localization.Localization(__file__, 1201, 8), warn_43020, *[unicode_43021, mplDeprecation_43022], **kwargs_43023)
        
        
        # Call to getattr(...): (line 1204)
        # Processing the call arguments (line 1204)
        # Getting the type of 'self' (line 1204)
        self_43026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 23), 'self', False)
        unicode_43027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1204, 29), 'unicode', u'_vmax')
        # Getting the type of 'None' (line 1204)
        None_43028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 38), 'None', False)
        # Processing the call keyword arguments (line 1204)
        kwargs_43029 = {}
        # Getting the type of 'getattr' (line 1204)
        getattr_43025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 15), 'getattr', False)
        # Calling getattr(args, kwargs) (line 1204)
        getattr_call_result_43030 = invoke(stypy.reporting.localization.Localization(__file__, 1204, 15), getattr_43025, *[self_43026, unicode_43027, None_43028], **kwargs_43029)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 8), 'stypy_return_type', getattr_call_result_43030)
        
        # ################# End of 'vmax(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'vmax' in the type store
        # Getting the type of 'stypy_return_type' (line 1199)
        stypy_return_type_43031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43031)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'vmax'
        return stypy_return_type_43031


    @norecursion
    def _process_levels(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_levels'
        module_type_store = module_type_store.open_function_context('_process_levels', 1206, 4, False)
        # Assigning a type to the variable 'self' (line 1207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet._process_levels.__dict__.__setitem__('stypy_localization', localization)
        ContourSet._process_levels.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet._process_levels.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet._process_levels.__dict__.__setitem__('stypy_function_name', 'ContourSet._process_levels')
        ContourSet._process_levels.__dict__.__setitem__('stypy_param_names_list', [])
        ContourSet._process_levels.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet._process_levels.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet._process_levels.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet._process_levels.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet._process_levels.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet._process_levels.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet._process_levels', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_levels', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_levels(...)' code ##################

        unicode_43032 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, (-1)), 'unicode', u'\n        Assign values to :attr:`layers` based on :attr:`levels`,\n        adding extended layers as needed if contours are filled.\n\n        For line contours, layers simply coincide with levels;\n        a line is a thin layer.  No extended levels are needed\n        with line contours.\n        ')
        
        # Assigning a Call to a Attribute (line 1216):
        
        # Assigning a Call to a Attribute (line 1216):
        
        # Call to min(...): (line 1216)
        # Processing the call arguments (line 1216)
        # Getting the type of 'self' (line 1216)
        self_43035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 28), 'self', False)
        # Obtaining the member 'levels' of a type (line 1216)
        levels_43036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 28), self_43035, 'levels')
        # Processing the call keyword arguments (line 1216)
        kwargs_43037 = {}
        # Getting the type of 'np' (line 1216)
        np_43033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 21), 'np', False)
        # Obtaining the member 'min' of a type (line 1216)
        min_43034 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 21), np_43033, 'min')
        # Calling min(args, kwargs) (line 1216)
        min_call_result_43038 = invoke(stypy.reporting.localization.Localization(__file__, 1216, 21), min_43034, *[levels_43036], **kwargs_43037)
        
        # Getting the type of 'self' (line 1216)
        self_43039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 8), 'self')
        # Setting the type of the member '_vmin' of a type (line 1216)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 8), self_43039, '_vmin', min_call_result_43038)
        
        # Assigning a Call to a Attribute (line 1217):
        
        # Assigning a Call to a Attribute (line 1217):
        
        # Call to max(...): (line 1217)
        # Processing the call arguments (line 1217)
        # Getting the type of 'self' (line 1217)
        self_43042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 28), 'self', False)
        # Obtaining the member 'levels' of a type (line 1217)
        levels_43043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 28), self_43042, 'levels')
        # Processing the call keyword arguments (line 1217)
        kwargs_43044 = {}
        # Getting the type of 'np' (line 1217)
        np_43040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 21), 'np', False)
        # Obtaining the member 'max' of a type (line 1217)
        max_43041 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 21), np_43040, 'max')
        # Calling max(args, kwargs) (line 1217)
        max_call_result_43045 = invoke(stypy.reporting.localization.Localization(__file__, 1217, 21), max_43041, *[levels_43043], **kwargs_43044)
        
        # Getting the type of 'self' (line 1217)
        self_43046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 8), 'self')
        # Setting the type of the member '_vmax' of a type (line 1217)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 8), self_43046, '_vmax', max_call_result_43045)
        
        # Assigning a Call to a Attribute (line 1222):
        
        # Assigning a Call to a Attribute (line 1222):
        
        # Call to list(...): (line 1222)
        # Processing the call arguments (line 1222)
        # Getting the type of 'self' (line 1222)
        self_43048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 28), 'self', False)
        # Obtaining the member 'levels' of a type (line 1222)
        levels_43049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 28), self_43048, 'levels')
        # Processing the call keyword arguments (line 1222)
        kwargs_43050 = {}
        # Getting the type of 'list' (line 1222)
        list_43047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 23), 'list', False)
        # Calling list(args, kwargs) (line 1222)
        list_call_result_43051 = invoke(stypy.reporting.localization.Localization(__file__, 1222, 23), list_43047, *[levels_43049], **kwargs_43050)
        
        # Getting the type of 'self' (line 1222)
        self_43052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1222, 8), 'self')
        # Setting the type of the member '_levels' of a type (line 1222)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1222, 8), self_43052, '_levels', list_call_result_43051)
        
        
        # Getting the type of 'self' (line 1224)
        self_43053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 11), 'self')
        # Obtaining the member 'extend' of a type (line 1224)
        extend_43054 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 11), self_43053, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1224)
        tuple_43055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1224)
        # Adding element type (line 1224)
        unicode_43056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 27), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1224, 27), tuple_43055, unicode_43056)
        # Adding element type (line 1224)
        unicode_43057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1224, 35), 'unicode', u'min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1224, 27), tuple_43055, unicode_43057)
        
        # Applying the binary operator 'in' (line 1224)
        result_contains_43058 = python_operator(stypy.reporting.localization.Localization(__file__, 1224, 11), 'in', extend_43054, tuple_43055)
        
        # Testing the type of an if condition (line 1224)
        if_condition_43059 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1224, 8), result_contains_43058)
        # Assigning a type to the variable 'if_condition_43059' (line 1224)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1224, 8), 'if_condition_43059', if_condition_43059)
        # SSA begins for if statement (line 1224)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to insert(...): (line 1225)
        # Processing the call arguments (line 1225)
        int_43063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 32), 'int')
        
        # Call to min(...): (line 1225)
        # Processing the call arguments (line 1225)
        
        # Obtaining the type of the subscript
        int_43065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 51), 'int')
        # Getting the type of 'self' (line 1225)
        self_43066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 39), 'self', False)
        # Obtaining the member 'levels' of a type (line 1225)
        levels_43067 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1225, 39), self_43066, 'levels')
        # Obtaining the member '__getitem__' of a type (line 1225)
        getitem___43068 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1225, 39), levels_43067, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1225)
        subscript_call_result_43069 = invoke(stypy.reporting.localization.Localization(__file__, 1225, 39), getitem___43068, int_43065)
        
        # Getting the type of 'self' (line 1225)
        self_43070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 55), 'self', False)
        # Obtaining the member 'zmin' of a type (line 1225)
        zmin_43071 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1225, 55), self_43070, 'zmin')
        # Processing the call keyword arguments (line 1225)
        kwargs_43072 = {}
        # Getting the type of 'min' (line 1225)
        min_43064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 35), 'min', False)
        # Calling min(args, kwargs) (line 1225)
        min_call_result_43073 = invoke(stypy.reporting.localization.Localization(__file__, 1225, 35), min_43064, *[subscript_call_result_43069, zmin_43071], **kwargs_43072)
        
        int_43074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1225, 68), 'int')
        # Applying the binary operator '-' (line 1225)
        result_sub_43075 = python_operator(stypy.reporting.localization.Localization(__file__, 1225, 35), '-', min_call_result_43073, int_43074)
        
        # Processing the call keyword arguments (line 1225)
        kwargs_43076 = {}
        # Getting the type of 'self' (line 1225)
        self_43060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 12), 'self', False)
        # Obtaining the member '_levels' of a type (line 1225)
        _levels_43061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1225, 12), self_43060, '_levels')
        # Obtaining the member 'insert' of a type (line 1225)
        insert_43062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1225, 12), _levels_43061, 'insert')
        # Calling insert(args, kwargs) (line 1225)
        insert_call_result_43077 = invoke(stypy.reporting.localization.Localization(__file__, 1225, 12), insert_43062, *[int_43063, result_sub_43075], **kwargs_43076)
        
        # SSA join for if statement (line 1224)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1226)
        self_43078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1226, 11), 'self')
        # Obtaining the member 'extend' of a type (line 1226)
        extend_43079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1226, 11), self_43078, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1226)
        tuple_43080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1226)
        # Adding element type (line 1226)
        unicode_43081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 27), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1226, 27), tuple_43080, unicode_43081)
        # Adding element type (line 1226)
        unicode_43082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1226, 35), 'unicode', u'max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1226, 27), tuple_43080, unicode_43082)
        
        # Applying the binary operator 'in' (line 1226)
        result_contains_43083 = python_operator(stypy.reporting.localization.Localization(__file__, 1226, 11), 'in', extend_43079, tuple_43080)
        
        # Testing the type of an if condition (line 1226)
        if_condition_43084 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1226, 8), result_contains_43083)
        # Assigning a type to the variable 'if_condition_43084' (line 1226)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1226, 8), 'if_condition_43084', if_condition_43084)
        # SSA begins for if statement (line 1226)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to append(...): (line 1227)
        # Processing the call arguments (line 1227)
        
        # Call to max(...): (line 1227)
        # Processing the call arguments (line 1227)
        
        # Obtaining the type of the subscript
        int_43089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 48), 'int')
        # Getting the type of 'self' (line 1227)
        self_43090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 36), 'self', False)
        # Obtaining the member 'levels' of a type (line 1227)
        levels_43091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1227, 36), self_43090, 'levels')
        # Obtaining the member '__getitem__' of a type (line 1227)
        getitem___43092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1227, 36), levels_43091, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1227)
        subscript_call_result_43093 = invoke(stypy.reporting.localization.Localization(__file__, 1227, 36), getitem___43092, int_43089)
        
        # Getting the type of 'self' (line 1227)
        self_43094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 53), 'self', False)
        # Obtaining the member 'zmax' of a type (line 1227)
        zmax_43095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1227, 53), self_43094, 'zmax')
        # Processing the call keyword arguments (line 1227)
        kwargs_43096 = {}
        # Getting the type of 'max' (line 1227)
        max_43088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 32), 'max', False)
        # Calling max(args, kwargs) (line 1227)
        max_call_result_43097 = invoke(stypy.reporting.localization.Localization(__file__, 1227, 32), max_43088, *[subscript_call_result_43093, zmax_43095], **kwargs_43096)
        
        int_43098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1227, 66), 'int')
        # Applying the binary operator '+' (line 1227)
        result_add_43099 = python_operator(stypy.reporting.localization.Localization(__file__, 1227, 32), '+', max_call_result_43097, int_43098)
        
        # Processing the call keyword arguments (line 1227)
        kwargs_43100 = {}
        # Getting the type of 'self' (line 1227)
        self_43085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1227, 12), 'self', False)
        # Obtaining the member '_levels' of a type (line 1227)
        _levels_43086 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1227, 12), self_43085, '_levels')
        # Obtaining the member 'append' of a type (line 1227)
        append_43087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1227, 12), _levels_43086, 'append')
        # Calling append(args, kwargs) (line 1227)
        append_call_result_43101 = invoke(stypy.reporting.localization.Localization(__file__, 1227, 12), append_43087, *[result_add_43099], **kwargs_43100)
        
        # SSA join for if statement (line 1226)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1228):
        
        # Assigning a Call to a Attribute (line 1228):
        
        # Call to asarray(...): (line 1228)
        # Processing the call arguments (line 1228)
        # Getting the type of 'self' (line 1228)
        self_43104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 34), 'self', False)
        # Obtaining the member '_levels' of a type (line 1228)
        _levels_43105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1228, 34), self_43104, '_levels')
        # Processing the call keyword arguments (line 1228)
        kwargs_43106 = {}
        # Getting the type of 'np' (line 1228)
        np_43102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 23), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1228)
        asarray_43103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1228, 23), np_43102, 'asarray')
        # Calling asarray(args, kwargs) (line 1228)
        asarray_call_result_43107 = invoke(stypy.reporting.localization.Localization(__file__, 1228, 23), asarray_43103, *[_levels_43105], **kwargs_43106)
        
        # Getting the type of 'self' (line 1228)
        self_43108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 8), 'self')
        # Setting the type of the member '_levels' of a type (line 1228)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1228, 8), self_43108, '_levels', asarray_call_result_43107)
        
        
        # Getting the type of 'self' (line 1230)
        self_43109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1230, 15), 'self')
        # Obtaining the member 'filled' of a type (line 1230)
        filled_43110 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1230, 15), self_43109, 'filled')
        # Applying the 'not' unary operator (line 1230)
        result_not__43111 = python_operator(stypy.reporting.localization.Localization(__file__, 1230, 11), 'not', filled_43110)
        
        # Testing the type of an if condition (line 1230)
        if_condition_43112 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1230, 8), result_not__43111)
        # Assigning a type to the variable 'if_condition_43112' (line 1230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1230, 8), 'if_condition_43112', if_condition_43112)
        # SSA begins for if statement (line 1230)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Attribute (line 1231):
        
        # Assigning a Attribute to a Attribute (line 1231):
        # Getting the type of 'self' (line 1231)
        self_43113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 26), 'self')
        # Obtaining the member 'levels' of a type (line 1231)
        levels_43114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 26), self_43113, 'levels')
        # Getting the type of 'self' (line 1231)
        self_43115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1231, 12), 'self')
        # Setting the type of the member 'layers' of a type (line 1231)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1231, 12), self_43115, 'layers', levels_43114)
        # Assigning a type to the variable 'stypy_return_type' (line 1232)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1232, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 1230)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Attribute (line 1235):
        
        # Assigning a BinOp to a Attribute (line 1235):
        float_43116 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1235, 22), 'float')
        
        # Obtaining the type of the subscript
        int_43117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1235, 43), 'int')
        slice_43118 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1235, 29), None, int_43117, None)
        # Getting the type of 'self' (line 1235)
        self_43119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 29), 'self')
        # Obtaining the member '_levels' of a type (line 1235)
        _levels_43120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 29), self_43119, '_levels')
        # Obtaining the member '__getitem__' of a type (line 1235)
        getitem___43121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 29), _levels_43120, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1235)
        subscript_call_result_43122 = invoke(stypy.reporting.localization.Localization(__file__, 1235, 29), getitem___43121, slice_43118)
        
        
        # Obtaining the type of the subscript
        int_43123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1235, 62), 'int')
        slice_43124 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1235, 49), int_43123, None, None)
        # Getting the type of 'self' (line 1235)
        self_43125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 49), 'self')
        # Obtaining the member '_levels' of a type (line 1235)
        _levels_43126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 49), self_43125, '_levels')
        # Obtaining the member '__getitem__' of a type (line 1235)
        getitem___43127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 49), _levels_43126, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1235)
        subscript_call_result_43128 = invoke(stypy.reporting.localization.Localization(__file__, 1235, 49), getitem___43127, slice_43124)
        
        # Applying the binary operator '+' (line 1235)
        result_add_43129 = python_operator(stypy.reporting.localization.Localization(__file__, 1235, 29), '+', subscript_call_result_43122, subscript_call_result_43128)
        
        # Applying the binary operator '*' (line 1235)
        result_mul_43130 = python_operator(stypy.reporting.localization.Localization(__file__, 1235, 22), '*', float_43116, result_add_43129)
        
        # Getting the type of 'self' (line 1235)
        self_43131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 8), 'self')
        # Setting the type of the member 'layers' of a type (line 1235)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1235, 8), self_43131, 'layers', result_mul_43130)
        
        
        # Getting the type of 'self' (line 1238)
        self_43132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 11), 'self')
        # Obtaining the member 'extend' of a type (line 1238)
        extend_43133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1238, 11), self_43132, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1238)
        tuple_43134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1238)
        # Adding element type (line 1238)
        unicode_43135 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 27), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1238, 27), tuple_43134, unicode_43135)
        # Adding element type (line 1238)
        unicode_43136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1238, 35), 'unicode', u'min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1238, 27), tuple_43134, unicode_43136)
        
        # Applying the binary operator 'in' (line 1238)
        result_contains_43137 = python_operator(stypy.reporting.localization.Localization(__file__, 1238, 11), 'in', extend_43133, tuple_43134)
        
        # Testing the type of an if condition (line 1238)
        if_condition_43138 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1238, 8), result_contains_43137)
        # Assigning a type to the variable 'if_condition_43138' (line 1238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 8), 'if_condition_43138', if_condition_43138)
        # SSA begins for if statement (line 1238)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Subscript (line 1239):
        
        # Assigning a Num to a Subscript (line 1239):
        float_43139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 29), 'float')
        # Getting the type of 'self' (line 1239)
        self_43140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1239, 12), 'self')
        # Obtaining the member 'layers' of a type (line 1239)
        layers_43141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1239, 12), self_43140, 'layers')
        int_43142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1239, 24), 'int')
        # Storing an element on a container (line 1239)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1239, 12), layers_43141, (int_43142, float_43139))
        # SSA join for if statement (line 1238)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1240)
        self_43143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1240, 11), 'self')
        # Obtaining the member 'extend' of a type (line 1240)
        extend_43144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1240, 11), self_43143, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1240)
        tuple_43145 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1240)
        # Adding element type (line 1240)
        unicode_43146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 27), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1240, 27), tuple_43145, unicode_43146)
        # Adding element type (line 1240)
        unicode_43147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1240, 35), 'unicode', u'max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1240, 27), tuple_43145, unicode_43147)
        
        # Applying the binary operator 'in' (line 1240)
        result_contains_43148 = python_operator(stypy.reporting.localization.Localization(__file__, 1240, 11), 'in', extend_43144, tuple_43145)
        
        # Testing the type of an if condition (line 1240)
        if_condition_43149 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1240, 8), result_contains_43148)
        # Assigning a type to the variable 'if_condition_43149' (line 1240)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1240, 8), 'if_condition_43149', if_condition_43149)
        # SSA begins for if statement (line 1240)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Subscript (line 1241):
        
        # Assigning a Num to a Subscript (line 1241):
        float_43150 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1241, 30), 'float')
        # Getting the type of 'self' (line 1241)
        self_43151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 12), 'self')
        # Obtaining the member 'layers' of a type (line 1241)
        layers_43152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1241, 12), self_43151, 'layers')
        int_43153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1241, 24), 'int')
        # Storing an element on a container (line 1241)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1241, 12), layers_43152, (int_43153, float_43150))
        # SSA join for if statement (line 1240)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_process_levels(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_levels' in the type store
        # Getting the type of 'stypy_return_type' (line 1206)
        stypy_return_type_43154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43154)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_levels'
        return stypy_return_type_43154


    @norecursion
    def _process_colors(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_colors'
        module_type_store = module_type_store.open_function_context('_process_colors', 1243, 4, False)
        # Assigning a type to the variable 'self' (line 1244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1244, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet._process_colors.__dict__.__setitem__('stypy_localization', localization)
        ContourSet._process_colors.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet._process_colors.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet._process_colors.__dict__.__setitem__('stypy_function_name', 'ContourSet._process_colors')
        ContourSet._process_colors.__dict__.__setitem__('stypy_param_names_list', [])
        ContourSet._process_colors.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet._process_colors.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet._process_colors.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet._process_colors.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet._process_colors.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet._process_colors.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet._process_colors', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_colors', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_colors(...)' code ##################

        unicode_43155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1265, (-1)), 'unicode', u"\n        Color argument processing for contouring.\n\n        Note that we base the color mapping on the contour levels\n        and layers, not on the actual range of the Z values.  This\n        means we don't have to worry about bad values in Z, and we\n        always have the full dynamic range available for the selected\n        levels.\n\n        The color is based on the midpoint of the layer, except for\n        extended end layers.  By default, the norm vmin and vmax\n        are the extreme values of the non-extended levels.  Hence,\n        the layer color extremes are not the extreme values of\n        the colormap itself, but approach those values as the number\n        of levels increases.  An advantage of this scheme is that\n        line contours, when added to filled contours, take on\n        colors that are consistent with those of the filled regions;\n        for example, a contour line on the boundary between two\n        regions will have a color intermediate between those\n        of the regions.\n\n        ")
        
        # Assigning a Attribute to a Attribute (line 1266):
        
        # Assigning a Attribute to a Attribute (line 1266):
        # Getting the type of 'self' (line 1266)
        self_43156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 26), 'self')
        # Obtaining the member 'cmap' of a type (line 1266)
        cmap_43157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 26), self_43156, 'cmap')
        # Obtaining the member 'monochrome' of a type (line 1266)
        monochrome_43158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 26), cmap_43157, 'monochrome')
        # Getting the type of 'self' (line 1266)
        self_43159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 8), 'self')
        # Setting the type of the member 'monochrome' of a type (line 1266)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 8), self_43159, 'monochrome', monochrome_43158)
        
        
        # Getting the type of 'self' (line 1267)
        self_43160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 11), 'self')
        # Obtaining the member 'colors' of a type (line 1267)
        colors_43161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1267, 11), self_43160, 'colors')
        # Getting the type of 'None' (line 1267)
        None_43162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1267, 30), 'None')
        # Applying the binary operator 'isnot' (line 1267)
        result_is_not_43163 = python_operator(stypy.reporting.localization.Localization(__file__, 1267, 11), 'isnot', colors_43161, None_43162)
        
        # Testing the type of an if condition (line 1267)
        if_condition_43164 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1267, 8), result_is_not_43163)
        # Assigning a type to the variable 'if_condition_43164' (line 1267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1267, 8), 'if_condition_43164', if_condition_43164)
        # SSA begins for if statement (line 1267)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 1269):
        
        # Assigning a Num to a Name (line 1269):
        int_43165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1269, 21), 'int')
        # Assigning a type to the variable 'tuple_assignment_39345' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 12), 'tuple_assignment_39345', int_43165)
        
        # Assigning a Call to a Name (line 1269):
        
        # Call to len(...): (line 1269)
        # Processing the call arguments (line 1269)
        # Getting the type of 'self' (line 1269)
        self_43167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 28), 'self', False)
        # Obtaining the member 'levels' of a type (line 1269)
        levels_43168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1269, 28), self_43167, 'levels')
        # Processing the call keyword arguments (line 1269)
        kwargs_43169 = {}
        # Getting the type of 'len' (line 1269)
        len_43166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 24), 'len', False)
        # Calling len(args, kwargs) (line 1269)
        len_call_result_43170 = invoke(stypy.reporting.localization.Localization(__file__, 1269, 24), len_43166, *[levels_43168], **kwargs_43169)
        
        # Assigning a type to the variable 'tuple_assignment_39346' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 12), 'tuple_assignment_39346', len_call_result_43170)
        
        # Assigning a Name to a Name (line 1269):
        # Getting the type of 'tuple_assignment_39345' (line 1269)
        tuple_assignment_39345_43171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 12), 'tuple_assignment_39345')
        # Assigning a type to the variable 'i0' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 12), 'i0', tuple_assignment_39345_43171)
        
        # Assigning a Name to a Name (line 1269):
        # Getting the type of 'tuple_assignment_39346' (line 1269)
        tuple_assignment_39346_43172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 12), 'tuple_assignment_39346')
        # Assigning a type to the variable 'i1' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 16), 'i1', tuple_assignment_39346_43172)
        
        # Getting the type of 'self' (line 1270)
        self_43173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 15), 'self')
        # Obtaining the member 'filled' of a type (line 1270)
        filled_43174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1270, 15), self_43173, 'filled')
        # Testing the type of an if condition (line 1270)
        if_condition_43175 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1270, 12), filled_43174)
        # Assigning a type to the variable 'if_condition_43175' (line 1270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 12), 'if_condition_43175', if_condition_43175)
        # SSA begins for if statement (line 1270)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'i1' (line 1271)
        i1_43176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 16), 'i1')
        int_43177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1271, 22), 'int')
        # Applying the binary operator '-=' (line 1271)
        result_isub_43178 = python_operator(stypy.reporting.localization.Localization(__file__, 1271, 16), '-=', i1_43176, int_43177)
        # Assigning a type to the variable 'i1' (line 1271)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 16), 'i1', result_isub_43178)
        
        
        
        # Getting the type of 'self' (line 1273)
        self_43179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 19), 'self')
        # Obtaining the member 'extend' of a type (line 1273)
        extend_43180 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1273, 19), self_43179, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1273)
        tuple_43181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1273)
        # Adding element type (line 1273)
        unicode_43182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, 35), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1273, 35), tuple_43181, unicode_43182)
        # Adding element type (line 1273)
        unicode_43183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, 43), 'unicode', u'min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1273, 35), tuple_43181, unicode_43183)
        
        # Applying the binary operator 'in' (line 1273)
        result_contains_43184 = python_operator(stypy.reporting.localization.Localization(__file__, 1273, 19), 'in', extend_43180, tuple_43181)
        
        # Testing the type of an if condition (line 1273)
        if_condition_43185 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1273, 16), result_contains_43184)
        # Assigning a type to the variable 'if_condition_43185' (line 1273)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1273, 16), 'if_condition_43185', if_condition_43185)
        # SSA begins for if statement (line 1273)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'i0' (line 1274)
        i0_43186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1274, 20), 'i0')
        int_43187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1274, 26), 'int')
        # Applying the binary operator '-=' (line 1274)
        result_isub_43188 = python_operator(stypy.reporting.localization.Localization(__file__, 1274, 20), '-=', i0_43186, int_43187)
        # Assigning a type to the variable 'i0' (line 1274)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1274, 20), 'i0', result_isub_43188)
        
        # SSA join for if statement (line 1273)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1275)
        self_43189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1275, 19), 'self')
        # Obtaining the member 'extend' of a type (line 1275)
        extend_43190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1275, 19), self_43189, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1275)
        tuple_43191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1275, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1275)
        # Adding element type (line 1275)
        unicode_43192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1275, 35), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1275, 35), tuple_43191, unicode_43192)
        # Adding element type (line 1275)
        unicode_43193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1275, 43), 'unicode', u'max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1275, 35), tuple_43191, unicode_43193)
        
        # Applying the binary operator 'in' (line 1275)
        result_contains_43194 = python_operator(stypy.reporting.localization.Localization(__file__, 1275, 19), 'in', extend_43190, tuple_43191)
        
        # Testing the type of an if condition (line 1275)
        if_condition_43195 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1275, 16), result_contains_43194)
        # Assigning a type to the variable 'if_condition_43195' (line 1275)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 16), 'if_condition_43195', if_condition_43195)
        # SSA begins for if statement (line 1275)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'i1' (line 1276)
        i1_43196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 20), 'i1')
        int_43197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1276, 26), 'int')
        # Applying the binary operator '+=' (line 1276)
        result_iadd_43198 = python_operator(stypy.reporting.localization.Localization(__file__, 1276, 20), '+=', i1_43196, int_43197)
        # Assigning a type to the variable 'i1' (line 1276)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 20), 'i1', result_iadd_43198)
        
        # SSA join for if statement (line 1275)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1270)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Attribute (line 1277):
        
        # Assigning a Call to a Attribute (line 1277):
        
        # Call to list(...): (line 1277)
        # Processing the call arguments (line 1277)
        
        # Call to range(...): (line 1277)
        # Processing the call arguments (line 1277)
        # Getting the type of 'i0' (line 1277)
        i0_43201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 38), 'i0', False)
        # Getting the type of 'i1' (line 1277)
        i1_43202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 42), 'i1', False)
        # Processing the call keyword arguments (line 1277)
        kwargs_43203 = {}
        # Getting the type of 'range' (line 1277)
        range_43200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 32), 'range', False)
        # Calling range(args, kwargs) (line 1277)
        range_call_result_43204 = invoke(stypy.reporting.localization.Localization(__file__, 1277, 32), range_43200, *[i0_43201, i1_43202], **kwargs_43203)
        
        # Processing the call keyword arguments (line 1277)
        kwargs_43205 = {}
        # Getting the type of 'list' (line 1277)
        list_43199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 27), 'list', False)
        # Calling list(args, kwargs) (line 1277)
        list_call_result_43206 = invoke(stypy.reporting.localization.Localization(__file__, 1277, 27), list_43199, *[range_call_result_43204], **kwargs_43205)
        
        # Getting the type of 'self' (line 1277)
        self_43207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 12), 'self')
        # Setting the type of the member 'cvalues' of a type (line 1277)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 12), self_43207, 'cvalues', list_call_result_43206)
        
        # Call to set_norm(...): (line 1278)
        # Processing the call arguments (line 1278)
        
        # Call to NoNorm(...): (line 1278)
        # Processing the call keyword arguments (line 1278)
        kwargs_43212 = {}
        # Getting the type of 'colors' (line 1278)
        colors_43210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 26), 'colors', False)
        # Obtaining the member 'NoNorm' of a type (line 1278)
        NoNorm_43211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1278, 26), colors_43210, 'NoNorm')
        # Calling NoNorm(args, kwargs) (line 1278)
        NoNorm_call_result_43213 = invoke(stypy.reporting.localization.Localization(__file__, 1278, 26), NoNorm_43211, *[], **kwargs_43212)
        
        # Processing the call keyword arguments (line 1278)
        kwargs_43214 = {}
        # Getting the type of 'self' (line 1278)
        self_43208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1278, 12), 'self', False)
        # Obtaining the member 'set_norm' of a type (line 1278)
        set_norm_43209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1278, 12), self_43208, 'set_norm')
        # Calling set_norm(args, kwargs) (line 1278)
        set_norm_call_result_43215 = invoke(stypy.reporting.localization.Localization(__file__, 1278, 12), set_norm_43209, *[NoNorm_call_result_43213], **kwargs_43214)
        
        # SSA branch for the else part of an if statement (line 1267)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Attribute (line 1280):
        
        # Assigning a Attribute to a Attribute (line 1280):
        # Getting the type of 'self' (line 1280)
        self_43216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 27), 'self')
        # Obtaining the member 'layers' of a type (line 1280)
        layers_43217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 27), self_43216, 'layers')
        # Getting the type of 'self' (line 1280)
        self_43218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 12), 'self')
        # Setting the type of the member 'cvalues' of a type (line 1280)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1280, 12), self_43218, 'cvalues', layers_43217)
        # SSA join for if statement (line 1267)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_array(...): (line 1281)
        # Processing the call arguments (line 1281)
        # Getting the type of 'self' (line 1281)
        self_43221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 23), 'self', False)
        # Obtaining the member 'levels' of a type (line 1281)
        levels_43222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1281, 23), self_43221, 'levels')
        # Processing the call keyword arguments (line 1281)
        kwargs_43223 = {}
        # Getting the type of 'self' (line 1281)
        self_43219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 8), 'self', False)
        # Obtaining the member 'set_array' of a type (line 1281)
        set_array_43220 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1281, 8), self_43219, 'set_array')
        # Calling set_array(args, kwargs) (line 1281)
        set_array_call_result_43224 = invoke(stypy.reporting.localization.Localization(__file__, 1281, 8), set_array_43220, *[levels_43222], **kwargs_43223)
        
        
        # Call to autoscale_None(...): (line 1282)
        # Processing the call keyword arguments (line 1282)
        kwargs_43227 = {}
        # Getting the type of 'self' (line 1282)
        self_43225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 8), 'self', False)
        # Obtaining the member 'autoscale_None' of a type (line 1282)
        autoscale_None_43226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1282, 8), self_43225, 'autoscale_None')
        # Calling autoscale_None(args, kwargs) (line 1282)
        autoscale_None_call_result_43228 = invoke(stypy.reporting.localization.Localization(__file__, 1282, 8), autoscale_None_43226, *[], **kwargs_43227)
        
        
        
        # Getting the type of 'self' (line 1283)
        self_43229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1283, 11), 'self')
        # Obtaining the member 'extend' of a type (line 1283)
        extend_43230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1283, 11), self_43229, 'extend')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1283)
        tuple_43231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1283)
        # Adding element type (line 1283)
        unicode_43232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 27), 'unicode', u'both')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1283, 27), tuple_43231, unicode_43232)
        # Adding element type (line 1283)
        unicode_43233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 35), 'unicode', u'max')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1283, 27), tuple_43231, unicode_43233)
        # Adding element type (line 1283)
        unicode_43234 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1283, 42), 'unicode', u'min')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1283, 27), tuple_43231, unicode_43234)
        
        # Applying the binary operator 'in' (line 1283)
        result_contains_43235 = python_operator(stypy.reporting.localization.Localization(__file__, 1283, 11), 'in', extend_43230, tuple_43231)
        
        # Testing the type of an if condition (line 1283)
        if_condition_43236 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1283, 8), result_contains_43235)
        # Assigning a type to the variable 'if_condition_43236' (line 1283)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1283, 8), 'if_condition_43236', if_condition_43236)
        # SSA begins for if statement (line 1283)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1284):
        
        # Assigning a Name to a Attribute (line 1284):
        # Getting the type of 'False' (line 1284)
        False_43237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 29), 'False')
        # Getting the type of 'self' (line 1284)
        self_43238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 12), 'self')
        # Obtaining the member 'norm' of a type (line 1284)
        norm_43239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 12), self_43238, 'norm')
        # Setting the type of the member 'clip' of a type (line 1284)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1284, 12), norm_43239, 'clip', False_43237)
        # SSA join for if statement (line 1283)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of '_process_colors(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_colors' in the type store
        # Getting the type of 'stypy_return_type' (line 1243)
        stypy_return_type_43240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1243, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43240)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_colors'
        return stypy_return_type_43240


    @norecursion
    def _process_linewidths(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_linewidths'
        module_type_store = module_type_store.open_function_context('_process_linewidths', 1288, 4, False)
        # Assigning a type to the variable 'self' (line 1289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet._process_linewidths.__dict__.__setitem__('stypy_localization', localization)
        ContourSet._process_linewidths.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet._process_linewidths.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet._process_linewidths.__dict__.__setitem__('stypy_function_name', 'ContourSet._process_linewidths')
        ContourSet._process_linewidths.__dict__.__setitem__('stypy_param_names_list', [])
        ContourSet._process_linewidths.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet._process_linewidths.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet._process_linewidths.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet._process_linewidths.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet._process_linewidths.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet._process_linewidths.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet._process_linewidths', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_linewidths', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_linewidths(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1289):
        
        # Assigning a Attribute to a Name (line 1289):
        # Getting the type of 'self' (line 1289)
        self_43241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 21), 'self')
        # Obtaining the member 'linewidths' of a type (line 1289)
        linewidths_43242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1289, 21), self_43241, 'linewidths')
        # Assigning a type to the variable 'linewidths' (line 1289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 8), 'linewidths', linewidths_43242)
        
        # Assigning a Call to a Name (line 1290):
        
        # Assigning a Call to a Name (line 1290):
        
        # Call to len(...): (line 1290)
        # Processing the call arguments (line 1290)
        # Getting the type of 'self' (line 1290)
        self_43244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 19), 'self', False)
        # Obtaining the member 'levels' of a type (line 1290)
        levels_43245 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1290, 19), self_43244, 'levels')
        # Processing the call keyword arguments (line 1290)
        kwargs_43246 = {}
        # Getting the type of 'len' (line 1290)
        len_43243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 15), 'len', False)
        # Calling len(args, kwargs) (line 1290)
        len_call_result_43247 = invoke(stypy.reporting.localization.Localization(__file__, 1290, 15), len_43243, *[levels_43245], **kwargs_43246)
        
        # Assigning a type to the variable 'Nlev' (line 1290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'Nlev', len_call_result_43247)
        
        # Type idiom detected: calculating its left and rigth part (line 1291)
        # Getting the type of 'linewidths' (line 1291)
        linewidths_43248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 11), 'linewidths')
        # Getting the type of 'None' (line 1291)
        None_43249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1291, 25), 'None')
        
        (may_be_43250, more_types_in_union_43251) = may_be_none(linewidths_43248, None_43249)

        if may_be_43250:

            if more_types_in_union_43251:
                # Runtime conditional SSA (line 1291)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 1292):
            
            # Assigning a BinOp to a Name (line 1292):
            
            # Obtaining an instance of the builtin type 'list' (line 1292)
            list_43252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1292, 26), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1292)
            # Adding element type (line 1292)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1292)
            tuple_43253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1292, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1292)
            # Adding element type (line 1292)
            
            # Obtaining the type of the subscript
            unicode_43254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1292, 41), 'unicode', u'lines.linewidth')
            # Getting the type of 'mpl' (line 1292)
            mpl_43255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 28), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 1292)
            rcParams_43256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 28), mpl_43255, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1292)
            getitem___43257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 28), rcParams_43256, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1292)
            subscript_call_result_43258 = invoke(stypy.reporting.localization.Localization(__file__, 1292, 28), getitem___43257, unicode_43254)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1292, 28), tuple_43253, subscript_call_result_43258)
            
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1292, 26), list_43252, tuple_43253)
            
            # Getting the type of 'Nlev' (line 1292)
            Nlev_43259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 65), 'Nlev')
            # Applying the binary operator '*' (line 1292)
            result_mul_43260 = python_operator(stypy.reporting.localization.Localization(__file__, 1292, 26), '*', list_43252, Nlev_43259)
            
            # Assigning a type to the variable 'tlinewidths' (line 1292)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1292, 12), 'tlinewidths', result_mul_43260)

            if more_types_in_union_43251:
                # Runtime conditional SSA for else branch (line 1291)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_43250) or more_types_in_union_43251):
            
            
            
            # Call to iterable(...): (line 1294)
            # Processing the call arguments (line 1294)
            # Getting the type of 'linewidths' (line 1294)
            linewidths_43263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 34), 'linewidths', False)
            # Processing the call keyword arguments (line 1294)
            kwargs_43264 = {}
            # Getting the type of 'cbook' (line 1294)
            cbook_43261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 19), 'cbook', False)
            # Obtaining the member 'iterable' of a type (line 1294)
            iterable_43262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 19), cbook_43261, 'iterable')
            # Calling iterable(args, kwargs) (line 1294)
            iterable_call_result_43265 = invoke(stypy.reporting.localization.Localization(__file__, 1294, 19), iterable_43262, *[linewidths_43263], **kwargs_43264)
            
            # Applying the 'not' unary operator (line 1294)
            result_not__43266 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 15), 'not', iterable_call_result_43265)
            
            # Testing the type of an if condition (line 1294)
            if_condition_43267 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1294, 12), result_not__43266)
            # Assigning a type to the variable 'if_condition_43267' (line 1294)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 12), 'if_condition_43267', if_condition_43267)
            # SSA begins for if statement (line 1294)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 1295):
            
            # Assigning a BinOp to a Name (line 1295):
            
            # Obtaining an instance of the builtin type 'list' (line 1295)
            list_43268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1295, 29), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1295)
            # Adding element type (line 1295)
            # Getting the type of 'linewidths' (line 1295)
            linewidths_43269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 30), 'linewidths')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1295, 29), list_43268, linewidths_43269)
            
            # Getting the type of 'Nlev' (line 1295)
            Nlev_43270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 44), 'Nlev')
            # Applying the binary operator '*' (line 1295)
            result_mul_43271 = python_operator(stypy.reporting.localization.Localization(__file__, 1295, 29), '*', list_43268, Nlev_43270)
            
            # Assigning a type to the variable 'linewidths' (line 1295)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 16), 'linewidths', result_mul_43271)
            # SSA branch for the else part of an if statement (line 1294)
            module_type_store.open_ssa_branch('else')
            
            # Assigning a Call to a Name (line 1297):
            
            # Assigning a Call to a Name (line 1297):
            
            # Call to list(...): (line 1297)
            # Processing the call arguments (line 1297)
            # Getting the type of 'linewidths' (line 1297)
            linewidths_43273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 34), 'linewidths', False)
            # Processing the call keyword arguments (line 1297)
            kwargs_43274 = {}
            # Getting the type of 'list' (line 1297)
            list_43272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 29), 'list', False)
            # Calling list(args, kwargs) (line 1297)
            list_call_result_43275 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 29), list_43272, *[linewidths_43273], **kwargs_43274)
            
            # Assigning a type to the variable 'linewidths' (line 1297)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 16), 'linewidths', list_call_result_43275)
            
            
            
            # Call to len(...): (line 1298)
            # Processing the call arguments (line 1298)
            # Getting the type of 'linewidths' (line 1298)
            linewidths_43277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 23), 'linewidths', False)
            # Processing the call keyword arguments (line 1298)
            kwargs_43278 = {}
            # Getting the type of 'len' (line 1298)
            len_43276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 19), 'len', False)
            # Calling len(args, kwargs) (line 1298)
            len_call_result_43279 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 19), len_43276, *[linewidths_43277], **kwargs_43278)
            
            # Getting the type of 'Nlev' (line 1298)
            Nlev_43280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 37), 'Nlev')
            # Applying the binary operator '<' (line 1298)
            result_lt_43281 = python_operator(stypy.reporting.localization.Localization(__file__, 1298, 19), '<', len_call_result_43279, Nlev_43280)
            
            # Testing the type of an if condition (line 1298)
            if_condition_43282 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1298, 16), result_lt_43281)
            # Assigning a type to the variable 'if_condition_43282' (line 1298)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1298, 16), 'if_condition_43282', if_condition_43282)
            # SSA begins for if statement (line 1298)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 1299):
            
            # Assigning a Call to a Name (line 1299):
            
            # Call to int(...): (line 1299)
            # Processing the call arguments (line 1299)
            
            # Call to ceil(...): (line 1299)
            # Processing the call arguments (line 1299)
            # Getting the type of 'Nlev' (line 1299)
            Nlev_43286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 40), 'Nlev', False)
            
            # Call to len(...): (line 1299)
            # Processing the call arguments (line 1299)
            # Getting the type of 'linewidths' (line 1299)
            linewidths_43288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 51), 'linewidths', False)
            # Processing the call keyword arguments (line 1299)
            kwargs_43289 = {}
            # Getting the type of 'len' (line 1299)
            len_43287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 47), 'len', False)
            # Calling len(args, kwargs) (line 1299)
            len_call_result_43290 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 47), len_43287, *[linewidths_43288], **kwargs_43289)
            
            # Applying the binary operator 'div' (line 1299)
            result_div_43291 = python_operator(stypy.reporting.localization.Localization(__file__, 1299, 40), 'div', Nlev_43286, len_call_result_43290)
            
            # Processing the call keyword arguments (line 1299)
            kwargs_43292 = {}
            # Getting the type of 'np' (line 1299)
            np_43284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 32), 'np', False)
            # Obtaining the member 'ceil' of a type (line 1299)
            ceil_43285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 32), np_43284, 'ceil')
            # Calling ceil(args, kwargs) (line 1299)
            ceil_call_result_43293 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 32), ceil_43285, *[result_div_43291], **kwargs_43292)
            
            # Processing the call keyword arguments (line 1299)
            kwargs_43294 = {}
            # Getting the type of 'int' (line 1299)
            int_43283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 28), 'int', False)
            # Calling int(args, kwargs) (line 1299)
            int_call_result_43295 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 28), int_43283, *[ceil_call_result_43293], **kwargs_43294)
            
            # Assigning a type to the variable 'nreps' (line 1299)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 20), 'nreps', int_call_result_43295)
            
            # Assigning a BinOp to a Name (line 1300):
            
            # Assigning a BinOp to a Name (line 1300):
            # Getting the type of 'linewidths' (line 1300)
            linewidths_43296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 33), 'linewidths')
            # Getting the type of 'nreps' (line 1300)
            nreps_43297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 46), 'nreps')
            # Applying the binary operator '*' (line 1300)
            result_mul_43298 = python_operator(stypy.reporting.localization.Localization(__file__, 1300, 33), '*', linewidths_43296, nreps_43297)
            
            # Assigning a type to the variable 'linewidths' (line 1300)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 20), 'linewidths', result_mul_43298)
            # SSA join for if statement (line 1298)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            
            # Call to len(...): (line 1301)
            # Processing the call arguments (line 1301)
            # Getting the type of 'linewidths' (line 1301)
            linewidths_43300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 23), 'linewidths', False)
            # Processing the call keyword arguments (line 1301)
            kwargs_43301 = {}
            # Getting the type of 'len' (line 1301)
            len_43299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 19), 'len', False)
            # Calling len(args, kwargs) (line 1301)
            len_call_result_43302 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 19), len_43299, *[linewidths_43300], **kwargs_43301)
            
            # Getting the type of 'Nlev' (line 1301)
            Nlev_43303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 37), 'Nlev')
            # Applying the binary operator '>' (line 1301)
            result_gt_43304 = python_operator(stypy.reporting.localization.Localization(__file__, 1301, 19), '>', len_call_result_43302, Nlev_43303)
            
            # Testing the type of an if condition (line 1301)
            if_condition_43305 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1301, 16), result_gt_43304)
            # Assigning a type to the variable 'if_condition_43305' (line 1301)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1301, 16), 'if_condition_43305', if_condition_43305)
            # SSA begins for if statement (line 1301)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 1302):
            
            # Assigning a Subscript to a Name (line 1302):
            
            # Obtaining the type of the subscript
            # Getting the type of 'Nlev' (line 1302)
            Nlev_43306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 45), 'Nlev')
            slice_43307 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1302, 33), None, Nlev_43306, None)
            # Getting the type of 'linewidths' (line 1302)
            linewidths_43308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 33), 'linewidths')
            # Obtaining the member '__getitem__' of a type (line 1302)
            getitem___43309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1302, 33), linewidths_43308, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1302)
            subscript_call_result_43310 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 33), getitem___43309, slice_43307)
            
            # Assigning a type to the variable 'linewidths' (line 1302)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 20), 'linewidths', subscript_call_result_43310)
            # SSA join for if statement (line 1301)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1294)
            module_type_store = module_type_store.join_ssa_context()
            
            
            # Assigning a ListComp to a Name (line 1303):
            
            # Assigning a ListComp to a Name (line 1303):
            # Calculating list comprehension
            # Calculating comprehension expression
            # Getting the type of 'linewidths' (line 1303)
            linewidths_43313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 41), 'linewidths')
            comprehension_43314 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1303, 27), linewidths_43313)
            # Assigning a type to the variable 'w' (line 1303)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 27), 'w', comprehension_43314)
            
            # Obtaining an instance of the builtin type 'tuple' (line 1303)
            tuple_43311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 28), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 1303)
            # Adding element type (line 1303)
            # Getting the type of 'w' (line 1303)
            w_43312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1303, 28), 'w')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1303, 28), tuple_43311, w_43312)
            
            list_43315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1303, 27), 'list')
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1303, 27), list_43315, tuple_43311)
            # Assigning a type to the variable 'tlinewidths' (line 1303)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1303, 12), 'tlinewidths', list_43315)

            if (may_be_43250 and more_types_in_union_43251):
                # SSA join for if statement (line 1291)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'tlinewidths' (line 1304)
        tlinewidths_43316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1304, 15), 'tlinewidths')
        # Assigning a type to the variable 'stypy_return_type' (line 1304)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1304, 8), 'stypy_return_type', tlinewidths_43316)
        
        # ################# End of '_process_linewidths(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_linewidths' in the type store
        # Getting the type of 'stypy_return_type' (line 1288)
        stypy_return_type_43317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43317)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_linewidths'
        return stypy_return_type_43317


    @norecursion
    def _process_linestyles(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_linestyles'
        module_type_store = module_type_store.open_function_context('_process_linestyles', 1306, 4, False)
        # Assigning a type to the variable 'self' (line 1307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet._process_linestyles.__dict__.__setitem__('stypy_localization', localization)
        ContourSet._process_linestyles.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet._process_linestyles.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet._process_linestyles.__dict__.__setitem__('stypy_function_name', 'ContourSet._process_linestyles')
        ContourSet._process_linestyles.__dict__.__setitem__('stypy_param_names_list', [])
        ContourSet._process_linestyles.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet._process_linestyles.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet._process_linestyles.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet._process_linestyles.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet._process_linestyles.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet._process_linestyles.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet._process_linestyles', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_linestyles', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_linestyles(...)' code ##################

        
        # Assigning a Attribute to a Name (line 1307):
        
        # Assigning a Attribute to a Name (line 1307):
        # Getting the type of 'self' (line 1307)
        self_43318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1307, 21), 'self')
        # Obtaining the member 'linestyles' of a type (line 1307)
        linestyles_43319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1307, 21), self_43318, 'linestyles')
        # Assigning a type to the variable 'linestyles' (line 1307)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1307, 8), 'linestyles', linestyles_43319)
        
        # Assigning a Call to a Name (line 1308):
        
        # Assigning a Call to a Name (line 1308):
        
        # Call to len(...): (line 1308)
        # Processing the call arguments (line 1308)
        # Getting the type of 'self' (line 1308)
        self_43321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 19), 'self', False)
        # Obtaining the member 'levels' of a type (line 1308)
        levels_43322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1308, 19), self_43321, 'levels')
        # Processing the call keyword arguments (line 1308)
        kwargs_43323 = {}
        # Getting the type of 'len' (line 1308)
        len_43320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1308, 15), 'len', False)
        # Calling len(args, kwargs) (line 1308)
        len_call_result_43324 = invoke(stypy.reporting.localization.Localization(__file__, 1308, 15), len_43320, *[levels_43322], **kwargs_43323)
        
        # Assigning a type to the variable 'Nlev' (line 1308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1308, 8), 'Nlev', len_call_result_43324)
        
        # Type idiom detected: calculating its left and rigth part (line 1309)
        # Getting the type of 'linestyles' (line 1309)
        linestyles_43325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 11), 'linestyles')
        # Getting the type of 'None' (line 1309)
        None_43326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1309, 25), 'None')
        
        (may_be_43327, more_types_in_union_43328) = may_be_none(linestyles_43325, None_43326)

        if may_be_43327:

            if more_types_in_union_43328:
                # Runtime conditional SSA (line 1309)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a BinOp to a Name (line 1310):
            
            # Assigning a BinOp to a Name (line 1310):
            
            # Obtaining an instance of the builtin type 'list' (line 1310)
            list_43329 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1310, 26), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1310)
            # Adding element type (line 1310)
            unicode_43330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1310, 27), 'unicode', u'solid')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1310, 26), list_43329, unicode_43330)
            
            # Getting the type of 'Nlev' (line 1310)
            Nlev_43331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1310, 38), 'Nlev')
            # Applying the binary operator '*' (line 1310)
            result_mul_43332 = python_operator(stypy.reporting.localization.Localization(__file__, 1310, 26), '*', list_43329, Nlev_43331)
            
            # Assigning a type to the variable 'tlinestyles' (line 1310)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1310, 12), 'tlinestyles', result_mul_43332)
            
            # Getting the type of 'self' (line 1311)
            self_43333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1311, 15), 'self')
            # Obtaining the member 'monochrome' of a type (line 1311)
            monochrome_43334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1311, 15), self_43333, 'monochrome')
            # Testing the type of an if condition (line 1311)
            if_condition_43335 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1311, 12), monochrome_43334)
            # Assigning a type to the variable 'if_condition_43335' (line 1311)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1311, 12), 'if_condition_43335', if_condition_43335)
            # SSA begins for if statement (line 1311)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 1312):
            
            # Assigning a Subscript to a Name (line 1312):
            
            # Obtaining the type of the subscript
            unicode_43336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1312, 38), 'unicode', u'contour.negative_linestyle')
            # Getting the type of 'mpl' (line 1312)
            mpl_43337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1312, 25), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 1312)
            rcParams_43338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 25), mpl_43337, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1312)
            getitem___43339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1312, 25), rcParams_43338, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1312)
            subscript_call_result_43340 = invoke(stypy.reporting.localization.Localization(__file__, 1312, 25), getitem___43339, unicode_43336)
            
            # Assigning a type to the variable 'neg_ls' (line 1312)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1312, 16), 'neg_ls', subscript_call_result_43340)
            
            # Assigning a BinOp to a Name (line 1313):
            
            # Assigning a BinOp to a Name (line 1313):
            
            # Getting the type of 'self' (line 1313)
            self_43341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 25), 'self')
            # Obtaining the member 'zmax' of a type (line 1313)
            zmax_43342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 25), self_43341, 'zmax')
            # Getting the type of 'self' (line 1313)
            self_43343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1313, 37), 'self')
            # Obtaining the member 'zmin' of a type (line 1313)
            zmin_43344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1313, 37), self_43343, 'zmin')
            # Applying the binary operator '-' (line 1313)
            result_sub_43345 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 25), '-', zmax_43342, zmin_43344)
            
            # Applying the 'usub' unary operator (line 1313)
            result___neg___43346 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 22), 'usub', result_sub_43345)
            
            float_43347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1313, 50), 'float')
            # Applying the binary operator '*' (line 1313)
            result_mul_43348 = python_operator(stypy.reporting.localization.Localization(__file__, 1313, 22), '*', result___neg___43346, float_43347)
            
            # Assigning a type to the variable 'eps' (line 1313)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1313, 16), 'eps', result_mul_43348)
            
            
            # Call to enumerate(...): (line 1314)
            # Processing the call arguments (line 1314)
            # Getting the type of 'self' (line 1314)
            self_43350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 40), 'self', False)
            # Obtaining the member 'levels' of a type (line 1314)
            levels_43351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1314, 40), self_43350, 'levels')
            # Processing the call keyword arguments (line 1314)
            kwargs_43352 = {}
            # Getting the type of 'enumerate' (line 1314)
            enumerate_43349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1314, 30), 'enumerate', False)
            # Calling enumerate(args, kwargs) (line 1314)
            enumerate_call_result_43353 = invoke(stypy.reporting.localization.Localization(__file__, 1314, 30), enumerate_43349, *[levels_43351], **kwargs_43352)
            
            # Testing the type of a for loop iterable (line 1314)
            is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1314, 16), enumerate_call_result_43353)
            # Getting the type of the for loop variable (line 1314)
            for_loop_var_43354 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1314, 16), enumerate_call_result_43353)
            # Assigning a type to the variable 'i' (line 1314)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 16), 'i', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1314, 16), for_loop_var_43354))
            # Assigning a type to the variable 'lev' (line 1314)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1314, 16), 'lev', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1314, 16), for_loop_var_43354))
            # SSA begins for a for statement (line 1314)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
            
            
            # Getting the type of 'lev' (line 1315)
            lev_43355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 23), 'lev')
            # Getting the type of 'eps' (line 1315)
            eps_43356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1315, 29), 'eps')
            # Applying the binary operator '<' (line 1315)
            result_lt_43357 = python_operator(stypy.reporting.localization.Localization(__file__, 1315, 23), '<', lev_43355, eps_43356)
            
            # Testing the type of an if condition (line 1315)
            if_condition_43358 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1315, 20), result_lt_43357)
            # Assigning a type to the variable 'if_condition_43358' (line 1315)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1315, 20), 'if_condition_43358', if_condition_43358)
            # SSA begins for if statement (line 1315)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Name to a Subscript (line 1316):
            
            # Assigning a Name to a Subscript (line 1316):
            # Getting the type of 'neg_ls' (line 1316)
            neg_ls_43359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 41), 'neg_ls')
            # Getting the type of 'tlinestyles' (line 1316)
            tlinestyles_43360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 24), 'tlinestyles')
            # Getting the type of 'i' (line 1316)
            i_43361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1316, 36), 'i')
            # Storing an element on a container (line 1316)
            set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1316, 24), tlinestyles_43360, (i_43361, neg_ls_43359))
            # SSA join for if statement (line 1315)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for a for statement
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1311)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_43328:
                # Runtime conditional SSA for else branch (line 1309)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_43327) or more_types_in_union_43328):
            
            
            # Call to isinstance(...): (line 1318)
            # Processing the call arguments (line 1318)
            # Getting the type of 'linestyles' (line 1318)
            linestyles_43363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 26), 'linestyles', False)
            # Getting the type of 'six' (line 1318)
            six_43364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 38), 'six', False)
            # Obtaining the member 'string_types' of a type (line 1318)
            string_types_43365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1318, 38), six_43364, 'string_types')
            # Processing the call keyword arguments (line 1318)
            kwargs_43366 = {}
            # Getting the type of 'isinstance' (line 1318)
            isinstance_43362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1318, 15), 'isinstance', False)
            # Calling isinstance(args, kwargs) (line 1318)
            isinstance_call_result_43367 = invoke(stypy.reporting.localization.Localization(__file__, 1318, 15), isinstance_43362, *[linestyles_43363, string_types_43365], **kwargs_43366)
            
            # Testing the type of an if condition (line 1318)
            if_condition_43368 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1318, 12), isinstance_call_result_43367)
            # Assigning a type to the variable 'if_condition_43368' (line 1318)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1318, 12), 'if_condition_43368', if_condition_43368)
            # SSA begins for if statement (line 1318)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a BinOp to a Name (line 1319):
            
            # Assigning a BinOp to a Name (line 1319):
            
            # Obtaining an instance of the builtin type 'list' (line 1319)
            list_43369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1319, 30), 'list')
            # Adding type elements to the builtin type 'list' instance (line 1319)
            # Adding element type (line 1319)
            # Getting the type of 'linestyles' (line 1319)
            linestyles_43370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 31), 'linestyles')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1319, 30), list_43369, linestyles_43370)
            
            # Getting the type of 'Nlev' (line 1319)
            Nlev_43371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1319, 45), 'Nlev')
            # Applying the binary operator '*' (line 1319)
            result_mul_43372 = python_operator(stypy.reporting.localization.Localization(__file__, 1319, 30), '*', list_43369, Nlev_43371)
            
            # Assigning a type to the variable 'tlinestyles' (line 1319)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1319, 16), 'tlinestyles', result_mul_43372)
            # SSA branch for the else part of an if statement (line 1318)
            module_type_store.open_ssa_branch('else')
            
            
            # Call to iterable(...): (line 1320)
            # Processing the call arguments (line 1320)
            # Getting the type of 'linestyles' (line 1320)
            linestyles_43375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 32), 'linestyles', False)
            # Processing the call keyword arguments (line 1320)
            kwargs_43376 = {}
            # Getting the type of 'cbook' (line 1320)
            cbook_43373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1320, 17), 'cbook', False)
            # Obtaining the member 'iterable' of a type (line 1320)
            iterable_43374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1320, 17), cbook_43373, 'iterable')
            # Calling iterable(args, kwargs) (line 1320)
            iterable_call_result_43377 = invoke(stypy.reporting.localization.Localization(__file__, 1320, 17), iterable_43374, *[linestyles_43375], **kwargs_43376)
            
            # Testing the type of an if condition (line 1320)
            if_condition_43378 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1320, 17), iterable_call_result_43377)
            # Assigning a type to the variable 'if_condition_43378' (line 1320)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1320, 17), 'if_condition_43378', if_condition_43378)
            # SSA begins for if statement (line 1320)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 1321):
            
            # Assigning a Call to a Name (line 1321):
            
            # Call to list(...): (line 1321)
            # Processing the call arguments (line 1321)
            # Getting the type of 'linestyles' (line 1321)
            linestyles_43380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 35), 'linestyles', False)
            # Processing the call keyword arguments (line 1321)
            kwargs_43381 = {}
            # Getting the type of 'list' (line 1321)
            list_43379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1321, 30), 'list', False)
            # Calling list(args, kwargs) (line 1321)
            list_call_result_43382 = invoke(stypy.reporting.localization.Localization(__file__, 1321, 30), list_43379, *[linestyles_43380], **kwargs_43381)
            
            # Assigning a type to the variable 'tlinestyles' (line 1321)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1321, 16), 'tlinestyles', list_call_result_43382)
            
            
            
            # Call to len(...): (line 1322)
            # Processing the call arguments (line 1322)
            # Getting the type of 'tlinestyles' (line 1322)
            tlinestyles_43384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 23), 'tlinestyles', False)
            # Processing the call keyword arguments (line 1322)
            kwargs_43385 = {}
            # Getting the type of 'len' (line 1322)
            len_43383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 19), 'len', False)
            # Calling len(args, kwargs) (line 1322)
            len_call_result_43386 = invoke(stypy.reporting.localization.Localization(__file__, 1322, 19), len_43383, *[tlinestyles_43384], **kwargs_43385)
            
            # Getting the type of 'Nlev' (line 1322)
            Nlev_43387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 38), 'Nlev')
            # Applying the binary operator '<' (line 1322)
            result_lt_43388 = python_operator(stypy.reporting.localization.Localization(__file__, 1322, 19), '<', len_call_result_43386, Nlev_43387)
            
            # Testing the type of an if condition (line 1322)
            if_condition_43389 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1322, 16), result_lt_43388)
            # Assigning a type to the variable 'if_condition_43389' (line 1322)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1322, 16), 'if_condition_43389', if_condition_43389)
            # SSA begins for if statement (line 1322)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Name (line 1323):
            
            # Assigning a Call to a Name (line 1323):
            
            # Call to int(...): (line 1323)
            # Processing the call arguments (line 1323)
            
            # Call to ceil(...): (line 1323)
            # Processing the call arguments (line 1323)
            # Getting the type of 'Nlev' (line 1323)
            Nlev_43393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 40), 'Nlev', False)
            
            # Call to len(...): (line 1323)
            # Processing the call arguments (line 1323)
            # Getting the type of 'linestyles' (line 1323)
            linestyles_43395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 51), 'linestyles', False)
            # Processing the call keyword arguments (line 1323)
            kwargs_43396 = {}
            # Getting the type of 'len' (line 1323)
            len_43394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 47), 'len', False)
            # Calling len(args, kwargs) (line 1323)
            len_call_result_43397 = invoke(stypy.reporting.localization.Localization(__file__, 1323, 47), len_43394, *[linestyles_43395], **kwargs_43396)
            
            # Applying the binary operator 'div' (line 1323)
            result_div_43398 = python_operator(stypy.reporting.localization.Localization(__file__, 1323, 40), 'div', Nlev_43393, len_call_result_43397)
            
            # Processing the call keyword arguments (line 1323)
            kwargs_43399 = {}
            # Getting the type of 'np' (line 1323)
            np_43391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 32), 'np', False)
            # Obtaining the member 'ceil' of a type (line 1323)
            ceil_43392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1323, 32), np_43391, 'ceil')
            # Calling ceil(args, kwargs) (line 1323)
            ceil_call_result_43400 = invoke(stypy.reporting.localization.Localization(__file__, 1323, 32), ceil_43392, *[result_div_43398], **kwargs_43399)
            
            # Processing the call keyword arguments (line 1323)
            kwargs_43401 = {}
            # Getting the type of 'int' (line 1323)
            int_43390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 28), 'int', False)
            # Calling int(args, kwargs) (line 1323)
            int_call_result_43402 = invoke(stypy.reporting.localization.Localization(__file__, 1323, 28), int_43390, *[ceil_call_result_43400], **kwargs_43401)
            
            # Assigning a type to the variable 'nreps' (line 1323)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1323, 20), 'nreps', int_call_result_43402)
            
            # Assigning a BinOp to a Name (line 1324):
            
            # Assigning a BinOp to a Name (line 1324):
            # Getting the type of 'tlinestyles' (line 1324)
            tlinestyles_43403 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 34), 'tlinestyles')
            # Getting the type of 'nreps' (line 1324)
            nreps_43404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1324, 48), 'nreps')
            # Applying the binary operator '*' (line 1324)
            result_mul_43405 = python_operator(stypy.reporting.localization.Localization(__file__, 1324, 34), '*', tlinestyles_43403, nreps_43404)
            
            # Assigning a type to the variable 'tlinestyles' (line 1324)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1324, 20), 'tlinestyles', result_mul_43405)
            # SSA join for if statement (line 1322)
            module_type_store = module_type_store.join_ssa_context()
            
            
            
            
            # Call to len(...): (line 1325)
            # Processing the call arguments (line 1325)
            # Getting the type of 'tlinestyles' (line 1325)
            tlinestyles_43407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 23), 'tlinestyles', False)
            # Processing the call keyword arguments (line 1325)
            kwargs_43408 = {}
            # Getting the type of 'len' (line 1325)
            len_43406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 19), 'len', False)
            # Calling len(args, kwargs) (line 1325)
            len_call_result_43409 = invoke(stypy.reporting.localization.Localization(__file__, 1325, 19), len_43406, *[tlinestyles_43407], **kwargs_43408)
            
            # Getting the type of 'Nlev' (line 1325)
            Nlev_43410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1325, 38), 'Nlev')
            # Applying the binary operator '>' (line 1325)
            result_gt_43411 = python_operator(stypy.reporting.localization.Localization(__file__, 1325, 19), '>', len_call_result_43409, Nlev_43410)
            
            # Testing the type of an if condition (line 1325)
            if_condition_43412 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1325, 16), result_gt_43411)
            # Assigning a type to the variable 'if_condition_43412' (line 1325)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1325, 16), 'if_condition_43412', if_condition_43412)
            # SSA begins for if statement (line 1325)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Subscript to a Name (line 1326):
            
            # Assigning a Subscript to a Name (line 1326):
            
            # Obtaining the type of the subscript
            # Getting the type of 'Nlev' (line 1326)
            Nlev_43413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 47), 'Nlev')
            slice_43414 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1326, 34), None, Nlev_43413, None)
            # Getting the type of 'tlinestyles' (line 1326)
            tlinestyles_43415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 34), 'tlinestyles')
            # Obtaining the member '__getitem__' of a type (line 1326)
            getitem___43416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1326, 34), tlinestyles_43415, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1326)
            subscript_call_result_43417 = invoke(stypy.reporting.localization.Localization(__file__, 1326, 34), getitem___43416, slice_43414)
            
            # Assigning a type to the variable 'tlinestyles' (line 1326)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 20), 'tlinestyles', subscript_call_result_43417)
            # SSA join for if statement (line 1325)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA branch for the else part of an if statement (line 1320)
            module_type_store.open_ssa_branch('else')
            
            # Call to ValueError(...): (line 1328)
            # Processing the call arguments (line 1328)
            unicode_43419 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1328, 33), 'unicode', u'Unrecognized type for linestyles kwarg')
            # Processing the call keyword arguments (line 1328)
            kwargs_43420 = {}
            # Getting the type of 'ValueError' (line 1328)
            ValueError_43418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1328, 22), 'ValueError', False)
            # Calling ValueError(args, kwargs) (line 1328)
            ValueError_call_result_43421 = invoke(stypy.reporting.localization.Localization(__file__, 1328, 22), ValueError_43418, *[unicode_43419], **kwargs_43420)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1328, 16), ValueError_call_result_43421, 'raise parameter', BaseException)
            # SSA join for if statement (line 1320)
            module_type_store = module_type_store.join_ssa_context()
            
            # SSA join for if statement (line 1318)
            module_type_store = module_type_store.join_ssa_context()
            

            if (may_be_43327 and more_types_in_union_43328):
                # SSA join for if statement (line 1309)
                module_type_store = module_type_store.join_ssa_context()


        
        # Getting the type of 'tlinestyles' (line 1329)
        tlinestyles_43422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1329, 15), 'tlinestyles')
        # Assigning a type to the variable 'stypy_return_type' (line 1329)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1329, 8), 'stypy_return_type', tlinestyles_43422)
        
        # ################# End of '_process_linestyles(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_linestyles' in the type store
        # Getting the type of 'stypy_return_type' (line 1306)
        stypy_return_type_43423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43423)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_linestyles'
        return stypy_return_type_43423


    @norecursion
    def get_alpha(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_alpha'
        module_type_store = module_type_store.open_function_context('get_alpha', 1331, 4, False)
        # Assigning a type to the variable 'self' (line 1332)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1332, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet.get_alpha.__dict__.__setitem__('stypy_localization', localization)
        ContourSet.get_alpha.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet.get_alpha.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet.get_alpha.__dict__.__setitem__('stypy_function_name', 'ContourSet.get_alpha')
        ContourSet.get_alpha.__dict__.__setitem__('stypy_param_names_list', [])
        ContourSet.get_alpha.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet.get_alpha.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet.get_alpha.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet.get_alpha.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet.get_alpha.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet.get_alpha.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet.get_alpha', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_alpha', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_alpha(...)' code ##################

        unicode_43424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1332, 8), 'unicode', u'returns alpha to be applied to all ContourSet artists')
        # Getting the type of 'self' (line 1333)
        self_43425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 15), 'self')
        # Obtaining the member 'alpha' of a type (line 1333)
        alpha_43426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1333, 15), self_43425, 'alpha')
        # Assigning a type to the variable 'stypy_return_type' (line 1333)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 8), 'stypy_return_type', alpha_43426)
        
        # ################# End of 'get_alpha(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_alpha' in the type store
        # Getting the type of 'stypy_return_type' (line 1331)
        stypy_return_type_43427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1331, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43427)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_alpha'
        return stypy_return_type_43427


    @norecursion
    def set_alpha(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_alpha'
        module_type_store = module_type_store.open_function_context('set_alpha', 1335, 4, False)
        # Assigning a type to the variable 'self' (line 1336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1336, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet.set_alpha.__dict__.__setitem__('stypy_localization', localization)
        ContourSet.set_alpha.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet.set_alpha.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet.set_alpha.__dict__.__setitem__('stypy_function_name', 'ContourSet.set_alpha')
        ContourSet.set_alpha.__dict__.__setitem__('stypy_param_names_list', ['alpha'])
        ContourSet.set_alpha.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet.set_alpha.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet.set_alpha.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet.set_alpha.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet.set_alpha.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet.set_alpha.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet.set_alpha', ['alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_alpha', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_alpha(...)' code ##################

        unicode_43428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1336, 8), 'unicode', u'sets alpha for all ContourSet artists')
        
        # Assigning a Name to a Attribute (line 1337):
        
        # Assigning a Name to a Attribute (line 1337):
        # Getting the type of 'alpha' (line 1337)
        alpha_43429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 21), 'alpha')
        # Getting the type of 'self' (line 1337)
        self_43430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 8), 'self')
        # Setting the type of the member 'alpha' of a type (line 1337)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 8), self_43430, 'alpha', alpha_43429)
        
        # Call to changed(...): (line 1338)
        # Processing the call keyword arguments (line 1338)
        kwargs_43433 = {}
        # Getting the type of 'self' (line 1338)
        self_43431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1338, 8), 'self', False)
        # Obtaining the member 'changed' of a type (line 1338)
        changed_43432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1338, 8), self_43431, 'changed')
        # Calling changed(args, kwargs) (line 1338)
        changed_call_result_43434 = invoke(stypy.reporting.localization.Localization(__file__, 1338, 8), changed_43432, *[], **kwargs_43433)
        
        
        # ################# End of 'set_alpha(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_alpha' in the type store
        # Getting the type of 'stypy_return_type' (line 1335)
        stypy_return_type_43435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43435)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_alpha'
        return stypy_return_type_43435


    @norecursion
    def find_nearest_contour(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1340)
        None_43436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 49), 'None')
        # Getting the type of 'True' (line 1340)
        True_43437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 61), 'True')
        defaults = [None_43436, True_43437]
        # Create a new context for function 'find_nearest_contour'
        module_type_store = module_type_store.open_function_context('find_nearest_contour', 1340, 4, False)
        # Assigning a type to the variable 'self' (line 1341)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1341, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        ContourSet.find_nearest_contour.__dict__.__setitem__('stypy_localization', localization)
        ContourSet.find_nearest_contour.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        ContourSet.find_nearest_contour.__dict__.__setitem__('stypy_type_store', module_type_store)
        ContourSet.find_nearest_contour.__dict__.__setitem__('stypy_function_name', 'ContourSet.find_nearest_contour')
        ContourSet.find_nearest_contour.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'indices', 'pixel'])
        ContourSet.find_nearest_contour.__dict__.__setitem__('stypy_varargs_param_name', None)
        ContourSet.find_nearest_contour.__dict__.__setitem__('stypy_kwargs_param_name', None)
        ContourSet.find_nearest_contour.__dict__.__setitem__('stypy_call_defaults', defaults)
        ContourSet.find_nearest_contour.__dict__.__setitem__('stypy_call_varargs', varargs)
        ContourSet.find_nearest_contour.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        ContourSet.find_nearest_contour.__dict__.__setitem__('stypy_declared_arg_number', 5)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'ContourSet.find_nearest_contour', ['x', 'y', 'indices', 'pixel'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'find_nearest_contour', localization, ['x', 'y', 'indices', 'pixel'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'find_nearest_contour(...)' code ##################

        unicode_43438 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1360, (-1)), 'unicode', u'\n        Finds contour that is closest to a point.  Defaults to\n        measuring distance in pixels (screen space - useful for manual\n        contour labeling), but this can be controlled via a keyword\n        argument.\n\n        Returns a tuple containing the contour, segment, index of\n        segment, x & y of segment point and distance to minimum point.\n\n        Optional keyword arguments:\n\n          *indices*:\n            Indexes of contour levels to consider when looking for\n            nearest point.  Defaults to using all levels.\n\n          *pixel*:\n            If *True*, measure distance in pixel space, if not, measure\n            distance in axes space.  Defaults to *True*.\n\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 1370)
        # Getting the type of 'indices' (line 1370)
        indices_43439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 11), 'indices')
        # Getting the type of 'None' (line 1370)
        None_43440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 22), 'None')
        
        (may_be_43441, more_types_in_union_43442) = may_be_none(indices_43439, None_43440)

        if may_be_43441:

            if more_types_in_union_43442:
                # Runtime conditional SSA (line 1370)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1371):
            
            # Assigning a Call to a Name (line 1371):
            
            # Call to list(...): (line 1371)
            # Processing the call arguments (line 1371)
            
            # Call to xrange(...): (line 1371)
            # Processing the call arguments (line 1371)
            
            # Call to len(...): (line 1371)
            # Processing the call arguments (line 1371)
            # Getting the type of 'self' (line 1371)
            self_43446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 38), 'self', False)
            # Obtaining the member 'levels' of a type (line 1371)
            levels_43447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 38), self_43446, 'levels')
            # Processing the call keyword arguments (line 1371)
            kwargs_43448 = {}
            # Getting the type of 'len' (line 1371)
            len_43445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 34), 'len', False)
            # Calling len(args, kwargs) (line 1371)
            len_call_result_43449 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 34), len_43445, *[levels_43447], **kwargs_43448)
            
            # Processing the call keyword arguments (line 1371)
            kwargs_43450 = {}
            # Getting the type of 'xrange' (line 1371)
            xrange_43444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 27), 'xrange', False)
            # Calling xrange(args, kwargs) (line 1371)
            xrange_call_result_43451 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 27), xrange_43444, *[len_call_result_43449], **kwargs_43450)
            
            # Processing the call keyword arguments (line 1371)
            kwargs_43452 = {}
            # Getting the type of 'list' (line 1371)
            list_43443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 22), 'list', False)
            # Calling list(args, kwargs) (line 1371)
            list_call_result_43453 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 22), list_43443, *[xrange_call_result_43451], **kwargs_43452)
            
            # Assigning a type to the variable 'indices' (line 1371)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 12), 'indices', list_call_result_43453)

            if more_types_in_union_43442:
                # SSA join for if statement (line 1370)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Name (line 1373):
        
        # Assigning a Attribute to a Name (line 1373):
        # Getting the type of 'np' (line 1373)
        np_43454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1373, 15), 'np')
        # Obtaining the member 'inf' of a type (line 1373)
        inf_43455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1373, 15), np_43454, 'inf')
        # Assigning a type to the variable 'dmin' (line 1373)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1373, 8), 'dmin', inf_43455)
        
        # Assigning a Name to a Name (line 1374):
        
        # Assigning a Name to a Name (line 1374):
        # Getting the type of 'None' (line 1374)
        None_43456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 17), 'None')
        # Assigning a type to the variable 'conmin' (line 1374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1374, 8), 'conmin', None_43456)
        
        # Assigning a Name to a Name (line 1375):
        
        # Assigning a Name to a Name (line 1375):
        # Getting the type of 'None' (line 1375)
        None_43457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 17), 'None')
        # Assigning a type to the variable 'segmin' (line 1375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 8), 'segmin', None_43457)
        
        # Assigning a Name to a Name (line 1376):
        
        # Assigning a Name to a Name (line 1376):
        # Getting the type of 'None' (line 1376)
        None_43458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1376, 15), 'None')
        # Assigning a type to the variable 'xmin' (line 1376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1376, 8), 'xmin', None_43458)
        
        # Assigning a Name to a Name (line 1377):
        
        # Assigning a Name to a Name (line 1377):
        # Getting the type of 'None' (line 1377)
        None_43459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1377, 15), 'None')
        # Assigning a type to the variable 'ymin' (line 1377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1377, 8), 'ymin', None_43459)
        
        # Assigning a Call to a Name (line 1379):
        
        # Assigning a Call to a Name (line 1379):
        
        # Call to array(...): (line 1379)
        # Processing the call arguments (line 1379)
        
        # Obtaining an instance of the builtin type 'list' (line 1379)
        list_43462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1379, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1379)
        # Adding element type (line 1379)
        # Getting the type of 'x' (line 1379)
        x_43463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 26), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1379, 25), list_43462, x_43463)
        # Adding element type (line 1379)
        # Getting the type of 'y' (line 1379)
        y_43464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 29), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1379, 25), list_43462, y_43464)
        
        # Processing the call keyword arguments (line 1379)
        kwargs_43465 = {}
        # Getting the type of 'np' (line 1379)
        np_43460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1379, 16), 'np', False)
        # Obtaining the member 'array' of a type (line 1379)
        array_43461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1379, 16), np_43460, 'array')
        # Calling array(args, kwargs) (line 1379)
        array_call_result_43466 = invoke(stypy.reporting.localization.Localization(__file__, 1379, 16), array_43461, *[list_43462], **kwargs_43465)
        
        # Assigning a type to the variable 'point' (line 1379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1379, 8), 'point', array_call_result_43466)
        
        # Getting the type of 'indices' (line 1381)
        indices_43467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 20), 'indices')
        # Testing the type of a for loop iterable (line 1381)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1381, 8), indices_43467)
        # Getting the type of the for loop variable (line 1381)
        for_loop_var_43468 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1381, 8), indices_43467)
        # Assigning a type to the variable 'icon' (line 1381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'icon', for_loop_var_43468)
        # SSA begins for a for statement (line 1381)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Subscript to a Name (line 1382):
        
        # Assigning a Subscript to a Name (line 1382):
        
        # Obtaining the type of the subscript
        # Getting the type of 'icon' (line 1382)
        icon_43469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 35), 'icon')
        # Getting the type of 'self' (line 1382)
        self_43470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 18), 'self')
        # Obtaining the member 'collections' of a type (line 1382)
        collections_43471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 18), self_43470, 'collections')
        # Obtaining the member '__getitem__' of a type (line 1382)
        getitem___43472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 18), collections_43471, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1382)
        subscript_call_result_43473 = invoke(stypy.reporting.localization.Localization(__file__, 1382, 18), getitem___43472, icon_43469)
        
        # Assigning a type to the variable 'con' (line 1382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 12), 'con', subscript_call_result_43473)
        
        # Assigning a Call to a Name (line 1383):
        
        # Assigning a Call to a Name (line 1383):
        
        # Call to get_transform(...): (line 1383)
        # Processing the call keyword arguments (line 1383)
        kwargs_43476 = {}
        # Getting the type of 'con' (line 1383)
        con_43474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1383, 20), 'con', False)
        # Obtaining the member 'get_transform' of a type (line 1383)
        get_transform_43475 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1383, 20), con_43474, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1383)
        get_transform_call_result_43477 = invoke(stypy.reporting.localization.Localization(__file__, 1383, 20), get_transform_43475, *[], **kwargs_43476)
        
        # Assigning a type to the variable 'trans' (line 1383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1383, 12), 'trans', get_transform_call_result_43477)
        
        # Assigning a Call to a Name (line 1384):
        
        # Assigning a Call to a Name (line 1384):
        
        # Call to get_paths(...): (line 1384)
        # Processing the call keyword arguments (line 1384)
        kwargs_43480 = {}
        # Getting the type of 'con' (line 1384)
        con_43478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 20), 'con', False)
        # Obtaining the member 'get_paths' of a type (line 1384)
        get_paths_43479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1384, 20), con_43478, 'get_paths')
        # Calling get_paths(args, kwargs) (line 1384)
        get_paths_call_result_43481 = invoke(stypy.reporting.localization.Localization(__file__, 1384, 20), get_paths_43479, *[], **kwargs_43480)
        
        # Assigning a type to the variable 'paths' (line 1384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 12), 'paths', get_paths_call_result_43481)
        
        
        # Call to enumerate(...): (line 1386)
        # Processing the call arguments (line 1386)
        # Getting the type of 'paths' (line 1386)
        paths_43483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 46), 'paths', False)
        # Processing the call keyword arguments (line 1386)
        kwargs_43484 = {}
        # Getting the type of 'enumerate' (line 1386)
        enumerate_43482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1386, 36), 'enumerate', False)
        # Calling enumerate(args, kwargs) (line 1386)
        enumerate_call_result_43485 = invoke(stypy.reporting.localization.Localization(__file__, 1386, 36), enumerate_43482, *[paths_43483], **kwargs_43484)
        
        # Testing the type of a for loop iterable (line 1386)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1386, 12), enumerate_call_result_43485)
        # Getting the type of the for loop variable (line 1386)
        for_loop_var_43486 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1386, 12), enumerate_call_result_43485)
        # Assigning a type to the variable 'segNum' (line 1386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1386, 12), 'segNum', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1386, 12), for_loop_var_43486))
        # Assigning a type to the variable 'linepath' (line 1386)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1386, 12), 'linepath', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1386, 12), for_loop_var_43486))
        # SSA begins for a for statement (line 1386)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        # Assigning a Attribute to a Name (line 1387):
        
        # Assigning a Attribute to a Name (line 1387):
        # Getting the type of 'linepath' (line 1387)
        linepath_43487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 21), 'linepath')
        # Obtaining the member 'vertices' of a type (line 1387)
        vertices_43488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1387, 21), linepath_43487, 'vertices')
        # Assigning a type to the variable 'lc' (line 1387)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 16), 'lc', vertices_43488)
        
        # Getting the type of 'pixel' (line 1389)
        pixel_43489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1389, 19), 'pixel')
        # Testing the type of an if condition (line 1389)
        if_condition_43490 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1389, 16), pixel_43489)
        # Assigning a type to the variable 'if_condition_43490' (line 1389)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1389, 16), 'if_condition_43490', if_condition_43490)
        # SSA begins for if statement (line 1389)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1390):
        
        # Assigning a Call to a Name (line 1390):
        
        # Call to transform(...): (line 1390)
        # Processing the call arguments (line 1390)
        # Getting the type of 'lc' (line 1390)
        lc_43493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 41), 'lc', False)
        # Processing the call keyword arguments (line 1390)
        kwargs_43494 = {}
        # Getting the type of 'trans' (line 1390)
        trans_43491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1390, 25), 'trans', False)
        # Obtaining the member 'transform' of a type (line 1390)
        transform_43492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1390, 25), trans_43491, 'transform')
        # Calling transform(args, kwargs) (line 1390)
        transform_call_result_43495 = invoke(stypy.reporting.localization.Localization(__file__, 1390, 25), transform_43492, *[lc_43493], **kwargs_43494)
        
        # Assigning a type to the variable 'lc' (line 1390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1390, 20), 'lc', transform_call_result_43495)
        # SSA join for if statement (line 1389)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1392):
        
        # Assigning a Call to a Name:
        
        # Call to _find_closest_point_on_path(...): (line 1392)
        # Processing the call arguments (line 1392)
        # Getting the type of 'lc' (line 1392)
        lc_43497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 57), 'lc', False)
        # Getting the type of 'point' (line 1392)
        point_43498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 61), 'point', False)
        # Processing the call keyword arguments (line 1392)
        kwargs_43499 = {}
        # Getting the type of '_find_closest_point_on_path' (line 1392)
        _find_closest_point_on_path_43496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 29), '_find_closest_point_on_path', False)
        # Calling _find_closest_point_on_path(args, kwargs) (line 1392)
        _find_closest_point_on_path_call_result_43500 = invoke(stypy.reporting.localization.Localization(__file__, 1392, 29), _find_closest_point_on_path_43496, *[lc_43497, point_43498], **kwargs_43499)
        
        # Assigning a type to the variable 'call_assignment_39347' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'call_assignment_39347', _find_closest_point_on_path_call_result_43500)
        
        # Assigning a Call to a Name (line 1392):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 16), 'int')
        # Processing the call keyword arguments
        kwargs_43504 = {}
        # Getting the type of 'call_assignment_39347' (line 1392)
        call_assignment_39347_43501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'call_assignment_39347', False)
        # Obtaining the member '__getitem__' of a type (line 1392)
        getitem___43502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 16), call_assignment_39347_43501, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43505 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43502, *[int_43503], **kwargs_43504)
        
        # Assigning a type to the variable 'call_assignment_39348' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'call_assignment_39348', getitem___call_result_43505)
        
        # Assigning a Name to a Name (line 1392):
        # Getting the type of 'call_assignment_39348' (line 1392)
        call_assignment_39348_43506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'call_assignment_39348')
        # Assigning a type to the variable 'd' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'd', call_assignment_39348_43506)
        
        # Assigning a Call to a Name (line 1392):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 16), 'int')
        # Processing the call keyword arguments
        kwargs_43510 = {}
        # Getting the type of 'call_assignment_39347' (line 1392)
        call_assignment_39347_43507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'call_assignment_39347', False)
        # Obtaining the member '__getitem__' of a type (line 1392)
        getitem___43508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 16), call_assignment_39347_43507, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43511 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43508, *[int_43509], **kwargs_43510)
        
        # Assigning a type to the variable 'call_assignment_39349' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'call_assignment_39349', getitem___call_result_43511)
        
        # Assigning a Name to a Name (line 1392):
        # Getting the type of 'call_assignment_39349' (line 1392)
        call_assignment_39349_43512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'call_assignment_39349')
        # Assigning a type to the variable 'xc' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 19), 'xc', call_assignment_39349_43512)
        
        # Assigning a Call to a Name (line 1392):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43515 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1392, 16), 'int')
        # Processing the call keyword arguments
        kwargs_43516 = {}
        # Getting the type of 'call_assignment_39347' (line 1392)
        call_assignment_39347_43513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'call_assignment_39347', False)
        # Obtaining the member '__getitem__' of a type (line 1392)
        getitem___43514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1392, 16), call_assignment_39347_43513, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43517 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43514, *[int_43515], **kwargs_43516)
        
        # Assigning a type to the variable 'call_assignment_39350' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'call_assignment_39350', getitem___call_result_43517)
        
        # Assigning a Name to a Name (line 1392):
        # Getting the type of 'call_assignment_39350' (line 1392)
        call_assignment_39350_43518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1392, 16), 'call_assignment_39350')
        # Assigning a type to the variable 'leg' (line 1392)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1392, 23), 'leg', call_assignment_39350_43518)
        
        
        # Getting the type of 'd' (line 1393)
        d_43519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 19), 'd')
        # Getting the type of 'dmin' (line 1393)
        dmin_43520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1393, 23), 'dmin')
        # Applying the binary operator '<' (line 1393)
        result_lt_43521 = python_operator(stypy.reporting.localization.Localization(__file__, 1393, 19), '<', d_43519, dmin_43520)
        
        # Testing the type of an if condition (line 1393)
        if_condition_43522 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1393, 16), result_lt_43521)
        # Assigning a type to the variable 'if_condition_43522' (line 1393)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1393, 16), 'if_condition_43522', if_condition_43522)
        # SSA begins for if statement (line 1393)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1394):
        
        # Assigning a Name to a Name (line 1394):
        # Getting the type of 'd' (line 1394)
        d_43523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1394, 27), 'd')
        # Assigning a type to the variable 'dmin' (line 1394)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1394, 20), 'dmin', d_43523)
        
        # Assigning a Name to a Name (line 1395):
        
        # Assigning a Name to a Name (line 1395):
        # Getting the type of 'icon' (line 1395)
        icon_43524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1395, 29), 'icon')
        # Assigning a type to the variable 'conmin' (line 1395)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1395, 20), 'conmin', icon_43524)
        
        # Assigning a Name to a Name (line 1396):
        
        # Assigning a Name to a Name (line 1396):
        # Getting the type of 'segNum' (line 1396)
        segNum_43525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1396, 29), 'segNum')
        # Assigning a type to the variable 'segmin' (line 1396)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1396, 20), 'segmin', segNum_43525)
        
        # Assigning a Subscript to a Name (line 1397):
        
        # Assigning a Subscript to a Name (line 1397):
        
        # Obtaining the type of the subscript
        int_43526 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1397, 31), 'int')
        # Getting the type of 'leg' (line 1397)
        leg_43527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1397, 27), 'leg')
        # Obtaining the member '__getitem__' of a type (line 1397)
        getitem___43528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1397, 27), leg_43527, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1397)
        subscript_call_result_43529 = invoke(stypy.reporting.localization.Localization(__file__, 1397, 27), getitem___43528, int_43526)
        
        # Assigning a type to the variable 'imin' (line 1397)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1397, 20), 'imin', subscript_call_result_43529)
        
        # Assigning a Subscript to a Name (line 1398):
        
        # Assigning a Subscript to a Name (line 1398):
        
        # Obtaining the type of the subscript
        int_43530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1398, 30), 'int')
        # Getting the type of 'xc' (line 1398)
        xc_43531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1398, 27), 'xc')
        # Obtaining the member '__getitem__' of a type (line 1398)
        getitem___43532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1398, 27), xc_43531, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1398)
        subscript_call_result_43533 = invoke(stypy.reporting.localization.Localization(__file__, 1398, 27), getitem___43532, int_43530)
        
        # Assigning a type to the variable 'xmin' (line 1398)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1398, 20), 'xmin', subscript_call_result_43533)
        
        # Assigning a Subscript to a Name (line 1399):
        
        # Assigning a Subscript to a Name (line 1399):
        
        # Obtaining the type of the subscript
        int_43534 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1399, 30), 'int')
        # Getting the type of 'xc' (line 1399)
        xc_43535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1399, 27), 'xc')
        # Obtaining the member '__getitem__' of a type (line 1399)
        getitem___43536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1399, 27), xc_43535, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1399)
        subscript_call_result_43537 = invoke(stypy.reporting.localization.Localization(__file__, 1399, 27), getitem___43536, int_43534)
        
        # Assigning a type to the variable 'ymin' (line 1399)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1399, 20), 'ymin', subscript_call_result_43537)
        # SSA join for if statement (line 1393)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1401)
        tuple_43538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1401, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1401)
        # Adding element type (line 1401)
        # Getting the type of 'conmin' (line 1401)
        conmin_43539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 16), 'conmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1401, 16), tuple_43538, conmin_43539)
        # Adding element type (line 1401)
        # Getting the type of 'segmin' (line 1401)
        segmin_43540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 24), 'segmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1401, 16), tuple_43538, segmin_43540)
        # Adding element type (line 1401)
        # Getting the type of 'imin' (line 1401)
        imin_43541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 32), 'imin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1401, 16), tuple_43538, imin_43541)
        # Adding element type (line 1401)
        # Getting the type of 'xmin' (line 1401)
        xmin_43542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 38), 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1401, 16), tuple_43538, xmin_43542)
        # Adding element type (line 1401)
        # Getting the type of 'ymin' (line 1401)
        ymin_43543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 44), 'ymin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1401, 16), tuple_43538, ymin_43543)
        # Adding element type (line 1401)
        # Getting the type of 'dmin' (line 1401)
        dmin_43544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1401, 50), 'dmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1401, 16), tuple_43538, dmin_43544)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1401)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1401, 8), 'stypy_return_type', tuple_43538)
        
        # ################# End of 'find_nearest_contour(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'find_nearest_contour' in the type store
        # Getting the type of 'stypy_return_type' (line 1340)
        stypy_return_type_43545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43545)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'find_nearest_contour'
        return stypy_return_type_43545


# Assigning a type to the variable 'ContourSet' (line 741)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 0), 'ContourSet', ContourSet)
# Declaration of the 'QuadContourSet' class
# Getting the type of 'ContourSet' (line 1404)
ContourSet_43546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1404, 21), 'ContourSet')

class QuadContourSet(ContourSet_43546, ):
    unicode_43547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1423, (-1)), 'unicode', u'\n    Create and store a set of contour lines or filled regions.\n\n    User-callable method: :meth:`clabel`\n\n    Useful attributes:\n      ax:\n        The axes object in which the contours are drawn\n\n      collections:\n        A silent_list of LineCollections or PolyCollections\n\n      levels:\n        Contour levels\n\n      layers:\n        Same as levels for line contours; half-way between\n        levels for filled contours.  See :meth:`_process_colors` method.\n    ')

    @norecursion
    def _process_args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_process_args'
        module_type_store = module_type_store.open_function_context('_process_args', 1425, 4, False)
        # Assigning a type to the variable 'self' (line 1426)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1426, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        QuadContourSet._process_args.__dict__.__setitem__('stypy_localization', localization)
        QuadContourSet._process_args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        QuadContourSet._process_args.__dict__.__setitem__('stypy_type_store', module_type_store)
        QuadContourSet._process_args.__dict__.__setitem__('stypy_function_name', 'QuadContourSet._process_args')
        QuadContourSet._process_args.__dict__.__setitem__('stypy_param_names_list', [])
        QuadContourSet._process_args.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        QuadContourSet._process_args.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        QuadContourSet._process_args.__dict__.__setitem__('stypy_call_defaults', defaults)
        QuadContourSet._process_args.__dict__.__setitem__('stypy_call_varargs', varargs)
        QuadContourSet._process_args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        QuadContourSet._process_args.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'QuadContourSet._process_args', [], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_process_args', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_process_args(...)' code ##################

        unicode_43548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1428, (-1)), 'unicode', u'\n        Process args and kwargs.\n        ')
        
        
        # Call to isinstance(...): (line 1429)
        # Processing the call arguments (line 1429)
        
        # Obtaining the type of the subscript
        int_43550 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1429, 27), 'int')
        # Getting the type of 'args' (line 1429)
        args_43551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 22), 'args', False)
        # Obtaining the member '__getitem__' of a type (line 1429)
        getitem___43552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1429, 22), args_43551, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1429)
        subscript_call_result_43553 = invoke(stypy.reporting.localization.Localization(__file__, 1429, 22), getitem___43552, int_43550)
        
        # Getting the type of 'QuadContourSet' (line 1429)
        QuadContourSet_43554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 31), 'QuadContourSet', False)
        # Processing the call keyword arguments (line 1429)
        kwargs_43555 = {}
        # Getting the type of 'isinstance' (line 1429)
        isinstance_43549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1429, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1429)
        isinstance_call_result_43556 = invoke(stypy.reporting.localization.Localization(__file__, 1429, 11), isinstance_43549, *[subscript_call_result_43553, QuadContourSet_43554], **kwargs_43555)
        
        # Testing the type of an if condition (line 1429)
        if_condition_43557 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1429, 8), isinstance_call_result_43556)
        # Assigning a type to the variable 'if_condition_43557' (line 1429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1429, 8), 'if_condition_43557', if_condition_43557)
        # SSA begins for if statement (line 1429)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Type idiom detected: calculating its left and rigth part (line 1430)
        # Getting the type of 'self' (line 1430)
        self_43558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 15), 'self')
        # Obtaining the member 'levels' of a type (line 1430)
        levels_43559 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1430, 15), self_43558, 'levels')
        # Getting the type of 'None' (line 1430)
        None_43560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1430, 30), 'None')
        
        (may_be_43561, more_types_in_union_43562) = may_be_none(levels_43559, None_43560)

        if may_be_43561:

            if more_types_in_union_43562:
                # Runtime conditional SSA (line 1430)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Attribute (line 1431):
            
            # Assigning a Attribute to a Attribute (line 1431):
            
            # Obtaining the type of the subscript
            int_43563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1431, 35), 'int')
            # Getting the type of 'args' (line 1431)
            args_43564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 30), 'args')
            # Obtaining the member '__getitem__' of a type (line 1431)
            getitem___43565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 30), args_43564, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1431)
            subscript_call_result_43566 = invoke(stypy.reporting.localization.Localization(__file__, 1431, 30), getitem___43565, int_43563)
            
            # Obtaining the member 'levels' of a type (line 1431)
            levels_43567 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 30), subscript_call_result_43566, 'levels')
            # Getting the type of 'self' (line 1431)
            self_43568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 16), 'self')
            # Setting the type of the member 'levels' of a type (line 1431)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1431, 16), self_43568, 'levels', levels_43567)

            if more_types_in_union_43562:
                # SSA join for if statement (line 1430)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Attribute (line 1432):
        
        # Assigning a Attribute to a Attribute (line 1432):
        
        # Obtaining the type of the subscript
        int_43569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1432, 29), 'int')
        # Getting the type of 'args' (line 1432)
        args_43570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 24), 'args')
        # Obtaining the member '__getitem__' of a type (line 1432)
        getitem___43571 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 24), args_43570, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1432)
        subscript_call_result_43572 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 24), getitem___43571, int_43569)
        
        # Obtaining the member 'zmin' of a type (line 1432)
        zmin_43573 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 24), subscript_call_result_43572, 'zmin')
        # Getting the type of 'self' (line 1432)
        self_43574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 12), 'self')
        # Setting the type of the member 'zmin' of a type (line 1432)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1432, 12), self_43574, 'zmin', zmin_43573)
        
        # Assigning a Attribute to a Attribute (line 1433):
        
        # Assigning a Attribute to a Attribute (line 1433):
        
        # Obtaining the type of the subscript
        int_43575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1433, 29), 'int')
        # Getting the type of 'args' (line 1433)
        args_43576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 24), 'args')
        # Obtaining the member '__getitem__' of a type (line 1433)
        getitem___43577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 24), args_43576, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1433)
        subscript_call_result_43578 = invoke(stypy.reporting.localization.Localization(__file__, 1433, 24), getitem___43577, int_43575)
        
        # Obtaining the member 'zmax' of a type (line 1433)
        zmax_43579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 24), subscript_call_result_43578, 'zmax')
        # Getting the type of 'self' (line 1433)
        self_43580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1433, 12), 'self')
        # Setting the type of the member 'zmax' of a type (line 1433)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1433, 12), self_43580, 'zmax', zmax_43579)
        
        # Assigning a Attribute to a Attribute (line 1434):
        
        # Assigning a Attribute to a Attribute (line 1434):
        
        # Obtaining the type of the subscript
        int_43581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1434, 37), 'int')
        # Getting the type of 'args' (line 1434)
        args_43582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 32), 'args')
        # Obtaining the member '__getitem__' of a type (line 1434)
        getitem___43583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 32), args_43582, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1434)
        subscript_call_result_43584 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 32), getitem___43583, int_43581)
        
        # Obtaining the member '_corner_mask' of a type (line 1434)
        _corner_mask_43585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 32), subscript_call_result_43584, '_corner_mask')
        # Getting the type of 'self' (line 1434)
        self_43586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 12), 'self')
        # Setting the type of the member '_corner_mask' of a type (line 1434)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 12), self_43586, '_corner_mask', _corner_mask_43585)
        
        
        # Getting the type of 'self' (line 1435)
        self_43587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1435, 15), 'self')
        # Obtaining the member '_corner_mask' of a type (line 1435)
        _corner_mask_43588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1435, 15), self_43587, '_corner_mask')
        unicode_43589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1435, 36), 'unicode', u'legacy')
        # Applying the binary operator '==' (line 1435)
        result_eq_43590 = python_operator(stypy.reporting.localization.Localization(__file__, 1435, 15), '==', _corner_mask_43588, unicode_43589)
        
        # Testing the type of an if condition (line 1435)
        if_condition_43591 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1435, 12), result_eq_43590)
        # Assigning a type to the variable 'if_condition_43591' (line 1435)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1435, 12), 'if_condition_43591', if_condition_43591)
        # SSA begins for if statement (line 1435)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 1436):
        
        # Assigning a Attribute to a Name (line 1436):
        
        # Obtaining the type of the subscript
        int_43592 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1436, 41), 'int')
        # Getting the type of 'args' (line 1436)
        args_43593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 36), 'args')
        # Obtaining the member '__getitem__' of a type (line 1436)
        getitem___43594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1436, 36), args_43593, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1436)
        subscript_call_result_43595 = invoke(stypy.reporting.localization.Localization(__file__, 1436, 36), getitem___43594, int_43592)
        
        # Obtaining the member 'Cntr' of a type (line 1436)
        Cntr_43596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1436, 36), subscript_call_result_43595, 'Cntr')
        # Assigning a type to the variable 'contour_generator' (line 1436)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 16), 'contour_generator', Cntr_43596)
        # SSA branch for the else part of an if statement (line 1435)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 1438):
        
        # Assigning a Attribute to a Name (line 1438):
        
        # Obtaining the type of the subscript
        int_43597 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1438, 41), 'int')
        # Getting the type of 'args' (line 1438)
        args_43598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1438, 36), 'args')
        # Obtaining the member '__getitem__' of a type (line 1438)
        getitem___43599 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 36), args_43598, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1438)
        subscript_call_result_43600 = invoke(stypy.reporting.localization.Localization(__file__, 1438, 36), getitem___43599, int_43597)
        
        # Obtaining the member '_contour_generator' of a type (line 1438)
        _contour_generator_43601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1438, 36), subscript_call_result_43600, '_contour_generator')
        # Assigning a type to the variable 'contour_generator' (line 1438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 16), 'contour_generator', _contour_generator_43601)
        # SSA join for if statement (line 1435)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Attribute (line 1439):
        
        # Assigning a Attribute to a Attribute (line 1439):
        
        # Obtaining the type of the subscript
        int_43602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1439, 30), 'int')
        # Getting the type of 'args' (line 1439)
        args_43603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 1439)
        getitem___43604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 25), args_43603, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1439)
        subscript_call_result_43605 = invoke(stypy.reporting.localization.Localization(__file__, 1439, 25), getitem___43604, int_43602)
        
        # Obtaining the member '_mins' of a type (line 1439)
        _mins_43606 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 25), subscript_call_result_43605, '_mins')
        # Getting the type of 'self' (line 1439)
        self_43607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 12), 'self')
        # Setting the type of the member '_mins' of a type (line 1439)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 12), self_43607, '_mins', _mins_43606)
        
        # Assigning a Attribute to a Attribute (line 1440):
        
        # Assigning a Attribute to a Attribute (line 1440):
        
        # Obtaining the type of the subscript
        int_43608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1440, 30), 'int')
        # Getting the type of 'args' (line 1440)
        args_43609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 25), 'args')
        # Obtaining the member '__getitem__' of a type (line 1440)
        getitem___43610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 25), args_43609, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1440)
        subscript_call_result_43611 = invoke(stypy.reporting.localization.Localization(__file__, 1440, 25), getitem___43610, int_43608)
        
        # Obtaining the member '_maxs' of a type (line 1440)
        _maxs_43612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 25), subscript_call_result_43611, '_maxs')
        # Getting the type of 'self' (line 1440)
        self_43613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1440, 12), 'self')
        # Setting the type of the member '_maxs' of a type (line 1440)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1440, 12), self_43613, '_maxs', _maxs_43612)
        # SSA branch for the else part of an if statement (line 1429)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Attribute (line 1442):
        
        # Assigning a Call to a Attribute (line 1442):
        
        # Call to pop(...): (line 1442)
        # Processing the call arguments (line 1442)
        unicode_43616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1442, 43), 'unicode', u'corner_mask')
        # Getting the type of 'None' (line 1442)
        None_43617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 58), 'None', False)
        # Processing the call keyword arguments (line 1442)
        kwargs_43618 = {}
        # Getting the type of 'kwargs' (line 1442)
        kwargs_43614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 32), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 1442)
        pop_43615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1442, 32), kwargs_43614, 'pop')
        # Calling pop(args, kwargs) (line 1442)
        pop_call_result_43619 = invoke(stypy.reporting.localization.Localization(__file__, 1442, 32), pop_43615, *[unicode_43616, None_43617], **kwargs_43618)
        
        # Getting the type of 'self' (line 1442)
        self_43620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1442, 12), 'self')
        # Setting the type of the member '_corner_mask' of a type (line 1442)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1442, 12), self_43620, '_corner_mask', pop_call_result_43619)
        
        # Type idiom detected: calculating its left and rigth part (line 1443)
        # Getting the type of 'self' (line 1443)
        self_43621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 15), 'self')
        # Obtaining the member '_corner_mask' of a type (line 1443)
        _corner_mask_43622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1443, 15), self_43621, '_corner_mask')
        # Getting the type of 'None' (line 1443)
        None_43623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1443, 36), 'None')
        
        (may_be_43624, more_types_in_union_43625) = may_be_none(_corner_mask_43622, None_43623)

        if may_be_43624:

            if more_types_in_union_43625:
                # Runtime conditional SSA (line 1443)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Attribute (line 1444):
            
            # Assigning a Subscript to a Attribute (line 1444):
            
            # Obtaining the type of the subscript
            unicode_43626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 49), 'unicode', u'contour.corner_mask')
            # Getting the type of 'mpl' (line 1444)
            mpl_43627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 36), 'mpl')
            # Obtaining the member 'rcParams' of a type (line 1444)
            rcParams_43628 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 36), mpl_43627, 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 1444)
            getitem___43629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 36), rcParams_43628, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1444)
            subscript_call_result_43630 = invoke(stypy.reporting.localization.Localization(__file__, 1444, 36), getitem___43629, unicode_43626)
            
            # Getting the type of 'self' (line 1444)
            self_43631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 16), 'self')
            # Setting the type of the member '_corner_mask' of a type (line 1444)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1444, 16), self_43631, '_corner_mask', subscript_call_result_43630)

            if more_types_in_union_43625:
                # SSA join for if statement (line 1443)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Tuple (line 1446):
        
        # Assigning a Call to a Name:
        
        # Call to _contour_args(...): (line 1446)
        # Processing the call arguments (line 1446)
        # Getting the type of 'args' (line 1446)
        args_43634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 41), 'args', False)
        # Getting the type of 'kwargs' (line 1446)
        kwargs_43635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 47), 'kwargs', False)
        # Processing the call keyword arguments (line 1446)
        kwargs_43636 = {}
        # Getting the type of 'self' (line 1446)
        self_43632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 22), 'self', False)
        # Obtaining the member '_contour_args' of a type (line 1446)
        _contour_args_43633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 22), self_43632, '_contour_args')
        # Calling _contour_args(args, kwargs) (line 1446)
        _contour_args_call_result_43637 = invoke(stypy.reporting.localization.Localization(__file__, 1446, 22), _contour_args_43633, *[args_43634, kwargs_43635], **kwargs_43636)
        
        # Assigning a type to the variable 'call_assignment_39351' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'call_assignment_39351', _contour_args_call_result_43637)
        
        # Assigning a Call to a Name (line 1446):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, 12), 'int')
        # Processing the call keyword arguments
        kwargs_43641 = {}
        # Getting the type of 'call_assignment_39351' (line 1446)
        call_assignment_39351_43638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'call_assignment_39351', False)
        # Obtaining the member '__getitem__' of a type (line 1446)
        getitem___43639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 12), call_assignment_39351_43638, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43642 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43639, *[int_43640], **kwargs_43641)
        
        # Assigning a type to the variable 'call_assignment_39352' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'call_assignment_39352', getitem___call_result_43642)
        
        # Assigning a Name to a Name (line 1446):
        # Getting the type of 'call_assignment_39352' (line 1446)
        call_assignment_39352_43643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'call_assignment_39352')
        # Assigning a type to the variable 'x' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'x', call_assignment_39352_43643)
        
        # Assigning a Call to a Name (line 1446):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, 12), 'int')
        # Processing the call keyword arguments
        kwargs_43647 = {}
        # Getting the type of 'call_assignment_39351' (line 1446)
        call_assignment_39351_43644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'call_assignment_39351', False)
        # Obtaining the member '__getitem__' of a type (line 1446)
        getitem___43645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 12), call_assignment_39351_43644, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43648 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43645, *[int_43646], **kwargs_43647)
        
        # Assigning a type to the variable 'call_assignment_39353' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'call_assignment_39353', getitem___call_result_43648)
        
        # Assigning a Name to a Name (line 1446):
        # Getting the type of 'call_assignment_39353' (line 1446)
        call_assignment_39353_43649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'call_assignment_39353')
        # Assigning a type to the variable 'y' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 15), 'y', call_assignment_39353_43649)
        
        # Assigning a Call to a Name (line 1446):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43652 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1446, 12), 'int')
        # Processing the call keyword arguments
        kwargs_43653 = {}
        # Getting the type of 'call_assignment_39351' (line 1446)
        call_assignment_39351_43650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'call_assignment_39351', False)
        # Obtaining the member '__getitem__' of a type (line 1446)
        getitem___43651 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1446, 12), call_assignment_39351_43650, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43654 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43651, *[int_43652], **kwargs_43653)
        
        # Assigning a type to the variable 'call_assignment_39354' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'call_assignment_39354', getitem___call_result_43654)
        
        # Assigning a Name to a Name (line 1446):
        # Getting the type of 'call_assignment_39354' (line 1446)
        call_assignment_39354_43655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1446, 12), 'call_assignment_39354')
        # Assigning a type to the variable 'z' (line 1446)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1446, 18), 'z', call_assignment_39354_43655)
        
        # Assigning a Call to a Name (line 1448):
        
        # Assigning a Call to a Name (line 1448):
        
        # Call to getmask(...): (line 1448)
        # Processing the call arguments (line 1448)
        # Getting the type of 'z' (line 1448)
        z_43658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 31), 'z', False)
        # Processing the call keyword arguments (line 1448)
        kwargs_43659 = {}
        # Getting the type of 'ma' (line 1448)
        ma_43656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1448, 20), 'ma', False)
        # Obtaining the member 'getmask' of a type (line 1448)
        getmask_43657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1448, 20), ma_43656, 'getmask')
        # Calling getmask(args, kwargs) (line 1448)
        getmask_call_result_43660 = invoke(stypy.reporting.localization.Localization(__file__, 1448, 20), getmask_43657, *[z_43658], **kwargs_43659)
        
        # Assigning a type to the variable '_mask' (line 1448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 12), '_mask', getmask_call_result_43660)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of '_mask' (line 1449)
        _mask_43661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 15), '_mask')
        # Getting the type of 'ma' (line 1449)
        ma_43662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 24), 'ma')
        # Obtaining the member 'nomask' of a type (line 1449)
        nomask_43663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1449, 24), ma_43662, 'nomask')
        # Applying the binary operator 'is' (line 1449)
        result_is__43664 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 15), 'is', _mask_43661, nomask_43663)
        
        
        
        # Call to any(...): (line 1449)
        # Processing the call keyword arguments (line 1449)
        kwargs_43667 = {}
        # Getting the type of '_mask' (line 1449)
        _mask_43665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1449, 41), '_mask', False)
        # Obtaining the member 'any' of a type (line 1449)
        any_43666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1449, 41), _mask_43665, 'any')
        # Calling any(args, kwargs) (line 1449)
        any_call_result_43668 = invoke(stypy.reporting.localization.Localization(__file__, 1449, 41), any_43666, *[], **kwargs_43667)
        
        # Applying the 'not' unary operator (line 1449)
        result_not__43669 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 37), 'not', any_call_result_43668)
        
        # Applying the binary operator 'or' (line 1449)
        result_or_keyword_43670 = python_operator(stypy.reporting.localization.Localization(__file__, 1449, 15), 'or', result_is__43664, result_not__43669)
        
        # Testing the type of an if condition (line 1449)
        if_condition_43671 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1449, 12), result_or_keyword_43670)
        # Assigning a type to the variable 'if_condition_43671' (line 1449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1449, 12), 'if_condition_43671', if_condition_43671)
        # SSA begins for if statement (line 1449)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 1450):
        
        # Assigning a Name to a Name (line 1450):
        # Getting the type of 'None' (line 1450)
        None_43672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1450, 24), 'None')
        # Assigning a type to the variable '_mask' (line 1450)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1450, 16), '_mask', None_43672)
        # SSA join for if statement (line 1449)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1452)
        self_43673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1452, 15), 'self')
        # Obtaining the member '_corner_mask' of a type (line 1452)
        _corner_mask_43674 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1452, 15), self_43673, '_corner_mask')
        unicode_43675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, 36), 'unicode', u'legacy')
        # Applying the binary operator '==' (line 1452)
        result_eq_43676 = python_operator(stypy.reporting.localization.Localization(__file__, 1452, 15), '==', _corner_mask_43674, unicode_43675)
        
        # Testing the type of an if condition (line 1452)
        if_condition_43677 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1452, 12), result_eq_43676)
        # Assigning a type to the variable 'if_condition_43677' (line 1452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1452, 12), 'if_condition_43677', if_condition_43677)
        # SSA begins for if statement (line 1452)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn_deprecated(...): (line 1453)
        # Processing the call arguments (line 1453)
        unicode_43680 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1453, 38), 'unicode', u'1.5')
        # Processing the call keyword arguments (line 1453)
        unicode_43681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1454, 43), 'unicode', u"corner_mask='legacy'")
        keyword_43682 = unicode_43681
        unicode_43683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1455, 50), 'unicode', u'corner_mask=False or True')
        keyword_43684 = unicode_43683
        kwargs_43685 = {'alternative': keyword_43684, 'name': keyword_43682}
        # Getting the type of 'cbook' (line 1453)
        cbook_43678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 16), 'cbook', False)
        # Obtaining the member 'warn_deprecated' of a type (line 1453)
        warn_deprecated_43679 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1453, 16), cbook_43678, 'warn_deprecated')
        # Calling warn_deprecated(args, kwargs) (line 1453)
        warn_deprecated_call_result_43686 = invoke(stypy.reporting.localization.Localization(__file__, 1453, 16), warn_deprecated_43679, *[unicode_43680], **kwargs_43685)
        
        
        # Assigning a Call to a Name (line 1456):
        
        # Assigning a Call to a Name (line 1456):
        
        # Call to Cntr(...): (line 1456)
        # Processing the call arguments (line 1456)
        # Getting the type of 'x' (line 1456)
        x_43689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 47), 'x', False)
        # Getting the type of 'y' (line 1456)
        y_43690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 50), 'y', False)
        
        # Call to filled(...): (line 1456)
        # Processing the call keyword arguments (line 1456)
        kwargs_43693 = {}
        # Getting the type of 'z' (line 1456)
        z_43691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 53), 'z', False)
        # Obtaining the member 'filled' of a type (line 1456)
        filled_43692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 53), z_43691, 'filled')
        # Calling filled(args, kwargs) (line 1456)
        filled_call_result_43694 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 53), filled_43692, *[], **kwargs_43693)
        
        # Getting the type of '_mask' (line 1456)
        _mask_43695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 65), '_mask', False)
        # Processing the call keyword arguments (line 1456)
        kwargs_43696 = {}
        # Getting the type of '_cntr' (line 1456)
        _cntr_43687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 36), '_cntr', False)
        # Obtaining the member 'Cntr' of a type (line 1456)
        Cntr_43688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1456, 36), _cntr_43687, 'Cntr')
        # Calling Cntr(args, kwargs) (line 1456)
        Cntr_call_result_43697 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 36), Cntr_43688, *[x_43689, y_43690, filled_call_result_43694, _mask_43695], **kwargs_43696)
        
        # Assigning a type to the variable 'contour_generator' (line 1456)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 16), 'contour_generator', Cntr_call_result_43697)
        # SSA branch for the else part of an if statement (line 1452)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1458):
        
        # Assigning a Call to a Name (line 1458):
        
        # Call to QuadContourGenerator(...): (line 1458)
        # Processing the call arguments (line 1458)
        # Getting the type of 'x' (line 1459)
        x_43700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 20), 'x', False)
        # Getting the type of 'y' (line 1459)
        y_43701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 23), 'y', False)
        
        # Call to filled(...): (line 1459)
        # Processing the call keyword arguments (line 1459)
        kwargs_43704 = {}
        # Getting the type of 'z' (line 1459)
        z_43702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 26), 'z', False)
        # Obtaining the member 'filled' of a type (line 1459)
        filled_43703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 26), z_43702, 'filled')
        # Calling filled(args, kwargs) (line 1459)
        filled_call_result_43705 = invoke(stypy.reporting.localization.Localization(__file__, 1459, 26), filled_43703, *[], **kwargs_43704)
        
        # Getting the type of '_mask' (line 1459)
        _mask_43706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 38), '_mask', False)
        # Getting the type of 'self' (line 1459)
        self_43707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 45), 'self', False)
        # Obtaining the member '_corner_mask' of a type (line 1459)
        _corner_mask_43708 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 45), self_43707, '_corner_mask')
        # Getting the type of 'self' (line 1459)
        self_43709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 64), 'self', False)
        # Obtaining the member 'nchunk' of a type (line 1459)
        nchunk_43710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1459, 64), self_43709, 'nchunk')
        # Processing the call keyword arguments (line 1458)
        kwargs_43711 = {}
        # Getting the type of '_contour' (line 1458)
        _contour_43698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 36), '_contour', False)
        # Obtaining the member 'QuadContourGenerator' of a type (line 1458)
        QuadContourGenerator_43699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 36), _contour_43698, 'QuadContourGenerator')
        # Calling QuadContourGenerator(args, kwargs) (line 1458)
        QuadContourGenerator_call_result_43712 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 36), QuadContourGenerator_43699, *[x_43700, y_43701, filled_call_result_43705, _mask_43706, _corner_mask_43708, nchunk_43710], **kwargs_43711)
        
        # Assigning a type to the variable 'contour_generator' (line 1458)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 16), 'contour_generator', QuadContourGenerator_call_result_43712)
        # SSA join for if statement (line 1452)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1461):
        
        # Assigning a Call to a Name (line 1461):
        
        # Call to get_transform(...): (line 1461)
        # Processing the call keyword arguments (line 1461)
        kwargs_43715 = {}
        # Getting the type of 'self' (line 1461)
        self_43713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 16), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 1461)
        get_transform_43714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 16), self_43713, 'get_transform')
        # Calling get_transform(args, kwargs) (line 1461)
        get_transform_call_result_43716 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 16), get_transform_43714, *[], **kwargs_43715)
        
        # Assigning a type to the variable 't' (line 1461)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1461, 12), 't', get_transform_call_result_43716)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 't' (line 1465)
        t_43717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 16), 't')
        # Getting the type of 'self' (line 1465)
        self_43718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1465, 21), 'self')
        # Obtaining the member 'ax' of a type (line 1465)
        ax_43719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 21), self_43718, 'ax')
        # Obtaining the member 'transData' of a type (line 1465)
        transData_43720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1465, 21), ax_43719, 'transData')
        # Applying the binary operator '!=' (line 1465)
        result_ne_43721 = python_operator(stypy.reporting.localization.Localization(__file__, 1465, 16), '!=', t_43717, transData_43720)
        
        
        # Call to any(...): (line 1466)
        # Processing the call arguments (line 1466)
        
        # Call to contains_branch_seperately(...): (line 1466)
        # Processing the call arguments (line 1466)
        # Getting the type of 'self' (line 1466)
        self_43725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 53), 'self', False)
        # Obtaining the member 'ax' of a type (line 1466)
        ax_43726 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1466, 53), self_43725, 'ax')
        # Obtaining the member 'transData' of a type (line 1466)
        transData_43727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1466, 53), ax_43726, 'transData')
        # Processing the call keyword arguments (line 1466)
        kwargs_43728 = {}
        # Getting the type of 't' (line 1466)
        t_43723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 24), 't', False)
        # Obtaining the member 'contains_branch_seperately' of a type (line 1466)
        contains_branch_seperately_43724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1466, 24), t_43723, 'contains_branch_seperately')
        # Calling contains_branch_seperately(args, kwargs) (line 1466)
        contains_branch_seperately_call_result_43729 = invoke(stypy.reporting.localization.Localization(__file__, 1466, 24), contains_branch_seperately_43724, *[transData_43727], **kwargs_43728)
        
        # Processing the call keyword arguments (line 1466)
        kwargs_43730 = {}
        # Getting the type of 'any' (line 1466)
        any_43722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1466, 20), 'any', False)
        # Calling any(args, kwargs) (line 1466)
        any_call_result_43731 = invoke(stypy.reporting.localization.Localization(__file__, 1466, 20), any_43722, *[contains_branch_seperately_call_result_43729], **kwargs_43730)
        
        # Applying the binary operator 'and' (line 1465)
        result_and_keyword_43732 = python_operator(stypy.reporting.localization.Localization(__file__, 1465, 16), 'and', result_ne_43721, any_call_result_43731)
        
        # Testing the type of an if condition (line 1465)
        if_condition_43733 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1465, 12), result_and_keyword_43732)
        # Assigning a type to the variable 'if_condition_43733' (line 1465)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1465, 12), 'if_condition_43733', if_condition_43733)
        # SSA begins for if statement (line 1465)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BinOp to a Name (line 1467):
        
        # Assigning a BinOp to a Name (line 1467):
        # Getting the type of 't' (line 1467)
        t_43734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 32), 't')
        # Getting the type of 'self' (line 1467)
        self_43735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1467, 36), 'self')
        # Obtaining the member 'ax' of a type (line 1467)
        ax_43736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 36), self_43735, 'ax')
        # Obtaining the member 'transData' of a type (line 1467)
        transData_43737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1467, 36), ax_43736, 'transData')
        # Applying the binary operator '-' (line 1467)
        result_sub_43738 = python_operator(stypy.reporting.localization.Localization(__file__, 1467, 32), '-', t_43734, transData_43737)
        
        # Assigning a type to the variable 'trans_to_data' (line 1467)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1467, 16), 'trans_to_data', result_sub_43738)
        
        # Assigning a Attribute to a Name (line 1468):
        
        # Assigning a Attribute to a Name (line 1468):
        
        # Call to vstack(...): (line 1468)
        # Processing the call arguments (line 1468)
        
        # Obtaining an instance of the builtin type 'list' (line 1468)
        list_43741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1468, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1468)
        # Adding element type (line 1468)
        # Getting the type of 'x' (line 1468)
        x_43742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 34), 'x', False)
        # Obtaining the member 'flat' of a type (line 1468)
        flat_43743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 34), x_43742, 'flat')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1468, 33), list_43741, flat_43743)
        # Adding element type (line 1468)
        # Getting the type of 'y' (line 1468)
        y_43744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 42), 'y', False)
        # Obtaining the member 'flat' of a type (line 1468)
        flat_43745 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 42), y_43744, 'flat')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1468, 33), list_43741, flat_43745)
        
        # Processing the call keyword arguments (line 1468)
        kwargs_43746 = {}
        # Getting the type of 'np' (line 1468)
        np_43739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1468, 23), 'np', False)
        # Obtaining the member 'vstack' of a type (line 1468)
        vstack_43740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 23), np_43739, 'vstack')
        # Calling vstack(args, kwargs) (line 1468)
        vstack_call_result_43747 = invoke(stypy.reporting.localization.Localization(__file__, 1468, 23), vstack_43740, *[list_43741], **kwargs_43746)
        
        # Obtaining the member 'T' of a type (line 1468)
        T_43748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1468, 23), vstack_call_result_43747, 'T')
        # Assigning a type to the variable 'pts' (line 1468)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1468, 16), 'pts', T_43748)
        
        # Assigning a Call to a Name (line 1469):
        
        # Assigning a Call to a Name (line 1469):
        
        # Call to transform(...): (line 1469)
        # Processing the call arguments (line 1469)
        # Getting the type of 'pts' (line 1469)
        pts_43751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 58), 'pts', False)
        # Processing the call keyword arguments (line 1469)
        kwargs_43752 = {}
        # Getting the type of 'trans_to_data' (line 1469)
        trans_to_data_43749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1469, 34), 'trans_to_data', False)
        # Obtaining the member 'transform' of a type (line 1469)
        transform_43750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1469, 34), trans_to_data_43749, 'transform')
        # Calling transform(args, kwargs) (line 1469)
        transform_call_result_43753 = invoke(stypy.reporting.localization.Localization(__file__, 1469, 34), transform_43750, *[pts_43751], **kwargs_43752)
        
        # Assigning a type to the variable 'transformed_pts' (line 1469)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1469, 16), 'transformed_pts', transform_call_result_43753)
        
        # Assigning a Subscript to a Name (line 1470):
        
        # Assigning a Subscript to a Name (line 1470):
        
        # Obtaining the type of the subscript
        Ellipsis_43754 = Ellipsis
        int_43755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1470, 41), 'int')
        # Getting the type of 'transformed_pts' (line 1470)
        transformed_pts_43756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1470, 20), 'transformed_pts')
        # Obtaining the member '__getitem__' of a type (line 1470)
        getitem___43757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1470, 20), transformed_pts_43756, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1470)
        subscript_call_result_43758 = invoke(stypy.reporting.localization.Localization(__file__, 1470, 20), getitem___43757, (Ellipsis_43754, int_43755))
        
        # Assigning a type to the variable 'x' (line 1470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1470, 16), 'x', subscript_call_result_43758)
        
        # Assigning a Subscript to a Name (line 1471):
        
        # Assigning a Subscript to a Name (line 1471):
        
        # Obtaining the type of the subscript
        Ellipsis_43759 = Ellipsis
        int_43760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1471, 41), 'int')
        # Getting the type of 'transformed_pts' (line 1471)
        transformed_pts_43761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1471, 20), 'transformed_pts')
        # Obtaining the member '__getitem__' of a type (line 1471)
        getitem___43762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1471, 20), transformed_pts_43761, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1471)
        subscript_call_result_43763 = invoke(stypy.reporting.localization.Localization(__file__, 1471, 20), getitem___43762, (Ellipsis_43759, int_43760))
        
        # Assigning a type to the variable 'y' (line 1471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1471, 16), 'y', subscript_call_result_43763)
        # SSA join for if statement (line 1465)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a List to a Attribute (line 1473):
        
        # Assigning a List to a Attribute (line 1473):
        
        # Obtaining an instance of the builtin type 'list' (line 1473)
        list_43764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1473, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1473)
        # Adding element type (line 1473)
        
        # Call to min(...): (line 1473)
        # Processing the call arguments (line 1473)
        # Getting the type of 'x' (line 1473)
        x_43767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 33), 'x', False)
        # Processing the call keyword arguments (line 1473)
        kwargs_43768 = {}
        # Getting the type of 'ma' (line 1473)
        ma_43765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 26), 'ma', False)
        # Obtaining the member 'min' of a type (line 1473)
        min_43766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 26), ma_43765, 'min')
        # Calling min(args, kwargs) (line 1473)
        min_call_result_43769 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 26), min_43766, *[x_43767], **kwargs_43768)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1473, 25), list_43764, min_call_result_43769)
        # Adding element type (line 1473)
        
        # Call to min(...): (line 1473)
        # Processing the call arguments (line 1473)
        # Getting the type of 'y' (line 1473)
        y_43772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 44), 'y', False)
        # Processing the call keyword arguments (line 1473)
        kwargs_43773 = {}
        # Getting the type of 'ma' (line 1473)
        ma_43770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 37), 'ma', False)
        # Obtaining the member 'min' of a type (line 1473)
        min_43771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 37), ma_43770, 'min')
        # Calling min(args, kwargs) (line 1473)
        min_call_result_43774 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 37), min_43771, *[y_43772], **kwargs_43773)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1473, 25), list_43764, min_call_result_43774)
        
        # Getting the type of 'self' (line 1473)
        self_43775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 12), 'self')
        # Setting the type of the member '_mins' of a type (line 1473)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 12), self_43775, '_mins', list_43764)
        
        # Assigning a List to a Attribute (line 1474):
        
        # Assigning a List to a Attribute (line 1474):
        
        # Obtaining an instance of the builtin type 'list' (line 1474)
        list_43776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1474, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1474)
        # Adding element type (line 1474)
        
        # Call to max(...): (line 1474)
        # Processing the call arguments (line 1474)
        # Getting the type of 'x' (line 1474)
        x_43779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 33), 'x', False)
        # Processing the call keyword arguments (line 1474)
        kwargs_43780 = {}
        # Getting the type of 'ma' (line 1474)
        ma_43777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 26), 'ma', False)
        # Obtaining the member 'max' of a type (line 1474)
        max_43778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 26), ma_43777, 'max')
        # Calling max(args, kwargs) (line 1474)
        max_call_result_43781 = invoke(stypy.reporting.localization.Localization(__file__, 1474, 26), max_43778, *[x_43779], **kwargs_43780)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1474, 25), list_43776, max_call_result_43781)
        # Adding element type (line 1474)
        
        # Call to max(...): (line 1474)
        # Processing the call arguments (line 1474)
        # Getting the type of 'y' (line 1474)
        y_43784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 44), 'y', False)
        # Processing the call keyword arguments (line 1474)
        kwargs_43785 = {}
        # Getting the type of 'ma' (line 1474)
        ma_43782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 37), 'ma', False)
        # Obtaining the member 'max' of a type (line 1474)
        max_43783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 37), ma_43782, 'max')
        # Calling max(args, kwargs) (line 1474)
        max_call_result_43786 = invoke(stypy.reporting.localization.Localization(__file__, 1474, 37), max_43783, *[y_43784], **kwargs_43785)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1474, 25), list_43776, max_call_result_43786)
        
        # Getting the type of 'self' (line 1474)
        self_43787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1474, 12), 'self')
        # Setting the type of the member '_maxs' of a type (line 1474)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1474, 12), self_43787, '_maxs', list_43776)
        # SSA join for if statement (line 1429)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 1476)
        self_43788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 11), 'self')
        # Obtaining the member '_corner_mask' of a type (line 1476)
        _corner_mask_43789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1476, 11), self_43788, '_corner_mask')
        unicode_43790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1476, 32), 'unicode', u'legacy')
        # Applying the binary operator '==' (line 1476)
        result_eq_43791 = python_operator(stypy.reporting.localization.Localization(__file__, 1476, 11), '==', _corner_mask_43789, unicode_43790)
        
        # Testing the type of an if condition (line 1476)
        if_condition_43792 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1476, 8), result_eq_43791)
        # Assigning a type to the variable 'if_condition_43792' (line 1476)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1476, 8), 'if_condition_43792', if_condition_43792)
        # SSA begins for if statement (line 1476)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1477):
        
        # Assigning a Name to a Attribute (line 1477):
        # Getting the type of 'contour_generator' (line 1477)
        contour_generator_43793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 24), 'contour_generator')
        # Getting the type of 'self' (line 1477)
        self_43794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1477, 12), 'self')
        # Setting the type of the member 'Cntr' of a type (line 1477)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1477, 12), self_43794, 'Cntr', contour_generator_43793)
        # SSA branch for the else part of an if statement (line 1476)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Attribute (line 1479):
        
        # Assigning a Name to a Attribute (line 1479):
        # Getting the type of 'contour_generator' (line 1479)
        contour_generator_43795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 38), 'contour_generator')
        # Getting the type of 'self' (line 1479)
        self_43796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1479, 12), 'self')
        # Setting the type of the member '_contour_generator' of a type (line 1479)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1479, 12), self_43796, '_contour_generator', contour_generator_43795)
        # SSA join for if statement (line 1476)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 'kwargs' (line 1481)
        kwargs_43797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1481, 15), 'kwargs')
        # Assigning a type to the variable 'stypy_return_type' (line 1481)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1481, 8), 'stypy_return_type', kwargs_43797)
        
        # ################# End of '_process_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_process_args' in the type store
        # Getting the type of 'stypy_return_type' (line 1425)
        stypy_return_type_43798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43798)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_process_args'
        return stypy_return_type_43798


    @norecursion
    def _get_allsegs_and_allkinds(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_get_allsegs_and_allkinds'
        module_type_store = module_type_store.open_function_context('_get_allsegs_and_allkinds', 1483, 4, False)
        # Assigning a type to the variable 'self' (line 1484)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1484, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        QuadContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_localization', localization)
        QuadContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        QuadContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_type_store', module_type_store)
        QuadContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_function_name', 'QuadContourSet._get_allsegs_and_allkinds')
        QuadContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_param_names_list', [])
        QuadContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_varargs_param_name', None)
        QuadContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_kwargs_param_name', None)
        QuadContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_call_defaults', defaults)
        QuadContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_call_varargs', varargs)
        QuadContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        QuadContourSet._get_allsegs_and_allkinds.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'QuadContourSet._get_allsegs_and_allkinds', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_get_allsegs_and_allkinds', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_get_allsegs_and_allkinds(...)' code ##################

        unicode_43799 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1486, (-1)), 'unicode', u'\n        Create and return allsegs and allkinds by calling underlying C code.\n        ')
        
        # Assigning a List to a Name (line 1487):
        
        # Assigning a List to a Name (line 1487):
        
        # Obtaining an instance of the builtin type 'list' (line 1487)
        list_43800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1487, 18), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1487)
        
        # Assigning a type to the variable 'allsegs' (line 1487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1487, 8), 'allsegs', list_43800)
        
        # Getting the type of 'self' (line 1488)
        self_43801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1488, 11), 'self')
        # Obtaining the member 'filled' of a type (line 1488)
        filled_43802 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1488, 11), self_43801, 'filled')
        # Testing the type of an if condition (line 1488)
        if_condition_43803 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1488, 8), filled_43802)
        # Assigning a type to the variable 'if_condition_43803' (line 1488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1488, 8), 'if_condition_43803', if_condition_43803)
        # SSA begins for if statement (line 1488)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1489):
        
        # Assigning a Call to a Name:
        
        # Call to _get_lowers_and_uppers(...): (line 1489)
        # Processing the call keyword arguments (line 1489)
        kwargs_43806 = {}
        # Getting the type of 'self' (line 1489)
        self_43804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 29), 'self', False)
        # Obtaining the member '_get_lowers_and_uppers' of a type (line 1489)
        _get_lowers_and_uppers_43805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 29), self_43804, '_get_lowers_and_uppers')
        # Calling _get_lowers_and_uppers(args, kwargs) (line 1489)
        _get_lowers_and_uppers_call_result_43807 = invoke(stypy.reporting.localization.Localization(__file__, 1489, 29), _get_lowers_and_uppers_43805, *[], **kwargs_43806)
        
        # Assigning a type to the variable 'call_assignment_39355' (line 1489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 12), 'call_assignment_39355', _get_lowers_and_uppers_call_result_43807)
        
        # Assigning a Call to a Name (line 1489):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43810 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1489, 12), 'int')
        # Processing the call keyword arguments
        kwargs_43811 = {}
        # Getting the type of 'call_assignment_39355' (line 1489)
        call_assignment_39355_43808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 12), 'call_assignment_39355', False)
        # Obtaining the member '__getitem__' of a type (line 1489)
        getitem___43809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 12), call_assignment_39355_43808, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43812 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43809, *[int_43810], **kwargs_43811)
        
        # Assigning a type to the variable 'call_assignment_39356' (line 1489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 12), 'call_assignment_39356', getitem___call_result_43812)
        
        # Assigning a Name to a Name (line 1489):
        # Getting the type of 'call_assignment_39356' (line 1489)
        call_assignment_39356_43813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 12), 'call_assignment_39356')
        # Assigning a type to the variable 'lowers' (line 1489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 12), 'lowers', call_assignment_39356_43813)
        
        # Assigning a Call to a Name (line 1489):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43816 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1489, 12), 'int')
        # Processing the call keyword arguments
        kwargs_43817 = {}
        # Getting the type of 'call_assignment_39355' (line 1489)
        call_assignment_39355_43814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 12), 'call_assignment_39355', False)
        # Obtaining the member '__getitem__' of a type (line 1489)
        getitem___43815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1489, 12), call_assignment_39355_43814, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43818 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43815, *[int_43816], **kwargs_43817)
        
        # Assigning a type to the variable 'call_assignment_39357' (line 1489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 12), 'call_assignment_39357', getitem___call_result_43818)
        
        # Assigning a Name to a Name (line 1489):
        # Getting the type of 'call_assignment_39357' (line 1489)
        call_assignment_39357_43819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1489, 12), 'call_assignment_39357')
        # Assigning a type to the variable 'uppers' (line 1489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1489, 20), 'uppers', call_assignment_39357_43819)
        
        # Assigning a List to a Name (line 1490):
        
        # Assigning a List to a Name (line 1490):
        
        # Obtaining an instance of the builtin type 'list' (line 1490)
        list_43820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1490, 23), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1490)
        
        # Assigning a type to the variable 'allkinds' (line 1490)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1490, 12), 'allkinds', list_43820)
        
        
        # Call to zip(...): (line 1491)
        # Processing the call arguments (line 1491)
        # Getting the type of 'lowers' (line 1491)
        lowers_43822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 42), 'lowers', False)
        # Getting the type of 'uppers' (line 1491)
        uppers_43823 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 50), 'uppers', False)
        # Processing the call keyword arguments (line 1491)
        kwargs_43824 = {}
        # Getting the type of 'zip' (line 1491)
        zip_43821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1491, 38), 'zip', False)
        # Calling zip(args, kwargs) (line 1491)
        zip_call_result_43825 = invoke(stypy.reporting.localization.Localization(__file__, 1491, 38), zip_43821, *[lowers_43822, uppers_43823], **kwargs_43824)
        
        # Testing the type of a for loop iterable (line 1491)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1491, 12), zip_call_result_43825)
        # Getting the type of the for loop variable (line 1491)
        for_loop_var_43826 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1491, 12), zip_call_result_43825)
        # Assigning a type to the variable 'level' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 12), 'level', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1491, 12), for_loop_var_43826))
        # Assigning a type to the variable 'level_upper' (line 1491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1491, 12), 'level_upper', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1491, 12), for_loop_var_43826))
        # SSA begins for a for statement (line 1491)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'self' (line 1492)
        self_43827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1492, 19), 'self')
        # Obtaining the member '_corner_mask' of a type (line 1492)
        _corner_mask_43828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1492, 19), self_43827, '_corner_mask')
        unicode_43829 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1492, 40), 'unicode', u'legacy')
        # Applying the binary operator '==' (line 1492)
        result_eq_43830 = python_operator(stypy.reporting.localization.Localization(__file__, 1492, 19), '==', _corner_mask_43828, unicode_43829)
        
        # Testing the type of an if condition (line 1492)
        if_condition_43831 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1492, 16), result_eq_43830)
        # Assigning a type to the variable 'if_condition_43831' (line 1492)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1492, 16), 'if_condition_43831', if_condition_43831)
        # SSA begins for if statement (line 1492)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1493):
        
        # Assigning a Call to a Name (line 1493):
        
        # Call to trace(...): (line 1493)
        # Processing the call arguments (line 1493)
        # Getting the type of 'level' (line 1493)
        level_43835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 44), 'level', False)
        # Getting the type of 'level_upper' (line 1493)
        level_upper_43836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 51), 'level_upper', False)
        # Processing the call keyword arguments (line 1493)
        # Getting the type of 'self' (line 1494)
        self_43837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 51), 'self', False)
        # Obtaining the member 'nchunk' of a type (line 1494)
        nchunk_43838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 51), self_43837, 'nchunk')
        keyword_43839 = nchunk_43838
        kwargs_43840 = {'nchunk': keyword_43839}
        # Getting the type of 'self' (line 1493)
        self_43832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1493, 28), 'self', False)
        # Obtaining the member 'Cntr' of a type (line 1493)
        Cntr_43833 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 28), self_43832, 'Cntr')
        # Obtaining the member 'trace' of a type (line 1493)
        trace_43834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1493, 28), Cntr_43833, 'trace')
        # Calling trace(args, kwargs) (line 1493)
        trace_call_result_43841 = invoke(stypy.reporting.localization.Localization(__file__, 1493, 28), trace_43834, *[level_43835, level_upper_43836], **kwargs_43840)
        
        # Assigning a type to the variable 'nlist' (line 1493)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1493, 20), 'nlist', trace_call_result_43841)
        
        # Assigning a BinOp to a Name (line 1495):
        
        # Assigning a BinOp to a Name (line 1495):
        
        # Call to len(...): (line 1495)
        # Processing the call arguments (line 1495)
        # Getting the type of 'nlist' (line 1495)
        nlist_43843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 31), 'nlist', False)
        # Processing the call keyword arguments (line 1495)
        kwargs_43844 = {}
        # Getting the type of 'len' (line 1495)
        len_43842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1495, 27), 'len', False)
        # Calling len(args, kwargs) (line 1495)
        len_call_result_43845 = invoke(stypy.reporting.localization.Localization(__file__, 1495, 27), len_43842, *[nlist_43843], **kwargs_43844)
        
        int_43846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1495, 41), 'int')
        # Applying the binary operator '//' (line 1495)
        result_floordiv_43847 = python_operator(stypy.reporting.localization.Localization(__file__, 1495, 27), '//', len_call_result_43845, int_43846)
        
        # Assigning a type to the variable 'nseg' (line 1495)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1495, 20), 'nseg', result_floordiv_43847)
        
        # Assigning a Subscript to a Name (line 1496):
        
        # Assigning a Subscript to a Name (line 1496):
        
        # Obtaining the type of the subscript
        # Getting the type of 'nseg' (line 1496)
        nseg_43848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 38), 'nseg')
        slice_43849 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1496, 31), None, nseg_43848, None)
        # Getting the type of 'nlist' (line 1496)
        nlist_43850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1496, 31), 'nlist')
        # Obtaining the member '__getitem__' of a type (line 1496)
        getitem___43851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1496, 31), nlist_43850, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1496)
        subscript_call_result_43852 = invoke(stypy.reporting.localization.Localization(__file__, 1496, 31), getitem___43851, slice_43849)
        
        # Assigning a type to the variable 'vertices' (line 1496)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1496, 20), 'vertices', subscript_call_result_43852)
        
        # Assigning a Subscript to a Name (line 1497):
        
        # Assigning a Subscript to a Name (line 1497):
        
        # Obtaining the type of the subscript
        # Getting the type of 'nseg' (line 1497)
        nseg_43853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 34), 'nseg')
        slice_43854 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1497, 28), nseg_43853, None, None)
        # Getting the type of 'nlist' (line 1497)
        nlist_43855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 28), 'nlist')
        # Obtaining the member '__getitem__' of a type (line 1497)
        getitem___43856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1497, 28), nlist_43855, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1497)
        subscript_call_result_43857 = invoke(stypy.reporting.localization.Localization(__file__, 1497, 28), getitem___43856, slice_43854)
        
        # Assigning a type to the variable 'kinds' (line 1497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 20), 'kinds', subscript_call_result_43857)
        # SSA branch for the else part of an if statement (line 1492)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 1499):
        
        # Assigning a Call to a Name:
        
        # Call to create_filled_contour(...): (line 1500)
        # Processing the call arguments (line 1500)
        # Getting the type of 'level' (line 1501)
        level_43861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 59), 'level', False)
        # Getting the type of 'level_upper' (line 1501)
        level_upper_43862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1501, 66), 'level_upper', False)
        # Processing the call keyword arguments (line 1500)
        kwargs_43863 = {}
        # Getting the type of 'self' (line 1500)
        self_43858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1500, 24), 'self', False)
        # Obtaining the member '_contour_generator' of a type (line 1500)
        _contour_generator_43859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 24), self_43858, '_contour_generator')
        # Obtaining the member 'create_filled_contour' of a type (line 1500)
        create_filled_contour_43860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1500, 24), _contour_generator_43859, 'create_filled_contour')
        # Calling create_filled_contour(args, kwargs) (line 1500)
        create_filled_contour_call_result_43864 = invoke(stypy.reporting.localization.Localization(__file__, 1500, 24), create_filled_contour_43860, *[level_43861, level_upper_43862], **kwargs_43863)
        
        # Assigning a type to the variable 'call_assignment_39358' (line 1499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1499, 20), 'call_assignment_39358', create_filled_contour_call_result_43864)
        
        # Assigning a Call to a Name (line 1499):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43867 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1499, 20), 'int')
        # Processing the call keyword arguments
        kwargs_43868 = {}
        # Getting the type of 'call_assignment_39358' (line 1499)
        call_assignment_39358_43865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 20), 'call_assignment_39358', False)
        # Obtaining the member '__getitem__' of a type (line 1499)
        getitem___43866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1499, 20), call_assignment_39358_43865, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43869 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43866, *[int_43867], **kwargs_43868)
        
        # Assigning a type to the variable 'call_assignment_39359' (line 1499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1499, 20), 'call_assignment_39359', getitem___call_result_43869)
        
        # Assigning a Name to a Name (line 1499):
        # Getting the type of 'call_assignment_39359' (line 1499)
        call_assignment_39359_43870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 20), 'call_assignment_39359')
        # Assigning a type to the variable 'vertices' (line 1499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1499, 20), 'vertices', call_assignment_39359_43870)
        
        # Assigning a Call to a Name (line 1499):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43873 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1499, 20), 'int')
        # Processing the call keyword arguments
        kwargs_43874 = {}
        # Getting the type of 'call_assignment_39358' (line 1499)
        call_assignment_39358_43871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 20), 'call_assignment_39358', False)
        # Obtaining the member '__getitem__' of a type (line 1499)
        getitem___43872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1499, 20), call_assignment_39358_43871, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43875 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43872, *[int_43873], **kwargs_43874)
        
        # Assigning a type to the variable 'call_assignment_39360' (line 1499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1499, 20), 'call_assignment_39360', getitem___call_result_43875)
        
        # Assigning a Name to a Name (line 1499):
        # Getting the type of 'call_assignment_39360' (line 1499)
        call_assignment_39360_43876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1499, 20), 'call_assignment_39360')
        # Assigning a type to the variable 'kinds' (line 1499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1499, 30), 'kinds', call_assignment_39360_43876)
        # SSA join for if statement (line 1492)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1502)
        # Processing the call arguments (line 1502)
        # Getting the type of 'vertices' (line 1502)
        vertices_43879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 31), 'vertices', False)
        # Processing the call keyword arguments (line 1502)
        kwargs_43880 = {}
        # Getting the type of 'allsegs' (line 1502)
        allsegs_43877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1502, 16), 'allsegs', False)
        # Obtaining the member 'append' of a type (line 1502)
        append_43878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1502, 16), allsegs_43877, 'append')
        # Calling append(args, kwargs) (line 1502)
        append_call_result_43881 = invoke(stypy.reporting.localization.Localization(__file__, 1502, 16), append_43878, *[vertices_43879], **kwargs_43880)
        
        
        # Call to append(...): (line 1503)
        # Processing the call arguments (line 1503)
        # Getting the type of 'kinds' (line 1503)
        kinds_43884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 32), 'kinds', False)
        # Processing the call keyword arguments (line 1503)
        kwargs_43885 = {}
        # Getting the type of 'allkinds' (line 1503)
        allkinds_43882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1503, 16), 'allkinds', False)
        # Obtaining the member 'append' of a type (line 1503)
        append_43883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1503, 16), allkinds_43882, 'append')
        # Calling append(args, kwargs) (line 1503)
        append_call_result_43886 = invoke(stypy.reporting.localization.Localization(__file__, 1503, 16), append_43883, *[kinds_43884], **kwargs_43885)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1488)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 1505):
        
        # Assigning a Name to a Name (line 1505):
        # Getting the type of 'None' (line 1505)
        None_43887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1505, 23), 'None')
        # Assigning a type to the variable 'allkinds' (line 1505)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1505, 12), 'allkinds', None_43887)
        
        # Getting the type of 'self' (line 1506)
        self_43888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1506, 25), 'self')
        # Obtaining the member 'levels' of a type (line 1506)
        levels_43889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1506, 25), self_43888, 'levels')
        # Testing the type of a for loop iterable (line 1506)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1506, 12), levels_43889)
        # Getting the type of the for loop variable (line 1506)
        for_loop_var_43890 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1506, 12), levels_43889)
        # Assigning a type to the variable 'level' (line 1506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1506, 12), 'level', for_loop_var_43890)
        # SSA begins for a for statement (line 1506)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'self' (line 1507)
        self_43891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1507, 19), 'self')
        # Obtaining the member '_corner_mask' of a type (line 1507)
        _corner_mask_43892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1507, 19), self_43891, '_corner_mask')
        unicode_43893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1507, 40), 'unicode', u'legacy')
        # Applying the binary operator '==' (line 1507)
        result_eq_43894 = python_operator(stypy.reporting.localization.Localization(__file__, 1507, 19), '==', _corner_mask_43892, unicode_43893)
        
        # Testing the type of an if condition (line 1507)
        if_condition_43895 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1507, 16), result_eq_43894)
        # Assigning a type to the variable 'if_condition_43895' (line 1507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1507, 16), 'if_condition_43895', if_condition_43895)
        # SSA begins for if statement (line 1507)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1508):
        
        # Assigning a Call to a Name (line 1508):
        
        # Call to trace(...): (line 1508)
        # Processing the call arguments (line 1508)
        # Getting the type of 'level' (line 1508)
        level_43899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 44), 'level', False)
        # Processing the call keyword arguments (line 1508)
        kwargs_43900 = {}
        # Getting the type of 'self' (line 1508)
        self_43896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1508, 28), 'self', False)
        # Obtaining the member 'Cntr' of a type (line 1508)
        Cntr_43897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1508, 28), self_43896, 'Cntr')
        # Obtaining the member 'trace' of a type (line 1508)
        trace_43898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1508, 28), Cntr_43897, 'trace')
        # Calling trace(args, kwargs) (line 1508)
        trace_call_result_43901 = invoke(stypy.reporting.localization.Localization(__file__, 1508, 28), trace_43898, *[level_43899], **kwargs_43900)
        
        # Assigning a type to the variable 'nlist' (line 1508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1508, 20), 'nlist', trace_call_result_43901)
        
        # Assigning a BinOp to a Name (line 1509):
        
        # Assigning a BinOp to a Name (line 1509):
        
        # Call to len(...): (line 1509)
        # Processing the call arguments (line 1509)
        # Getting the type of 'nlist' (line 1509)
        nlist_43903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 31), 'nlist', False)
        # Processing the call keyword arguments (line 1509)
        kwargs_43904 = {}
        # Getting the type of 'len' (line 1509)
        len_43902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1509, 27), 'len', False)
        # Calling len(args, kwargs) (line 1509)
        len_call_result_43905 = invoke(stypy.reporting.localization.Localization(__file__, 1509, 27), len_43902, *[nlist_43903], **kwargs_43904)
        
        int_43906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1509, 41), 'int')
        # Applying the binary operator '//' (line 1509)
        result_floordiv_43907 = python_operator(stypy.reporting.localization.Localization(__file__, 1509, 27), '//', len_call_result_43905, int_43906)
        
        # Assigning a type to the variable 'nseg' (line 1509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1509, 20), 'nseg', result_floordiv_43907)
        
        # Assigning a Subscript to a Name (line 1510):
        
        # Assigning a Subscript to a Name (line 1510):
        
        # Obtaining the type of the subscript
        # Getting the type of 'nseg' (line 1510)
        nseg_43908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 38), 'nseg')
        slice_43909 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1510, 31), None, nseg_43908, None)
        # Getting the type of 'nlist' (line 1510)
        nlist_43910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1510, 31), 'nlist')
        # Obtaining the member '__getitem__' of a type (line 1510)
        getitem___43911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1510, 31), nlist_43910, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1510)
        subscript_call_result_43912 = invoke(stypy.reporting.localization.Localization(__file__, 1510, 31), getitem___43911, slice_43909)
        
        # Assigning a type to the variable 'vertices' (line 1510)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1510, 20), 'vertices', subscript_call_result_43912)
        # SSA branch for the else part of an if statement (line 1507)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 1512):
        
        # Assigning a Call to a Name (line 1512):
        
        # Call to create_contour(...): (line 1512)
        # Processing the call arguments (line 1512)
        # Getting the type of 'level' (line 1512)
        level_43916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 70), 'level', False)
        # Processing the call keyword arguments (line 1512)
        kwargs_43917 = {}
        # Getting the type of 'self' (line 1512)
        self_43913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1512, 31), 'self', False)
        # Obtaining the member '_contour_generator' of a type (line 1512)
        _contour_generator_43914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 31), self_43913, '_contour_generator')
        # Obtaining the member 'create_contour' of a type (line 1512)
        create_contour_43915 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1512, 31), _contour_generator_43914, 'create_contour')
        # Calling create_contour(args, kwargs) (line 1512)
        create_contour_call_result_43918 = invoke(stypy.reporting.localization.Localization(__file__, 1512, 31), create_contour_43915, *[level_43916], **kwargs_43917)
        
        # Assigning a type to the variable 'vertices' (line 1512)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1512, 20), 'vertices', create_contour_call_result_43918)
        # SSA join for if statement (line 1507)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to append(...): (line 1513)
        # Processing the call arguments (line 1513)
        # Getting the type of 'vertices' (line 1513)
        vertices_43921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 31), 'vertices', False)
        # Processing the call keyword arguments (line 1513)
        kwargs_43922 = {}
        # Getting the type of 'allsegs' (line 1513)
        allsegs_43919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1513, 16), 'allsegs', False)
        # Obtaining the member 'append' of a type (line 1513)
        append_43920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1513, 16), allsegs_43919, 'append')
        # Calling append(args, kwargs) (line 1513)
        append_call_result_43923 = invoke(stypy.reporting.localization.Localization(__file__, 1513, 16), append_43920, *[vertices_43921], **kwargs_43922)
        
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1488)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1514)
        tuple_43924 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1514, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1514)
        # Adding element type (line 1514)
        # Getting the type of 'allsegs' (line 1514)
        allsegs_43925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 15), 'allsegs')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1514, 15), tuple_43924, allsegs_43925)
        # Adding element type (line 1514)
        # Getting the type of 'allkinds' (line 1514)
        allkinds_43926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1514, 24), 'allkinds')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1514, 15), tuple_43924, allkinds_43926)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1514)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1514, 8), 'stypy_return_type', tuple_43924)
        
        # ################# End of '_get_allsegs_and_allkinds(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_get_allsegs_and_allkinds' in the type store
        # Getting the type of 'stypy_return_type' (line 1483)
        stypy_return_type_43927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1483, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_43927)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_get_allsegs_and_allkinds'
        return stypy_return_type_43927


    @norecursion
    def _contour_args(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_contour_args'
        module_type_store = module_type_store.open_function_context('_contour_args', 1516, 4, False)
        # Assigning a type to the variable 'self' (line 1517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1517, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        QuadContourSet._contour_args.__dict__.__setitem__('stypy_localization', localization)
        QuadContourSet._contour_args.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        QuadContourSet._contour_args.__dict__.__setitem__('stypy_type_store', module_type_store)
        QuadContourSet._contour_args.__dict__.__setitem__('stypy_function_name', 'QuadContourSet._contour_args')
        QuadContourSet._contour_args.__dict__.__setitem__('stypy_param_names_list', ['args', 'kwargs'])
        QuadContourSet._contour_args.__dict__.__setitem__('stypy_varargs_param_name', None)
        QuadContourSet._contour_args.__dict__.__setitem__('stypy_kwargs_param_name', None)
        QuadContourSet._contour_args.__dict__.__setitem__('stypy_call_defaults', defaults)
        QuadContourSet._contour_args.__dict__.__setitem__('stypy_call_varargs', varargs)
        QuadContourSet._contour_args.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        QuadContourSet._contour_args.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'QuadContourSet._contour_args', ['args', 'kwargs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_contour_args', localization, ['args', 'kwargs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_contour_args(...)' code ##################

        
        # Getting the type of 'self' (line 1517)
        self_43928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1517, 11), 'self')
        # Obtaining the member 'filled' of a type (line 1517)
        filled_43929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1517, 11), self_43928, 'filled')
        # Testing the type of an if condition (line 1517)
        if_condition_43930 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1517, 8), filled_43929)
        # Assigning a type to the variable 'if_condition_43930' (line 1517)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1517, 8), 'if_condition_43930', if_condition_43930)
        # SSA begins for if statement (line 1517)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1518):
        
        # Assigning a Str to a Name (line 1518):
        unicode_43931 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1518, 17), 'unicode', u'contourf')
        # Assigning a type to the variable 'fn' (line 1518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1518, 12), 'fn', unicode_43931)
        # SSA branch for the else part of an if statement (line 1517)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Str to a Name (line 1520):
        
        # Assigning a Str to a Name (line 1520):
        unicode_43932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1520, 17), 'unicode', u'contour')
        # Assigning a type to the variable 'fn' (line 1520)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1520, 12), 'fn', unicode_43932)
        # SSA join for if statement (line 1517)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1521):
        
        # Assigning a Call to a Name (line 1521):
        
        # Call to len(...): (line 1521)
        # Processing the call arguments (line 1521)
        # Getting the type of 'args' (line 1521)
        args_43934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 20), 'args', False)
        # Processing the call keyword arguments (line 1521)
        kwargs_43935 = {}
        # Getting the type of 'len' (line 1521)
        len_43933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 16), 'len', False)
        # Calling len(args, kwargs) (line 1521)
        len_call_result_43936 = invoke(stypy.reporting.localization.Localization(__file__, 1521, 16), len_43933, *[args_43934], **kwargs_43935)
        
        # Assigning a type to the variable 'Nargs' (line 1521)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1521, 8), 'Nargs', len_call_result_43936)
        
        
        # Getting the type of 'Nargs' (line 1522)
        Nargs_43937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 11), 'Nargs')
        int_43938 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1522, 20), 'int')
        # Applying the binary operator '<=' (line 1522)
        result_le_43939 = python_operator(stypy.reporting.localization.Localization(__file__, 1522, 11), '<=', Nargs_43937, int_43938)
        
        # Testing the type of an if condition (line 1522)
        if_condition_43940 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1522, 8), result_le_43939)
        # Assigning a type to the variable 'if_condition_43940' (line 1522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1522, 8), 'if_condition_43940', if_condition_43940)
        # SSA begins for if statement (line 1522)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1523):
        
        # Assigning a Call to a Name (line 1523):
        
        # Call to asarray(...): (line 1523)
        # Processing the call arguments (line 1523)
        
        # Obtaining the type of the subscript
        int_43943 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1523, 32), 'int')
        # Getting the type of 'args' (line 1523)
        args_43944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 27), 'args', False)
        # Obtaining the member '__getitem__' of a type (line 1523)
        getitem___43945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 27), args_43944, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1523)
        subscript_call_result_43946 = invoke(stypy.reporting.localization.Localization(__file__, 1523, 27), getitem___43945, int_43943)
        
        # Processing the call keyword arguments (line 1523)
        # Getting the type of 'np' (line 1523)
        np_43947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 42), 'np', False)
        # Obtaining the member 'float64' of a type (line 1523)
        float64_43948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 42), np_43947, 'float64')
        keyword_43949 = float64_43948
        kwargs_43950 = {'dtype': keyword_43949}
        # Getting the type of 'ma' (line 1523)
        ma_43941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1523, 16), 'ma', False)
        # Obtaining the member 'asarray' of a type (line 1523)
        asarray_43942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1523, 16), ma_43941, 'asarray')
        # Calling asarray(args, kwargs) (line 1523)
        asarray_call_result_43951 = invoke(stypy.reporting.localization.Localization(__file__, 1523, 16), asarray_43942, *[subscript_call_result_43946], **kwargs_43950)
        
        # Assigning a type to the variable 'z' (line 1523)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1523, 12), 'z', asarray_call_result_43951)
        
        # Assigning a Call to a Tuple (line 1524):
        
        # Assigning a Call to a Name:
        
        # Call to _initialize_x_y(...): (line 1524)
        # Processing the call arguments (line 1524)
        # Getting the type of 'z' (line 1524)
        z_43954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 40), 'z', False)
        # Processing the call keyword arguments (line 1524)
        kwargs_43955 = {}
        # Getting the type of 'self' (line 1524)
        self_43952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 19), 'self', False)
        # Obtaining the member '_initialize_x_y' of a type (line 1524)
        _initialize_x_y_43953 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 19), self_43952, '_initialize_x_y')
        # Calling _initialize_x_y(args, kwargs) (line 1524)
        _initialize_x_y_call_result_43956 = invoke(stypy.reporting.localization.Localization(__file__, 1524, 19), _initialize_x_y_43953, *[z_43954], **kwargs_43955)
        
        # Assigning a type to the variable 'call_assignment_39361' (line 1524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 12), 'call_assignment_39361', _initialize_x_y_call_result_43956)
        
        # Assigning a Call to a Name (line 1524):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1524, 12), 'int')
        # Processing the call keyword arguments
        kwargs_43960 = {}
        # Getting the type of 'call_assignment_39361' (line 1524)
        call_assignment_39361_43957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 12), 'call_assignment_39361', False)
        # Obtaining the member '__getitem__' of a type (line 1524)
        getitem___43958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 12), call_assignment_39361_43957, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43961 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43958, *[int_43959], **kwargs_43960)
        
        # Assigning a type to the variable 'call_assignment_39362' (line 1524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 12), 'call_assignment_39362', getitem___call_result_43961)
        
        # Assigning a Name to a Name (line 1524):
        # Getting the type of 'call_assignment_39362' (line 1524)
        call_assignment_39362_43962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 12), 'call_assignment_39362')
        # Assigning a type to the variable 'x' (line 1524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 12), 'x', call_assignment_39362_43962)
        
        # Assigning a Call to a Name (line 1524):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43965 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1524, 12), 'int')
        # Processing the call keyword arguments
        kwargs_43966 = {}
        # Getting the type of 'call_assignment_39361' (line 1524)
        call_assignment_39361_43963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 12), 'call_assignment_39361', False)
        # Obtaining the member '__getitem__' of a type (line 1524)
        getitem___43964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1524, 12), call_assignment_39361_43963, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43967 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43964, *[int_43965], **kwargs_43966)
        
        # Assigning a type to the variable 'call_assignment_39363' (line 1524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 12), 'call_assignment_39363', getitem___call_result_43967)
        
        # Assigning a Name to a Name (line 1524):
        # Getting the type of 'call_assignment_39363' (line 1524)
        call_assignment_39363_43968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1524, 12), 'call_assignment_39363')
        # Assigning a type to the variable 'y' (line 1524)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1524, 15), 'y', call_assignment_39363_43968)
        
        # Assigning a Subscript to a Name (line 1525):
        
        # Assigning a Subscript to a Name (line 1525):
        
        # Obtaining the type of the subscript
        int_43969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1525, 24), 'int')
        slice_43970 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1525, 19), int_43969, None, None)
        # Getting the type of 'args' (line 1525)
        args_43971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 19), 'args')
        # Obtaining the member '__getitem__' of a type (line 1525)
        getitem___43972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1525, 19), args_43971, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1525)
        subscript_call_result_43973 = invoke(stypy.reporting.localization.Localization(__file__, 1525, 19), getitem___43972, slice_43970)
        
        # Assigning a type to the variable 'args' (line 1525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 12), 'args', subscript_call_result_43973)
        # SSA branch for the else part of an if statement (line 1522)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'Nargs' (line 1526)
        Nargs_43974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1526, 13), 'Nargs')
        int_43975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1526, 22), 'int')
        # Applying the binary operator '<=' (line 1526)
        result_le_43976 = python_operator(stypy.reporting.localization.Localization(__file__, 1526, 13), '<=', Nargs_43974, int_43975)
        
        # Testing the type of an if condition (line 1526)
        if_condition_43977 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1526, 13), result_le_43976)
        # Assigning a type to the variable 'if_condition_43977' (line 1526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1526, 13), 'if_condition_43977', if_condition_43977)
        # SSA begins for if statement (line 1526)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 1527):
        
        # Assigning a Call to a Name:
        
        # Call to _check_xyz(...): (line 1527)
        # Processing the call arguments (line 1527)
        
        # Obtaining the type of the subscript
        int_43980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 44), 'int')
        slice_43981 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1527, 38), None, int_43980, None)
        # Getting the type of 'args' (line 1527)
        args_43982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 38), 'args', False)
        # Obtaining the member '__getitem__' of a type (line 1527)
        getitem___43983 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 38), args_43982, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1527)
        subscript_call_result_43984 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 38), getitem___43983, slice_43981)
        
        # Getting the type of 'kwargs' (line 1527)
        kwargs_43985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 48), 'kwargs', False)
        # Processing the call keyword arguments (line 1527)
        kwargs_43986 = {}
        # Getting the type of 'self' (line 1527)
        self_43978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 22), 'self', False)
        # Obtaining the member '_check_xyz' of a type (line 1527)
        _check_xyz_43979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 22), self_43978, '_check_xyz')
        # Calling _check_xyz(args, kwargs) (line 1527)
        _check_xyz_call_result_43987 = invoke(stypy.reporting.localization.Localization(__file__, 1527, 22), _check_xyz_43979, *[subscript_call_result_43984, kwargs_43985], **kwargs_43986)
        
        # Assigning a type to the variable 'call_assignment_39364' (line 1527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'call_assignment_39364', _check_xyz_call_result_43987)
        
        # Assigning a Call to a Name (line 1527):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43990 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 12), 'int')
        # Processing the call keyword arguments
        kwargs_43991 = {}
        # Getting the type of 'call_assignment_39364' (line 1527)
        call_assignment_39364_43988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'call_assignment_39364', False)
        # Obtaining the member '__getitem__' of a type (line 1527)
        getitem___43989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 12), call_assignment_39364_43988, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43992 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43989, *[int_43990], **kwargs_43991)
        
        # Assigning a type to the variable 'call_assignment_39365' (line 1527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'call_assignment_39365', getitem___call_result_43992)
        
        # Assigning a Name to a Name (line 1527):
        # Getting the type of 'call_assignment_39365' (line 1527)
        call_assignment_39365_43993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'call_assignment_39365')
        # Assigning a type to the variable 'x' (line 1527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'x', call_assignment_39365_43993)
        
        # Assigning a Call to a Name (line 1527):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_43996 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 12), 'int')
        # Processing the call keyword arguments
        kwargs_43997 = {}
        # Getting the type of 'call_assignment_39364' (line 1527)
        call_assignment_39364_43994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'call_assignment_39364', False)
        # Obtaining the member '__getitem__' of a type (line 1527)
        getitem___43995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 12), call_assignment_39364_43994, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_43998 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___43995, *[int_43996], **kwargs_43997)
        
        # Assigning a type to the variable 'call_assignment_39366' (line 1527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'call_assignment_39366', getitem___call_result_43998)
        
        # Assigning a Name to a Name (line 1527):
        # Getting the type of 'call_assignment_39366' (line 1527)
        call_assignment_39366_43999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'call_assignment_39366')
        # Assigning a type to the variable 'y' (line 1527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 15), 'y', call_assignment_39366_43999)
        
        # Assigning a Call to a Name (line 1527):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_44002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1527, 12), 'int')
        # Processing the call keyword arguments
        kwargs_44003 = {}
        # Getting the type of 'call_assignment_39364' (line 1527)
        call_assignment_39364_44000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'call_assignment_39364', False)
        # Obtaining the member '__getitem__' of a type (line 1527)
        getitem___44001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1527, 12), call_assignment_39364_44000, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_44004 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___44001, *[int_44002], **kwargs_44003)
        
        # Assigning a type to the variable 'call_assignment_39367' (line 1527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'call_assignment_39367', getitem___call_result_44004)
        
        # Assigning a Name to a Name (line 1527):
        # Getting the type of 'call_assignment_39367' (line 1527)
        call_assignment_39367_44005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1527, 12), 'call_assignment_39367')
        # Assigning a type to the variable 'z' (line 1527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1527, 18), 'z', call_assignment_39367_44005)
        
        # Assigning a Subscript to a Name (line 1528):
        
        # Assigning a Subscript to a Name (line 1528):
        
        # Obtaining the type of the subscript
        int_44006 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1528, 24), 'int')
        slice_44007 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1528, 19), int_44006, None, None)
        # Getting the type of 'args' (line 1528)
        args_44008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1528, 19), 'args')
        # Obtaining the member '__getitem__' of a type (line 1528)
        getitem___44009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1528, 19), args_44008, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1528)
        subscript_call_result_44010 = invoke(stypy.reporting.localization.Localization(__file__, 1528, 19), getitem___44009, slice_44007)
        
        # Assigning a type to the variable 'args' (line 1528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1528, 12), 'args', subscript_call_result_44010)
        # SSA branch for the else part of an if statement (line 1526)
        module_type_store.open_ssa_branch('else')
        
        # Call to TypeError(...): (line 1530)
        # Processing the call arguments (line 1530)
        unicode_44012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1530, 28), 'unicode', u'Too many arguments to %s; see help(%s)')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1531)
        tuple_44013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1531, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1531)
        # Adding element type (line 1531)
        # Getting the type of 'fn' (line 1531)
        fn_44014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 29), 'fn', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1531, 29), tuple_44013, fn_44014)
        # Adding element type (line 1531)
        # Getting the type of 'fn' (line 1531)
        fn_44015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1531, 33), 'fn', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1531, 29), tuple_44013, fn_44015)
        
        # Applying the binary operator '%' (line 1530)
        result_mod_44016 = python_operator(stypy.reporting.localization.Localization(__file__, 1530, 28), '%', unicode_44012, tuple_44013)
        
        # Processing the call keyword arguments (line 1530)
        kwargs_44017 = {}
        # Getting the type of 'TypeError' (line 1530)
        TypeError_44011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1530, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1530)
        TypeError_call_result_44018 = invoke(stypy.reporting.localization.Localization(__file__, 1530, 18), TypeError_44011, *[result_mod_44016], **kwargs_44017)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1530, 12), TypeError_call_result_44018, 'raise parameter', BaseException)
        # SSA join for if statement (line 1526)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1522)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 1532):
        
        # Assigning a Call to a Name (line 1532):
        
        # Call to masked_invalid(...): (line 1532)
        # Processing the call arguments (line 1532)
        # Getting the type of 'z' (line 1532)
        z_44021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 30), 'z', False)
        # Processing the call keyword arguments (line 1532)
        # Getting the type of 'False' (line 1532)
        False_44022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 38), 'False', False)
        keyword_44023 = False_44022
        kwargs_44024 = {'copy': keyword_44023}
        # Getting the type of 'ma' (line 1532)
        ma_44019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1532, 12), 'ma', False)
        # Obtaining the member 'masked_invalid' of a type (line 1532)
        masked_invalid_44020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1532, 12), ma_44019, 'masked_invalid')
        # Calling masked_invalid(args, kwargs) (line 1532)
        masked_invalid_call_result_44025 = invoke(stypy.reporting.localization.Localization(__file__, 1532, 12), masked_invalid_44020, *[z_44021], **kwargs_44024)
        
        # Assigning a type to the variable 'z' (line 1532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1532, 8), 'z', masked_invalid_call_result_44025)
        
        # Assigning a Call to a Attribute (line 1533):
        
        # Assigning a Call to a Attribute (line 1533):
        
        # Call to float(...): (line 1533)
        # Processing the call arguments (line 1533)
        
        # Call to max(...): (line 1533)
        # Processing the call keyword arguments (line 1533)
        kwargs_44029 = {}
        # Getting the type of 'z' (line 1533)
        z_44027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 26), 'z', False)
        # Obtaining the member 'max' of a type (line 1533)
        max_44028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 26), z_44027, 'max')
        # Calling max(args, kwargs) (line 1533)
        max_call_result_44030 = invoke(stypy.reporting.localization.Localization(__file__, 1533, 26), max_44028, *[], **kwargs_44029)
        
        # Processing the call keyword arguments (line 1533)
        kwargs_44031 = {}
        # Getting the type of 'float' (line 1533)
        float_44026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 20), 'float', False)
        # Calling float(args, kwargs) (line 1533)
        float_call_result_44032 = invoke(stypy.reporting.localization.Localization(__file__, 1533, 20), float_44026, *[max_call_result_44030], **kwargs_44031)
        
        # Getting the type of 'self' (line 1533)
        self_44033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1533, 8), 'self')
        # Setting the type of the member 'zmax' of a type (line 1533)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1533, 8), self_44033, 'zmax', float_call_result_44032)
        
        # Assigning a Call to a Attribute (line 1534):
        
        # Assigning a Call to a Attribute (line 1534):
        
        # Call to float(...): (line 1534)
        # Processing the call arguments (line 1534)
        
        # Call to min(...): (line 1534)
        # Processing the call keyword arguments (line 1534)
        kwargs_44037 = {}
        # Getting the type of 'z' (line 1534)
        z_44035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 26), 'z', False)
        # Obtaining the member 'min' of a type (line 1534)
        min_44036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 26), z_44035, 'min')
        # Calling min(args, kwargs) (line 1534)
        min_call_result_44038 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 26), min_44036, *[], **kwargs_44037)
        
        # Processing the call keyword arguments (line 1534)
        kwargs_44039 = {}
        # Getting the type of 'float' (line 1534)
        float_44034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 20), 'float', False)
        # Calling float(args, kwargs) (line 1534)
        float_call_result_44040 = invoke(stypy.reporting.localization.Localization(__file__, 1534, 20), float_44034, *[min_call_result_44038], **kwargs_44039)
        
        # Getting the type of 'self' (line 1534)
        self_44041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1534, 8), 'self')
        # Setting the type of the member 'zmin' of a type (line 1534)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1534, 8), self_44041, 'zmin', float_call_result_44040)
        
        
        # Evaluating a boolean operation
        # Getting the type of 'self' (line 1535)
        self_44042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 11), 'self')
        # Obtaining the member 'logscale' of a type (line 1535)
        logscale_44043 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 11), self_44042, 'logscale')
        
        # Getting the type of 'self' (line 1535)
        self_44044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1535, 29), 'self')
        # Obtaining the member 'zmin' of a type (line 1535)
        zmin_44045 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1535, 29), self_44044, 'zmin')
        int_44046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1535, 42), 'int')
        # Applying the binary operator '<=' (line 1535)
        result_le_44047 = python_operator(stypy.reporting.localization.Localization(__file__, 1535, 29), '<=', zmin_44045, int_44046)
        
        # Applying the binary operator 'and' (line 1535)
        result_and_keyword_44048 = python_operator(stypy.reporting.localization.Localization(__file__, 1535, 11), 'and', logscale_44043, result_le_44047)
        
        # Testing the type of an if condition (line 1535)
        if_condition_44049 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1535, 8), result_and_keyword_44048)
        # Assigning a type to the variable 'if_condition_44049' (line 1535)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1535, 8), 'if_condition_44049', if_condition_44049)
        # SSA begins for if statement (line 1535)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1536):
        
        # Assigning a Call to a Name (line 1536):
        
        # Call to masked_where(...): (line 1536)
        # Processing the call arguments (line 1536)
        
        # Getting the type of 'z' (line 1536)
        z_44052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 32), 'z', False)
        int_44053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1536, 37), 'int')
        # Applying the binary operator '<=' (line 1536)
        result_le_44054 = python_operator(stypy.reporting.localization.Localization(__file__, 1536, 32), '<=', z_44052, int_44053)
        
        # Getting the type of 'z' (line 1536)
        z_44055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 40), 'z', False)
        # Processing the call keyword arguments (line 1536)
        kwargs_44056 = {}
        # Getting the type of 'ma' (line 1536)
        ma_44050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1536, 16), 'ma', False)
        # Obtaining the member 'masked_where' of a type (line 1536)
        masked_where_44051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1536, 16), ma_44050, 'masked_where')
        # Calling masked_where(args, kwargs) (line 1536)
        masked_where_call_result_44057 = invoke(stypy.reporting.localization.Localization(__file__, 1536, 16), masked_where_44051, *[result_le_44054, z_44055], **kwargs_44056)
        
        # Assigning a type to the variable 'z' (line 1536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1536, 12), 'z', masked_where_call_result_44057)
        
        # Call to warn(...): (line 1537)
        # Processing the call arguments (line 1537)
        unicode_44060 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1537, 26), 'unicode', u'Log scale: values of z <= 0 have been masked')
        # Processing the call keyword arguments (line 1537)
        kwargs_44061 = {}
        # Getting the type of 'warnings' (line 1537)
        warnings_44058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1537, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 1537)
        warn_44059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1537, 12), warnings_44058, 'warn')
        # Calling warn(args, kwargs) (line 1537)
        warn_call_result_44062 = invoke(stypy.reporting.localization.Localization(__file__, 1537, 12), warn_44059, *[unicode_44060], **kwargs_44061)
        
        
        # Assigning a Call to a Attribute (line 1538):
        
        # Assigning a Call to a Attribute (line 1538):
        
        # Call to float(...): (line 1538)
        # Processing the call arguments (line 1538)
        
        # Call to min(...): (line 1538)
        # Processing the call keyword arguments (line 1538)
        kwargs_44066 = {}
        # Getting the type of 'z' (line 1538)
        z_44064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 30), 'z', False)
        # Obtaining the member 'min' of a type (line 1538)
        min_44065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 30), z_44064, 'min')
        # Calling min(args, kwargs) (line 1538)
        min_call_result_44067 = invoke(stypy.reporting.localization.Localization(__file__, 1538, 30), min_44065, *[], **kwargs_44066)
        
        # Processing the call keyword arguments (line 1538)
        kwargs_44068 = {}
        # Getting the type of 'float' (line 1538)
        float_44063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 24), 'float', False)
        # Calling float(args, kwargs) (line 1538)
        float_call_result_44069 = invoke(stypy.reporting.localization.Localization(__file__, 1538, 24), float_44063, *[min_call_result_44067], **kwargs_44068)
        
        # Getting the type of 'self' (line 1538)
        self_44070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1538, 12), 'self')
        # Setting the type of the member 'zmin' of a type (line 1538)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1538, 12), self_44070, 'zmin', float_call_result_44069)
        # SSA join for if statement (line 1535)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to _contour_level_args(...): (line 1539)
        # Processing the call arguments (line 1539)
        # Getting the type of 'z' (line 1539)
        z_44073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 33), 'z', False)
        # Getting the type of 'args' (line 1539)
        args_44074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 36), 'args', False)
        # Processing the call keyword arguments (line 1539)
        kwargs_44075 = {}
        # Getting the type of 'self' (line 1539)
        self_44071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1539, 8), 'self', False)
        # Obtaining the member '_contour_level_args' of a type (line 1539)
        _contour_level_args_44072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1539, 8), self_44071, '_contour_level_args')
        # Calling _contour_level_args(args, kwargs) (line 1539)
        _contour_level_args_call_result_44076 = invoke(stypy.reporting.localization.Localization(__file__, 1539, 8), _contour_level_args_44072, *[z_44073, args_44074], **kwargs_44075)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1540)
        tuple_44077 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1540, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1540)
        # Adding element type (line 1540)
        # Getting the type of 'x' (line 1540)
        x_44078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 16), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1540, 16), tuple_44077, x_44078)
        # Adding element type (line 1540)
        # Getting the type of 'y' (line 1540)
        y_44079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 19), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1540, 16), tuple_44077, y_44079)
        # Adding element type (line 1540)
        # Getting the type of 'z' (line 1540)
        z_44080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1540, 22), 'z')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1540, 16), tuple_44077, z_44080)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1540)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1540, 8), 'stypy_return_type', tuple_44077)
        
        # ################# End of '_contour_args(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_contour_args' in the type store
        # Getting the type of 'stypy_return_type' (line 1516)
        stypy_return_type_44081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1516, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_44081)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_contour_args'
        return stypy_return_type_44081


    @norecursion
    def _check_xyz(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_check_xyz'
        module_type_store = module_type_store.open_function_context('_check_xyz', 1542, 4, False)
        # Assigning a type to the variable 'self' (line 1543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1543, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        QuadContourSet._check_xyz.__dict__.__setitem__('stypy_localization', localization)
        QuadContourSet._check_xyz.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        QuadContourSet._check_xyz.__dict__.__setitem__('stypy_type_store', module_type_store)
        QuadContourSet._check_xyz.__dict__.__setitem__('stypy_function_name', 'QuadContourSet._check_xyz')
        QuadContourSet._check_xyz.__dict__.__setitem__('stypy_param_names_list', ['args', 'kwargs'])
        QuadContourSet._check_xyz.__dict__.__setitem__('stypy_varargs_param_name', None)
        QuadContourSet._check_xyz.__dict__.__setitem__('stypy_kwargs_param_name', None)
        QuadContourSet._check_xyz.__dict__.__setitem__('stypy_call_defaults', defaults)
        QuadContourSet._check_xyz.__dict__.__setitem__('stypy_call_varargs', varargs)
        QuadContourSet._check_xyz.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        QuadContourSet._check_xyz.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'QuadContourSet._check_xyz', ['args', 'kwargs'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_check_xyz', localization, ['args', 'kwargs'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_check_xyz(...)' code ##################

        unicode_44082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1550, (-1)), 'unicode', u'\n        For functions like contour, check that the dimensions\n        of the input arrays match; if x and y are 1D, convert\n        them to 2D using meshgrid.\n\n        Possible change: I think we should make and use an ArgumentError\n        Exception class (here and elsewhere).\n        ')
        
        # Assigning a Subscript to a Tuple (line 1551):
        
        # Assigning a Subscript to a Name (line 1551):
        
        # Obtaining the type of the subscript
        int_44083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 8), 'int')
        
        # Obtaining the type of the subscript
        int_44084 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 21), 'int')
        slice_44085 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1551, 15), None, int_44084, None)
        # Getting the type of 'args' (line 1551)
        args_44086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 15), 'args')
        # Obtaining the member '__getitem__' of a type (line 1551)
        getitem___44087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 15), args_44086, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1551)
        subscript_call_result_44088 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 15), getitem___44087, slice_44085)
        
        # Obtaining the member '__getitem__' of a type (line 1551)
        getitem___44089 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 8), subscript_call_result_44088, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1551)
        subscript_call_result_44090 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 8), getitem___44089, int_44083)
        
        # Assigning a type to the variable 'tuple_var_assignment_39368' (line 1551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'tuple_var_assignment_39368', subscript_call_result_44090)
        
        # Assigning a Subscript to a Name (line 1551):
        
        # Obtaining the type of the subscript
        int_44091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 8), 'int')
        
        # Obtaining the type of the subscript
        int_44092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1551, 21), 'int')
        slice_44093 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1551, 15), None, int_44092, None)
        # Getting the type of 'args' (line 1551)
        args_44094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 15), 'args')
        # Obtaining the member '__getitem__' of a type (line 1551)
        getitem___44095 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 15), args_44094, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1551)
        subscript_call_result_44096 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 15), getitem___44095, slice_44093)
        
        # Obtaining the member '__getitem__' of a type (line 1551)
        getitem___44097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1551, 8), subscript_call_result_44096, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1551)
        subscript_call_result_44098 = invoke(stypy.reporting.localization.Localization(__file__, 1551, 8), getitem___44097, int_44091)
        
        # Assigning a type to the variable 'tuple_var_assignment_39369' (line 1551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'tuple_var_assignment_39369', subscript_call_result_44098)
        
        # Assigning a Name to a Name (line 1551):
        # Getting the type of 'tuple_var_assignment_39368' (line 1551)
        tuple_var_assignment_39368_44099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'tuple_var_assignment_39368')
        # Assigning a type to the variable 'x' (line 1551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'x', tuple_var_assignment_39368_44099)
        
        # Assigning a Name to a Name (line 1551):
        # Getting the type of 'tuple_var_assignment_39369' (line 1551)
        tuple_var_assignment_39369_44100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1551, 8), 'tuple_var_assignment_39369')
        # Assigning a type to the variable 'y' (line 1551)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1551, 11), 'y', tuple_var_assignment_39369_44100)
        
        # Assigning a Call to a Name (line 1552):
        
        # Assigning a Call to a Name (line 1552):
        
        # Call to _process_unit_info(...): (line 1552)
        # Processing the call keyword arguments (line 1552)
        # Getting the type of 'x' (line 1552)
        x_44104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 50), 'x', False)
        keyword_44105 = x_44104
        # Getting the type of 'y' (line 1552)
        y_44106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 59), 'y', False)
        keyword_44107 = y_44106
        # Getting the type of 'kwargs' (line 1552)
        kwargs_44108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 69), 'kwargs', False)
        keyword_44109 = kwargs_44108
        kwargs_44110 = {'ydata': keyword_44107, 'xdata': keyword_44105, 'kwargs': keyword_44109}
        # Getting the type of 'self' (line 1552)
        self_44101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 17), 'self', False)
        # Obtaining the member 'ax' of a type (line 1552)
        ax_44102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1552, 17), self_44101, 'ax')
        # Obtaining the member '_process_unit_info' of a type (line 1552)
        _process_unit_info_44103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1552, 17), ax_44102, '_process_unit_info')
        # Calling _process_unit_info(args, kwargs) (line 1552)
        _process_unit_info_call_result_44111 = invoke(stypy.reporting.localization.Localization(__file__, 1552, 17), _process_unit_info_44103, *[], **kwargs_44110)
        
        # Assigning a type to the variable 'kwargs' (line 1552)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 8), 'kwargs', _process_unit_info_call_result_44111)
        
        # Assigning a Call to a Name (line 1553):
        
        # Assigning a Call to a Name (line 1553):
        
        # Call to convert_xunits(...): (line 1553)
        # Processing the call arguments (line 1553)
        # Getting the type of 'x' (line 1553)
        x_44115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 35), 'x', False)
        # Processing the call keyword arguments (line 1553)
        kwargs_44116 = {}
        # Getting the type of 'self' (line 1553)
        self_44112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1553, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 1553)
        ax_44113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1553, 12), self_44112, 'ax')
        # Obtaining the member 'convert_xunits' of a type (line 1553)
        convert_xunits_44114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1553, 12), ax_44113, 'convert_xunits')
        # Calling convert_xunits(args, kwargs) (line 1553)
        convert_xunits_call_result_44117 = invoke(stypy.reporting.localization.Localization(__file__, 1553, 12), convert_xunits_44114, *[x_44115], **kwargs_44116)
        
        # Assigning a type to the variable 'x' (line 1553)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1553, 8), 'x', convert_xunits_call_result_44117)
        
        # Assigning a Call to a Name (line 1554):
        
        # Assigning a Call to a Name (line 1554):
        
        # Call to convert_yunits(...): (line 1554)
        # Processing the call arguments (line 1554)
        # Getting the type of 'y' (line 1554)
        y_44121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 35), 'y', False)
        # Processing the call keyword arguments (line 1554)
        kwargs_44122 = {}
        # Getting the type of 'self' (line 1554)
        self_44118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1554, 12), 'self', False)
        # Obtaining the member 'ax' of a type (line 1554)
        ax_44119 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1554, 12), self_44118, 'ax')
        # Obtaining the member 'convert_yunits' of a type (line 1554)
        convert_yunits_44120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1554, 12), ax_44119, 'convert_yunits')
        # Calling convert_yunits(args, kwargs) (line 1554)
        convert_yunits_call_result_44123 = invoke(stypy.reporting.localization.Localization(__file__, 1554, 12), convert_yunits_44120, *[y_44121], **kwargs_44122)
        
        # Assigning a type to the variable 'y' (line 1554)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1554, 8), 'y', convert_yunits_call_result_44123)
        
        # Assigning a Call to a Name (line 1556):
        
        # Assigning a Call to a Name (line 1556):
        
        # Call to asarray(...): (line 1556)
        # Processing the call arguments (line 1556)
        # Getting the type of 'x' (line 1556)
        x_44126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 23), 'x', False)
        # Processing the call keyword arguments (line 1556)
        # Getting the type of 'np' (line 1556)
        np_44127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 32), 'np', False)
        # Obtaining the member 'float64' of a type (line 1556)
        float64_44128 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1556, 32), np_44127, 'float64')
        keyword_44129 = float64_44128
        kwargs_44130 = {'dtype': keyword_44129}
        # Getting the type of 'np' (line 1556)
        np_44124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1556, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1556)
        asarray_44125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1556, 12), np_44124, 'asarray')
        # Calling asarray(args, kwargs) (line 1556)
        asarray_call_result_44131 = invoke(stypy.reporting.localization.Localization(__file__, 1556, 12), asarray_44125, *[x_44126], **kwargs_44130)
        
        # Assigning a type to the variable 'x' (line 1556)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1556, 8), 'x', asarray_call_result_44131)
        
        # Assigning a Call to a Name (line 1557):
        
        # Assigning a Call to a Name (line 1557):
        
        # Call to asarray(...): (line 1557)
        # Processing the call arguments (line 1557)
        # Getting the type of 'y' (line 1557)
        y_44134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 23), 'y', False)
        # Processing the call keyword arguments (line 1557)
        # Getting the type of 'np' (line 1557)
        np_44135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 32), 'np', False)
        # Obtaining the member 'float64' of a type (line 1557)
        float64_44136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1557, 32), np_44135, 'float64')
        keyword_44137 = float64_44136
        kwargs_44138 = {'dtype': keyword_44137}
        # Getting the type of 'np' (line 1557)
        np_44132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1557, 12), 'np', False)
        # Obtaining the member 'asarray' of a type (line 1557)
        asarray_44133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1557, 12), np_44132, 'asarray')
        # Calling asarray(args, kwargs) (line 1557)
        asarray_call_result_44139 = invoke(stypy.reporting.localization.Localization(__file__, 1557, 12), asarray_44133, *[y_44134], **kwargs_44138)
        
        # Assigning a type to the variable 'y' (line 1557)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1557, 8), 'y', asarray_call_result_44139)
        
        # Assigning a Call to a Name (line 1558):
        
        # Assigning a Call to a Name (line 1558):
        
        # Call to asarray(...): (line 1558)
        # Processing the call arguments (line 1558)
        
        # Obtaining the type of the subscript
        int_44142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1558, 28), 'int')
        # Getting the type of 'args' (line 1558)
        args_44143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 23), 'args', False)
        # Obtaining the member '__getitem__' of a type (line 1558)
        getitem___44144 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1558, 23), args_44143, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1558)
        subscript_call_result_44145 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 23), getitem___44144, int_44142)
        
        # Processing the call keyword arguments (line 1558)
        # Getting the type of 'np' (line 1558)
        np_44146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 38), 'np', False)
        # Obtaining the member 'float64' of a type (line 1558)
        float64_44147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1558, 38), np_44146, 'float64')
        keyword_44148 = float64_44147
        kwargs_44149 = {'dtype': keyword_44148}
        # Getting the type of 'ma' (line 1558)
        ma_44140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1558, 12), 'ma', False)
        # Obtaining the member 'asarray' of a type (line 1558)
        asarray_44141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1558, 12), ma_44140, 'asarray')
        # Calling asarray(args, kwargs) (line 1558)
        asarray_call_result_44150 = invoke(stypy.reporting.localization.Localization(__file__, 1558, 12), asarray_44141, *[subscript_call_result_44145], **kwargs_44149)
        
        # Assigning a type to the variable 'z' (line 1558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1558, 8), 'z', asarray_call_result_44150)
        
        
        # Getting the type of 'z' (line 1560)
        z_44151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1560, 11), 'z')
        # Obtaining the member 'ndim' of a type (line 1560)
        ndim_44152 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1560, 11), z_44151, 'ndim')
        int_44153 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1560, 21), 'int')
        # Applying the binary operator '!=' (line 1560)
        result_ne_44154 = python_operator(stypy.reporting.localization.Localization(__file__, 1560, 11), '!=', ndim_44152, int_44153)
        
        # Testing the type of an if condition (line 1560)
        if_condition_44155 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1560, 8), result_ne_44154)
        # Assigning a type to the variable 'if_condition_44155' (line 1560)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1560, 8), 'if_condition_44155', if_condition_44155)
        # SSA begins for if statement (line 1560)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1561)
        # Processing the call arguments (line 1561)
        unicode_44157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1561, 28), 'unicode', u'Input z must be a 2D array.')
        # Processing the call keyword arguments (line 1561)
        kwargs_44158 = {}
        # Getting the type of 'TypeError' (line 1561)
        TypeError_44156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1561, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1561)
        TypeError_call_result_44159 = invoke(stypy.reporting.localization.Localization(__file__, 1561, 18), TypeError_44156, *[unicode_44157], **kwargs_44158)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1561, 12), TypeError_call_result_44159, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 1560)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        int_44160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1562, 21), 'int')
        # Getting the type of 'z' (line 1562)
        z_44161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 13), 'z')
        # Obtaining the member 'shape' of a type (line 1562)
        shape_44162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1562, 13), z_44161, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1562)
        getitem___44163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1562, 13), shape_44162, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1562)
        subscript_call_result_44164 = invoke(stypy.reporting.localization.Localization(__file__, 1562, 13), getitem___44163, int_44160)
        
        int_44165 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1562, 26), 'int')
        # Applying the binary operator '<' (line 1562)
        result_lt_44166 = python_operator(stypy.reporting.localization.Localization(__file__, 1562, 13), '<', subscript_call_result_44164, int_44165)
        
        
        
        # Obtaining the type of the subscript
        int_44167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1562, 39), 'int')
        # Getting the type of 'z' (line 1562)
        z_44168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1562, 31), 'z')
        # Obtaining the member 'shape' of a type (line 1562)
        shape_44169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1562, 31), z_44168, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1562)
        getitem___44170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1562, 31), shape_44169, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1562)
        subscript_call_result_44171 = invoke(stypy.reporting.localization.Localization(__file__, 1562, 31), getitem___44170, int_44167)
        
        int_44172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1562, 44), 'int')
        # Applying the binary operator '<' (line 1562)
        result_lt_44173 = python_operator(stypy.reporting.localization.Localization(__file__, 1562, 31), '<', subscript_call_result_44171, int_44172)
        
        # Applying the binary operator 'or' (line 1562)
        result_or_keyword_44174 = python_operator(stypy.reporting.localization.Localization(__file__, 1562, 13), 'or', result_lt_44166, result_lt_44173)
        
        # Testing the type of an if condition (line 1562)
        if_condition_44175 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1562, 13), result_or_keyword_44174)
        # Assigning a type to the variable 'if_condition_44175' (line 1562)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1562, 13), 'if_condition_44175', if_condition_44175)
        # SSA begins for if statement (line 1562)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1563)
        # Processing the call arguments (line 1563)
        unicode_44177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1563, 28), 'unicode', u'Input z must be at least a 2x2 array.')
        # Processing the call keyword arguments (line 1563)
        kwargs_44178 = {}
        # Getting the type of 'TypeError' (line 1563)
        TypeError_44176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1563, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1563)
        TypeError_call_result_44179 = invoke(stypy.reporting.localization.Localization(__file__, 1563, 18), TypeError_44176, *[unicode_44177], **kwargs_44178)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1563, 12), TypeError_call_result_44179, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 1562)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Tuple (line 1565):
        
        # Assigning a Subscript to a Name (line 1565):
        
        # Obtaining the type of the subscript
        int_44180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 12), 'int')
        # Getting the type of 'z' (line 1565)
        z_44181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 21), 'z')
        # Obtaining the member 'shape' of a type (line 1565)
        shape_44182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 21), z_44181, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1565)
        getitem___44183 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 12), shape_44182, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1565)
        subscript_call_result_44184 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 12), getitem___44183, int_44180)
        
        # Assigning a type to the variable 'tuple_var_assignment_39370' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 12), 'tuple_var_assignment_39370', subscript_call_result_44184)
        
        # Assigning a Subscript to a Name (line 1565):
        
        # Obtaining the type of the subscript
        int_44185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1565, 12), 'int')
        # Getting the type of 'z' (line 1565)
        z_44186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 21), 'z')
        # Obtaining the member 'shape' of a type (line 1565)
        shape_44187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 21), z_44186, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1565)
        getitem___44188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1565, 12), shape_44187, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1565)
        subscript_call_result_44189 = invoke(stypy.reporting.localization.Localization(__file__, 1565, 12), getitem___44188, int_44185)
        
        # Assigning a type to the variable 'tuple_var_assignment_39371' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 12), 'tuple_var_assignment_39371', subscript_call_result_44189)
        
        # Assigning a Name to a Name (line 1565):
        # Getting the type of 'tuple_var_assignment_39370' (line 1565)
        tuple_var_assignment_39370_44190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 12), 'tuple_var_assignment_39370')
        # Assigning a type to the variable 'Ny' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 12), 'Ny', tuple_var_assignment_39370_44190)
        
        # Assigning a Name to a Name (line 1565):
        # Getting the type of 'tuple_var_assignment_39371' (line 1565)
        tuple_var_assignment_39371_44191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1565, 12), 'tuple_var_assignment_39371')
        # Assigning a type to the variable 'Nx' (line 1565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1565, 16), 'Nx', tuple_var_assignment_39371_44191)
        # SSA join for if statement (line 1562)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1560)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x' (line 1567)
        x_44192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 11), 'x')
        # Obtaining the member 'ndim' of a type (line 1567)
        ndim_44193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 11), x_44192, 'ndim')
        # Getting the type of 'y' (line 1567)
        y_44194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 21), 'y')
        # Obtaining the member 'ndim' of a type (line 1567)
        ndim_44195 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 21), y_44194, 'ndim')
        # Applying the binary operator '!=' (line 1567)
        result_ne_44196 = python_operator(stypy.reporting.localization.Localization(__file__, 1567, 11), '!=', ndim_44193, ndim_44195)
        
        # Testing the type of an if condition (line 1567)
        if_condition_44197 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1567, 8), result_ne_44196)
        # Assigning a type to the variable 'if_condition_44197' (line 1567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1567, 8), 'if_condition_44197', if_condition_44197)
        # SSA begins for if statement (line 1567)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1568)
        # Processing the call arguments (line 1568)
        unicode_44199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1568, 28), 'unicode', u'Number of dimensions of x and y should match.')
        # Processing the call keyword arguments (line 1568)
        kwargs_44200 = {}
        # Getting the type of 'TypeError' (line 1568)
        TypeError_44198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1568, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1568)
        TypeError_call_result_44201 = invoke(stypy.reporting.localization.Localization(__file__, 1568, 18), TypeError_44198, *[unicode_44199], **kwargs_44200)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1568, 12), TypeError_call_result_44201, 'raise parameter', BaseException)
        # SSA join for if statement (line 1567)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'x' (line 1570)
        x_44202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 11), 'x')
        # Obtaining the member 'ndim' of a type (line 1570)
        ndim_44203 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1570, 11), x_44202, 'ndim')
        int_44204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1570, 21), 'int')
        # Applying the binary operator '==' (line 1570)
        result_eq_44205 = python_operator(stypy.reporting.localization.Localization(__file__, 1570, 11), '==', ndim_44203, int_44204)
        
        # Testing the type of an if condition (line 1570)
        if_condition_44206 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1570, 8), result_eq_44205)
        # Assigning a type to the variable 'if_condition_44206' (line 1570)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1570, 8), 'if_condition_44206', if_condition_44206)
        # SSA begins for if statement (line 1570)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Tuple (line 1572):
        
        # Assigning a Subscript to a Name (line 1572):
        
        # Obtaining the type of the subscript
        int_44207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1572, 12), 'int')
        # Getting the type of 'x' (line 1572)
        x_44208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 18), 'x')
        # Obtaining the member 'shape' of a type (line 1572)
        shape_44209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1572, 18), x_44208, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1572)
        getitem___44210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1572, 12), shape_44209, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1572)
        subscript_call_result_44211 = invoke(stypy.reporting.localization.Localization(__file__, 1572, 12), getitem___44210, int_44207)
        
        # Assigning a type to the variable 'tuple_var_assignment_39372' (line 1572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 12), 'tuple_var_assignment_39372', subscript_call_result_44211)
        
        # Assigning a Name to a Name (line 1572):
        # Getting the type of 'tuple_var_assignment_39372' (line 1572)
        tuple_var_assignment_39372_44212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1572, 12), 'tuple_var_assignment_39372')
        # Assigning a type to the variable 'nx' (line 1572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1572, 12), 'nx', tuple_var_assignment_39372_44212)
        
        # Assigning a Attribute to a Tuple (line 1573):
        
        # Assigning a Subscript to a Name (line 1573):
        
        # Obtaining the type of the subscript
        int_44213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1573, 12), 'int')
        # Getting the type of 'y' (line 1573)
        y_44214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 18), 'y')
        # Obtaining the member 'shape' of a type (line 1573)
        shape_44215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 18), y_44214, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1573)
        getitem___44216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1573, 12), shape_44215, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1573)
        subscript_call_result_44217 = invoke(stypy.reporting.localization.Localization(__file__, 1573, 12), getitem___44216, int_44213)
        
        # Assigning a type to the variable 'tuple_var_assignment_39373' (line 1573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 12), 'tuple_var_assignment_39373', subscript_call_result_44217)
        
        # Assigning a Name to a Name (line 1573):
        # Getting the type of 'tuple_var_assignment_39373' (line 1573)
        tuple_var_assignment_39373_44218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1573, 12), 'tuple_var_assignment_39373')
        # Assigning a type to the variable 'ny' (line 1573)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1573, 12), 'ny', tuple_var_assignment_39373_44218)
        
        
        # Getting the type of 'nx' (line 1575)
        nx_44219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 15), 'nx')
        # Getting the type of 'Nx' (line 1575)
        Nx_44220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1575, 21), 'Nx')
        # Applying the binary operator '!=' (line 1575)
        result_ne_44221 = python_operator(stypy.reporting.localization.Localization(__file__, 1575, 15), '!=', nx_44219, Nx_44220)
        
        # Testing the type of an if condition (line 1575)
        if_condition_44222 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1575, 12), result_ne_44221)
        # Assigning a type to the variable 'if_condition_44222' (line 1575)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1575, 12), 'if_condition_44222', if_condition_44222)
        # SSA begins for if statement (line 1575)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1576)
        # Processing the call arguments (line 1576)
        unicode_44224 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1576, 32), 'unicode', u'Length of x must be number of columns in z.')
        # Processing the call keyword arguments (line 1576)
        kwargs_44225 = {}
        # Getting the type of 'TypeError' (line 1576)
        TypeError_44223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1576, 22), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1576)
        TypeError_call_result_44226 = invoke(stypy.reporting.localization.Localization(__file__, 1576, 22), TypeError_44223, *[unicode_44224], **kwargs_44225)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1576, 16), TypeError_call_result_44226, 'raise parameter', BaseException)
        # SSA join for if statement (line 1575)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'ny' (line 1578)
        ny_44227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 15), 'ny')
        # Getting the type of 'Ny' (line 1578)
        Ny_44228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1578, 21), 'Ny')
        # Applying the binary operator '!=' (line 1578)
        result_ne_44229 = python_operator(stypy.reporting.localization.Localization(__file__, 1578, 15), '!=', ny_44227, Ny_44228)
        
        # Testing the type of an if condition (line 1578)
        if_condition_44230 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1578, 12), result_ne_44229)
        # Assigning a type to the variable 'if_condition_44230' (line 1578)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1578, 12), 'if_condition_44230', if_condition_44230)
        # SSA begins for if statement (line 1578)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1579)
        # Processing the call arguments (line 1579)
        unicode_44232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1579, 32), 'unicode', u'Length of y must be number of rows in z.')
        # Processing the call keyword arguments (line 1579)
        kwargs_44233 = {}
        # Getting the type of 'TypeError' (line 1579)
        TypeError_44231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1579, 22), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1579)
        TypeError_call_result_44234 = invoke(stypy.reporting.localization.Localization(__file__, 1579, 22), TypeError_44231, *[unicode_44232], **kwargs_44233)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1579, 16), TypeError_call_result_44234, 'raise parameter', BaseException)
        # SSA join for if statement (line 1578)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Tuple (line 1581):
        
        # Assigning a Call to a Name:
        
        # Call to meshgrid(...): (line 1581)
        # Processing the call arguments (line 1581)
        # Getting the type of 'x' (line 1581)
        x_44237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 31), 'x', False)
        # Getting the type of 'y' (line 1581)
        y_44238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 34), 'y', False)
        # Processing the call keyword arguments (line 1581)
        kwargs_44239 = {}
        # Getting the type of 'np' (line 1581)
        np_44235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 19), 'np', False)
        # Obtaining the member 'meshgrid' of a type (line 1581)
        meshgrid_44236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1581, 19), np_44235, 'meshgrid')
        # Calling meshgrid(args, kwargs) (line 1581)
        meshgrid_call_result_44240 = invoke(stypy.reporting.localization.Localization(__file__, 1581, 19), meshgrid_44236, *[x_44237, y_44238], **kwargs_44239)
        
        # Assigning a type to the variable 'call_assignment_39374' (line 1581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 12), 'call_assignment_39374', meshgrid_call_result_44240)
        
        # Assigning a Call to a Name (line 1581):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_44243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 12), 'int')
        # Processing the call keyword arguments
        kwargs_44244 = {}
        # Getting the type of 'call_assignment_39374' (line 1581)
        call_assignment_39374_44241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 12), 'call_assignment_39374', False)
        # Obtaining the member '__getitem__' of a type (line 1581)
        getitem___44242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1581, 12), call_assignment_39374_44241, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_44245 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___44242, *[int_44243], **kwargs_44244)
        
        # Assigning a type to the variable 'call_assignment_39375' (line 1581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 12), 'call_assignment_39375', getitem___call_result_44245)
        
        # Assigning a Name to a Name (line 1581):
        # Getting the type of 'call_assignment_39375' (line 1581)
        call_assignment_39375_44246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 12), 'call_assignment_39375')
        # Assigning a type to the variable 'x' (line 1581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 12), 'x', call_assignment_39375_44246)
        
        # Assigning a Call to a Name (line 1581):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_44249 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1581, 12), 'int')
        # Processing the call keyword arguments
        kwargs_44250 = {}
        # Getting the type of 'call_assignment_39374' (line 1581)
        call_assignment_39374_44247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 12), 'call_assignment_39374', False)
        # Obtaining the member '__getitem__' of a type (line 1581)
        getitem___44248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1581, 12), call_assignment_39374_44247, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_44251 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___44248, *[int_44249], **kwargs_44250)
        
        # Assigning a type to the variable 'call_assignment_39376' (line 1581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 12), 'call_assignment_39376', getitem___call_result_44251)
        
        # Assigning a Name to a Name (line 1581):
        # Getting the type of 'call_assignment_39376' (line 1581)
        call_assignment_39376_44252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1581, 12), 'call_assignment_39376')
        # Assigning a type to the variable 'y' (line 1581)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1581, 15), 'y', call_assignment_39376_44252)
        # SSA branch for the else part of an if statement (line 1570)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'x' (line 1583)
        x_44253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1583, 13), 'x')
        # Obtaining the member 'ndim' of a type (line 1583)
        ndim_44254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1583, 13), x_44253, 'ndim')
        int_44255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1583, 23), 'int')
        # Applying the binary operator '==' (line 1583)
        result_eq_44256 = python_operator(stypy.reporting.localization.Localization(__file__, 1583, 13), '==', ndim_44254, int_44255)
        
        # Testing the type of an if condition (line 1583)
        if_condition_44257 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1583, 13), result_eq_44256)
        # Assigning a type to the variable 'if_condition_44257' (line 1583)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1583, 13), 'if_condition_44257', if_condition_44257)
        # SSA begins for if statement (line 1583)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'x' (line 1585)
        x_44258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 15), 'x')
        # Obtaining the member 'shape' of a type (line 1585)
        shape_44259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1585, 15), x_44258, 'shape')
        # Getting the type of 'z' (line 1585)
        z_44260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 26), 'z')
        # Obtaining the member 'shape' of a type (line 1585)
        shape_44261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1585, 26), z_44260, 'shape')
        # Applying the binary operator '!=' (line 1585)
        result_ne_44262 = python_operator(stypy.reporting.localization.Localization(__file__, 1585, 15), '!=', shape_44259, shape_44261)
        
        # Testing the type of an if condition (line 1585)
        if_condition_44263 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1585, 12), result_ne_44262)
        # Assigning a type to the variable 'if_condition_44263' (line 1585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1585, 12), 'if_condition_44263', if_condition_44263)
        # SSA begins for if statement (line 1585)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1586)
        # Processing the call arguments (line 1586)
        
        # Call to format(...): (line 1586)
        # Processing the call arguments (line 1586)
        # Getting the type of 'x' (line 1587)
        x_44267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 61), 'x', False)
        # Obtaining the member 'shape' of a type (line 1587)
        shape_44268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 61), x_44267, 'shape')
        # Getting the type of 'z' (line 1587)
        z_44269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1587, 70), 'z', False)
        # Obtaining the member 'shape' of a type (line 1587)
        shape_44270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1587, 70), z_44269, 'shape')
        # Processing the call keyword arguments (line 1586)
        kwargs_44271 = {}
        unicode_44265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1586, 32), 'unicode', u'Shape of x does not match that of z: found {0} instead of {1}.')
        # Obtaining the member 'format' of a type (line 1586)
        format_44266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1586, 32), unicode_44265, 'format')
        # Calling format(args, kwargs) (line 1586)
        format_call_result_44272 = invoke(stypy.reporting.localization.Localization(__file__, 1586, 32), format_44266, *[shape_44268, shape_44270], **kwargs_44271)
        
        # Processing the call keyword arguments (line 1586)
        kwargs_44273 = {}
        # Getting the type of 'TypeError' (line 1586)
        TypeError_44264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1586, 22), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1586)
        TypeError_call_result_44274 = invoke(stypy.reporting.localization.Localization(__file__, 1586, 22), TypeError_44264, *[format_call_result_44272], **kwargs_44273)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1586, 16), TypeError_call_result_44274, 'raise parameter', BaseException)
        # SSA join for if statement (line 1585)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'y' (line 1589)
        y_44275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 15), 'y')
        # Obtaining the member 'shape' of a type (line 1589)
        shape_44276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1589, 15), y_44275, 'shape')
        # Getting the type of 'z' (line 1589)
        z_44277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1589, 26), 'z')
        # Obtaining the member 'shape' of a type (line 1589)
        shape_44278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1589, 26), z_44277, 'shape')
        # Applying the binary operator '!=' (line 1589)
        result_ne_44279 = python_operator(stypy.reporting.localization.Localization(__file__, 1589, 15), '!=', shape_44276, shape_44278)
        
        # Testing the type of an if condition (line 1589)
        if_condition_44280 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1589, 12), result_ne_44279)
        # Assigning a type to the variable 'if_condition_44280' (line 1589)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1589, 12), 'if_condition_44280', if_condition_44280)
        # SSA begins for if statement (line 1589)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1590)
        # Processing the call arguments (line 1590)
        
        # Call to format(...): (line 1590)
        # Processing the call arguments (line 1590)
        # Getting the type of 'y' (line 1591)
        y_44284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 61), 'y', False)
        # Obtaining the member 'shape' of a type (line 1591)
        shape_44285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1591, 61), y_44284, 'shape')
        # Getting the type of 'z' (line 1591)
        z_44286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1591, 70), 'z', False)
        # Obtaining the member 'shape' of a type (line 1591)
        shape_44287 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1591, 70), z_44286, 'shape')
        # Processing the call keyword arguments (line 1590)
        kwargs_44288 = {}
        unicode_44282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1590, 32), 'unicode', u'Shape of y does not match that of z: found {0} instead of {1}.')
        # Obtaining the member 'format' of a type (line 1590)
        format_44283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1590, 32), unicode_44282, 'format')
        # Calling format(args, kwargs) (line 1590)
        format_call_result_44289 = invoke(stypy.reporting.localization.Localization(__file__, 1590, 32), format_44283, *[shape_44285, shape_44287], **kwargs_44288)
        
        # Processing the call keyword arguments (line 1590)
        kwargs_44290 = {}
        # Getting the type of 'TypeError' (line 1590)
        TypeError_44281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1590, 22), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1590)
        TypeError_call_result_44291 = invoke(stypy.reporting.localization.Localization(__file__, 1590, 22), TypeError_44281, *[format_call_result_44289], **kwargs_44290)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1590, 16), TypeError_call_result_44291, 'raise parameter', BaseException)
        # SSA join for if statement (line 1589)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1583)
        module_type_store.open_ssa_branch('else')
        
        # Call to TypeError(...): (line 1593)
        # Processing the call arguments (line 1593)
        unicode_44293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1593, 28), 'unicode', u'Inputs x and y must be 1D or 2D.')
        # Processing the call keyword arguments (line 1593)
        kwargs_44294 = {}
        # Getting the type of 'TypeError' (line 1593)
        TypeError_44292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1593, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1593)
        TypeError_call_result_44295 = invoke(stypy.reporting.localization.Localization(__file__, 1593, 18), TypeError_44292, *[unicode_44293], **kwargs_44294)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1593, 12), TypeError_call_result_44295, 'raise parameter', BaseException)
        # SSA join for if statement (line 1583)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1570)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1595)
        tuple_44296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1595, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1595)
        # Adding element type (line 1595)
        # Getting the type of 'x' (line 1595)
        x_44297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 15), 'x')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1595, 15), tuple_44296, x_44297)
        # Adding element type (line 1595)
        # Getting the type of 'y' (line 1595)
        y_44298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 18), 'y')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1595, 15), tuple_44296, y_44298)
        # Adding element type (line 1595)
        # Getting the type of 'z' (line 1595)
        z_44299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1595, 21), 'z')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1595, 15), tuple_44296, z_44299)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1595)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1595, 8), 'stypy_return_type', tuple_44296)
        
        # ################# End of '_check_xyz(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_check_xyz' in the type store
        # Getting the type of 'stypy_return_type' (line 1542)
        stypy_return_type_44300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1542, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_44300)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_check_xyz'
        return stypy_return_type_44300


    @norecursion
    def _initialize_x_y(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_initialize_x_y'
        module_type_store = module_type_store.open_function_context('_initialize_x_y', 1597, 4, False)
        # Assigning a type to the variable 'self' (line 1598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1598, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        QuadContourSet._initialize_x_y.__dict__.__setitem__('stypy_localization', localization)
        QuadContourSet._initialize_x_y.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        QuadContourSet._initialize_x_y.__dict__.__setitem__('stypy_type_store', module_type_store)
        QuadContourSet._initialize_x_y.__dict__.__setitem__('stypy_function_name', 'QuadContourSet._initialize_x_y')
        QuadContourSet._initialize_x_y.__dict__.__setitem__('stypy_param_names_list', ['z'])
        QuadContourSet._initialize_x_y.__dict__.__setitem__('stypy_varargs_param_name', None)
        QuadContourSet._initialize_x_y.__dict__.__setitem__('stypy_kwargs_param_name', None)
        QuadContourSet._initialize_x_y.__dict__.__setitem__('stypy_call_defaults', defaults)
        QuadContourSet._initialize_x_y.__dict__.__setitem__('stypy_call_varargs', varargs)
        QuadContourSet._initialize_x_y.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        QuadContourSet._initialize_x_y.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'QuadContourSet._initialize_x_y', ['z'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_initialize_x_y', localization, ['z'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_initialize_x_y(...)' code ##################

        unicode_44301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1609, (-1)), 'unicode', u"\n        Return X, Y arrays such that contour(Z) will match imshow(Z)\n        if origin is not None.\n        The center of pixel Z[i,j] depends on origin:\n        if origin is None, x = j, y = i;\n        if origin is 'lower', x = j + 0.5, y = i + 0.5;\n        if origin is 'upper', x = j + 0.5, y = Nrows - i - 0.5\n        If extent is not None, x and y will be scaled to match,\n        as in imshow.\n        If origin is None and extent is not None, then extent\n        will give the minimum and maximum values of x and y.\n        ")
        
        
        # Getting the type of 'z' (line 1610)
        z_44302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1610, 11), 'z')
        # Obtaining the member 'ndim' of a type (line 1610)
        ndim_44303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1610, 11), z_44302, 'ndim')
        int_44304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1610, 21), 'int')
        # Applying the binary operator '!=' (line 1610)
        result_ne_44305 = python_operator(stypy.reporting.localization.Localization(__file__, 1610, 11), '!=', ndim_44303, int_44304)
        
        # Testing the type of an if condition (line 1610)
        if_condition_44306 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1610, 8), result_ne_44305)
        # Assigning a type to the variable 'if_condition_44306' (line 1610)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1610, 8), 'if_condition_44306', if_condition_44306)
        # SSA begins for if statement (line 1610)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1611)
        # Processing the call arguments (line 1611)
        unicode_44308 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1611, 28), 'unicode', u'Input must be a 2D array.')
        # Processing the call keyword arguments (line 1611)
        kwargs_44309 = {}
        # Getting the type of 'TypeError' (line 1611)
        TypeError_44307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1611)
        TypeError_call_result_44310 = invoke(stypy.reporting.localization.Localization(__file__, 1611, 18), TypeError_44307, *[unicode_44308], **kwargs_44309)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1611, 12), TypeError_call_result_44310, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 1610)
        module_type_store.open_ssa_branch('else')
        
        
        # Evaluating a boolean operation
        
        
        # Obtaining the type of the subscript
        int_44311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1612, 21), 'int')
        # Getting the type of 'z' (line 1612)
        z_44312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 13), 'z')
        # Obtaining the member 'shape' of a type (line 1612)
        shape_44313 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1612, 13), z_44312, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1612)
        getitem___44314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1612, 13), shape_44313, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1612)
        subscript_call_result_44315 = invoke(stypy.reporting.localization.Localization(__file__, 1612, 13), getitem___44314, int_44311)
        
        int_44316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1612, 26), 'int')
        # Applying the binary operator '<' (line 1612)
        result_lt_44317 = python_operator(stypy.reporting.localization.Localization(__file__, 1612, 13), '<', subscript_call_result_44315, int_44316)
        
        
        
        # Obtaining the type of the subscript
        int_44318 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1612, 39), 'int')
        # Getting the type of 'z' (line 1612)
        z_44319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 31), 'z')
        # Obtaining the member 'shape' of a type (line 1612)
        shape_44320 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1612, 31), z_44319, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1612)
        getitem___44321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1612, 31), shape_44320, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1612)
        subscript_call_result_44322 = invoke(stypy.reporting.localization.Localization(__file__, 1612, 31), getitem___44321, int_44318)
        
        int_44323 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1612, 44), 'int')
        # Applying the binary operator '<' (line 1612)
        result_lt_44324 = python_operator(stypy.reporting.localization.Localization(__file__, 1612, 31), '<', subscript_call_result_44322, int_44323)
        
        # Applying the binary operator 'or' (line 1612)
        result_or_keyword_44325 = python_operator(stypy.reporting.localization.Localization(__file__, 1612, 13), 'or', result_lt_44317, result_lt_44324)
        
        # Testing the type of an if condition (line 1612)
        if_condition_44326 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1612, 13), result_or_keyword_44325)
        # Assigning a type to the variable 'if_condition_44326' (line 1612)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1612, 13), 'if_condition_44326', if_condition_44326)
        # SSA begins for if statement (line 1612)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 1613)
        # Processing the call arguments (line 1613)
        unicode_44328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1613, 28), 'unicode', u'Input z must be at least a 2x2 array.')
        # Processing the call keyword arguments (line 1613)
        kwargs_44329 = {}
        # Getting the type of 'TypeError' (line 1613)
        TypeError_44327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 1613)
        TypeError_call_result_44330 = invoke(stypy.reporting.localization.Localization(__file__, 1613, 18), TypeError_44327, *[unicode_44328], **kwargs_44329)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1613, 12), TypeError_call_result_44330, 'raise parameter', BaseException)
        # SSA branch for the else part of an if statement (line 1612)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Tuple (line 1615):
        
        # Assigning a Subscript to a Name (line 1615):
        
        # Obtaining the type of the subscript
        int_44331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1615, 12), 'int')
        # Getting the type of 'z' (line 1615)
        z_44332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 21), 'z')
        # Obtaining the member 'shape' of a type (line 1615)
        shape_44333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1615, 21), z_44332, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1615)
        getitem___44334 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1615, 12), shape_44333, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1615)
        subscript_call_result_44335 = invoke(stypy.reporting.localization.Localization(__file__, 1615, 12), getitem___44334, int_44331)
        
        # Assigning a type to the variable 'tuple_var_assignment_39377' (line 1615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 12), 'tuple_var_assignment_39377', subscript_call_result_44335)
        
        # Assigning a Subscript to a Name (line 1615):
        
        # Obtaining the type of the subscript
        int_44336 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1615, 12), 'int')
        # Getting the type of 'z' (line 1615)
        z_44337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 21), 'z')
        # Obtaining the member 'shape' of a type (line 1615)
        shape_44338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1615, 21), z_44337, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1615)
        getitem___44339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1615, 12), shape_44338, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1615)
        subscript_call_result_44340 = invoke(stypy.reporting.localization.Localization(__file__, 1615, 12), getitem___44339, int_44336)
        
        # Assigning a type to the variable 'tuple_var_assignment_39378' (line 1615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 12), 'tuple_var_assignment_39378', subscript_call_result_44340)
        
        # Assigning a Name to a Name (line 1615):
        # Getting the type of 'tuple_var_assignment_39377' (line 1615)
        tuple_var_assignment_39377_44341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 12), 'tuple_var_assignment_39377')
        # Assigning a type to the variable 'Ny' (line 1615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 12), 'Ny', tuple_var_assignment_39377_44341)
        
        # Assigning a Name to a Name (line 1615):
        # Getting the type of 'tuple_var_assignment_39378' (line 1615)
        tuple_var_assignment_39378_44342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 12), 'tuple_var_assignment_39378')
        # Assigning a type to the variable 'Nx' (line 1615)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 16), 'Nx', tuple_var_assignment_39378_44342)
        # SSA join for if statement (line 1612)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1610)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Type idiom detected: calculating its left and rigth part (line 1616)
        # Getting the type of 'self' (line 1616)
        self_44343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 11), 'self')
        # Obtaining the member 'origin' of a type (line 1616)
        origin_44344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1616, 11), self_44343, 'origin')
        # Getting the type of 'None' (line 1616)
        None_44345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 26), 'None')
        
        (may_be_44346, more_types_in_union_44347) = may_be_none(origin_44344, None_44345)

        if may_be_44346:

            if more_types_in_union_44347:
                # Runtime conditional SSA (line 1616)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Type idiom detected: calculating its left and rigth part (line 1617)
            # Getting the type of 'self' (line 1617)
            self_44348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 15), 'self')
            # Obtaining the member 'extent' of a type (line 1617)
            extent_44349 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1617, 15), self_44348, 'extent')
            # Getting the type of 'None' (line 1617)
            None_44350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 30), 'None')
            
            (may_be_44351, more_types_in_union_44352) = may_be_none(extent_44349, None_44350)

            if may_be_44351:

                if more_types_in_union_44352:
                    # Runtime conditional SSA (line 1617)
                    module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
                else:
                    module_type_store = module_type_store

                
                # Call to meshgrid(...): (line 1618)
                # Processing the call arguments (line 1618)
                
                # Call to arange(...): (line 1618)
                # Processing the call arguments (line 1618)
                # Getting the type of 'Nx' (line 1618)
                Nx_44357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 45), 'Nx', False)
                # Processing the call keyword arguments (line 1618)
                kwargs_44358 = {}
                # Getting the type of 'np' (line 1618)
                np_44355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 35), 'np', False)
                # Obtaining the member 'arange' of a type (line 1618)
                arange_44356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1618, 35), np_44355, 'arange')
                # Calling arange(args, kwargs) (line 1618)
                arange_call_result_44359 = invoke(stypy.reporting.localization.Localization(__file__, 1618, 35), arange_44356, *[Nx_44357], **kwargs_44358)
                
                
                # Call to arange(...): (line 1618)
                # Processing the call arguments (line 1618)
                # Getting the type of 'Ny' (line 1618)
                Ny_44362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 60), 'Ny', False)
                # Processing the call keyword arguments (line 1618)
                kwargs_44363 = {}
                # Getting the type of 'np' (line 1618)
                np_44360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 50), 'np', False)
                # Obtaining the member 'arange' of a type (line 1618)
                arange_44361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1618, 50), np_44360, 'arange')
                # Calling arange(args, kwargs) (line 1618)
                arange_call_result_44364 = invoke(stypy.reporting.localization.Localization(__file__, 1618, 50), arange_44361, *[Ny_44362], **kwargs_44363)
                
                # Processing the call keyword arguments (line 1618)
                kwargs_44365 = {}
                # Getting the type of 'np' (line 1618)
                np_44353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 23), 'np', False)
                # Obtaining the member 'meshgrid' of a type (line 1618)
                meshgrid_44354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1618, 23), np_44353, 'meshgrid')
                # Calling meshgrid(args, kwargs) (line 1618)
                meshgrid_call_result_44366 = invoke(stypy.reporting.localization.Localization(__file__, 1618, 23), meshgrid_44354, *[arange_call_result_44359, arange_call_result_44364], **kwargs_44365)
                
                # Assigning a type to the variable 'stypy_return_type' (line 1618)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1618, 16), 'stypy_return_type', meshgrid_call_result_44366)

                if more_types_in_union_44352:
                    # Runtime conditional SSA for else branch (line 1617)
                    module_type_store.open_ssa_branch('idiom else')



            if ((not may_be_44351) or more_types_in_union_44352):
                
                # Assigning a Attribute to a Tuple (line 1620):
                
                # Assigning a Subscript to a Name (line 1620):
                
                # Obtaining the type of the subscript
                int_44367 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1620, 16), 'int')
                # Getting the type of 'self' (line 1620)
                self_44368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 33), 'self')
                # Obtaining the member 'extent' of a type (line 1620)
                extent_44369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1620, 33), self_44368, 'extent')
                # Obtaining the member '__getitem__' of a type (line 1620)
                getitem___44370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1620, 16), extent_44369, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1620)
                subscript_call_result_44371 = invoke(stypy.reporting.localization.Localization(__file__, 1620, 16), getitem___44370, int_44367)
                
                # Assigning a type to the variable 'tuple_var_assignment_39379' (line 1620)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 16), 'tuple_var_assignment_39379', subscript_call_result_44371)
                
                # Assigning a Subscript to a Name (line 1620):
                
                # Obtaining the type of the subscript
                int_44372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1620, 16), 'int')
                # Getting the type of 'self' (line 1620)
                self_44373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 33), 'self')
                # Obtaining the member 'extent' of a type (line 1620)
                extent_44374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1620, 33), self_44373, 'extent')
                # Obtaining the member '__getitem__' of a type (line 1620)
                getitem___44375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1620, 16), extent_44374, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1620)
                subscript_call_result_44376 = invoke(stypy.reporting.localization.Localization(__file__, 1620, 16), getitem___44375, int_44372)
                
                # Assigning a type to the variable 'tuple_var_assignment_39380' (line 1620)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 16), 'tuple_var_assignment_39380', subscript_call_result_44376)
                
                # Assigning a Subscript to a Name (line 1620):
                
                # Obtaining the type of the subscript
                int_44377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1620, 16), 'int')
                # Getting the type of 'self' (line 1620)
                self_44378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 33), 'self')
                # Obtaining the member 'extent' of a type (line 1620)
                extent_44379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1620, 33), self_44378, 'extent')
                # Obtaining the member '__getitem__' of a type (line 1620)
                getitem___44380 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1620, 16), extent_44379, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1620)
                subscript_call_result_44381 = invoke(stypy.reporting.localization.Localization(__file__, 1620, 16), getitem___44380, int_44377)
                
                # Assigning a type to the variable 'tuple_var_assignment_39381' (line 1620)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 16), 'tuple_var_assignment_39381', subscript_call_result_44381)
                
                # Assigning a Subscript to a Name (line 1620):
                
                # Obtaining the type of the subscript
                int_44382 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1620, 16), 'int')
                # Getting the type of 'self' (line 1620)
                self_44383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 33), 'self')
                # Obtaining the member 'extent' of a type (line 1620)
                extent_44384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1620, 33), self_44383, 'extent')
                # Obtaining the member '__getitem__' of a type (line 1620)
                getitem___44385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1620, 16), extent_44384, '__getitem__')
                # Calling the subscript (__getitem__) to obtain the elements type (line 1620)
                subscript_call_result_44386 = invoke(stypy.reporting.localization.Localization(__file__, 1620, 16), getitem___44385, int_44382)
                
                # Assigning a type to the variable 'tuple_var_assignment_39382' (line 1620)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 16), 'tuple_var_assignment_39382', subscript_call_result_44386)
                
                # Assigning a Name to a Name (line 1620):
                # Getting the type of 'tuple_var_assignment_39379' (line 1620)
                tuple_var_assignment_39379_44387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 16), 'tuple_var_assignment_39379')
                # Assigning a type to the variable 'x0' (line 1620)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 16), 'x0', tuple_var_assignment_39379_44387)
                
                # Assigning a Name to a Name (line 1620):
                # Getting the type of 'tuple_var_assignment_39380' (line 1620)
                tuple_var_assignment_39380_44388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 16), 'tuple_var_assignment_39380')
                # Assigning a type to the variable 'x1' (line 1620)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 20), 'x1', tuple_var_assignment_39380_44388)
                
                # Assigning a Name to a Name (line 1620):
                # Getting the type of 'tuple_var_assignment_39381' (line 1620)
                tuple_var_assignment_39381_44389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 16), 'tuple_var_assignment_39381')
                # Assigning a type to the variable 'y0' (line 1620)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 24), 'y0', tuple_var_assignment_39381_44389)
                
                # Assigning a Name to a Name (line 1620):
                # Getting the type of 'tuple_var_assignment_39382' (line 1620)
                tuple_var_assignment_39382_44390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 16), 'tuple_var_assignment_39382')
                # Assigning a type to the variable 'y1' (line 1620)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1620, 28), 'y1', tuple_var_assignment_39382_44390)
                
                # Assigning a Call to a Name (line 1621):
                
                # Assigning a Call to a Name (line 1621):
                
                # Call to linspace(...): (line 1621)
                # Processing the call arguments (line 1621)
                # Getting the type of 'x0' (line 1621)
                x0_44393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 32), 'x0', False)
                # Getting the type of 'x1' (line 1621)
                x1_44394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 36), 'x1', False)
                # Getting the type of 'Nx' (line 1621)
                Nx_44395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 40), 'Nx', False)
                # Processing the call keyword arguments (line 1621)
                kwargs_44396 = {}
                # Getting the type of 'np' (line 1621)
                np_44391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 20), 'np', False)
                # Obtaining the member 'linspace' of a type (line 1621)
                linspace_44392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1621, 20), np_44391, 'linspace')
                # Calling linspace(args, kwargs) (line 1621)
                linspace_call_result_44397 = invoke(stypy.reporting.localization.Localization(__file__, 1621, 20), linspace_44392, *[x0_44393, x1_44394, Nx_44395], **kwargs_44396)
                
                # Assigning a type to the variable 'x' (line 1621)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 16), 'x', linspace_call_result_44397)
                
                # Assigning a Call to a Name (line 1622):
                
                # Assigning a Call to a Name (line 1622):
                
                # Call to linspace(...): (line 1622)
                # Processing the call arguments (line 1622)
                # Getting the type of 'y0' (line 1622)
                y0_44400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 32), 'y0', False)
                # Getting the type of 'y1' (line 1622)
                y1_44401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 36), 'y1', False)
                # Getting the type of 'Ny' (line 1622)
                Ny_44402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 40), 'Ny', False)
                # Processing the call keyword arguments (line 1622)
                kwargs_44403 = {}
                # Getting the type of 'np' (line 1622)
                np_44398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 20), 'np', False)
                # Obtaining the member 'linspace' of a type (line 1622)
                linspace_44399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1622, 20), np_44398, 'linspace')
                # Calling linspace(args, kwargs) (line 1622)
                linspace_call_result_44404 = invoke(stypy.reporting.localization.Localization(__file__, 1622, 20), linspace_44399, *[y0_44400, y1_44401, Ny_44402], **kwargs_44403)
                
                # Assigning a type to the variable 'y' (line 1622)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 16), 'y', linspace_call_result_44404)
                
                # Call to meshgrid(...): (line 1623)
                # Processing the call arguments (line 1623)
                # Getting the type of 'x' (line 1623)
                x_44407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 35), 'x', False)
                # Getting the type of 'y' (line 1623)
                y_44408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 38), 'y', False)
                # Processing the call keyword arguments (line 1623)
                kwargs_44409 = {}
                # Getting the type of 'np' (line 1623)
                np_44405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 23), 'np', False)
                # Obtaining the member 'meshgrid' of a type (line 1623)
                meshgrid_44406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1623, 23), np_44405, 'meshgrid')
                # Calling meshgrid(args, kwargs) (line 1623)
                meshgrid_call_result_44410 = invoke(stypy.reporting.localization.Localization(__file__, 1623, 23), meshgrid_44406, *[x_44407, y_44408], **kwargs_44409)
                
                # Assigning a type to the variable 'stypy_return_type' (line 1623)
                module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1623, 16), 'stypy_return_type', meshgrid_call_result_44410)

                if (may_be_44351 and more_types_in_union_44352):
                    # SSA join for if statement (line 1617)
                    module_type_store = module_type_store.join_ssa_context()


            

            if more_types_in_union_44347:
                # SSA join for if statement (line 1616)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1625)
        # Getting the type of 'self' (line 1625)
        self_44411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 11), 'self')
        # Obtaining the member 'extent' of a type (line 1625)
        extent_44412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1625, 11), self_44411, 'extent')
        # Getting the type of 'None' (line 1625)
        None_44413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 26), 'None')
        
        (may_be_44414, more_types_in_union_44415) = may_be_none(extent_44412, None_44413)

        if may_be_44414:

            if more_types_in_union_44415:
                # Runtime conditional SSA (line 1625)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Tuple to a Tuple (line 1626):
            
            # Assigning a Num to a Name (line 1626):
            int_44416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1626, 30), 'int')
            # Assigning a type to the variable 'tuple_assignment_39383' (line 1626)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 12), 'tuple_assignment_39383', int_44416)
            
            # Assigning a Name to a Name (line 1626):
            # Getting the type of 'Nx' (line 1626)
            Nx_44417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 33), 'Nx')
            # Assigning a type to the variable 'tuple_assignment_39384' (line 1626)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 12), 'tuple_assignment_39384', Nx_44417)
            
            # Assigning a Num to a Name (line 1626):
            int_44418 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1626, 37), 'int')
            # Assigning a type to the variable 'tuple_assignment_39385' (line 1626)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 12), 'tuple_assignment_39385', int_44418)
            
            # Assigning a Name to a Name (line 1626):
            # Getting the type of 'Ny' (line 1626)
            Ny_44419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 40), 'Ny')
            # Assigning a type to the variable 'tuple_assignment_39386' (line 1626)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 12), 'tuple_assignment_39386', Ny_44419)
            
            # Assigning a Name to a Name (line 1626):
            # Getting the type of 'tuple_assignment_39383' (line 1626)
            tuple_assignment_39383_44420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 12), 'tuple_assignment_39383')
            # Assigning a type to the variable 'x0' (line 1626)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 12), 'x0', tuple_assignment_39383_44420)
            
            # Assigning a Name to a Name (line 1626):
            # Getting the type of 'tuple_assignment_39384' (line 1626)
            tuple_assignment_39384_44421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 12), 'tuple_assignment_39384')
            # Assigning a type to the variable 'x1' (line 1626)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 16), 'x1', tuple_assignment_39384_44421)
            
            # Assigning a Name to a Name (line 1626):
            # Getting the type of 'tuple_assignment_39385' (line 1626)
            tuple_assignment_39385_44422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 12), 'tuple_assignment_39385')
            # Assigning a type to the variable 'y0' (line 1626)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 20), 'y0', tuple_assignment_39385_44422)
            
            # Assigning a Name to a Name (line 1626):
            # Getting the type of 'tuple_assignment_39386' (line 1626)
            tuple_assignment_39386_44423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1626, 12), 'tuple_assignment_39386')
            # Assigning a type to the variable 'y1' (line 1626)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1626, 24), 'y1', tuple_assignment_39386_44423)

            if more_types_in_union_44415:
                # Runtime conditional SSA for else branch (line 1625)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_44414) or more_types_in_union_44415):
            
            # Assigning a Attribute to a Tuple (line 1628):
            
            # Assigning a Subscript to a Name (line 1628):
            
            # Obtaining the type of the subscript
            int_44424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, 12), 'int')
            # Getting the type of 'self' (line 1628)
            self_44425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 29), 'self')
            # Obtaining the member 'extent' of a type (line 1628)
            extent_44426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 29), self_44425, 'extent')
            # Obtaining the member '__getitem__' of a type (line 1628)
            getitem___44427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 12), extent_44426, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1628)
            subscript_call_result_44428 = invoke(stypy.reporting.localization.Localization(__file__, 1628, 12), getitem___44427, int_44424)
            
            # Assigning a type to the variable 'tuple_var_assignment_39387' (line 1628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'tuple_var_assignment_39387', subscript_call_result_44428)
            
            # Assigning a Subscript to a Name (line 1628):
            
            # Obtaining the type of the subscript
            int_44429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, 12), 'int')
            # Getting the type of 'self' (line 1628)
            self_44430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 29), 'self')
            # Obtaining the member 'extent' of a type (line 1628)
            extent_44431 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 29), self_44430, 'extent')
            # Obtaining the member '__getitem__' of a type (line 1628)
            getitem___44432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 12), extent_44431, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1628)
            subscript_call_result_44433 = invoke(stypy.reporting.localization.Localization(__file__, 1628, 12), getitem___44432, int_44429)
            
            # Assigning a type to the variable 'tuple_var_assignment_39388' (line 1628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'tuple_var_assignment_39388', subscript_call_result_44433)
            
            # Assigning a Subscript to a Name (line 1628):
            
            # Obtaining the type of the subscript
            int_44434 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, 12), 'int')
            # Getting the type of 'self' (line 1628)
            self_44435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 29), 'self')
            # Obtaining the member 'extent' of a type (line 1628)
            extent_44436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 29), self_44435, 'extent')
            # Obtaining the member '__getitem__' of a type (line 1628)
            getitem___44437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 12), extent_44436, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1628)
            subscript_call_result_44438 = invoke(stypy.reporting.localization.Localization(__file__, 1628, 12), getitem___44437, int_44434)
            
            # Assigning a type to the variable 'tuple_var_assignment_39389' (line 1628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'tuple_var_assignment_39389', subscript_call_result_44438)
            
            # Assigning a Subscript to a Name (line 1628):
            
            # Obtaining the type of the subscript
            int_44439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1628, 12), 'int')
            # Getting the type of 'self' (line 1628)
            self_44440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 29), 'self')
            # Obtaining the member 'extent' of a type (line 1628)
            extent_44441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 29), self_44440, 'extent')
            # Obtaining the member '__getitem__' of a type (line 1628)
            getitem___44442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1628, 12), extent_44441, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1628)
            subscript_call_result_44443 = invoke(stypy.reporting.localization.Localization(__file__, 1628, 12), getitem___44442, int_44439)
            
            # Assigning a type to the variable 'tuple_var_assignment_39390' (line 1628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'tuple_var_assignment_39390', subscript_call_result_44443)
            
            # Assigning a Name to a Name (line 1628):
            # Getting the type of 'tuple_var_assignment_39387' (line 1628)
            tuple_var_assignment_39387_44444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'tuple_var_assignment_39387')
            # Assigning a type to the variable 'x0' (line 1628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'x0', tuple_var_assignment_39387_44444)
            
            # Assigning a Name to a Name (line 1628):
            # Getting the type of 'tuple_var_assignment_39388' (line 1628)
            tuple_var_assignment_39388_44445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'tuple_var_assignment_39388')
            # Assigning a type to the variable 'x1' (line 1628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 16), 'x1', tuple_var_assignment_39388_44445)
            
            # Assigning a Name to a Name (line 1628):
            # Getting the type of 'tuple_var_assignment_39389' (line 1628)
            tuple_var_assignment_39389_44446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'tuple_var_assignment_39389')
            # Assigning a type to the variable 'y0' (line 1628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 20), 'y0', tuple_var_assignment_39389_44446)
            
            # Assigning a Name to a Name (line 1628):
            # Getting the type of 'tuple_var_assignment_39390' (line 1628)
            tuple_var_assignment_39390_44447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 12), 'tuple_var_assignment_39390')
            # Assigning a type to the variable 'y1' (line 1628)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 24), 'y1', tuple_var_assignment_39390_44447)

            if (may_be_44414 and more_types_in_union_44415):
                # SSA join for if statement (line 1625)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a BinOp to a Name (line 1629):
        
        # Assigning a BinOp to a Name (line 1629):
        
        # Call to float(...): (line 1629)
        # Processing the call arguments (line 1629)
        # Getting the type of 'x1' (line 1629)
        x1_44449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 19), 'x1', False)
        # Getting the type of 'x0' (line 1629)
        x0_44450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 24), 'x0', False)
        # Applying the binary operator '-' (line 1629)
        result_sub_44451 = python_operator(stypy.reporting.localization.Localization(__file__, 1629, 19), '-', x1_44449, x0_44450)
        
        # Processing the call keyword arguments (line 1629)
        kwargs_44452 = {}
        # Getting the type of 'float' (line 1629)
        float_44448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 13), 'float', False)
        # Calling float(args, kwargs) (line 1629)
        float_call_result_44453 = invoke(stypy.reporting.localization.Localization(__file__, 1629, 13), float_44448, *[result_sub_44451], **kwargs_44452)
        
        # Getting the type of 'Nx' (line 1629)
        Nx_44454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1629, 30), 'Nx')
        # Applying the binary operator 'div' (line 1629)
        result_div_44455 = python_operator(stypy.reporting.localization.Localization(__file__, 1629, 13), 'div', float_call_result_44453, Nx_44454)
        
        # Assigning a type to the variable 'dx' (line 1629)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1629, 8), 'dx', result_div_44455)
        
        # Assigning a BinOp to a Name (line 1630):
        
        # Assigning a BinOp to a Name (line 1630):
        
        # Call to float(...): (line 1630)
        # Processing the call arguments (line 1630)
        # Getting the type of 'y1' (line 1630)
        y1_44457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 19), 'y1', False)
        # Getting the type of 'y0' (line 1630)
        y0_44458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 24), 'y0', False)
        # Applying the binary operator '-' (line 1630)
        result_sub_44459 = python_operator(stypy.reporting.localization.Localization(__file__, 1630, 19), '-', y1_44457, y0_44458)
        
        # Processing the call keyword arguments (line 1630)
        kwargs_44460 = {}
        # Getting the type of 'float' (line 1630)
        float_44456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 13), 'float', False)
        # Calling float(args, kwargs) (line 1630)
        float_call_result_44461 = invoke(stypy.reporting.localization.Localization(__file__, 1630, 13), float_44456, *[result_sub_44459], **kwargs_44460)
        
        # Getting the type of 'Ny' (line 1630)
        Ny_44462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1630, 30), 'Ny')
        # Applying the binary operator 'div' (line 1630)
        result_div_44463 = python_operator(stypy.reporting.localization.Localization(__file__, 1630, 13), 'div', float_call_result_44461, Ny_44462)
        
        # Assigning a type to the variable 'dy' (line 1630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1630, 8), 'dy', result_div_44463)
        
        # Assigning a BinOp to a Name (line 1631):
        
        # Assigning a BinOp to a Name (line 1631):
        # Getting the type of 'x0' (line 1631)
        x0_44464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 12), 'x0')
        
        # Call to arange(...): (line 1631)
        # Processing the call arguments (line 1631)
        # Getting the type of 'Nx' (line 1631)
        Nx_44467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 28), 'Nx', False)
        # Processing the call keyword arguments (line 1631)
        kwargs_44468 = {}
        # Getting the type of 'np' (line 1631)
        np_44465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 18), 'np', False)
        # Obtaining the member 'arange' of a type (line 1631)
        arange_44466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1631, 18), np_44465, 'arange')
        # Calling arange(args, kwargs) (line 1631)
        arange_call_result_44469 = invoke(stypy.reporting.localization.Localization(__file__, 1631, 18), arange_44466, *[Nx_44467], **kwargs_44468)
        
        float_44470 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1631, 34), 'float')
        # Applying the binary operator '+' (line 1631)
        result_add_44471 = python_operator(stypy.reporting.localization.Localization(__file__, 1631, 18), '+', arange_call_result_44469, float_44470)
        
        # Getting the type of 'dx' (line 1631)
        dx_44472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1631, 41), 'dx')
        # Applying the binary operator '*' (line 1631)
        result_mul_44473 = python_operator(stypy.reporting.localization.Localization(__file__, 1631, 17), '*', result_add_44471, dx_44472)
        
        # Applying the binary operator '+' (line 1631)
        result_add_44474 = python_operator(stypy.reporting.localization.Localization(__file__, 1631, 12), '+', x0_44464, result_mul_44473)
        
        # Assigning a type to the variable 'x' (line 1631)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1631, 8), 'x', result_add_44474)
        
        # Assigning a BinOp to a Name (line 1632):
        
        # Assigning a BinOp to a Name (line 1632):
        # Getting the type of 'y0' (line 1632)
        y0_44475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 12), 'y0')
        
        # Call to arange(...): (line 1632)
        # Processing the call arguments (line 1632)
        # Getting the type of 'Ny' (line 1632)
        Ny_44478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 28), 'Ny', False)
        # Processing the call keyword arguments (line 1632)
        kwargs_44479 = {}
        # Getting the type of 'np' (line 1632)
        np_44476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 18), 'np', False)
        # Obtaining the member 'arange' of a type (line 1632)
        arange_44477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1632, 18), np_44476, 'arange')
        # Calling arange(args, kwargs) (line 1632)
        arange_call_result_44480 = invoke(stypy.reporting.localization.Localization(__file__, 1632, 18), arange_44477, *[Ny_44478], **kwargs_44479)
        
        float_44481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1632, 34), 'float')
        # Applying the binary operator '+' (line 1632)
        result_add_44482 = python_operator(stypy.reporting.localization.Localization(__file__, 1632, 18), '+', arange_call_result_44480, float_44481)
        
        # Getting the type of 'dy' (line 1632)
        dy_44483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1632, 41), 'dy')
        # Applying the binary operator '*' (line 1632)
        result_mul_44484 = python_operator(stypy.reporting.localization.Localization(__file__, 1632, 17), '*', result_add_44482, dy_44483)
        
        # Applying the binary operator '+' (line 1632)
        result_add_44485 = python_operator(stypy.reporting.localization.Localization(__file__, 1632, 12), '+', y0_44475, result_mul_44484)
        
        # Assigning a type to the variable 'y' (line 1632)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1632, 8), 'y', result_add_44485)
        
        
        # Getting the type of 'self' (line 1633)
        self_44486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1633, 11), 'self')
        # Obtaining the member 'origin' of a type (line 1633)
        origin_44487 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1633, 11), self_44486, 'origin')
        unicode_44488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1633, 26), 'unicode', u'upper')
        # Applying the binary operator '==' (line 1633)
        result_eq_44489 = python_operator(stypy.reporting.localization.Localization(__file__, 1633, 11), '==', origin_44487, unicode_44488)
        
        # Testing the type of an if condition (line 1633)
        if_condition_44490 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1633, 8), result_eq_44489)
        # Assigning a type to the variable 'if_condition_44490' (line 1633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1633, 8), 'if_condition_44490', if_condition_44490)
        # SSA begins for if statement (line 1633)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1634):
        
        # Assigning a Subscript to a Name (line 1634):
        
        # Obtaining the type of the subscript
        int_44491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1634, 20), 'int')
        slice_44492 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1634, 16), None, None, int_44491)
        # Getting the type of 'y' (line 1634)
        y_44493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1634, 16), 'y')
        # Obtaining the member '__getitem__' of a type (line 1634)
        getitem___44494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1634, 16), y_44493, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1634)
        subscript_call_result_44495 = invoke(stypy.reporting.localization.Localization(__file__, 1634, 16), getitem___44494, slice_44492)
        
        # Assigning a type to the variable 'y' (line 1634)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1634, 12), 'y', subscript_call_result_44495)
        # SSA join for if statement (line 1633)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to meshgrid(...): (line 1635)
        # Processing the call arguments (line 1635)
        # Getting the type of 'x' (line 1635)
        x_44498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 27), 'x', False)
        # Getting the type of 'y' (line 1635)
        y_44499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 30), 'y', False)
        # Processing the call keyword arguments (line 1635)
        kwargs_44500 = {}
        # Getting the type of 'np' (line 1635)
        np_44496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1635, 15), 'np', False)
        # Obtaining the member 'meshgrid' of a type (line 1635)
        meshgrid_44497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1635, 15), np_44496, 'meshgrid')
        # Calling meshgrid(args, kwargs) (line 1635)
        meshgrid_call_result_44501 = invoke(stypy.reporting.localization.Localization(__file__, 1635, 15), meshgrid_44497, *[x_44498, y_44499], **kwargs_44500)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1635)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1635, 8), 'stypy_return_type', meshgrid_call_result_44501)
        
        # ################# End of '_initialize_x_y(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_initialize_x_y' in the type store
        # Getting the type of 'stypy_return_type' (line 1597)
        stypy_return_type_44502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1597, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_44502)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_initialize_x_y'
        return stypy_return_type_44502

    
    # Assigning a Str to a Name (line 1637):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1404, 0, False)
        # Assigning a type to the variable 'self' (line 1405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1405, 0), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'QuadContourSet.__init__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        pass
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


# Assigning a type to the variable 'QuadContourSet' (line 1404)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1404, 0), 'QuadContourSet', QuadContourSet)

# Assigning a Str to a Name (line 1637):
unicode_44503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1842, (-1)), 'unicode', u"\n        Plot contours.\n\n        :func:`~matplotlib.pyplot.contour` and\n        :func:`~matplotlib.pyplot.contourf` draw contour lines and\n        filled contours, respectively.  Except as noted, function\n        signatures and return values are the same for both versions.\n\n        :func:`~matplotlib.pyplot.contourf` differs from the MATLAB\n        version in that it does not draw the polygon edges.\n        To draw edges, add line contours with\n        calls to :func:`~matplotlib.pyplot.contour`.\n\n\n        Call signatures::\n\n          contour(Z)\n\n        make a contour plot of an array *Z*. The level values are chosen\n        automatically.\n\n        ::\n\n          contour(X,Y,Z)\n\n        *X*, *Y* specify the (x, y) coordinates of the surface\n\n        ::\n\n          contour(Z,N)\n          contour(X,Y,Z,N)\n\n        contour up to *N* automatically-chosen levels.\n\n        ::\n\n          contour(Z,V)\n          contour(X,Y,Z,V)\n\n        draw contour lines at the values specified in sequence *V*,\n        which must be in increasing order.\n\n        ::\n\n          contourf(..., V)\n\n        fill the ``len(V)-1`` regions between the values in *V*,\n        which must be in increasing order.\n\n        ::\n\n          contour(Z, **kwargs)\n\n        Use keyword args to control colors, linewidth, origin, cmap ... see\n        below for more details.\n\n        *X* and *Y* must both be 2-D with the same shape as *Z*, or they\n        must both be 1-D such that ``len(X)`` is the number of columns in\n        *Z* and ``len(Y)`` is the number of rows in *Z*.\n\n        ``C = contour(...)`` returns a\n        :class:`~matplotlib.contour.QuadContourSet` object.\n\n        Optional keyword arguments:\n\n          *corner_mask*: [ *True* | *False* | 'legacy' ]\n            Enable/disable corner masking, which only has an effect if *Z* is\n            a masked array.  If *False*, any quad touching a masked point is\n            masked out.  If *True*, only the triangular corners of quads\n            nearest those points are always masked out, other triangular\n            corners comprising three unmasked points are contoured as usual.\n            If 'legacy', the old contouring algorithm is used, which is\n            equivalent to *False* and is deprecated, only remaining whilst the\n            new algorithm is tested fully.\n\n            If not specified, the default is taken from\n            rcParams['contour.corner_mask'], which is True unless it has\n            been modified.\n\n          *colors*: [ *None* | string | (mpl_colors) ]\n            If *None*, the colormap specified by cmap will be used.\n\n            If a string, like 'r' or 'red', all levels will be plotted in this\n            color.\n\n            If a tuple of matplotlib color args (string, float, rgb, etc),\n            different levels will be plotted in different colors in the order\n            specified.\n\n          *alpha*: float\n            The alpha blending value\n\n          *cmap*: [ *None* | Colormap ]\n            A cm :class:`~matplotlib.colors.Colormap` instance or\n            *None*. If *cmap* is *None* and *colors* is *None*, a\n            default Colormap is used.\n\n          *norm*: [ *None* | Normalize ]\n            A :class:`matplotlib.colors.Normalize` instance for\n            scaling data values to colors. If *norm* is *None* and\n            *colors* is *None*, the default linear scaling is used.\n\n          *vmin*, *vmax*: [ *None* | scalar ]\n            If not *None*, either or both of these values will be\n            supplied to the :class:`matplotlib.colors.Normalize`\n            instance, overriding the default color scaling based on\n            *levels*.\n\n          *levels*: [level0, level1, ..., leveln]\n            A list of floating point numbers indicating the level\n            curves to draw, in increasing order; e.g., to draw just\n            the zero contour pass ``levels=[0]``\n\n          *origin*: [ *None* | 'upper' | 'lower' | 'image' ]\n            If *None*, the first value of *Z* will correspond to the\n            lower left corner, location (0,0). If 'image', the rc\n            value for ``image.origin`` will be used.\n\n            This keyword is not active if *X* and *Y* are specified in\n            the call to contour.\n\n          *extent*: [ *None* | (x0,x1,y0,y1) ]\n\n            If *origin* is not *None*, then *extent* is interpreted as\n            in :func:`matplotlib.pyplot.imshow`: it gives the outer\n            pixel boundaries. In this case, the position of Z[0,0]\n            is the center of the pixel, not a corner. If *origin* is\n            *None*, then (*x0*, *y0*) is the position of Z[0,0], and\n            (*x1*, *y1*) is the position of Z[-1,-1].\n\n            This keyword is not active if *X* and *Y* are specified in\n            the call to contour.\n\n          *locator*: [ *None* | ticker.Locator subclass ]\n            If *locator* is *None*, the default\n            :class:`~matplotlib.ticker.MaxNLocator` is used. The\n            locator is used to determine the contour levels if they\n            are not given explicitly via the *V* argument.\n\n          *extend*: [ 'neither' | 'both' | 'min' | 'max' ]\n            Unless this is 'neither', contour levels are automatically\n            added to one or both ends of the range so that all data\n            are included. These added ranges are then mapped to the\n            special colormap values which default to the ends of the\n            colormap range, but can be set via\n            :meth:`matplotlib.colors.Colormap.set_under` and\n            :meth:`matplotlib.colors.Colormap.set_over` methods.\n\n          *xunits*, *yunits*: [ *None* | registered units ]\n            Override axis units by specifying an instance of a\n            :class:`matplotlib.units.ConversionInterface`.\n\n          *antialiased*: [ *True* | *False* ]\n            enable antialiasing, overriding the defaults.  For\n            filled contours, the default is *True*.  For line contours,\n            it is taken from rcParams['lines.antialiased'].\n\n          *nchunk*: [ 0 | integer ]\n            If 0, no subdivision of the domain.  Specify a positive integer to\n            divide the domain into subdomains of *nchunk* by *nchunk* quads.\n            Chunking reduces the maximum length of polygons generated by the\n            contouring algorithm which reduces the rendering workload passed\n            on to the backend and also requires slightly less RAM.  It can\n            however introduce rendering artifacts at chunk boundaries depending\n            on the backend, the *antialiased* flag and value of *alpha*.\n\n        contour-only keyword arguments:\n\n          *linewidths*: [ *None* | number | tuple of numbers ]\n            If *linewidths* is *None*, the default width in\n            ``lines.linewidth`` in ``matplotlibrc`` is used.\n\n            If a number, all levels will be plotted with this linewidth.\n\n            If a tuple, different levels will be plotted with different\n            linewidths in the order specified.\n\n          *linestyles*: [ *None* | 'solid' | 'dashed' | 'dashdot' | 'dotted' ]\n            If *linestyles* is *None*, the default is 'solid' unless\n            the lines are monochrome.  In that case, negative\n            contours will take their linestyle from the ``matplotlibrc``\n            ``contour.negative_linestyle`` setting.\n\n            *linestyles* can also be an iterable of the above strings\n            specifying a set of linestyles to be used. If this\n            iterable is shorter than the number of contour levels\n            it will be repeated as necessary.\n\n        contourf-only keyword arguments:\n\n          *hatches*:\n            A list of cross hatch patterns to use on the filled areas.\n            If None, no hatching will be added to the contour.\n            Hatching is supported in the PostScript, PDF, SVG and Agg\n            backends only.\n\n\n        Note: contourf fills intervals that are closed at the top; that\n        is, for boundaries *z1* and *z2*, the filled region is::\n\n            z1 < z <= z2\n\n        There is one exception: if the lowest boundary coincides with\n        the minimum value of the *z* array, then that minimum value\n        will be included in the lowest interval.\n        ")
# Getting the type of 'QuadContourSet'
QuadContourSet_44504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'QuadContourSet')
# Setting the type of the member 'contour_doc' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), QuadContourSet_44504, 'contour_doc', unicode_44503)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
