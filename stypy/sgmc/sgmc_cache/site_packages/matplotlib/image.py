
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: '''
2: The image module supports basic image loading, rescaling and display
3: operations.
4: 
5: '''
6: from __future__ import (absolute_import, division, print_function,
7:                         unicode_literals)
8: 
9: import six
10: from six.moves.urllib.parse import urlparse
11: from six.moves.urllib.request import urlopen
12: from io import BytesIO
13: 
14: from math import ceil
15: import os
16: 
17: import numpy as np
18: 
19: from matplotlib import rcParams
20: import matplotlib.artist as martist
21: from matplotlib.artist import allow_rasterization
22: import matplotlib.colors as mcolors
23: import matplotlib.cm as cm
24: import matplotlib.cbook as cbook
25: 
26: # For clarity, names from _image are given explicitly in this module:
27: import matplotlib._image as _image
28: import matplotlib._png as _png
29: 
30: # For user convenience, the names from _image are also imported into
31: # the image namespace:
32: from matplotlib._image import *
33: 
34: from matplotlib.transforms import (Affine2D, BboxBase, Bbox, BboxTransform,
35:                                    IdentityTransform, TransformedBbox)
36: 
37: # map interpolation strings to module constants
38: _interpd_ = {
39:     'none': _image.NEAREST,  # fall back to nearest when not supported
40:     'nearest': _image.NEAREST,
41:     'bilinear': _image.BILINEAR,
42:     'bicubic': _image.BICUBIC,
43:     'spline16': _image.SPLINE16,
44:     'spline36': _image.SPLINE36,
45:     'hanning': _image.HANNING,
46:     'hamming': _image.HAMMING,
47:     'hermite': _image.HERMITE,
48:     'kaiser': _image.KAISER,
49:     'quadric': _image.QUADRIC,
50:     'catrom': _image.CATROM,
51:     'gaussian': _image.GAUSSIAN,
52:     'bessel': _image.BESSEL,
53:     'mitchell': _image.MITCHELL,
54:     'sinc': _image.SINC,
55:     'lanczos': _image.LANCZOS,
56:     'blackman': _image.BLACKMAN,
57: }
58: 
59: interpolations_names = set(_interpd_)
60: 
61: 
62: def composite_images(images, renderer, magnification=1.0):
63:     '''
64:     Composite a number of RGBA images into one.  The images are
65:     composited in the order in which they appear in the `images` list.
66: 
67:     Parameters
68:     ----------
69:     images : list of Images
70:         Each must have a `make_image` method.  For each image,
71:         `can_composite` should return `True`, though this is not
72:         enforced by this function.  Each image must have a purely
73:         affine transformation with no shear.
74: 
75:     renderer : RendererBase instance
76: 
77:     magnification : float
78:         The additional magnification to apply for the renderer in use.
79: 
80:     Returns
81:     -------
82:     tuple : image, offset_x, offset_y
83:         Returns the tuple:
84: 
85:         - image: A numpy array of the same type as the input images.
86: 
87:         - offset_x, offset_y: The offset of the image (left, bottom)
88:           in the output figure.
89:     '''
90:     if len(images) == 0:
91:         return np.empty((0, 0, 4), dtype=np.uint8), 0, 0
92: 
93:     parts = []
94:     bboxes = []
95:     for image in images:
96:         data, x, y, trans = image.make_image(renderer, magnification)
97:         if data is not None:
98:             x *= magnification
99:             y *= magnification
100:             parts.append((data, x, y, image.get_alpha() or 1.0))
101:             bboxes.append(
102:                 Bbox([[x, y], [x + data.shape[1], y + data.shape[0]]]))
103: 
104:     if len(parts) == 0:
105:         return np.empty((0, 0, 4), dtype=np.uint8), 0, 0
106: 
107:     bbox = Bbox.union(bboxes)
108: 
109:     output = np.zeros(
110:         (int(bbox.height), int(bbox.width), 4), dtype=np.uint8)
111: 
112:     for data, x, y, alpha in parts:
113:         trans = Affine2D().translate(x - bbox.x0, y - bbox.y0)
114:         _image.resample(data, output, trans, _image.NEAREST,
115:                         resample=False, alpha=alpha)
116: 
117:     return output, bbox.x0 / magnification, bbox.y0 / magnification
118: 
119: 
120: def _draw_list_compositing_images(
121:         renderer, parent, artists, suppress_composite=None):
122:     '''
123:     Draw a sorted list of artists, compositing images into a single
124:     image where possible.
125: 
126:     For internal matplotlib use only: It is here to reduce duplication
127:     between `Figure.draw` and `Axes.draw`, but otherwise should not be
128:     generally useful.
129:     '''
130:     has_images = any(isinstance(x, _ImageBase) for x in artists)
131: 
132:     # override the renderer default if suppressComposite is not None
133:     not_composite = (suppress_composite if suppress_composite is not None
134:                      else renderer.option_image_nocomposite())
135: 
136:     if not_composite or not has_images:
137:         for a in artists:
138:             a.draw(renderer)
139:     else:
140:         # Composite any adjacent images together
141:         image_group = []
142:         mag = renderer.get_image_magnification()
143: 
144:         def flush_images():
145:             if len(image_group) == 1:
146:                 image_group[0].draw(renderer)
147:             elif len(image_group) > 1:
148:                 data, l, b = composite_images(image_group, renderer, mag)
149:                 if data.size != 0:
150:                     gc = renderer.new_gc()
151:                     gc.set_clip_rectangle(parent.bbox)
152:                     gc.set_clip_path(parent.get_clip_path())
153:                     renderer.draw_image(gc, np.round(l), np.round(b), data)
154:                     gc.restore()
155:             del image_group[:]
156: 
157:         for a in artists:
158:             if isinstance(a, _ImageBase) and a.can_composite():
159:                 image_group.append(a)
160:             else:
161:                 flush_images()
162:                 a.draw(renderer)
163:         flush_images()
164: 
165: 
166: def _rgb_to_rgba(A):
167:     '''
168:     Convert an RGB image to RGBA, as required by the image resample C++
169:     extension.
170:     '''
171:     rgba = np.zeros((A.shape[0], A.shape[1], 4), dtype=A.dtype)
172:     rgba[:, :, :3] = A
173:     if rgba.dtype == np.uint8:
174:         rgba[:, :, 3] = 255
175:     else:
176:         rgba[:, :, 3] = 1.0
177:     return rgba
178: 
179: 
180: class _ImageBase(martist.Artist, cm.ScalarMappable):
181:     zorder = 0
182: 
183:     @cbook.deprecated("2.1")
184:     def _interpd(self):
185:         return _interpd_
186: 
187:     @cbook.deprecated("2.1")
188:     def _interpdr(self):
189:         return {v: k for k, v in six.iteritems(_interpd_)}
190: 
191:     @cbook.deprecated("2.1")
192:     def iterpnames(self):
193:         return interpolations_names
194: 
195:     def __str__(self):
196:         return "AxesImage(%g,%g;%gx%g)" % tuple(self.axes.bbox.bounds)
197: 
198:     def __init__(self, ax,
199:                  cmap=None,
200:                  norm=None,
201:                  interpolation=None,
202:                  origin=None,
203:                  filternorm=1,
204:                  filterrad=4.0,
205:                  resample=False,
206:                  **kwargs
207:                  ):
208:         '''
209:         interpolation and cmap default to their rc settings
210: 
211:         cmap is a colors.Colormap instance
212:         norm is a colors.Normalize instance to map luminance to 0-1
213: 
214:         extent is data axes (left, right, bottom, top) for making image plots
215:         registered with data plots.  Default is to label the pixel
216:         centers with the zero-based row and column indices.
217: 
218:         Additional kwargs are matplotlib.artist properties
219: 
220:         '''
221:         martist.Artist.__init__(self)
222:         cm.ScalarMappable.__init__(self, norm, cmap)
223:         self._mouseover = True
224:         if origin is None:
225:             origin = rcParams['image.origin']
226:         self.origin = origin
227:         self.set_filternorm(filternorm)
228:         self.set_filterrad(filterrad)
229:         self.set_interpolation(interpolation)
230:         self.set_resample(resample)
231:         self.axes = ax
232: 
233:         self._imcache = None
234: 
235:         self.update(kwargs)
236: 
237:     def __getstate__(self):
238:         state = super(_ImageBase, self).__getstate__()
239:         # We can't pickle the C Image cached object.
240:         state['_imcache'] = None
241:         return state
242: 
243:     def get_size(self):
244:         '''Get the numrows, numcols of the input image'''
245:         if self._A is None:
246:             raise RuntimeError('You must first set the image array')
247: 
248:         return self._A.shape[:2]
249: 
250:     def set_alpha(self, alpha):
251:         '''
252:         Set the alpha value used for blending - not supported on
253:         all backends
254: 
255:         ACCEPTS: float
256:         '''
257:         martist.Artist.set_alpha(self, alpha)
258:         self._imcache = None
259: 
260:     def changed(self):
261:         '''
262:         Call this whenever the mappable is changed so observers can
263:         update state
264:         '''
265:         self._imcache = None
266:         self._rgbacache = None
267:         cm.ScalarMappable.changed(self)
268: 
269:     def _make_image(self, A, in_bbox, out_bbox, clip_bbox, magnification=1.0,
270:                     unsampled=False, round_to_pixel_border=True):
271:         '''
272:         Normalize, rescale and color the image `A` from the given
273:         in_bbox (in data space), to the given out_bbox (in pixel
274:         space) clipped to the given clip_bbox (also in pixel space),
275:         and magnified by the magnification factor.
276: 
277:         `A` may be a greyscale image (MxN) with a dtype of `float32`,
278:         `float64`, `uint16` or `uint8`, or an RGBA image (MxNx4) with
279:         a dtype of `float32`, `float64`, or `uint8`.
280: 
281:         If `unsampled` is True, the image will not be scaled, but an
282:         appropriate affine transformation will be returned instead.
283: 
284:         If `round_to_pixel_border` is True, the output image size will
285:         be rounded to the nearest pixel boundary.  This makes the
286:         images align correctly with the axes.  It should not be used
287:         in cases where you want exact scaling, however, such as
288:         FigureImage.
289: 
290:         Returns the resulting (image, x, y, trans), where (x, y) is
291:         the upper left corner of the result in pixel space, and
292:         `trans` is the affine transformation from the image to pixel
293:         space.
294:         '''
295:         if A is None:
296:             raise RuntimeError('You must first set the image '
297:                                'array or the image attribute')
298:         if A.size == 0:
299:             raise RuntimeError("_make_image must get a non-empty image. "
300:                                "Your Artist's draw method must filter before "
301:                                "this method is called.")
302: 
303:         clipped_bbox = Bbox.intersection(out_bbox, clip_bbox)
304: 
305:         if clipped_bbox is None:
306:             return None, 0, 0, None
307: 
308:         out_width_base = clipped_bbox.width * magnification
309:         out_height_base = clipped_bbox.height * magnification
310: 
311:         if out_width_base == 0 or out_height_base == 0:
312:             return None, 0, 0, None
313: 
314:         if self.origin == 'upper':
315:             # Flip the input image using a transform.  This avoids the
316:             # problem with flipping the array, which results in a copy
317:             # when it is converted to contiguous in the C wrapper
318:             t0 = Affine2D().translate(0, -A.shape[0]).scale(1, -1)
319:         else:
320:             t0 = IdentityTransform()
321: 
322:         t0 += (
323:             Affine2D()
324:             .scale(
325:                 in_bbox.width / A.shape[1],
326:                 in_bbox.height / A.shape[0])
327:             .translate(in_bbox.x0, in_bbox.y0)
328:             + self.get_transform())
329: 
330:         t = (t0
331:              + Affine2D().translate(
332:                  -clipped_bbox.x0,
333:                  -clipped_bbox.y0)
334:              .scale(magnification, magnification))
335: 
336:         # So that the image is aligned with the edge of the axes, we want
337:         # to round up the output width to the next integer.  This also
338:         # means scaling the transform just slightly to account for the
339:         # extra subpixel.
340:         if (t.is_affine and round_to_pixel_border and
341:                 (out_width_base % 1.0 != 0.0 or out_height_base % 1.0 != 0.0)):
342:             out_width = int(ceil(out_width_base))
343:             out_height = int(ceil(out_height_base))
344:             extra_width = (out_width - out_width_base) / out_width_base
345:             extra_height = (out_height - out_height_base) / out_height_base
346:             t += Affine2D().scale(1.0 + extra_width, 1.0 + extra_height)
347:         else:
348:             out_width = int(out_width_base)
349:             out_height = int(out_height_base)
350: 
351:         if not unsampled:
352:             if A.ndim not in (2, 3):
353:                 raise ValueError("Invalid dimensions, got {}".format(A.shape))
354: 
355:             if A.ndim == 2:
356:                 # if we are a 2D array, then we are running through the
357:                 # norm + colormap transformation.  However, in general the
358:                 # input data is not going to match the size on the screen so we
359:                 # have to resample to the correct number of pixels
360:                 # need to
361: 
362:                 # TODO slice input array first
363:                 inp_dtype = A.dtype
364:                 if inp_dtype.kind == 'f':
365:                     scaled_dtype = A.dtype
366:                 else:
367:                     scaled_dtype = np.float32
368:                 # old versions of numpy do not work with `np.nammin`
369:                 # and `np.nanmax` as inputs
370:                 a_min = np.ma.min(A).astype(scaled_dtype)
371:                 a_max = np.ma.max(A).astype(scaled_dtype)
372:                 # scale the input data to [.1, .9].  The Agg
373:                 # interpolators clip to [0, 1] internally, use a
374:                 # smaller input scale to identify which of the
375:                 # interpolated points need to be should be flagged as
376:                 # over / under.
377:                 # This may introduce numeric instabilities in very broadly
378:                 # scaled data
379:                 A_scaled = np.empty(A.shape, dtype=scaled_dtype)
380:                 A_scaled[:] = A
381:                 A_scaled -= a_min
382:                 if a_min != a_max:
383:                     A_scaled /= ((a_max - a_min) / 0.8)
384:                 A_scaled += 0.1
385:                 A_resampled = np.zeros((out_height, out_width),
386:                                        dtype=A_scaled.dtype)
387:                 # resample the input data to the correct resolution and shape
388:                 _image.resample(A_scaled, A_resampled,
389:                                 t,
390:                                 _interpd_[self.get_interpolation()],
391:                                 self.get_resample(), 1.0,
392:                                 self.get_filternorm() or 0.0,
393:                                 self.get_filterrad() or 0.0)
394: 
395:                 # we are done with A_scaled now, remove from namespace
396:                 # to be sure!
397:                 del A_scaled
398:                 # un-scale the resampled data to approximately the
399:                 # original range things that interpolated to above /
400:                 # below the original min/max will still be above /
401:                 # below, but possibly clipped in the case of higher order
402:                 # interpolation + drastically changing data.
403:                 A_resampled -= 0.1
404:                 if a_min != a_max:
405:                     A_resampled *= ((a_max - a_min) / 0.8)
406:                 A_resampled += a_min
407:                 # if using NoNorm, cast back to the original datatype
408:                 if isinstance(self.norm, mcolors.NoNorm):
409:                     A_resampled = A_resampled.astype(A.dtype)
410: 
411:                 mask = np.empty(A.shape, dtype=np.float32)
412:                 if A.mask.shape == A.shape:
413:                     # this is the case of a nontrivial mask
414:                     mask[:] = np.where(A.mask, np.float32(np.nan),
415:                                        np.float32(1))
416:                 else:
417:                     mask[:] = 1
418: 
419:                 # we always have to interpolate the mask to account for
420:                 # non-affine transformations
421:                 out_mask = np.zeros((out_height, out_width),
422:                                     dtype=mask.dtype)
423:                 _image.resample(mask, out_mask,
424:                                 t,
425:                                 _interpd_[self.get_interpolation()],
426:                                 True, 1,
427:                                 self.get_filternorm() or 0.0,
428:                                 self.get_filterrad() or 0.0)
429:                 # we are done with the mask, delete from namespace to be sure!
430:                 del mask
431:                 # Agg updates the out_mask in place.  If the pixel has
432:                 # no image data it will not be updated (and still be 0
433:                 # as we initialized it), if input data that would go
434:                 # into that output pixel than it will be `nan`, if all
435:                 # the input data for a pixel is good it will be 1, and
436:                 # if there is _some_ good data in that output pixel it
437:                 # will be between [0, 1] (such as a rotated image).
438: 
439:                 out_alpha = np.array(out_mask)
440:                 out_mask = np.isnan(out_mask)
441:                 out_alpha[out_mask] = 1
442: 
443:                 # mask and run through the norm
444:                 output = self.norm(np.ma.masked_array(A_resampled, out_mask))
445:             else:
446:                 # Always convert to RGBA, even if only RGB input
447:                 if A.shape[2] == 3:
448:                     A = _rgb_to_rgba(A)
449:                 elif A.shape[2] != 4:
450:                     raise ValueError("Invalid dimensions, got %s" % (A.shape,))
451: 
452:                 output = np.zeros((out_height, out_width, 4), dtype=A.dtype)
453: 
454:                 alpha = self.get_alpha()
455:                 if alpha is None:
456:                     alpha = 1.0
457: 
458:                 _image.resample(
459:                     A, output, t, _interpd_[self.get_interpolation()],
460:                     self.get_resample(), alpha,
461:                     self.get_filternorm() or 0.0, self.get_filterrad() or 0.0)
462: 
463:             # at this point output is either a 2D array of normed data
464:             # (of int or float)
465:             # or an RGBA array of re-sampled input
466:             output = self.to_rgba(output, bytes=True, norm=False)
467:             # output is now a correctly sized RGBA array of uint8
468: 
469:             # Apply alpha *after* if the input was greyscale without a mask
470:             if A.ndim == 2:
471:                 alpha = self.get_alpha()
472:                 if alpha is None:
473:                     alpha = 1
474:                 alpha_channel = output[:, :, 3]
475:                 alpha_channel[:] = np.asarray(
476:                     np.asarray(alpha_channel, np.float32) * out_alpha * alpha,
477:                     np.uint8)
478: 
479:         else:
480:             if self._imcache is None:
481:                 self._imcache = self.to_rgba(A, bytes=True, norm=(A.ndim == 2))
482:             output = self._imcache
483: 
484:             # Subset the input image to only the part that will be
485:             # displayed
486:             subset = TransformedBbox(
487:                 clip_bbox, t0.frozen().inverted()).frozen()
488:             output = output[
489:                 int(max(subset.ymin, 0)):
490:                 int(min(subset.ymax + 1, output.shape[0])),
491:                 int(max(subset.xmin, 0)):
492:                 int(min(subset.xmax + 1, output.shape[1]))]
493: 
494:             t = Affine2D().translate(
495:                 int(max(subset.xmin, 0)), int(max(subset.ymin, 0))) + t
496: 
497:         return output, clipped_bbox.x0, clipped_bbox.y0, t
498: 
499:     def make_image(self, renderer, magnification=1.0, unsampled=False):
500:         raise RuntimeError('The make_image method must be overridden.')
501: 
502:     def _draw_unsampled_image(self, renderer, gc):
503:         '''
504:         draw unsampled image. The renderer should support a draw_image method
505:         with scale parameter.
506:         '''
507: 
508:         im, l, b, trans = self.make_image(renderer, unsampled=True)
509: 
510:         if im is None:
511:             return
512: 
513:         trans = Affine2D().scale(im.shape[1], im.shape[0]) + trans
514: 
515:         renderer.draw_image(gc, l, b, im, trans)
516: 
517:     def _check_unsampled_image(self, renderer):
518:         '''
519:         return True if the image is better to be drawn unsampled.
520:         The derived class needs to override it.
521:         '''
522:         return False
523: 
524:     @allow_rasterization
525:     def draw(self, renderer, *args, **kwargs):
526:         # if not visible, declare victory and return
527:         if not self.get_visible():
528:             self.stale = False
529:             return
530: 
531:         # for empty images, there is nothing to draw!
532:         if self.get_array().size == 0:
533:             self.stale = False
534:             return
535: 
536:         # actually render the image.
537:         gc = renderer.new_gc()
538:         self._set_gc_clip(gc)
539:         gc.set_alpha(self.get_alpha())
540:         gc.set_url(self.get_url())
541:         gc.set_gid(self.get_gid())
542: 
543:         if (self._check_unsampled_image(renderer) and
544:                 self.get_transform().is_affine):
545:             self._draw_unsampled_image(renderer, gc)
546:         else:
547:             im, l, b, trans = self.make_image(
548:                 renderer, renderer.get_image_magnification())
549:             if im is not None:
550:                 renderer.draw_image(gc, l, b, im)
551:         gc.restore()
552:         self.stale = False
553: 
554:     def contains(self, mouseevent):
555:         '''
556:         Test whether the mouse event occurred within the image.
557:         '''
558:         if callable(self._contains):
559:             return self._contains(self, mouseevent)
560:         # TODO: make sure this is consistent with patch and patch
561:         # collection on nonlinear transformed coordinates.
562:         # TODO: consider returning image coordinates (shouldn't
563:         # be too difficult given that the image is rectilinear
564:         x, y = mouseevent.xdata, mouseevent.ydata
565:         xmin, xmax, ymin, ymax = self.get_extent()
566:         if xmin > xmax:
567:             xmin, xmax = xmax, xmin
568:         if ymin > ymax:
569:             ymin, ymax = ymax, ymin
570: 
571:         if x is not None and y is not None:
572:             inside = (xmin <= x <= xmax) and (ymin <= y <= ymax)
573:         else:
574:             inside = False
575: 
576:         return inside, {}
577: 
578:     def write_png(self, fname):
579:         '''Write the image to png file with fname'''
580:         im = self.to_rgba(self._A[::-1] if self.origin == 'lower' else self._A,
581:                           bytes=True, norm=True)
582:         _png.write_png(im, fname)
583: 
584:     def set_data(self, A):
585:         '''
586:         Set the image array.
587: 
588:         ACCEPTS: numpy/PIL Image A
589: 
590:         Note that this function does *not* update the normalization used.
591:         '''
592:         # check if data is PIL Image without importing Image
593:         if hasattr(A, 'getpixel'):
594:             self._A = pil_to_array(A)
595:         else:
596:             self._A = cbook.safe_masked_invalid(A, copy=True)
597: 
598:         if (self._A.dtype != np.uint8 and
599:                 not np.can_cast(self._A.dtype, float, "same_kind")):
600:             raise TypeError("Image data cannot be converted to float")
601: 
602:         if not (self._A.ndim == 2
603:                 or self._A.ndim == 3 and self._A.shape[-1] in [3, 4]):
604:             raise TypeError("Invalid dimensions for image data")
605: 
606:         self._imcache = None
607:         self._rgbacache = None
608:         self.stale = True
609: 
610:     def set_array(self, A):
611:         '''
612:         Retained for backwards compatibility - use set_data instead
613: 
614:         ACCEPTS: numpy array A or PIL Image'''
615:         # This also needs to be here to override the inherited
616:         # cm.ScalarMappable.set_array method so it is not invoked
617:         # by mistake.
618: 
619:         self.set_data(A)
620: 
621:     def get_interpolation(self):
622:         '''
623:         Return the interpolation method the image uses when resizing.
624: 
625:         One of 'nearest', 'bilinear', 'bicubic', 'spline16', 'spline36',
626:         'hanning', 'hamming', 'hermite', 'kaiser', 'quadric', 'catrom',
627:         'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos', or 'none'.
628: 
629:         '''
630:         return self._interpolation
631: 
632:     def set_interpolation(self, s):
633:         '''
634:         Set the interpolation method the image uses when resizing.
635: 
636:         if None, use a value from rc setting. If 'none', the image is
637:         shown as is without interpolating. 'none' is only supported in
638:         agg, ps and pdf backends and will fall back to 'nearest' mode
639:         for other backends.
640: 
641:         ACCEPTS: ['nearest' | 'bilinear' | 'bicubic' | 'spline16' |
642:           'spline36' | 'hanning' | 'hamming' | 'hermite' | 'kaiser' |
643:           'quadric' | 'catrom' | 'gaussian' | 'bessel' | 'mitchell' |
644:           'sinc' | 'lanczos' | 'none' |]
645: 
646:         '''
647:         if s is None:
648:             s = rcParams['image.interpolation']
649:         s = s.lower()
650:         if s not in _interpd_:
651:             raise ValueError('Illegal interpolation string')
652:         self._interpolation = s
653:         self.stale = True
654: 
655:     def can_composite(self):
656:         '''
657:         Returns `True` if the image can be composited with its neighbors.
658:         '''
659:         trans = self.get_transform()
660:         return (
661:             self._interpolation != 'none' and
662:             trans.is_affine and
663:             trans.is_separable)
664: 
665:     def set_resample(self, v):
666:         '''
667:         Set whether or not image resampling is used.
668: 
669:         ACCEPTS: True|False
670:         '''
671:         if v is None:
672:             v = rcParams['image.resample']
673:         self._resample = v
674:         self.stale = True
675: 
676:     def get_resample(self):
677:         '''Return the image resample boolean.'''
678:         return self._resample
679: 
680:     def set_filternorm(self, filternorm):
681:         '''
682:         Set whether the resize filter norms the weights -- see
683:         help for imshow
684: 
685:         ACCEPTS: 0 or 1
686:         '''
687:         if filternorm:
688:             self._filternorm = 1
689:         else:
690:             self._filternorm = 0
691: 
692:         self.stale = True
693: 
694:     def get_filternorm(self):
695:         '''Return the filternorm setting.'''
696:         return self._filternorm
697: 
698:     def set_filterrad(self, filterrad):
699:         '''
700:         Set the resize filter radius only applicable to some
701:         interpolation schemes -- see help for imshow
702: 
703:         ACCEPTS: positive float
704:         '''
705:         r = float(filterrad)
706:         if r <= 0:
707:             raise ValueError("The filter radius must be a positive number")
708:         self._filterrad = r
709:         self.stale = True
710: 
711:     def get_filterrad(self):
712:         '''Return the filterrad setting.'''
713:         return self._filterrad
714: 
715: 
716: class AxesImage(_ImageBase):
717:     def __str__(self):
718:         return "AxesImage(%g,%g;%gx%g)" % tuple(self.axes.bbox.bounds)
719: 
720:     def __init__(self, ax,
721:                  cmap=None,
722:                  norm=None,
723:                  interpolation=None,
724:                  origin=None,
725:                  extent=None,
726:                  filternorm=1,
727:                  filterrad=4.0,
728:                  resample=False,
729:                  **kwargs
730:                  ):
731: 
732:         '''
733:         interpolation and cmap default to their rc settings
734: 
735:         cmap is a colors.Colormap instance
736:         norm is a colors.Normalize instance to map luminance to 0-1
737: 
738:         extent is data axes (left, right, bottom, top) for making image plots
739:         registered with data plots.  Default is to label the pixel
740:         centers with the zero-based row and column indices.
741: 
742:         Additional kwargs are matplotlib.artist properties
743: 
744:         '''
745: 
746:         self._extent = extent
747: 
748:         super(AxesImage, self).__init__(
749:             ax,
750:             cmap=cmap,
751:             norm=norm,
752:             interpolation=interpolation,
753:             origin=origin,
754:             filternorm=filternorm,
755:             filterrad=filterrad,
756:             resample=resample,
757:             **kwargs
758:         )
759: 
760:     def get_window_extent(self, renderer=None):
761:         x0, x1, y0, y1 = self._extent
762:         bbox = Bbox.from_extents([x0, y0, x1, y1])
763:         return bbox.transformed(self.axes.transData)
764: 
765:     def make_image(self, renderer, magnification=1.0, unsampled=False):
766:         trans = self.get_transform()
767:         # image is created in the canvas coordinate.
768:         x1, x2, y1, y2 = self.get_extent()
769:         bbox = Bbox(np.array([[x1, y1], [x2, y2]]))
770:         transformed_bbox = TransformedBbox(bbox, trans)
771: 
772:         return self._make_image(
773:             self._A, bbox, transformed_bbox, self.axes.bbox, magnification,
774:             unsampled=unsampled)
775: 
776:     def _check_unsampled_image(self, renderer):
777:         '''
778:         Return whether the image would be better drawn unsampled.
779:         '''
780:         return (self.get_interpolation() == "none"
781:                 and renderer.option_scale_image())
782: 
783:     def set_extent(self, extent):
784:         '''
785:         extent is data axes (left, right, bottom, top) for making image plots
786: 
787:         This updates ax.dataLim, and, if autoscaling, sets viewLim
788:         to tightly fit the image, regardless of dataLim.  Autoscaling
789:         state is not changed, so following this with ax.autoscale_view
790:         will redo the autoscaling in accord with dataLim.
791:         '''
792:         self._extent = xmin, xmax, ymin, ymax = extent
793:         corners = (xmin, ymin), (xmax, ymax)
794:         self.axes.update_datalim(corners)
795:         self.sticky_edges.x[:] = [xmin, xmax]
796:         self.sticky_edges.y[:] = [ymin, ymax]
797:         if self.axes._autoscaleXon:
798:             self.axes.set_xlim((xmin, xmax), auto=None)
799:         if self.axes._autoscaleYon:
800:             self.axes.set_ylim((ymin, ymax), auto=None)
801:         self.stale = True
802: 
803:     def get_extent(self):
804:         '''Get the image extent: left, right, bottom, top'''
805:         if self._extent is not None:
806:             return self._extent
807:         else:
808:             sz = self.get_size()
809:             numrows, numcols = sz
810:             if self.origin == 'upper':
811:                 return (-0.5, numcols-0.5, numrows-0.5, -0.5)
812:             else:
813:                 return (-0.5, numcols-0.5, -0.5, numrows-0.5)
814: 
815:     def get_cursor_data(self, event):
816:         '''Get the cursor data for a given event'''
817:         xmin, xmax, ymin, ymax = self.get_extent()
818:         if self.origin == 'upper':
819:             ymin, ymax = ymax, ymin
820:         arr = self.get_array()
821:         data_extent = Bbox([[ymin, xmin], [ymax, xmax]])
822:         array_extent = Bbox([[0, 0], arr.shape[:2]])
823:         trans = BboxTransform(boxin=data_extent, boxout=array_extent)
824:         y, x = event.ydata, event.xdata
825:         i, j = trans.transform_point([y, x]).astype(int)
826:         # Clip the coordinates at array bounds
827:         if not (0 <= i < arr.shape[0]) or not (0 <= j < arr.shape[1]):
828:             return None
829:         else:
830:             return arr[i, j]
831: 
832: 
833: class NonUniformImage(AxesImage):
834:     def __init__(self, ax, **kwargs):
835:         '''
836:         kwargs are identical to those for AxesImage, except
837:         that 'nearest' and 'bilinear' are the only supported 'interpolation'
838:         options.
839:         '''
840:         interp = kwargs.pop('interpolation', 'nearest')
841:         super(NonUniformImage, self).__init__(ax, **kwargs)
842:         self.set_interpolation(interp)
843: 
844:     def _check_unsampled_image(self, renderer):
845:         '''
846:         return False. Do not use unsampled image.
847:         '''
848:         return False
849: 
850:     def make_image(self, renderer, magnification=1.0, unsampled=False):
851:         if self._A is None:
852:             raise RuntimeError('You must first set the image array')
853: 
854:         if unsampled:
855:             raise ValueError('unsampled not supported on NonUniformImage')
856: 
857:         A = self._A
858:         if A.ndim == 2:
859:             if A.dtype != np.uint8:
860:                 A = self.to_rgba(A, bytes=True)
861:                 self.is_grayscale = self.cmap.is_gray()
862:             else:
863:                 A = np.repeat(A[:, :, np.newaxis], 4, 2)
864:                 A[:, :, 3] = 255
865:                 self.is_grayscale = True
866:         else:
867:             if A.dtype != np.uint8:
868:                 A = (255*A).astype(np.uint8)
869:             if A.shape[2] == 3:
870:                 B = np.zeros(tuple(list(A.shape[0:2]) + [4]), np.uint8)
871:                 B[:, :, 0:3] = A
872:                 B[:, :, 3] = 255
873:                 A = B
874:             self.is_grayscale = False
875: 
876:         x0, y0, v_width, v_height = self.axes.viewLim.bounds
877:         l, b, r, t = self.axes.bbox.extents
878:         width = (np.round(r) + 0.5) - (np.round(l) - 0.5)
879:         height = (np.round(t) + 0.5) - (np.round(b) - 0.5)
880:         width *= magnification
881:         height *= magnification
882:         im = _image.pcolor(self._Ax, self._Ay, A,
883:                            int(height), int(width),
884:                            (x0, x0+v_width, y0, y0+v_height),
885:                            _interpd_[self._interpolation])
886: 
887:         return im, l, b, IdentityTransform()
888: 
889:     def set_data(self, x, y, A):
890:         '''
891:         Set the grid for the pixel centers, and the pixel values.
892: 
893:           *x* and *y* are monotonic 1-D ndarrays of lengths N and M,
894:              respectively, specifying pixel centers
895: 
896:           *A* is an (M,N) ndarray or masked array of values to be
897:             colormapped, or a (M,N,3) RGB array, or a (M,N,4) RGBA
898:             array.
899:         '''
900:         x = np.array(x, np.float32)
901:         y = np.array(y, np.float32)
902:         A = cbook.safe_masked_invalid(A, copy=True)
903:         if not (x.ndim == y.ndim == 1 and A.shape[0:2] == y.shape + x.shape):
904:             raise TypeError("Axes don't match array shape")
905:         if A.ndim not in [2, 3]:
906:             raise TypeError("Can only plot 2D or 3D data")
907:         if A.ndim == 3 and A.shape[2] not in [1, 3, 4]:
908:             raise TypeError("3D arrays must have three (RGB) "
909:                             "or four (RGBA) color components")
910:         if A.ndim == 3 and A.shape[2] == 1:
911:             A.shape = A.shape[0:2]
912:         self._A = A
913:         self._Ax = x
914:         self._Ay = y
915:         self._imcache = None
916: 
917:         self.stale = True
918: 
919:     def set_array(self, *args):
920:         raise NotImplementedError('Method not supported')
921: 
922:     def set_interpolation(self, s):
923:         if s is not None and s not in ('nearest', 'bilinear'):
924:             raise NotImplementedError('Only nearest neighbor and '
925:                                       'bilinear interpolations are supported')
926:         AxesImage.set_interpolation(self, s)
927: 
928:     def get_extent(self):
929:         if self._A is None:
930:             raise RuntimeError('Must set data first')
931:         return self._Ax[0], self._Ax[-1], self._Ay[0], self._Ay[-1]
932: 
933:     def set_filternorm(self, s):
934:         pass
935: 
936:     def set_filterrad(self, s):
937:         pass
938: 
939:     def set_norm(self, norm):
940:         if self._A is not None:
941:             raise RuntimeError('Cannot change colors after loading data')
942:         super(NonUniformImage, self).set_norm(norm)
943: 
944:     def set_cmap(self, cmap):
945:         if self._A is not None:
946:             raise RuntimeError('Cannot change colors after loading data')
947:         super(NonUniformImage, self).set_cmap(cmap)
948: 
949: 
950: class PcolorImage(AxesImage):
951:     '''
952:     Make a pcolor-style plot with an irregular rectangular grid.
953: 
954:     This uses a variation of the original irregular image code,
955:     and it is used by pcolorfast for the corresponding grid type.
956:     '''
957:     def __init__(self, ax,
958:                  x=None,
959:                  y=None,
960:                  A=None,
961:                  cmap=None,
962:                  norm=None,
963:                  **kwargs
964:                  ):
965:         '''
966:         cmap defaults to its rc setting
967: 
968:         cmap is a colors.Colormap instance
969:         norm is a colors.Normalize instance to map luminance to 0-1
970: 
971:         Additional kwargs are matplotlib.artist properties
972:         '''
973:         super(PcolorImage, self).__init__(ax, norm=norm, cmap=cmap)
974:         self.update(kwargs)
975:         if A is not None:
976:             self.set_data(x, y, A)
977: 
978:     def make_image(self, renderer, magnification=1.0, unsampled=False):
979:         if self._A is None:
980:             raise RuntimeError('You must first set the image array')
981:         if unsampled:
982:             raise ValueError('unsampled not supported on PColorImage')
983:         fc = self.axes.patch.get_facecolor()
984:         bg = mcolors.to_rgba(fc, 0)
985:         bg = (np.array(bg)*255).astype(np.uint8)
986:         l, b, r, t = self.axes.bbox.extents
987:         width = (np.round(r) + 0.5) - (np.round(l) - 0.5)
988:         height = (np.round(t) + 0.5) - (np.round(b) - 0.5)
989:         # The extra cast-to-int is only needed for python2
990:         width = int(np.round(width * magnification))
991:         height = int(np.round(height * magnification))
992:         if self._rgbacache is None:
993:             A = self.to_rgba(self._A, bytes=True)
994:             self._rgbacache = A
995:             if self._A.ndim == 2:
996:                 self.is_grayscale = self.cmap.is_gray()
997:         else:
998:             A = self._rgbacache
999:         vl = self.axes.viewLim
1000:         im = _image.pcolor2(self._Ax, self._Ay, A,
1001:                             height,
1002:                             width,
1003:                             (vl.x0, vl.x1, vl.y0, vl.y1),
1004:                             bg)
1005:         return im, l, b, IdentityTransform()
1006: 
1007:     def _check_unsampled_image(self, renderer):
1008:         return False
1009: 
1010:     def set_data(self, x, y, A):
1011:         '''
1012:         Set the grid for the rectangle boundaries, and the data values.
1013: 
1014:           *x* and *y* are monotonic 1-D ndarrays of lengths N+1 and M+1,
1015:              respectively, specifying rectangle boundaries.  If None,
1016:              they will be created as uniform arrays from 0 through N
1017:              and 0 through M, respectively.
1018: 
1019:           *A* is an (M,N) ndarray or masked array of values to be
1020:             colormapped, or a (M,N,3) RGB array, or a (M,N,4) RGBA
1021:             array.
1022: 
1023:         '''
1024:         A = cbook.safe_masked_invalid(A, copy=True)
1025:         if x is None:
1026:             x = np.arange(0, A.shape[1]+1, dtype=np.float64)
1027:         else:
1028:             x = np.array(x, np.float64).ravel()
1029:         if y is None:
1030:             y = np.arange(0, A.shape[0]+1, dtype=np.float64)
1031:         else:
1032:             y = np.array(y, np.float64).ravel()
1033: 
1034:         if A.shape[:2] != (y.size-1, x.size-1):
1035:             raise ValueError(
1036:                 "Axes don't match array shape. Got %s, expected %s." %
1037:                 (A.shape[:2], (y.size - 1, x.size - 1)))
1038:         if A.ndim not in [2, 3]:
1039:             raise ValueError("A must be 2D or 3D")
1040:         if A.ndim == 3 and A.shape[2] == 1:
1041:             A.shape = A.shape[:2]
1042:         self.is_grayscale = False
1043:         if A.ndim == 3:
1044:             if A.shape[2] in [3, 4]:
1045:                 if ((A[:, :, 0] == A[:, :, 1]).all() and
1046:                         (A[:, :, 0] == A[:, :, 2]).all()):
1047:                     self.is_grayscale = True
1048:             else:
1049:                 raise ValueError("3D arrays must have RGB or RGBA as last dim")
1050: 
1051:         # For efficient cursor readout, ensure x and y are increasing.
1052:         if x[-1] < x[0]:
1053:             x = x[::-1]
1054:             A = A[:, ::-1]
1055:         if y[-1] < y[0]:
1056:             y = y[::-1]
1057:             A = A[::-1]
1058: 
1059:         self._A = A
1060:         self._Ax = x
1061:         self._Ay = y
1062:         self._rgbacache = None
1063:         self.stale = True
1064: 
1065:     def set_array(self, *args):
1066:         raise NotImplementedError('Method not supported')
1067: 
1068:     def get_cursor_data(self, event):
1069:         '''Get the cursor data for a given event'''
1070:         x, y = event.xdata, event.ydata
1071:         if (x < self._Ax[0] or x > self._Ax[-1] or
1072:                 y < self._Ay[0] or y > self._Ay[-1]):
1073:             return None
1074:         j = np.searchsorted(self._Ax, x) - 1
1075:         i = np.searchsorted(self._Ay, y) - 1
1076:         try:
1077:             return self._A[i, j]
1078:         except IndexError:
1079:             return None
1080: 
1081: 
1082: class FigureImage(_ImageBase):
1083:     zorder = 0
1084: 
1085:     _interpolation = 'nearest'
1086: 
1087:     def __init__(self, fig,
1088:                  cmap=None,
1089:                  norm=None,
1090:                  offsetx=0,
1091:                  offsety=0,
1092:                  origin=None,
1093:                  **kwargs
1094:                  ):
1095:         '''
1096:         cmap is a colors.Colormap instance
1097:         norm is a colors.Normalize instance to map luminance to 0-1
1098: 
1099:         kwargs are an optional list of Artist keyword args
1100:         '''
1101:         super(FigureImage, self).__init__(
1102:             None,
1103:             norm=norm,
1104:             cmap=cmap,
1105:             origin=origin
1106:         )
1107:         self.figure = fig
1108:         self.ox = offsetx
1109:         self.oy = offsety
1110:         self.update(kwargs)
1111:         self.magnification = 1.0
1112: 
1113:     def get_extent(self):
1114:         '''Get the image extent: left, right, bottom, top'''
1115:         numrows, numcols = self.get_size()
1116:         return (-0.5 + self.ox, numcols-0.5 + self.ox,
1117:                 -0.5 + self.oy, numrows-0.5 + self.oy)
1118: 
1119:     def make_image(self, renderer, magnification=1.0, unsampled=False):
1120:         fac = renderer.dpi/self.figure.dpi
1121:         # fac here is to account for pdf, eps, svg backends where
1122:         # figure.dpi is set to 72.  This means we need to scale the
1123:         # image (using magification) and offset it appropriately.
1124:         bbox = Bbox([[self.ox/fac, self.oy/fac],
1125:                      [(self.ox/fac + self._A.shape[1]),
1126:                      (self.oy/fac + self._A.shape[0])]])
1127:         width, height = self.figure.get_size_inches()
1128:         width *= renderer.dpi
1129:         height *= renderer.dpi
1130:         clip = Bbox([[0, 0], [width, height]])
1131: 
1132:         return self._make_image(
1133:             self._A, bbox, bbox, clip, magnification=magnification / fac,
1134:             unsampled=unsampled, round_to_pixel_border=False)
1135: 
1136:     def set_data(self, A):
1137:         '''Set the image array.'''
1138:         cm.ScalarMappable.set_array(self,
1139:                                     cbook.safe_masked_invalid(A, copy=True))
1140:         self.stale = True
1141: 
1142: 
1143: class BboxImage(_ImageBase):
1144:     '''The Image class whose size is determined by the given bbox.'''
1145:     def __init__(self, bbox,
1146:                  cmap=None,
1147:                  norm=None,
1148:                  interpolation=None,
1149:                  origin=None,
1150:                  filternorm=1,
1151:                  filterrad=4.0,
1152:                  resample=False,
1153:                  interp_at_native=True,
1154:                  **kwargs
1155:                  ):
1156:         '''
1157:         cmap is a colors.Colormap instance
1158:         norm is a colors.Normalize instance to map luminance to 0-1
1159: 
1160:         interp_at_native is a flag that determines whether or not
1161:         interpolation should still be applied when the image is
1162:         displayed at its native resolution.  A common use case for this
1163:         is when displaying an image for annotational purposes; it is
1164:         treated similarly to Photoshop (interpolation is only used when
1165:         displaying the image at non-native resolutions).
1166: 
1167: 
1168:         kwargs are an optional list of Artist keyword args
1169: 
1170:         '''
1171:         super(BboxImage, self).__init__(
1172:             None,
1173:             cmap=cmap,
1174:             norm=norm,
1175:             interpolation=interpolation,
1176:             origin=origin,
1177:             filternorm=filternorm,
1178:             filterrad=filterrad,
1179:             resample=resample,
1180:             **kwargs
1181:         )
1182: 
1183:         self.bbox = bbox
1184:         self.interp_at_native = interp_at_native
1185:         self._transform = IdentityTransform()
1186: 
1187:     def get_transform(self):
1188:         return self._transform
1189: 
1190:     def get_window_extent(self, renderer=None):
1191:         if renderer is None:
1192:             renderer = self.get_figure()._cachedRenderer
1193: 
1194:         if isinstance(self.bbox, BboxBase):
1195:             return self.bbox
1196:         elif callable(self.bbox):
1197:             return self.bbox(renderer)
1198:         else:
1199:             raise ValueError("unknown type of bbox")
1200: 
1201:     def contains(self, mouseevent):
1202:         '''Test whether the mouse event occurred within the image.'''
1203:         if callable(self._contains):
1204:             return self._contains(self, mouseevent)
1205: 
1206:         if not self.get_visible():  # or self.get_figure()._renderer is None:
1207:             return False, {}
1208: 
1209:         x, y = mouseevent.x, mouseevent.y
1210:         inside = self.get_window_extent().contains(x, y)
1211: 
1212:         return inside, {}
1213: 
1214:     def make_image(self, renderer, magnification=1.0, unsampled=False):
1215:         width, height = renderer.get_canvas_width_height()
1216: 
1217:         bbox_in = self.get_window_extent(renderer).frozen()
1218:         bbox_in._points /= [width, height]
1219:         bbox_out = self.get_window_extent(renderer)
1220:         clip = Bbox([[0, 0], [width, height]])
1221:         self._transform = BboxTransform(Bbox([[0, 0], [1, 1]]), clip)
1222: 
1223:         return self._make_image(
1224:             self._A,
1225:             bbox_in, bbox_out, clip, magnification, unsampled=unsampled)
1226: 
1227: 
1228: def imread(fname, format=None):
1229:     '''
1230:     Read an image from a file into an array.
1231: 
1232:     *fname* may be a string path, a valid URL, or a Python
1233:     file-like object.  If using a file object, it must be opened in binary
1234:     mode.
1235: 
1236:     If *format* is provided, will try to read file of that type,
1237:     otherwise the format is deduced from the filename.  If nothing can
1238:     be deduced, PNG is tried.
1239: 
1240:     Return value is a :class:`numpy.array`.  For grayscale images, the
1241:     return array is MxN.  For RGB images, the return value is MxNx3.
1242:     For RGBA images the return value is MxNx4.
1243: 
1244:     matplotlib can only read PNGs natively, but if `PIL
1245:     <http://www.pythonware.com/products/pil/>`_ is installed, it will
1246:     use it to load the image and return an array (if possible) which
1247:     can be used with :func:`~matplotlib.pyplot.imshow`. Note, URL strings
1248:     may not be compatible with PIL. Check the PIL documentation for more
1249:     information.
1250:     '''
1251: 
1252:     def pilread(fname):
1253:         '''try to load the image with PIL or return None'''
1254:         try:
1255:             from PIL import Image
1256:         except ImportError:
1257:             return None
1258:         with Image.open(fname) as image:
1259:             return pil_to_array(image)
1260: 
1261:     handlers = {'png': _png.read_png, }
1262:     if format is None:
1263:         if isinstance(fname, six.string_types):
1264:             parsed = urlparse(fname)
1265:             # If the string is a URL, assume png
1266:             if len(parsed.scheme) > 1:
1267:                 ext = 'png'
1268:             else:
1269:                 basename, ext = os.path.splitext(fname)
1270:                 ext = ext.lower()[1:]
1271:         elif hasattr(fname, 'name'):
1272:             basename, ext = os.path.splitext(fname.name)
1273:             ext = ext.lower()[1:]
1274:         else:
1275:             ext = 'png'
1276:     else:
1277:         ext = format
1278: 
1279:     if ext not in handlers:
1280:         im = pilread(fname)
1281:         if im is None:
1282:             raise ValueError('Only know how to handle extensions: %s; '
1283:                              'with Pillow installed matplotlib can handle '
1284:                              'more images' % list(handlers))
1285:         return im
1286: 
1287:     handler = handlers[ext]
1288: 
1289:     # To handle Unicode filenames, we pass a file object to the PNG
1290:     # reader extension, since Python handles them quite well, but it's
1291:     # tricky in C.
1292:     if isinstance(fname, six.string_types):
1293:         parsed = urlparse(fname)
1294:         # If fname is a URL, download the data
1295:         if len(parsed.scheme) > 1:
1296:             fd = BytesIO(urlopen(fname).read())
1297:             return handler(fd)
1298:         else:
1299:             with open(fname, 'rb') as fd:
1300:                 return handler(fd)
1301:     else:
1302:         return handler(fname)
1303: 
1304: 
1305: def imsave(fname, arr, vmin=None, vmax=None, cmap=None, format=None,
1306:            origin=None, dpi=100):
1307:     '''
1308:     Save an array as in image file.
1309: 
1310:     The output formats available depend on the backend being used.
1311: 
1312:     Parameters
1313:     ----------
1314:     fname : str or file-like
1315:         Path string to a filename, or a Python file-like object.
1316:         If *format* is *None* and *fname* is a string, the output
1317:         format is deduced from the extension of the filename.
1318:     arr : array-like
1319:         An MxN (luminance), MxNx3 (RGB) or MxNx4 (RGBA) array.
1320:     vmin, vmax: [ None | scalar ]
1321:         *vmin* and *vmax* set the color scaling for the image by fixing the
1322:         values that map to the colormap color limits. If either *vmin*
1323:         or *vmax* is None, that limit is determined from the *arr*
1324:         min/max value.
1325:     cmap : matplotlib.colors.Colormap, optional
1326:         For example, ``cm.viridis``.  If ``None``, defaults to the
1327:         ``image.cmap`` rcParam.
1328:     format : str
1329:         One of the file extensions supported by the active backend.  Most
1330:         backends support png, pdf, ps, eps and svg.
1331:     origin : [ 'upper' | 'lower' ]
1332:         Indicates whether the ``(0, 0)`` index of the array is in the
1333:         upper left or lower left corner of the axes.  Defaults to the
1334:         ``image.origin`` rcParam.
1335:     dpi : int
1336:         The DPI to store in the metadata of the file.  This does not affect the
1337:         resolution of the output image.
1338:     '''
1339:     from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas
1340:     from matplotlib.figure import Figure
1341: 
1342:     # Fast path for saving to PNG
1343:     if (format == 'png' or format is None or
1344:             isinstance(fname, six.string_types) and
1345:             fname.lower().endswith('.png')):
1346:         image = AxesImage(None, cmap=cmap, origin=origin)
1347:         image.set_data(arr)
1348:         image.set_clim(vmin, vmax)
1349:         image.write_png(fname)
1350:     else:
1351:         fig = Figure(dpi=dpi, frameon=False)
1352:         FigureCanvas(fig)
1353:         fig.figimage(arr, cmap=cmap, vmin=vmin, vmax=vmax, origin=origin,
1354:                      resize=True)
1355:         fig.savefig(fname, dpi=dpi, format=format, transparent=True)
1356: 
1357: 
1358: def pil_to_array(pilImage):
1359:     '''Load a PIL image and return it as a numpy array.
1360: 
1361:     Grayscale images are returned as ``(M, N)`` arrays.  RGB images are
1362:     returned as ``(M, N, 3)`` arrays.  RGBA images are returned as ``(M, N,
1363:     4)`` arrays.
1364:     '''
1365:     if pilImage.mode in ['RGBA', 'RGBX', 'RGB', 'L']:
1366:         # return MxNx4 RGBA, MxNx3 RBA, or MxN luminance array
1367:         return np.asarray(pilImage)
1368:     elif pilImage.mode.startswith('I;16'):
1369:         # return MxN luminance array of uint16
1370:         raw = pilImage.tobytes('raw', pilImage.mode)
1371:         if pilImage.mode.endswith('B'):
1372:             x = np.fromstring(raw, '>u2')
1373:         else:
1374:             x = np.fromstring(raw, '<u2')
1375:         return x.reshape(pilImage.size[::-1]).astype('=u2')
1376:     else:  # try to convert to an rgba image
1377:         try:
1378:             pilImage = pilImage.convert('RGBA')
1379:         except ValueError:
1380:             raise RuntimeError('Unknown image mode')
1381:         return np.asarray(pilImage)  # return MxNx4 RGBA array
1382: 
1383: 
1384: def thumbnail(infile, thumbfile, scale=0.1, interpolation='bilinear',
1385:               preview=False):
1386:     '''
1387:     make a thumbnail of image in *infile* with output filename
1388:     *thumbfile*.
1389: 
1390:       *infile* the image file -- must be PNG or Pillow-readable if you
1391:          have `Pillow <http://python-pillow.org/>`_ installed
1392: 
1393:       *thumbfile*
1394:         the thumbnail filename
1395: 
1396:       *scale*
1397:         the scale factor for the thumbnail
1398: 
1399:       *interpolation*
1400:         the interpolation scheme used in the resampling
1401: 
1402: 
1403:       *preview*
1404:         if True, the default backend (presumably a user interface
1405:         backend) will be used which will cause a figure to be raised
1406:         if :func:`~matplotlib.pyplot.show` is called.  If it is False,
1407:         a pure image backend will be used depending on the extension,
1408:         'png'->FigureCanvasAgg, 'pdf'->FigureCanvasPdf,
1409:         'svg'->FigureCanvasSVG
1410: 
1411: 
1412:     See examples/misc/image_thumbnail.py.
1413: 
1414:     .. htmlonly::
1415: 
1416:         :ref:`sphx_glr_gallery_misc_image_thumbnail_sgskip.py`
1417: 
1418:     Return value is the figure instance containing the thumbnail
1419: 
1420:     '''
1421:     basedir, basename = os.path.split(infile)
1422:     baseout, extout = os.path.splitext(thumbfile)
1423: 
1424:     im = imread(infile)
1425:     rows, cols, depth = im.shape
1426: 
1427:     # this doesn't really matter, it will cancel in the end, but we
1428:     # need it for the mpl API
1429:     dpi = 100
1430: 
1431:     height = float(rows)/dpi*scale
1432:     width = float(cols)/dpi*scale
1433: 
1434:     extension = extout.lower()
1435: 
1436:     if preview:
1437:         # let the UI backend do everything
1438:         import matplotlib.pyplot as plt
1439:         fig = plt.figure(figsize=(width, height), dpi=dpi)
1440:     else:
1441:         if extension == '.png':
1442:             from matplotlib.backends.backend_agg \
1443:                 import FigureCanvasAgg as FigureCanvas
1444:         elif extension == '.pdf':
1445:             from matplotlib.backends.backend_pdf \
1446:                 import FigureCanvasPdf as FigureCanvas
1447:         elif extension == '.svg':
1448:             from matplotlib.backends.backend_svg \
1449:                 import FigureCanvasSVG as FigureCanvas
1450:         else:
1451:             raise ValueError("Can only handle "
1452:                              "extensions 'png', 'svg' or 'pdf'")
1453: 
1454:         from matplotlib.figure import Figure
1455:         fig = Figure(figsize=(width, height), dpi=dpi)
1456:         FigureCanvas(fig)
1457: 
1458:     ax = fig.add_axes([0, 0, 1, 1], aspect='auto',
1459:                       frameon=False, xticks=[], yticks=[])
1460: 
1461:     basename, ext = os.path.splitext(basename)
1462:     ax.imshow(im, aspect='auto', resample=True, interpolation=interpolation)
1463:     fig.savefig(thumbfile, dpi=dpi)
1464:     return fig
1465: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_62400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 5, (-1)), 'unicode', u'\nThe image module supports basic image loading, rescaling and display\noperations.\n\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 9, 0))

# 'import six' statement (line 9)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62401 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'six')

if (type(import_62401) is not StypyTypeError):

    if (import_62401 != 'pyd_module'):
        __import__(import_62401)
        sys_modules_62402 = sys.modules[import_62401]
        import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'six', sys_modules_62402.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 9, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 9)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 9, 0), 'six', import_62401)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 10, 0))

# 'from six.moves.urllib.parse import urlparse' statement (line 10)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62403 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'six.moves.urllib.parse')

if (type(import_62403) is not StypyTypeError):

    if (import_62403 != 'pyd_module'):
        __import__(import_62403)
        sys_modules_62404 = sys.modules[import_62403]
        import_from_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'six.moves.urllib.parse', sys_modules_62404.module_type_store, module_type_store, ['urlparse'])
        nest_module(stypy.reporting.localization.Localization(__file__, 10, 0), __file__, sys_modules_62404, sys_modules_62404.module_type_store, module_type_store)
    else:
        from six.moves.urllib.parse import urlparse

        import_from_module(stypy.reporting.localization.Localization(__file__, 10, 0), 'six.moves.urllib.parse', None, module_type_store, ['urlparse'], [urlparse])

else:
    # Assigning a type to the variable 'six.moves.urllib.parse' (line 10)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 10, 0), 'six.moves.urllib.parse', import_62403)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 11, 0))

# 'from six.moves.urllib.request import urlopen' statement (line 11)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62405 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'six.moves.urllib.request')

if (type(import_62405) is not StypyTypeError):

    if (import_62405 != 'pyd_module'):
        __import__(import_62405)
        sys_modules_62406 = sys.modules[import_62405]
        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'six.moves.urllib.request', sys_modules_62406.module_type_store, module_type_store, ['urlopen'])
        nest_module(stypy.reporting.localization.Localization(__file__, 11, 0), __file__, sys_modules_62406, sys_modules_62406.module_type_store, module_type_store)
    else:
        from six.moves.urllib.request import urlopen

        import_from_module(stypy.reporting.localization.Localization(__file__, 11, 0), 'six.moves.urllib.request', None, module_type_store, ['urlopen'], [urlopen])

else:
    # Assigning a type to the variable 'six.moves.urllib.request' (line 11)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 11, 0), 'six.moves.urllib.request', import_62405)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 12, 0))

# 'from io import BytesIO' statement (line 12)
try:
    from io import BytesIO

except:
    BytesIO = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 12, 0), 'io', None, module_type_store, ['BytesIO'], [BytesIO])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 14, 0))

# 'from math import ceil' statement (line 14)
try:
    from math import ceil

except:
    ceil = UndefinedType
import_from_module(stypy.reporting.localization.Localization(__file__, 14, 0), 'math', None, module_type_store, ['ceil'], [ceil])

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 15, 0))

# 'import os' statement (line 15)
import os

import_module(stypy.reporting.localization.Localization(__file__, 15, 0), 'os', os, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 17, 0))

# 'import numpy' statement (line 17)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62407 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'numpy')

if (type(import_62407) is not StypyTypeError):

    if (import_62407 != 'pyd_module'):
        __import__(import_62407)
        sys_modules_62408 = sys.modules[import_62407]
        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'np', sys_modules_62408.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 17, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 17)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 17, 0), 'numpy', import_62407)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 19, 0))

# 'from matplotlib import rcParams' statement (line 19)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62409 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib')

if (type(import_62409) is not StypyTypeError):

    if (import_62409 != 'pyd_module'):
        __import__(import_62409)
        sys_modules_62410 = sys.modules[import_62409]
        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib', sys_modules_62410.module_type_store, module_type_store, ['rcParams'])
        nest_module(stypy.reporting.localization.Localization(__file__, 19, 0), __file__, sys_modules_62410, sys_modules_62410.module_type_store, module_type_store)
    else:
        from matplotlib import rcParams

        import_from_module(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib', None, module_type_store, ['rcParams'], [rcParams])

else:
    # Assigning a type to the variable 'matplotlib' (line 19)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 19, 0), 'matplotlib', import_62409)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 20, 0))

# 'import matplotlib.artist' statement (line 20)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62411 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.artist')

if (type(import_62411) is not StypyTypeError):

    if (import_62411 != 'pyd_module'):
        __import__(import_62411)
        sys_modules_62412 = sys.modules[import_62411]
        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'martist', sys_modules_62412.module_type_store, module_type_store)
    else:
        import matplotlib.artist as martist

        import_module(stypy.reporting.localization.Localization(__file__, 20, 0), 'martist', matplotlib.artist, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 20)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 20, 0), 'matplotlib.artist', import_62411)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'from matplotlib.artist import allow_rasterization' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62413 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.artist')

if (type(import_62413) is not StypyTypeError):

    if (import_62413 != 'pyd_module'):
        __import__(import_62413)
        sys_modules_62414 = sys.modules[import_62413]
        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.artist', sys_modules_62414.module_type_store, module_type_store, ['allow_rasterization'])
        nest_module(stypy.reporting.localization.Localization(__file__, 21, 0), __file__, sys_modules_62414, sys_modules_62414.module_type_store, module_type_store)
    else:
        from matplotlib.artist import allow_rasterization

        import_from_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.artist', None, module_type_store, ['allow_rasterization'], [allow_rasterization])

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'matplotlib.artist', import_62413)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 22, 0))

# 'import matplotlib.colors' statement (line 22)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62415 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.colors')

if (type(import_62415) is not StypyTypeError):

    if (import_62415 != 'pyd_module'):
        __import__(import_62415)
        sys_modules_62416 = sys.modules[import_62415]
        import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'mcolors', sys_modules_62416.module_type_store, module_type_store)
    else:
        import matplotlib.colors as mcolors

        import_module(stypy.reporting.localization.Localization(__file__, 22, 0), 'mcolors', matplotlib.colors, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.colors' (line 22)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 22, 0), 'matplotlib.colors', import_62415)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'import matplotlib.cm' statement (line 23)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62417 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.cm')

if (type(import_62417) is not StypyTypeError):

    if (import_62417 != 'pyd_module'):
        __import__(import_62417)
        sys_modules_62418 = sys.modules[import_62417]
        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'cm', sys_modules_62418.module_type_store, module_type_store)
    else:
        import matplotlib.cm as cm

        import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'cm', matplotlib.cm, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cm' (line 23)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 23, 0), 'matplotlib.cm', import_62417)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'import matplotlib.cbook' statement (line 24)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62419 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.cbook')

if (type(import_62419) is not StypyTypeError):

    if (import_62419 != 'pyd_module'):
        __import__(import_62419)
        sys_modules_62420 = sys.modules[import_62419]
        import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'cbook', sys_modules_62420.module_type_store, module_type_store)
    else:
        import matplotlib.cbook as cbook

        import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'cbook', matplotlib.cbook, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 24)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 24, 0), 'matplotlib.cbook', import_62419)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'import matplotlib._image' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62421 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib._image')

if (type(import_62421) is not StypyTypeError):

    if (import_62421 != 'pyd_module'):
        __import__(import_62421)
        sys_modules_62422 = sys.modules[import_62421]
        import_module(stypy.reporting.localization.Localization(__file__, 27, 0), '_image', sys_modules_62422.module_type_store, module_type_store)
    else:
        import matplotlib._image as _image

        import_module(stypy.reporting.localization.Localization(__file__, 27, 0), '_image', matplotlib._image, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib._image' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'matplotlib._image', import_62421)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'import matplotlib._png' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62423 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib._png')

if (type(import_62423) is not StypyTypeError):

    if (import_62423 != 'pyd_module'):
        __import__(import_62423)
        sys_modules_62424 = sys.modules[import_62423]
        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), '_png', sys_modules_62424.module_type_store, module_type_store)
    else:
        import matplotlib._png as _png

        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), '_png', matplotlib._png, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib._png' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib._png', import_62423)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'from matplotlib._image import ' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62425 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib._image')

if (type(import_62425) is not StypyTypeError):

    if (import_62425 != 'pyd_module'):
        __import__(import_62425)
        sys_modules_62426 = sys.modules[import_62425]
        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib._image', sys_modules_62426.module_type_store, module_type_store, ['*'])
        nest_module(stypy.reporting.localization.Localization(__file__, 32, 0), __file__, sys_modules_62426, sys_modules_62426.module_type_store, module_type_store)
    else:
        from matplotlib._image import *

        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib._image', None, module_type_store, ['*'], None)

else:
    # Assigning a type to the variable 'matplotlib._image' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib._image', import_62425)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 34, 0))

# 'from matplotlib.transforms import Affine2D, BboxBase, Bbox, BboxTransform, IdentityTransform, TransformedBbox' statement (line 34)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_62427 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.transforms')

if (type(import_62427) is not StypyTypeError):

    if (import_62427 != 'pyd_module'):
        __import__(import_62427)
        sys_modules_62428 = sys.modules[import_62427]
        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.transforms', sys_modules_62428.module_type_store, module_type_store, ['Affine2D', 'BboxBase', 'Bbox', 'BboxTransform', 'IdentityTransform', 'TransformedBbox'])
        nest_module(stypy.reporting.localization.Localization(__file__, 34, 0), __file__, sys_modules_62428, sys_modules_62428.module_type_store, module_type_store)
    else:
        from matplotlib.transforms import Affine2D, BboxBase, Bbox, BboxTransform, IdentityTransform, TransformedBbox

        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.transforms', None, module_type_store, ['Affine2D', 'BboxBase', 'Bbox', 'BboxTransform', 'IdentityTransform', 'TransformedBbox'], [Affine2D, BboxBase, Bbox, BboxTransform, IdentityTransform, TransformedBbox])

else:
    # Assigning a type to the variable 'matplotlib.transforms' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.transforms', import_62427)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')


# Assigning a Dict to a Name (line 38):

# Assigning a Dict to a Name (line 38):

# Obtaining an instance of the builtin type 'dict' (line 38)
dict_62429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 38, 12), 'dict')
# Adding type elements to the builtin type 'dict' instance (line 38)
# Adding element type (key, value) (line 38)
unicode_62430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 39, 4), 'unicode', u'none')
# Getting the type of '_image' (line 39)
_image_62431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 39, 12), '_image')
# Obtaining the member 'NEAREST' of a type (line 39)
NEAREST_62432 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 39, 12), _image_62431, 'NEAREST')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62430, NEAREST_62432))
# Adding element type (key, value) (line 38)
unicode_62433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 40, 4), 'unicode', u'nearest')
# Getting the type of '_image' (line 40)
_image_62434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 40, 15), '_image')
# Obtaining the member 'NEAREST' of a type (line 40)
NEAREST_62435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 40, 15), _image_62434, 'NEAREST')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62433, NEAREST_62435))
# Adding element type (key, value) (line 38)
unicode_62436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 41, 4), 'unicode', u'bilinear')
# Getting the type of '_image' (line 41)
_image_62437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 41, 16), '_image')
# Obtaining the member 'BILINEAR' of a type (line 41)
BILINEAR_62438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 41, 16), _image_62437, 'BILINEAR')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62436, BILINEAR_62438))
# Adding element type (key, value) (line 38)
unicode_62439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 42, 4), 'unicode', u'bicubic')
# Getting the type of '_image' (line 42)
_image_62440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 42, 15), '_image')
# Obtaining the member 'BICUBIC' of a type (line 42)
BICUBIC_62441 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 42, 15), _image_62440, 'BICUBIC')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62439, BICUBIC_62441))
# Adding element type (key, value) (line 38)
unicode_62442 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 43, 4), 'unicode', u'spline16')
# Getting the type of '_image' (line 43)
_image_62443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 43, 16), '_image')
# Obtaining the member 'SPLINE16' of a type (line 43)
SPLINE16_62444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 43, 16), _image_62443, 'SPLINE16')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62442, SPLINE16_62444))
# Adding element type (key, value) (line 38)
unicode_62445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 44, 4), 'unicode', u'spline36')
# Getting the type of '_image' (line 44)
_image_62446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 44, 16), '_image')
# Obtaining the member 'SPLINE36' of a type (line 44)
SPLINE36_62447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 44, 16), _image_62446, 'SPLINE36')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62445, SPLINE36_62447))
# Adding element type (key, value) (line 38)
unicode_62448 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 45, 4), 'unicode', u'hanning')
# Getting the type of '_image' (line 45)
_image_62449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 45, 15), '_image')
# Obtaining the member 'HANNING' of a type (line 45)
HANNING_62450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 45, 15), _image_62449, 'HANNING')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62448, HANNING_62450))
# Adding element type (key, value) (line 38)
unicode_62451 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 46, 4), 'unicode', u'hamming')
# Getting the type of '_image' (line 46)
_image_62452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 46, 15), '_image')
# Obtaining the member 'HAMMING' of a type (line 46)
HAMMING_62453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 46, 15), _image_62452, 'HAMMING')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62451, HAMMING_62453))
# Adding element type (key, value) (line 38)
unicode_62454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 47, 4), 'unicode', u'hermite')
# Getting the type of '_image' (line 47)
_image_62455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 47, 15), '_image')
# Obtaining the member 'HERMITE' of a type (line 47)
HERMITE_62456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 47, 15), _image_62455, 'HERMITE')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62454, HERMITE_62456))
# Adding element type (key, value) (line 38)
unicode_62457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 48, 4), 'unicode', u'kaiser')
# Getting the type of '_image' (line 48)
_image_62458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 48, 14), '_image')
# Obtaining the member 'KAISER' of a type (line 48)
KAISER_62459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 48, 14), _image_62458, 'KAISER')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62457, KAISER_62459))
# Adding element type (key, value) (line 38)
unicode_62460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 49, 4), 'unicode', u'quadric')
# Getting the type of '_image' (line 49)
_image_62461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 49, 15), '_image')
# Obtaining the member 'QUADRIC' of a type (line 49)
QUADRIC_62462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 49, 15), _image_62461, 'QUADRIC')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62460, QUADRIC_62462))
# Adding element type (key, value) (line 38)
unicode_62463 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 50, 4), 'unicode', u'catrom')
# Getting the type of '_image' (line 50)
_image_62464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 50, 14), '_image')
# Obtaining the member 'CATROM' of a type (line 50)
CATROM_62465 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 50, 14), _image_62464, 'CATROM')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62463, CATROM_62465))
# Adding element type (key, value) (line 38)
unicode_62466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 51, 4), 'unicode', u'gaussian')
# Getting the type of '_image' (line 51)
_image_62467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 51, 16), '_image')
# Obtaining the member 'GAUSSIAN' of a type (line 51)
GAUSSIAN_62468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 51, 16), _image_62467, 'GAUSSIAN')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62466, GAUSSIAN_62468))
# Adding element type (key, value) (line 38)
unicode_62469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 52, 4), 'unicode', u'bessel')
# Getting the type of '_image' (line 52)
_image_62470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 52, 14), '_image')
# Obtaining the member 'BESSEL' of a type (line 52)
BESSEL_62471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 52, 14), _image_62470, 'BESSEL')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62469, BESSEL_62471))
# Adding element type (key, value) (line 38)
unicode_62472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 53, 4), 'unicode', u'mitchell')
# Getting the type of '_image' (line 53)
_image_62473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 53, 16), '_image')
# Obtaining the member 'MITCHELL' of a type (line 53)
MITCHELL_62474 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 53, 16), _image_62473, 'MITCHELL')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62472, MITCHELL_62474))
# Adding element type (key, value) (line 38)
unicode_62475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 54, 4), 'unicode', u'sinc')
# Getting the type of '_image' (line 54)
_image_62476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 54, 12), '_image')
# Obtaining the member 'SINC' of a type (line 54)
SINC_62477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 54, 12), _image_62476, 'SINC')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62475, SINC_62477))
# Adding element type (key, value) (line 38)
unicode_62478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 55, 4), 'unicode', u'lanczos')
# Getting the type of '_image' (line 55)
_image_62479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 55, 15), '_image')
# Obtaining the member 'LANCZOS' of a type (line 55)
LANCZOS_62480 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 55, 15), _image_62479, 'LANCZOS')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62478, LANCZOS_62480))
# Adding element type (key, value) (line 38)
unicode_62481 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 56, 4), 'unicode', u'blackman')
# Getting the type of '_image' (line 56)
_image_62482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 56, 16), '_image')
# Obtaining the member 'BLACKMAN' of a type (line 56)
BLACKMAN_62483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 56, 16), _image_62482, 'BLACKMAN')
set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 38, 12), dict_62429, (unicode_62481, BLACKMAN_62483))

# Assigning a type to the variable '_interpd_' (line 38)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), '_interpd_', dict_62429)

# Assigning a Call to a Name (line 59):

# Assigning a Call to a Name (line 59):

# Call to set(...): (line 59)
# Processing the call arguments (line 59)
# Getting the type of '_interpd_' (line 59)
_interpd__62485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 27), '_interpd_', False)
# Processing the call keyword arguments (line 59)
kwargs_62486 = {}
# Getting the type of 'set' (line 59)
set_62484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 59, 23), 'set', False)
# Calling set(args, kwargs) (line 59)
set_call_result_62487 = invoke(stypy.reporting.localization.Localization(__file__, 59, 23), set_62484, *[_interpd__62485], **kwargs_62486)

# Assigning a type to the variable 'interpolations_names' (line 59)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 59, 0), 'interpolations_names', set_call_result_62487)

@norecursion
def composite_images(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_62488 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 62, 53), 'float')
    defaults = [float_62488]
    # Create a new context for function 'composite_images'
    module_type_store = module_type_store.open_function_context('composite_images', 62, 0, False)
    
    # Passed parameters checking function
    composite_images.stypy_localization = localization
    composite_images.stypy_type_of_self = None
    composite_images.stypy_type_store = module_type_store
    composite_images.stypy_function_name = 'composite_images'
    composite_images.stypy_param_names_list = ['images', 'renderer', 'magnification']
    composite_images.stypy_varargs_param_name = None
    composite_images.stypy_kwargs_param_name = None
    composite_images.stypy_call_defaults = defaults
    composite_images.stypy_call_varargs = varargs
    composite_images.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'composite_images', ['images', 'renderer', 'magnification'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'composite_images', localization, ['images', 'renderer', 'magnification'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'composite_images(...)' code ##################

    unicode_62489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, (-1)), 'unicode', u'\n    Composite a number of RGBA images into one.  The images are\n    composited in the order in which they appear in the `images` list.\n\n    Parameters\n    ----------\n    images : list of Images\n        Each must have a `make_image` method.  For each image,\n        `can_composite` should return `True`, though this is not\n        enforced by this function.  Each image must have a purely\n        affine transformation with no shear.\n\n    renderer : RendererBase instance\n\n    magnification : float\n        The additional magnification to apply for the renderer in use.\n\n    Returns\n    -------\n    tuple : image, offset_x, offset_y\n        Returns the tuple:\n\n        - image: A numpy array of the same type as the input images.\n\n        - offset_x, offset_y: The offset of the image (left, bottom)\n          in the output figure.\n    ')
    
    
    
    # Call to len(...): (line 90)
    # Processing the call arguments (line 90)
    # Getting the type of 'images' (line 90)
    images_62491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 11), 'images', False)
    # Processing the call keyword arguments (line 90)
    kwargs_62492 = {}
    # Getting the type of 'len' (line 90)
    len_62490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 7), 'len', False)
    # Calling len(args, kwargs) (line 90)
    len_call_result_62493 = invoke(stypy.reporting.localization.Localization(__file__, 90, 7), len_62490, *[images_62491], **kwargs_62492)
    
    int_62494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 22), 'int')
    # Applying the binary operator '==' (line 90)
    result_eq_62495 = python_operator(stypy.reporting.localization.Localization(__file__, 90, 7), '==', len_call_result_62493, int_62494)
    
    # Testing the type of an if condition (line 90)
    if_condition_62496 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 90, 4), result_eq_62495)
    # Assigning a type to the variable 'if_condition_62496' (line 90)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 90, 4), 'if_condition_62496', if_condition_62496)
    # SSA begins for if statement (line 90)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 91)
    tuple_62497 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 91)
    # Adding element type (line 91)
    
    # Call to empty(...): (line 91)
    # Processing the call arguments (line 91)
    
    # Obtaining an instance of the builtin type 'tuple' (line 91)
    tuple_62500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 91)
    # Adding element type (line 91)
    int_62501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 25), tuple_62500, int_62501)
    # Adding element type (line 91)
    int_62502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 25), tuple_62500, int_62502)
    # Adding element type (line 91)
    int_62503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 31), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 25), tuple_62500, int_62503)
    
    # Processing the call keyword arguments (line 91)
    # Getting the type of 'np' (line 91)
    np_62504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 41), 'np', False)
    # Obtaining the member 'uint8' of a type (line 91)
    uint8_62505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 41), np_62504, 'uint8')
    keyword_62506 = uint8_62505
    kwargs_62507 = {'dtype': keyword_62506}
    # Getting the type of 'np' (line 91)
    np_62498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 91, 15), 'np', False)
    # Obtaining the member 'empty' of a type (line 91)
    empty_62499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 91, 15), np_62498, 'empty')
    # Calling empty(args, kwargs) (line 91)
    empty_call_result_62508 = invoke(stypy.reporting.localization.Localization(__file__, 91, 15), empty_62499, *[tuple_62500], **kwargs_62507)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 15), tuple_62497, empty_call_result_62508)
    # Adding element type (line 91)
    int_62509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 52), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 15), tuple_62497, int_62509)
    # Adding element type (line 91)
    int_62510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 91, 55), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 91, 15), tuple_62497, int_62510)
    
    # Assigning a type to the variable 'stypy_return_type' (line 91)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 8), 'stypy_return_type', tuple_62497)
    # SSA join for if statement (line 90)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 93):
    
    # Assigning a List to a Name (line 93):
    
    # Obtaining an instance of the builtin type 'list' (line 93)
    list_62511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 93, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 93)
    
    # Assigning a type to the variable 'parts' (line 93)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 93, 4), 'parts', list_62511)
    
    # Assigning a List to a Name (line 94):
    
    # Assigning a List to a Name (line 94):
    
    # Obtaining an instance of the builtin type 'list' (line 94)
    list_62512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 94)
    
    # Assigning a type to the variable 'bboxes' (line 94)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 94, 4), 'bboxes', list_62512)
    
    # Getting the type of 'images' (line 95)
    images_62513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 17), 'images')
    # Testing the type of a for loop iterable (line 95)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 95, 4), images_62513)
    # Getting the type of the for loop variable (line 95)
    for_loop_var_62514 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 95, 4), images_62513)
    # Assigning a type to the variable 'image' (line 95)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 4), 'image', for_loop_var_62514)
    # SSA begins for a for statement (line 95)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Tuple (line 96):
    
    # Assigning a Call to a Name:
    
    # Call to make_image(...): (line 96)
    # Processing the call arguments (line 96)
    # Getting the type of 'renderer' (line 96)
    renderer_62517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 45), 'renderer', False)
    # Getting the type of 'magnification' (line 96)
    magnification_62518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 55), 'magnification', False)
    # Processing the call keyword arguments (line 96)
    kwargs_62519 = {}
    # Getting the type of 'image' (line 96)
    image_62515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 28), 'image', False)
    # Obtaining the member 'make_image' of a type (line 96)
    make_image_62516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 28), image_62515, 'make_image')
    # Calling make_image(args, kwargs) (line 96)
    make_image_call_result_62520 = invoke(stypy.reporting.localization.Localization(__file__, 96, 28), make_image_62516, *[renderer_62517, magnification_62518], **kwargs_62519)
    
    # Assigning a type to the variable 'call_assignment_62300' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'call_assignment_62300', make_image_call_result_62520)
    
    # Assigning a Call to a Name (line 96):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_62523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 8), 'int')
    # Processing the call keyword arguments
    kwargs_62524 = {}
    # Getting the type of 'call_assignment_62300' (line 96)
    call_assignment_62300_62521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'call_assignment_62300', False)
    # Obtaining the member '__getitem__' of a type (line 96)
    getitem___62522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 8), call_assignment_62300_62521, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_62525 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___62522, *[int_62523], **kwargs_62524)
    
    # Assigning a type to the variable 'call_assignment_62301' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'call_assignment_62301', getitem___call_result_62525)
    
    # Assigning a Name to a Name (line 96):
    # Getting the type of 'call_assignment_62301' (line 96)
    call_assignment_62301_62526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'call_assignment_62301')
    # Assigning a type to the variable 'data' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'data', call_assignment_62301_62526)
    
    # Assigning a Call to a Name (line 96):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_62529 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 8), 'int')
    # Processing the call keyword arguments
    kwargs_62530 = {}
    # Getting the type of 'call_assignment_62300' (line 96)
    call_assignment_62300_62527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'call_assignment_62300', False)
    # Obtaining the member '__getitem__' of a type (line 96)
    getitem___62528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 8), call_assignment_62300_62527, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_62531 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___62528, *[int_62529], **kwargs_62530)
    
    # Assigning a type to the variable 'call_assignment_62302' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'call_assignment_62302', getitem___call_result_62531)
    
    # Assigning a Name to a Name (line 96):
    # Getting the type of 'call_assignment_62302' (line 96)
    call_assignment_62302_62532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'call_assignment_62302')
    # Assigning a type to the variable 'x' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 14), 'x', call_assignment_62302_62532)
    
    # Assigning a Call to a Name (line 96):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_62535 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 8), 'int')
    # Processing the call keyword arguments
    kwargs_62536 = {}
    # Getting the type of 'call_assignment_62300' (line 96)
    call_assignment_62300_62533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'call_assignment_62300', False)
    # Obtaining the member '__getitem__' of a type (line 96)
    getitem___62534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 8), call_assignment_62300_62533, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_62537 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___62534, *[int_62535], **kwargs_62536)
    
    # Assigning a type to the variable 'call_assignment_62303' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'call_assignment_62303', getitem___call_result_62537)
    
    # Assigning a Name to a Name (line 96):
    # Getting the type of 'call_assignment_62303' (line 96)
    call_assignment_62303_62538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'call_assignment_62303')
    # Assigning a type to the variable 'y' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 17), 'y', call_assignment_62303_62538)
    
    # Assigning a Call to a Name (line 96):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_62541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 8), 'int')
    # Processing the call keyword arguments
    kwargs_62542 = {}
    # Getting the type of 'call_assignment_62300' (line 96)
    call_assignment_62300_62539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'call_assignment_62300', False)
    # Obtaining the member '__getitem__' of a type (line 96)
    getitem___62540 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 96, 8), call_assignment_62300_62539, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_62543 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___62540, *[int_62541], **kwargs_62542)
    
    # Assigning a type to the variable 'call_assignment_62304' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'call_assignment_62304', getitem___call_result_62543)
    
    # Assigning a Name to a Name (line 96):
    # Getting the type of 'call_assignment_62304' (line 96)
    call_assignment_62304_62544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 8), 'call_assignment_62304')
    # Assigning a type to the variable 'trans' (line 96)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 96, 20), 'trans', call_assignment_62304_62544)
    
    # Type idiom detected: calculating its left and rigth part (line 97)
    # Getting the type of 'data' (line 97)
    data_62545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 8), 'data')
    # Getting the type of 'None' (line 97)
    None_62546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 23), 'None')
    
    (may_be_62547, more_types_in_union_62548) = may_not_be_none(data_62545, None_62546)

    if may_be_62547:

        if more_types_in_union_62548:
            # Runtime conditional SSA (line 97)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Getting the type of 'x' (line 98)
        x_62549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 12), 'x')
        # Getting the type of 'magnification' (line 98)
        magnification_62550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 98, 17), 'magnification')
        # Applying the binary operator '*=' (line 98)
        result_imul_62551 = python_operator(stypy.reporting.localization.Localization(__file__, 98, 12), '*=', x_62549, magnification_62550)
        # Assigning a type to the variable 'x' (line 98)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 12), 'x', result_imul_62551)
        
        
        # Getting the type of 'y' (line 99)
        y_62552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 12), 'y')
        # Getting the type of 'magnification' (line 99)
        magnification_62553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 17), 'magnification')
        # Applying the binary operator '*=' (line 99)
        result_imul_62554 = python_operator(stypy.reporting.localization.Localization(__file__, 99, 12), '*=', y_62552, magnification_62553)
        # Assigning a type to the variable 'y' (line 99)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 12), 'y', result_imul_62554)
        
        
        # Call to append(...): (line 100)
        # Processing the call arguments (line 100)
        
        # Obtaining an instance of the builtin type 'tuple' (line 100)
        tuple_62557 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 26), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 100)
        # Adding element type (line 100)
        # Getting the type of 'data' (line 100)
        data_62558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 26), 'data', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 100, 26), tuple_62557, data_62558)
        # Adding element type (line 100)
        # Getting the type of 'x' (line 100)
        x_62559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 32), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 100, 26), tuple_62557, x_62559)
        # Adding element type (line 100)
        # Getting the type of 'y' (line 100)
        y_62560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 35), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 100, 26), tuple_62557, y_62560)
        # Adding element type (line 100)
        
        # Evaluating a boolean operation
        
        # Call to get_alpha(...): (line 100)
        # Processing the call keyword arguments (line 100)
        kwargs_62563 = {}
        # Getting the type of 'image' (line 100)
        image_62561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 38), 'image', False)
        # Obtaining the member 'get_alpha' of a type (line 100)
        get_alpha_62562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 100, 38), image_62561, 'get_alpha')
        # Calling get_alpha(args, kwargs) (line 100)
        get_alpha_call_result_62564 = invoke(stypy.reporting.localization.Localization(__file__, 100, 38), get_alpha_62562, *[], **kwargs_62563)
        
        float_62565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 100, 59), 'float')
        # Applying the binary operator 'or' (line 100)
        result_or_keyword_62566 = python_operator(stypy.reporting.localization.Localization(__file__, 100, 38), 'or', get_alpha_call_result_62564, float_62565)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 100, 26), tuple_62557, result_or_keyword_62566)
        
        # Processing the call keyword arguments (line 100)
        kwargs_62567 = {}
        # Getting the type of 'parts' (line 100)
        parts_62555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 100, 12), 'parts', False)
        # Obtaining the member 'append' of a type (line 100)
        append_62556 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 100, 12), parts_62555, 'append')
        # Calling append(args, kwargs) (line 100)
        append_call_result_62568 = invoke(stypy.reporting.localization.Localization(__file__, 100, 12), append_62556, *[tuple_62557], **kwargs_62567)
        
        
        # Call to append(...): (line 101)
        # Processing the call arguments (line 101)
        
        # Call to Bbox(...): (line 102)
        # Processing the call arguments (line 102)
        
        # Obtaining an instance of the builtin type 'list' (line 102)
        list_62572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 102)
        # Adding element type (line 102)
        
        # Obtaining an instance of the builtin type 'list' (line 102)
        list_62573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 22), 'list')
        # Adding type elements to the builtin type 'list' instance (line 102)
        # Adding element type (line 102)
        # Getting the type of 'x' (line 102)
        x_62574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 23), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 102, 22), list_62573, x_62574)
        # Adding element type (line 102)
        # Getting the type of 'y' (line 102)
        y_62575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 26), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 102, 22), list_62573, y_62575)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 102, 21), list_62572, list_62573)
        # Adding element type (line 102)
        
        # Obtaining an instance of the builtin type 'list' (line 102)
        list_62576 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 102)
        # Adding element type (line 102)
        # Getting the type of 'x' (line 102)
        x_62577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 31), 'x', False)
        
        # Obtaining the type of the subscript
        int_62578 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 46), 'int')
        # Getting the type of 'data' (line 102)
        data_62579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 35), 'data', False)
        # Obtaining the member 'shape' of a type (line 102)
        shape_62580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 35), data_62579, 'shape')
        # Obtaining the member '__getitem__' of a type (line 102)
        getitem___62581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 35), shape_62580, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 102)
        subscript_call_result_62582 = invoke(stypy.reporting.localization.Localization(__file__, 102, 35), getitem___62581, int_62578)
        
        # Applying the binary operator '+' (line 102)
        result_add_62583 = python_operator(stypy.reporting.localization.Localization(__file__, 102, 31), '+', x_62577, subscript_call_result_62582)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 102, 30), list_62576, result_add_62583)
        # Adding element type (line 102)
        # Getting the type of 'y' (line 102)
        y_62584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 50), 'y', False)
        
        # Obtaining the type of the subscript
        int_62585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 102, 65), 'int')
        # Getting the type of 'data' (line 102)
        data_62586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 54), 'data', False)
        # Obtaining the member 'shape' of a type (line 102)
        shape_62587 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 54), data_62586, 'shape')
        # Obtaining the member '__getitem__' of a type (line 102)
        getitem___62588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 54), shape_62587, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 102)
        subscript_call_result_62589 = invoke(stypy.reporting.localization.Localization(__file__, 102, 54), getitem___62588, int_62585)
        
        # Applying the binary operator '+' (line 102)
        result_add_62590 = python_operator(stypy.reporting.localization.Localization(__file__, 102, 50), '+', y_62584, subscript_call_result_62589)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 102, 30), list_62576, result_add_62590)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 102, 21), list_62572, list_62576)
        
        # Processing the call keyword arguments (line 102)
        kwargs_62591 = {}
        # Getting the type of 'Bbox' (line 102)
        Bbox_62571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 16), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 102)
        Bbox_call_result_62592 = invoke(stypy.reporting.localization.Localization(__file__, 102, 16), Bbox_62571, *[list_62572], **kwargs_62591)
        
        # Processing the call keyword arguments (line 101)
        kwargs_62593 = {}
        # Getting the type of 'bboxes' (line 101)
        bboxes_62569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 101, 12), 'bboxes', False)
        # Obtaining the member 'append' of a type (line 101)
        append_62570 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 101, 12), bboxes_62569, 'append')
        # Calling append(args, kwargs) (line 101)
        append_call_result_62594 = invoke(stypy.reporting.localization.Localization(__file__, 101, 12), append_62570, *[Bbox_call_result_62592], **kwargs_62593)
        

        if more_types_in_union_62548:
            # SSA join for if statement (line 97)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 104)
    # Processing the call arguments (line 104)
    # Getting the type of 'parts' (line 104)
    parts_62596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 11), 'parts', False)
    # Processing the call keyword arguments (line 104)
    kwargs_62597 = {}
    # Getting the type of 'len' (line 104)
    len_62595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 7), 'len', False)
    # Calling len(args, kwargs) (line 104)
    len_call_result_62598 = invoke(stypy.reporting.localization.Localization(__file__, 104, 7), len_62595, *[parts_62596], **kwargs_62597)
    
    int_62599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 21), 'int')
    # Applying the binary operator '==' (line 104)
    result_eq_62600 = python_operator(stypy.reporting.localization.Localization(__file__, 104, 7), '==', len_call_result_62598, int_62599)
    
    # Testing the type of an if condition (line 104)
    if_condition_62601 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 104, 4), result_eq_62600)
    # Assigning a type to the variable 'if_condition_62601' (line 104)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 104, 4), 'if_condition_62601', if_condition_62601)
    # SSA begins for if statement (line 104)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Obtaining an instance of the builtin type 'tuple' (line 105)
    tuple_62602 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 15), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 105)
    # Adding element type (line 105)
    
    # Call to empty(...): (line 105)
    # Processing the call arguments (line 105)
    
    # Obtaining an instance of the builtin type 'tuple' (line 105)
    tuple_62605 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 25), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 105)
    # Adding element type (line 105)
    int_62606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 25), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 25), tuple_62605, int_62606)
    # Adding element type (line 105)
    int_62607 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 28), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 25), tuple_62605, int_62607)
    # Adding element type (line 105)
    int_62608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 31), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 25), tuple_62605, int_62608)
    
    # Processing the call keyword arguments (line 105)
    # Getting the type of 'np' (line 105)
    np_62609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 41), 'np', False)
    # Obtaining the member 'uint8' of a type (line 105)
    uint8_62610 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 41), np_62609, 'uint8')
    keyword_62611 = uint8_62610
    kwargs_62612 = {'dtype': keyword_62611}
    # Getting the type of 'np' (line 105)
    np_62603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 15), 'np', False)
    # Obtaining the member 'empty' of a type (line 105)
    empty_62604 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 15), np_62603, 'empty')
    # Calling empty(args, kwargs) (line 105)
    empty_call_result_62613 = invoke(stypy.reporting.localization.Localization(__file__, 105, 15), empty_62604, *[tuple_62605], **kwargs_62612)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 15), tuple_62602, empty_call_result_62613)
    # Adding element type (line 105)
    int_62614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 52), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 15), tuple_62602, int_62614)
    # Adding element type (line 105)
    int_62615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 55), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 105, 15), tuple_62602, int_62615)
    
    # Assigning a type to the variable 'stypy_return_type' (line 105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 8), 'stypy_return_type', tuple_62602)
    # SSA join for if statement (line 104)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 107):
    
    # Assigning a Call to a Name (line 107):
    
    # Call to union(...): (line 107)
    # Processing the call arguments (line 107)
    # Getting the type of 'bboxes' (line 107)
    bboxes_62618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 22), 'bboxes', False)
    # Processing the call keyword arguments (line 107)
    kwargs_62619 = {}
    # Getting the type of 'Bbox' (line 107)
    Bbox_62616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 107, 11), 'Bbox', False)
    # Obtaining the member 'union' of a type (line 107)
    union_62617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 107, 11), Bbox_62616, 'union')
    # Calling union(args, kwargs) (line 107)
    union_call_result_62620 = invoke(stypy.reporting.localization.Localization(__file__, 107, 11), union_62617, *[bboxes_62618], **kwargs_62619)
    
    # Assigning a type to the variable 'bbox' (line 107)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 107, 4), 'bbox', union_call_result_62620)
    
    # Assigning a Call to a Name (line 109):
    
    # Assigning a Call to a Name (line 109):
    
    # Call to zeros(...): (line 109)
    # Processing the call arguments (line 109)
    
    # Obtaining an instance of the builtin type 'tuple' (line 110)
    tuple_62623 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 9), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 110)
    # Adding element type (line 110)
    
    # Call to int(...): (line 110)
    # Processing the call arguments (line 110)
    # Getting the type of 'bbox' (line 110)
    bbox_62625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 13), 'bbox', False)
    # Obtaining the member 'height' of a type (line 110)
    height_62626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 110, 13), bbox_62625, 'height')
    # Processing the call keyword arguments (line 110)
    kwargs_62627 = {}
    # Getting the type of 'int' (line 110)
    int_62624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 9), 'int', False)
    # Calling int(args, kwargs) (line 110)
    int_call_result_62628 = invoke(stypy.reporting.localization.Localization(__file__, 110, 9), int_62624, *[height_62626], **kwargs_62627)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 110, 9), tuple_62623, int_call_result_62628)
    # Adding element type (line 110)
    
    # Call to int(...): (line 110)
    # Processing the call arguments (line 110)
    # Getting the type of 'bbox' (line 110)
    bbox_62630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 31), 'bbox', False)
    # Obtaining the member 'width' of a type (line 110)
    width_62631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 110, 31), bbox_62630, 'width')
    # Processing the call keyword arguments (line 110)
    kwargs_62632 = {}
    # Getting the type of 'int' (line 110)
    int_62629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 27), 'int', False)
    # Calling int(args, kwargs) (line 110)
    int_call_result_62633 = invoke(stypy.reporting.localization.Localization(__file__, 110, 27), int_62629, *[width_62631], **kwargs_62632)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 110, 9), tuple_62623, int_call_result_62633)
    # Adding element type (line 110)
    int_62634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 110, 44), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 110, 9), tuple_62623, int_62634)
    
    # Processing the call keyword arguments (line 109)
    # Getting the type of 'np' (line 110)
    np_62635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 110, 54), 'np', False)
    # Obtaining the member 'uint8' of a type (line 110)
    uint8_62636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 110, 54), np_62635, 'uint8')
    keyword_62637 = uint8_62636
    kwargs_62638 = {'dtype': keyword_62637}
    # Getting the type of 'np' (line 109)
    np_62621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 13), 'np', False)
    # Obtaining the member 'zeros' of a type (line 109)
    zeros_62622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 109, 13), np_62621, 'zeros')
    # Calling zeros(args, kwargs) (line 109)
    zeros_call_result_62639 = invoke(stypy.reporting.localization.Localization(__file__, 109, 13), zeros_62622, *[tuple_62623], **kwargs_62638)
    
    # Assigning a type to the variable 'output' (line 109)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 109, 4), 'output', zeros_call_result_62639)
    
    # Getting the type of 'parts' (line 112)
    parts_62640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 112, 29), 'parts')
    # Testing the type of a for loop iterable (line 112)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 112, 4), parts_62640)
    # Getting the type of the for loop variable (line 112)
    for_loop_var_62641 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 112, 4), parts_62640)
    # Assigning a type to the variable 'data' (line 112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 4), 'data', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 112, 4), for_loop_var_62641))
    # Assigning a type to the variable 'x' (line 112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 4), 'x', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 112, 4), for_loop_var_62641))
    # Assigning a type to the variable 'y' (line 112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 4), 'y', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 112, 4), for_loop_var_62641))
    # Assigning a type to the variable 'alpha' (line 112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 112, 4), 'alpha', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 112, 4), for_loop_var_62641))
    # SSA begins for a for statement (line 112)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Call to a Name (line 113):
    
    # Assigning a Call to a Name (line 113):
    
    # Call to translate(...): (line 113)
    # Processing the call arguments (line 113)
    # Getting the type of 'x' (line 113)
    x_62646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 37), 'x', False)
    # Getting the type of 'bbox' (line 113)
    bbox_62647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 41), 'bbox', False)
    # Obtaining the member 'x0' of a type (line 113)
    x0_62648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 41), bbox_62647, 'x0')
    # Applying the binary operator '-' (line 113)
    result_sub_62649 = python_operator(stypy.reporting.localization.Localization(__file__, 113, 37), '-', x_62646, x0_62648)
    
    # Getting the type of 'y' (line 113)
    y_62650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 50), 'y', False)
    # Getting the type of 'bbox' (line 113)
    bbox_62651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 54), 'bbox', False)
    # Obtaining the member 'y0' of a type (line 113)
    y0_62652 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 54), bbox_62651, 'y0')
    # Applying the binary operator '-' (line 113)
    result_sub_62653 = python_operator(stypy.reporting.localization.Localization(__file__, 113, 50), '-', y_62650, y0_62652)
    
    # Processing the call keyword arguments (line 113)
    kwargs_62654 = {}
    
    # Call to Affine2D(...): (line 113)
    # Processing the call keyword arguments (line 113)
    kwargs_62643 = {}
    # Getting the type of 'Affine2D' (line 113)
    Affine2D_62642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 16), 'Affine2D', False)
    # Calling Affine2D(args, kwargs) (line 113)
    Affine2D_call_result_62644 = invoke(stypy.reporting.localization.Localization(__file__, 113, 16), Affine2D_62642, *[], **kwargs_62643)
    
    # Obtaining the member 'translate' of a type (line 113)
    translate_62645 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 16), Affine2D_call_result_62644, 'translate')
    # Calling translate(args, kwargs) (line 113)
    translate_call_result_62655 = invoke(stypy.reporting.localization.Localization(__file__, 113, 16), translate_62645, *[result_sub_62649, result_sub_62653], **kwargs_62654)
    
    # Assigning a type to the variable 'trans' (line 113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 8), 'trans', translate_call_result_62655)
    
    # Call to resample(...): (line 114)
    # Processing the call arguments (line 114)
    # Getting the type of 'data' (line 114)
    data_62658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 24), 'data', False)
    # Getting the type of 'output' (line 114)
    output_62659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 30), 'output', False)
    # Getting the type of 'trans' (line 114)
    trans_62660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 38), 'trans', False)
    # Getting the type of '_image' (line 114)
    _image_62661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 45), '_image', False)
    # Obtaining the member 'NEAREST' of a type (line 114)
    NEAREST_62662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 114, 45), _image_62661, 'NEAREST')
    # Processing the call keyword arguments (line 114)
    # Getting the type of 'False' (line 115)
    False_62663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 33), 'False', False)
    keyword_62664 = False_62663
    # Getting the type of 'alpha' (line 115)
    alpha_62665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 46), 'alpha', False)
    keyword_62666 = alpha_62665
    kwargs_62667 = {'resample': keyword_62664, 'alpha': keyword_62666}
    # Getting the type of '_image' (line 114)
    _image_62656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 114, 8), '_image', False)
    # Obtaining the member 'resample' of a type (line 114)
    resample_62657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 114, 8), _image_62656, 'resample')
    # Calling resample(args, kwargs) (line 114)
    resample_call_result_62668 = invoke(stypy.reporting.localization.Localization(__file__, 114, 8), resample_62657, *[data_62658, output_62659, trans_62660, NEAREST_62662], **kwargs_62667)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 117)
    tuple_62669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 117, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 117)
    # Adding element type (line 117)
    # Getting the type of 'output' (line 117)
    output_62670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 11), 'output')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 117, 11), tuple_62669, output_62670)
    # Adding element type (line 117)
    # Getting the type of 'bbox' (line 117)
    bbox_62671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 19), 'bbox')
    # Obtaining the member 'x0' of a type (line 117)
    x0_62672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 117, 19), bbox_62671, 'x0')
    # Getting the type of 'magnification' (line 117)
    magnification_62673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 29), 'magnification')
    # Applying the binary operator 'div' (line 117)
    result_div_62674 = python_operator(stypy.reporting.localization.Localization(__file__, 117, 19), 'div', x0_62672, magnification_62673)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 117, 11), tuple_62669, result_div_62674)
    # Adding element type (line 117)
    # Getting the type of 'bbox' (line 117)
    bbox_62675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 44), 'bbox')
    # Obtaining the member 'y0' of a type (line 117)
    y0_62676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 117, 44), bbox_62675, 'y0')
    # Getting the type of 'magnification' (line 117)
    magnification_62677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 117, 54), 'magnification')
    # Applying the binary operator 'div' (line 117)
    result_div_62678 = python_operator(stypy.reporting.localization.Localization(__file__, 117, 44), 'div', y0_62676, magnification_62677)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 117, 11), tuple_62669, result_div_62678)
    
    # Assigning a type to the variable 'stypy_return_type' (line 117)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 117, 4), 'stypy_return_type', tuple_62669)
    
    # ################# End of 'composite_images(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'composite_images' in the type store
    # Getting the type of 'stypy_return_type' (line 62)
    stypy_return_type_62679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 62, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_62679)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'composite_images'
    return stypy_return_type_62679

# Assigning a type to the variable 'composite_images' (line 62)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 62, 0), 'composite_images', composite_images)

@norecursion
def _draw_list_compositing_images(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 121)
    None_62680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 121, 54), 'None')
    defaults = [None_62680]
    # Create a new context for function '_draw_list_compositing_images'
    module_type_store = module_type_store.open_function_context('_draw_list_compositing_images', 120, 0, False)
    
    # Passed parameters checking function
    _draw_list_compositing_images.stypy_localization = localization
    _draw_list_compositing_images.stypy_type_of_self = None
    _draw_list_compositing_images.stypy_type_store = module_type_store
    _draw_list_compositing_images.stypy_function_name = '_draw_list_compositing_images'
    _draw_list_compositing_images.stypy_param_names_list = ['renderer', 'parent', 'artists', 'suppress_composite']
    _draw_list_compositing_images.stypy_varargs_param_name = None
    _draw_list_compositing_images.stypy_kwargs_param_name = None
    _draw_list_compositing_images.stypy_call_defaults = defaults
    _draw_list_compositing_images.stypy_call_varargs = varargs
    _draw_list_compositing_images.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_draw_list_compositing_images', ['renderer', 'parent', 'artists', 'suppress_composite'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_draw_list_compositing_images', localization, ['renderer', 'parent', 'artists', 'suppress_composite'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_draw_list_compositing_images(...)' code ##################

    unicode_62681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 129, (-1)), 'unicode', u'\n    Draw a sorted list of artists, compositing images into a single\n    image where possible.\n\n    For internal matplotlib use only: It is here to reduce duplication\n    between `Figure.draw` and `Axes.draw`, but otherwise should not be\n    generally useful.\n    ')
    
    # Assigning a Call to a Name (line 130):
    
    # Assigning a Call to a Name (line 130):
    
    # Call to any(...): (line 130)
    # Processing the call arguments (line 130)
    # Calculating generator expression
    module_type_store = module_type_store.open_function_context('list comprehension expression', 130, 21, True)
    # Calculating comprehension expression
    # Getting the type of 'artists' (line 130)
    artists_62688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 56), 'artists', False)
    comprehension_62689 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 130, 21), artists_62688)
    # Assigning a type to the variable 'x' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 21), 'x', comprehension_62689)
    
    # Call to isinstance(...): (line 130)
    # Processing the call arguments (line 130)
    # Getting the type of 'x' (line 130)
    x_62684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 32), 'x', False)
    # Getting the type of '_ImageBase' (line 130)
    _ImageBase_62685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 35), '_ImageBase', False)
    # Processing the call keyword arguments (line 130)
    kwargs_62686 = {}
    # Getting the type of 'isinstance' (line 130)
    isinstance_62683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 21), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 130)
    isinstance_call_result_62687 = invoke(stypy.reporting.localization.Localization(__file__, 130, 21), isinstance_62683, *[x_62684, _ImageBase_62685], **kwargs_62686)
    
    list_62690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 130, 21), 'list')
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 130, 21), list_62690, isinstance_call_result_62687)
    # Processing the call keyword arguments (line 130)
    kwargs_62691 = {}
    # Getting the type of 'any' (line 130)
    any_62682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 17), 'any', False)
    # Calling any(args, kwargs) (line 130)
    any_call_result_62692 = invoke(stypy.reporting.localization.Localization(__file__, 130, 17), any_62682, *[list_62690], **kwargs_62691)
    
    # Assigning a type to the variable 'has_images' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 4), 'has_images', any_call_result_62692)
    
    # Assigning a IfExp to a Name (line 133):
    
    # Assigning a IfExp to a Name (line 133):
    
    
    # Getting the type of 'suppress_composite' (line 133)
    suppress_composite_62693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 43), 'suppress_composite')
    # Getting the type of 'None' (line 133)
    None_62694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 69), 'None')
    # Applying the binary operator 'isnot' (line 133)
    result_is_not_62695 = python_operator(stypy.reporting.localization.Localization(__file__, 133, 43), 'isnot', suppress_composite_62693, None_62694)
    
    # Testing the type of an if expression (line 133)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 133, 21), result_is_not_62695)
    # SSA begins for if expression (line 133)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    # Getting the type of 'suppress_composite' (line 133)
    suppress_composite_62696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 133, 21), 'suppress_composite')
    # SSA branch for the else part of an if expression (line 133)
    module_type_store.open_ssa_branch('if expression else')
    
    # Call to option_image_nocomposite(...): (line 134)
    # Processing the call keyword arguments (line 134)
    kwargs_62699 = {}
    # Getting the type of 'renderer' (line 134)
    renderer_62697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 134, 26), 'renderer', False)
    # Obtaining the member 'option_image_nocomposite' of a type (line 134)
    option_image_nocomposite_62698 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 134, 26), renderer_62697, 'option_image_nocomposite')
    # Calling option_image_nocomposite(args, kwargs) (line 134)
    option_image_nocomposite_call_result_62700 = invoke(stypy.reporting.localization.Localization(__file__, 134, 26), option_image_nocomposite_62698, *[], **kwargs_62699)
    
    # SSA join for if expression (line 133)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_62701 = union_type.UnionType.add(suppress_composite_62696, option_image_nocomposite_call_result_62700)
    
    # Assigning a type to the variable 'not_composite' (line 133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 133, 4), 'not_composite', if_exp_62701)
    
    
    # Evaluating a boolean operation
    # Getting the type of 'not_composite' (line 136)
    not_composite_62702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 7), 'not_composite')
    
    # Getting the type of 'has_images' (line 136)
    has_images_62703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 28), 'has_images')
    # Applying the 'not' unary operator (line 136)
    result_not__62704 = python_operator(stypy.reporting.localization.Localization(__file__, 136, 24), 'not', has_images_62703)
    
    # Applying the binary operator 'or' (line 136)
    result_or_keyword_62705 = python_operator(stypy.reporting.localization.Localization(__file__, 136, 7), 'or', not_composite_62702, result_not__62704)
    
    # Testing the type of an if condition (line 136)
    if_condition_62706 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 136, 4), result_or_keyword_62705)
    # Assigning a type to the variable 'if_condition_62706' (line 136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 4), 'if_condition_62706', if_condition_62706)
    # SSA begins for if statement (line 136)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'artists' (line 137)
    artists_62707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 137, 17), 'artists')
    # Testing the type of a for loop iterable (line 137)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 137, 8), artists_62707)
    # Getting the type of the for loop variable (line 137)
    for_loop_var_62708 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 137, 8), artists_62707)
    # Assigning a type to the variable 'a' (line 137)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 8), 'a', for_loop_var_62708)
    # SSA begins for a for statement (line 137)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to draw(...): (line 138)
    # Processing the call arguments (line 138)
    # Getting the type of 'renderer' (line 138)
    renderer_62711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 19), 'renderer', False)
    # Processing the call keyword arguments (line 138)
    kwargs_62712 = {}
    # Getting the type of 'a' (line 138)
    a_62709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 12), 'a', False)
    # Obtaining the member 'draw' of a type (line 138)
    draw_62710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 138, 12), a_62709, 'draw')
    # Calling draw(args, kwargs) (line 138)
    draw_call_result_62713 = invoke(stypy.reporting.localization.Localization(__file__, 138, 12), draw_62710, *[renderer_62711], **kwargs_62712)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 136)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a List to a Name (line 141):
    
    # Assigning a List to a Name (line 141):
    
    # Obtaining an instance of the builtin type 'list' (line 141)
    list_62714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 141, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 141)
    
    # Assigning a type to the variable 'image_group' (line 141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 141, 8), 'image_group', list_62714)
    
    # Assigning a Call to a Name (line 142):
    
    # Assigning a Call to a Name (line 142):
    
    # Call to get_image_magnification(...): (line 142)
    # Processing the call keyword arguments (line 142)
    kwargs_62717 = {}
    # Getting the type of 'renderer' (line 142)
    renderer_62715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 14), 'renderer', False)
    # Obtaining the member 'get_image_magnification' of a type (line 142)
    get_image_magnification_62716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 142, 14), renderer_62715, 'get_image_magnification')
    # Calling get_image_magnification(args, kwargs) (line 142)
    get_image_magnification_call_result_62718 = invoke(stypy.reporting.localization.Localization(__file__, 142, 14), get_image_magnification_62716, *[], **kwargs_62717)
    
    # Assigning a type to the variable 'mag' (line 142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 8), 'mag', get_image_magnification_call_result_62718)

    @norecursion
    def flush_images(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'flush_images'
        module_type_store = module_type_store.open_function_context('flush_images', 144, 8, False)
        
        # Passed parameters checking function
        flush_images.stypy_localization = localization
        flush_images.stypy_type_of_self = None
        flush_images.stypy_type_store = module_type_store
        flush_images.stypy_function_name = 'flush_images'
        flush_images.stypy_param_names_list = []
        flush_images.stypy_varargs_param_name = None
        flush_images.stypy_kwargs_param_name = None
        flush_images.stypy_call_defaults = defaults
        flush_images.stypy_call_varargs = varargs
        flush_images.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'flush_images', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'flush_images', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'flush_images(...)' code ##################

        
        
        
        # Call to len(...): (line 145)
        # Processing the call arguments (line 145)
        # Getting the type of 'image_group' (line 145)
        image_group_62720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 19), 'image_group', False)
        # Processing the call keyword arguments (line 145)
        kwargs_62721 = {}
        # Getting the type of 'len' (line 145)
        len_62719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 15), 'len', False)
        # Calling len(args, kwargs) (line 145)
        len_call_result_62722 = invoke(stypy.reporting.localization.Localization(__file__, 145, 15), len_62719, *[image_group_62720], **kwargs_62721)
        
        int_62723 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 145, 35), 'int')
        # Applying the binary operator '==' (line 145)
        result_eq_62724 = python_operator(stypy.reporting.localization.Localization(__file__, 145, 15), '==', len_call_result_62722, int_62723)
        
        # Testing the type of an if condition (line 145)
        if_condition_62725 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 145, 12), result_eq_62724)
        # Assigning a type to the variable 'if_condition_62725' (line 145)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 145, 12), 'if_condition_62725', if_condition_62725)
        # SSA begins for if statement (line 145)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw(...): (line 146)
        # Processing the call arguments (line 146)
        # Getting the type of 'renderer' (line 146)
        renderer_62731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 36), 'renderer', False)
        # Processing the call keyword arguments (line 146)
        kwargs_62732 = {}
        
        # Obtaining the type of the subscript
        int_62726 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 146, 28), 'int')
        # Getting the type of 'image_group' (line 146)
        image_group_62727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 16), 'image_group', False)
        # Obtaining the member '__getitem__' of a type (line 146)
        getitem___62728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 16), image_group_62727, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 146)
        subscript_call_result_62729 = invoke(stypy.reporting.localization.Localization(__file__, 146, 16), getitem___62728, int_62726)
        
        # Obtaining the member 'draw' of a type (line 146)
        draw_62730 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 16), subscript_call_result_62729, 'draw')
        # Calling draw(args, kwargs) (line 146)
        draw_call_result_62733 = invoke(stypy.reporting.localization.Localization(__file__, 146, 16), draw_62730, *[renderer_62731], **kwargs_62732)
        
        # SSA branch for the else part of an if statement (line 145)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Call to len(...): (line 147)
        # Processing the call arguments (line 147)
        # Getting the type of 'image_group' (line 147)
        image_group_62735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 21), 'image_group', False)
        # Processing the call keyword arguments (line 147)
        kwargs_62736 = {}
        # Getting the type of 'len' (line 147)
        len_62734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 17), 'len', False)
        # Calling len(args, kwargs) (line 147)
        len_call_result_62737 = invoke(stypy.reporting.localization.Localization(__file__, 147, 17), len_62734, *[image_group_62735], **kwargs_62736)
        
        int_62738 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 147, 36), 'int')
        # Applying the binary operator '>' (line 147)
        result_gt_62739 = python_operator(stypy.reporting.localization.Localization(__file__, 147, 17), '>', len_call_result_62737, int_62738)
        
        # Testing the type of an if condition (line 147)
        if_condition_62740 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 147, 17), result_gt_62739)
        # Assigning a type to the variable 'if_condition_62740' (line 147)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 147, 17), 'if_condition_62740', if_condition_62740)
        # SSA begins for if statement (line 147)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Tuple (line 148):
        
        # Assigning a Call to a Name:
        
        # Call to composite_images(...): (line 148)
        # Processing the call arguments (line 148)
        # Getting the type of 'image_group' (line 148)
        image_group_62742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 46), 'image_group', False)
        # Getting the type of 'renderer' (line 148)
        renderer_62743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 59), 'renderer', False)
        # Getting the type of 'mag' (line 148)
        mag_62744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 69), 'mag', False)
        # Processing the call keyword arguments (line 148)
        kwargs_62745 = {}
        # Getting the type of 'composite_images' (line 148)
        composite_images_62741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 29), 'composite_images', False)
        # Calling composite_images(args, kwargs) (line 148)
        composite_images_call_result_62746 = invoke(stypy.reporting.localization.Localization(__file__, 148, 29), composite_images_62741, *[image_group_62742, renderer_62743, mag_62744], **kwargs_62745)
        
        # Assigning a type to the variable 'call_assignment_62305' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 16), 'call_assignment_62305', composite_images_call_result_62746)
        
        # Assigning a Call to a Name (line 148):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_62749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 16), 'int')
        # Processing the call keyword arguments
        kwargs_62750 = {}
        # Getting the type of 'call_assignment_62305' (line 148)
        call_assignment_62305_62747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 16), 'call_assignment_62305', False)
        # Obtaining the member '__getitem__' of a type (line 148)
        getitem___62748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 148, 16), call_assignment_62305_62747, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_62751 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___62748, *[int_62749], **kwargs_62750)
        
        # Assigning a type to the variable 'call_assignment_62306' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 16), 'call_assignment_62306', getitem___call_result_62751)
        
        # Assigning a Name to a Name (line 148):
        # Getting the type of 'call_assignment_62306' (line 148)
        call_assignment_62306_62752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 16), 'call_assignment_62306')
        # Assigning a type to the variable 'data' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 16), 'data', call_assignment_62306_62752)
        
        # Assigning a Call to a Name (line 148):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_62755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 16), 'int')
        # Processing the call keyword arguments
        kwargs_62756 = {}
        # Getting the type of 'call_assignment_62305' (line 148)
        call_assignment_62305_62753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 16), 'call_assignment_62305', False)
        # Obtaining the member '__getitem__' of a type (line 148)
        getitem___62754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 148, 16), call_assignment_62305_62753, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_62757 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___62754, *[int_62755], **kwargs_62756)
        
        # Assigning a type to the variable 'call_assignment_62307' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 16), 'call_assignment_62307', getitem___call_result_62757)
        
        # Assigning a Name to a Name (line 148):
        # Getting the type of 'call_assignment_62307' (line 148)
        call_assignment_62307_62758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 16), 'call_assignment_62307')
        # Assigning a type to the variable 'l' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 22), 'l', call_assignment_62307_62758)
        
        # Assigning a Call to a Name (line 148):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_62761 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 148, 16), 'int')
        # Processing the call keyword arguments
        kwargs_62762 = {}
        # Getting the type of 'call_assignment_62305' (line 148)
        call_assignment_62305_62759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 16), 'call_assignment_62305', False)
        # Obtaining the member '__getitem__' of a type (line 148)
        getitem___62760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 148, 16), call_assignment_62305_62759, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_62763 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___62760, *[int_62761], **kwargs_62762)
        
        # Assigning a type to the variable 'call_assignment_62308' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 16), 'call_assignment_62308', getitem___call_result_62763)
        
        # Assigning a Name to a Name (line 148):
        # Getting the type of 'call_assignment_62308' (line 148)
        call_assignment_62308_62764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 148, 16), 'call_assignment_62308')
        # Assigning a type to the variable 'b' (line 148)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 148, 25), 'b', call_assignment_62308_62764)
        
        
        # Getting the type of 'data' (line 149)
        data_62765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 149, 19), 'data')
        # Obtaining the member 'size' of a type (line 149)
        size_62766 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 149, 19), data_62765, 'size')
        int_62767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 149, 32), 'int')
        # Applying the binary operator '!=' (line 149)
        result_ne_62768 = python_operator(stypy.reporting.localization.Localization(__file__, 149, 19), '!=', size_62766, int_62767)
        
        # Testing the type of an if condition (line 149)
        if_condition_62769 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 149, 16), result_ne_62768)
        # Assigning a type to the variable 'if_condition_62769' (line 149)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 149, 16), 'if_condition_62769', if_condition_62769)
        # SSA begins for if statement (line 149)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 150):
        
        # Assigning a Call to a Name (line 150):
        
        # Call to new_gc(...): (line 150)
        # Processing the call keyword arguments (line 150)
        kwargs_62772 = {}
        # Getting the type of 'renderer' (line 150)
        renderer_62770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 150, 25), 'renderer', False)
        # Obtaining the member 'new_gc' of a type (line 150)
        new_gc_62771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 150, 25), renderer_62770, 'new_gc')
        # Calling new_gc(args, kwargs) (line 150)
        new_gc_call_result_62773 = invoke(stypy.reporting.localization.Localization(__file__, 150, 25), new_gc_62771, *[], **kwargs_62772)
        
        # Assigning a type to the variable 'gc' (line 150)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 150, 20), 'gc', new_gc_call_result_62773)
        
        # Call to set_clip_rectangle(...): (line 151)
        # Processing the call arguments (line 151)
        # Getting the type of 'parent' (line 151)
        parent_62776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 42), 'parent', False)
        # Obtaining the member 'bbox' of a type (line 151)
        bbox_62777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 42), parent_62776, 'bbox')
        # Processing the call keyword arguments (line 151)
        kwargs_62778 = {}
        # Getting the type of 'gc' (line 151)
        gc_62774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 20), 'gc', False)
        # Obtaining the member 'set_clip_rectangle' of a type (line 151)
        set_clip_rectangle_62775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 20), gc_62774, 'set_clip_rectangle')
        # Calling set_clip_rectangle(args, kwargs) (line 151)
        set_clip_rectangle_call_result_62779 = invoke(stypy.reporting.localization.Localization(__file__, 151, 20), set_clip_rectangle_62775, *[bbox_62777], **kwargs_62778)
        
        
        # Call to set_clip_path(...): (line 152)
        # Processing the call arguments (line 152)
        
        # Call to get_clip_path(...): (line 152)
        # Processing the call keyword arguments (line 152)
        kwargs_62784 = {}
        # Getting the type of 'parent' (line 152)
        parent_62782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 37), 'parent', False)
        # Obtaining the member 'get_clip_path' of a type (line 152)
        get_clip_path_62783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 37), parent_62782, 'get_clip_path')
        # Calling get_clip_path(args, kwargs) (line 152)
        get_clip_path_call_result_62785 = invoke(stypy.reporting.localization.Localization(__file__, 152, 37), get_clip_path_62783, *[], **kwargs_62784)
        
        # Processing the call keyword arguments (line 152)
        kwargs_62786 = {}
        # Getting the type of 'gc' (line 152)
        gc_62780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 152, 20), 'gc', False)
        # Obtaining the member 'set_clip_path' of a type (line 152)
        set_clip_path_62781 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 152, 20), gc_62780, 'set_clip_path')
        # Calling set_clip_path(args, kwargs) (line 152)
        set_clip_path_call_result_62787 = invoke(stypy.reporting.localization.Localization(__file__, 152, 20), set_clip_path_62781, *[get_clip_path_call_result_62785], **kwargs_62786)
        
        
        # Call to draw_image(...): (line 153)
        # Processing the call arguments (line 153)
        # Getting the type of 'gc' (line 153)
        gc_62790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 40), 'gc', False)
        
        # Call to round(...): (line 153)
        # Processing the call arguments (line 153)
        # Getting the type of 'l' (line 153)
        l_62793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 53), 'l', False)
        # Processing the call keyword arguments (line 153)
        kwargs_62794 = {}
        # Getting the type of 'np' (line 153)
        np_62791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 44), 'np', False)
        # Obtaining the member 'round' of a type (line 153)
        round_62792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 44), np_62791, 'round')
        # Calling round(args, kwargs) (line 153)
        round_call_result_62795 = invoke(stypy.reporting.localization.Localization(__file__, 153, 44), round_62792, *[l_62793], **kwargs_62794)
        
        
        # Call to round(...): (line 153)
        # Processing the call arguments (line 153)
        # Getting the type of 'b' (line 153)
        b_62798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 66), 'b', False)
        # Processing the call keyword arguments (line 153)
        kwargs_62799 = {}
        # Getting the type of 'np' (line 153)
        np_62796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 57), 'np', False)
        # Obtaining the member 'round' of a type (line 153)
        round_62797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 57), np_62796, 'round')
        # Calling round(args, kwargs) (line 153)
        round_call_result_62800 = invoke(stypy.reporting.localization.Localization(__file__, 153, 57), round_62797, *[b_62798], **kwargs_62799)
        
        # Getting the type of 'data' (line 153)
        data_62801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 70), 'data', False)
        # Processing the call keyword arguments (line 153)
        kwargs_62802 = {}
        # Getting the type of 'renderer' (line 153)
        renderer_62788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 153, 20), 'renderer', False)
        # Obtaining the member 'draw_image' of a type (line 153)
        draw_image_62789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 153, 20), renderer_62788, 'draw_image')
        # Calling draw_image(args, kwargs) (line 153)
        draw_image_call_result_62803 = invoke(stypy.reporting.localization.Localization(__file__, 153, 20), draw_image_62789, *[gc_62790, round_call_result_62795, round_call_result_62800, data_62801], **kwargs_62802)
        
        
        # Call to restore(...): (line 154)
        # Processing the call keyword arguments (line 154)
        kwargs_62806 = {}
        # Getting the type of 'gc' (line 154)
        gc_62804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 20), 'gc', False)
        # Obtaining the member 'restore' of a type (line 154)
        restore_62805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 20), gc_62804, 'restore')
        # Calling restore(args, kwargs) (line 154)
        restore_call_result_62807 = invoke(stypy.reporting.localization.Localization(__file__, 154, 20), restore_62805, *[], **kwargs_62806)
        
        # SSA join for if statement (line 149)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 147)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 145)
        module_type_store = module_type_store.join_ssa_context()
        
        # Deleting a member
        # Getting the type of 'image_group' (line 155)
        image_group_62808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 16), 'image_group')
        
        # Obtaining the type of the subscript
        slice_62809 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 155, 16), None, None, None)
        # Getting the type of 'image_group' (line 155)
        image_group_62810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 155, 16), 'image_group')
        # Obtaining the member '__getitem__' of a type (line 155)
        getitem___62811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 155, 16), image_group_62810, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 155)
        subscript_call_result_62812 = invoke(stypy.reporting.localization.Localization(__file__, 155, 16), getitem___62811, slice_62809)
        
        del_contained_elements_type(stypy.reporting.localization.Localization(__file__, 155, 12), image_group_62808, subscript_call_result_62812)
        
        # ################# End of 'flush_images(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'flush_images' in the type store
        # Getting the type of 'stypy_return_type' (line 144)
        stypy_return_type_62813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 144, 8), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_62813)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'flush_images'
        return stypy_return_type_62813

    # Assigning a type to the variable 'flush_images' (line 144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 144, 8), 'flush_images', flush_images)
    
    # Getting the type of 'artists' (line 157)
    artists_62814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 17), 'artists')
    # Testing the type of a for loop iterable (line 157)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 157, 8), artists_62814)
    # Getting the type of the for loop variable (line 157)
    for_loop_var_62815 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 157, 8), artists_62814)
    # Assigning a type to the variable 'a' (line 157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 8), 'a', for_loop_var_62815)
    # SSA begins for a for statement (line 157)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 158)
    # Processing the call arguments (line 158)
    # Getting the type of 'a' (line 158)
    a_62817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 26), 'a', False)
    # Getting the type of '_ImageBase' (line 158)
    _ImageBase_62818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 29), '_ImageBase', False)
    # Processing the call keyword arguments (line 158)
    kwargs_62819 = {}
    # Getting the type of 'isinstance' (line 158)
    isinstance_62816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 15), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 158)
    isinstance_call_result_62820 = invoke(stypy.reporting.localization.Localization(__file__, 158, 15), isinstance_62816, *[a_62817, _ImageBase_62818], **kwargs_62819)
    
    
    # Call to can_composite(...): (line 158)
    # Processing the call keyword arguments (line 158)
    kwargs_62823 = {}
    # Getting the type of 'a' (line 158)
    a_62821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 158, 45), 'a', False)
    # Obtaining the member 'can_composite' of a type (line 158)
    can_composite_62822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 158, 45), a_62821, 'can_composite')
    # Calling can_composite(args, kwargs) (line 158)
    can_composite_call_result_62824 = invoke(stypy.reporting.localization.Localization(__file__, 158, 45), can_composite_62822, *[], **kwargs_62823)
    
    # Applying the binary operator 'and' (line 158)
    result_and_keyword_62825 = python_operator(stypy.reporting.localization.Localization(__file__, 158, 15), 'and', isinstance_call_result_62820, can_composite_call_result_62824)
    
    # Testing the type of an if condition (line 158)
    if_condition_62826 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 158, 12), result_and_keyword_62825)
    # Assigning a type to the variable 'if_condition_62826' (line 158)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 158, 12), 'if_condition_62826', if_condition_62826)
    # SSA begins for if statement (line 158)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 159)
    # Processing the call arguments (line 159)
    # Getting the type of 'a' (line 159)
    a_62829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 35), 'a', False)
    # Processing the call keyword arguments (line 159)
    kwargs_62830 = {}
    # Getting the type of 'image_group' (line 159)
    image_group_62827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 159, 16), 'image_group', False)
    # Obtaining the member 'append' of a type (line 159)
    append_62828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 159, 16), image_group_62827, 'append')
    # Calling append(args, kwargs) (line 159)
    append_call_result_62831 = invoke(stypy.reporting.localization.Localization(__file__, 159, 16), append_62828, *[a_62829], **kwargs_62830)
    
    # SSA branch for the else part of an if statement (line 158)
    module_type_store.open_ssa_branch('else')
    
    # Call to flush_images(...): (line 161)
    # Processing the call keyword arguments (line 161)
    kwargs_62833 = {}
    # Getting the type of 'flush_images' (line 161)
    flush_images_62832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 161, 16), 'flush_images', False)
    # Calling flush_images(args, kwargs) (line 161)
    flush_images_call_result_62834 = invoke(stypy.reporting.localization.Localization(__file__, 161, 16), flush_images_62832, *[], **kwargs_62833)
    
    
    # Call to draw(...): (line 162)
    # Processing the call arguments (line 162)
    # Getting the type of 'renderer' (line 162)
    renderer_62837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 23), 'renderer', False)
    # Processing the call keyword arguments (line 162)
    kwargs_62838 = {}
    # Getting the type of 'a' (line 162)
    a_62835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 16), 'a', False)
    # Obtaining the member 'draw' of a type (line 162)
    draw_62836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 16), a_62835, 'draw')
    # Calling draw(args, kwargs) (line 162)
    draw_call_result_62839 = invoke(stypy.reporting.localization.Localization(__file__, 162, 16), draw_62836, *[renderer_62837], **kwargs_62838)
    
    # SSA join for if statement (line 158)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to flush_images(...): (line 163)
    # Processing the call keyword arguments (line 163)
    kwargs_62841 = {}
    # Getting the type of 'flush_images' (line 163)
    flush_images_62840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 8), 'flush_images', False)
    # Calling flush_images(args, kwargs) (line 163)
    flush_images_call_result_62842 = invoke(stypy.reporting.localization.Localization(__file__, 163, 8), flush_images_62840, *[], **kwargs_62841)
    
    # SSA join for if statement (line 136)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_draw_list_compositing_images(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_draw_list_compositing_images' in the type store
    # Getting the type of 'stypy_return_type' (line 120)
    stypy_return_type_62843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 120, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_62843)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_draw_list_compositing_images'
    return stypy_return_type_62843

# Assigning a type to the variable '_draw_list_compositing_images' (line 120)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 120, 0), '_draw_list_compositing_images', _draw_list_compositing_images)

@norecursion
def _rgb_to_rgba(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_rgb_to_rgba'
    module_type_store = module_type_store.open_function_context('_rgb_to_rgba', 166, 0, False)
    
    # Passed parameters checking function
    _rgb_to_rgba.stypy_localization = localization
    _rgb_to_rgba.stypy_type_of_self = None
    _rgb_to_rgba.stypy_type_store = module_type_store
    _rgb_to_rgba.stypy_function_name = '_rgb_to_rgba'
    _rgb_to_rgba.stypy_param_names_list = ['A']
    _rgb_to_rgba.stypy_varargs_param_name = None
    _rgb_to_rgba.stypy_kwargs_param_name = None
    _rgb_to_rgba.stypy_call_defaults = defaults
    _rgb_to_rgba.stypy_call_varargs = varargs
    _rgb_to_rgba.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_rgb_to_rgba', ['A'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_rgb_to_rgba', localization, ['A'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_rgb_to_rgba(...)' code ##################

    unicode_62844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 170, (-1)), 'unicode', u'\n    Convert an RGB image to RGBA, as required by the image resample C++\n    extension.\n    ')
    
    # Assigning a Call to a Name (line 171):
    
    # Assigning a Call to a Name (line 171):
    
    # Call to zeros(...): (line 171)
    # Processing the call arguments (line 171)
    
    # Obtaining an instance of the builtin type 'tuple' (line 171)
    tuple_62847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 21), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 171)
    # Adding element type (line 171)
    
    # Obtaining the type of the subscript
    int_62848 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 29), 'int')
    # Getting the type of 'A' (line 171)
    A_62849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 21), 'A', False)
    # Obtaining the member 'shape' of a type (line 171)
    shape_62850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 21), A_62849, 'shape')
    # Obtaining the member '__getitem__' of a type (line 171)
    getitem___62851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 21), shape_62850, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 171)
    subscript_call_result_62852 = invoke(stypy.reporting.localization.Localization(__file__, 171, 21), getitem___62851, int_62848)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 171, 21), tuple_62847, subscript_call_result_62852)
    # Adding element type (line 171)
    
    # Obtaining the type of the subscript
    int_62853 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 41), 'int')
    # Getting the type of 'A' (line 171)
    A_62854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 33), 'A', False)
    # Obtaining the member 'shape' of a type (line 171)
    shape_62855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 33), A_62854, 'shape')
    # Obtaining the member '__getitem__' of a type (line 171)
    getitem___62856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 33), shape_62855, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 171)
    subscript_call_result_62857 = invoke(stypy.reporting.localization.Localization(__file__, 171, 33), getitem___62856, int_62853)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 171, 21), tuple_62847, subscript_call_result_62857)
    # Adding element type (line 171)
    int_62858 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 171, 45), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 171, 21), tuple_62847, int_62858)
    
    # Processing the call keyword arguments (line 171)
    # Getting the type of 'A' (line 171)
    A_62859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 55), 'A', False)
    # Obtaining the member 'dtype' of a type (line 171)
    dtype_62860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 55), A_62859, 'dtype')
    keyword_62861 = dtype_62860
    kwargs_62862 = {'dtype': keyword_62861}
    # Getting the type of 'np' (line 171)
    np_62845 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 171, 11), 'np', False)
    # Obtaining the member 'zeros' of a type (line 171)
    zeros_62846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 171, 11), np_62845, 'zeros')
    # Calling zeros(args, kwargs) (line 171)
    zeros_call_result_62863 = invoke(stypy.reporting.localization.Localization(__file__, 171, 11), zeros_62846, *[tuple_62847], **kwargs_62862)
    
    # Assigning a type to the variable 'rgba' (line 171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 171, 4), 'rgba', zeros_call_result_62863)
    
    # Assigning a Name to a Subscript (line 172):
    
    # Assigning a Name to a Subscript (line 172):
    # Getting the type of 'A' (line 172)
    A_62864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 21), 'A')
    # Getting the type of 'rgba' (line 172)
    rgba_62865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 172, 4), 'rgba')
    slice_62866 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 172, 4), None, None, None)
    slice_62867 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 172, 4), None, None, None)
    int_62868 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 172, 16), 'int')
    slice_62869 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 172, 4), None, int_62868, None)
    # Storing an element on a container (line 172)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 172, 4), rgba_62865, ((slice_62866, slice_62867, slice_62869), A_62864))
    
    
    # Getting the type of 'rgba' (line 173)
    rgba_62870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 7), 'rgba')
    # Obtaining the member 'dtype' of a type (line 173)
    dtype_62871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 7), rgba_62870, 'dtype')
    # Getting the type of 'np' (line 173)
    np_62872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 21), 'np')
    # Obtaining the member 'uint8' of a type (line 173)
    uint8_62873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 173, 21), np_62872, 'uint8')
    # Applying the binary operator '==' (line 173)
    result_eq_62874 = python_operator(stypy.reporting.localization.Localization(__file__, 173, 7), '==', dtype_62871, uint8_62873)
    
    # Testing the type of an if condition (line 173)
    if_condition_62875 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 173, 4), result_eq_62874)
    # Assigning a type to the variable 'if_condition_62875' (line 173)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 4), 'if_condition_62875', if_condition_62875)
    # SSA begins for if statement (line 173)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Num to a Subscript (line 174):
    
    # Assigning a Num to a Subscript (line 174):
    int_62876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 174, 24), 'int')
    # Getting the type of 'rgba' (line 174)
    rgba_62877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 174, 8), 'rgba')
    slice_62878 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 174, 8), None, None, None)
    slice_62879 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 174, 8), None, None, None)
    int_62880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 174, 19), 'int')
    # Storing an element on a container (line 174)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 174, 8), rgba_62877, ((slice_62878, slice_62879, int_62880), int_62876))
    # SSA branch for the else part of an if statement (line 173)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Num to a Subscript (line 176):
    
    # Assigning a Num to a Subscript (line 176):
    float_62881 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 176, 24), 'float')
    # Getting the type of 'rgba' (line 176)
    rgba_62882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 176, 8), 'rgba')
    slice_62883 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 176, 8), None, None, None)
    slice_62884 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 176, 8), None, None, None)
    int_62885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 176, 19), 'int')
    # Storing an element on a container (line 176)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 176, 8), rgba_62882, ((slice_62883, slice_62884, int_62885), float_62881))
    # SSA join for if statement (line 173)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'rgba' (line 177)
    rgba_62886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 177, 11), 'rgba')
    # Assigning a type to the variable 'stypy_return_type' (line 177)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 177, 4), 'stypy_return_type', rgba_62886)
    
    # ################# End of '_rgb_to_rgba(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_rgb_to_rgba' in the type store
    # Getting the type of 'stypy_return_type' (line 166)
    stypy_return_type_62887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_62887)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_rgb_to_rgba'
    return stypy_return_type_62887

# Assigning a type to the variable '_rgb_to_rgba' (line 166)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 0), '_rgb_to_rgba', _rgb_to_rgba)
# Declaration of the '_ImageBase' class
# Getting the type of 'martist' (line 180)
martist_62888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 17), 'martist')
# Obtaining the member 'Artist' of a type (line 180)
Artist_62889 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 180, 17), martist_62888, 'Artist')
# Getting the type of 'cm' (line 180)
cm_62890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 180, 33), 'cm')
# Obtaining the member 'ScalarMappable' of a type (line 180)
ScalarMappable_62891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 180, 33), cm_62890, 'ScalarMappable')

class _ImageBase(Artist_62889, ScalarMappable_62891, ):
    
    # Assigning a Num to a Name (line 181):

    @norecursion
    def _interpd(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_interpd'
        module_type_store = module_type_store.open_function_context('_interpd', 183, 4, False)
        # Assigning a type to the variable 'self' (line 184)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 184, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase._interpd.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase._interpd.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase._interpd.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase._interpd.__dict__.__setitem__('stypy_function_name', '_ImageBase._interpd')
        _ImageBase._interpd.__dict__.__setitem__('stypy_param_names_list', [])
        _ImageBase._interpd.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase._interpd.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase._interpd.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase._interpd.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase._interpd.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase._interpd.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase._interpd', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_interpd', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_interpd(...)' code ##################

        # Getting the type of '_interpd_' (line 185)
        _interpd__62892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 185, 15), '_interpd_')
        # Assigning a type to the variable 'stypy_return_type' (line 185)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 185, 8), 'stypy_return_type', _interpd__62892)
        
        # ################# End of '_interpd(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_interpd' in the type store
        # Getting the type of 'stypy_return_type' (line 183)
        stypy_return_type_62893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 183, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_62893)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_interpd'
        return stypy_return_type_62893


    @norecursion
    def _interpdr(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_interpdr'
        module_type_store = module_type_store.open_function_context('_interpdr', 187, 4, False)
        # Assigning a type to the variable 'self' (line 188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 188, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase._interpdr.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase._interpdr.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase._interpdr.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase._interpdr.__dict__.__setitem__('stypy_function_name', '_ImageBase._interpdr')
        _ImageBase._interpdr.__dict__.__setitem__('stypy_param_names_list', [])
        _ImageBase._interpdr.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase._interpdr.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase._interpdr.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase._interpdr.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase._interpdr.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase._interpdr.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase._interpdr', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_interpdr', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_interpdr(...)' code ##################

        # Calculating dict comprehension
        module_type_store = module_type_store.open_function_context('dict comprehension expression', 189, 16, True)
        # Calculating comprehension expression
        
        # Call to iteritems(...): (line 189)
        # Processing the call arguments (line 189)
        # Getting the type of '_interpd_' (line 189)
        _interpd__62898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 47), '_interpd_', False)
        # Processing the call keyword arguments (line 189)
        kwargs_62899 = {}
        # Getting the type of 'six' (line 189)
        six_62896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 33), 'six', False)
        # Obtaining the member 'iteritems' of a type (line 189)
        iteritems_62897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 189, 33), six_62896, 'iteritems')
        # Calling iteritems(args, kwargs) (line 189)
        iteritems_call_result_62900 = invoke(stypy.reporting.localization.Localization(__file__, 189, 33), iteritems_62897, *[_interpd__62898], **kwargs_62899)
        
        comprehension_62901 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 16), iteritems_call_result_62900)
        # Assigning a type to the variable 'k' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 16), 'k', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 16), comprehension_62901))
        # Assigning a type to the variable 'v' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 16), 'v', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 16), comprehension_62901))
        # Getting the type of 'v' (line 189)
        v_62894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 16), 'v')
        # Getting the type of 'k' (line 189)
        k_62895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 189, 19), 'k')
        dict_62902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 189, 16), 'dict')
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 189, 16), dict_62902, (v_62894, k_62895))
        # Assigning a type to the variable 'stypy_return_type' (line 189)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 189, 8), 'stypy_return_type', dict_62902)
        
        # ################# End of '_interpdr(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_interpdr' in the type store
        # Getting the type of 'stypy_return_type' (line 187)
        stypy_return_type_62903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 187, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_62903)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_interpdr'
        return stypy_return_type_62903


    @norecursion
    def iterpnames(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'iterpnames'
        module_type_store = module_type_store.open_function_context('iterpnames', 191, 4, False)
        # Assigning a type to the variable 'self' (line 192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.iterpnames.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.iterpnames.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.iterpnames.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.iterpnames.__dict__.__setitem__('stypy_function_name', '_ImageBase.iterpnames')
        _ImageBase.iterpnames.__dict__.__setitem__('stypy_param_names_list', [])
        _ImageBase.iterpnames.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.iterpnames.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.iterpnames.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.iterpnames.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.iterpnames.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.iterpnames.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.iterpnames', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'iterpnames', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'iterpnames(...)' code ##################

        # Getting the type of 'interpolations_names' (line 193)
        interpolations_names_62904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 15), 'interpolations_names')
        # Assigning a type to the variable 'stypy_return_type' (line 193)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 8), 'stypy_return_type', interpolations_names_62904)
        
        # ################# End of 'iterpnames(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'iterpnames' in the type store
        # Getting the type of 'stypy_return_type' (line 191)
        stypy_return_type_62905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_62905)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'iterpnames'
        return stypy_return_type_62905


    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 195, 4, False)
        # Assigning a type to the variable 'self' (line 196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 196, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.stypy__str__.__dict__.__setitem__('stypy_function_name', '_ImageBase.stypy__str__')
        _ImageBase.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        _ImageBase.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_62906 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 196, 15), 'unicode', u'AxesImage(%g,%g;%gx%g)')
        
        # Call to tuple(...): (line 196)
        # Processing the call arguments (line 196)
        # Getting the type of 'self' (line 196)
        self_62908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 48), 'self', False)
        # Obtaining the member 'axes' of a type (line 196)
        axes_62909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 48), self_62908, 'axes')
        # Obtaining the member 'bbox' of a type (line 196)
        bbox_62910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 48), axes_62909, 'bbox')
        # Obtaining the member 'bounds' of a type (line 196)
        bounds_62911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 196, 48), bbox_62910, 'bounds')
        # Processing the call keyword arguments (line 196)
        kwargs_62912 = {}
        # Getting the type of 'tuple' (line 196)
        tuple_62907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 196, 42), 'tuple', False)
        # Calling tuple(args, kwargs) (line 196)
        tuple_call_result_62913 = invoke(stypy.reporting.localization.Localization(__file__, 196, 42), tuple_62907, *[bounds_62911], **kwargs_62912)
        
        # Applying the binary operator '%' (line 196)
        result_mod_62914 = python_operator(stypy.reporting.localization.Localization(__file__, 196, 15), '%', unicode_62906, tuple_call_result_62913)
        
        # Assigning a type to the variable 'stypy_return_type' (line 196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 196, 8), 'stypy_return_type', result_mod_62914)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 195)
        stypy_return_type_62915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_62915)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_62915


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 199)
        None_62916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 22), 'None')
        # Getting the type of 'None' (line 200)
        None_62917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 200, 22), 'None')
        # Getting the type of 'None' (line 201)
        None_62918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 31), 'None')
        # Getting the type of 'None' (line 202)
        None_62919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 24), 'None')
        int_62920 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 203, 28), 'int')
        float_62921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 204, 27), 'float')
        # Getting the type of 'False' (line 205)
        False_62922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 26), 'False')
        defaults = [None_62916, None_62917, None_62918, None_62919, int_62920, float_62921, False_62922]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 198, 4, False)
        # Assigning a type to the variable 'self' (line 199)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.__init__', ['ax', 'cmap', 'norm', 'interpolation', 'origin', 'filternorm', 'filterrad', 'resample'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'cmap', 'norm', 'interpolation', 'origin', 'filternorm', 'filterrad', 'resample'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_62923 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 220, (-1)), 'unicode', u'\n        interpolation and cmap default to their rc settings\n\n        cmap is a colors.Colormap instance\n        norm is a colors.Normalize instance to map luminance to 0-1\n\n        extent is data axes (left, right, bottom, top) for making image plots\n        registered with data plots.  Default is to label the pixel\n        centers with the zero-based row and column indices.\n\n        Additional kwargs are matplotlib.artist properties\n\n        ')
        
        # Call to __init__(...): (line 221)
        # Processing the call arguments (line 221)
        # Getting the type of 'self' (line 221)
        self_62927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 32), 'self', False)
        # Processing the call keyword arguments (line 221)
        kwargs_62928 = {}
        # Getting the type of 'martist' (line 221)
        martist_62924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 221, 8), 'martist', False)
        # Obtaining the member 'Artist' of a type (line 221)
        Artist_62925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 8), martist_62924, 'Artist')
        # Obtaining the member '__init__' of a type (line 221)
        init___62926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 221, 8), Artist_62925, '__init__')
        # Calling __init__(args, kwargs) (line 221)
        init___call_result_62929 = invoke(stypy.reporting.localization.Localization(__file__, 221, 8), init___62926, *[self_62927], **kwargs_62928)
        
        
        # Call to __init__(...): (line 222)
        # Processing the call arguments (line 222)
        # Getting the type of 'self' (line 222)
        self_62933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 35), 'self', False)
        # Getting the type of 'norm' (line 222)
        norm_62934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 41), 'norm', False)
        # Getting the type of 'cmap' (line 222)
        cmap_62935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 47), 'cmap', False)
        # Processing the call keyword arguments (line 222)
        kwargs_62936 = {}
        # Getting the type of 'cm' (line 222)
        cm_62930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 222, 8), 'cm', False)
        # Obtaining the member 'ScalarMappable' of a type (line 222)
        ScalarMappable_62931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 8), cm_62930, 'ScalarMappable')
        # Obtaining the member '__init__' of a type (line 222)
        init___62932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 222, 8), ScalarMappable_62931, '__init__')
        # Calling __init__(args, kwargs) (line 222)
        init___call_result_62937 = invoke(stypy.reporting.localization.Localization(__file__, 222, 8), init___62932, *[self_62933, norm_62934, cmap_62935], **kwargs_62936)
        
        
        # Assigning a Name to a Attribute (line 223):
        
        # Assigning a Name to a Attribute (line 223):
        # Getting the type of 'True' (line 223)
        True_62938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 26), 'True')
        # Getting the type of 'self' (line 223)
        self_62939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 223, 8), 'self')
        # Setting the type of the member '_mouseover' of a type (line 223)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 223, 8), self_62939, '_mouseover', True_62938)
        
        # Type idiom detected: calculating its left and rigth part (line 224)
        # Getting the type of 'origin' (line 224)
        origin_62940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 11), 'origin')
        # Getting the type of 'None' (line 224)
        None_62941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 224, 21), 'None')
        
        (may_be_62942, more_types_in_union_62943) = may_be_none(origin_62940, None_62941)

        if may_be_62942:

            if more_types_in_union_62943:
                # Runtime conditional SSA (line 224)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 225):
            
            # Assigning a Subscript to a Name (line 225):
            
            # Obtaining the type of the subscript
            unicode_62944 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 225, 30), 'unicode', u'image.origin')
            # Getting the type of 'rcParams' (line 225)
            rcParams_62945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 225, 21), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 225)
            getitem___62946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 225, 21), rcParams_62945, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 225)
            subscript_call_result_62947 = invoke(stypy.reporting.localization.Localization(__file__, 225, 21), getitem___62946, unicode_62944)
            
            # Assigning a type to the variable 'origin' (line 225)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 225, 12), 'origin', subscript_call_result_62947)

            if more_types_in_union_62943:
                # SSA join for if statement (line 224)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 226):
        
        # Assigning a Name to a Attribute (line 226):
        # Getting the type of 'origin' (line 226)
        origin_62948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 22), 'origin')
        # Getting the type of 'self' (line 226)
        self_62949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 226, 8), 'self')
        # Setting the type of the member 'origin' of a type (line 226)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 226, 8), self_62949, 'origin', origin_62948)
        
        # Call to set_filternorm(...): (line 227)
        # Processing the call arguments (line 227)
        # Getting the type of 'filternorm' (line 227)
        filternorm_62952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 28), 'filternorm', False)
        # Processing the call keyword arguments (line 227)
        kwargs_62953 = {}
        # Getting the type of 'self' (line 227)
        self_62950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 8), 'self', False)
        # Obtaining the member 'set_filternorm' of a type (line 227)
        set_filternorm_62951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 227, 8), self_62950, 'set_filternorm')
        # Calling set_filternorm(args, kwargs) (line 227)
        set_filternorm_call_result_62954 = invoke(stypy.reporting.localization.Localization(__file__, 227, 8), set_filternorm_62951, *[filternorm_62952], **kwargs_62953)
        
        
        # Call to set_filterrad(...): (line 228)
        # Processing the call arguments (line 228)
        # Getting the type of 'filterrad' (line 228)
        filterrad_62957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 27), 'filterrad', False)
        # Processing the call keyword arguments (line 228)
        kwargs_62958 = {}
        # Getting the type of 'self' (line 228)
        self_62955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 228, 8), 'self', False)
        # Obtaining the member 'set_filterrad' of a type (line 228)
        set_filterrad_62956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 228, 8), self_62955, 'set_filterrad')
        # Calling set_filterrad(args, kwargs) (line 228)
        set_filterrad_call_result_62959 = invoke(stypy.reporting.localization.Localization(__file__, 228, 8), set_filterrad_62956, *[filterrad_62957], **kwargs_62958)
        
        
        # Call to set_interpolation(...): (line 229)
        # Processing the call arguments (line 229)
        # Getting the type of 'interpolation' (line 229)
        interpolation_62962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 31), 'interpolation', False)
        # Processing the call keyword arguments (line 229)
        kwargs_62963 = {}
        # Getting the type of 'self' (line 229)
        self_62960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 8), 'self', False)
        # Obtaining the member 'set_interpolation' of a type (line 229)
        set_interpolation_62961 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 8), self_62960, 'set_interpolation')
        # Calling set_interpolation(args, kwargs) (line 229)
        set_interpolation_call_result_62964 = invoke(stypy.reporting.localization.Localization(__file__, 229, 8), set_interpolation_62961, *[interpolation_62962], **kwargs_62963)
        
        
        # Call to set_resample(...): (line 230)
        # Processing the call arguments (line 230)
        # Getting the type of 'resample' (line 230)
        resample_62967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 26), 'resample', False)
        # Processing the call keyword arguments (line 230)
        kwargs_62968 = {}
        # Getting the type of 'self' (line 230)
        self_62965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 230, 8), 'self', False)
        # Obtaining the member 'set_resample' of a type (line 230)
        set_resample_62966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 230, 8), self_62965, 'set_resample')
        # Calling set_resample(args, kwargs) (line 230)
        set_resample_call_result_62969 = invoke(stypy.reporting.localization.Localization(__file__, 230, 8), set_resample_62966, *[resample_62967], **kwargs_62968)
        
        
        # Assigning a Name to a Attribute (line 231):
        
        # Assigning a Name to a Attribute (line 231):
        # Getting the type of 'ax' (line 231)
        ax_62970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 20), 'ax')
        # Getting the type of 'self' (line 231)
        self_62971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 8), 'self')
        # Setting the type of the member 'axes' of a type (line 231)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 8), self_62971, 'axes', ax_62970)
        
        # Assigning a Name to a Attribute (line 233):
        
        # Assigning a Name to a Attribute (line 233):
        # Getting the type of 'None' (line 233)
        None_62972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 24), 'None')
        # Getting the type of 'self' (line 233)
        self_62973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 233, 8), 'self')
        # Setting the type of the member '_imcache' of a type (line 233)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 233, 8), self_62973, '_imcache', None_62972)
        
        # Call to update(...): (line 235)
        # Processing the call arguments (line 235)
        # Getting the type of 'kwargs' (line 235)
        kwargs_62976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 20), 'kwargs', False)
        # Processing the call keyword arguments (line 235)
        kwargs_62977 = {}
        # Getting the type of 'self' (line 235)
        self_62974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 235, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 235)
        update_62975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 235, 8), self_62974, 'update')
        # Calling update(args, kwargs) (line 235)
        update_call_result_62978 = invoke(stypy.reporting.localization.Localization(__file__, 235, 8), update_62975, *[kwargs_62976], **kwargs_62977)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def __getstate__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__getstate__'
        module_type_store = module_type_store.open_function_context('__getstate__', 237, 4, False)
        # Assigning a type to the variable 'self' (line 238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.__getstate__.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.__getstate__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.__getstate__.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.__getstate__.__dict__.__setitem__('stypy_function_name', '_ImageBase.__getstate__')
        _ImageBase.__getstate__.__dict__.__setitem__('stypy_param_names_list', [])
        _ImageBase.__getstate__.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.__getstate__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.__getstate__.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.__getstate__.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.__getstate__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.__getstate__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.__getstate__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__getstate__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__getstate__(...)' code ##################

        
        # Assigning a Call to a Name (line 238):
        
        # Assigning a Call to a Name (line 238):
        
        # Call to __getstate__(...): (line 238)
        # Processing the call keyword arguments (line 238)
        kwargs_62985 = {}
        
        # Call to super(...): (line 238)
        # Processing the call arguments (line 238)
        # Getting the type of '_ImageBase' (line 238)
        _ImageBase_62980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 22), '_ImageBase', False)
        # Getting the type of 'self' (line 238)
        self_62981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 34), 'self', False)
        # Processing the call keyword arguments (line 238)
        kwargs_62982 = {}
        # Getting the type of 'super' (line 238)
        super_62979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 238, 16), 'super', False)
        # Calling super(args, kwargs) (line 238)
        super_call_result_62983 = invoke(stypy.reporting.localization.Localization(__file__, 238, 16), super_62979, *[_ImageBase_62980, self_62981], **kwargs_62982)
        
        # Obtaining the member '__getstate__' of a type (line 238)
        getstate___62984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 238, 16), super_call_result_62983, '__getstate__')
        # Calling __getstate__(args, kwargs) (line 238)
        getstate___call_result_62986 = invoke(stypy.reporting.localization.Localization(__file__, 238, 16), getstate___62984, *[], **kwargs_62985)
        
        # Assigning a type to the variable 'state' (line 238)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 238, 8), 'state', getstate___call_result_62986)
        
        # Assigning a Name to a Subscript (line 240):
        
        # Assigning a Name to a Subscript (line 240):
        # Getting the type of 'None' (line 240)
        None_62987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 28), 'None')
        # Getting the type of 'state' (line 240)
        state_62988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 240, 8), 'state')
        unicode_62989 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 240, 14), 'unicode', u'_imcache')
        # Storing an element on a container (line 240)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 240, 8), state_62988, (unicode_62989, None_62987))
        # Getting the type of 'state' (line 241)
        state_62990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 241, 15), 'state')
        # Assigning a type to the variable 'stypy_return_type' (line 241)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 241, 8), 'stypy_return_type', state_62990)
        
        # ################# End of '__getstate__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__getstate__' in the type store
        # Getting the type of 'stypy_return_type' (line 237)
        stypy_return_type_62991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 237, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_62991)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__getstate__'
        return stypy_return_type_62991


    @norecursion
    def get_size(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_size'
        module_type_store = module_type_store.open_function_context('get_size', 243, 4, False)
        # Assigning a type to the variable 'self' (line 244)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 244, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.get_size.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.get_size.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.get_size.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.get_size.__dict__.__setitem__('stypy_function_name', '_ImageBase.get_size')
        _ImageBase.get_size.__dict__.__setitem__('stypy_param_names_list', [])
        _ImageBase.get_size.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.get_size.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.get_size.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.get_size.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.get_size.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.get_size.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.get_size', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_size', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_size(...)' code ##################

        unicode_62992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 244, 8), 'unicode', u'Get the numrows, numcols of the input image')
        
        # Type idiom detected: calculating its left and rigth part (line 245)
        # Getting the type of 'self' (line 245)
        self_62993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 11), 'self')
        # Obtaining the member '_A' of a type (line 245)
        _A_62994 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 245, 11), self_62993, '_A')
        # Getting the type of 'None' (line 245)
        None_62995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 245, 22), 'None')
        
        (may_be_62996, more_types_in_union_62997) = may_be_none(_A_62994, None_62995)

        if may_be_62996:

            if more_types_in_union_62997:
                # Runtime conditional SSA (line 245)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to RuntimeError(...): (line 246)
            # Processing the call arguments (line 246)
            unicode_62999 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 246, 31), 'unicode', u'You must first set the image array')
            # Processing the call keyword arguments (line 246)
            kwargs_63000 = {}
            # Getting the type of 'RuntimeError' (line 246)
            RuntimeError_62998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 246, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 246)
            RuntimeError_call_result_63001 = invoke(stypy.reporting.localization.Localization(__file__, 246, 18), RuntimeError_62998, *[unicode_62999], **kwargs_63000)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 246, 12), RuntimeError_call_result_63001, 'raise parameter', BaseException)

            if more_types_in_union_62997:
                # SSA join for if statement (line 245)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Obtaining the type of the subscript
        int_63002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 248, 30), 'int')
        slice_63003 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 248, 15), None, int_63002, None)
        # Getting the type of 'self' (line 248)
        self_63004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 248, 15), 'self')
        # Obtaining the member '_A' of a type (line 248)
        _A_63005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 15), self_63004, '_A')
        # Obtaining the member 'shape' of a type (line 248)
        shape_63006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 15), _A_63005, 'shape')
        # Obtaining the member '__getitem__' of a type (line 248)
        getitem___63007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 248, 15), shape_63006, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 248)
        subscript_call_result_63008 = invoke(stypy.reporting.localization.Localization(__file__, 248, 15), getitem___63007, slice_63003)
        
        # Assigning a type to the variable 'stypy_return_type' (line 248)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 248, 8), 'stypy_return_type', subscript_call_result_63008)
        
        # ################# End of 'get_size(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_size' in the type store
        # Getting the type of 'stypy_return_type' (line 243)
        stypy_return_type_63009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 243, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_63009)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_size'
        return stypy_return_type_63009


    @norecursion
    def set_alpha(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_alpha'
        module_type_store = module_type_store.open_function_context('set_alpha', 250, 4, False)
        # Assigning a type to the variable 'self' (line 251)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.set_alpha.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.set_alpha.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.set_alpha.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.set_alpha.__dict__.__setitem__('stypy_function_name', '_ImageBase.set_alpha')
        _ImageBase.set_alpha.__dict__.__setitem__('stypy_param_names_list', ['alpha'])
        _ImageBase.set_alpha.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.set_alpha.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.set_alpha.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.set_alpha.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.set_alpha.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.set_alpha.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.set_alpha', ['alpha'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_alpha', localization, ['alpha'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_alpha(...)' code ##################

        unicode_63010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 256, (-1)), 'unicode', u'\n        Set the alpha value used for blending - not supported on\n        all backends\n\n        ACCEPTS: float\n        ')
        
        # Call to set_alpha(...): (line 257)
        # Processing the call arguments (line 257)
        # Getting the type of 'self' (line 257)
        self_63014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 33), 'self', False)
        # Getting the type of 'alpha' (line 257)
        alpha_63015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 39), 'alpha', False)
        # Processing the call keyword arguments (line 257)
        kwargs_63016 = {}
        # Getting the type of 'martist' (line 257)
        martist_63011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 257, 8), 'martist', False)
        # Obtaining the member 'Artist' of a type (line 257)
        Artist_63012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 8), martist_63011, 'Artist')
        # Obtaining the member 'set_alpha' of a type (line 257)
        set_alpha_63013 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 257, 8), Artist_63012, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 257)
        set_alpha_call_result_63017 = invoke(stypy.reporting.localization.Localization(__file__, 257, 8), set_alpha_63013, *[self_63014, alpha_63015], **kwargs_63016)
        
        
        # Assigning a Name to a Attribute (line 258):
        
        # Assigning a Name to a Attribute (line 258):
        # Getting the type of 'None' (line 258)
        None_63018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 24), 'None')
        # Getting the type of 'self' (line 258)
        self_63019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 8), 'self')
        # Setting the type of the member '_imcache' of a type (line 258)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 8), self_63019, '_imcache', None_63018)
        
        # ################# End of 'set_alpha(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_alpha' in the type store
        # Getting the type of 'stypy_return_type' (line 250)
        stypy_return_type_63020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 250, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_63020)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_alpha'
        return stypy_return_type_63020


    @norecursion
    def changed(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'changed'
        module_type_store = module_type_store.open_function_context('changed', 260, 4, False)
        # Assigning a type to the variable 'self' (line 261)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.changed.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.changed.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.changed.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.changed.__dict__.__setitem__('stypy_function_name', '_ImageBase.changed')
        _ImageBase.changed.__dict__.__setitem__('stypy_param_names_list', [])
        _ImageBase.changed.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.changed.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.changed.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.changed.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.changed.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.changed.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.changed', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'changed', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'changed(...)' code ##################

        unicode_63021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 264, (-1)), 'unicode', u'\n        Call this whenever the mappable is changed so observers can\n        update state\n        ')
        
        # Assigning a Name to a Attribute (line 265):
        
        # Assigning a Name to a Attribute (line 265):
        # Getting the type of 'None' (line 265)
        None_63022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 24), 'None')
        # Getting the type of 'self' (line 265)
        self_63023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 265, 8), 'self')
        # Setting the type of the member '_imcache' of a type (line 265)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 265, 8), self_63023, '_imcache', None_63022)
        
        # Assigning a Name to a Attribute (line 266):
        
        # Assigning a Name to a Attribute (line 266):
        # Getting the type of 'None' (line 266)
        None_63024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 26), 'None')
        # Getting the type of 'self' (line 266)
        self_63025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 266, 8), 'self')
        # Setting the type of the member '_rgbacache' of a type (line 266)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 266, 8), self_63025, '_rgbacache', None_63024)
        
        # Call to changed(...): (line 267)
        # Processing the call arguments (line 267)
        # Getting the type of 'self' (line 267)
        self_63029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 34), 'self', False)
        # Processing the call keyword arguments (line 267)
        kwargs_63030 = {}
        # Getting the type of 'cm' (line 267)
        cm_63026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 8), 'cm', False)
        # Obtaining the member 'ScalarMappable' of a type (line 267)
        ScalarMappable_63027 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 8), cm_63026, 'ScalarMappable')
        # Obtaining the member 'changed' of a type (line 267)
        changed_63028 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 267, 8), ScalarMappable_63027, 'changed')
        # Calling changed(args, kwargs) (line 267)
        changed_call_result_63031 = invoke(stypy.reporting.localization.Localization(__file__, 267, 8), changed_63028, *[self_63029], **kwargs_63030)
        
        
        # ################# End of 'changed(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'changed' in the type store
        # Getting the type of 'stypy_return_type' (line 260)
        stypy_return_type_63032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 260, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_63032)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'changed'
        return stypy_return_type_63032


    @norecursion
    def _make_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_63033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 269, 73), 'float')
        # Getting the type of 'False' (line 270)
        False_63034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 30), 'False')
        # Getting the type of 'True' (line 270)
        True_63035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 59), 'True')
        defaults = [float_63033, False_63034, True_63035]
        # Create a new context for function '_make_image'
        module_type_store = module_type_store.open_function_context('_make_image', 269, 4, False)
        # Assigning a type to the variable 'self' (line 270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 270, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase._make_image.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase._make_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase._make_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase._make_image.__dict__.__setitem__('stypy_function_name', '_ImageBase._make_image')
        _ImageBase._make_image.__dict__.__setitem__('stypy_param_names_list', ['A', 'in_bbox', 'out_bbox', 'clip_bbox', 'magnification', 'unsampled', 'round_to_pixel_border'])
        _ImageBase._make_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase._make_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase._make_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase._make_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase._make_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase._make_image.__dict__.__setitem__('stypy_declared_arg_number', 8)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase._make_image', ['A', 'in_bbox', 'out_bbox', 'clip_bbox', 'magnification', 'unsampled', 'round_to_pixel_border'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_make_image', localization, ['A', 'in_bbox', 'out_bbox', 'clip_bbox', 'magnification', 'unsampled', 'round_to_pixel_border'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_make_image(...)' code ##################

        unicode_63036 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 294, (-1)), 'unicode', u'\n        Normalize, rescale and color the image `A` from the given\n        in_bbox (in data space), to the given out_bbox (in pixel\n        space) clipped to the given clip_bbox (also in pixel space),\n        and magnified by the magnification factor.\n\n        `A` may be a greyscale image (MxN) with a dtype of `float32`,\n        `float64`, `uint16` or `uint8`, or an RGBA image (MxNx4) with\n        a dtype of `float32`, `float64`, or `uint8`.\n\n        If `unsampled` is True, the image will not be scaled, but an\n        appropriate affine transformation will be returned instead.\n\n        If `round_to_pixel_border` is True, the output image size will\n        be rounded to the nearest pixel boundary.  This makes the\n        images align correctly with the axes.  It should not be used\n        in cases where you want exact scaling, however, such as\n        FigureImage.\n\n        Returns the resulting (image, x, y, trans), where (x, y) is\n        the upper left corner of the result in pixel space, and\n        `trans` is the affine transformation from the image to pixel\n        space.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 295)
        # Getting the type of 'A' (line 295)
        A_63037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 11), 'A')
        # Getting the type of 'None' (line 295)
        None_63038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 295, 16), 'None')
        
        (may_be_63039, more_types_in_union_63040) = may_be_none(A_63037, None_63038)

        if may_be_63039:

            if more_types_in_union_63040:
                # Runtime conditional SSA (line 295)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to RuntimeError(...): (line 296)
            # Processing the call arguments (line 296)
            unicode_63042 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 296, 31), 'unicode', u'You must first set the image array or the image attribute')
            # Processing the call keyword arguments (line 296)
            kwargs_63043 = {}
            # Getting the type of 'RuntimeError' (line 296)
            RuntimeError_63041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 296, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 296)
            RuntimeError_call_result_63044 = invoke(stypy.reporting.localization.Localization(__file__, 296, 18), RuntimeError_63041, *[unicode_63042], **kwargs_63043)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 296, 12), RuntimeError_call_result_63044, 'raise parameter', BaseException)

            if more_types_in_union_63040:
                # SSA join for if statement (line 295)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Getting the type of 'A' (line 298)
        A_63045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 298, 11), 'A')
        # Obtaining the member 'size' of a type (line 298)
        size_63046 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 298, 11), A_63045, 'size')
        int_63047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 298, 21), 'int')
        # Applying the binary operator '==' (line 298)
        result_eq_63048 = python_operator(stypy.reporting.localization.Localization(__file__, 298, 11), '==', size_63046, int_63047)
        
        # Testing the type of an if condition (line 298)
        if_condition_63049 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 298, 8), result_eq_63048)
        # Assigning a type to the variable 'if_condition_63049' (line 298)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 298, 8), 'if_condition_63049', if_condition_63049)
        # SSA begins for if statement (line 298)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 299)
        # Processing the call arguments (line 299)
        unicode_63051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 299, 31), 'unicode', u"_make_image must get a non-empty image. Your Artist's draw method must filter before this method is called.")
        # Processing the call keyword arguments (line 299)
        kwargs_63052 = {}
        # Getting the type of 'RuntimeError' (line 299)
        RuntimeError_63050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 299)
        RuntimeError_call_result_63053 = invoke(stypy.reporting.localization.Localization(__file__, 299, 18), RuntimeError_63050, *[unicode_63051], **kwargs_63052)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 299, 12), RuntimeError_call_result_63053, 'raise parameter', BaseException)
        # SSA join for if statement (line 298)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 303):
        
        # Assigning a Call to a Name (line 303):
        
        # Call to intersection(...): (line 303)
        # Processing the call arguments (line 303)
        # Getting the type of 'out_bbox' (line 303)
        out_bbox_63056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 41), 'out_bbox', False)
        # Getting the type of 'clip_bbox' (line 303)
        clip_bbox_63057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 51), 'clip_bbox', False)
        # Processing the call keyword arguments (line 303)
        kwargs_63058 = {}
        # Getting the type of 'Bbox' (line 303)
        Bbox_63054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 23), 'Bbox', False)
        # Obtaining the member 'intersection' of a type (line 303)
        intersection_63055 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 303, 23), Bbox_63054, 'intersection')
        # Calling intersection(args, kwargs) (line 303)
        intersection_call_result_63059 = invoke(stypy.reporting.localization.Localization(__file__, 303, 23), intersection_63055, *[out_bbox_63056, clip_bbox_63057], **kwargs_63058)
        
        # Assigning a type to the variable 'clipped_bbox' (line 303)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 303, 8), 'clipped_bbox', intersection_call_result_63059)
        
        # Type idiom detected: calculating its left and rigth part (line 305)
        # Getting the type of 'clipped_bbox' (line 305)
        clipped_bbox_63060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 11), 'clipped_bbox')
        # Getting the type of 'None' (line 305)
        None_63061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 305, 27), 'None')
        
        (may_be_63062, more_types_in_union_63063) = may_be_none(clipped_bbox_63060, None_63061)

        if may_be_63062:

            if more_types_in_union_63063:
                # Runtime conditional SSA (line 305)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Obtaining an instance of the builtin type 'tuple' (line 306)
            tuple_63064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, 19), 'tuple')
            # Adding type elements to the builtin type 'tuple' instance (line 306)
            # Adding element type (line 306)
            # Getting the type of 'None' (line 306)
            None_63065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 19), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 306, 19), tuple_63064, None_63065)
            # Adding element type (line 306)
            int_63066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, 25), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 306, 19), tuple_63064, int_63066)
            # Adding element type (line 306)
            int_63067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 306, 28), 'int')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 306, 19), tuple_63064, int_63067)
            # Adding element type (line 306)
            # Getting the type of 'None' (line 306)
            None_63068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 306, 31), 'None')
            add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 306, 19), tuple_63064, None_63068)
            
            # Assigning a type to the variable 'stypy_return_type' (line 306)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 306, 12), 'stypy_return_type', tuple_63064)

            if more_types_in_union_63063:
                # SSA join for if statement (line 305)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a BinOp to a Name (line 308):
        
        # Assigning a BinOp to a Name (line 308):
        # Getting the type of 'clipped_bbox' (line 308)
        clipped_bbox_63069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 25), 'clipped_bbox')
        # Obtaining the member 'width' of a type (line 308)
        width_63070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 308, 25), clipped_bbox_63069, 'width')
        # Getting the type of 'magnification' (line 308)
        magnification_63071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 308, 46), 'magnification')
        # Applying the binary operator '*' (line 308)
        result_mul_63072 = python_operator(stypy.reporting.localization.Localization(__file__, 308, 25), '*', width_63070, magnification_63071)
        
        # Assigning a type to the variable 'out_width_base' (line 308)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 308, 8), 'out_width_base', result_mul_63072)
        
        # Assigning a BinOp to a Name (line 309):
        
        # Assigning a BinOp to a Name (line 309):
        # Getting the type of 'clipped_bbox' (line 309)
        clipped_bbox_63073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 26), 'clipped_bbox')
        # Obtaining the member 'height' of a type (line 309)
        height_63074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 26), clipped_bbox_63073, 'height')
        # Getting the type of 'magnification' (line 309)
        magnification_63075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 48), 'magnification')
        # Applying the binary operator '*' (line 309)
        result_mul_63076 = python_operator(stypy.reporting.localization.Localization(__file__, 309, 26), '*', height_63074, magnification_63075)
        
        # Assigning a type to the variable 'out_height_base' (line 309)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 309, 8), 'out_height_base', result_mul_63076)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'out_width_base' (line 311)
        out_width_base_63077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 11), 'out_width_base')
        int_63078 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 311, 29), 'int')
        # Applying the binary operator '==' (line 311)
        result_eq_63079 = python_operator(stypy.reporting.localization.Localization(__file__, 311, 11), '==', out_width_base_63077, int_63078)
        
        
        # Getting the type of 'out_height_base' (line 311)
        out_height_base_63080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 34), 'out_height_base')
        int_63081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 311, 53), 'int')
        # Applying the binary operator '==' (line 311)
        result_eq_63082 = python_operator(stypy.reporting.localization.Localization(__file__, 311, 34), '==', out_height_base_63080, int_63081)
        
        # Applying the binary operator 'or' (line 311)
        result_or_keyword_63083 = python_operator(stypy.reporting.localization.Localization(__file__, 311, 11), 'or', result_eq_63079, result_eq_63082)
        
        # Testing the type of an if condition (line 311)
        if_condition_63084 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 311, 8), result_or_keyword_63083)
        # Assigning a type to the variable 'if_condition_63084' (line 311)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 311, 8), 'if_condition_63084', if_condition_63084)
        # SSA begins for if statement (line 311)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 312)
        tuple_63085 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 312)
        # Adding element type (line 312)
        # Getting the type of 'None' (line 312)
        None_63086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 19), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 312, 19), tuple_63085, None_63086)
        # Adding element type (line 312)
        int_63087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 312, 19), tuple_63085, int_63087)
        # Adding element type (line 312)
        int_63088 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 312, 28), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 312, 19), tuple_63085, int_63088)
        # Adding element type (line 312)
        # Getting the type of 'None' (line 312)
        None_63089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 312, 31), 'None')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 312, 19), tuple_63085, None_63089)
        
        # Assigning a type to the variable 'stypy_return_type' (line 312)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 312, 12), 'stypy_return_type', tuple_63085)
        # SSA join for if statement (line 311)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'self' (line 314)
        self_63090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 314, 11), 'self')
        # Obtaining the member 'origin' of a type (line 314)
        origin_63091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 314, 11), self_63090, 'origin')
        unicode_63092 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 314, 26), 'unicode', u'upper')
        # Applying the binary operator '==' (line 314)
        result_eq_63093 = python_operator(stypy.reporting.localization.Localization(__file__, 314, 11), '==', origin_63091, unicode_63092)
        
        # Testing the type of an if condition (line 314)
        if_condition_63094 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 314, 8), result_eq_63093)
        # Assigning a type to the variable 'if_condition_63094' (line 314)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 314, 8), 'if_condition_63094', if_condition_63094)
        # SSA begins for if statement (line 314)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 318):
        
        # Assigning a Call to a Name (line 318):
        
        # Call to scale(...): (line 318)
        # Processing the call arguments (line 318)
        int_63109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 60), 'int')
        int_63110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 63), 'int')
        # Processing the call keyword arguments (line 318)
        kwargs_63111 = {}
        
        # Call to translate(...): (line 318)
        # Processing the call arguments (line 318)
        int_63099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 38), 'int')
        
        
        # Obtaining the type of the subscript
        int_63100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 318, 50), 'int')
        # Getting the type of 'A' (line 318)
        A_63101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 42), 'A', False)
        # Obtaining the member 'shape' of a type (line 318)
        shape_63102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 42), A_63101, 'shape')
        # Obtaining the member '__getitem__' of a type (line 318)
        getitem___63103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 42), shape_63102, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 318)
        subscript_call_result_63104 = invoke(stypy.reporting.localization.Localization(__file__, 318, 42), getitem___63103, int_63100)
        
        # Applying the 'usub' unary operator (line 318)
        result___neg___63105 = python_operator(stypy.reporting.localization.Localization(__file__, 318, 41), 'usub', subscript_call_result_63104)
        
        # Processing the call keyword arguments (line 318)
        kwargs_63106 = {}
        
        # Call to Affine2D(...): (line 318)
        # Processing the call keyword arguments (line 318)
        kwargs_63096 = {}
        # Getting the type of 'Affine2D' (line 318)
        Affine2D_63095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 318, 17), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 318)
        Affine2D_call_result_63097 = invoke(stypy.reporting.localization.Localization(__file__, 318, 17), Affine2D_63095, *[], **kwargs_63096)
        
        # Obtaining the member 'translate' of a type (line 318)
        translate_63098 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 17), Affine2D_call_result_63097, 'translate')
        # Calling translate(args, kwargs) (line 318)
        translate_call_result_63107 = invoke(stypy.reporting.localization.Localization(__file__, 318, 17), translate_63098, *[int_63099, result___neg___63105], **kwargs_63106)
        
        # Obtaining the member 'scale' of a type (line 318)
        scale_63108 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 318, 17), translate_call_result_63107, 'scale')
        # Calling scale(args, kwargs) (line 318)
        scale_call_result_63112 = invoke(stypy.reporting.localization.Localization(__file__, 318, 17), scale_63108, *[int_63109, int_63110], **kwargs_63111)
        
        # Assigning a type to the variable 't0' (line 318)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 318, 12), 't0', scale_call_result_63112)
        # SSA branch for the else part of an if statement (line 314)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 320):
        
        # Assigning a Call to a Name (line 320):
        
        # Call to IdentityTransform(...): (line 320)
        # Processing the call keyword arguments (line 320)
        kwargs_63114 = {}
        # Getting the type of 'IdentityTransform' (line 320)
        IdentityTransform_63113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 320, 17), 'IdentityTransform', False)
        # Calling IdentityTransform(args, kwargs) (line 320)
        IdentityTransform_call_result_63115 = invoke(stypy.reporting.localization.Localization(__file__, 320, 17), IdentityTransform_63113, *[], **kwargs_63114)
        
        # Assigning a type to the variable 't0' (line 320)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 320, 12), 't0', IdentityTransform_call_result_63115)
        # SSA join for if statement (line 314)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 't0' (line 322)
        t0_63116 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 't0')
        
        # Call to translate(...): (line 323)
        # Processing the call arguments (line 323)
        # Getting the type of 'in_bbox' (line 327)
        in_bbox_63140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 23), 'in_bbox', False)
        # Obtaining the member 'x0' of a type (line 327)
        x0_63141 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 23), in_bbox_63140, 'x0')
        # Getting the type of 'in_bbox' (line 327)
        in_bbox_63142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 327, 35), 'in_bbox', False)
        # Obtaining the member 'y0' of a type (line 327)
        y0_63143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 327, 35), in_bbox_63142, 'y0')
        # Processing the call keyword arguments (line 323)
        kwargs_63144 = {}
        
        # Call to scale(...): (line 323)
        # Processing the call arguments (line 323)
        # Getting the type of 'in_bbox' (line 325)
        in_bbox_63121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 16), 'in_bbox', False)
        # Obtaining the member 'width' of a type (line 325)
        width_63122 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 16), in_bbox_63121, 'width')
        
        # Obtaining the type of the subscript
        int_63123 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 325, 40), 'int')
        # Getting the type of 'A' (line 325)
        A_63124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 325, 32), 'A', False)
        # Obtaining the member 'shape' of a type (line 325)
        shape_63125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 32), A_63124, 'shape')
        # Obtaining the member '__getitem__' of a type (line 325)
        getitem___63126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 325, 32), shape_63125, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 325)
        subscript_call_result_63127 = invoke(stypy.reporting.localization.Localization(__file__, 325, 32), getitem___63126, int_63123)
        
        # Applying the binary operator 'div' (line 325)
        result_div_63128 = python_operator(stypy.reporting.localization.Localization(__file__, 325, 16), 'div', width_63122, subscript_call_result_63127)
        
        # Getting the type of 'in_bbox' (line 326)
        in_bbox_63129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 16), 'in_bbox', False)
        # Obtaining the member 'height' of a type (line 326)
        height_63130 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 16), in_bbox_63129, 'height')
        
        # Obtaining the type of the subscript
        int_63131 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 326, 41), 'int')
        # Getting the type of 'A' (line 326)
        A_63132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 326, 33), 'A', False)
        # Obtaining the member 'shape' of a type (line 326)
        shape_63133 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 33), A_63132, 'shape')
        # Obtaining the member '__getitem__' of a type (line 326)
        getitem___63134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 326, 33), shape_63133, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 326)
        subscript_call_result_63135 = invoke(stypy.reporting.localization.Localization(__file__, 326, 33), getitem___63134, int_63131)
        
        # Applying the binary operator 'div' (line 326)
        result_div_63136 = python_operator(stypy.reporting.localization.Localization(__file__, 326, 16), 'div', height_63130, subscript_call_result_63135)
        
        # Processing the call keyword arguments (line 323)
        kwargs_63137 = {}
        
        # Call to Affine2D(...): (line 323)
        # Processing the call keyword arguments (line 323)
        kwargs_63118 = {}
        # Getting the type of 'Affine2D' (line 323)
        Affine2D_63117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 323, 12), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 323)
        Affine2D_call_result_63119 = invoke(stypy.reporting.localization.Localization(__file__, 323, 12), Affine2D_63117, *[], **kwargs_63118)
        
        # Obtaining the member 'scale' of a type (line 323)
        scale_63120 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 12), Affine2D_call_result_63119, 'scale')
        # Calling scale(args, kwargs) (line 323)
        scale_call_result_63138 = invoke(stypy.reporting.localization.Localization(__file__, 323, 12), scale_63120, *[result_div_63128, result_div_63136], **kwargs_63137)
        
        # Obtaining the member 'translate' of a type (line 323)
        translate_63139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 323, 12), scale_call_result_63138, 'translate')
        # Calling translate(args, kwargs) (line 323)
        translate_call_result_63145 = invoke(stypy.reporting.localization.Localization(__file__, 323, 12), translate_63139, *[x0_63141, y0_63143], **kwargs_63144)
        
        
        # Call to get_transform(...): (line 328)
        # Processing the call keyword arguments (line 328)
        kwargs_63148 = {}
        # Getting the type of 'self' (line 328)
        self_63146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 328, 14), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 328)
        get_transform_63147 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 328, 14), self_63146, 'get_transform')
        # Calling get_transform(args, kwargs) (line 328)
        get_transform_call_result_63149 = invoke(stypy.reporting.localization.Localization(__file__, 328, 14), get_transform_63147, *[], **kwargs_63148)
        
        # Applying the binary operator '+' (line 323)
        result_add_63150 = python_operator(stypy.reporting.localization.Localization(__file__, 323, 12), '+', translate_call_result_63145, get_transform_call_result_63149)
        
        # Applying the binary operator '+=' (line 322)
        result_iadd_63151 = python_operator(stypy.reporting.localization.Localization(__file__, 322, 8), '+=', t0_63116, result_add_63150)
        # Assigning a type to the variable 't0' (line 322)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 322, 8), 't0', result_iadd_63151)
        
        
        # Assigning a BinOp to a Name (line 330):
        
        # Assigning a BinOp to a Name (line 330):
        # Getting the type of 't0' (line 330)
        t0_63152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 330, 13), 't0')
        
        # Call to scale(...): (line 331)
        # Processing the call arguments (line 331)
        # Getting the type of 'magnification' (line 334)
        magnification_63166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 20), 'magnification', False)
        # Getting the type of 'magnification' (line 334)
        magnification_63167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 35), 'magnification', False)
        # Processing the call keyword arguments (line 331)
        kwargs_63168 = {}
        
        # Call to translate(...): (line 331)
        # Processing the call arguments (line 331)
        
        # Getting the type of 'clipped_bbox' (line 332)
        clipped_bbox_63157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 332, 18), 'clipped_bbox', False)
        # Obtaining the member 'x0' of a type (line 332)
        x0_63158 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 332, 18), clipped_bbox_63157, 'x0')
        # Applying the 'usub' unary operator (line 332)
        result___neg___63159 = python_operator(stypy.reporting.localization.Localization(__file__, 332, 17), 'usub', x0_63158)
        
        
        # Getting the type of 'clipped_bbox' (line 333)
        clipped_bbox_63160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 333, 18), 'clipped_bbox', False)
        # Obtaining the member 'y0' of a type (line 333)
        y0_63161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 333, 18), clipped_bbox_63160, 'y0')
        # Applying the 'usub' unary operator (line 333)
        result___neg___63162 = python_operator(stypy.reporting.localization.Localization(__file__, 333, 17), 'usub', y0_63161)
        
        # Processing the call keyword arguments (line 331)
        kwargs_63163 = {}
        
        # Call to Affine2D(...): (line 331)
        # Processing the call keyword arguments (line 331)
        kwargs_63154 = {}
        # Getting the type of 'Affine2D' (line 331)
        Affine2D_63153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 15), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 331)
        Affine2D_call_result_63155 = invoke(stypy.reporting.localization.Localization(__file__, 331, 15), Affine2D_63153, *[], **kwargs_63154)
        
        # Obtaining the member 'translate' of a type (line 331)
        translate_63156 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 15), Affine2D_call_result_63155, 'translate')
        # Calling translate(args, kwargs) (line 331)
        translate_call_result_63164 = invoke(stypy.reporting.localization.Localization(__file__, 331, 15), translate_63156, *[result___neg___63159, result___neg___63162], **kwargs_63163)
        
        # Obtaining the member 'scale' of a type (line 331)
        scale_63165 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 15), translate_call_result_63164, 'scale')
        # Calling scale(args, kwargs) (line 331)
        scale_call_result_63169 = invoke(stypy.reporting.localization.Localization(__file__, 331, 15), scale_63165, *[magnification_63166, magnification_63167], **kwargs_63168)
        
        # Applying the binary operator '+' (line 330)
        result_add_63170 = python_operator(stypy.reporting.localization.Localization(__file__, 330, 13), '+', t0_63152, scale_call_result_63169)
        
        # Assigning a type to the variable 't' (line 330)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 330, 8), 't', result_add_63170)
        
        
        # Evaluating a boolean operation
        # Getting the type of 't' (line 340)
        t_63171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 12), 't')
        # Obtaining the member 'is_affine' of a type (line 340)
        is_affine_63172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 340, 12), t_63171, 'is_affine')
        # Getting the type of 'round_to_pixel_border' (line 340)
        round_to_pixel_border_63173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 340, 28), 'round_to_pixel_border')
        # Applying the binary operator 'and' (line 340)
        result_and_keyword_63174 = python_operator(stypy.reporting.localization.Localization(__file__, 340, 12), 'and', is_affine_63172, round_to_pixel_border_63173)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'out_width_base' (line 341)
        out_width_base_63175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 17), 'out_width_base')
        float_63176 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, 34), 'float')
        # Applying the binary operator '%' (line 341)
        result_mod_63177 = python_operator(stypy.reporting.localization.Localization(__file__, 341, 17), '%', out_width_base_63175, float_63176)
        
        float_63178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, 41), 'float')
        # Applying the binary operator '!=' (line 341)
        result_ne_63179 = python_operator(stypy.reporting.localization.Localization(__file__, 341, 17), '!=', result_mod_63177, float_63178)
        
        
        # Getting the type of 'out_height_base' (line 341)
        out_height_base_63180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 341, 48), 'out_height_base')
        float_63181 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, 66), 'float')
        # Applying the binary operator '%' (line 341)
        result_mod_63182 = python_operator(stypy.reporting.localization.Localization(__file__, 341, 48), '%', out_height_base_63180, float_63181)
        
        float_63183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, 73), 'float')
        # Applying the binary operator '!=' (line 341)
        result_ne_63184 = python_operator(stypy.reporting.localization.Localization(__file__, 341, 48), '!=', result_mod_63182, float_63183)
        
        # Applying the binary operator 'or' (line 341)
        result_or_keyword_63185 = python_operator(stypy.reporting.localization.Localization(__file__, 341, 17), 'or', result_ne_63179, result_ne_63184)
        
        # Applying the binary operator 'and' (line 340)
        result_and_keyword_63186 = python_operator(stypy.reporting.localization.Localization(__file__, 340, 12), 'and', result_and_keyword_63174, result_or_keyword_63185)
        
        # Testing the type of an if condition (line 340)
        if_condition_63187 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 340, 8), result_and_keyword_63186)
        # Assigning a type to the variable 'if_condition_63187' (line 340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 340, 8), 'if_condition_63187', if_condition_63187)
        # SSA begins for if statement (line 340)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 342):
        
        # Assigning a Call to a Name (line 342):
        
        # Call to int(...): (line 342)
        # Processing the call arguments (line 342)
        
        # Call to ceil(...): (line 342)
        # Processing the call arguments (line 342)
        # Getting the type of 'out_width_base' (line 342)
        out_width_base_63190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 33), 'out_width_base', False)
        # Processing the call keyword arguments (line 342)
        kwargs_63191 = {}
        # Getting the type of 'ceil' (line 342)
        ceil_63189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 28), 'ceil', False)
        # Calling ceil(args, kwargs) (line 342)
        ceil_call_result_63192 = invoke(stypy.reporting.localization.Localization(__file__, 342, 28), ceil_63189, *[out_width_base_63190], **kwargs_63191)
        
        # Processing the call keyword arguments (line 342)
        kwargs_63193 = {}
        # Getting the type of 'int' (line 342)
        int_63188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 24), 'int', False)
        # Calling int(args, kwargs) (line 342)
        int_call_result_63194 = invoke(stypy.reporting.localization.Localization(__file__, 342, 24), int_63188, *[ceil_call_result_63192], **kwargs_63193)
        
        # Assigning a type to the variable 'out_width' (line 342)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 342, 12), 'out_width', int_call_result_63194)
        
        # Assigning a Call to a Name (line 343):
        
        # Assigning a Call to a Name (line 343):
        
        # Call to int(...): (line 343)
        # Processing the call arguments (line 343)
        
        # Call to ceil(...): (line 343)
        # Processing the call arguments (line 343)
        # Getting the type of 'out_height_base' (line 343)
        out_height_base_63197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 34), 'out_height_base', False)
        # Processing the call keyword arguments (line 343)
        kwargs_63198 = {}
        # Getting the type of 'ceil' (line 343)
        ceil_63196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 29), 'ceil', False)
        # Calling ceil(args, kwargs) (line 343)
        ceil_call_result_63199 = invoke(stypy.reporting.localization.Localization(__file__, 343, 29), ceil_63196, *[out_height_base_63197], **kwargs_63198)
        
        # Processing the call keyword arguments (line 343)
        kwargs_63200 = {}
        # Getting the type of 'int' (line 343)
        int_63195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 343, 25), 'int', False)
        # Calling int(args, kwargs) (line 343)
        int_call_result_63201 = invoke(stypy.reporting.localization.Localization(__file__, 343, 25), int_63195, *[ceil_call_result_63199], **kwargs_63200)
        
        # Assigning a type to the variable 'out_height' (line 343)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 343, 12), 'out_height', int_call_result_63201)
        
        # Assigning a BinOp to a Name (line 344):
        
        # Assigning a BinOp to a Name (line 344):
        # Getting the type of 'out_width' (line 344)
        out_width_63202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 27), 'out_width')
        # Getting the type of 'out_width_base' (line 344)
        out_width_base_63203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 39), 'out_width_base')
        # Applying the binary operator '-' (line 344)
        result_sub_63204 = python_operator(stypy.reporting.localization.Localization(__file__, 344, 27), '-', out_width_63202, out_width_base_63203)
        
        # Getting the type of 'out_width_base' (line 344)
        out_width_base_63205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 344, 57), 'out_width_base')
        # Applying the binary operator 'div' (line 344)
        result_div_63206 = python_operator(stypy.reporting.localization.Localization(__file__, 344, 26), 'div', result_sub_63204, out_width_base_63205)
        
        # Assigning a type to the variable 'extra_width' (line 344)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 344, 12), 'extra_width', result_div_63206)
        
        # Assigning a BinOp to a Name (line 345):
        
        # Assigning a BinOp to a Name (line 345):
        # Getting the type of 'out_height' (line 345)
        out_height_63207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 28), 'out_height')
        # Getting the type of 'out_height_base' (line 345)
        out_height_base_63208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 41), 'out_height_base')
        # Applying the binary operator '-' (line 345)
        result_sub_63209 = python_operator(stypy.reporting.localization.Localization(__file__, 345, 28), '-', out_height_63207, out_height_base_63208)
        
        # Getting the type of 'out_height_base' (line 345)
        out_height_base_63210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 345, 60), 'out_height_base')
        # Applying the binary operator 'div' (line 345)
        result_div_63211 = python_operator(stypy.reporting.localization.Localization(__file__, 345, 27), 'div', result_sub_63209, out_height_base_63210)
        
        # Assigning a type to the variable 'extra_height' (line 345)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 345, 12), 'extra_height', result_div_63211)
        
        # Getting the type of 't' (line 346)
        t_63212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 12), 't')
        
        # Call to scale(...): (line 346)
        # Processing the call arguments (line 346)
        float_63217 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 346, 34), 'float')
        # Getting the type of 'extra_width' (line 346)
        extra_width_63218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 40), 'extra_width', False)
        # Applying the binary operator '+' (line 346)
        result_add_63219 = python_operator(stypy.reporting.localization.Localization(__file__, 346, 34), '+', float_63217, extra_width_63218)
        
        float_63220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 346, 53), 'float')
        # Getting the type of 'extra_height' (line 346)
        extra_height_63221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 59), 'extra_height', False)
        # Applying the binary operator '+' (line 346)
        result_add_63222 = python_operator(stypy.reporting.localization.Localization(__file__, 346, 53), '+', float_63220, extra_height_63221)
        
        # Processing the call keyword arguments (line 346)
        kwargs_63223 = {}
        
        # Call to Affine2D(...): (line 346)
        # Processing the call keyword arguments (line 346)
        kwargs_63214 = {}
        # Getting the type of 'Affine2D' (line 346)
        Affine2D_63213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 346, 17), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 346)
        Affine2D_call_result_63215 = invoke(stypy.reporting.localization.Localization(__file__, 346, 17), Affine2D_63213, *[], **kwargs_63214)
        
        # Obtaining the member 'scale' of a type (line 346)
        scale_63216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 346, 17), Affine2D_call_result_63215, 'scale')
        # Calling scale(args, kwargs) (line 346)
        scale_call_result_63224 = invoke(stypy.reporting.localization.Localization(__file__, 346, 17), scale_63216, *[result_add_63219, result_add_63222], **kwargs_63223)
        
        # Applying the binary operator '+=' (line 346)
        result_iadd_63225 = python_operator(stypy.reporting.localization.Localization(__file__, 346, 12), '+=', t_63212, scale_call_result_63224)
        # Assigning a type to the variable 't' (line 346)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 346, 12), 't', result_iadd_63225)
        
        # SSA branch for the else part of an if statement (line 340)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 348):
        
        # Assigning a Call to a Name (line 348):
        
        # Call to int(...): (line 348)
        # Processing the call arguments (line 348)
        # Getting the type of 'out_width_base' (line 348)
        out_width_base_63227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 28), 'out_width_base', False)
        # Processing the call keyword arguments (line 348)
        kwargs_63228 = {}
        # Getting the type of 'int' (line 348)
        int_63226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 348, 24), 'int', False)
        # Calling int(args, kwargs) (line 348)
        int_call_result_63229 = invoke(stypy.reporting.localization.Localization(__file__, 348, 24), int_63226, *[out_width_base_63227], **kwargs_63228)
        
        # Assigning a type to the variable 'out_width' (line 348)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 348, 12), 'out_width', int_call_result_63229)
        
        # Assigning a Call to a Name (line 349):
        
        # Assigning a Call to a Name (line 349):
        
        # Call to int(...): (line 349)
        # Processing the call arguments (line 349)
        # Getting the type of 'out_height_base' (line 349)
        out_height_base_63231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 29), 'out_height_base', False)
        # Processing the call keyword arguments (line 349)
        kwargs_63232 = {}
        # Getting the type of 'int' (line 349)
        int_63230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 25), 'int', False)
        # Calling int(args, kwargs) (line 349)
        int_call_result_63233 = invoke(stypy.reporting.localization.Localization(__file__, 349, 25), int_63230, *[out_height_base_63231], **kwargs_63232)
        
        # Assigning a type to the variable 'out_height' (line 349)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 12), 'out_height', int_call_result_63233)
        # SSA join for if statement (line 340)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'unsampled' (line 351)
        unsampled_63234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 351, 15), 'unsampled')
        # Applying the 'not' unary operator (line 351)
        result_not__63235 = python_operator(stypy.reporting.localization.Localization(__file__, 351, 11), 'not', unsampled_63234)
        
        # Testing the type of an if condition (line 351)
        if_condition_63236 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 351, 8), result_not__63235)
        # Assigning a type to the variable 'if_condition_63236' (line 351)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 351, 8), 'if_condition_63236', if_condition_63236)
        # SSA begins for if statement (line 351)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'A' (line 352)
        A_63237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 15), 'A')
        # Obtaining the member 'ndim' of a type (line 352)
        ndim_63238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 352, 15), A_63237, 'ndim')
        
        # Obtaining an instance of the builtin type 'tuple' (line 352)
        tuple_63239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 30), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 352)
        # Adding element type (line 352)
        int_63240 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 30), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 352, 30), tuple_63239, int_63240)
        # Adding element type (line 352)
        int_63241 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 352, 30), tuple_63239, int_63241)
        
        # Applying the binary operator 'notin' (line 352)
        result_contains_63242 = python_operator(stypy.reporting.localization.Localization(__file__, 352, 15), 'notin', ndim_63238, tuple_63239)
        
        # Testing the type of an if condition (line 352)
        if_condition_63243 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 352, 12), result_contains_63242)
        # Assigning a type to the variable 'if_condition_63243' (line 352)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 12), 'if_condition_63243', if_condition_63243)
        # SSA begins for if statement (line 352)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 353)
        # Processing the call arguments (line 353)
        
        # Call to format(...): (line 353)
        # Processing the call arguments (line 353)
        # Getting the type of 'A' (line 353)
        A_63247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 69), 'A', False)
        # Obtaining the member 'shape' of a type (line 353)
        shape_63248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 69), A_63247, 'shape')
        # Processing the call keyword arguments (line 353)
        kwargs_63249 = {}
        unicode_63245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 353, 33), 'unicode', u'Invalid dimensions, got {}')
        # Obtaining the member 'format' of a type (line 353)
        format_63246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 353, 33), unicode_63245, 'format')
        # Calling format(args, kwargs) (line 353)
        format_call_result_63250 = invoke(stypy.reporting.localization.Localization(__file__, 353, 33), format_63246, *[shape_63248], **kwargs_63249)
        
        # Processing the call keyword arguments (line 353)
        kwargs_63251 = {}
        # Getting the type of 'ValueError' (line 353)
        ValueError_63244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 353, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 353)
        ValueError_call_result_63252 = invoke(stypy.reporting.localization.Localization(__file__, 353, 22), ValueError_63244, *[format_call_result_63250], **kwargs_63251)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 353, 16), ValueError_call_result_63252, 'raise parameter', BaseException)
        # SSA join for if statement (line 352)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'A' (line 355)
        A_63253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 355, 15), 'A')
        # Obtaining the member 'ndim' of a type (line 355)
        ndim_63254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 355, 15), A_63253, 'ndim')
        int_63255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 355, 25), 'int')
        # Applying the binary operator '==' (line 355)
        result_eq_63256 = python_operator(stypy.reporting.localization.Localization(__file__, 355, 15), '==', ndim_63254, int_63255)
        
        # Testing the type of an if condition (line 355)
        if_condition_63257 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 355, 12), result_eq_63256)
        # Assigning a type to the variable 'if_condition_63257' (line 355)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 355, 12), 'if_condition_63257', if_condition_63257)
        # SSA begins for if statement (line 355)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 363):
        
        # Assigning a Attribute to a Name (line 363):
        # Getting the type of 'A' (line 363)
        A_63258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 363, 28), 'A')
        # Obtaining the member 'dtype' of a type (line 363)
        dtype_63259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 363, 28), A_63258, 'dtype')
        # Assigning a type to the variable 'inp_dtype' (line 363)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 363, 16), 'inp_dtype', dtype_63259)
        
        
        # Getting the type of 'inp_dtype' (line 364)
        inp_dtype_63260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 364, 19), 'inp_dtype')
        # Obtaining the member 'kind' of a type (line 364)
        kind_63261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 364, 19), inp_dtype_63260, 'kind')
        unicode_63262 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 364, 37), 'unicode', u'f')
        # Applying the binary operator '==' (line 364)
        result_eq_63263 = python_operator(stypy.reporting.localization.Localization(__file__, 364, 19), '==', kind_63261, unicode_63262)
        
        # Testing the type of an if condition (line 364)
        if_condition_63264 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 364, 16), result_eq_63263)
        # Assigning a type to the variable 'if_condition_63264' (line 364)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 364, 16), 'if_condition_63264', if_condition_63264)
        # SSA begins for if statement (line 364)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Attribute to a Name (line 365):
        
        # Assigning a Attribute to a Name (line 365):
        # Getting the type of 'A' (line 365)
        A_63265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 365, 35), 'A')
        # Obtaining the member 'dtype' of a type (line 365)
        dtype_63266 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 365, 35), A_63265, 'dtype')
        # Assigning a type to the variable 'scaled_dtype' (line 365)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 365, 20), 'scaled_dtype', dtype_63266)
        # SSA branch for the else part of an if statement (line 364)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Attribute to a Name (line 367):
        
        # Assigning a Attribute to a Name (line 367):
        # Getting the type of 'np' (line 367)
        np_63267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 367, 35), 'np')
        # Obtaining the member 'float32' of a type (line 367)
        float32_63268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 367, 35), np_63267, 'float32')
        # Assigning a type to the variable 'scaled_dtype' (line 367)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 367, 20), 'scaled_dtype', float32_63268)
        # SSA join for if statement (line 364)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 370):
        
        # Assigning a Call to a Name (line 370):
        
        # Call to astype(...): (line 370)
        # Processing the call arguments (line 370)
        # Getting the type of 'scaled_dtype' (line 370)
        scaled_dtype_63276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 44), 'scaled_dtype', False)
        # Processing the call keyword arguments (line 370)
        kwargs_63277 = {}
        
        # Call to min(...): (line 370)
        # Processing the call arguments (line 370)
        # Getting the type of 'A' (line 370)
        A_63272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 34), 'A', False)
        # Processing the call keyword arguments (line 370)
        kwargs_63273 = {}
        # Getting the type of 'np' (line 370)
        np_63269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 370, 24), 'np', False)
        # Obtaining the member 'ma' of a type (line 370)
        ma_63270 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 24), np_63269, 'ma')
        # Obtaining the member 'min' of a type (line 370)
        min_63271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 24), ma_63270, 'min')
        # Calling min(args, kwargs) (line 370)
        min_call_result_63274 = invoke(stypy.reporting.localization.Localization(__file__, 370, 24), min_63271, *[A_63272], **kwargs_63273)
        
        # Obtaining the member 'astype' of a type (line 370)
        astype_63275 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 370, 24), min_call_result_63274, 'astype')
        # Calling astype(args, kwargs) (line 370)
        astype_call_result_63278 = invoke(stypy.reporting.localization.Localization(__file__, 370, 24), astype_63275, *[scaled_dtype_63276], **kwargs_63277)
        
        # Assigning a type to the variable 'a_min' (line 370)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 370, 16), 'a_min', astype_call_result_63278)
        
        # Assigning a Call to a Name (line 371):
        
        # Assigning a Call to a Name (line 371):
        
        # Call to astype(...): (line 371)
        # Processing the call arguments (line 371)
        # Getting the type of 'scaled_dtype' (line 371)
        scaled_dtype_63286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 44), 'scaled_dtype', False)
        # Processing the call keyword arguments (line 371)
        kwargs_63287 = {}
        
        # Call to max(...): (line 371)
        # Processing the call arguments (line 371)
        # Getting the type of 'A' (line 371)
        A_63282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 34), 'A', False)
        # Processing the call keyword arguments (line 371)
        kwargs_63283 = {}
        # Getting the type of 'np' (line 371)
        np_63279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 371, 24), 'np', False)
        # Obtaining the member 'ma' of a type (line 371)
        ma_63280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 24), np_63279, 'ma')
        # Obtaining the member 'max' of a type (line 371)
        max_63281 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 24), ma_63280, 'max')
        # Calling max(args, kwargs) (line 371)
        max_call_result_63284 = invoke(stypy.reporting.localization.Localization(__file__, 371, 24), max_63281, *[A_63282], **kwargs_63283)
        
        # Obtaining the member 'astype' of a type (line 371)
        astype_63285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 371, 24), max_call_result_63284, 'astype')
        # Calling astype(args, kwargs) (line 371)
        astype_call_result_63288 = invoke(stypy.reporting.localization.Localization(__file__, 371, 24), astype_63285, *[scaled_dtype_63286], **kwargs_63287)
        
        # Assigning a type to the variable 'a_max' (line 371)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 371, 16), 'a_max', astype_call_result_63288)
        
        # Assigning a Call to a Name (line 379):
        
        # Assigning a Call to a Name (line 379):
        
        # Call to empty(...): (line 379)
        # Processing the call arguments (line 379)
        # Getting the type of 'A' (line 379)
        A_63291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 36), 'A', False)
        # Obtaining the member 'shape' of a type (line 379)
        shape_63292 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 36), A_63291, 'shape')
        # Processing the call keyword arguments (line 379)
        # Getting the type of 'scaled_dtype' (line 379)
        scaled_dtype_63293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 51), 'scaled_dtype', False)
        keyword_63294 = scaled_dtype_63293
        kwargs_63295 = {'dtype': keyword_63294}
        # Getting the type of 'np' (line 379)
        np_63289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 379, 27), 'np', False)
        # Obtaining the member 'empty' of a type (line 379)
        empty_63290 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 379, 27), np_63289, 'empty')
        # Calling empty(args, kwargs) (line 379)
        empty_call_result_63296 = invoke(stypy.reporting.localization.Localization(__file__, 379, 27), empty_63290, *[shape_63292], **kwargs_63295)
        
        # Assigning a type to the variable 'A_scaled' (line 379)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 379, 16), 'A_scaled', empty_call_result_63296)
        
        # Assigning a Name to a Subscript (line 380):
        
        # Assigning a Name to a Subscript (line 380):
        # Getting the type of 'A' (line 380)
        A_63297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 30), 'A')
        # Getting the type of 'A_scaled' (line 380)
        A_scaled_63298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 380, 16), 'A_scaled')
        slice_63299 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 380, 16), None, None, None)
        # Storing an element on a container (line 380)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 380, 16), A_scaled_63298, (slice_63299, A_63297))
        
        # Getting the type of 'A_scaled' (line 381)
        A_scaled_63300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 16), 'A_scaled')
        # Getting the type of 'a_min' (line 381)
        a_min_63301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 381, 28), 'a_min')
        # Applying the binary operator '-=' (line 381)
        result_isub_63302 = python_operator(stypy.reporting.localization.Localization(__file__, 381, 16), '-=', A_scaled_63300, a_min_63301)
        # Assigning a type to the variable 'A_scaled' (line 381)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 381, 16), 'A_scaled', result_isub_63302)
        
        
        
        # Getting the type of 'a_min' (line 382)
        a_min_63303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 19), 'a_min')
        # Getting the type of 'a_max' (line 382)
        a_max_63304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 382, 28), 'a_max')
        # Applying the binary operator '!=' (line 382)
        result_ne_63305 = python_operator(stypy.reporting.localization.Localization(__file__, 382, 19), '!=', a_min_63303, a_max_63304)
        
        # Testing the type of an if condition (line 382)
        if_condition_63306 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 382, 16), result_ne_63305)
        # Assigning a type to the variable 'if_condition_63306' (line 382)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 382, 16), 'if_condition_63306', if_condition_63306)
        # SSA begins for if statement (line 382)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'A_scaled' (line 383)
        A_scaled_63307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 20), 'A_scaled')
        # Getting the type of 'a_max' (line 383)
        a_max_63308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 34), 'a_max')
        # Getting the type of 'a_min' (line 383)
        a_min_63309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 383, 42), 'a_min')
        # Applying the binary operator '-' (line 383)
        result_sub_63310 = python_operator(stypy.reporting.localization.Localization(__file__, 383, 34), '-', a_max_63308, a_min_63309)
        
        float_63311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 383, 51), 'float')
        # Applying the binary operator 'div' (line 383)
        result_div_63312 = python_operator(stypy.reporting.localization.Localization(__file__, 383, 33), 'div', result_sub_63310, float_63311)
        
        # Applying the binary operator 'div=' (line 383)
        result_div_63313 = python_operator(stypy.reporting.localization.Localization(__file__, 383, 20), 'div=', A_scaled_63307, result_div_63312)
        # Assigning a type to the variable 'A_scaled' (line 383)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 383, 20), 'A_scaled', result_div_63313)
        
        # SSA join for if statement (line 382)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'A_scaled' (line 384)
        A_scaled_63314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 384, 16), 'A_scaled')
        float_63315 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 384, 28), 'float')
        # Applying the binary operator '+=' (line 384)
        result_iadd_63316 = python_operator(stypy.reporting.localization.Localization(__file__, 384, 16), '+=', A_scaled_63314, float_63315)
        # Assigning a type to the variable 'A_scaled' (line 384)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 384, 16), 'A_scaled', result_iadd_63316)
        
        
        # Assigning a Call to a Name (line 385):
        
        # Assigning a Call to a Name (line 385):
        
        # Call to zeros(...): (line 385)
        # Processing the call arguments (line 385)
        
        # Obtaining an instance of the builtin type 'tuple' (line 385)
        tuple_63319 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, 40), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 385)
        # Adding element type (line 385)
        # Getting the type of 'out_height' (line 385)
        out_height_63320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 40), 'out_height', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 385, 40), tuple_63319, out_height_63320)
        # Adding element type (line 385)
        # Getting the type of 'out_width' (line 385)
        out_width_63321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 52), 'out_width', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 385, 40), tuple_63319, out_width_63321)
        
        # Processing the call keyword arguments (line 385)
        # Getting the type of 'A_scaled' (line 386)
        A_scaled_63322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 45), 'A_scaled', False)
        # Obtaining the member 'dtype' of a type (line 386)
        dtype_63323 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 45), A_scaled_63322, 'dtype')
        keyword_63324 = dtype_63323
        kwargs_63325 = {'dtype': keyword_63324}
        # Getting the type of 'np' (line 385)
        np_63317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 385, 30), 'np', False)
        # Obtaining the member 'zeros' of a type (line 385)
        zeros_63318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 385, 30), np_63317, 'zeros')
        # Calling zeros(args, kwargs) (line 385)
        zeros_call_result_63326 = invoke(stypy.reporting.localization.Localization(__file__, 385, 30), zeros_63318, *[tuple_63319], **kwargs_63325)
        
        # Assigning a type to the variable 'A_resampled' (line 385)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 385, 16), 'A_resampled', zeros_call_result_63326)
        
        # Call to resample(...): (line 388)
        # Processing the call arguments (line 388)
        # Getting the type of 'A_scaled' (line 388)
        A_scaled_63329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 32), 'A_scaled', False)
        # Getting the type of 'A_resampled' (line 388)
        A_resampled_63330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 42), 'A_resampled', False)
        # Getting the type of 't' (line 389)
        t_63331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 389, 32), 't', False)
        
        # Obtaining the type of the subscript
        
        # Call to get_interpolation(...): (line 390)
        # Processing the call keyword arguments (line 390)
        kwargs_63334 = {}
        # Getting the type of 'self' (line 390)
        self_63332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 42), 'self', False)
        # Obtaining the member 'get_interpolation' of a type (line 390)
        get_interpolation_63333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 42), self_63332, 'get_interpolation')
        # Calling get_interpolation(args, kwargs) (line 390)
        get_interpolation_call_result_63335 = invoke(stypy.reporting.localization.Localization(__file__, 390, 42), get_interpolation_63333, *[], **kwargs_63334)
        
        # Getting the type of '_interpd_' (line 390)
        _interpd__63336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 390, 32), '_interpd_', False)
        # Obtaining the member '__getitem__' of a type (line 390)
        getitem___63337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 390, 32), _interpd__63336, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 390)
        subscript_call_result_63338 = invoke(stypy.reporting.localization.Localization(__file__, 390, 32), getitem___63337, get_interpolation_call_result_63335)
        
        
        # Call to get_resample(...): (line 391)
        # Processing the call keyword arguments (line 391)
        kwargs_63341 = {}
        # Getting the type of 'self' (line 391)
        self_63339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 32), 'self', False)
        # Obtaining the member 'get_resample' of a type (line 391)
        get_resample_63340 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 391, 32), self_63339, 'get_resample')
        # Calling get_resample(args, kwargs) (line 391)
        get_resample_call_result_63342 = invoke(stypy.reporting.localization.Localization(__file__, 391, 32), get_resample_63340, *[], **kwargs_63341)
        
        float_63343 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 391, 53), 'float')
        
        # Evaluating a boolean operation
        
        # Call to get_filternorm(...): (line 392)
        # Processing the call keyword arguments (line 392)
        kwargs_63346 = {}
        # Getting the type of 'self' (line 392)
        self_63344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 392, 32), 'self', False)
        # Obtaining the member 'get_filternorm' of a type (line 392)
        get_filternorm_63345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 392, 32), self_63344, 'get_filternorm')
        # Calling get_filternorm(args, kwargs) (line 392)
        get_filternorm_call_result_63347 = invoke(stypy.reporting.localization.Localization(__file__, 392, 32), get_filternorm_63345, *[], **kwargs_63346)
        
        float_63348 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 392, 57), 'float')
        # Applying the binary operator 'or' (line 392)
        result_or_keyword_63349 = python_operator(stypy.reporting.localization.Localization(__file__, 392, 32), 'or', get_filternorm_call_result_63347, float_63348)
        
        
        # Evaluating a boolean operation
        
        # Call to get_filterrad(...): (line 393)
        # Processing the call keyword arguments (line 393)
        kwargs_63352 = {}
        # Getting the type of 'self' (line 393)
        self_63350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 32), 'self', False)
        # Obtaining the member 'get_filterrad' of a type (line 393)
        get_filterrad_63351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 393, 32), self_63350, 'get_filterrad')
        # Calling get_filterrad(args, kwargs) (line 393)
        get_filterrad_call_result_63353 = invoke(stypy.reporting.localization.Localization(__file__, 393, 32), get_filterrad_63351, *[], **kwargs_63352)
        
        float_63354 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 56), 'float')
        # Applying the binary operator 'or' (line 393)
        result_or_keyword_63355 = python_operator(stypy.reporting.localization.Localization(__file__, 393, 32), 'or', get_filterrad_call_result_63353, float_63354)
        
        # Processing the call keyword arguments (line 388)
        kwargs_63356 = {}
        # Getting the type of '_image' (line 388)
        _image_63327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 388, 16), '_image', False)
        # Obtaining the member 'resample' of a type (line 388)
        resample_63328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 388, 16), _image_63327, 'resample')
        # Calling resample(args, kwargs) (line 388)
        resample_call_result_63357 = invoke(stypy.reporting.localization.Localization(__file__, 388, 16), resample_63328, *[A_scaled_63329, A_resampled_63330, t_63331, subscript_call_result_63338, get_resample_call_result_63342, float_63343, result_or_keyword_63349, result_or_keyword_63355], **kwargs_63356)
        
        # Deleting a member
        module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 397, 16), module_type_store, 'A_scaled')
        
        # Getting the type of 'A_resampled' (line 403)
        A_resampled_63358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 16), 'A_resampled')
        float_63359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 31), 'float')
        # Applying the binary operator '-=' (line 403)
        result_isub_63360 = python_operator(stypy.reporting.localization.Localization(__file__, 403, 16), '-=', A_resampled_63358, float_63359)
        # Assigning a type to the variable 'A_resampled' (line 403)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 403, 16), 'A_resampled', result_isub_63360)
        
        
        
        # Getting the type of 'a_min' (line 404)
        a_min_63361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 19), 'a_min')
        # Getting the type of 'a_max' (line 404)
        a_max_63362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 28), 'a_max')
        # Applying the binary operator '!=' (line 404)
        result_ne_63363 = python_operator(stypy.reporting.localization.Localization(__file__, 404, 19), '!=', a_min_63361, a_max_63362)
        
        # Testing the type of an if condition (line 404)
        if_condition_63364 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 404, 16), result_ne_63363)
        # Assigning a type to the variable 'if_condition_63364' (line 404)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 404, 16), 'if_condition_63364', if_condition_63364)
        # SSA begins for if statement (line 404)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Getting the type of 'A_resampled' (line 405)
        A_resampled_63365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 20), 'A_resampled')
        # Getting the type of 'a_max' (line 405)
        a_max_63366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 37), 'a_max')
        # Getting the type of 'a_min' (line 405)
        a_min_63367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 45), 'a_min')
        # Applying the binary operator '-' (line 405)
        result_sub_63368 = python_operator(stypy.reporting.localization.Localization(__file__, 405, 37), '-', a_max_63366, a_min_63367)
        
        float_63369 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 405, 54), 'float')
        # Applying the binary operator 'div' (line 405)
        result_div_63370 = python_operator(stypy.reporting.localization.Localization(__file__, 405, 36), 'div', result_sub_63368, float_63369)
        
        # Applying the binary operator '*=' (line 405)
        result_imul_63371 = python_operator(stypy.reporting.localization.Localization(__file__, 405, 20), '*=', A_resampled_63365, result_div_63370)
        # Assigning a type to the variable 'A_resampled' (line 405)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 405, 20), 'A_resampled', result_imul_63371)
        
        # SSA join for if statement (line 404)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'A_resampled' (line 406)
        A_resampled_63372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 16), 'A_resampled')
        # Getting the type of 'a_min' (line 406)
        a_min_63373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 31), 'a_min')
        # Applying the binary operator '+=' (line 406)
        result_iadd_63374 = python_operator(stypy.reporting.localization.Localization(__file__, 406, 16), '+=', A_resampled_63372, a_min_63373)
        # Assigning a type to the variable 'A_resampled' (line 406)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 406, 16), 'A_resampled', result_iadd_63374)
        
        
        
        # Call to isinstance(...): (line 408)
        # Processing the call arguments (line 408)
        # Getting the type of 'self' (line 408)
        self_63376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 30), 'self', False)
        # Obtaining the member 'norm' of a type (line 408)
        norm_63377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 30), self_63376, 'norm')
        # Getting the type of 'mcolors' (line 408)
        mcolors_63378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 41), 'mcolors', False)
        # Obtaining the member 'NoNorm' of a type (line 408)
        NoNorm_63379 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 408, 41), mcolors_63378, 'NoNorm')
        # Processing the call keyword arguments (line 408)
        kwargs_63380 = {}
        # Getting the type of 'isinstance' (line 408)
        isinstance_63375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 19), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 408)
        isinstance_call_result_63381 = invoke(stypy.reporting.localization.Localization(__file__, 408, 19), isinstance_63375, *[norm_63377, NoNorm_63379], **kwargs_63380)
        
        # Testing the type of an if condition (line 408)
        if_condition_63382 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 408, 16), isinstance_call_result_63381)
        # Assigning a type to the variable 'if_condition_63382' (line 408)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 408, 16), 'if_condition_63382', if_condition_63382)
        # SSA begins for if statement (line 408)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 409):
        
        # Assigning a Call to a Name (line 409):
        
        # Call to astype(...): (line 409)
        # Processing the call arguments (line 409)
        # Getting the type of 'A' (line 409)
        A_63385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 53), 'A', False)
        # Obtaining the member 'dtype' of a type (line 409)
        dtype_63386 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 53), A_63385, 'dtype')
        # Processing the call keyword arguments (line 409)
        kwargs_63387 = {}
        # Getting the type of 'A_resampled' (line 409)
        A_resampled_63383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 409, 34), 'A_resampled', False)
        # Obtaining the member 'astype' of a type (line 409)
        astype_63384 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 409, 34), A_resampled_63383, 'astype')
        # Calling astype(args, kwargs) (line 409)
        astype_call_result_63388 = invoke(stypy.reporting.localization.Localization(__file__, 409, 34), astype_63384, *[dtype_63386], **kwargs_63387)
        
        # Assigning a type to the variable 'A_resampled' (line 409)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 409, 20), 'A_resampled', astype_call_result_63388)
        # SSA join for if statement (line 408)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 411):
        
        # Assigning a Call to a Name (line 411):
        
        # Call to empty(...): (line 411)
        # Processing the call arguments (line 411)
        # Getting the type of 'A' (line 411)
        A_63391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 32), 'A', False)
        # Obtaining the member 'shape' of a type (line 411)
        shape_63392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 32), A_63391, 'shape')
        # Processing the call keyword arguments (line 411)
        # Getting the type of 'np' (line 411)
        np_63393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 47), 'np', False)
        # Obtaining the member 'float32' of a type (line 411)
        float32_63394 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 47), np_63393, 'float32')
        keyword_63395 = float32_63394
        kwargs_63396 = {'dtype': keyword_63395}
        # Getting the type of 'np' (line 411)
        np_63389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 411, 23), 'np', False)
        # Obtaining the member 'empty' of a type (line 411)
        empty_63390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 411, 23), np_63389, 'empty')
        # Calling empty(args, kwargs) (line 411)
        empty_call_result_63397 = invoke(stypy.reporting.localization.Localization(__file__, 411, 23), empty_63390, *[shape_63392], **kwargs_63396)
        
        # Assigning a type to the variable 'mask' (line 411)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 411, 16), 'mask', empty_call_result_63397)
        
        
        # Getting the type of 'A' (line 412)
        A_63398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 19), 'A')
        # Obtaining the member 'mask' of a type (line 412)
        mask_63399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 19), A_63398, 'mask')
        # Obtaining the member 'shape' of a type (line 412)
        shape_63400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 19), mask_63399, 'shape')
        # Getting the type of 'A' (line 412)
        A_63401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 35), 'A')
        # Obtaining the member 'shape' of a type (line 412)
        shape_63402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 412, 35), A_63401, 'shape')
        # Applying the binary operator '==' (line 412)
        result_eq_63403 = python_operator(stypy.reporting.localization.Localization(__file__, 412, 19), '==', shape_63400, shape_63402)
        
        # Testing the type of an if condition (line 412)
        if_condition_63404 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 412, 16), result_eq_63403)
        # Assigning a type to the variable 'if_condition_63404' (line 412)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 16), 'if_condition_63404', if_condition_63404)
        # SSA begins for if statement (line 412)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Subscript (line 414):
        
        # Assigning a Call to a Subscript (line 414):
        
        # Call to where(...): (line 414)
        # Processing the call arguments (line 414)
        # Getting the type of 'A' (line 414)
        A_63407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 39), 'A', False)
        # Obtaining the member 'mask' of a type (line 414)
        mask_63408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 39), A_63407, 'mask')
        
        # Call to float32(...): (line 414)
        # Processing the call arguments (line 414)
        # Getting the type of 'np' (line 414)
        np_63411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 58), 'np', False)
        # Obtaining the member 'nan' of a type (line 414)
        nan_63412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 58), np_63411, 'nan')
        # Processing the call keyword arguments (line 414)
        kwargs_63413 = {}
        # Getting the type of 'np' (line 414)
        np_63409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 47), 'np', False)
        # Obtaining the member 'float32' of a type (line 414)
        float32_63410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 47), np_63409, 'float32')
        # Calling float32(args, kwargs) (line 414)
        float32_call_result_63414 = invoke(stypy.reporting.localization.Localization(__file__, 414, 47), float32_63410, *[nan_63412], **kwargs_63413)
        
        
        # Call to float32(...): (line 415)
        # Processing the call arguments (line 415)
        int_63417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 415, 50), 'int')
        # Processing the call keyword arguments (line 415)
        kwargs_63418 = {}
        # Getting the type of 'np' (line 415)
        np_63415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 415, 39), 'np', False)
        # Obtaining the member 'float32' of a type (line 415)
        float32_63416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 415, 39), np_63415, 'float32')
        # Calling float32(args, kwargs) (line 415)
        float32_call_result_63419 = invoke(stypy.reporting.localization.Localization(__file__, 415, 39), float32_63416, *[int_63417], **kwargs_63418)
        
        # Processing the call keyword arguments (line 414)
        kwargs_63420 = {}
        # Getting the type of 'np' (line 414)
        np_63405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 30), 'np', False)
        # Obtaining the member 'where' of a type (line 414)
        where_63406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 414, 30), np_63405, 'where')
        # Calling where(args, kwargs) (line 414)
        where_call_result_63421 = invoke(stypy.reporting.localization.Localization(__file__, 414, 30), where_63406, *[mask_63408, float32_call_result_63414, float32_call_result_63419], **kwargs_63420)
        
        # Getting the type of 'mask' (line 414)
        mask_63422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 414, 20), 'mask')
        slice_63423 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 414, 20), None, None, None)
        # Storing an element on a container (line 414)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 414, 20), mask_63422, (slice_63423, where_call_result_63421))
        # SSA branch for the else part of an if statement (line 412)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Subscript (line 417):
        
        # Assigning a Num to a Subscript (line 417):
        int_63424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 417, 30), 'int')
        # Getting the type of 'mask' (line 417)
        mask_63425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 20), 'mask')
        slice_63426 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 417, 20), None, None, None)
        # Storing an element on a container (line 417)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 417, 20), mask_63425, (slice_63426, int_63424))
        # SSA join for if statement (line 412)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 421):
        
        # Assigning a Call to a Name (line 421):
        
        # Call to zeros(...): (line 421)
        # Processing the call arguments (line 421)
        
        # Obtaining an instance of the builtin type 'tuple' (line 421)
        tuple_63429 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 421, 37), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 421)
        # Adding element type (line 421)
        # Getting the type of 'out_height' (line 421)
        out_height_63430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 37), 'out_height', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 421, 37), tuple_63429, out_height_63430)
        # Adding element type (line 421)
        # Getting the type of 'out_width' (line 421)
        out_width_63431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 49), 'out_width', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 421, 37), tuple_63429, out_width_63431)
        
        # Processing the call keyword arguments (line 421)
        # Getting the type of 'mask' (line 422)
        mask_63432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 42), 'mask', False)
        # Obtaining the member 'dtype' of a type (line 422)
        dtype_63433 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 422, 42), mask_63432, 'dtype')
        keyword_63434 = dtype_63433
        kwargs_63435 = {'dtype': keyword_63434}
        # Getting the type of 'np' (line 421)
        np_63427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 27), 'np', False)
        # Obtaining the member 'zeros' of a type (line 421)
        zeros_63428 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 421, 27), np_63427, 'zeros')
        # Calling zeros(args, kwargs) (line 421)
        zeros_call_result_63436 = invoke(stypy.reporting.localization.Localization(__file__, 421, 27), zeros_63428, *[tuple_63429], **kwargs_63435)
        
        # Assigning a type to the variable 'out_mask' (line 421)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 421, 16), 'out_mask', zeros_call_result_63436)
        
        # Call to resample(...): (line 423)
        # Processing the call arguments (line 423)
        # Getting the type of 'mask' (line 423)
        mask_63439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 32), 'mask', False)
        # Getting the type of 'out_mask' (line 423)
        out_mask_63440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 38), 'out_mask', False)
        # Getting the type of 't' (line 424)
        t_63441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 32), 't', False)
        
        # Obtaining the type of the subscript
        
        # Call to get_interpolation(...): (line 425)
        # Processing the call keyword arguments (line 425)
        kwargs_63444 = {}
        # Getting the type of 'self' (line 425)
        self_63442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 42), 'self', False)
        # Obtaining the member 'get_interpolation' of a type (line 425)
        get_interpolation_63443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 42), self_63442, 'get_interpolation')
        # Calling get_interpolation(args, kwargs) (line 425)
        get_interpolation_call_result_63445 = invoke(stypy.reporting.localization.Localization(__file__, 425, 42), get_interpolation_63443, *[], **kwargs_63444)
        
        # Getting the type of '_interpd_' (line 425)
        _interpd__63446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 425, 32), '_interpd_', False)
        # Obtaining the member '__getitem__' of a type (line 425)
        getitem___63447 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 425, 32), _interpd__63446, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 425)
        subscript_call_result_63448 = invoke(stypy.reporting.localization.Localization(__file__, 425, 32), getitem___63447, get_interpolation_call_result_63445)
        
        # Getting the type of 'True' (line 426)
        True_63449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 426, 32), 'True', False)
        int_63450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 426, 38), 'int')
        
        # Evaluating a boolean operation
        
        # Call to get_filternorm(...): (line 427)
        # Processing the call keyword arguments (line 427)
        kwargs_63453 = {}
        # Getting the type of 'self' (line 427)
        self_63451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 427, 32), 'self', False)
        # Obtaining the member 'get_filternorm' of a type (line 427)
        get_filternorm_63452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 427, 32), self_63451, 'get_filternorm')
        # Calling get_filternorm(args, kwargs) (line 427)
        get_filternorm_call_result_63454 = invoke(stypy.reporting.localization.Localization(__file__, 427, 32), get_filternorm_63452, *[], **kwargs_63453)
        
        float_63455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 427, 57), 'float')
        # Applying the binary operator 'or' (line 427)
        result_or_keyword_63456 = python_operator(stypy.reporting.localization.Localization(__file__, 427, 32), 'or', get_filternorm_call_result_63454, float_63455)
        
        
        # Evaluating a boolean operation
        
        # Call to get_filterrad(...): (line 428)
        # Processing the call keyword arguments (line 428)
        kwargs_63459 = {}
        # Getting the type of 'self' (line 428)
        self_63457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 428, 32), 'self', False)
        # Obtaining the member 'get_filterrad' of a type (line 428)
        get_filterrad_63458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 428, 32), self_63457, 'get_filterrad')
        # Calling get_filterrad(args, kwargs) (line 428)
        get_filterrad_call_result_63460 = invoke(stypy.reporting.localization.Localization(__file__, 428, 32), get_filterrad_63458, *[], **kwargs_63459)
        
        float_63461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 428, 56), 'float')
        # Applying the binary operator 'or' (line 428)
        result_or_keyword_63462 = python_operator(stypy.reporting.localization.Localization(__file__, 428, 32), 'or', get_filterrad_call_result_63460, float_63461)
        
        # Processing the call keyword arguments (line 423)
        kwargs_63463 = {}
        # Getting the type of '_image' (line 423)
        _image_63437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 16), '_image', False)
        # Obtaining the member 'resample' of a type (line 423)
        resample_63438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 423, 16), _image_63437, 'resample')
        # Calling resample(args, kwargs) (line 423)
        resample_call_result_63464 = invoke(stypy.reporting.localization.Localization(__file__, 423, 16), resample_63438, *[mask_63439, out_mask_63440, t_63441, subscript_call_result_63448, True_63449, int_63450, result_or_keyword_63456, result_or_keyword_63462], **kwargs_63463)
        
        # Deleting a member
        module_type_store.del_member(stypy.reporting.localization.Localization(__file__, 430, 16), module_type_store, 'mask')
        
        # Assigning a Call to a Name (line 439):
        
        # Assigning a Call to a Name (line 439):
        
        # Call to array(...): (line 439)
        # Processing the call arguments (line 439)
        # Getting the type of 'out_mask' (line 439)
        out_mask_63467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 37), 'out_mask', False)
        # Processing the call keyword arguments (line 439)
        kwargs_63468 = {}
        # Getting the type of 'np' (line 439)
        np_63465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 439, 28), 'np', False)
        # Obtaining the member 'array' of a type (line 439)
        array_63466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 439, 28), np_63465, 'array')
        # Calling array(args, kwargs) (line 439)
        array_call_result_63469 = invoke(stypy.reporting.localization.Localization(__file__, 439, 28), array_63466, *[out_mask_63467], **kwargs_63468)
        
        # Assigning a type to the variable 'out_alpha' (line 439)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 439, 16), 'out_alpha', array_call_result_63469)
        
        # Assigning a Call to a Name (line 440):
        
        # Assigning a Call to a Name (line 440):
        
        # Call to isnan(...): (line 440)
        # Processing the call arguments (line 440)
        # Getting the type of 'out_mask' (line 440)
        out_mask_63472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 36), 'out_mask', False)
        # Processing the call keyword arguments (line 440)
        kwargs_63473 = {}
        # Getting the type of 'np' (line 440)
        np_63470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 440, 27), 'np', False)
        # Obtaining the member 'isnan' of a type (line 440)
        isnan_63471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 440, 27), np_63470, 'isnan')
        # Calling isnan(args, kwargs) (line 440)
        isnan_call_result_63474 = invoke(stypy.reporting.localization.Localization(__file__, 440, 27), isnan_63471, *[out_mask_63472], **kwargs_63473)
        
        # Assigning a type to the variable 'out_mask' (line 440)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 440, 16), 'out_mask', isnan_call_result_63474)
        
        # Assigning a Num to a Subscript (line 441):
        
        # Assigning a Num to a Subscript (line 441):
        int_63475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 441, 38), 'int')
        # Getting the type of 'out_alpha' (line 441)
        out_alpha_63476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 16), 'out_alpha')
        # Getting the type of 'out_mask' (line 441)
        out_mask_63477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 441, 26), 'out_mask')
        # Storing an element on a container (line 441)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 441, 16), out_alpha_63476, (out_mask_63477, int_63475))
        
        # Assigning a Call to a Name (line 444):
        
        # Assigning a Call to a Name (line 444):
        
        # Call to norm(...): (line 444)
        # Processing the call arguments (line 444)
        
        # Call to masked_array(...): (line 444)
        # Processing the call arguments (line 444)
        # Getting the type of 'A_resampled' (line 444)
        A_resampled_63483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 54), 'A_resampled', False)
        # Getting the type of 'out_mask' (line 444)
        out_mask_63484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 67), 'out_mask', False)
        # Processing the call keyword arguments (line 444)
        kwargs_63485 = {}
        # Getting the type of 'np' (line 444)
        np_63480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 35), 'np', False)
        # Obtaining the member 'ma' of a type (line 444)
        ma_63481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 35), np_63480, 'ma')
        # Obtaining the member 'masked_array' of a type (line 444)
        masked_array_63482 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 35), ma_63481, 'masked_array')
        # Calling masked_array(args, kwargs) (line 444)
        masked_array_call_result_63486 = invoke(stypy.reporting.localization.Localization(__file__, 444, 35), masked_array_63482, *[A_resampled_63483, out_mask_63484], **kwargs_63485)
        
        # Processing the call keyword arguments (line 444)
        kwargs_63487 = {}
        # Getting the type of 'self' (line 444)
        self_63478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 444, 25), 'self', False)
        # Obtaining the member 'norm' of a type (line 444)
        norm_63479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 444, 25), self_63478, 'norm')
        # Calling norm(args, kwargs) (line 444)
        norm_call_result_63488 = invoke(stypy.reporting.localization.Localization(__file__, 444, 25), norm_63479, *[masked_array_call_result_63486], **kwargs_63487)
        
        # Assigning a type to the variable 'output' (line 444)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 444, 16), 'output', norm_call_result_63488)
        # SSA branch for the else part of an if statement (line 355)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Obtaining the type of the subscript
        int_63489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 447, 27), 'int')
        # Getting the type of 'A' (line 447)
        A_63490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 447, 19), 'A')
        # Obtaining the member 'shape' of a type (line 447)
        shape_63491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 19), A_63490, 'shape')
        # Obtaining the member '__getitem__' of a type (line 447)
        getitem___63492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 447, 19), shape_63491, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 447)
        subscript_call_result_63493 = invoke(stypy.reporting.localization.Localization(__file__, 447, 19), getitem___63492, int_63489)
        
        int_63494 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 447, 33), 'int')
        # Applying the binary operator '==' (line 447)
        result_eq_63495 = python_operator(stypy.reporting.localization.Localization(__file__, 447, 19), '==', subscript_call_result_63493, int_63494)
        
        # Testing the type of an if condition (line 447)
        if_condition_63496 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 447, 16), result_eq_63495)
        # Assigning a type to the variable 'if_condition_63496' (line 447)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 447, 16), 'if_condition_63496', if_condition_63496)
        # SSA begins for if statement (line 447)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 448):
        
        # Assigning a Call to a Name (line 448):
        
        # Call to _rgb_to_rgba(...): (line 448)
        # Processing the call arguments (line 448)
        # Getting the type of 'A' (line 448)
        A_63498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 37), 'A', False)
        # Processing the call keyword arguments (line 448)
        kwargs_63499 = {}
        # Getting the type of '_rgb_to_rgba' (line 448)
        _rgb_to_rgba_63497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 448, 24), '_rgb_to_rgba', False)
        # Calling _rgb_to_rgba(args, kwargs) (line 448)
        _rgb_to_rgba_call_result_63500 = invoke(stypy.reporting.localization.Localization(__file__, 448, 24), _rgb_to_rgba_63497, *[A_63498], **kwargs_63499)
        
        # Assigning a type to the variable 'A' (line 448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 448, 20), 'A', _rgb_to_rgba_call_result_63500)
        # SSA branch for the else part of an if statement (line 447)
        module_type_store.open_ssa_branch('else')
        
        
        
        # Obtaining the type of the subscript
        int_63501 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 449, 29), 'int')
        # Getting the type of 'A' (line 449)
        A_63502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 449, 21), 'A')
        # Obtaining the member 'shape' of a type (line 449)
        shape_63503 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 21), A_63502, 'shape')
        # Obtaining the member '__getitem__' of a type (line 449)
        getitem___63504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 449, 21), shape_63503, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 449)
        subscript_call_result_63505 = invoke(stypy.reporting.localization.Localization(__file__, 449, 21), getitem___63504, int_63501)
        
        int_63506 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 449, 35), 'int')
        # Applying the binary operator '!=' (line 449)
        result_ne_63507 = python_operator(stypy.reporting.localization.Localization(__file__, 449, 21), '!=', subscript_call_result_63505, int_63506)
        
        # Testing the type of an if condition (line 449)
        if_condition_63508 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 449, 21), result_ne_63507)
        # Assigning a type to the variable 'if_condition_63508' (line 449)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 449, 21), 'if_condition_63508', if_condition_63508)
        # SSA begins for if statement (line 449)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 450)
        # Processing the call arguments (line 450)
        unicode_63510 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, 37), 'unicode', u'Invalid dimensions, got %s')
        
        # Obtaining an instance of the builtin type 'tuple' (line 450)
        tuple_63511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 450, 69), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 450)
        # Adding element type (line 450)
        # Getting the type of 'A' (line 450)
        A_63512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 69), 'A', False)
        # Obtaining the member 'shape' of a type (line 450)
        shape_63513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 450, 69), A_63512, 'shape')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 450, 69), tuple_63511, shape_63513)
        
        # Applying the binary operator '%' (line 450)
        result_mod_63514 = python_operator(stypy.reporting.localization.Localization(__file__, 450, 37), '%', unicode_63510, tuple_63511)
        
        # Processing the call keyword arguments (line 450)
        kwargs_63515 = {}
        # Getting the type of 'ValueError' (line 450)
        ValueError_63509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 450, 26), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 450)
        ValueError_call_result_63516 = invoke(stypy.reporting.localization.Localization(__file__, 450, 26), ValueError_63509, *[result_mod_63514], **kwargs_63515)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 450, 20), ValueError_call_result_63516, 'raise parameter', BaseException)
        # SSA join for if statement (line 449)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 447)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 452):
        
        # Assigning a Call to a Name (line 452):
        
        # Call to zeros(...): (line 452)
        # Processing the call arguments (line 452)
        
        # Obtaining an instance of the builtin type 'tuple' (line 452)
        tuple_63519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, 35), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 452)
        # Adding element type (line 452)
        # Getting the type of 'out_height' (line 452)
        out_height_63520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 35), 'out_height', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 452, 35), tuple_63519, out_height_63520)
        # Adding element type (line 452)
        # Getting the type of 'out_width' (line 452)
        out_width_63521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 47), 'out_width', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 452, 35), tuple_63519, out_width_63521)
        # Adding element type (line 452)
        int_63522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 452, 58), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 452, 35), tuple_63519, int_63522)
        
        # Processing the call keyword arguments (line 452)
        # Getting the type of 'A' (line 452)
        A_63523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 68), 'A', False)
        # Obtaining the member 'dtype' of a type (line 452)
        dtype_63524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 68), A_63523, 'dtype')
        keyword_63525 = dtype_63524
        kwargs_63526 = {'dtype': keyword_63525}
        # Getting the type of 'np' (line 452)
        np_63517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 452, 25), 'np', False)
        # Obtaining the member 'zeros' of a type (line 452)
        zeros_63518 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 452, 25), np_63517, 'zeros')
        # Calling zeros(args, kwargs) (line 452)
        zeros_call_result_63527 = invoke(stypy.reporting.localization.Localization(__file__, 452, 25), zeros_63518, *[tuple_63519], **kwargs_63526)
        
        # Assigning a type to the variable 'output' (line 452)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 452, 16), 'output', zeros_call_result_63527)
        
        # Assigning a Call to a Name (line 454):
        
        # Assigning a Call to a Name (line 454):
        
        # Call to get_alpha(...): (line 454)
        # Processing the call keyword arguments (line 454)
        kwargs_63530 = {}
        # Getting the type of 'self' (line 454)
        self_63528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 454, 24), 'self', False)
        # Obtaining the member 'get_alpha' of a type (line 454)
        get_alpha_63529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 454, 24), self_63528, 'get_alpha')
        # Calling get_alpha(args, kwargs) (line 454)
        get_alpha_call_result_63531 = invoke(stypy.reporting.localization.Localization(__file__, 454, 24), get_alpha_63529, *[], **kwargs_63530)
        
        # Assigning a type to the variable 'alpha' (line 454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 454, 16), 'alpha', get_alpha_call_result_63531)
        
        # Type idiom detected: calculating its left and rigth part (line 455)
        # Getting the type of 'alpha' (line 455)
        alpha_63532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 19), 'alpha')
        # Getting the type of 'None' (line 455)
        None_63533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 455, 28), 'None')
        
        (may_be_63534, more_types_in_union_63535) = may_be_none(alpha_63532, None_63533)

        if may_be_63534:

            if more_types_in_union_63535:
                # Runtime conditional SSA (line 455)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Num to a Name (line 456):
            
            # Assigning a Num to a Name (line 456):
            float_63536 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 456, 28), 'float')
            # Assigning a type to the variable 'alpha' (line 456)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 456, 20), 'alpha', float_63536)

            if more_types_in_union_63535:
                # SSA join for if statement (line 455)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Call to resample(...): (line 458)
        # Processing the call arguments (line 458)
        # Getting the type of 'A' (line 459)
        A_63539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 20), 'A', False)
        # Getting the type of 'output' (line 459)
        output_63540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 23), 'output', False)
        # Getting the type of 't' (line 459)
        t_63541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 31), 't', False)
        
        # Obtaining the type of the subscript
        
        # Call to get_interpolation(...): (line 459)
        # Processing the call keyword arguments (line 459)
        kwargs_63544 = {}
        # Getting the type of 'self' (line 459)
        self_63542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 44), 'self', False)
        # Obtaining the member 'get_interpolation' of a type (line 459)
        get_interpolation_63543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 44), self_63542, 'get_interpolation')
        # Calling get_interpolation(args, kwargs) (line 459)
        get_interpolation_call_result_63545 = invoke(stypy.reporting.localization.Localization(__file__, 459, 44), get_interpolation_63543, *[], **kwargs_63544)
        
        # Getting the type of '_interpd_' (line 459)
        _interpd__63546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 459, 34), '_interpd_', False)
        # Obtaining the member '__getitem__' of a type (line 459)
        getitem___63547 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 459, 34), _interpd__63546, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 459)
        subscript_call_result_63548 = invoke(stypy.reporting.localization.Localization(__file__, 459, 34), getitem___63547, get_interpolation_call_result_63545)
        
        
        # Call to get_resample(...): (line 460)
        # Processing the call keyword arguments (line 460)
        kwargs_63551 = {}
        # Getting the type of 'self' (line 460)
        self_63549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 20), 'self', False)
        # Obtaining the member 'get_resample' of a type (line 460)
        get_resample_63550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 460, 20), self_63549, 'get_resample')
        # Calling get_resample(args, kwargs) (line 460)
        get_resample_call_result_63552 = invoke(stypy.reporting.localization.Localization(__file__, 460, 20), get_resample_63550, *[], **kwargs_63551)
        
        # Getting the type of 'alpha' (line 460)
        alpha_63553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 460, 41), 'alpha', False)
        
        # Evaluating a boolean operation
        
        # Call to get_filternorm(...): (line 461)
        # Processing the call keyword arguments (line 461)
        kwargs_63556 = {}
        # Getting the type of 'self' (line 461)
        self_63554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 20), 'self', False)
        # Obtaining the member 'get_filternorm' of a type (line 461)
        get_filternorm_63555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 20), self_63554, 'get_filternorm')
        # Calling get_filternorm(args, kwargs) (line 461)
        get_filternorm_call_result_63557 = invoke(stypy.reporting.localization.Localization(__file__, 461, 20), get_filternorm_63555, *[], **kwargs_63556)
        
        float_63558 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 45), 'float')
        # Applying the binary operator 'or' (line 461)
        result_or_keyword_63559 = python_operator(stypy.reporting.localization.Localization(__file__, 461, 20), 'or', get_filternorm_call_result_63557, float_63558)
        
        
        # Evaluating a boolean operation
        
        # Call to get_filterrad(...): (line 461)
        # Processing the call keyword arguments (line 461)
        kwargs_63562 = {}
        # Getting the type of 'self' (line 461)
        self_63560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 461, 50), 'self', False)
        # Obtaining the member 'get_filterrad' of a type (line 461)
        get_filterrad_63561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 461, 50), self_63560, 'get_filterrad')
        # Calling get_filterrad(args, kwargs) (line 461)
        get_filterrad_call_result_63563 = invoke(stypy.reporting.localization.Localization(__file__, 461, 50), get_filterrad_63561, *[], **kwargs_63562)
        
        float_63564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 461, 74), 'float')
        # Applying the binary operator 'or' (line 461)
        result_or_keyword_63565 = python_operator(stypy.reporting.localization.Localization(__file__, 461, 50), 'or', get_filterrad_call_result_63563, float_63564)
        
        # Processing the call keyword arguments (line 458)
        kwargs_63566 = {}
        # Getting the type of '_image' (line 458)
        _image_63537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 458, 16), '_image', False)
        # Obtaining the member 'resample' of a type (line 458)
        resample_63538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 458, 16), _image_63537, 'resample')
        # Calling resample(args, kwargs) (line 458)
        resample_call_result_63567 = invoke(stypy.reporting.localization.Localization(__file__, 458, 16), resample_63538, *[A_63539, output_63540, t_63541, subscript_call_result_63548, get_resample_call_result_63552, alpha_63553, result_or_keyword_63559, result_or_keyword_63565], **kwargs_63566)
        
        # SSA join for if statement (line 355)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 466):
        
        # Assigning a Call to a Name (line 466):
        
        # Call to to_rgba(...): (line 466)
        # Processing the call arguments (line 466)
        # Getting the type of 'output' (line 466)
        output_63570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 34), 'output', False)
        # Processing the call keyword arguments (line 466)
        # Getting the type of 'True' (line 466)
        True_63571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 48), 'True', False)
        keyword_63572 = True_63571
        # Getting the type of 'False' (line 466)
        False_63573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 59), 'False', False)
        keyword_63574 = False_63573
        kwargs_63575 = {'bytes': keyword_63572, 'norm': keyword_63574}
        # Getting the type of 'self' (line 466)
        self_63568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 466, 21), 'self', False)
        # Obtaining the member 'to_rgba' of a type (line 466)
        to_rgba_63569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 466, 21), self_63568, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 466)
        to_rgba_call_result_63576 = invoke(stypy.reporting.localization.Localization(__file__, 466, 21), to_rgba_63569, *[output_63570], **kwargs_63575)
        
        # Assigning a type to the variable 'output' (line 466)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 466, 12), 'output', to_rgba_call_result_63576)
        
        
        # Getting the type of 'A' (line 470)
        A_63577 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 470, 15), 'A')
        # Obtaining the member 'ndim' of a type (line 470)
        ndim_63578 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 470, 15), A_63577, 'ndim')
        int_63579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 470, 25), 'int')
        # Applying the binary operator '==' (line 470)
        result_eq_63580 = python_operator(stypy.reporting.localization.Localization(__file__, 470, 15), '==', ndim_63578, int_63579)
        
        # Testing the type of an if condition (line 470)
        if_condition_63581 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 470, 12), result_eq_63580)
        # Assigning a type to the variable 'if_condition_63581' (line 470)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 470, 12), 'if_condition_63581', if_condition_63581)
        # SSA begins for if statement (line 470)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 471):
        
        # Assigning a Call to a Name (line 471):
        
        # Call to get_alpha(...): (line 471)
        # Processing the call keyword arguments (line 471)
        kwargs_63584 = {}
        # Getting the type of 'self' (line 471)
        self_63582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 471, 24), 'self', False)
        # Obtaining the member 'get_alpha' of a type (line 471)
        get_alpha_63583 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 471, 24), self_63582, 'get_alpha')
        # Calling get_alpha(args, kwargs) (line 471)
        get_alpha_call_result_63585 = invoke(stypy.reporting.localization.Localization(__file__, 471, 24), get_alpha_63583, *[], **kwargs_63584)
        
        # Assigning a type to the variable 'alpha' (line 471)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 471, 16), 'alpha', get_alpha_call_result_63585)
        
        # Type idiom detected: calculating its left and rigth part (line 472)
        # Getting the type of 'alpha' (line 472)
        alpha_63586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 19), 'alpha')
        # Getting the type of 'None' (line 472)
        None_63587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 472, 28), 'None')
        
        (may_be_63588, more_types_in_union_63589) = may_be_none(alpha_63586, None_63587)

        if may_be_63588:

            if more_types_in_union_63589:
                # Runtime conditional SSA (line 472)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Num to a Name (line 473):
            
            # Assigning a Num to a Name (line 473):
            int_63590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 473, 28), 'int')
            # Assigning a type to the variable 'alpha' (line 473)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 473, 20), 'alpha', int_63590)

            if more_types_in_union_63589:
                # SSA join for if statement (line 472)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Subscript to a Name (line 474):
        
        # Assigning a Subscript to a Name (line 474):
        
        # Obtaining the type of the subscript
        slice_63591 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 474, 32), None, None, None)
        slice_63592 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 474, 32), None, None, None)
        int_63593 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 474, 45), 'int')
        # Getting the type of 'output' (line 474)
        output_63594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 474, 32), 'output')
        # Obtaining the member '__getitem__' of a type (line 474)
        getitem___63595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 474, 32), output_63594, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 474)
        subscript_call_result_63596 = invoke(stypy.reporting.localization.Localization(__file__, 474, 32), getitem___63595, (slice_63591, slice_63592, int_63593))
        
        # Assigning a type to the variable 'alpha_channel' (line 474)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 474, 16), 'alpha_channel', subscript_call_result_63596)
        
        # Assigning a Call to a Subscript (line 475):
        
        # Assigning a Call to a Subscript (line 475):
        
        # Call to asarray(...): (line 475)
        # Processing the call arguments (line 475)
        
        # Call to asarray(...): (line 476)
        # Processing the call arguments (line 476)
        # Getting the type of 'alpha_channel' (line 476)
        alpha_channel_63601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 31), 'alpha_channel', False)
        # Getting the type of 'np' (line 476)
        np_63602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 46), 'np', False)
        # Obtaining the member 'float32' of a type (line 476)
        float32_63603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 46), np_63602, 'float32')
        # Processing the call keyword arguments (line 476)
        kwargs_63604 = {}
        # Getting the type of 'np' (line 476)
        np_63599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 20), 'np', False)
        # Obtaining the member 'asarray' of a type (line 476)
        asarray_63600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 476, 20), np_63599, 'asarray')
        # Calling asarray(args, kwargs) (line 476)
        asarray_call_result_63605 = invoke(stypy.reporting.localization.Localization(__file__, 476, 20), asarray_63600, *[alpha_channel_63601, float32_63603], **kwargs_63604)
        
        # Getting the type of 'out_alpha' (line 476)
        out_alpha_63606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 60), 'out_alpha', False)
        # Applying the binary operator '*' (line 476)
        result_mul_63607 = python_operator(stypy.reporting.localization.Localization(__file__, 476, 20), '*', asarray_call_result_63605, out_alpha_63606)
        
        # Getting the type of 'alpha' (line 476)
        alpha_63608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 476, 72), 'alpha', False)
        # Applying the binary operator '*' (line 476)
        result_mul_63609 = python_operator(stypy.reporting.localization.Localization(__file__, 476, 70), '*', result_mul_63607, alpha_63608)
        
        # Getting the type of 'np' (line 477)
        np_63610 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 477, 20), 'np', False)
        # Obtaining the member 'uint8' of a type (line 477)
        uint8_63611 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 477, 20), np_63610, 'uint8')
        # Processing the call keyword arguments (line 475)
        kwargs_63612 = {}
        # Getting the type of 'np' (line 475)
        np_63597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 35), 'np', False)
        # Obtaining the member 'asarray' of a type (line 475)
        asarray_63598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 475, 35), np_63597, 'asarray')
        # Calling asarray(args, kwargs) (line 475)
        asarray_call_result_63613 = invoke(stypy.reporting.localization.Localization(__file__, 475, 35), asarray_63598, *[result_mul_63609, uint8_63611], **kwargs_63612)
        
        # Getting the type of 'alpha_channel' (line 475)
        alpha_channel_63614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 475, 16), 'alpha_channel')
        slice_63615 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 475, 16), None, None, None)
        # Storing an element on a container (line 475)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 475, 16), alpha_channel_63614, (slice_63615, asarray_call_result_63613))
        # SSA join for if statement (line 470)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 351)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 480)
        # Getting the type of 'self' (line 480)
        self_63616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 15), 'self')
        # Obtaining the member '_imcache' of a type (line 480)
        _imcache_63617 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 480, 15), self_63616, '_imcache')
        # Getting the type of 'None' (line 480)
        None_63618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 480, 32), 'None')
        
        (may_be_63619, more_types_in_union_63620) = may_be_none(_imcache_63617, None_63618)

        if may_be_63619:

            if more_types_in_union_63620:
                # Runtime conditional SSA (line 480)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Attribute (line 481):
            
            # Assigning a Call to a Attribute (line 481):
            
            # Call to to_rgba(...): (line 481)
            # Processing the call arguments (line 481)
            # Getting the type of 'A' (line 481)
            A_63623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 45), 'A', False)
            # Processing the call keyword arguments (line 481)
            # Getting the type of 'True' (line 481)
            True_63624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 54), 'True', False)
            keyword_63625 = True_63624
            
            # Getting the type of 'A' (line 481)
            A_63626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 66), 'A', False)
            # Obtaining the member 'ndim' of a type (line 481)
            ndim_63627 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 66), A_63626, 'ndim')
            int_63628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 481, 76), 'int')
            # Applying the binary operator '==' (line 481)
            result_eq_63629 = python_operator(stypy.reporting.localization.Localization(__file__, 481, 66), '==', ndim_63627, int_63628)
            
            keyword_63630 = result_eq_63629
            kwargs_63631 = {'bytes': keyword_63625, 'norm': keyword_63630}
            # Getting the type of 'self' (line 481)
            self_63621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 32), 'self', False)
            # Obtaining the member 'to_rgba' of a type (line 481)
            to_rgba_63622 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 32), self_63621, 'to_rgba')
            # Calling to_rgba(args, kwargs) (line 481)
            to_rgba_call_result_63632 = invoke(stypy.reporting.localization.Localization(__file__, 481, 32), to_rgba_63622, *[A_63623], **kwargs_63631)
            
            # Getting the type of 'self' (line 481)
            self_63633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 481, 16), 'self')
            # Setting the type of the member '_imcache' of a type (line 481)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 481, 16), self_63633, '_imcache', to_rgba_call_result_63632)

            if more_types_in_union_63620:
                # SSA join for if statement (line 480)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Name (line 482):
        
        # Assigning a Attribute to a Name (line 482):
        # Getting the type of 'self' (line 482)
        self_63634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 482, 21), 'self')
        # Obtaining the member '_imcache' of a type (line 482)
        _imcache_63635 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 482, 21), self_63634, '_imcache')
        # Assigning a type to the variable 'output' (line 482)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 482, 12), 'output', _imcache_63635)
        
        # Assigning a Call to a Name (line 486):
        
        # Assigning a Call to a Name (line 486):
        
        # Call to frozen(...): (line 486)
        # Processing the call keyword arguments (line 486)
        kwargs_63648 = {}
        
        # Call to TransformedBbox(...): (line 486)
        # Processing the call arguments (line 486)
        # Getting the type of 'clip_bbox' (line 487)
        clip_bbox_63637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 16), 'clip_bbox', False)
        
        # Call to inverted(...): (line 487)
        # Processing the call keyword arguments (line 487)
        kwargs_63643 = {}
        
        # Call to frozen(...): (line 487)
        # Processing the call keyword arguments (line 487)
        kwargs_63640 = {}
        # Getting the type of 't0' (line 487)
        t0_63638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 27), 't0', False)
        # Obtaining the member 'frozen' of a type (line 487)
        frozen_63639 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 27), t0_63638, 'frozen')
        # Calling frozen(args, kwargs) (line 487)
        frozen_call_result_63641 = invoke(stypy.reporting.localization.Localization(__file__, 487, 27), frozen_63639, *[], **kwargs_63640)
        
        # Obtaining the member 'inverted' of a type (line 487)
        inverted_63642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 27), frozen_call_result_63641, 'inverted')
        # Calling inverted(args, kwargs) (line 487)
        inverted_call_result_63644 = invoke(stypy.reporting.localization.Localization(__file__, 487, 27), inverted_63642, *[], **kwargs_63643)
        
        # Processing the call keyword arguments (line 486)
        kwargs_63645 = {}
        # Getting the type of 'TransformedBbox' (line 486)
        TransformedBbox_63636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 21), 'TransformedBbox', False)
        # Calling TransformedBbox(args, kwargs) (line 486)
        TransformedBbox_call_result_63646 = invoke(stypy.reporting.localization.Localization(__file__, 486, 21), TransformedBbox_63636, *[clip_bbox_63637, inverted_call_result_63644], **kwargs_63645)
        
        # Obtaining the member 'frozen' of a type (line 486)
        frozen_63647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 486, 21), TransformedBbox_call_result_63646, 'frozen')
        # Calling frozen(args, kwargs) (line 486)
        frozen_call_result_63649 = invoke(stypy.reporting.localization.Localization(__file__, 486, 21), frozen_63647, *[], **kwargs_63648)
        
        # Assigning a type to the variable 'subset' (line 486)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 486, 12), 'subset', frozen_call_result_63649)
        
        # Assigning a Subscript to a Name (line 488):
        
        # Assigning a Subscript to a Name (line 488):
        
        # Obtaining the type of the subscript
        
        # Call to int(...): (line 489)
        # Processing the call arguments (line 489)
        
        # Call to max(...): (line 489)
        # Processing the call arguments (line 489)
        # Getting the type of 'subset' (line 489)
        subset_63652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 24), 'subset', False)
        # Obtaining the member 'ymin' of a type (line 489)
        ymin_63653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 24), subset_63652, 'ymin')
        int_63654 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 37), 'int')
        # Processing the call keyword arguments (line 489)
        kwargs_63655 = {}
        # Getting the type of 'max' (line 489)
        max_63651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 20), 'max', False)
        # Calling max(args, kwargs) (line 489)
        max_call_result_63656 = invoke(stypy.reporting.localization.Localization(__file__, 489, 20), max_63651, *[ymin_63653, int_63654], **kwargs_63655)
        
        # Processing the call keyword arguments (line 489)
        kwargs_63657 = {}
        # Getting the type of 'int' (line 489)
        int_63650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 16), 'int', False)
        # Calling int(args, kwargs) (line 489)
        int_call_result_63658 = invoke(stypy.reporting.localization.Localization(__file__, 489, 16), int_63650, *[max_call_result_63656], **kwargs_63657)
        
        
        # Call to int(...): (line 490)
        # Processing the call arguments (line 490)
        
        # Call to min(...): (line 490)
        # Processing the call arguments (line 490)
        # Getting the type of 'subset' (line 490)
        subset_63661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 24), 'subset', False)
        # Obtaining the member 'ymax' of a type (line 490)
        ymax_63662 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 24), subset_63661, 'ymax')
        int_63663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 38), 'int')
        # Applying the binary operator '+' (line 490)
        result_add_63664 = python_operator(stypy.reporting.localization.Localization(__file__, 490, 24), '+', ymax_63662, int_63663)
        
        
        # Obtaining the type of the subscript
        int_63665 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 490, 54), 'int')
        # Getting the type of 'output' (line 490)
        output_63666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 41), 'output', False)
        # Obtaining the member 'shape' of a type (line 490)
        shape_63667 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 41), output_63666, 'shape')
        # Obtaining the member '__getitem__' of a type (line 490)
        getitem___63668 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 490, 41), shape_63667, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 490)
        subscript_call_result_63669 = invoke(stypy.reporting.localization.Localization(__file__, 490, 41), getitem___63668, int_63665)
        
        # Processing the call keyword arguments (line 490)
        kwargs_63670 = {}
        # Getting the type of 'min' (line 490)
        min_63660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 20), 'min', False)
        # Calling min(args, kwargs) (line 490)
        min_call_result_63671 = invoke(stypy.reporting.localization.Localization(__file__, 490, 20), min_63660, *[result_add_63664, subscript_call_result_63669], **kwargs_63670)
        
        # Processing the call keyword arguments (line 490)
        kwargs_63672 = {}
        # Getting the type of 'int' (line 490)
        int_63659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 16), 'int', False)
        # Calling int(args, kwargs) (line 490)
        int_call_result_63673 = invoke(stypy.reporting.localization.Localization(__file__, 490, 16), int_63659, *[min_call_result_63671], **kwargs_63672)
        
        slice_63674 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 488, 21), int_call_result_63658, int_call_result_63673, None)
        
        # Call to int(...): (line 491)
        # Processing the call arguments (line 491)
        
        # Call to max(...): (line 491)
        # Processing the call arguments (line 491)
        # Getting the type of 'subset' (line 491)
        subset_63677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 24), 'subset', False)
        # Obtaining the member 'xmin' of a type (line 491)
        xmin_63678 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 24), subset_63677, 'xmin')
        int_63679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, 37), 'int')
        # Processing the call keyword arguments (line 491)
        kwargs_63680 = {}
        # Getting the type of 'max' (line 491)
        max_63676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 20), 'max', False)
        # Calling max(args, kwargs) (line 491)
        max_call_result_63681 = invoke(stypy.reporting.localization.Localization(__file__, 491, 20), max_63676, *[xmin_63678, int_63679], **kwargs_63680)
        
        # Processing the call keyword arguments (line 491)
        kwargs_63682 = {}
        # Getting the type of 'int' (line 491)
        int_63675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 16), 'int', False)
        # Calling int(args, kwargs) (line 491)
        int_call_result_63683 = invoke(stypy.reporting.localization.Localization(__file__, 491, 16), int_63675, *[max_call_result_63681], **kwargs_63682)
        
        
        # Call to int(...): (line 492)
        # Processing the call arguments (line 492)
        
        # Call to min(...): (line 492)
        # Processing the call arguments (line 492)
        # Getting the type of 'subset' (line 492)
        subset_63686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 24), 'subset', False)
        # Obtaining the member 'xmax' of a type (line 492)
        xmax_63687 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 24), subset_63686, 'xmax')
        int_63688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 38), 'int')
        # Applying the binary operator '+' (line 492)
        result_add_63689 = python_operator(stypy.reporting.localization.Localization(__file__, 492, 24), '+', xmax_63687, int_63688)
        
        
        # Obtaining the type of the subscript
        int_63690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 492, 54), 'int')
        # Getting the type of 'output' (line 492)
        output_63691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 41), 'output', False)
        # Obtaining the member 'shape' of a type (line 492)
        shape_63692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 41), output_63691, 'shape')
        # Obtaining the member '__getitem__' of a type (line 492)
        getitem___63693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 492, 41), shape_63692, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 492)
        subscript_call_result_63694 = invoke(stypy.reporting.localization.Localization(__file__, 492, 41), getitem___63693, int_63690)
        
        # Processing the call keyword arguments (line 492)
        kwargs_63695 = {}
        # Getting the type of 'min' (line 492)
        min_63685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 20), 'min', False)
        # Calling min(args, kwargs) (line 492)
        min_call_result_63696 = invoke(stypy.reporting.localization.Localization(__file__, 492, 20), min_63685, *[result_add_63689, subscript_call_result_63694], **kwargs_63695)
        
        # Processing the call keyword arguments (line 492)
        kwargs_63697 = {}
        # Getting the type of 'int' (line 492)
        int_63684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 492, 16), 'int', False)
        # Calling int(args, kwargs) (line 492)
        int_call_result_63698 = invoke(stypy.reporting.localization.Localization(__file__, 492, 16), int_63684, *[min_call_result_63696], **kwargs_63697)
        
        slice_63699 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 488, 21), int_call_result_63683, int_call_result_63698, None)
        # Getting the type of 'output' (line 488)
        output_63700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 21), 'output')
        # Obtaining the member '__getitem__' of a type (line 488)
        getitem___63701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 488, 21), output_63700, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 488)
        subscript_call_result_63702 = invoke(stypy.reporting.localization.Localization(__file__, 488, 21), getitem___63701, (slice_63674, slice_63699))
        
        # Assigning a type to the variable 'output' (line 488)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 488, 12), 'output', subscript_call_result_63702)
        
        # Assigning a BinOp to a Name (line 494):
        
        # Assigning a BinOp to a Name (line 494):
        
        # Call to translate(...): (line 494)
        # Processing the call arguments (line 494)
        
        # Call to int(...): (line 495)
        # Processing the call arguments (line 495)
        
        # Call to max(...): (line 495)
        # Processing the call arguments (line 495)
        # Getting the type of 'subset' (line 495)
        subset_63709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 24), 'subset', False)
        # Obtaining the member 'xmin' of a type (line 495)
        xmin_63710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 24), subset_63709, 'xmin')
        int_63711 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 37), 'int')
        # Processing the call keyword arguments (line 495)
        kwargs_63712 = {}
        # Getting the type of 'max' (line 495)
        max_63708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 20), 'max', False)
        # Calling max(args, kwargs) (line 495)
        max_call_result_63713 = invoke(stypy.reporting.localization.Localization(__file__, 495, 20), max_63708, *[xmin_63710, int_63711], **kwargs_63712)
        
        # Processing the call keyword arguments (line 495)
        kwargs_63714 = {}
        # Getting the type of 'int' (line 495)
        int_63707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 16), 'int', False)
        # Calling int(args, kwargs) (line 495)
        int_call_result_63715 = invoke(stypy.reporting.localization.Localization(__file__, 495, 16), int_63707, *[max_call_result_63713], **kwargs_63714)
        
        
        # Call to int(...): (line 495)
        # Processing the call arguments (line 495)
        
        # Call to max(...): (line 495)
        # Processing the call arguments (line 495)
        # Getting the type of 'subset' (line 495)
        subset_63718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 50), 'subset', False)
        # Obtaining the member 'ymin' of a type (line 495)
        ymin_63719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 495, 50), subset_63718, 'ymin')
        int_63720 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 63), 'int')
        # Processing the call keyword arguments (line 495)
        kwargs_63721 = {}
        # Getting the type of 'max' (line 495)
        max_63717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 46), 'max', False)
        # Calling max(args, kwargs) (line 495)
        max_call_result_63722 = invoke(stypy.reporting.localization.Localization(__file__, 495, 46), max_63717, *[ymin_63719, int_63720], **kwargs_63721)
        
        # Processing the call keyword arguments (line 495)
        kwargs_63723 = {}
        # Getting the type of 'int' (line 495)
        int_63716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 42), 'int', False)
        # Calling int(args, kwargs) (line 495)
        int_call_result_63724 = invoke(stypy.reporting.localization.Localization(__file__, 495, 42), int_63716, *[max_call_result_63722], **kwargs_63723)
        
        # Processing the call keyword arguments (line 494)
        kwargs_63725 = {}
        
        # Call to Affine2D(...): (line 494)
        # Processing the call keyword arguments (line 494)
        kwargs_63704 = {}
        # Getting the type of 'Affine2D' (line 494)
        Affine2D_63703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 16), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 494)
        Affine2D_call_result_63705 = invoke(stypy.reporting.localization.Localization(__file__, 494, 16), Affine2D_63703, *[], **kwargs_63704)
        
        # Obtaining the member 'translate' of a type (line 494)
        translate_63706 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 494, 16), Affine2D_call_result_63705, 'translate')
        # Calling translate(args, kwargs) (line 494)
        translate_call_result_63726 = invoke(stypy.reporting.localization.Localization(__file__, 494, 16), translate_63706, *[int_call_result_63715, int_call_result_63724], **kwargs_63725)
        
        # Getting the type of 't' (line 495)
        t_63727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 495, 70), 't')
        # Applying the binary operator '+' (line 494)
        result_add_63728 = python_operator(stypy.reporting.localization.Localization(__file__, 494, 16), '+', translate_call_result_63726, t_63727)
        
        # Assigning a type to the variable 't' (line 494)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 494, 12), 't', result_add_63728)
        # SSA join for if statement (line 351)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 497)
        tuple_63729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 497, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 497)
        # Adding element type (line 497)
        # Getting the type of 'output' (line 497)
        output_63730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 15), 'output')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 497, 15), tuple_63729, output_63730)
        # Adding element type (line 497)
        # Getting the type of 'clipped_bbox' (line 497)
        clipped_bbox_63731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 23), 'clipped_bbox')
        # Obtaining the member 'x0' of a type (line 497)
        x0_63732 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 23), clipped_bbox_63731, 'x0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 497, 15), tuple_63729, x0_63732)
        # Adding element type (line 497)
        # Getting the type of 'clipped_bbox' (line 497)
        clipped_bbox_63733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 40), 'clipped_bbox')
        # Obtaining the member 'y0' of a type (line 497)
        y0_63734 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 497, 40), clipped_bbox_63733, 'y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 497, 15), tuple_63729, y0_63734)
        # Adding element type (line 497)
        # Getting the type of 't' (line 497)
        t_63735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 57), 't')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 497, 15), tuple_63729, t_63735)
        
        # Assigning a type to the variable 'stypy_return_type' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'stypy_return_type', tuple_63729)
        
        # ################# End of '_make_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_make_image' in the type store
        # Getting the type of 'stypy_return_type' (line 269)
        stypy_return_type_63736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_63736)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_make_image'
        return stypy_return_type_63736


    @norecursion
    def make_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_63737 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 499, 49), 'float')
        # Getting the type of 'False' (line 499)
        False_63738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 64), 'False')
        defaults = [float_63737, False_63738]
        # Create a new context for function 'make_image'
        module_type_store = module_type_store.open_function_context('make_image', 499, 4, False)
        # Assigning a type to the variable 'self' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.make_image.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.make_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.make_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.make_image.__dict__.__setitem__('stypy_function_name', '_ImageBase.make_image')
        _ImageBase.make_image.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'magnification', 'unsampled'])
        _ImageBase.make_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.make_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.make_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.make_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.make_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.make_image.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.make_image', ['renderer', 'magnification', 'unsampled'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'make_image', localization, ['renderer', 'magnification', 'unsampled'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'make_image(...)' code ##################

        
        # Call to RuntimeError(...): (line 500)
        # Processing the call arguments (line 500)
        unicode_63740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 500, 27), 'unicode', u'The make_image method must be overridden.')
        # Processing the call keyword arguments (line 500)
        kwargs_63741 = {}
        # Getting the type of 'RuntimeError' (line 500)
        RuntimeError_63739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 14), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 500)
        RuntimeError_call_result_63742 = invoke(stypy.reporting.localization.Localization(__file__, 500, 14), RuntimeError_63739, *[unicode_63740], **kwargs_63741)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 500, 8), RuntimeError_call_result_63742, 'raise parameter', BaseException)
        
        # ################# End of 'make_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'make_image' in the type store
        # Getting the type of 'stypy_return_type' (line 499)
        stypy_return_type_63743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_63743)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'make_image'
        return stypy_return_type_63743


    @norecursion
    def _draw_unsampled_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_draw_unsampled_image'
        module_type_store = module_type_store.open_function_context('_draw_unsampled_image', 502, 4, False)
        # Assigning a type to the variable 'self' (line 503)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 503, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase._draw_unsampled_image.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase._draw_unsampled_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase._draw_unsampled_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase._draw_unsampled_image.__dict__.__setitem__('stypy_function_name', '_ImageBase._draw_unsampled_image')
        _ImageBase._draw_unsampled_image.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'gc'])
        _ImageBase._draw_unsampled_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase._draw_unsampled_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase._draw_unsampled_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase._draw_unsampled_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase._draw_unsampled_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase._draw_unsampled_image.__dict__.__setitem__('stypy_declared_arg_number', 3)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase._draw_unsampled_image', ['renderer', 'gc'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_draw_unsampled_image', localization, ['renderer', 'gc'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_draw_unsampled_image(...)' code ##################

        unicode_63744 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 506, (-1)), 'unicode', u'\n        draw unsampled image. The renderer should support a draw_image method\n        with scale parameter.\n        ')
        
        # Assigning a Call to a Tuple (line 508):
        
        # Assigning a Call to a Name:
        
        # Call to make_image(...): (line 508)
        # Processing the call arguments (line 508)
        # Getting the type of 'renderer' (line 508)
        renderer_63747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 42), 'renderer', False)
        # Processing the call keyword arguments (line 508)
        # Getting the type of 'True' (line 508)
        True_63748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 62), 'True', False)
        keyword_63749 = True_63748
        kwargs_63750 = {'unsampled': keyword_63749}
        # Getting the type of 'self' (line 508)
        self_63745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 26), 'self', False)
        # Obtaining the member 'make_image' of a type (line 508)
        make_image_63746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 26), self_63745, 'make_image')
        # Calling make_image(args, kwargs) (line 508)
        make_image_call_result_63751 = invoke(stypy.reporting.localization.Localization(__file__, 508, 26), make_image_63746, *[renderer_63747], **kwargs_63750)
        
        # Assigning a type to the variable 'call_assignment_62309' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'call_assignment_62309', make_image_call_result_63751)
        
        # Assigning a Call to a Name (line 508):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_63754 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 8), 'int')
        # Processing the call keyword arguments
        kwargs_63755 = {}
        # Getting the type of 'call_assignment_62309' (line 508)
        call_assignment_62309_63752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'call_assignment_62309', False)
        # Obtaining the member '__getitem__' of a type (line 508)
        getitem___63753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 8), call_assignment_62309_63752, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_63756 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___63753, *[int_63754], **kwargs_63755)
        
        # Assigning a type to the variable 'call_assignment_62310' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'call_assignment_62310', getitem___call_result_63756)
        
        # Assigning a Name to a Name (line 508):
        # Getting the type of 'call_assignment_62310' (line 508)
        call_assignment_62310_63757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'call_assignment_62310')
        # Assigning a type to the variable 'im' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'im', call_assignment_62310_63757)
        
        # Assigning a Call to a Name (line 508):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_63760 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 8), 'int')
        # Processing the call keyword arguments
        kwargs_63761 = {}
        # Getting the type of 'call_assignment_62309' (line 508)
        call_assignment_62309_63758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'call_assignment_62309', False)
        # Obtaining the member '__getitem__' of a type (line 508)
        getitem___63759 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 8), call_assignment_62309_63758, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_63762 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___63759, *[int_63760], **kwargs_63761)
        
        # Assigning a type to the variable 'call_assignment_62311' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'call_assignment_62311', getitem___call_result_63762)
        
        # Assigning a Name to a Name (line 508):
        # Getting the type of 'call_assignment_62311' (line 508)
        call_assignment_62311_63763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'call_assignment_62311')
        # Assigning a type to the variable 'l' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 12), 'l', call_assignment_62311_63763)
        
        # Assigning a Call to a Name (line 508):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_63766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 8), 'int')
        # Processing the call keyword arguments
        kwargs_63767 = {}
        # Getting the type of 'call_assignment_62309' (line 508)
        call_assignment_62309_63764 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'call_assignment_62309', False)
        # Obtaining the member '__getitem__' of a type (line 508)
        getitem___63765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 8), call_assignment_62309_63764, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_63768 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___63765, *[int_63766], **kwargs_63767)
        
        # Assigning a type to the variable 'call_assignment_62312' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'call_assignment_62312', getitem___call_result_63768)
        
        # Assigning a Name to a Name (line 508):
        # Getting the type of 'call_assignment_62312' (line 508)
        call_assignment_62312_63769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'call_assignment_62312')
        # Assigning a type to the variable 'b' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 15), 'b', call_assignment_62312_63769)
        
        # Assigning a Call to a Name (line 508):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_63772 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 508, 8), 'int')
        # Processing the call keyword arguments
        kwargs_63773 = {}
        # Getting the type of 'call_assignment_62309' (line 508)
        call_assignment_62309_63770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'call_assignment_62309', False)
        # Obtaining the member '__getitem__' of a type (line 508)
        getitem___63771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 508, 8), call_assignment_62309_63770, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_63774 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___63771, *[int_63772], **kwargs_63773)
        
        # Assigning a type to the variable 'call_assignment_62313' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'call_assignment_62313', getitem___call_result_63774)
        
        # Assigning a Name to a Name (line 508):
        # Getting the type of 'call_assignment_62313' (line 508)
        call_assignment_62313_63775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 508, 8), 'call_assignment_62313')
        # Assigning a type to the variable 'trans' (line 508)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 508, 18), 'trans', call_assignment_62313_63775)
        
        # Type idiom detected: calculating its left and rigth part (line 510)
        # Getting the type of 'im' (line 510)
        im_63776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 11), 'im')
        # Getting the type of 'None' (line 510)
        None_63777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 510, 17), 'None')
        
        (may_be_63778, more_types_in_union_63779) = may_be_none(im_63776, None_63777)

        if may_be_63778:

            if more_types_in_union_63779:
                # Runtime conditional SSA (line 510)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'stypy_return_type' (line 511)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 12), 'stypy_return_type', types.NoneType)

            if more_types_in_union_63779:
                # SSA join for if statement (line 510)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a BinOp to a Name (line 513):
        
        # Assigning a BinOp to a Name (line 513):
        
        # Call to scale(...): (line 513)
        # Processing the call arguments (line 513)
        
        # Obtaining the type of the subscript
        int_63784 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 42), 'int')
        # Getting the type of 'im' (line 513)
        im_63785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 33), 'im', False)
        # Obtaining the member 'shape' of a type (line 513)
        shape_63786 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 33), im_63785, 'shape')
        # Obtaining the member '__getitem__' of a type (line 513)
        getitem___63787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 33), shape_63786, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 513)
        subscript_call_result_63788 = invoke(stypy.reporting.localization.Localization(__file__, 513, 33), getitem___63787, int_63784)
        
        
        # Obtaining the type of the subscript
        int_63789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 55), 'int')
        # Getting the type of 'im' (line 513)
        im_63790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 46), 'im', False)
        # Obtaining the member 'shape' of a type (line 513)
        shape_63791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 46), im_63790, 'shape')
        # Obtaining the member '__getitem__' of a type (line 513)
        getitem___63792 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 46), shape_63791, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 513)
        subscript_call_result_63793 = invoke(stypy.reporting.localization.Localization(__file__, 513, 46), getitem___63792, int_63789)
        
        # Processing the call keyword arguments (line 513)
        kwargs_63794 = {}
        
        # Call to Affine2D(...): (line 513)
        # Processing the call keyword arguments (line 513)
        kwargs_63781 = {}
        # Getting the type of 'Affine2D' (line 513)
        Affine2D_63780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 16), 'Affine2D', False)
        # Calling Affine2D(args, kwargs) (line 513)
        Affine2D_call_result_63782 = invoke(stypy.reporting.localization.Localization(__file__, 513, 16), Affine2D_63780, *[], **kwargs_63781)
        
        # Obtaining the member 'scale' of a type (line 513)
        scale_63783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 16), Affine2D_call_result_63782, 'scale')
        # Calling scale(args, kwargs) (line 513)
        scale_call_result_63795 = invoke(stypy.reporting.localization.Localization(__file__, 513, 16), scale_63783, *[subscript_call_result_63788, subscript_call_result_63793], **kwargs_63794)
        
        # Getting the type of 'trans' (line 513)
        trans_63796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 61), 'trans')
        # Applying the binary operator '+' (line 513)
        result_add_63797 = python_operator(stypy.reporting.localization.Localization(__file__, 513, 16), '+', scale_call_result_63795, trans_63796)
        
        # Assigning a type to the variable 'trans' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 8), 'trans', result_add_63797)
        
        # Call to draw_image(...): (line 515)
        # Processing the call arguments (line 515)
        # Getting the type of 'gc' (line 515)
        gc_63800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 28), 'gc', False)
        # Getting the type of 'l' (line 515)
        l_63801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 32), 'l', False)
        # Getting the type of 'b' (line 515)
        b_63802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 35), 'b', False)
        # Getting the type of 'im' (line 515)
        im_63803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 38), 'im', False)
        # Getting the type of 'trans' (line 515)
        trans_63804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 42), 'trans', False)
        # Processing the call keyword arguments (line 515)
        kwargs_63805 = {}
        # Getting the type of 'renderer' (line 515)
        renderer_63798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 8), 'renderer', False)
        # Obtaining the member 'draw_image' of a type (line 515)
        draw_image_63799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 515, 8), renderer_63798, 'draw_image')
        # Calling draw_image(args, kwargs) (line 515)
        draw_image_call_result_63806 = invoke(stypy.reporting.localization.Localization(__file__, 515, 8), draw_image_63799, *[gc_63800, l_63801, b_63802, im_63803, trans_63804], **kwargs_63805)
        
        
        # ################# End of '_draw_unsampled_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_draw_unsampled_image' in the type store
        # Getting the type of 'stypy_return_type' (line 502)
        stypy_return_type_63807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_63807)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_draw_unsampled_image'
        return stypy_return_type_63807


    @norecursion
    def _check_unsampled_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_check_unsampled_image'
        module_type_store = module_type_store.open_function_context('_check_unsampled_image', 517, 4, False)
        # Assigning a type to the variable 'self' (line 518)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 518, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase._check_unsampled_image.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase._check_unsampled_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase._check_unsampled_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase._check_unsampled_image.__dict__.__setitem__('stypy_function_name', '_ImageBase._check_unsampled_image')
        _ImageBase._check_unsampled_image.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        _ImageBase._check_unsampled_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase._check_unsampled_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase._check_unsampled_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase._check_unsampled_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase._check_unsampled_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase._check_unsampled_image.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase._check_unsampled_image', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_check_unsampled_image', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_check_unsampled_image(...)' code ##################

        unicode_63808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 521, (-1)), 'unicode', u'\n        return True if the image is better to be drawn unsampled.\n        The derived class needs to override it.\n        ')
        # Getting the type of 'False' (line 522)
        False_63809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 522, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 522)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 522, 8), 'stypy_return_type', False_63809)
        
        # ################# End of '_check_unsampled_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_check_unsampled_image' in the type store
        # Getting the type of 'stypy_return_type' (line 517)
        stypy_return_type_63810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 517, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_63810)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_check_unsampled_image'
        return stypy_return_type_63810


    @norecursion
    def draw(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'draw'
        module_type_store = module_type_store.open_function_context('draw', 524, 4, False)
        # Assigning a type to the variable 'self' (line 525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.draw.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.draw.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.draw.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.draw.__dict__.__setitem__('stypy_function_name', '_ImageBase.draw')
        _ImageBase.draw.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        _ImageBase.draw.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        _ImageBase.draw.__dict__.__setitem__('stypy_kwargs_param_name', 'kwargs')
        _ImageBase.draw.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.draw.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.draw.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.draw.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.draw', ['renderer'], 'args', 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'draw', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'draw(...)' code ##################

        
        
        
        # Call to get_visible(...): (line 527)
        # Processing the call keyword arguments (line 527)
        kwargs_63813 = {}
        # Getting the type of 'self' (line 527)
        self_63811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 527, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 527)
        get_visible_63812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 527, 15), self_63811, 'get_visible')
        # Calling get_visible(args, kwargs) (line 527)
        get_visible_call_result_63814 = invoke(stypy.reporting.localization.Localization(__file__, 527, 15), get_visible_63812, *[], **kwargs_63813)
        
        # Applying the 'not' unary operator (line 527)
        result_not__63815 = python_operator(stypy.reporting.localization.Localization(__file__, 527, 11), 'not', get_visible_call_result_63814)
        
        # Testing the type of an if condition (line 527)
        if_condition_63816 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 527, 8), result_not__63815)
        # Assigning a type to the variable 'if_condition_63816' (line 527)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 527, 8), 'if_condition_63816', if_condition_63816)
        # SSA begins for if statement (line 527)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 528):
        
        # Assigning a Name to a Attribute (line 528):
        # Getting the type of 'False' (line 528)
        False_63817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 25), 'False')
        # Getting the type of 'self' (line 528)
        self_63818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 528)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 528, 12), self_63818, 'stale', False_63817)
        # Assigning a type to the variable 'stypy_return_type' (line 529)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 529, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 527)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to get_array(...): (line 532)
        # Processing the call keyword arguments (line 532)
        kwargs_63821 = {}
        # Getting the type of 'self' (line 532)
        self_63819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 11), 'self', False)
        # Obtaining the member 'get_array' of a type (line 532)
        get_array_63820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 11), self_63819, 'get_array')
        # Calling get_array(args, kwargs) (line 532)
        get_array_call_result_63822 = invoke(stypy.reporting.localization.Localization(__file__, 532, 11), get_array_63820, *[], **kwargs_63821)
        
        # Obtaining the member 'size' of a type (line 532)
        size_63823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 532, 11), get_array_call_result_63822, 'size')
        int_63824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 532, 36), 'int')
        # Applying the binary operator '==' (line 532)
        result_eq_63825 = python_operator(stypy.reporting.localization.Localization(__file__, 532, 11), '==', size_63823, int_63824)
        
        # Testing the type of an if condition (line 532)
        if_condition_63826 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 532, 8), result_eq_63825)
        # Assigning a type to the variable 'if_condition_63826' (line 532)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 532, 8), 'if_condition_63826', if_condition_63826)
        # SSA begins for if statement (line 532)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 533):
        
        # Assigning a Name to a Attribute (line 533):
        # Getting the type of 'False' (line 533)
        False_63827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 25), 'False')
        # Getting the type of 'self' (line 533)
        self_63828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 12), 'self')
        # Setting the type of the member 'stale' of a type (line 533)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 533, 12), self_63828, 'stale', False_63827)
        # Assigning a type to the variable 'stypy_return_type' (line 534)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 534, 12), 'stypy_return_type', types.NoneType)
        # SSA join for if statement (line 532)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 537):
        
        # Assigning a Call to a Name (line 537):
        
        # Call to new_gc(...): (line 537)
        # Processing the call keyword arguments (line 537)
        kwargs_63831 = {}
        # Getting the type of 'renderer' (line 537)
        renderer_63829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 13), 'renderer', False)
        # Obtaining the member 'new_gc' of a type (line 537)
        new_gc_63830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 13), renderer_63829, 'new_gc')
        # Calling new_gc(args, kwargs) (line 537)
        new_gc_call_result_63832 = invoke(stypy.reporting.localization.Localization(__file__, 537, 13), new_gc_63830, *[], **kwargs_63831)
        
        # Assigning a type to the variable 'gc' (line 537)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 537, 8), 'gc', new_gc_call_result_63832)
        
        # Call to _set_gc_clip(...): (line 538)
        # Processing the call arguments (line 538)
        # Getting the type of 'gc' (line 538)
        gc_63835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 26), 'gc', False)
        # Processing the call keyword arguments (line 538)
        kwargs_63836 = {}
        # Getting the type of 'self' (line 538)
        self_63833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 8), 'self', False)
        # Obtaining the member '_set_gc_clip' of a type (line 538)
        _set_gc_clip_63834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 8), self_63833, '_set_gc_clip')
        # Calling _set_gc_clip(args, kwargs) (line 538)
        _set_gc_clip_call_result_63837 = invoke(stypy.reporting.localization.Localization(__file__, 538, 8), _set_gc_clip_63834, *[gc_63835], **kwargs_63836)
        
        
        # Call to set_alpha(...): (line 539)
        # Processing the call arguments (line 539)
        
        # Call to get_alpha(...): (line 539)
        # Processing the call keyword arguments (line 539)
        kwargs_63842 = {}
        # Getting the type of 'self' (line 539)
        self_63840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 21), 'self', False)
        # Obtaining the member 'get_alpha' of a type (line 539)
        get_alpha_63841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 21), self_63840, 'get_alpha')
        # Calling get_alpha(args, kwargs) (line 539)
        get_alpha_call_result_63843 = invoke(stypy.reporting.localization.Localization(__file__, 539, 21), get_alpha_63841, *[], **kwargs_63842)
        
        # Processing the call keyword arguments (line 539)
        kwargs_63844 = {}
        # Getting the type of 'gc' (line 539)
        gc_63838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 539, 8), 'gc', False)
        # Obtaining the member 'set_alpha' of a type (line 539)
        set_alpha_63839 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 539, 8), gc_63838, 'set_alpha')
        # Calling set_alpha(args, kwargs) (line 539)
        set_alpha_call_result_63845 = invoke(stypy.reporting.localization.Localization(__file__, 539, 8), set_alpha_63839, *[get_alpha_call_result_63843], **kwargs_63844)
        
        
        # Call to set_url(...): (line 540)
        # Processing the call arguments (line 540)
        
        # Call to get_url(...): (line 540)
        # Processing the call keyword arguments (line 540)
        kwargs_63850 = {}
        # Getting the type of 'self' (line 540)
        self_63848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 19), 'self', False)
        # Obtaining the member 'get_url' of a type (line 540)
        get_url_63849 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 19), self_63848, 'get_url')
        # Calling get_url(args, kwargs) (line 540)
        get_url_call_result_63851 = invoke(stypy.reporting.localization.Localization(__file__, 540, 19), get_url_63849, *[], **kwargs_63850)
        
        # Processing the call keyword arguments (line 540)
        kwargs_63852 = {}
        # Getting the type of 'gc' (line 540)
        gc_63846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 540, 8), 'gc', False)
        # Obtaining the member 'set_url' of a type (line 540)
        set_url_63847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 540, 8), gc_63846, 'set_url')
        # Calling set_url(args, kwargs) (line 540)
        set_url_call_result_63853 = invoke(stypy.reporting.localization.Localization(__file__, 540, 8), set_url_63847, *[get_url_call_result_63851], **kwargs_63852)
        
        
        # Call to set_gid(...): (line 541)
        # Processing the call arguments (line 541)
        
        # Call to get_gid(...): (line 541)
        # Processing the call keyword arguments (line 541)
        kwargs_63858 = {}
        # Getting the type of 'self' (line 541)
        self_63856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 19), 'self', False)
        # Obtaining the member 'get_gid' of a type (line 541)
        get_gid_63857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 19), self_63856, 'get_gid')
        # Calling get_gid(args, kwargs) (line 541)
        get_gid_call_result_63859 = invoke(stypy.reporting.localization.Localization(__file__, 541, 19), get_gid_63857, *[], **kwargs_63858)
        
        # Processing the call keyword arguments (line 541)
        kwargs_63860 = {}
        # Getting the type of 'gc' (line 541)
        gc_63854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'gc', False)
        # Obtaining the member 'set_gid' of a type (line 541)
        set_gid_63855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 541, 8), gc_63854, 'set_gid')
        # Calling set_gid(args, kwargs) (line 541)
        set_gid_call_result_63861 = invoke(stypy.reporting.localization.Localization(__file__, 541, 8), set_gid_63855, *[get_gid_call_result_63859], **kwargs_63860)
        
        
        
        # Evaluating a boolean operation
        
        # Call to _check_unsampled_image(...): (line 543)
        # Processing the call arguments (line 543)
        # Getting the type of 'renderer' (line 543)
        renderer_63864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 40), 'renderer', False)
        # Processing the call keyword arguments (line 543)
        kwargs_63865 = {}
        # Getting the type of 'self' (line 543)
        self_63862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 543, 12), 'self', False)
        # Obtaining the member '_check_unsampled_image' of a type (line 543)
        _check_unsampled_image_63863 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 543, 12), self_63862, '_check_unsampled_image')
        # Calling _check_unsampled_image(args, kwargs) (line 543)
        _check_unsampled_image_call_result_63866 = invoke(stypy.reporting.localization.Localization(__file__, 543, 12), _check_unsampled_image_63863, *[renderer_63864], **kwargs_63865)
        
        
        # Call to get_transform(...): (line 544)
        # Processing the call keyword arguments (line 544)
        kwargs_63869 = {}
        # Getting the type of 'self' (line 544)
        self_63867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 16), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 544)
        get_transform_63868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 16), self_63867, 'get_transform')
        # Calling get_transform(args, kwargs) (line 544)
        get_transform_call_result_63870 = invoke(stypy.reporting.localization.Localization(__file__, 544, 16), get_transform_63868, *[], **kwargs_63869)
        
        # Obtaining the member 'is_affine' of a type (line 544)
        is_affine_63871 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 16), get_transform_call_result_63870, 'is_affine')
        # Applying the binary operator 'and' (line 543)
        result_and_keyword_63872 = python_operator(stypy.reporting.localization.Localization(__file__, 543, 12), 'and', _check_unsampled_image_call_result_63866, is_affine_63871)
        
        # Testing the type of an if condition (line 543)
        if_condition_63873 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 543, 8), result_and_keyword_63872)
        # Assigning a type to the variable 'if_condition_63873' (line 543)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 543, 8), 'if_condition_63873', if_condition_63873)
        # SSA begins for if statement (line 543)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _draw_unsampled_image(...): (line 545)
        # Processing the call arguments (line 545)
        # Getting the type of 'renderer' (line 545)
        renderer_63876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 39), 'renderer', False)
        # Getting the type of 'gc' (line 545)
        gc_63877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 49), 'gc', False)
        # Processing the call keyword arguments (line 545)
        kwargs_63878 = {}
        # Getting the type of 'self' (line 545)
        self_63874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 12), 'self', False)
        # Obtaining the member '_draw_unsampled_image' of a type (line 545)
        _draw_unsampled_image_63875 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 12), self_63874, '_draw_unsampled_image')
        # Calling _draw_unsampled_image(args, kwargs) (line 545)
        _draw_unsampled_image_call_result_63879 = invoke(stypy.reporting.localization.Localization(__file__, 545, 12), _draw_unsampled_image_63875, *[renderer_63876, gc_63877], **kwargs_63878)
        
        # SSA branch for the else part of an if statement (line 543)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 547):
        
        # Assigning a Call to a Name:
        
        # Call to make_image(...): (line 547)
        # Processing the call arguments (line 547)
        # Getting the type of 'renderer' (line 548)
        renderer_63882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 16), 'renderer', False)
        
        # Call to get_image_magnification(...): (line 548)
        # Processing the call keyword arguments (line 548)
        kwargs_63885 = {}
        # Getting the type of 'renderer' (line 548)
        renderer_63883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 26), 'renderer', False)
        # Obtaining the member 'get_image_magnification' of a type (line 548)
        get_image_magnification_63884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 26), renderer_63883, 'get_image_magnification')
        # Calling get_image_magnification(args, kwargs) (line 548)
        get_image_magnification_call_result_63886 = invoke(stypy.reporting.localization.Localization(__file__, 548, 26), get_image_magnification_63884, *[], **kwargs_63885)
        
        # Processing the call keyword arguments (line 547)
        kwargs_63887 = {}
        # Getting the type of 'self' (line 547)
        self_63880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 30), 'self', False)
        # Obtaining the member 'make_image' of a type (line 547)
        make_image_63881 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 30), self_63880, 'make_image')
        # Calling make_image(args, kwargs) (line 547)
        make_image_call_result_63888 = invoke(stypy.reporting.localization.Localization(__file__, 547, 30), make_image_63881, *[renderer_63882, get_image_magnification_call_result_63886], **kwargs_63887)
        
        # Assigning a type to the variable 'call_assignment_62314' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'call_assignment_62314', make_image_call_result_63888)
        
        # Assigning a Call to a Name (line 547):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_63891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 12), 'int')
        # Processing the call keyword arguments
        kwargs_63892 = {}
        # Getting the type of 'call_assignment_62314' (line 547)
        call_assignment_62314_63889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'call_assignment_62314', False)
        # Obtaining the member '__getitem__' of a type (line 547)
        getitem___63890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 12), call_assignment_62314_63889, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_63893 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___63890, *[int_63891], **kwargs_63892)
        
        # Assigning a type to the variable 'call_assignment_62315' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'call_assignment_62315', getitem___call_result_63893)
        
        # Assigning a Name to a Name (line 547):
        # Getting the type of 'call_assignment_62315' (line 547)
        call_assignment_62315_63894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'call_assignment_62315')
        # Assigning a type to the variable 'im' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'im', call_assignment_62315_63894)
        
        # Assigning a Call to a Name (line 547):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_63897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 12), 'int')
        # Processing the call keyword arguments
        kwargs_63898 = {}
        # Getting the type of 'call_assignment_62314' (line 547)
        call_assignment_62314_63895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'call_assignment_62314', False)
        # Obtaining the member '__getitem__' of a type (line 547)
        getitem___63896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 12), call_assignment_62314_63895, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_63899 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___63896, *[int_63897], **kwargs_63898)
        
        # Assigning a type to the variable 'call_assignment_62316' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'call_assignment_62316', getitem___call_result_63899)
        
        # Assigning a Name to a Name (line 547):
        # Getting the type of 'call_assignment_62316' (line 547)
        call_assignment_62316_63900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'call_assignment_62316')
        # Assigning a type to the variable 'l' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 16), 'l', call_assignment_62316_63900)
        
        # Assigning a Call to a Name (line 547):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_63903 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 12), 'int')
        # Processing the call keyword arguments
        kwargs_63904 = {}
        # Getting the type of 'call_assignment_62314' (line 547)
        call_assignment_62314_63901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'call_assignment_62314', False)
        # Obtaining the member '__getitem__' of a type (line 547)
        getitem___63902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 12), call_assignment_62314_63901, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_63905 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___63902, *[int_63903], **kwargs_63904)
        
        # Assigning a type to the variable 'call_assignment_62317' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'call_assignment_62317', getitem___call_result_63905)
        
        # Assigning a Name to a Name (line 547):
        # Getting the type of 'call_assignment_62317' (line 547)
        call_assignment_62317_63906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'call_assignment_62317')
        # Assigning a type to the variable 'b' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 19), 'b', call_assignment_62317_63906)
        
        # Assigning a Call to a Name (line 547):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_63909 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 547, 12), 'int')
        # Processing the call keyword arguments
        kwargs_63910 = {}
        # Getting the type of 'call_assignment_62314' (line 547)
        call_assignment_62314_63907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'call_assignment_62314', False)
        # Obtaining the member '__getitem__' of a type (line 547)
        getitem___63908 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 12), call_assignment_62314_63907, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_63911 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___63908, *[int_63909], **kwargs_63910)
        
        # Assigning a type to the variable 'call_assignment_62318' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'call_assignment_62318', getitem___call_result_63911)
        
        # Assigning a Name to a Name (line 547):
        # Getting the type of 'call_assignment_62318' (line 547)
        call_assignment_62318_63912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 12), 'call_assignment_62318')
        # Assigning a type to the variable 'trans' (line 547)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 547, 22), 'trans', call_assignment_62318_63912)
        
        # Type idiom detected: calculating its left and rigth part (line 549)
        # Getting the type of 'im' (line 549)
        im_63913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 12), 'im')
        # Getting the type of 'None' (line 549)
        None_63914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 25), 'None')
        
        (may_be_63915, more_types_in_union_63916) = may_not_be_none(im_63913, None_63914)

        if may_be_63915:

            if more_types_in_union_63916:
                # Runtime conditional SSA (line 549)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to draw_image(...): (line 550)
            # Processing the call arguments (line 550)
            # Getting the type of 'gc' (line 550)
            gc_63919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 36), 'gc', False)
            # Getting the type of 'l' (line 550)
            l_63920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 40), 'l', False)
            # Getting the type of 'b' (line 550)
            b_63921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 43), 'b', False)
            # Getting the type of 'im' (line 550)
            im_63922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 46), 'im', False)
            # Processing the call keyword arguments (line 550)
            kwargs_63923 = {}
            # Getting the type of 'renderer' (line 550)
            renderer_63917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 550, 16), 'renderer', False)
            # Obtaining the member 'draw_image' of a type (line 550)
            draw_image_63918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 550, 16), renderer_63917, 'draw_image')
            # Calling draw_image(args, kwargs) (line 550)
            draw_image_call_result_63924 = invoke(stypy.reporting.localization.Localization(__file__, 550, 16), draw_image_63918, *[gc_63919, l_63920, b_63921, im_63922], **kwargs_63923)
            

            if more_types_in_union_63916:
                # SSA join for if statement (line 549)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 543)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to restore(...): (line 551)
        # Processing the call keyword arguments (line 551)
        kwargs_63927 = {}
        # Getting the type of 'gc' (line 551)
        gc_63925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 551, 8), 'gc', False)
        # Obtaining the member 'restore' of a type (line 551)
        restore_63926 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 551, 8), gc_63925, 'restore')
        # Calling restore(args, kwargs) (line 551)
        restore_call_result_63928 = invoke(stypy.reporting.localization.Localization(__file__, 551, 8), restore_63926, *[], **kwargs_63927)
        
        
        # Assigning a Name to a Attribute (line 552):
        
        # Assigning a Name to a Attribute (line 552):
        # Getting the type of 'False' (line 552)
        False_63929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 21), 'False')
        # Getting the type of 'self' (line 552)
        self_63930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 552, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 552)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 552, 8), self_63930, 'stale', False_63929)
        
        # ################# End of 'draw(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'draw' in the type store
        # Getting the type of 'stypy_return_type' (line 524)
        stypy_return_type_63931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 524, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_63931)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'draw'
        return stypy_return_type_63931


    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 554, 4, False)
        # Assigning a type to the variable 'self' (line 555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.contains.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.contains.__dict__.__setitem__('stypy_function_name', '_ImageBase.contains')
        _ImageBase.contains.__dict__.__setitem__('stypy_param_names_list', ['mouseevent'])
        _ImageBase.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.contains', ['mouseevent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['mouseevent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        unicode_63932 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 557, (-1)), 'unicode', u'\n        Test whether the mouse event occurred within the image.\n        ')
        
        
        # Call to callable(...): (line 558)
        # Processing the call arguments (line 558)
        # Getting the type of 'self' (line 558)
        self_63934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 20), 'self', False)
        # Obtaining the member '_contains' of a type (line 558)
        _contains_63935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 558, 20), self_63934, '_contains')
        # Processing the call keyword arguments (line 558)
        kwargs_63936 = {}
        # Getting the type of 'callable' (line 558)
        callable_63933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 558)
        callable_call_result_63937 = invoke(stypy.reporting.localization.Localization(__file__, 558, 11), callable_63933, *[_contains_63935], **kwargs_63936)
        
        # Testing the type of an if condition (line 558)
        if_condition_63938 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 558, 8), callable_call_result_63937)
        # Assigning a type to the variable 'if_condition_63938' (line 558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 558, 8), 'if_condition_63938', if_condition_63938)
        # SSA begins for if statement (line 558)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _contains(...): (line 559)
        # Processing the call arguments (line 559)
        # Getting the type of 'self' (line 559)
        self_63941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 34), 'self', False)
        # Getting the type of 'mouseevent' (line 559)
        mouseevent_63942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 40), 'mouseevent', False)
        # Processing the call keyword arguments (line 559)
        kwargs_63943 = {}
        # Getting the type of 'self' (line 559)
        self_63939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 19), 'self', False)
        # Obtaining the member '_contains' of a type (line 559)
        _contains_63940 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 19), self_63939, '_contains')
        # Calling _contains(args, kwargs) (line 559)
        _contains_call_result_63944 = invoke(stypy.reporting.localization.Localization(__file__, 559, 19), _contains_63940, *[self_63941, mouseevent_63942], **kwargs_63943)
        
        # Assigning a type to the variable 'stypy_return_type' (line 559)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 559, 12), 'stypy_return_type', _contains_call_result_63944)
        # SSA join for if statement (line 558)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 564):
        
        # Assigning a Attribute to a Name (line 564):
        # Getting the type of 'mouseevent' (line 564)
        mouseevent_63945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 15), 'mouseevent')
        # Obtaining the member 'xdata' of a type (line 564)
        xdata_63946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 15), mouseevent_63945, 'xdata')
        # Assigning a type to the variable 'tuple_assignment_62319' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'tuple_assignment_62319', xdata_63946)
        
        # Assigning a Attribute to a Name (line 564):
        # Getting the type of 'mouseevent' (line 564)
        mouseevent_63947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 33), 'mouseevent')
        # Obtaining the member 'ydata' of a type (line 564)
        ydata_63948 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 33), mouseevent_63947, 'ydata')
        # Assigning a type to the variable 'tuple_assignment_62320' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'tuple_assignment_62320', ydata_63948)
        
        # Assigning a Name to a Name (line 564):
        # Getting the type of 'tuple_assignment_62319' (line 564)
        tuple_assignment_62319_63949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'tuple_assignment_62319')
        # Assigning a type to the variable 'x' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'x', tuple_assignment_62319_63949)
        
        # Assigning a Name to a Name (line 564):
        # Getting the type of 'tuple_assignment_62320' (line 564)
        tuple_assignment_62320_63950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 8), 'tuple_assignment_62320')
        # Assigning a type to the variable 'y' (line 564)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 11), 'y', tuple_assignment_62320_63950)
        
        # Assigning a Call to a Tuple (line 565):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 565)
        # Processing the call keyword arguments (line 565)
        kwargs_63953 = {}
        # Getting the type of 'self' (line 565)
        self_63951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 33), 'self', False)
        # Obtaining the member 'get_extent' of a type (line 565)
        get_extent_63952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 33), self_63951, 'get_extent')
        # Calling get_extent(args, kwargs) (line 565)
        get_extent_call_result_63954 = invoke(stypy.reporting.localization.Localization(__file__, 565, 33), get_extent_63952, *[], **kwargs_63953)
        
        # Assigning a type to the variable 'call_assignment_62321' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'call_assignment_62321', get_extent_call_result_63954)
        
        # Assigning a Call to a Name (line 565):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_63957 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 8), 'int')
        # Processing the call keyword arguments
        kwargs_63958 = {}
        # Getting the type of 'call_assignment_62321' (line 565)
        call_assignment_62321_63955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'call_assignment_62321', False)
        # Obtaining the member '__getitem__' of a type (line 565)
        getitem___63956 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 8), call_assignment_62321_63955, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_63959 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___63956, *[int_63957], **kwargs_63958)
        
        # Assigning a type to the variable 'call_assignment_62322' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'call_assignment_62322', getitem___call_result_63959)
        
        # Assigning a Name to a Name (line 565):
        # Getting the type of 'call_assignment_62322' (line 565)
        call_assignment_62322_63960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'call_assignment_62322')
        # Assigning a type to the variable 'xmin' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'xmin', call_assignment_62322_63960)
        
        # Assigning a Call to a Name (line 565):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_63963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 8), 'int')
        # Processing the call keyword arguments
        kwargs_63964 = {}
        # Getting the type of 'call_assignment_62321' (line 565)
        call_assignment_62321_63961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'call_assignment_62321', False)
        # Obtaining the member '__getitem__' of a type (line 565)
        getitem___63962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 8), call_assignment_62321_63961, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_63965 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___63962, *[int_63963], **kwargs_63964)
        
        # Assigning a type to the variable 'call_assignment_62323' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'call_assignment_62323', getitem___call_result_63965)
        
        # Assigning a Name to a Name (line 565):
        # Getting the type of 'call_assignment_62323' (line 565)
        call_assignment_62323_63966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'call_assignment_62323')
        # Assigning a type to the variable 'xmax' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 14), 'xmax', call_assignment_62323_63966)
        
        # Assigning a Call to a Name (line 565):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_63969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 8), 'int')
        # Processing the call keyword arguments
        kwargs_63970 = {}
        # Getting the type of 'call_assignment_62321' (line 565)
        call_assignment_62321_63967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'call_assignment_62321', False)
        # Obtaining the member '__getitem__' of a type (line 565)
        getitem___63968 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 8), call_assignment_62321_63967, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_63971 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___63968, *[int_63969], **kwargs_63970)
        
        # Assigning a type to the variable 'call_assignment_62324' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'call_assignment_62324', getitem___call_result_63971)
        
        # Assigning a Name to a Name (line 565):
        # Getting the type of 'call_assignment_62324' (line 565)
        call_assignment_62324_63972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'call_assignment_62324')
        # Assigning a type to the variable 'ymin' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 20), 'ymin', call_assignment_62324_63972)
        
        # Assigning a Call to a Name (line 565):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_63975 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 565, 8), 'int')
        # Processing the call keyword arguments
        kwargs_63976 = {}
        # Getting the type of 'call_assignment_62321' (line 565)
        call_assignment_62321_63973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'call_assignment_62321', False)
        # Obtaining the member '__getitem__' of a type (line 565)
        getitem___63974 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 565, 8), call_assignment_62321_63973, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_63977 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___63974, *[int_63975], **kwargs_63976)
        
        # Assigning a type to the variable 'call_assignment_62325' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'call_assignment_62325', getitem___call_result_63977)
        
        # Assigning a Name to a Name (line 565):
        # Getting the type of 'call_assignment_62325' (line 565)
        call_assignment_62325_63978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 565, 8), 'call_assignment_62325')
        # Assigning a type to the variable 'ymax' (line 565)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 565, 26), 'ymax', call_assignment_62325_63978)
        
        
        # Getting the type of 'xmin' (line 566)
        xmin_63979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 11), 'xmin')
        # Getting the type of 'xmax' (line 566)
        xmax_63980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 566, 18), 'xmax')
        # Applying the binary operator '>' (line 566)
        result_gt_63981 = python_operator(stypy.reporting.localization.Localization(__file__, 566, 11), '>', xmin_63979, xmax_63980)
        
        # Testing the type of an if condition (line 566)
        if_condition_63982 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 566, 8), result_gt_63981)
        # Assigning a type to the variable 'if_condition_63982' (line 566)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 566, 8), 'if_condition_63982', if_condition_63982)
        # SSA begins for if statement (line 566)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 567):
        
        # Assigning a Name to a Name (line 567):
        # Getting the type of 'xmax' (line 567)
        xmax_63983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 25), 'xmax')
        # Assigning a type to the variable 'tuple_assignment_62326' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 12), 'tuple_assignment_62326', xmax_63983)
        
        # Assigning a Name to a Name (line 567):
        # Getting the type of 'xmin' (line 567)
        xmin_63984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 31), 'xmin')
        # Assigning a type to the variable 'tuple_assignment_62327' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 12), 'tuple_assignment_62327', xmin_63984)
        
        # Assigning a Name to a Name (line 567):
        # Getting the type of 'tuple_assignment_62326' (line 567)
        tuple_assignment_62326_63985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 12), 'tuple_assignment_62326')
        # Assigning a type to the variable 'xmin' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 12), 'xmin', tuple_assignment_62326_63985)
        
        # Assigning a Name to a Name (line 567):
        # Getting the type of 'tuple_assignment_62327' (line 567)
        tuple_assignment_62327_63986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 12), 'tuple_assignment_62327')
        # Assigning a type to the variable 'xmax' (line 567)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 18), 'xmax', tuple_assignment_62327_63986)
        # SSA join for if statement (line 566)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'ymin' (line 568)
        ymin_63987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 11), 'ymin')
        # Getting the type of 'ymax' (line 568)
        ymax_63988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 568, 18), 'ymax')
        # Applying the binary operator '>' (line 568)
        result_gt_63989 = python_operator(stypy.reporting.localization.Localization(__file__, 568, 11), '>', ymin_63987, ymax_63988)
        
        # Testing the type of an if condition (line 568)
        if_condition_63990 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 568, 8), result_gt_63989)
        # Assigning a type to the variable 'if_condition_63990' (line 568)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 568, 8), 'if_condition_63990', if_condition_63990)
        # SSA begins for if statement (line 568)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 569):
        
        # Assigning a Name to a Name (line 569):
        # Getting the type of 'ymax' (line 569)
        ymax_63991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 25), 'ymax')
        # Assigning a type to the variable 'tuple_assignment_62328' (line 569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 12), 'tuple_assignment_62328', ymax_63991)
        
        # Assigning a Name to a Name (line 569):
        # Getting the type of 'ymin' (line 569)
        ymin_63992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 31), 'ymin')
        # Assigning a type to the variable 'tuple_assignment_62329' (line 569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 12), 'tuple_assignment_62329', ymin_63992)
        
        # Assigning a Name to a Name (line 569):
        # Getting the type of 'tuple_assignment_62328' (line 569)
        tuple_assignment_62328_63993 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 12), 'tuple_assignment_62328')
        # Assigning a type to the variable 'ymin' (line 569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 12), 'ymin', tuple_assignment_62328_63993)
        
        # Assigning a Name to a Name (line 569):
        # Getting the type of 'tuple_assignment_62329' (line 569)
        tuple_assignment_62329_63994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 569, 12), 'tuple_assignment_62329')
        # Assigning a type to the variable 'ymax' (line 569)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 569, 18), 'ymax', tuple_assignment_62329_63994)
        # SSA join for if statement (line 568)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x' (line 571)
        x_63995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 11), 'x')
        # Getting the type of 'None' (line 571)
        None_63996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 20), 'None')
        # Applying the binary operator 'isnot' (line 571)
        result_is_not_63997 = python_operator(stypy.reporting.localization.Localization(__file__, 571, 11), 'isnot', x_63995, None_63996)
        
        
        # Getting the type of 'y' (line 571)
        y_63998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 29), 'y')
        # Getting the type of 'None' (line 571)
        None_63999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 571, 38), 'None')
        # Applying the binary operator 'isnot' (line 571)
        result_is_not_64000 = python_operator(stypy.reporting.localization.Localization(__file__, 571, 29), 'isnot', y_63998, None_63999)
        
        # Applying the binary operator 'and' (line 571)
        result_and_keyword_64001 = python_operator(stypy.reporting.localization.Localization(__file__, 571, 11), 'and', result_is_not_63997, result_is_not_64000)
        
        # Testing the type of an if condition (line 571)
        if_condition_64002 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 571, 8), result_and_keyword_64001)
        # Assigning a type to the variable 'if_condition_64002' (line 571)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 571, 8), 'if_condition_64002', if_condition_64002)
        # SSA begins for if statement (line 571)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a BoolOp to a Name (line 572):
        
        # Assigning a BoolOp to a Name (line 572):
        
        # Evaluating a boolean operation
        
        # Getting the type of 'xmin' (line 572)
        xmin_64003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 22), 'xmin')
        # Getting the type of 'x' (line 572)
        x_64004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 30), 'x')
        # Applying the binary operator '<=' (line 572)
        result_le_64005 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 22), '<=', xmin_64003, x_64004)
        # Getting the type of 'xmax' (line 572)
        xmax_64006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 35), 'xmax')
        # Applying the binary operator '<=' (line 572)
        result_le_64007 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 22), '<=', x_64004, xmax_64006)
        # Applying the binary operator '&' (line 572)
        result_and__64008 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 22), '&', result_le_64005, result_le_64007)
        
        
        # Getting the type of 'ymin' (line 572)
        ymin_64009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 46), 'ymin')
        # Getting the type of 'y' (line 572)
        y_64010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 54), 'y')
        # Applying the binary operator '<=' (line 572)
        result_le_64011 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 46), '<=', ymin_64009, y_64010)
        # Getting the type of 'ymax' (line 572)
        ymax_64012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 572, 59), 'ymax')
        # Applying the binary operator '<=' (line 572)
        result_le_64013 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 46), '<=', y_64010, ymax_64012)
        # Applying the binary operator '&' (line 572)
        result_and__64014 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 46), '&', result_le_64011, result_le_64013)
        
        # Applying the binary operator 'and' (line 572)
        result_and_keyword_64015 = python_operator(stypy.reporting.localization.Localization(__file__, 572, 21), 'and', result_and__64008, result_and__64014)
        
        # Assigning a type to the variable 'inside' (line 572)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 572, 12), 'inside', result_and_keyword_64015)
        # SSA branch for the else part of an if statement (line 571)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Name to a Name (line 574):
        
        # Assigning a Name to a Name (line 574):
        # Getting the type of 'False' (line 574)
        False_64016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 574, 21), 'False')
        # Assigning a type to the variable 'inside' (line 574)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 574, 12), 'inside', False_64016)
        # SSA join for if statement (line 571)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 576)
        tuple_64017 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 576)
        # Adding element type (line 576)
        # Getting the type of 'inside' (line 576)
        inside_64018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 576, 15), 'inside')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 15), tuple_64017, inside_64018)
        # Adding element type (line 576)
        
        # Obtaining an instance of the builtin type 'dict' (line 576)
        dict_64019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, 23), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 576)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 576, 15), tuple_64017, dict_64019)
        
        # Assigning a type to the variable 'stypy_return_type' (line 576)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 576, 8), 'stypy_return_type', tuple_64017)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 554)
        stypy_return_type_64020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 554, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64020)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_64020


    @norecursion
    def write_png(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'write_png'
        module_type_store = module_type_store.open_function_context('write_png', 578, 4, False)
        # Assigning a type to the variable 'self' (line 579)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 579, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.write_png.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.write_png.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.write_png.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.write_png.__dict__.__setitem__('stypy_function_name', '_ImageBase.write_png')
        _ImageBase.write_png.__dict__.__setitem__('stypy_param_names_list', ['fname'])
        _ImageBase.write_png.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.write_png.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.write_png.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.write_png.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.write_png.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.write_png.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.write_png', ['fname'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'write_png', localization, ['fname'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'write_png(...)' code ##################

        unicode_64021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 579, 8), 'unicode', u'Write the image to png file with fname')
        
        # Assigning a Call to a Name (line 580):
        
        # Assigning a Call to a Name (line 580):
        
        # Call to to_rgba(...): (line 580)
        # Processing the call arguments (line 580)
        
        
        # Getting the type of 'self' (line 580)
        self_64024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 43), 'self', False)
        # Obtaining the member 'origin' of a type (line 580)
        origin_64025 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 43), self_64024, 'origin')
        unicode_64026 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 580, 58), 'unicode', u'lower')
        # Applying the binary operator '==' (line 580)
        result_eq_64027 = python_operator(stypy.reporting.localization.Localization(__file__, 580, 43), '==', origin_64025, unicode_64026)
        
        # Testing the type of an if expression (line 580)
        is_suitable_condition(stypy.reporting.localization.Localization(__file__, 580, 26), result_eq_64027)
        # SSA begins for if expression (line 580)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
        
        # Obtaining the type of the subscript
        int_64028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 580, 36), 'int')
        slice_64029 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 580, 26), None, None, int_64028)
        # Getting the type of 'self' (line 580)
        self_64030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 26), 'self', False)
        # Obtaining the member '_A' of a type (line 580)
        _A_64031 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 26), self_64030, '_A')
        # Obtaining the member '__getitem__' of a type (line 580)
        getitem___64032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 26), _A_64031, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 580)
        subscript_call_result_64033 = invoke(stypy.reporting.localization.Localization(__file__, 580, 26), getitem___64032, slice_64029)
        
        # SSA branch for the else part of an if expression (line 580)
        module_type_store.open_ssa_branch('if expression else')
        # Getting the type of 'self' (line 580)
        self_64034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 71), 'self', False)
        # Obtaining the member '_A' of a type (line 580)
        _A_64035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 71), self_64034, '_A')
        # SSA join for if expression (line 580)
        module_type_store = module_type_store.join_ssa_context()
        if_exp_64036 = union_type.UnionType.add(subscript_call_result_64033, _A_64035)
        
        # Processing the call keyword arguments (line 580)
        # Getting the type of 'True' (line 581)
        True_64037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 32), 'True', False)
        keyword_64038 = True_64037
        # Getting the type of 'True' (line 581)
        True_64039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 43), 'True', False)
        keyword_64040 = True_64039
        kwargs_64041 = {'bytes': keyword_64038, 'norm': keyword_64040}
        # Getting the type of 'self' (line 580)
        self_64022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 580, 13), 'self', False)
        # Obtaining the member 'to_rgba' of a type (line 580)
        to_rgba_64023 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 580, 13), self_64022, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 580)
        to_rgba_call_result_64042 = invoke(stypy.reporting.localization.Localization(__file__, 580, 13), to_rgba_64023, *[if_exp_64036], **kwargs_64041)
        
        # Assigning a type to the variable 'im' (line 580)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 580, 8), 'im', to_rgba_call_result_64042)
        
        # Call to write_png(...): (line 582)
        # Processing the call arguments (line 582)
        # Getting the type of 'im' (line 582)
        im_64045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 23), 'im', False)
        # Getting the type of 'fname' (line 582)
        fname_64046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 27), 'fname', False)
        # Processing the call keyword arguments (line 582)
        kwargs_64047 = {}
        # Getting the type of '_png' (line 582)
        _png_64043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 582, 8), '_png', False)
        # Obtaining the member 'write_png' of a type (line 582)
        write_png_64044 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 582, 8), _png_64043, 'write_png')
        # Calling write_png(args, kwargs) (line 582)
        write_png_call_result_64048 = invoke(stypy.reporting.localization.Localization(__file__, 582, 8), write_png_64044, *[im_64045, fname_64046], **kwargs_64047)
        
        
        # ################# End of 'write_png(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'write_png' in the type store
        # Getting the type of 'stypy_return_type' (line 578)
        stypy_return_type_64049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64049)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'write_png'
        return stypy_return_type_64049


    @norecursion
    def set_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_data'
        module_type_store = module_type_store.open_function_context('set_data', 584, 4, False)
        # Assigning a type to the variable 'self' (line 585)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 585, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.set_data.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.set_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.set_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.set_data.__dict__.__setitem__('stypy_function_name', '_ImageBase.set_data')
        _ImageBase.set_data.__dict__.__setitem__('stypy_param_names_list', ['A'])
        _ImageBase.set_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.set_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.set_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.set_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.set_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.set_data.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.set_data', ['A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data', localization, ['A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data(...)' code ##################

        unicode_64050 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 591, (-1)), 'unicode', u'\n        Set the image array.\n\n        ACCEPTS: numpy/PIL Image A\n\n        Note that this function does *not* update the normalization used.\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 593)
        unicode_64051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 593, 22), 'unicode', u'getpixel')
        # Getting the type of 'A' (line 593)
        A_64052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 593, 19), 'A')
        
        (may_be_64053, more_types_in_union_64054) = may_provide_member(unicode_64051, A_64052)

        if may_be_64053:

            if more_types_in_union_64054:
                # Runtime conditional SSA (line 593)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'A' (line 593)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 8), 'A', remove_not_member_provider_from_union(A_64052, u'getpixel'))
            
            # Assigning a Call to a Attribute (line 594):
            
            # Assigning a Call to a Attribute (line 594):
            
            # Call to pil_to_array(...): (line 594)
            # Processing the call arguments (line 594)
            # Getting the type of 'A' (line 594)
            A_64056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 35), 'A', False)
            # Processing the call keyword arguments (line 594)
            kwargs_64057 = {}
            # Getting the type of 'pil_to_array' (line 594)
            pil_to_array_64055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 22), 'pil_to_array', False)
            # Calling pil_to_array(args, kwargs) (line 594)
            pil_to_array_call_result_64058 = invoke(stypy.reporting.localization.Localization(__file__, 594, 22), pil_to_array_64055, *[A_64056], **kwargs_64057)
            
            # Getting the type of 'self' (line 594)
            self_64059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 594, 12), 'self')
            # Setting the type of the member '_A' of a type (line 594)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 594, 12), self_64059, '_A', pil_to_array_call_result_64058)

            if more_types_in_union_64054:
                # Runtime conditional SSA for else branch (line 593)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_64053) or more_types_in_union_64054):
            # Assigning a type to the variable 'A' (line 593)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 593, 8), 'A', remove_member_provider_from_union(A_64052, u'getpixel'))
            
            # Assigning a Call to a Attribute (line 596):
            
            # Assigning a Call to a Attribute (line 596):
            
            # Call to safe_masked_invalid(...): (line 596)
            # Processing the call arguments (line 596)
            # Getting the type of 'A' (line 596)
            A_64062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 48), 'A', False)
            # Processing the call keyword arguments (line 596)
            # Getting the type of 'True' (line 596)
            True_64063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 56), 'True', False)
            keyword_64064 = True_64063
            kwargs_64065 = {'copy': keyword_64064}
            # Getting the type of 'cbook' (line 596)
            cbook_64060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 22), 'cbook', False)
            # Obtaining the member 'safe_masked_invalid' of a type (line 596)
            safe_masked_invalid_64061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 22), cbook_64060, 'safe_masked_invalid')
            # Calling safe_masked_invalid(args, kwargs) (line 596)
            safe_masked_invalid_call_result_64066 = invoke(stypy.reporting.localization.Localization(__file__, 596, 22), safe_masked_invalid_64061, *[A_64062], **kwargs_64065)
            
            # Getting the type of 'self' (line 596)
            self_64067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 596, 12), 'self')
            # Setting the type of the member '_A' of a type (line 596)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 596, 12), self_64067, '_A', safe_masked_invalid_call_result_64066)

            if (may_be_64053 and more_types_in_union_64054):
                # SSA join for if statement (line 593)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 598)
        self_64068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 12), 'self')
        # Obtaining the member '_A' of a type (line 598)
        _A_64069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 12), self_64068, '_A')
        # Obtaining the member 'dtype' of a type (line 598)
        dtype_64070 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 12), _A_64069, 'dtype')
        # Getting the type of 'np' (line 598)
        np_64071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 598, 29), 'np')
        # Obtaining the member 'uint8' of a type (line 598)
        uint8_64072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 598, 29), np_64071, 'uint8')
        # Applying the binary operator '!=' (line 598)
        result_ne_64073 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 12), '!=', dtype_64070, uint8_64072)
        
        
        
        # Call to can_cast(...): (line 599)
        # Processing the call arguments (line 599)
        # Getting the type of 'self' (line 599)
        self_64076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 32), 'self', False)
        # Obtaining the member '_A' of a type (line 599)
        _A_64077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 32), self_64076, '_A')
        # Obtaining the member 'dtype' of a type (line 599)
        dtype_64078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 32), _A_64077, 'dtype')
        # Getting the type of 'float' (line 599)
        float_64079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 47), 'float', False)
        unicode_64080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 599, 54), 'unicode', u'same_kind')
        # Processing the call keyword arguments (line 599)
        kwargs_64081 = {}
        # Getting the type of 'np' (line 599)
        np_64074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 599, 20), 'np', False)
        # Obtaining the member 'can_cast' of a type (line 599)
        can_cast_64075 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 599, 20), np_64074, 'can_cast')
        # Calling can_cast(args, kwargs) (line 599)
        can_cast_call_result_64082 = invoke(stypy.reporting.localization.Localization(__file__, 599, 20), can_cast_64075, *[dtype_64078, float_64079, unicode_64080], **kwargs_64081)
        
        # Applying the 'not' unary operator (line 599)
        result_not__64083 = python_operator(stypy.reporting.localization.Localization(__file__, 599, 16), 'not', can_cast_call_result_64082)
        
        # Applying the binary operator 'and' (line 598)
        result_and_keyword_64084 = python_operator(stypy.reporting.localization.Localization(__file__, 598, 12), 'and', result_ne_64073, result_not__64083)
        
        # Testing the type of an if condition (line 598)
        if_condition_64085 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 598, 8), result_and_keyword_64084)
        # Assigning a type to the variable 'if_condition_64085' (line 598)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 598, 8), 'if_condition_64085', if_condition_64085)
        # SSA begins for if statement (line 598)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 600)
        # Processing the call arguments (line 600)
        unicode_64087 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 600, 28), 'unicode', u'Image data cannot be converted to float')
        # Processing the call keyword arguments (line 600)
        kwargs_64088 = {}
        # Getting the type of 'TypeError' (line 600)
        TypeError_64086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 600)
        TypeError_call_result_64089 = invoke(stypy.reporting.localization.Localization(__file__, 600, 18), TypeError_64086, *[unicode_64087], **kwargs_64088)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 600, 12), TypeError_call_result_64089, 'raise parameter', BaseException)
        # SSA join for if statement (line 598)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 602)
        self_64090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 16), 'self')
        # Obtaining the member '_A' of a type (line 602)
        _A_64091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 16), self_64090, '_A')
        # Obtaining the member 'ndim' of a type (line 602)
        ndim_64092 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 16), _A_64091, 'ndim')
        int_64093 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 602, 32), 'int')
        # Applying the binary operator '==' (line 602)
        result_eq_64094 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 16), '==', ndim_64092, int_64093)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 603)
        self_64095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 19), 'self')
        # Obtaining the member '_A' of a type (line 603)
        _A_64096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 19), self_64095, '_A')
        # Obtaining the member 'ndim' of a type (line 603)
        ndim_64097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 19), _A_64096, 'ndim')
        int_64098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 35), 'int')
        # Applying the binary operator '==' (line 603)
        result_eq_64099 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 19), '==', ndim_64097, int_64098)
        
        
        
        # Obtaining the type of the subscript
        int_64100 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 55), 'int')
        # Getting the type of 'self' (line 603)
        self_64101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 41), 'self')
        # Obtaining the member '_A' of a type (line 603)
        _A_64102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 41), self_64101, '_A')
        # Obtaining the member 'shape' of a type (line 603)
        shape_64103 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 41), _A_64102, 'shape')
        # Obtaining the member '__getitem__' of a type (line 603)
        getitem___64104 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 41), shape_64103, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 603)
        subscript_call_result_64105 = invoke(stypy.reporting.localization.Localization(__file__, 603, 41), getitem___64104, int_64100)
        
        
        # Obtaining an instance of the builtin type 'list' (line 603)
        list_64106 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 62), 'list')
        # Adding type elements to the builtin type 'list' instance (line 603)
        # Adding element type (line 603)
        int_64107 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 63), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 62), list_64106, int_64107)
        # Adding element type (line 603)
        int_64108 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 603, 66), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 603, 62), list_64106, int_64108)
        
        # Applying the binary operator 'in' (line 603)
        result_contains_64109 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 41), 'in', subscript_call_result_64105, list_64106)
        
        # Applying the binary operator 'and' (line 603)
        result_and_keyword_64110 = python_operator(stypy.reporting.localization.Localization(__file__, 603, 19), 'and', result_eq_64099, result_contains_64109)
        
        # Applying the binary operator 'or' (line 602)
        result_or_keyword_64111 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 16), 'or', result_eq_64094, result_and_keyword_64110)
        
        # Applying the 'not' unary operator (line 602)
        result_not__64112 = python_operator(stypy.reporting.localization.Localization(__file__, 602, 11), 'not', result_or_keyword_64111)
        
        # Testing the type of an if condition (line 602)
        if_condition_64113 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 602, 8), result_not__64112)
        # Assigning a type to the variable 'if_condition_64113' (line 602)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 8), 'if_condition_64113', if_condition_64113)
        # SSA begins for if statement (line 602)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 604)
        # Processing the call arguments (line 604)
        unicode_64115 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, 28), 'unicode', u'Invalid dimensions for image data')
        # Processing the call keyword arguments (line 604)
        kwargs_64116 = {}
        # Getting the type of 'TypeError' (line 604)
        TypeError_64114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 604)
        TypeError_call_result_64117 = invoke(stypy.reporting.localization.Localization(__file__, 604, 18), TypeError_64114, *[unicode_64115], **kwargs_64116)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 604, 12), TypeError_call_result_64117, 'raise parameter', BaseException)
        # SSA join for if statement (line 602)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 606):
        
        # Assigning a Name to a Attribute (line 606):
        # Getting the type of 'None' (line 606)
        None_64118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 24), 'None')
        # Getting the type of 'self' (line 606)
        self_64119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 606, 8), 'self')
        # Setting the type of the member '_imcache' of a type (line 606)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 606, 8), self_64119, '_imcache', None_64118)
        
        # Assigning a Name to a Attribute (line 607):
        
        # Assigning a Name to a Attribute (line 607):
        # Getting the type of 'None' (line 607)
        None_64120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 26), 'None')
        # Getting the type of 'self' (line 607)
        self_64121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 8), 'self')
        # Setting the type of the member '_rgbacache' of a type (line 607)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 607, 8), self_64121, '_rgbacache', None_64120)
        
        # Assigning a Name to a Attribute (line 608):
        
        # Assigning a Name to a Attribute (line 608):
        # Getting the type of 'True' (line 608)
        True_64122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 21), 'True')
        # Getting the type of 'self' (line 608)
        self_64123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 608)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 8), self_64123, 'stale', True_64122)
        
        # ################# End of 'set_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data' in the type store
        # Getting the type of 'stypy_return_type' (line 584)
        stypy_return_type_64124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64124)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data'
        return stypy_return_type_64124


    @norecursion
    def set_array(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_array'
        module_type_store = module_type_store.open_function_context('set_array', 610, 4, False)
        # Assigning a type to the variable 'self' (line 611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.set_array.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.set_array.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.set_array.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.set_array.__dict__.__setitem__('stypy_function_name', '_ImageBase.set_array')
        _ImageBase.set_array.__dict__.__setitem__('stypy_param_names_list', ['A'])
        _ImageBase.set_array.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.set_array.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.set_array.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.set_array.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.set_array.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.set_array.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.set_array', ['A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_array', localization, ['A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_array(...)' code ##################

        unicode_64125 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 614, (-1)), 'unicode', u'\n        Retained for backwards compatibility - use set_data instead\n\n        ACCEPTS: numpy array A or PIL Image')
        
        # Call to set_data(...): (line 619)
        # Processing the call arguments (line 619)
        # Getting the type of 'A' (line 619)
        A_64128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 22), 'A', False)
        # Processing the call keyword arguments (line 619)
        kwargs_64129 = {}
        # Getting the type of 'self' (line 619)
        self_64126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 619, 8), 'self', False)
        # Obtaining the member 'set_data' of a type (line 619)
        set_data_64127 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 619, 8), self_64126, 'set_data')
        # Calling set_data(args, kwargs) (line 619)
        set_data_call_result_64130 = invoke(stypy.reporting.localization.Localization(__file__, 619, 8), set_data_64127, *[A_64128], **kwargs_64129)
        
        
        # ################# End of 'set_array(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_array' in the type store
        # Getting the type of 'stypy_return_type' (line 610)
        stypy_return_type_64131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64131)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_array'
        return stypy_return_type_64131


    @norecursion
    def get_interpolation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_interpolation'
        module_type_store = module_type_store.open_function_context('get_interpolation', 621, 4, False)
        # Assigning a type to the variable 'self' (line 622)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.get_interpolation.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.get_interpolation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.get_interpolation.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.get_interpolation.__dict__.__setitem__('stypy_function_name', '_ImageBase.get_interpolation')
        _ImageBase.get_interpolation.__dict__.__setitem__('stypy_param_names_list', [])
        _ImageBase.get_interpolation.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.get_interpolation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.get_interpolation.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.get_interpolation.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.get_interpolation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.get_interpolation.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.get_interpolation', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_interpolation', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_interpolation(...)' code ##################

        unicode_64132 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 629, (-1)), 'unicode', u"\n        Return the interpolation method the image uses when resizing.\n\n        One of 'nearest', 'bilinear', 'bicubic', 'spline16', 'spline36',\n        'hanning', 'hamming', 'hermite', 'kaiser', 'quadric', 'catrom',\n        'gaussian', 'bessel', 'mitchell', 'sinc', 'lanczos', or 'none'.\n\n        ")
        # Getting the type of 'self' (line 630)
        self_64133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 630, 15), 'self')
        # Obtaining the member '_interpolation' of a type (line 630)
        _interpolation_64134 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 630, 15), self_64133, '_interpolation')
        # Assigning a type to the variable 'stypy_return_type' (line 630)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 630, 8), 'stypy_return_type', _interpolation_64134)
        
        # ################# End of 'get_interpolation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_interpolation' in the type store
        # Getting the type of 'stypy_return_type' (line 621)
        stypy_return_type_64135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 621, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64135)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_interpolation'
        return stypy_return_type_64135


    @norecursion
    def set_interpolation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_interpolation'
        module_type_store = module_type_store.open_function_context('set_interpolation', 632, 4, False)
        # Assigning a type to the variable 'self' (line 633)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 633, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.set_interpolation.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.set_interpolation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.set_interpolation.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.set_interpolation.__dict__.__setitem__('stypy_function_name', '_ImageBase.set_interpolation')
        _ImageBase.set_interpolation.__dict__.__setitem__('stypy_param_names_list', ['s'])
        _ImageBase.set_interpolation.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.set_interpolation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.set_interpolation.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.set_interpolation.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.set_interpolation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.set_interpolation.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.set_interpolation', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_interpolation', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_interpolation(...)' code ##################

        unicode_64136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 646, (-1)), 'unicode', u"\n        Set the interpolation method the image uses when resizing.\n\n        if None, use a value from rc setting. If 'none', the image is\n        shown as is without interpolating. 'none' is only supported in\n        agg, ps and pdf backends and will fall back to 'nearest' mode\n        for other backends.\n\n        ACCEPTS: ['nearest' | 'bilinear' | 'bicubic' | 'spline16' |\n          'spline36' | 'hanning' | 'hamming' | 'hermite' | 'kaiser' |\n          'quadric' | 'catrom' | 'gaussian' | 'bessel' | 'mitchell' |\n          'sinc' | 'lanczos' | 'none' |]\n\n        ")
        
        # Type idiom detected: calculating its left and rigth part (line 647)
        # Getting the type of 's' (line 647)
        s_64137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 11), 's')
        # Getting the type of 'None' (line 647)
        None_64138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 16), 'None')
        
        (may_be_64139, more_types_in_union_64140) = may_be_none(s_64137, None_64138)

        if may_be_64139:

            if more_types_in_union_64140:
                # Runtime conditional SSA (line 647)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 648):
            
            # Assigning a Subscript to a Name (line 648):
            
            # Obtaining the type of the subscript
            unicode_64141 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 25), 'unicode', u'image.interpolation')
            # Getting the type of 'rcParams' (line 648)
            rcParams_64142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 16), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 648)
            getitem___64143 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 648, 16), rcParams_64142, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 648)
            subscript_call_result_64144 = invoke(stypy.reporting.localization.Localization(__file__, 648, 16), getitem___64143, unicode_64141)
            
            # Assigning a type to the variable 's' (line 648)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 12), 's', subscript_call_result_64144)

            if more_types_in_union_64140:
                # SSA join for if statement (line 647)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Call to a Name (line 649):
        
        # Assigning a Call to a Name (line 649):
        
        # Call to lower(...): (line 649)
        # Processing the call keyword arguments (line 649)
        kwargs_64147 = {}
        # Getting the type of 's' (line 649)
        s_64145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 12), 's', False)
        # Obtaining the member 'lower' of a type (line 649)
        lower_64146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 12), s_64145, 'lower')
        # Calling lower(args, kwargs) (line 649)
        lower_call_result_64148 = invoke(stypy.reporting.localization.Localization(__file__, 649, 12), lower_64146, *[], **kwargs_64147)
        
        # Assigning a type to the variable 's' (line 649)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 649, 8), 's', lower_call_result_64148)
        
        
        # Getting the type of 's' (line 650)
        s_64149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 11), 's')
        # Getting the type of '_interpd_' (line 650)
        _interpd__64150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 20), '_interpd_')
        # Applying the binary operator 'notin' (line 650)
        result_contains_64151 = python_operator(stypy.reporting.localization.Localization(__file__, 650, 11), 'notin', s_64149, _interpd__64150)
        
        # Testing the type of an if condition (line 650)
        if_condition_64152 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 650, 8), result_contains_64151)
        # Assigning a type to the variable 'if_condition_64152' (line 650)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 8), 'if_condition_64152', if_condition_64152)
        # SSA begins for if statement (line 650)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 651)
        # Processing the call arguments (line 651)
        unicode_64154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 651, 29), 'unicode', u'Illegal interpolation string')
        # Processing the call keyword arguments (line 651)
        kwargs_64155 = {}
        # Getting the type of 'ValueError' (line 651)
        ValueError_64153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 651)
        ValueError_call_result_64156 = invoke(stypy.reporting.localization.Localization(__file__, 651, 18), ValueError_64153, *[unicode_64154], **kwargs_64155)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 651, 12), ValueError_call_result_64156, 'raise parameter', BaseException)
        # SSA join for if statement (line 650)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 652):
        
        # Assigning a Name to a Attribute (line 652):
        # Getting the type of 's' (line 652)
        s_64157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 30), 's')
        # Getting the type of 'self' (line 652)
        self_64158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 8), 'self')
        # Setting the type of the member '_interpolation' of a type (line 652)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 652, 8), self_64158, '_interpolation', s_64157)
        
        # Assigning a Name to a Attribute (line 653):
        
        # Assigning a Name to a Attribute (line 653):
        # Getting the type of 'True' (line 653)
        True_64159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 21), 'True')
        # Getting the type of 'self' (line 653)
        self_64160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 653, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 653)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 653, 8), self_64160, 'stale', True_64159)
        
        # ################# End of 'set_interpolation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_interpolation' in the type store
        # Getting the type of 'stypy_return_type' (line 632)
        stypy_return_type_64161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 632, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64161)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_interpolation'
        return stypy_return_type_64161


    @norecursion
    def can_composite(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'can_composite'
        module_type_store = module_type_store.open_function_context('can_composite', 655, 4, False)
        # Assigning a type to the variable 'self' (line 656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.can_composite.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.can_composite.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.can_composite.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.can_composite.__dict__.__setitem__('stypy_function_name', '_ImageBase.can_composite')
        _ImageBase.can_composite.__dict__.__setitem__('stypy_param_names_list', [])
        _ImageBase.can_composite.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.can_composite.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.can_composite.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.can_composite.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.can_composite.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.can_composite.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.can_composite', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'can_composite', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'can_composite(...)' code ##################

        unicode_64162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 658, (-1)), 'unicode', u'\n        Returns `True` if the image can be composited with its neighbors.\n        ')
        
        # Assigning a Call to a Name (line 659):
        
        # Assigning a Call to a Name (line 659):
        
        # Call to get_transform(...): (line 659)
        # Processing the call keyword arguments (line 659)
        kwargs_64165 = {}
        # Getting the type of 'self' (line 659)
        self_64163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 16), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 659)
        get_transform_64164 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 16), self_64163, 'get_transform')
        # Calling get_transform(args, kwargs) (line 659)
        get_transform_call_result_64166 = invoke(stypy.reporting.localization.Localization(__file__, 659, 16), get_transform_64164, *[], **kwargs_64165)
        
        # Assigning a type to the variable 'trans' (line 659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 659, 8), 'trans', get_transform_call_result_64166)
        
        # Evaluating a boolean operation
        
        # Getting the type of 'self' (line 661)
        self_64167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 12), 'self')
        # Obtaining the member '_interpolation' of a type (line 661)
        _interpolation_64168 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 661, 12), self_64167, '_interpolation')
        unicode_64169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 661, 35), 'unicode', u'none')
        # Applying the binary operator '!=' (line 661)
        result_ne_64170 = python_operator(stypy.reporting.localization.Localization(__file__, 661, 12), '!=', _interpolation_64168, unicode_64169)
        
        # Getting the type of 'trans' (line 662)
        trans_64171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 12), 'trans')
        # Obtaining the member 'is_affine' of a type (line 662)
        is_affine_64172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 12), trans_64171, 'is_affine')
        # Applying the binary operator 'and' (line 661)
        result_and_keyword_64173 = python_operator(stypy.reporting.localization.Localization(__file__, 661, 12), 'and', result_ne_64170, is_affine_64172)
        # Getting the type of 'trans' (line 663)
        trans_64174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 663, 12), 'trans')
        # Obtaining the member 'is_separable' of a type (line 663)
        is_separable_64175 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 663, 12), trans_64174, 'is_separable')
        # Applying the binary operator 'and' (line 661)
        result_and_keyword_64176 = python_operator(stypy.reporting.localization.Localization(__file__, 661, 12), 'and', result_and_keyword_64173, is_separable_64175)
        
        # Assigning a type to the variable 'stypy_return_type' (line 660)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 660, 8), 'stypy_return_type', result_and_keyword_64176)
        
        # ################# End of 'can_composite(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'can_composite' in the type store
        # Getting the type of 'stypy_return_type' (line 655)
        stypy_return_type_64177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64177)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'can_composite'
        return stypy_return_type_64177


    @norecursion
    def set_resample(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_resample'
        module_type_store = module_type_store.open_function_context('set_resample', 665, 4, False)
        # Assigning a type to the variable 'self' (line 666)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 666, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.set_resample.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.set_resample.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.set_resample.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.set_resample.__dict__.__setitem__('stypy_function_name', '_ImageBase.set_resample')
        _ImageBase.set_resample.__dict__.__setitem__('stypy_param_names_list', ['v'])
        _ImageBase.set_resample.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.set_resample.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.set_resample.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.set_resample.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.set_resample.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.set_resample.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.set_resample', ['v'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_resample', localization, ['v'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_resample(...)' code ##################

        unicode_64178 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 670, (-1)), 'unicode', u'\n        Set whether or not image resampling is used.\n\n        ACCEPTS: True|False\n        ')
        
        # Type idiom detected: calculating its left and rigth part (line 671)
        # Getting the type of 'v' (line 671)
        v_64179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 11), 'v')
        # Getting the type of 'None' (line 671)
        None_64180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 671, 16), 'None')
        
        (may_be_64181, more_types_in_union_64182) = may_be_none(v_64179, None_64180)

        if may_be_64181:

            if more_types_in_union_64182:
                # Runtime conditional SSA (line 671)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Subscript to a Name (line 672):
            
            # Assigning a Subscript to a Name (line 672):
            
            # Obtaining the type of the subscript
            unicode_64183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, 25), 'unicode', u'image.resample')
            # Getting the type of 'rcParams' (line 672)
            rcParams_64184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 672, 16), 'rcParams')
            # Obtaining the member '__getitem__' of a type (line 672)
            getitem___64185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 672, 16), rcParams_64184, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 672)
            subscript_call_result_64186 = invoke(stypy.reporting.localization.Localization(__file__, 672, 16), getitem___64185, unicode_64183)
            
            # Assigning a type to the variable 'v' (line 672)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 672, 12), 'v', subscript_call_result_64186)

            if more_types_in_union_64182:
                # SSA join for if statement (line 671)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Name to a Attribute (line 673):
        
        # Assigning a Name to a Attribute (line 673):
        # Getting the type of 'v' (line 673)
        v_64187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 25), 'v')
        # Getting the type of 'self' (line 673)
        self_64188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 8), 'self')
        # Setting the type of the member '_resample' of a type (line 673)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 8), self_64188, '_resample', v_64187)
        
        # Assigning a Name to a Attribute (line 674):
        
        # Assigning a Name to a Attribute (line 674):
        # Getting the type of 'True' (line 674)
        True_64189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 21), 'True')
        # Getting the type of 'self' (line 674)
        self_64190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 674, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 674)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 674, 8), self_64190, 'stale', True_64189)
        
        # ################# End of 'set_resample(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_resample' in the type store
        # Getting the type of 'stypy_return_type' (line 665)
        stypy_return_type_64191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 665, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64191)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_resample'
        return stypy_return_type_64191


    @norecursion
    def get_resample(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_resample'
        module_type_store = module_type_store.open_function_context('get_resample', 676, 4, False)
        # Assigning a type to the variable 'self' (line 677)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 677, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.get_resample.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.get_resample.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.get_resample.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.get_resample.__dict__.__setitem__('stypy_function_name', '_ImageBase.get_resample')
        _ImageBase.get_resample.__dict__.__setitem__('stypy_param_names_list', [])
        _ImageBase.get_resample.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.get_resample.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.get_resample.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.get_resample.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.get_resample.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.get_resample.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.get_resample', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_resample', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_resample(...)' code ##################

        unicode_64192 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 677, 8), 'unicode', u'Return the image resample boolean.')
        # Getting the type of 'self' (line 678)
        self_64193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 678, 15), 'self')
        # Obtaining the member '_resample' of a type (line 678)
        _resample_64194 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 678, 15), self_64193, '_resample')
        # Assigning a type to the variable 'stypy_return_type' (line 678)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 678, 8), 'stypy_return_type', _resample_64194)
        
        # ################# End of 'get_resample(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_resample' in the type store
        # Getting the type of 'stypy_return_type' (line 676)
        stypy_return_type_64195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64195)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_resample'
        return stypy_return_type_64195


    @norecursion
    def set_filternorm(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_filternorm'
        module_type_store = module_type_store.open_function_context('set_filternorm', 680, 4, False)
        # Assigning a type to the variable 'self' (line 681)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 681, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.set_filternorm.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.set_filternorm.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.set_filternorm.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.set_filternorm.__dict__.__setitem__('stypy_function_name', '_ImageBase.set_filternorm')
        _ImageBase.set_filternorm.__dict__.__setitem__('stypy_param_names_list', ['filternorm'])
        _ImageBase.set_filternorm.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.set_filternorm.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.set_filternorm.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.set_filternorm.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.set_filternorm.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.set_filternorm.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.set_filternorm', ['filternorm'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_filternorm', localization, ['filternorm'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_filternorm(...)' code ##################

        unicode_64196 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 686, (-1)), 'unicode', u'\n        Set whether the resize filter norms the weights -- see\n        help for imshow\n\n        ACCEPTS: 0 or 1\n        ')
        
        # Getting the type of 'filternorm' (line 687)
        filternorm_64197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 687, 11), 'filternorm')
        # Testing the type of an if condition (line 687)
        if_condition_64198 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 687, 8), filternorm_64197)
        # Assigning a type to the variable 'if_condition_64198' (line 687)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 687, 8), 'if_condition_64198', if_condition_64198)
        # SSA begins for if statement (line 687)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Attribute (line 688):
        
        # Assigning a Num to a Attribute (line 688):
        int_64199 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 688, 31), 'int')
        # Getting the type of 'self' (line 688)
        self_64200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 688, 12), 'self')
        # Setting the type of the member '_filternorm' of a type (line 688)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 688, 12), self_64200, '_filternorm', int_64199)
        # SSA branch for the else part of an if statement (line 687)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Num to a Attribute (line 690):
        
        # Assigning a Num to a Attribute (line 690):
        int_64201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 690, 31), 'int')
        # Getting the type of 'self' (line 690)
        self_64202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 690, 12), 'self')
        # Setting the type of the member '_filternorm' of a type (line 690)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 690, 12), self_64202, '_filternorm', int_64201)
        # SSA join for if statement (line 687)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 692):
        
        # Assigning a Name to a Attribute (line 692):
        # Getting the type of 'True' (line 692)
        True_64203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 21), 'True')
        # Getting the type of 'self' (line 692)
        self_64204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 692, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 692)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 692, 8), self_64204, 'stale', True_64203)
        
        # ################# End of 'set_filternorm(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_filternorm' in the type store
        # Getting the type of 'stypy_return_type' (line 680)
        stypy_return_type_64205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 680, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64205)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_filternorm'
        return stypy_return_type_64205


    @norecursion
    def get_filternorm(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_filternorm'
        module_type_store = module_type_store.open_function_context('get_filternorm', 694, 4, False)
        # Assigning a type to the variable 'self' (line 695)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 695, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.get_filternorm.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.get_filternorm.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.get_filternorm.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.get_filternorm.__dict__.__setitem__('stypy_function_name', '_ImageBase.get_filternorm')
        _ImageBase.get_filternorm.__dict__.__setitem__('stypy_param_names_list', [])
        _ImageBase.get_filternorm.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.get_filternorm.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.get_filternorm.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.get_filternorm.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.get_filternorm.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.get_filternorm.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.get_filternorm', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_filternorm', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_filternorm(...)' code ##################

        unicode_64206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 695, 8), 'unicode', u'Return the filternorm setting.')
        # Getting the type of 'self' (line 696)
        self_64207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 15), 'self')
        # Obtaining the member '_filternorm' of a type (line 696)
        _filternorm_64208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 696, 15), self_64207, '_filternorm')
        # Assigning a type to the variable 'stypy_return_type' (line 696)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 8), 'stypy_return_type', _filternorm_64208)
        
        # ################# End of 'get_filternorm(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_filternorm' in the type store
        # Getting the type of 'stypy_return_type' (line 694)
        stypy_return_type_64209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64209)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_filternorm'
        return stypy_return_type_64209


    @norecursion
    def set_filterrad(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_filterrad'
        module_type_store = module_type_store.open_function_context('set_filterrad', 698, 4, False)
        # Assigning a type to the variable 'self' (line 699)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.set_filterrad.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.set_filterrad.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.set_filterrad.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.set_filterrad.__dict__.__setitem__('stypy_function_name', '_ImageBase.set_filterrad')
        _ImageBase.set_filterrad.__dict__.__setitem__('stypy_param_names_list', ['filterrad'])
        _ImageBase.set_filterrad.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.set_filterrad.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.set_filterrad.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.set_filterrad.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.set_filterrad.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.set_filterrad.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.set_filterrad', ['filterrad'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_filterrad', localization, ['filterrad'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_filterrad(...)' code ##################

        unicode_64210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 704, (-1)), 'unicode', u'\n        Set the resize filter radius only applicable to some\n        interpolation schemes -- see help for imshow\n\n        ACCEPTS: positive float\n        ')
        
        # Assigning a Call to a Name (line 705):
        
        # Assigning a Call to a Name (line 705):
        
        # Call to float(...): (line 705)
        # Processing the call arguments (line 705)
        # Getting the type of 'filterrad' (line 705)
        filterrad_64212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 18), 'filterrad', False)
        # Processing the call keyword arguments (line 705)
        kwargs_64213 = {}
        # Getting the type of 'float' (line 705)
        float_64211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 705, 12), 'float', False)
        # Calling float(args, kwargs) (line 705)
        float_call_result_64214 = invoke(stypy.reporting.localization.Localization(__file__, 705, 12), float_64211, *[filterrad_64212], **kwargs_64213)
        
        # Assigning a type to the variable 'r' (line 705)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 705, 8), 'r', float_call_result_64214)
        
        
        # Getting the type of 'r' (line 706)
        r_64215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 706, 11), 'r')
        int_64216 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 706, 16), 'int')
        # Applying the binary operator '<=' (line 706)
        result_le_64217 = python_operator(stypy.reporting.localization.Localization(__file__, 706, 11), '<=', r_64215, int_64216)
        
        # Testing the type of an if condition (line 706)
        if_condition_64218 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 706, 8), result_le_64217)
        # Assigning a type to the variable 'if_condition_64218' (line 706)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 706, 8), 'if_condition_64218', if_condition_64218)
        # SSA begins for if statement (line 706)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 707)
        # Processing the call arguments (line 707)
        unicode_64220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 707, 29), 'unicode', u'The filter radius must be a positive number')
        # Processing the call keyword arguments (line 707)
        kwargs_64221 = {}
        # Getting the type of 'ValueError' (line 707)
        ValueError_64219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 707, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 707)
        ValueError_call_result_64222 = invoke(stypy.reporting.localization.Localization(__file__, 707, 18), ValueError_64219, *[unicode_64220], **kwargs_64221)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 707, 12), ValueError_call_result_64222, 'raise parameter', BaseException)
        # SSA join for if statement (line 706)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 708):
        
        # Assigning a Name to a Attribute (line 708):
        # Getting the type of 'r' (line 708)
        r_64223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 26), 'r')
        # Getting the type of 'self' (line 708)
        self_64224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 708, 8), 'self')
        # Setting the type of the member '_filterrad' of a type (line 708)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 708, 8), self_64224, '_filterrad', r_64223)
        
        # Assigning a Name to a Attribute (line 709):
        
        # Assigning a Name to a Attribute (line 709):
        # Getting the type of 'True' (line 709)
        True_64225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 21), 'True')
        # Getting the type of 'self' (line 709)
        self_64226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 709, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 709)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 709, 8), self_64226, 'stale', True_64225)
        
        # ################# End of 'set_filterrad(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_filterrad' in the type store
        # Getting the type of 'stypy_return_type' (line 698)
        stypy_return_type_64227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64227)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_filterrad'
        return stypy_return_type_64227


    @norecursion
    def get_filterrad(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_filterrad'
        module_type_store = module_type_store.open_function_context('get_filterrad', 711, 4, False)
        # Assigning a type to the variable 'self' (line 712)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        _ImageBase.get_filterrad.__dict__.__setitem__('stypy_localization', localization)
        _ImageBase.get_filterrad.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        _ImageBase.get_filterrad.__dict__.__setitem__('stypy_type_store', module_type_store)
        _ImageBase.get_filterrad.__dict__.__setitem__('stypy_function_name', '_ImageBase.get_filterrad')
        _ImageBase.get_filterrad.__dict__.__setitem__('stypy_param_names_list', [])
        _ImageBase.get_filterrad.__dict__.__setitem__('stypy_varargs_param_name', None)
        _ImageBase.get_filterrad.__dict__.__setitem__('stypy_kwargs_param_name', None)
        _ImageBase.get_filterrad.__dict__.__setitem__('stypy_call_defaults', defaults)
        _ImageBase.get_filterrad.__dict__.__setitem__('stypy_call_varargs', varargs)
        _ImageBase.get_filterrad.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        _ImageBase.get_filterrad.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, '_ImageBase.get_filterrad', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_filterrad', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_filterrad(...)' code ##################

        unicode_64228 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 712, 8), 'unicode', u'Return the filterrad setting.')
        # Getting the type of 'self' (line 713)
        self_64229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 713, 15), 'self')
        # Obtaining the member '_filterrad' of a type (line 713)
        _filterrad_64230 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 713, 15), self_64229, '_filterrad')
        # Assigning a type to the variable 'stypy_return_type' (line 713)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 713, 8), 'stypy_return_type', _filterrad_64230)
        
        # ################# End of 'get_filterrad(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_filterrad' in the type store
        # Getting the type of 'stypy_return_type' (line 711)
        stypy_return_type_64231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 711, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64231)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_filterrad'
        return stypy_return_type_64231


# Assigning a type to the variable '_ImageBase' (line 180)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 180, 0), '_ImageBase', _ImageBase)

# Assigning a Num to a Name (line 181):
int_64232 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 181, 13), 'int')
# Getting the type of '_ImageBase'
_ImageBase_64233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), '_ImageBase')
# Setting the type of the member 'zorder' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), _ImageBase_64233, 'zorder', int_64232)
# Declaration of the 'AxesImage' class
# Getting the type of '_ImageBase' (line 716)
_ImageBase_64234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 716, 16), '_ImageBase')

class AxesImage(_ImageBase_64234, ):

    @norecursion
    def stypy__str__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__str__'
        module_type_store = module_type_store.open_function_context('__str__', 717, 4, False)
        # Assigning a type to the variable 'self' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesImage.stypy__str__.__dict__.__setitem__('stypy_localization', localization)
        AxesImage.stypy__str__.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesImage.stypy__str__.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesImage.stypy__str__.__dict__.__setitem__('stypy_function_name', 'AxesImage.stypy__str__')
        AxesImage.stypy__str__.__dict__.__setitem__('stypy_param_names_list', [])
        AxesImage.stypy__str__.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesImage.stypy__str__.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesImage.stypy__str__.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesImage.stypy__str__.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesImage.stypy__str__.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesImage.stypy__str__.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesImage.stypy__str__', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '__str__', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__str__(...)' code ##################

        unicode_64235 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 718, 15), 'unicode', u'AxesImage(%g,%g;%gx%g)')
        
        # Call to tuple(...): (line 718)
        # Processing the call arguments (line 718)
        # Getting the type of 'self' (line 718)
        self_64237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 48), 'self', False)
        # Obtaining the member 'axes' of a type (line 718)
        axes_64238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 48), self_64237, 'axes')
        # Obtaining the member 'bbox' of a type (line 718)
        bbox_64239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 48), axes_64238, 'bbox')
        # Obtaining the member 'bounds' of a type (line 718)
        bounds_64240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 718, 48), bbox_64239, 'bounds')
        # Processing the call keyword arguments (line 718)
        kwargs_64241 = {}
        # Getting the type of 'tuple' (line 718)
        tuple_64236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 718, 42), 'tuple', False)
        # Calling tuple(args, kwargs) (line 718)
        tuple_call_result_64242 = invoke(stypy.reporting.localization.Localization(__file__, 718, 42), tuple_64236, *[bounds_64240], **kwargs_64241)
        
        # Applying the binary operator '%' (line 718)
        result_mod_64243 = python_operator(stypy.reporting.localization.Localization(__file__, 718, 15), '%', unicode_64235, tuple_call_result_64242)
        
        # Assigning a type to the variable 'stypy_return_type' (line 718)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 718, 8), 'stypy_return_type', result_mod_64243)
        
        # ################# End of '__str__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '__str__' in the type store
        # Getting the type of 'stypy_return_type' (line 717)
        stypy_return_type_64244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 717, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64244)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '__str__'
        return stypy_return_type_64244


    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 721)
        None_64245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 721, 22), 'None')
        # Getting the type of 'None' (line 722)
        None_64246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 722, 22), 'None')
        # Getting the type of 'None' (line 723)
        None_64247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 723, 31), 'None')
        # Getting the type of 'None' (line 724)
        None_64248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 724, 24), 'None')
        # Getting the type of 'None' (line 725)
        None_64249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 725, 24), 'None')
        int_64250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 726, 28), 'int')
        float_64251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 727, 27), 'float')
        # Getting the type of 'False' (line 728)
        False_64252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 728, 26), 'False')
        defaults = [None_64245, None_64246, None_64247, None_64248, None_64249, int_64250, float_64251, False_64252]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 720, 4, False)
        # Assigning a type to the variable 'self' (line 721)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 721, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesImage.__init__', ['ax', 'cmap', 'norm', 'interpolation', 'origin', 'extent', 'filternorm', 'filterrad', 'resample'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'cmap', 'norm', 'interpolation', 'origin', 'extent', 'filternorm', 'filterrad', 'resample'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_64253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 744, (-1)), 'unicode', u'\n        interpolation and cmap default to their rc settings\n\n        cmap is a colors.Colormap instance\n        norm is a colors.Normalize instance to map luminance to 0-1\n\n        extent is data axes (left, right, bottom, top) for making image plots\n        registered with data plots.  Default is to label the pixel\n        centers with the zero-based row and column indices.\n\n        Additional kwargs are matplotlib.artist properties\n\n        ')
        
        # Assigning a Name to a Attribute (line 746):
        
        # Assigning a Name to a Attribute (line 746):
        # Getting the type of 'extent' (line 746)
        extent_64254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 23), 'extent')
        # Getting the type of 'self' (line 746)
        self_64255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 8), 'self')
        # Setting the type of the member '_extent' of a type (line 746)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 746, 8), self_64255, '_extent', extent_64254)
        
        # Call to __init__(...): (line 748)
        # Processing the call arguments (line 748)
        # Getting the type of 'ax' (line 749)
        ax_64262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 749, 12), 'ax', False)
        # Processing the call keyword arguments (line 748)
        # Getting the type of 'cmap' (line 750)
        cmap_64263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 750, 17), 'cmap', False)
        keyword_64264 = cmap_64263
        # Getting the type of 'norm' (line 751)
        norm_64265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 751, 17), 'norm', False)
        keyword_64266 = norm_64265
        # Getting the type of 'interpolation' (line 752)
        interpolation_64267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 752, 26), 'interpolation', False)
        keyword_64268 = interpolation_64267
        # Getting the type of 'origin' (line 753)
        origin_64269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 753, 19), 'origin', False)
        keyword_64270 = origin_64269
        # Getting the type of 'filternorm' (line 754)
        filternorm_64271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 754, 23), 'filternorm', False)
        keyword_64272 = filternorm_64271
        # Getting the type of 'filterrad' (line 755)
        filterrad_64273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 755, 22), 'filterrad', False)
        keyword_64274 = filterrad_64273
        # Getting the type of 'resample' (line 756)
        resample_64275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 756, 21), 'resample', False)
        keyword_64276 = resample_64275
        # Getting the type of 'kwargs' (line 757)
        kwargs_64277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 757, 14), 'kwargs', False)
        kwargs_64278 = {'origin': keyword_64270, 'resample': keyword_64276, 'norm': keyword_64266, 'cmap': keyword_64264, 'filternorm': keyword_64272, 'kwargs_64277': kwargs_64277, 'filterrad': keyword_64274, 'interpolation': keyword_64268}
        
        # Call to super(...): (line 748)
        # Processing the call arguments (line 748)
        # Getting the type of 'AxesImage' (line 748)
        AxesImage_64257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 14), 'AxesImage', False)
        # Getting the type of 'self' (line 748)
        self_64258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 25), 'self', False)
        # Processing the call keyword arguments (line 748)
        kwargs_64259 = {}
        # Getting the type of 'super' (line 748)
        super_64256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 748, 8), 'super', False)
        # Calling super(args, kwargs) (line 748)
        super_call_result_64260 = invoke(stypy.reporting.localization.Localization(__file__, 748, 8), super_64256, *[AxesImage_64257, self_64258], **kwargs_64259)
        
        # Obtaining the member '__init__' of a type (line 748)
        init___64261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 748, 8), super_call_result_64260, '__init__')
        # Calling __init__(args, kwargs) (line 748)
        init___call_result_64279 = invoke(stypy.reporting.localization.Localization(__file__, 748, 8), init___64261, *[ax_64262], **kwargs_64278)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 760)
        None_64280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 41), 'None')
        defaults = [None_64280]
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 760, 4, False)
        # Assigning a type to the variable 'self' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesImage.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        AxesImage.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesImage.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesImage.get_window_extent.__dict__.__setitem__('stypy_function_name', 'AxesImage.get_window_extent')
        AxesImage.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        AxesImage.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesImage.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesImage.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesImage.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesImage.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesImage.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesImage.get_window_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        
        # Assigning a Attribute to a Tuple (line 761):
        
        # Assigning a Subscript to a Name (line 761):
        
        # Obtaining the type of the subscript
        int_64281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 761, 8), 'int')
        # Getting the type of 'self' (line 761)
        self_64282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 25), 'self')
        # Obtaining the member '_extent' of a type (line 761)
        _extent_64283 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 25), self_64282, '_extent')
        # Obtaining the member '__getitem__' of a type (line 761)
        getitem___64284 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 8), _extent_64283, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 761)
        subscript_call_result_64285 = invoke(stypy.reporting.localization.Localization(__file__, 761, 8), getitem___64284, int_64281)
        
        # Assigning a type to the variable 'tuple_var_assignment_62330' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'tuple_var_assignment_62330', subscript_call_result_64285)
        
        # Assigning a Subscript to a Name (line 761):
        
        # Obtaining the type of the subscript
        int_64286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 761, 8), 'int')
        # Getting the type of 'self' (line 761)
        self_64287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 25), 'self')
        # Obtaining the member '_extent' of a type (line 761)
        _extent_64288 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 25), self_64287, '_extent')
        # Obtaining the member '__getitem__' of a type (line 761)
        getitem___64289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 8), _extent_64288, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 761)
        subscript_call_result_64290 = invoke(stypy.reporting.localization.Localization(__file__, 761, 8), getitem___64289, int_64286)
        
        # Assigning a type to the variable 'tuple_var_assignment_62331' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'tuple_var_assignment_62331', subscript_call_result_64290)
        
        # Assigning a Subscript to a Name (line 761):
        
        # Obtaining the type of the subscript
        int_64291 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 761, 8), 'int')
        # Getting the type of 'self' (line 761)
        self_64292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 25), 'self')
        # Obtaining the member '_extent' of a type (line 761)
        _extent_64293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 25), self_64292, '_extent')
        # Obtaining the member '__getitem__' of a type (line 761)
        getitem___64294 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 8), _extent_64293, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 761)
        subscript_call_result_64295 = invoke(stypy.reporting.localization.Localization(__file__, 761, 8), getitem___64294, int_64291)
        
        # Assigning a type to the variable 'tuple_var_assignment_62332' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'tuple_var_assignment_62332', subscript_call_result_64295)
        
        # Assigning a Subscript to a Name (line 761):
        
        # Obtaining the type of the subscript
        int_64296 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 761, 8), 'int')
        # Getting the type of 'self' (line 761)
        self_64297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 25), 'self')
        # Obtaining the member '_extent' of a type (line 761)
        _extent_64298 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 25), self_64297, '_extent')
        # Obtaining the member '__getitem__' of a type (line 761)
        getitem___64299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 761, 8), _extent_64298, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 761)
        subscript_call_result_64300 = invoke(stypy.reporting.localization.Localization(__file__, 761, 8), getitem___64299, int_64296)
        
        # Assigning a type to the variable 'tuple_var_assignment_62333' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'tuple_var_assignment_62333', subscript_call_result_64300)
        
        # Assigning a Name to a Name (line 761):
        # Getting the type of 'tuple_var_assignment_62330' (line 761)
        tuple_var_assignment_62330_64301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'tuple_var_assignment_62330')
        # Assigning a type to the variable 'x0' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'x0', tuple_var_assignment_62330_64301)
        
        # Assigning a Name to a Name (line 761):
        # Getting the type of 'tuple_var_assignment_62331' (line 761)
        tuple_var_assignment_62331_64302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'tuple_var_assignment_62331')
        # Assigning a type to the variable 'x1' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 12), 'x1', tuple_var_assignment_62331_64302)
        
        # Assigning a Name to a Name (line 761):
        # Getting the type of 'tuple_var_assignment_62332' (line 761)
        tuple_var_assignment_62332_64303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'tuple_var_assignment_62332')
        # Assigning a type to the variable 'y0' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 16), 'y0', tuple_var_assignment_62332_64303)
        
        # Assigning a Name to a Name (line 761):
        # Getting the type of 'tuple_var_assignment_62333' (line 761)
        tuple_var_assignment_62333_64304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 761, 8), 'tuple_var_assignment_62333')
        # Assigning a type to the variable 'y1' (line 761)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 761, 20), 'y1', tuple_var_assignment_62333_64304)
        
        # Assigning a Call to a Name (line 762):
        
        # Assigning a Call to a Name (line 762):
        
        # Call to from_extents(...): (line 762)
        # Processing the call arguments (line 762)
        
        # Obtaining an instance of the builtin type 'list' (line 762)
        list_64307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 762, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 762)
        # Adding element type (line 762)
        # Getting the type of 'x0' (line 762)
        x0_64308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 34), 'x0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 762, 33), list_64307, x0_64308)
        # Adding element type (line 762)
        # Getting the type of 'y0' (line 762)
        y0_64309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 38), 'y0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 762, 33), list_64307, y0_64309)
        # Adding element type (line 762)
        # Getting the type of 'x1' (line 762)
        x1_64310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 42), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 762, 33), list_64307, x1_64310)
        # Adding element type (line 762)
        # Getting the type of 'y1' (line 762)
        y1_64311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 46), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 762, 33), list_64307, y1_64311)
        
        # Processing the call keyword arguments (line 762)
        kwargs_64312 = {}
        # Getting the type of 'Bbox' (line 762)
        Bbox_64305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 762, 15), 'Bbox', False)
        # Obtaining the member 'from_extents' of a type (line 762)
        from_extents_64306 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 762, 15), Bbox_64305, 'from_extents')
        # Calling from_extents(args, kwargs) (line 762)
        from_extents_call_result_64313 = invoke(stypy.reporting.localization.Localization(__file__, 762, 15), from_extents_64306, *[list_64307], **kwargs_64312)
        
        # Assigning a type to the variable 'bbox' (line 762)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 762, 8), 'bbox', from_extents_call_result_64313)
        
        # Call to transformed(...): (line 763)
        # Processing the call arguments (line 763)
        # Getting the type of 'self' (line 763)
        self_64316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 32), 'self', False)
        # Obtaining the member 'axes' of a type (line 763)
        axes_64317 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 32), self_64316, 'axes')
        # Obtaining the member 'transData' of a type (line 763)
        transData_64318 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 32), axes_64317, 'transData')
        # Processing the call keyword arguments (line 763)
        kwargs_64319 = {}
        # Getting the type of 'bbox' (line 763)
        bbox_64314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 763, 15), 'bbox', False)
        # Obtaining the member 'transformed' of a type (line 763)
        transformed_64315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 763, 15), bbox_64314, 'transformed')
        # Calling transformed(args, kwargs) (line 763)
        transformed_call_result_64320 = invoke(stypy.reporting.localization.Localization(__file__, 763, 15), transformed_64315, *[transData_64318], **kwargs_64319)
        
        # Assigning a type to the variable 'stypy_return_type' (line 763)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 763, 8), 'stypy_return_type', transformed_call_result_64320)
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 760)
        stypy_return_type_64321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 760, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64321)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_64321


    @norecursion
    def make_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_64322 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 765, 49), 'float')
        # Getting the type of 'False' (line 765)
        False_64323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 64), 'False')
        defaults = [float_64322, False_64323]
        # Create a new context for function 'make_image'
        module_type_store = module_type_store.open_function_context('make_image', 765, 4, False)
        # Assigning a type to the variable 'self' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesImage.make_image.__dict__.__setitem__('stypy_localization', localization)
        AxesImage.make_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesImage.make_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesImage.make_image.__dict__.__setitem__('stypy_function_name', 'AxesImage.make_image')
        AxesImage.make_image.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'magnification', 'unsampled'])
        AxesImage.make_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesImage.make_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesImage.make_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesImage.make_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesImage.make_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesImage.make_image.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesImage.make_image', ['renderer', 'magnification', 'unsampled'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'make_image', localization, ['renderer', 'magnification', 'unsampled'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'make_image(...)' code ##################

        
        # Assigning a Call to a Name (line 766):
        
        # Assigning a Call to a Name (line 766):
        
        # Call to get_transform(...): (line 766)
        # Processing the call keyword arguments (line 766)
        kwargs_64326 = {}
        # Getting the type of 'self' (line 766)
        self_64324 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 766, 16), 'self', False)
        # Obtaining the member 'get_transform' of a type (line 766)
        get_transform_64325 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 766, 16), self_64324, 'get_transform')
        # Calling get_transform(args, kwargs) (line 766)
        get_transform_call_result_64327 = invoke(stypy.reporting.localization.Localization(__file__, 766, 16), get_transform_64325, *[], **kwargs_64326)
        
        # Assigning a type to the variable 'trans' (line 766)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 766, 8), 'trans', get_transform_call_result_64327)
        
        # Assigning a Call to a Tuple (line 768):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 768)
        # Processing the call keyword arguments (line 768)
        kwargs_64330 = {}
        # Getting the type of 'self' (line 768)
        self_64328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 25), 'self', False)
        # Obtaining the member 'get_extent' of a type (line 768)
        get_extent_64329 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 25), self_64328, 'get_extent')
        # Calling get_extent(args, kwargs) (line 768)
        get_extent_call_result_64331 = invoke(stypy.reporting.localization.Localization(__file__, 768, 25), get_extent_64329, *[], **kwargs_64330)
        
        # Assigning a type to the variable 'call_assignment_62334' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_62334', get_extent_call_result_64331)
        
        # Assigning a Call to a Name (line 768):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_64334 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 8), 'int')
        # Processing the call keyword arguments
        kwargs_64335 = {}
        # Getting the type of 'call_assignment_62334' (line 768)
        call_assignment_62334_64332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_62334', False)
        # Obtaining the member '__getitem__' of a type (line 768)
        getitem___64333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 8), call_assignment_62334_64332, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_64336 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___64333, *[int_64334], **kwargs_64335)
        
        # Assigning a type to the variable 'call_assignment_62335' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_62335', getitem___call_result_64336)
        
        # Assigning a Name to a Name (line 768):
        # Getting the type of 'call_assignment_62335' (line 768)
        call_assignment_62335_64337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_62335')
        # Assigning a type to the variable 'x1' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'x1', call_assignment_62335_64337)
        
        # Assigning a Call to a Name (line 768):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_64340 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 8), 'int')
        # Processing the call keyword arguments
        kwargs_64341 = {}
        # Getting the type of 'call_assignment_62334' (line 768)
        call_assignment_62334_64338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_62334', False)
        # Obtaining the member '__getitem__' of a type (line 768)
        getitem___64339 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 8), call_assignment_62334_64338, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_64342 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___64339, *[int_64340], **kwargs_64341)
        
        # Assigning a type to the variable 'call_assignment_62336' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_62336', getitem___call_result_64342)
        
        # Assigning a Name to a Name (line 768):
        # Getting the type of 'call_assignment_62336' (line 768)
        call_assignment_62336_64343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_62336')
        # Assigning a type to the variable 'x2' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 12), 'x2', call_assignment_62336_64343)
        
        # Assigning a Call to a Name (line 768):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_64346 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 8), 'int')
        # Processing the call keyword arguments
        kwargs_64347 = {}
        # Getting the type of 'call_assignment_62334' (line 768)
        call_assignment_62334_64344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_62334', False)
        # Obtaining the member '__getitem__' of a type (line 768)
        getitem___64345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 8), call_assignment_62334_64344, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_64348 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___64345, *[int_64346], **kwargs_64347)
        
        # Assigning a type to the variable 'call_assignment_62337' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_62337', getitem___call_result_64348)
        
        # Assigning a Name to a Name (line 768):
        # Getting the type of 'call_assignment_62337' (line 768)
        call_assignment_62337_64349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_62337')
        # Assigning a type to the variable 'y1' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 16), 'y1', call_assignment_62337_64349)
        
        # Assigning a Call to a Name (line 768):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_64352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 768, 8), 'int')
        # Processing the call keyword arguments
        kwargs_64353 = {}
        # Getting the type of 'call_assignment_62334' (line 768)
        call_assignment_62334_64350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_62334', False)
        # Obtaining the member '__getitem__' of a type (line 768)
        getitem___64351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 768, 8), call_assignment_62334_64350, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_64354 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___64351, *[int_64352], **kwargs_64353)
        
        # Assigning a type to the variable 'call_assignment_62338' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_62338', getitem___call_result_64354)
        
        # Assigning a Name to a Name (line 768):
        # Getting the type of 'call_assignment_62338' (line 768)
        call_assignment_62338_64355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 768, 8), 'call_assignment_62338')
        # Assigning a type to the variable 'y2' (line 768)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 768, 20), 'y2', call_assignment_62338_64355)
        
        # Assigning a Call to a Name (line 769):
        
        # Assigning a Call to a Name (line 769):
        
        # Call to Bbox(...): (line 769)
        # Processing the call arguments (line 769)
        
        # Call to array(...): (line 769)
        # Processing the call arguments (line 769)
        
        # Obtaining an instance of the builtin type 'list' (line 769)
        list_64359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 769)
        # Adding element type (line 769)
        
        # Obtaining an instance of the builtin type 'list' (line 769)
        list_64360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 30), 'list')
        # Adding type elements to the builtin type 'list' instance (line 769)
        # Adding element type (line 769)
        # Getting the type of 'x1' (line 769)
        x1_64361 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 31), 'x1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 769, 30), list_64360, x1_64361)
        # Adding element type (line 769)
        # Getting the type of 'y1' (line 769)
        y1_64362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 35), 'y1', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 769, 30), list_64360, y1_64362)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 769, 29), list_64359, list_64360)
        # Adding element type (line 769)
        
        # Obtaining an instance of the builtin type 'list' (line 769)
        list_64363 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 769, 40), 'list')
        # Adding type elements to the builtin type 'list' instance (line 769)
        # Adding element type (line 769)
        # Getting the type of 'x2' (line 769)
        x2_64364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 41), 'x2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 769, 40), list_64363, x2_64364)
        # Adding element type (line 769)
        # Getting the type of 'y2' (line 769)
        y2_64365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 45), 'y2', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 769, 40), list_64363, y2_64365)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 769, 29), list_64359, list_64363)
        
        # Processing the call keyword arguments (line 769)
        kwargs_64366 = {}
        # Getting the type of 'np' (line 769)
        np_64357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 20), 'np', False)
        # Obtaining the member 'array' of a type (line 769)
        array_64358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 769, 20), np_64357, 'array')
        # Calling array(args, kwargs) (line 769)
        array_call_result_64367 = invoke(stypy.reporting.localization.Localization(__file__, 769, 20), array_64358, *[list_64359], **kwargs_64366)
        
        # Processing the call keyword arguments (line 769)
        kwargs_64368 = {}
        # Getting the type of 'Bbox' (line 769)
        Bbox_64356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 769, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 769)
        Bbox_call_result_64369 = invoke(stypy.reporting.localization.Localization(__file__, 769, 15), Bbox_64356, *[array_call_result_64367], **kwargs_64368)
        
        # Assigning a type to the variable 'bbox' (line 769)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 769, 8), 'bbox', Bbox_call_result_64369)
        
        # Assigning a Call to a Name (line 770):
        
        # Assigning a Call to a Name (line 770):
        
        # Call to TransformedBbox(...): (line 770)
        # Processing the call arguments (line 770)
        # Getting the type of 'bbox' (line 770)
        bbox_64371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 43), 'bbox', False)
        # Getting the type of 'trans' (line 770)
        trans_64372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 49), 'trans', False)
        # Processing the call keyword arguments (line 770)
        kwargs_64373 = {}
        # Getting the type of 'TransformedBbox' (line 770)
        TransformedBbox_64370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 770, 27), 'TransformedBbox', False)
        # Calling TransformedBbox(args, kwargs) (line 770)
        TransformedBbox_call_result_64374 = invoke(stypy.reporting.localization.Localization(__file__, 770, 27), TransformedBbox_64370, *[bbox_64371, trans_64372], **kwargs_64373)
        
        # Assigning a type to the variable 'transformed_bbox' (line 770)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 770, 8), 'transformed_bbox', TransformedBbox_call_result_64374)
        
        # Call to _make_image(...): (line 772)
        # Processing the call arguments (line 772)
        # Getting the type of 'self' (line 773)
        self_64377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 12), 'self', False)
        # Obtaining the member '_A' of a type (line 773)
        _A_64378 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 12), self_64377, '_A')
        # Getting the type of 'bbox' (line 773)
        bbox_64379 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 21), 'bbox', False)
        # Getting the type of 'transformed_bbox' (line 773)
        transformed_bbox_64380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 27), 'transformed_bbox', False)
        # Getting the type of 'self' (line 773)
        self_64381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 45), 'self', False)
        # Obtaining the member 'axes' of a type (line 773)
        axes_64382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 45), self_64381, 'axes')
        # Obtaining the member 'bbox' of a type (line 773)
        bbox_64383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 773, 45), axes_64382, 'bbox')
        # Getting the type of 'magnification' (line 773)
        magnification_64384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 773, 61), 'magnification', False)
        # Processing the call keyword arguments (line 772)
        # Getting the type of 'unsampled' (line 774)
        unsampled_64385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 774, 22), 'unsampled', False)
        keyword_64386 = unsampled_64385
        kwargs_64387 = {'unsampled': keyword_64386}
        # Getting the type of 'self' (line 772)
        self_64375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 772, 15), 'self', False)
        # Obtaining the member '_make_image' of a type (line 772)
        _make_image_64376 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 772, 15), self_64375, '_make_image')
        # Calling _make_image(args, kwargs) (line 772)
        _make_image_call_result_64388 = invoke(stypy.reporting.localization.Localization(__file__, 772, 15), _make_image_64376, *[_A_64378, bbox_64379, transformed_bbox_64380, bbox_64383, magnification_64384], **kwargs_64387)
        
        # Assigning a type to the variable 'stypy_return_type' (line 772)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 772, 8), 'stypy_return_type', _make_image_call_result_64388)
        
        # ################# End of 'make_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'make_image' in the type store
        # Getting the type of 'stypy_return_type' (line 765)
        stypy_return_type_64389 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 765, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64389)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'make_image'
        return stypy_return_type_64389


    @norecursion
    def _check_unsampled_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_check_unsampled_image'
        module_type_store = module_type_store.open_function_context('_check_unsampled_image', 776, 4, False)
        # Assigning a type to the variable 'self' (line 777)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 777, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesImage._check_unsampled_image.__dict__.__setitem__('stypy_localization', localization)
        AxesImage._check_unsampled_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesImage._check_unsampled_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesImage._check_unsampled_image.__dict__.__setitem__('stypy_function_name', 'AxesImage._check_unsampled_image')
        AxesImage._check_unsampled_image.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        AxesImage._check_unsampled_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesImage._check_unsampled_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesImage._check_unsampled_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesImage._check_unsampled_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesImage._check_unsampled_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesImage._check_unsampled_image.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesImage._check_unsampled_image', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_check_unsampled_image', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_check_unsampled_image(...)' code ##################

        unicode_64390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 779, (-1)), 'unicode', u'\n        Return whether the image would be better drawn unsampled.\n        ')
        
        # Evaluating a boolean operation
        
        
        # Call to get_interpolation(...): (line 780)
        # Processing the call keyword arguments (line 780)
        kwargs_64393 = {}
        # Getting the type of 'self' (line 780)
        self_64391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 780, 16), 'self', False)
        # Obtaining the member 'get_interpolation' of a type (line 780)
        get_interpolation_64392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 780, 16), self_64391, 'get_interpolation')
        # Calling get_interpolation(args, kwargs) (line 780)
        get_interpolation_call_result_64394 = invoke(stypy.reporting.localization.Localization(__file__, 780, 16), get_interpolation_64392, *[], **kwargs_64393)
        
        unicode_64395 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 780, 44), 'unicode', u'none')
        # Applying the binary operator '==' (line 780)
        result_eq_64396 = python_operator(stypy.reporting.localization.Localization(__file__, 780, 16), '==', get_interpolation_call_result_64394, unicode_64395)
        
        
        # Call to option_scale_image(...): (line 781)
        # Processing the call keyword arguments (line 781)
        kwargs_64399 = {}
        # Getting the type of 'renderer' (line 781)
        renderer_64397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 20), 'renderer', False)
        # Obtaining the member 'option_scale_image' of a type (line 781)
        option_scale_image_64398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 781, 20), renderer_64397, 'option_scale_image')
        # Calling option_scale_image(args, kwargs) (line 781)
        option_scale_image_call_result_64400 = invoke(stypy.reporting.localization.Localization(__file__, 781, 20), option_scale_image_64398, *[], **kwargs_64399)
        
        # Applying the binary operator 'and' (line 780)
        result_and_keyword_64401 = python_operator(stypy.reporting.localization.Localization(__file__, 780, 16), 'and', result_eq_64396, option_scale_image_call_result_64400)
        
        # Assigning a type to the variable 'stypy_return_type' (line 780)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 780, 8), 'stypy_return_type', result_and_keyword_64401)
        
        # ################# End of '_check_unsampled_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_check_unsampled_image' in the type store
        # Getting the type of 'stypy_return_type' (line 776)
        stypy_return_type_64402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 776, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64402)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_check_unsampled_image'
        return stypy_return_type_64402


    @norecursion
    def set_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_extent'
        module_type_store = module_type_store.open_function_context('set_extent', 783, 4, False)
        # Assigning a type to the variable 'self' (line 784)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 784, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesImage.set_extent.__dict__.__setitem__('stypy_localization', localization)
        AxesImage.set_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesImage.set_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesImage.set_extent.__dict__.__setitem__('stypy_function_name', 'AxesImage.set_extent')
        AxesImage.set_extent.__dict__.__setitem__('stypy_param_names_list', ['extent'])
        AxesImage.set_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesImage.set_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesImage.set_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesImage.set_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesImage.set_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesImage.set_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesImage.set_extent', ['extent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_extent', localization, ['extent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_extent(...)' code ##################

        unicode_64403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 791, (-1)), 'unicode', u'\n        extent is data axes (left, right, bottom, top) for making image plots\n\n        This updates ax.dataLim, and, if autoscaling, sets viewLim\n        to tightly fit the image, regardless of dataLim.  Autoscaling\n        state is not changed, so following this with ax.autoscale_view\n        will redo the autoscaling in accord with dataLim.\n        ')
        
        # Multiple assignment of 2 elements.
        
        # Assigning a Subscript to a Name (line 792):
        
        # Obtaining the type of the subscript
        int_64404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 8), 'int')
        # Getting the type of 'extent' (line 792)
        extent_64405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 48), 'extent')
        # Obtaining the member '__getitem__' of a type (line 792)
        getitem___64406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 8), extent_64405, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 792)
        subscript_call_result_64407 = invoke(stypy.reporting.localization.Localization(__file__, 792, 8), getitem___64406, int_64404)
        
        # Assigning a type to the variable 'tuple_var_assignment_62339' (line 792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'tuple_var_assignment_62339', subscript_call_result_64407)
        
        # Assigning a Subscript to a Name (line 792):
        
        # Obtaining the type of the subscript
        int_64408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 8), 'int')
        # Getting the type of 'extent' (line 792)
        extent_64409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 48), 'extent')
        # Obtaining the member '__getitem__' of a type (line 792)
        getitem___64410 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 8), extent_64409, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 792)
        subscript_call_result_64411 = invoke(stypy.reporting.localization.Localization(__file__, 792, 8), getitem___64410, int_64408)
        
        # Assigning a type to the variable 'tuple_var_assignment_62340' (line 792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'tuple_var_assignment_62340', subscript_call_result_64411)
        
        # Assigning a Subscript to a Name (line 792):
        
        # Obtaining the type of the subscript
        int_64412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 8), 'int')
        # Getting the type of 'extent' (line 792)
        extent_64413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 48), 'extent')
        # Obtaining the member '__getitem__' of a type (line 792)
        getitem___64414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 8), extent_64413, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 792)
        subscript_call_result_64415 = invoke(stypy.reporting.localization.Localization(__file__, 792, 8), getitem___64414, int_64412)
        
        # Assigning a type to the variable 'tuple_var_assignment_62341' (line 792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'tuple_var_assignment_62341', subscript_call_result_64415)
        
        # Assigning a Subscript to a Name (line 792):
        
        # Obtaining the type of the subscript
        int_64416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 8), 'int')
        # Getting the type of 'extent' (line 792)
        extent_64417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 48), 'extent')
        # Obtaining the member '__getitem__' of a type (line 792)
        getitem___64418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 8), extent_64417, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 792)
        subscript_call_result_64419 = invoke(stypy.reporting.localization.Localization(__file__, 792, 8), getitem___64418, int_64416)
        
        # Assigning a type to the variable 'tuple_var_assignment_62342' (line 792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'tuple_var_assignment_62342', subscript_call_result_64419)
        
        # Assigning a Name to a Name (line 792):
        # Getting the type of 'tuple_var_assignment_62339' (line 792)
        tuple_var_assignment_62339_64420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'tuple_var_assignment_62339')
        # Assigning a type to the variable 'xmin' (line 792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 23), 'xmin', tuple_var_assignment_62339_64420)
        
        # Assigning a Name to a Name (line 792):
        # Getting the type of 'tuple_var_assignment_62340' (line 792)
        tuple_var_assignment_62340_64421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'tuple_var_assignment_62340')
        # Assigning a type to the variable 'xmax' (line 792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 29), 'xmax', tuple_var_assignment_62340_64421)
        
        # Assigning a Name to a Name (line 792):
        # Getting the type of 'tuple_var_assignment_62341' (line 792)
        tuple_var_assignment_62341_64422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'tuple_var_assignment_62341')
        # Assigning a type to the variable 'ymin' (line 792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 35), 'ymin', tuple_var_assignment_62341_64422)
        
        # Assigning a Name to a Name (line 792):
        # Getting the type of 'tuple_var_assignment_62342' (line 792)
        tuple_var_assignment_62342_64423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'tuple_var_assignment_62342')
        # Assigning a type to the variable 'ymax' (line 792)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 792, 41), 'ymax', tuple_var_assignment_62342_64423)
        
        # Assigning a Tuple to a Attribute (line 792):
        
        # Obtaining an instance of the builtin type 'tuple' (line 792)
        tuple_64424 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 792, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 792)
        # Adding element type (line 792)xmin
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 792, 23), tuple_64424, )
        # Adding element type (line 792)xmax
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 792, 23), tuple_64424, )
        # Adding element type (line 792)ymin
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 792, 23), tuple_64424, )
        # Adding element type (line 792)ymax
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 792, 23), tuple_64424, )
        
        # Getting the type of 'self' (line 792)
        self_64425 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 8), 'self')
        # Setting the type of the member '_extent' of a type (line 792)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 792, 8), self_64425, '_extent', tuple_64424)
        
        # Assigning a Tuple to a Name (line 793):
        
        # Assigning a Tuple to a Name (line 793):
        
        # Obtaining an instance of the builtin type 'tuple' (line 793)
        tuple_64426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 18), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 793)
        # Adding element type (line 793)
        
        # Obtaining an instance of the builtin type 'tuple' (line 793)
        tuple_64427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 793)
        # Adding element type (line 793)
        # Getting the type of 'xmin' (line 793)
        xmin_64428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 19), 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 793, 19), tuple_64427, xmin_64428)
        # Adding element type (line 793)
        # Getting the type of 'ymin' (line 793)
        ymin_64429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 25), 'ymin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 793, 19), tuple_64427, ymin_64429)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 793, 18), tuple_64426, tuple_64427)
        # Adding element type (line 793)
        
        # Obtaining an instance of the builtin type 'tuple' (line 793)
        tuple_64430 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 793, 33), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 793)
        # Adding element type (line 793)
        # Getting the type of 'xmax' (line 793)
        xmax_64431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 33), 'xmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 793, 33), tuple_64430, xmax_64431)
        # Adding element type (line 793)
        # Getting the type of 'ymax' (line 793)
        ymax_64432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 793, 39), 'ymax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 793, 33), tuple_64430, ymax_64432)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 793, 18), tuple_64426, tuple_64430)
        
        # Assigning a type to the variable 'corners' (line 793)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 793, 8), 'corners', tuple_64426)
        
        # Call to update_datalim(...): (line 794)
        # Processing the call arguments (line 794)
        # Getting the type of 'corners' (line 794)
        corners_64436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 33), 'corners', False)
        # Processing the call keyword arguments (line 794)
        kwargs_64437 = {}
        # Getting the type of 'self' (line 794)
        self_64433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 794, 8), 'self', False)
        # Obtaining the member 'axes' of a type (line 794)
        axes_64434 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 8), self_64433, 'axes')
        # Obtaining the member 'update_datalim' of a type (line 794)
        update_datalim_64435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 794, 8), axes_64434, 'update_datalim')
        # Calling update_datalim(args, kwargs) (line 794)
        update_datalim_call_result_64438 = invoke(stypy.reporting.localization.Localization(__file__, 794, 8), update_datalim_64435, *[corners_64436], **kwargs_64437)
        
        
        # Assigning a List to a Subscript (line 795):
        
        # Assigning a List to a Subscript (line 795):
        
        # Obtaining an instance of the builtin type 'list' (line 795)
        list_64439 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 795, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 795)
        # Adding element type (line 795)
        # Getting the type of 'xmin' (line 795)
        xmin_64440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 34), 'xmin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 795, 33), list_64439, xmin_64440)
        # Adding element type (line 795)
        # Getting the type of 'xmax' (line 795)
        xmax_64441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 40), 'xmax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 795, 33), list_64439, xmax_64441)
        
        # Getting the type of 'self' (line 795)
        self_64442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 795, 8), 'self')
        # Obtaining the member 'sticky_edges' of a type (line 795)
        sticky_edges_64443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 8), self_64442, 'sticky_edges')
        # Obtaining the member 'x' of a type (line 795)
        x_64444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 795, 8), sticky_edges_64443, 'x')
        slice_64445 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 795, 8), None, None, None)
        # Storing an element on a container (line 795)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 795, 8), x_64444, (slice_64445, list_64439))
        
        # Assigning a List to a Subscript (line 796):
        
        # Assigning a List to a Subscript (line 796):
        
        # Obtaining an instance of the builtin type 'list' (line 796)
        list_64446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 796, 33), 'list')
        # Adding type elements to the builtin type 'list' instance (line 796)
        # Adding element type (line 796)
        # Getting the type of 'ymin' (line 796)
        ymin_64447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 34), 'ymin')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 796, 33), list_64446, ymin_64447)
        # Adding element type (line 796)
        # Getting the type of 'ymax' (line 796)
        ymax_64448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 40), 'ymax')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 796, 33), list_64446, ymax_64448)
        
        # Getting the type of 'self' (line 796)
        self_64449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 796, 8), 'self')
        # Obtaining the member 'sticky_edges' of a type (line 796)
        sticky_edges_64450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 8), self_64449, 'sticky_edges')
        # Obtaining the member 'y' of a type (line 796)
        y_64451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 796, 8), sticky_edges_64450, 'y')
        slice_64452 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 796, 8), None, None, None)
        # Storing an element on a container (line 796)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 796, 8), y_64451, (slice_64452, list_64446))
        
        # Getting the type of 'self' (line 797)
        self_64453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 797, 11), 'self')
        # Obtaining the member 'axes' of a type (line 797)
        axes_64454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 11), self_64453, 'axes')
        # Obtaining the member '_autoscaleXon' of a type (line 797)
        _autoscaleXon_64455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 797, 11), axes_64454, '_autoscaleXon')
        # Testing the type of an if condition (line 797)
        if_condition_64456 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 797, 8), _autoscaleXon_64455)
        # Assigning a type to the variable 'if_condition_64456' (line 797)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 797, 8), 'if_condition_64456', if_condition_64456)
        # SSA begins for if statement (line 797)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_xlim(...): (line 798)
        # Processing the call arguments (line 798)
        
        # Obtaining an instance of the builtin type 'tuple' (line 798)
        tuple_64460 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 798, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 798)
        # Adding element type (line 798)
        # Getting the type of 'xmin' (line 798)
        xmin_64461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 32), 'xmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 798, 32), tuple_64460, xmin_64461)
        # Adding element type (line 798)
        # Getting the type of 'xmax' (line 798)
        xmax_64462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 38), 'xmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 798, 32), tuple_64460, xmax_64462)
        
        # Processing the call keyword arguments (line 798)
        # Getting the type of 'None' (line 798)
        None_64463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 50), 'None', False)
        keyword_64464 = None_64463
        kwargs_64465 = {'auto': keyword_64464}
        # Getting the type of 'self' (line 798)
        self_64457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 798, 12), 'self', False)
        # Obtaining the member 'axes' of a type (line 798)
        axes_64458 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 12), self_64457, 'axes')
        # Obtaining the member 'set_xlim' of a type (line 798)
        set_xlim_64459 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 798, 12), axes_64458, 'set_xlim')
        # Calling set_xlim(args, kwargs) (line 798)
        set_xlim_call_result_64466 = invoke(stypy.reporting.localization.Localization(__file__, 798, 12), set_xlim_64459, *[tuple_64460], **kwargs_64465)
        
        # SSA join for if statement (line 797)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of 'self' (line 799)
        self_64467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 799, 11), 'self')
        # Obtaining the member 'axes' of a type (line 799)
        axes_64468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 11), self_64467, 'axes')
        # Obtaining the member '_autoscaleYon' of a type (line 799)
        _autoscaleYon_64469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 799, 11), axes_64468, '_autoscaleYon')
        # Testing the type of an if condition (line 799)
        if_condition_64470 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 799, 8), _autoscaleYon_64469)
        # Assigning a type to the variable 'if_condition_64470' (line 799)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 799, 8), 'if_condition_64470', if_condition_64470)
        # SSA begins for if statement (line 799)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_ylim(...): (line 800)
        # Processing the call arguments (line 800)
        
        # Obtaining an instance of the builtin type 'tuple' (line 800)
        tuple_64474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 800, 32), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 800)
        # Adding element type (line 800)
        # Getting the type of 'ymin' (line 800)
        ymin_64475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 32), 'ymin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 800, 32), tuple_64474, ymin_64475)
        # Adding element type (line 800)
        # Getting the type of 'ymax' (line 800)
        ymax_64476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 38), 'ymax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 800, 32), tuple_64474, ymax_64476)
        
        # Processing the call keyword arguments (line 800)
        # Getting the type of 'None' (line 800)
        None_64477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 50), 'None', False)
        keyword_64478 = None_64477
        kwargs_64479 = {'auto': keyword_64478}
        # Getting the type of 'self' (line 800)
        self_64471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 800, 12), 'self', False)
        # Obtaining the member 'axes' of a type (line 800)
        axes_64472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 12), self_64471, 'axes')
        # Obtaining the member 'set_ylim' of a type (line 800)
        set_ylim_64473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 800, 12), axes_64472, 'set_ylim')
        # Calling set_ylim(args, kwargs) (line 800)
        set_ylim_call_result_64480 = invoke(stypy.reporting.localization.Localization(__file__, 800, 12), set_ylim_64473, *[tuple_64474], **kwargs_64479)
        
        # SSA join for if statement (line 799)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 801):
        
        # Assigning a Name to a Attribute (line 801):
        # Getting the type of 'True' (line 801)
        True_64481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 21), 'True')
        # Getting the type of 'self' (line 801)
        self_64482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 801, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 801)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 801, 8), self_64482, 'stale', True_64481)
        
        # ################# End of 'set_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 783)
        stypy_return_type_64483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 783, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64483)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_extent'
        return stypy_return_type_64483


    @norecursion
    def get_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extent'
        module_type_store = module_type_store.open_function_context('get_extent', 803, 4, False)
        # Assigning a type to the variable 'self' (line 804)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 804, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesImage.get_extent.__dict__.__setitem__('stypy_localization', localization)
        AxesImage.get_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesImage.get_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesImage.get_extent.__dict__.__setitem__('stypy_function_name', 'AxesImage.get_extent')
        AxesImage.get_extent.__dict__.__setitem__('stypy_param_names_list', [])
        AxesImage.get_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesImage.get_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesImage.get_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesImage.get_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesImage.get_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesImage.get_extent.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesImage.get_extent', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extent', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extent(...)' code ##################

        unicode_64484 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 804, 8), 'unicode', u'Get the image extent: left, right, bottom, top')
        
        
        # Getting the type of 'self' (line 805)
        self_64485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 11), 'self')
        # Obtaining the member '_extent' of a type (line 805)
        _extent_64486 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 805, 11), self_64485, '_extent')
        # Getting the type of 'None' (line 805)
        None_64487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 805, 31), 'None')
        # Applying the binary operator 'isnot' (line 805)
        result_is_not_64488 = python_operator(stypy.reporting.localization.Localization(__file__, 805, 11), 'isnot', _extent_64486, None_64487)
        
        # Testing the type of an if condition (line 805)
        if_condition_64489 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 805, 8), result_is_not_64488)
        # Assigning a type to the variable 'if_condition_64489' (line 805)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 805, 8), 'if_condition_64489', if_condition_64489)
        # SSA begins for if statement (line 805)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 806)
        self_64490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 806, 19), 'self')
        # Obtaining the member '_extent' of a type (line 806)
        _extent_64491 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 806, 19), self_64490, '_extent')
        # Assigning a type to the variable 'stypy_return_type' (line 806)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 806, 12), 'stypy_return_type', _extent_64491)
        # SSA branch for the else part of an if statement (line 805)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 808):
        
        # Assigning a Call to a Name (line 808):
        
        # Call to get_size(...): (line 808)
        # Processing the call keyword arguments (line 808)
        kwargs_64494 = {}
        # Getting the type of 'self' (line 808)
        self_64492 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 17), 'self', False)
        # Obtaining the member 'get_size' of a type (line 808)
        get_size_64493 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 17), self_64492, 'get_size')
        # Calling get_size(args, kwargs) (line 808)
        get_size_call_result_64495 = invoke(stypy.reporting.localization.Localization(__file__, 808, 17), get_size_64493, *[], **kwargs_64494)
        
        # Assigning a type to the variable 'sz' (line 808)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 808, 12), 'sz', get_size_call_result_64495)
        
        # Assigning a Name to a Tuple (line 809):
        
        # Assigning a Subscript to a Name (line 809):
        
        # Obtaining the type of the subscript
        int_64496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 12), 'int')
        # Getting the type of 'sz' (line 809)
        sz_64497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 31), 'sz')
        # Obtaining the member '__getitem__' of a type (line 809)
        getitem___64498 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 12), sz_64497, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 809)
        subscript_call_result_64499 = invoke(stypy.reporting.localization.Localization(__file__, 809, 12), getitem___64498, int_64496)
        
        # Assigning a type to the variable 'tuple_var_assignment_62343' (line 809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 12), 'tuple_var_assignment_62343', subscript_call_result_64499)
        
        # Assigning a Subscript to a Name (line 809):
        
        # Obtaining the type of the subscript
        int_64500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 809, 12), 'int')
        # Getting the type of 'sz' (line 809)
        sz_64501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 31), 'sz')
        # Obtaining the member '__getitem__' of a type (line 809)
        getitem___64502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 809, 12), sz_64501, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 809)
        subscript_call_result_64503 = invoke(stypy.reporting.localization.Localization(__file__, 809, 12), getitem___64502, int_64500)
        
        # Assigning a type to the variable 'tuple_var_assignment_62344' (line 809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 12), 'tuple_var_assignment_62344', subscript_call_result_64503)
        
        # Assigning a Name to a Name (line 809):
        # Getting the type of 'tuple_var_assignment_62343' (line 809)
        tuple_var_assignment_62343_64504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 12), 'tuple_var_assignment_62343')
        # Assigning a type to the variable 'numrows' (line 809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 12), 'numrows', tuple_var_assignment_62343_64504)
        
        # Assigning a Name to a Name (line 809):
        # Getting the type of 'tuple_var_assignment_62344' (line 809)
        tuple_var_assignment_62344_64505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 809, 12), 'tuple_var_assignment_62344')
        # Assigning a type to the variable 'numcols' (line 809)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 809, 21), 'numcols', tuple_var_assignment_62344_64505)
        
        
        # Getting the type of 'self' (line 810)
        self_64506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 15), 'self')
        # Obtaining the member 'origin' of a type (line 810)
        origin_64507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 810, 15), self_64506, 'origin')
        unicode_64508 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 810, 30), 'unicode', u'upper')
        # Applying the binary operator '==' (line 810)
        result_eq_64509 = python_operator(stypy.reporting.localization.Localization(__file__, 810, 15), '==', origin_64507, unicode_64508)
        
        # Testing the type of an if condition (line 810)
        if_condition_64510 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 810, 12), result_eq_64509)
        # Assigning a type to the variable 'if_condition_64510' (line 810)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 810, 12), 'if_condition_64510', if_condition_64510)
        # SSA begins for if statement (line 810)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 811)
        tuple_64511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 811)
        # Adding element type (line 811)
        float_64512 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 811, 24), tuple_64511, float_64512)
        # Adding element type (line 811)
        # Getting the type of 'numcols' (line 811)
        numcols_64513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 30), 'numcols')
        float_64514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 38), 'float')
        # Applying the binary operator '-' (line 811)
        result_sub_64515 = python_operator(stypy.reporting.localization.Localization(__file__, 811, 30), '-', numcols_64513, float_64514)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 811, 24), tuple_64511, result_sub_64515)
        # Adding element type (line 811)
        # Getting the type of 'numrows' (line 811)
        numrows_64516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 43), 'numrows')
        float_64517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 51), 'float')
        # Applying the binary operator '-' (line 811)
        result_sub_64518 = python_operator(stypy.reporting.localization.Localization(__file__, 811, 43), '-', numrows_64516, float_64517)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 811, 24), tuple_64511, result_sub_64518)
        # Adding element type (line 811)
        float_64519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 811, 56), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 811, 24), tuple_64511, float_64519)
        
        # Assigning a type to the variable 'stypy_return_type' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 16), 'stypy_return_type', tuple_64511)
        # SSA branch for the else part of an if statement (line 810)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining an instance of the builtin type 'tuple' (line 813)
        tuple_64520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 24), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 813)
        # Adding element type (line 813)
        float_64521 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 24), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 813, 24), tuple_64520, float_64521)
        # Adding element type (line 813)
        # Getting the type of 'numcols' (line 813)
        numcols_64522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 30), 'numcols')
        float_64523 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 38), 'float')
        # Applying the binary operator '-' (line 813)
        result_sub_64524 = python_operator(stypy.reporting.localization.Localization(__file__, 813, 30), '-', numcols_64522, float_64523)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 813, 24), tuple_64520, result_sub_64524)
        # Adding element type (line 813)
        float_64525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 43), 'float')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 813, 24), tuple_64520, float_64525)
        # Adding element type (line 813)
        # Getting the type of 'numrows' (line 813)
        numrows_64526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 49), 'numrows')
        float_64527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 813, 57), 'float')
        # Applying the binary operator '-' (line 813)
        result_sub_64528 = python_operator(stypy.reporting.localization.Localization(__file__, 813, 49), '-', numrows_64526, float_64527)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 813, 24), tuple_64520, result_sub_64528)
        
        # Assigning a type to the variable 'stypy_return_type' (line 813)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 813, 16), 'stypy_return_type', tuple_64520)
        # SSA join for if statement (line 810)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 805)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 803)
        stypy_return_type_64529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 803, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64529)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extent'
        return stypy_return_type_64529


    @norecursion
    def get_cursor_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_cursor_data'
        module_type_store = module_type_store.open_function_context('get_cursor_data', 815, 4, False)
        # Assigning a type to the variable 'self' (line 816)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 816, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        AxesImage.get_cursor_data.__dict__.__setitem__('stypy_localization', localization)
        AxesImage.get_cursor_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        AxesImage.get_cursor_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        AxesImage.get_cursor_data.__dict__.__setitem__('stypy_function_name', 'AxesImage.get_cursor_data')
        AxesImage.get_cursor_data.__dict__.__setitem__('stypy_param_names_list', ['event'])
        AxesImage.get_cursor_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        AxesImage.get_cursor_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        AxesImage.get_cursor_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        AxesImage.get_cursor_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        AxesImage.get_cursor_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        AxesImage.get_cursor_data.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'AxesImage.get_cursor_data', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_cursor_data', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_cursor_data(...)' code ##################

        unicode_64530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 816, 8), 'unicode', u'Get the cursor data for a given event')
        
        # Assigning a Call to a Tuple (line 817):
        
        # Assigning a Call to a Name:
        
        # Call to get_extent(...): (line 817)
        # Processing the call keyword arguments (line 817)
        kwargs_64533 = {}
        # Getting the type of 'self' (line 817)
        self_64531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 33), 'self', False)
        # Obtaining the member 'get_extent' of a type (line 817)
        get_extent_64532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 33), self_64531, 'get_extent')
        # Calling get_extent(args, kwargs) (line 817)
        get_extent_call_result_64534 = invoke(stypy.reporting.localization.Localization(__file__, 817, 33), get_extent_64532, *[], **kwargs_64533)
        
        # Assigning a type to the variable 'call_assignment_62345' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'call_assignment_62345', get_extent_call_result_64534)
        
        # Assigning a Call to a Name (line 817):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_64537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, 8), 'int')
        # Processing the call keyword arguments
        kwargs_64538 = {}
        # Getting the type of 'call_assignment_62345' (line 817)
        call_assignment_62345_64535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'call_assignment_62345', False)
        # Obtaining the member '__getitem__' of a type (line 817)
        getitem___64536 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 8), call_assignment_62345_64535, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_64539 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___64536, *[int_64537], **kwargs_64538)
        
        # Assigning a type to the variable 'call_assignment_62346' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'call_assignment_62346', getitem___call_result_64539)
        
        # Assigning a Name to a Name (line 817):
        # Getting the type of 'call_assignment_62346' (line 817)
        call_assignment_62346_64540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'call_assignment_62346')
        # Assigning a type to the variable 'xmin' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'xmin', call_assignment_62346_64540)
        
        # Assigning a Call to a Name (line 817):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_64543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, 8), 'int')
        # Processing the call keyword arguments
        kwargs_64544 = {}
        # Getting the type of 'call_assignment_62345' (line 817)
        call_assignment_62345_64541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'call_assignment_62345', False)
        # Obtaining the member '__getitem__' of a type (line 817)
        getitem___64542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 8), call_assignment_62345_64541, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_64545 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___64542, *[int_64543], **kwargs_64544)
        
        # Assigning a type to the variable 'call_assignment_62347' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'call_assignment_62347', getitem___call_result_64545)
        
        # Assigning a Name to a Name (line 817):
        # Getting the type of 'call_assignment_62347' (line 817)
        call_assignment_62347_64546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'call_assignment_62347')
        # Assigning a type to the variable 'xmax' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 14), 'xmax', call_assignment_62347_64546)
        
        # Assigning a Call to a Name (line 817):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_64549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, 8), 'int')
        # Processing the call keyword arguments
        kwargs_64550 = {}
        # Getting the type of 'call_assignment_62345' (line 817)
        call_assignment_62345_64547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'call_assignment_62345', False)
        # Obtaining the member '__getitem__' of a type (line 817)
        getitem___64548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 8), call_assignment_62345_64547, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_64551 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___64548, *[int_64549], **kwargs_64550)
        
        # Assigning a type to the variable 'call_assignment_62348' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'call_assignment_62348', getitem___call_result_64551)
        
        # Assigning a Name to a Name (line 817):
        # Getting the type of 'call_assignment_62348' (line 817)
        call_assignment_62348_64552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'call_assignment_62348')
        # Assigning a type to the variable 'ymin' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 20), 'ymin', call_assignment_62348_64552)
        
        # Assigning a Call to a Name (line 817):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_64555 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 817, 8), 'int')
        # Processing the call keyword arguments
        kwargs_64556 = {}
        # Getting the type of 'call_assignment_62345' (line 817)
        call_assignment_62345_64553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'call_assignment_62345', False)
        # Obtaining the member '__getitem__' of a type (line 817)
        getitem___64554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 817, 8), call_assignment_62345_64553, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_64557 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___64554, *[int_64555], **kwargs_64556)
        
        # Assigning a type to the variable 'call_assignment_62349' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'call_assignment_62349', getitem___call_result_64557)
        
        # Assigning a Name to a Name (line 817):
        # Getting the type of 'call_assignment_62349' (line 817)
        call_assignment_62349_64558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 817, 8), 'call_assignment_62349')
        # Assigning a type to the variable 'ymax' (line 817)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 817, 26), 'ymax', call_assignment_62349_64558)
        
        
        # Getting the type of 'self' (line 818)
        self_64559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 11), 'self')
        # Obtaining the member 'origin' of a type (line 818)
        origin_64560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 11), self_64559, 'origin')
        unicode_64561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 818, 26), 'unicode', u'upper')
        # Applying the binary operator '==' (line 818)
        result_eq_64562 = python_operator(stypy.reporting.localization.Localization(__file__, 818, 11), '==', origin_64560, unicode_64561)
        
        # Testing the type of an if condition (line 818)
        if_condition_64563 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 818, 8), result_eq_64562)
        # Assigning a type to the variable 'if_condition_64563' (line 818)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'if_condition_64563', if_condition_64563)
        # SSA begins for if statement (line 818)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Tuple to a Tuple (line 819):
        
        # Assigning a Name to a Name (line 819):
        # Getting the type of 'ymax' (line 819)
        ymax_64564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 25), 'ymax')
        # Assigning a type to the variable 'tuple_assignment_62350' (line 819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 12), 'tuple_assignment_62350', ymax_64564)
        
        # Assigning a Name to a Name (line 819):
        # Getting the type of 'ymin' (line 819)
        ymin_64565 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 31), 'ymin')
        # Assigning a type to the variable 'tuple_assignment_62351' (line 819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 12), 'tuple_assignment_62351', ymin_64565)
        
        # Assigning a Name to a Name (line 819):
        # Getting the type of 'tuple_assignment_62350' (line 819)
        tuple_assignment_62350_64566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 12), 'tuple_assignment_62350')
        # Assigning a type to the variable 'ymin' (line 819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 12), 'ymin', tuple_assignment_62350_64566)
        
        # Assigning a Name to a Name (line 819):
        # Getting the type of 'tuple_assignment_62351' (line 819)
        tuple_assignment_62351_64567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 819, 12), 'tuple_assignment_62351')
        # Assigning a type to the variable 'ymax' (line 819)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 819, 18), 'ymax', tuple_assignment_62351_64567)
        # SSA join for if statement (line 818)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 820):
        
        # Assigning a Call to a Name (line 820):
        
        # Call to get_array(...): (line 820)
        # Processing the call keyword arguments (line 820)
        kwargs_64570 = {}
        # Getting the type of 'self' (line 820)
        self_64568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 820, 14), 'self', False)
        # Obtaining the member 'get_array' of a type (line 820)
        get_array_64569 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 820, 14), self_64568, 'get_array')
        # Calling get_array(args, kwargs) (line 820)
        get_array_call_result_64571 = invoke(stypy.reporting.localization.Localization(__file__, 820, 14), get_array_64569, *[], **kwargs_64570)
        
        # Assigning a type to the variable 'arr' (line 820)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 820, 8), 'arr', get_array_call_result_64571)
        
        # Assigning a Call to a Name (line 821):
        
        # Assigning a Call to a Name (line 821):
        
        # Call to Bbox(...): (line 821)
        # Processing the call arguments (line 821)
        
        # Obtaining an instance of the builtin type 'list' (line 821)
        list_64573 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 821)
        # Adding element type (line 821)
        
        # Obtaining an instance of the builtin type 'list' (line 821)
        list_64574 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 821)
        # Adding element type (line 821)
        # Getting the type of 'ymin' (line 821)
        ymin_64575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 29), 'ymin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 821, 28), list_64574, ymin_64575)
        # Adding element type (line 821)
        # Getting the type of 'xmin' (line 821)
        xmin_64576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 35), 'xmin', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 821, 28), list_64574, xmin_64576)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 821, 27), list_64573, list_64574)
        # Adding element type (line 821)
        
        # Obtaining an instance of the builtin type 'list' (line 821)
        list_64577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 821, 42), 'list')
        # Adding type elements to the builtin type 'list' instance (line 821)
        # Adding element type (line 821)
        # Getting the type of 'ymax' (line 821)
        ymax_64578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 43), 'ymax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 821, 42), list_64577, ymax_64578)
        # Adding element type (line 821)
        # Getting the type of 'xmax' (line 821)
        xmax_64579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 49), 'xmax', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 821, 42), list_64577, xmax_64579)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 821, 27), list_64573, list_64577)
        
        # Processing the call keyword arguments (line 821)
        kwargs_64580 = {}
        # Getting the type of 'Bbox' (line 821)
        Bbox_64572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 821, 22), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 821)
        Bbox_call_result_64581 = invoke(stypy.reporting.localization.Localization(__file__, 821, 22), Bbox_64572, *[list_64573], **kwargs_64580)
        
        # Assigning a type to the variable 'data_extent' (line 821)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 821, 8), 'data_extent', Bbox_call_result_64581)
        
        # Assigning a Call to a Name (line 822):
        
        # Assigning a Call to a Name (line 822):
        
        # Call to Bbox(...): (line 822)
        # Processing the call arguments (line 822)
        
        # Obtaining an instance of the builtin type 'list' (line 822)
        list_64583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 28), 'list')
        # Adding type elements to the builtin type 'list' instance (line 822)
        # Adding element type (line 822)
        
        # Obtaining an instance of the builtin type 'list' (line 822)
        list_64584 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 822)
        # Adding element type (line 822)
        int_64585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 30), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 822, 29), list_64584, int_64585)
        # Adding element type (line 822)
        int_64586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 822, 29), list_64584, int_64586)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 822, 28), list_64583, list_64584)
        # Adding element type (line 822)
        
        # Obtaining the type of the subscript
        int_64587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 822, 48), 'int')
        slice_64588 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 822, 37), None, int_64587, None)
        # Getting the type of 'arr' (line 822)
        arr_64589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 37), 'arr', False)
        # Obtaining the member 'shape' of a type (line 822)
        shape_64590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 37), arr_64589, 'shape')
        # Obtaining the member '__getitem__' of a type (line 822)
        getitem___64591 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 822, 37), shape_64590, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 822)
        subscript_call_result_64592 = invoke(stypy.reporting.localization.Localization(__file__, 822, 37), getitem___64591, slice_64588)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 822, 28), list_64583, subscript_call_result_64592)
        
        # Processing the call keyword arguments (line 822)
        kwargs_64593 = {}
        # Getting the type of 'Bbox' (line 822)
        Bbox_64582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 822, 23), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 822)
        Bbox_call_result_64594 = invoke(stypy.reporting.localization.Localization(__file__, 822, 23), Bbox_64582, *[list_64583], **kwargs_64593)
        
        # Assigning a type to the variable 'array_extent' (line 822)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 822, 8), 'array_extent', Bbox_call_result_64594)
        
        # Assigning a Call to a Name (line 823):
        
        # Assigning a Call to a Name (line 823):
        
        # Call to BboxTransform(...): (line 823)
        # Processing the call keyword arguments (line 823)
        # Getting the type of 'data_extent' (line 823)
        data_extent_64596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 36), 'data_extent', False)
        keyword_64597 = data_extent_64596
        # Getting the type of 'array_extent' (line 823)
        array_extent_64598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 56), 'array_extent', False)
        keyword_64599 = array_extent_64598
        kwargs_64600 = {'boxin': keyword_64597, 'boxout': keyword_64599}
        # Getting the type of 'BboxTransform' (line 823)
        BboxTransform_64595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 16), 'BboxTransform', False)
        # Calling BboxTransform(args, kwargs) (line 823)
        BboxTransform_call_result_64601 = invoke(stypy.reporting.localization.Localization(__file__, 823, 16), BboxTransform_64595, *[], **kwargs_64600)
        
        # Assigning a type to the variable 'trans' (line 823)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 823, 8), 'trans', BboxTransform_call_result_64601)
        
        # Assigning a Tuple to a Tuple (line 824):
        
        # Assigning a Attribute to a Name (line 824):
        # Getting the type of 'event' (line 824)
        event_64602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 15), 'event')
        # Obtaining the member 'ydata' of a type (line 824)
        ydata_64603 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 824, 15), event_64602, 'ydata')
        # Assigning a type to the variable 'tuple_assignment_62352' (line 824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 8), 'tuple_assignment_62352', ydata_64603)
        
        # Assigning a Attribute to a Name (line 824):
        # Getting the type of 'event' (line 824)
        event_64604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 28), 'event')
        # Obtaining the member 'xdata' of a type (line 824)
        xdata_64605 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 824, 28), event_64604, 'xdata')
        # Assigning a type to the variable 'tuple_assignment_62353' (line 824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 8), 'tuple_assignment_62353', xdata_64605)
        
        # Assigning a Name to a Name (line 824):
        # Getting the type of 'tuple_assignment_62352' (line 824)
        tuple_assignment_62352_64606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 8), 'tuple_assignment_62352')
        # Assigning a type to the variable 'y' (line 824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 8), 'y', tuple_assignment_62352_64606)
        
        # Assigning a Name to a Name (line 824):
        # Getting the type of 'tuple_assignment_62353' (line 824)
        tuple_assignment_62353_64607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 824, 8), 'tuple_assignment_62353')
        # Assigning a type to the variable 'x' (line 824)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 824, 11), 'x', tuple_assignment_62353_64607)
        
        # Assigning a Call to a Tuple (line 825):
        
        # Assigning a Call to a Name:
        
        # Call to astype(...): (line 825)
        # Processing the call arguments (line 825)
        # Getting the type of 'int' (line 825)
        int_64616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 52), 'int', False)
        # Processing the call keyword arguments (line 825)
        kwargs_64617 = {}
        
        # Call to transform_point(...): (line 825)
        # Processing the call arguments (line 825)
        
        # Obtaining an instance of the builtin type 'list' (line 825)
        list_64610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 37), 'list')
        # Adding type elements to the builtin type 'list' instance (line 825)
        # Adding element type (line 825)
        # Getting the type of 'y' (line 825)
        y_64611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 38), 'y', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 825, 37), list_64610, y_64611)
        # Adding element type (line 825)
        # Getting the type of 'x' (line 825)
        x_64612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 41), 'x', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 825, 37), list_64610, x_64612)
        
        # Processing the call keyword arguments (line 825)
        kwargs_64613 = {}
        # Getting the type of 'trans' (line 825)
        trans_64608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 15), 'trans', False)
        # Obtaining the member 'transform_point' of a type (line 825)
        transform_point_64609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 15), trans_64608, 'transform_point')
        # Calling transform_point(args, kwargs) (line 825)
        transform_point_call_result_64614 = invoke(stypy.reporting.localization.Localization(__file__, 825, 15), transform_point_64609, *[list_64610], **kwargs_64613)
        
        # Obtaining the member 'astype' of a type (line 825)
        astype_64615 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 15), transform_point_call_result_64614, 'astype')
        # Calling astype(args, kwargs) (line 825)
        astype_call_result_64618 = invoke(stypy.reporting.localization.Localization(__file__, 825, 15), astype_64615, *[int_64616], **kwargs_64617)
        
        # Assigning a type to the variable 'call_assignment_62354' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_62354', astype_call_result_64618)
        
        # Assigning a Call to a Name (line 825):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_64621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 8), 'int')
        # Processing the call keyword arguments
        kwargs_64622 = {}
        # Getting the type of 'call_assignment_62354' (line 825)
        call_assignment_62354_64619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_62354', False)
        # Obtaining the member '__getitem__' of a type (line 825)
        getitem___64620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 8), call_assignment_62354_64619, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_64623 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___64620, *[int_64621], **kwargs_64622)
        
        # Assigning a type to the variable 'call_assignment_62355' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_62355', getitem___call_result_64623)
        
        # Assigning a Name to a Name (line 825):
        # Getting the type of 'call_assignment_62355' (line 825)
        call_assignment_62355_64624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_62355')
        # Assigning a type to the variable 'i' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'i', call_assignment_62355_64624)
        
        # Assigning a Call to a Name (line 825):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_64627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 825, 8), 'int')
        # Processing the call keyword arguments
        kwargs_64628 = {}
        # Getting the type of 'call_assignment_62354' (line 825)
        call_assignment_62354_64625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_62354', False)
        # Obtaining the member '__getitem__' of a type (line 825)
        getitem___64626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 825, 8), call_assignment_62354_64625, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_64629 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___64626, *[int_64627], **kwargs_64628)
        
        # Assigning a type to the variable 'call_assignment_62356' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_62356', getitem___call_result_64629)
        
        # Assigning a Name to a Name (line 825):
        # Getting the type of 'call_assignment_62356' (line 825)
        call_assignment_62356_64630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 8), 'call_assignment_62356')
        # Assigning a type to the variable 'j' (line 825)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 11), 'j', call_assignment_62356_64630)
        
        
        # Evaluating a boolean operation
        
        
        int_64631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 16), 'int')
        # Getting the type of 'i' (line 827)
        i_64632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 21), 'i')
        # Applying the binary operator '<=' (line 827)
        result_le_64633 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 16), '<=', int_64631, i_64632)
        
        # Obtaining the type of the subscript
        int_64634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 35), 'int')
        # Getting the type of 'arr' (line 827)
        arr_64635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 25), 'arr')
        # Obtaining the member 'shape' of a type (line 827)
        shape_64636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 25), arr_64635, 'shape')
        # Obtaining the member '__getitem__' of a type (line 827)
        getitem___64637 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 25), shape_64636, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 827)
        subscript_call_result_64638 = invoke(stypy.reporting.localization.Localization(__file__, 827, 25), getitem___64637, int_64634)
        
        # Applying the binary operator '<' (line 827)
        result_lt_64639 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 16), '<', i_64632, subscript_call_result_64638)
        # Applying the binary operator '&' (line 827)
        result_and__64640 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 16), '&', result_le_64633, result_lt_64639)
        
        # Applying the 'not' unary operator (line 827)
        result_not__64641 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 11), 'not', result_and__64640)
        
        
        
        int_64642 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 47), 'int')
        # Getting the type of 'j' (line 827)
        j_64643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 52), 'j')
        # Applying the binary operator '<=' (line 827)
        result_le_64644 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 47), '<=', int_64642, j_64643)
        
        # Obtaining the type of the subscript
        int_64645 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 827, 66), 'int')
        # Getting the type of 'arr' (line 827)
        arr_64646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 827, 56), 'arr')
        # Obtaining the member 'shape' of a type (line 827)
        shape_64647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 56), arr_64646, 'shape')
        # Obtaining the member '__getitem__' of a type (line 827)
        getitem___64648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 827, 56), shape_64647, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 827)
        subscript_call_result_64649 = invoke(stypy.reporting.localization.Localization(__file__, 827, 56), getitem___64648, int_64645)
        
        # Applying the binary operator '<' (line 827)
        result_lt_64650 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 47), '<', j_64643, subscript_call_result_64649)
        # Applying the binary operator '&' (line 827)
        result_and__64651 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 47), '&', result_le_64644, result_lt_64650)
        
        # Applying the 'not' unary operator (line 827)
        result_not__64652 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 42), 'not', result_and__64651)
        
        # Applying the binary operator 'or' (line 827)
        result_or_keyword_64653 = python_operator(stypy.reporting.localization.Localization(__file__, 827, 11), 'or', result_not__64641, result_not__64652)
        
        # Testing the type of an if condition (line 827)
        if_condition_64654 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 827, 8), result_or_keyword_64653)
        # Assigning a type to the variable 'if_condition_64654' (line 827)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 827, 8), 'if_condition_64654', if_condition_64654)
        # SSA begins for if statement (line 827)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'None' (line 828)
        None_64655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 828, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 828)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 828, 12), 'stypy_return_type', None_64655)
        # SSA branch for the else part of an if statement (line 827)
        module_type_store.open_ssa_branch('else')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 830)
        tuple_64656 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, 23), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 830)
        # Adding element type (line 830)
        # Getting the type of 'i' (line 830)
        i_64657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 23), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 830, 23), tuple_64656, i_64657)
        # Adding element type (line 830)
        # Getting the type of 'j' (line 830)
        j_64658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 26), 'j')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 830, 23), tuple_64656, j_64658)
        
        # Getting the type of 'arr' (line 830)
        arr_64659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 830, 19), 'arr')
        # Obtaining the member '__getitem__' of a type (line 830)
        getitem___64660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 830, 19), arr_64659, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 830)
        subscript_call_result_64661 = invoke(stypy.reporting.localization.Localization(__file__, 830, 19), getitem___64660, tuple_64656)
        
        # Assigning a type to the variable 'stypy_return_type' (line 830)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 830, 12), 'stypy_return_type', subscript_call_result_64661)
        # SSA join for if statement (line 827)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_cursor_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_cursor_data' in the type store
        # Getting the type of 'stypy_return_type' (line 815)
        stypy_return_type_64662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 815, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64662)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_cursor_data'
        return stypy_return_type_64662


# Assigning a type to the variable 'AxesImage' (line 716)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 716, 0), 'AxesImage', AxesImage)
# Declaration of the 'NonUniformImage' class
# Getting the type of 'AxesImage' (line 833)
AxesImage_64663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 833, 22), 'AxesImage')

class NonUniformImage(AxesImage_64663, ):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 834, 4, False)
        # Assigning a type to the variable 'self' (line 835)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 835, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NonUniformImage.__init__', ['ax'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_64664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 839, (-1)), 'unicode', u"\n        kwargs are identical to those for AxesImage, except\n        that 'nearest' and 'bilinear' are the only supported 'interpolation'\n        options.\n        ")
        
        # Assigning a Call to a Name (line 840):
        
        # Assigning a Call to a Name (line 840):
        
        # Call to pop(...): (line 840)
        # Processing the call arguments (line 840)
        unicode_64667 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 28), 'unicode', u'interpolation')
        unicode_64668 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 840, 45), 'unicode', u'nearest')
        # Processing the call keyword arguments (line 840)
        kwargs_64669 = {}
        # Getting the type of 'kwargs' (line 840)
        kwargs_64665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 840, 17), 'kwargs', False)
        # Obtaining the member 'pop' of a type (line 840)
        pop_64666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 840, 17), kwargs_64665, 'pop')
        # Calling pop(args, kwargs) (line 840)
        pop_call_result_64670 = invoke(stypy.reporting.localization.Localization(__file__, 840, 17), pop_64666, *[unicode_64667, unicode_64668], **kwargs_64669)
        
        # Assigning a type to the variable 'interp' (line 840)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 840, 8), 'interp', pop_call_result_64670)
        
        # Call to __init__(...): (line 841)
        # Processing the call arguments (line 841)
        # Getting the type of 'ax' (line 841)
        ax_64677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 46), 'ax', False)
        # Processing the call keyword arguments (line 841)
        # Getting the type of 'kwargs' (line 841)
        kwargs_64678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 52), 'kwargs', False)
        kwargs_64679 = {'kwargs_64678': kwargs_64678}
        
        # Call to super(...): (line 841)
        # Processing the call arguments (line 841)
        # Getting the type of 'NonUniformImage' (line 841)
        NonUniformImage_64672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 14), 'NonUniformImage', False)
        # Getting the type of 'self' (line 841)
        self_64673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 31), 'self', False)
        # Processing the call keyword arguments (line 841)
        kwargs_64674 = {}
        # Getting the type of 'super' (line 841)
        super_64671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 841, 8), 'super', False)
        # Calling super(args, kwargs) (line 841)
        super_call_result_64675 = invoke(stypy.reporting.localization.Localization(__file__, 841, 8), super_64671, *[NonUniformImage_64672, self_64673], **kwargs_64674)
        
        # Obtaining the member '__init__' of a type (line 841)
        init___64676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 841, 8), super_call_result_64675, '__init__')
        # Calling __init__(args, kwargs) (line 841)
        init___call_result_64680 = invoke(stypy.reporting.localization.Localization(__file__, 841, 8), init___64676, *[ax_64677], **kwargs_64679)
        
        
        # Call to set_interpolation(...): (line 842)
        # Processing the call arguments (line 842)
        # Getting the type of 'interp' (line 842)
        interp_64683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 31), 'interp', False)
        # Processing the call keyword arguments (line 842)
        kwargs_64684 = {}
        # Getting the type of 'self' (line 842)
        self_64681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 842, 8), 'self', False)
        # Obtaining the member 'set_interpolation' of a type (line 842)
        set_interpolation_64682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 842, 8), self_64681, 'set_interpolation')
        # Calling set_interpolation(args, kwargs) (line 842)
        set_interpolation_call_result_64685 = invoke(stypy.reporting.localization.Localization(__file__, 842, 8), set_interpolation_64682, *[interp_64683], **kwargs_64684)
        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def _check_unsampled_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_check_unsampled_image'
        module_type_store = module_type_store.open_function_context('_check_unsampled_image', 844, 4, False)
        # Assigning a type to the variable 'self' (line 845)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 845, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NonUniformImage._check_unsampled_image.__dict__.__setitem__('stypy_localization', localization)
        NonUniformImage._check_unsampled_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NonUniformImage._check_unsampled_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        NonUniformImage._check_unsampled_image.__dict__.__setitem__('stypy_function_name', 'NonUniformImage._check_unsampled_image')
        NonUniformImage._check_unsampled_image.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        NonUniformImage._check_unsampled_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        NonUniformImage._check_unsampled_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NonUniformImage._check_unsampled_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        NonUniformImage._check_unsampled_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        NonUniformImage._check_unsampled_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NonUniformImage._check_unsampled_image.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NonUniformImage._check_unsampled_image', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_check_unsampled_image', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_check_unsampled_image(...)' code ##################

        unicode_64686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 847, (-1)), 'unicode', u'\n        return False. Do not use unsampled image.\n        ')
        # Getting the type of 'False' (line 848)
        False_64687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 848)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 848, 8), 'stypy_return_type', False_64687)
        
        # ################# End of '_check_unsampled_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_check_unsampled_image' in the type store
        # Getting the type of 'stypy_return_type' (line 844)
        stypy_return_type_64688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 844, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64688)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_check_unsampled_image'
        return stypy_return_type_64688


    @norecursion
    def make_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_64689 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 850, 49), 'float')
        # Getting the type of 'False' (line 850)
        False_64690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 64), 'False')
        defaults = [float_64689, False_64690]
        # Create a new context for function 'make_image'
        module_type_store = module_type_store.open_function_context('make_image', 850, 4, False)
        # Assigning a type to the variable 'self' (line 851)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 851, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NonUniformImage.make_image.__dict__.__setitem__('stypy_localization', localization)
        NonUniformImage.make_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NonUniformImage.make_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        NonUniformImage.make_image.__dict__.__setitem__('stypy_function_name', 'NonUniformImage.make_image')
        NonUniformImage.make_image.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'magnification', 'unsampled'])
        NonUniformImage.make_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        NonUniformImage.make_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NonUniformImage.make_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        NonUniformImage.make_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        NonUniformImage.make_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NonUniformImage.make_image.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NonUniformImage.make_image', ['renderer', 'magnification', 'unsampled'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'make_image', localization, ['renderer', 'magnification', 'unsampled'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'make_image(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 851)
        # Getting the type of 'self' (line 851)
        self_64691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 11), 'self')
        # Obtaining the member '_A' of a type (line 851)
        _A_64692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 851, 11), self_64691, '_A')
        # Getting the type of 'None' (line 851)
        None_64693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 851, 22), 'None')
        
        (may_be_64694, more_types_in_union_64695) = may_be_none(_A_64692, None_64693)

        if may_be_64694:

            if more_types_in_union_64695:
                # Runtime conditional SSA (line 851)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to RuntimeError(...): (line 852)
            # Processing the call arguments (line 852)
            unicode_64697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 852, 31), 'unicode', u'You must first set the image array')
            # Processing the call keyword arguments (line 852)
            kwargs_64698 = {}
            # Getting the type of 'RuntimeError' (line 852)
            RuntimeError_64696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 852, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 852)
            RuntimeError_call_result_64699 = invoke(stypy.reporting.localization.Localization(__file__, 852, 18), RuntimeError_64696, *[unicode_64697], **kwargs_64698)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 852, 12), RuntimeError_call_result_64699, 'raise parameter', BaseException)

            if more_types_in_union_64695:
                # SSA join for if statement (line 851)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'unsampled' (line 854)
        unsampled_64700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 854, 11), 'unsampled')
        # Testing the type of an if condition (line 854)
        if_condition_64701 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 854, 8), unsampled_64700)
        # Assigning a type to the variable 'if_condition_64701' (line 854)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 854, 8), 'if_condition_64701', if_condition_64701)
        # SSA begins for if statement (line 854)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 855)
        # Processing the call arguments (line 855)
        unicode_64703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 855, 29), 'unicode', u'unsampled not supported on NonUniformImage')
        # Processing the call keyword arguments (line 855)
        kwargs_64704 = {}
        # Getting the type of 'ValueError' (line 855)
        ValueError_64702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 855)
        ValueError_call_result_64705 = invoke(stypy.reporting.localization.Localization(__file__, 855, 18), ValueError_64702, *[unicode_64703], **kwargs_64704)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 855, 12), ValueError_call_result_64705, 'raise parameter', BaseException)
        # SSA join for if statement (line 854)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Name (line 857):
        
        # Assigning a Attribute to a Name (line 857):
        # Getting the type of 'self' (line 857)
        self_64706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 857, 12), 'self')
        # Obtaining the member '_A' of a type (line 857)
        _A_64707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 857, 12), self_64706, '_A')
        # Assigning a type to the variable 'A' (line 857)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 857, 8), 'A', _A_64707)
        
        
        # Getting the type of 'A' (line 858)
        A_64708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 858, 11), 'A')
        # Obtaining the member 'ndim' of a type (line 858)
        ndim_64709 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 858, 11), A_64708, 'ndim')
        int_64710 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 858, 21), 'int')
        # Applying the binary operator '==' (line 858)
        result_eq_64711 = python_operator(stypy.reporting.localization.Localization(__file__, 858, 11), '==', ndim_64709, int_64710)
        
        # Testing the type of an if condition (line 858)
        if_condition_64712 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 858, 8), result_eq_64711)
        # Assigning a type to the variable 'if_condition_64712' (line 858)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 858, 8), 'if_condition_64712', if_condition_64712)
        # SSA begins for if statement (line 858)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'A' (line 859)
        A_64713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 15), 'A')
        # Obtaining the member 'dtype' of a type (line 859)
        dtype_64714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 15), A_64713, 'dtype')
        # Getting the type of 'np' (line 859)
        np_64715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 859, 26), 'np')
        # Obtaining the member 'uint8' of a type (line 859)
        uint8_64716 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 859, 26), np_64715, 'uint8')
        # Applying the binary operator '!=' (line 859)
        result_ne_64717 = python_operator(stypy.reporting.localization.Localization(__file__, 859, 15), '!=', dtype_64714, uint8_64716)
        
        # Testing the type of an if condition (line 859)
        if_condition_64718 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 859, 12), result_ne_64717)
        # Assigning a type to the variable 'if_condition_64718' (line 859)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 859, 12), 'if_condition_64718', if_condition_64718)
        # SSA begins for if statement (line 859)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 860):
        
        # Assigning a Call to a Name (line 860):
        
        # Call to to_rgba(...): (line 860)
        # Processing the call arguments (line 860)
        # Getting the type of 'A' (line 860)
        A_64721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 33), 'A', False)
        # Processing the call keyword arguments (line 860)
        # Getting the type of 'True' (line 860)
        True_64722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 42), 'True', False)
        keyword_64723 = True_64722
        kwargs_64724 = {'bytes': keyword_64723}
        # Getting the type of 'self' (line 860)
        self_64719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 860, 20), 'self', False)
        # Obtaining the member 'to_rgba' of a type (line 860)
        to_rgba_64720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 860, 20), self_64719, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 860)
        to_rgba_call_result_64725 = invoke(stypy.reporting.localization.Localization(__file__, 860, 20), to_rgba_64720, *[A_64721], **kwargs_64724)
        
        # Assigning a type to the variable 'A' (line 860)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 860, 16), 'A', to_rgba_call_result_64725)
        
        # Assigning a Call to a Attribute (line 861):
        
        # Assigning a Call to a Attribute (line 861):
        
        # Call to is_gray(...): (line 861)
        # Processing the call keyword arguments (line 861)
        kwargs_64729 = {}
        # Getting the type of 'self' (line 861)
        self_64726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 36), 'self', False)
        # Obtaining the member 'cmap' of a type (line 861)
        cmap_64727 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 36), self_64726, 'cmap')
        # Obtaining the member 'is_gray' of a type (line 861)
        is_gray_64728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 36), cmap_64727, 'is_gray')
        # Calling is_gray(args, kwargs) (line 861)
        is_gray_call_result_64730 = invoke(stypy.reporting.localization.Localization(__file__, 861, 36), is_gray_64728, *[], **kwargs_64729)
        
        # Getting the type of 'self' (line 861)
        self_64731 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 861, 16), 'self')
        # Setting the type of the member 'is_grayscale' of a type (line 861)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 861, 16), self_64731, 'is_grayscale', is_gray_call_result_64730)
        # SSA branch for the else part of an if statement (line 859)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 863):
        
        # Assigning a Call to a Name (line 863):
        
        # Call to repeat(...): (line 863)
        # Processing the call arguments (line 863)
        
        # Obtaining the type of the subscript
        slice_64734 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 863, 30), None, None, None)
        slice_64735 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 863, 30), None, None, None)
        # Getting the type of 'np' (line 863)
        np_64736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 38), 'np', False)
        # Obtaining the member 'newaxis' of a type (line 863)
        newaxis_64737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 38), np_64736, 'newaxis')
        # Getting the type of 'A' (line 863)
        A_64738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 30), 'A', False)
        # Obtaining the member '__getitem__' of a type (line 863)
        getitem___64739 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 30), A_64738, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 863)
        subscript_call_result_64740 = invoke(stypy.reporting.localization.Localization(__file__, 863, 30), getitem___64739, (slice_64734, slice_64735, newaxis_64737))
        
        int_64741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, 51), 'int')
        int_64742 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 863, 54), 'int')
        # Processing the call keyword arguments (line 863)
        kwargs_64743 = {}
        # Getting the type of 'np' (line 863)
        np_64732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 863, 20), 'np', False)
        # Obtaining the member 'repeat' of a type (line 863)
        repeat_64733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 863, 20), np_64732, 'repeat')
        # Calling repeat(args, kwargs) (line 863)
        repeat_call_result_64744 = invoke(stypy.reporting.localization.Localization(__file__, 863, 20), repeat_64733, *[subscript_call_result_64740, int_64741, int_64742], **kwargs_64743)
        
        # Assigning a type to the variable 'A' (line 863)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 863, 16), 'A', repeat_call_result_64744)
        
        # Assigning a Num to a Subscript (line 864):
        
        # Assigning a Num to a Subscript (line 864):
        int_64745 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 864, 29), 'int')
        # Getting the type of 'A' (line 864)
        A_64746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 864, 16), 'A')
        slice_64747 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 864, 16), None, None, None)
        slice_64748 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 864, 16), None, None, None)
        int_64749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 864, 24), 'int')
        # Storing an element on a container (line 864)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 864, 16), A_64746, ((slice_64747, slice_64748, int_64749), int_64745))
        
        # Assigning a Name to a Attribute (line 865):
        
        # Assigning a Name to a Attribute (line 865):
        # Getting the type of 'True' (line 865)
        True_64750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 36), 'True')
        # Getting the type of 'self' (line 865)
        self_64751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 865, 16), 'self')
        # Setting the type of the member 'is_grayscale' of a type (line 865)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 865, 16), self_64751, 'is_grayscale', True_64750)
        # SSA join for if statement (line 859)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 858)
        module_type_store.open_ssa_branch('else')
        
        
        # Getting the type of 'A' (line 867)
        A_64752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 15), 'A')
        # Obtaining the member 'dtype' of a type (line 867)
        dtype_64753 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 15), A_64752, 'dtype')
        # Getting the type of 'np' (line 867)
        np_64754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 867, 26), 'np')
        # Obtaining the member 'uint8' of a type (line 867)
        uint8_64755 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 867, 26), np_64754, 'uint8')
        # Applying the binary operator '!=' (line 867)
        result_ne_64756 = python_operator(stypy.reporting.localization.Localization(__file__, 867, 15), '!=', dtype_64753, uint8_64755)
        
        # Testing the type of an if condition (line 867)
        if_condition_64757 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 867, 12), result_ne_64756)
        # Assigning a type to the variable 'if_condition_64757' (line 867)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 867, 12), 'if_condition_64757', if_condition_64757)
        # SSA begins for if statement (line 867)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 868):
        
        # Assigning a Call to a Name (line 868):
        
        # Call to astype(...): (line 868)
        # Processing the call arguments (line 868)
        # Getting the type of 'np' (line 868)
        np_64762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 35), 'np', False)
        # Obtaining the member 'uint8' of a type (line 868)
        uint8_64763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 35), np_64762, 'uint8')
        # Processing the call keyword arguments (line 868)
        kwargs_64764 = {}
        int_64758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 868, 21), 'int')
        # Getting the type of 'A' (line 868)
        A_64759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 868, 25), 'A', False)
        # Applying the binary operator '*' (line 868)
        result_mul_64760 = python_operator(stypy.reporting.localization.Localization(__file__, 868, 21), '*', int_64758, A_64759)
        
        # Obtaining the member 'astype' of a type (line 868)
        astype_64761 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 868, 21), result_mul_64760, 'astype')
        # Calling astype(args, kwargs) (line 868)
        astype_call_result_64765 = invoke(stypy.reporting.localization.Localization(__file__, 868, 21), astype_64761, *[uint8_64763], **kwargs_64764)
        
        # Assigning a type to the variable 'A' (line 868)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 868, 16), 'A', astype_call_result_64765)
        # SSA join for if statement (line 867)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_64766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, 23), 'int')
        # Getting the type of 'A' (line 869)
        A_64767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 869, 15), 'A')
        # Obtaining the member 'shape' of a type (line 869)
        shape_64768 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 869, 15), A_64767, 'shape')
        # Obtaining the member '__getitem__' of a type (line 869)
        getitem___64769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 869, 15), shape_64768, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 869)
        subscript_call_result_64770 = invoke(stypy.reporting.localization.Localization(__file__, 869, 15), getitem___64769, int_64766)
        
        int_64771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 869, 29), 'int')
        # Applying the binary operator '==' (line 869)
        result_eq_64772 = python_operator(stypy.reporting.localization.Localization(__file__, 869, 15), '==', subscript_call_result_64770, int_64771)
        
        # Testing the type of an if condition (line 869)
        if_condition_64773 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 869, 12), result_eq_64772)
        # Assigning a type to the variable 'if_condition_64773' (line 869)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 869, 12), 'if_condition_64773', if_condition_64773)
        # SSA begins for if statement (line 869)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 870):
        
        # Assigning a Call to a Name (line 870):
        
        # Call to zeros(...): (line 870)
        # Processing the call arguments (line 870)
        
        # Call to tuple(...): (line 870)
        # Processing the call arguments (line 870)
        
        # Call to list(...): (line 870)
        # Processing the call arguments (line 870)
        
        # Obtaining the type of the subscript
        int_64778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 48), 'int')
        int_64779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 50), 'int')
        slice_64780 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 870, 40), int_64778, int_64779, None)
        # Getting the type of 'A' (line 870)
        A_64781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 40), 'A', False)
        # Obtaining the member 'shape' of a type (line 870)
        shape_64782 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 40), A_64781, 'shape')
        # Obtaining the member '__getitem__' of a type (line 870)
        getitem___64783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 40), shape_64782, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 870)
        subscript_call_result_64784 = invoke(stypy.reporting.localization.Localization(__file__, 870, 40), getitem___64783, slice_64780)
        
        # Processing the call keyword arguments (line 870)
        kwargs_64785 = {}
        # Getting the type of 'list' (line 870)
        list_64777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 35), 'list', False)
        # Calling list(args, kwargs) (line 870)
        list_call_result_64786 = invoke(stypy.reporting.localization.Localization(__file__, 870, 35), list_64777, *[subscript_call_result_64784], **kwargs_64785)
        
        
        # Obtaining an instance of the builtin type 'list' (line 870)
        list_64787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 56), 'list')
        # Adding type elements to the builtin type 'list' instance (line 870)
        # Adding element type (line 870)
        int_64788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 870, 57), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 870, 56), list_64787, int_64788)
        
        # Applying the binary operator '+' (line 870)
        result_add_64789 = python_operator(stypy.reporting.localization.Localization(__file__, 870, 35), '+', list_call_result_64786, list_64787)
        
        # Processing the call keyword arguments (line 870)
        kwargs_64790 = {}
        # Getting the type of 'tuple' (line 870)
        tuple_64776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 29), 'tuple', False)
        # Calling tuple(args, kwargs) (line 870)
        tuple_call_result_64791 = invoke(stypy.reporting.localization.Localization(__file__, 870, 29), tuple_64776, *[result_add_64789], **kwargs_64790)
        
        # Getting the type of 'np' (line 870)
        np_64792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 62), 'np', False)
        # Obtaining the member 'uint8' of a type (line 870)
        uint8_64793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 62), np_64792, 'uint8')
        # Processing the call keyword arguments (line 870)
        kwargs_64794 = {}
        # Getting the type of 'np' (line 870)
        np_64774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 870, 20), 'np', False)
        # Obtaining the member 'zeros' of a type (line 870)
        zeros_64775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 870, 20), np_64774, 'zeros')
        # Calling zeros(args, kwargs) (line 870)
        zeros_call_result_64795 = invoke(stypy.reporting.localization.Localization(__file__, 870, 20), zeros_64775, *[tuple_call_result_64791, uint8_64793], **kwargs_64794)
        
        # Assigning a type to the variable 'B' (line 870)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 870, 16), 'B', zeros_call_result_64795)
        
        # Assigning a Name to a Subscript (line 871):
        
        # Assigning a Name to a Subscript (line 871):
        # Getting the type of 'A' (line 871)
        A_64796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 31), 'A')
        # Getting the type of 'B' (line 871)
        B_64797 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 871, 16), 'B')
        slice_64798 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 871, 16), None, None, None)
        slice_64799 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 871, 16), None, None, None)
        int_64800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 24), 'int')
        int_64801 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 871, 26), 'int')
        slice_64802 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 871, 16), int_64800, int_64801, None)
        # Storing an element on a container (line 871)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 871, 16), B_64797, ((slice_64798, slice_64799, slice_64802), A_64796))
        
        # Assigning a Num to a Subscript (line 872):
        
        # Assigning a Num to a Subscript (line 872):
        int_64803 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 872, 29), 'int')
        # Getting the type of 'B' (line 872)
        B_64804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 872, 16), 'B')
        slice_64805 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 872, 16), None, None, None)
        slice_64806 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 872, 16), None, None, None)
        int_64807 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 872, 24), 'int')
        # Storing an element on a container (line 872)
        set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 872, 16), B_64804, ((slice_64805, slice_64806, int_64807), int_64803))
        
        # Assigning a Name to a Name (line 873):
        
        # Assigning a Name to a Name (line 873):
        # Getting the type of 'B' (line 873)
        B_64808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 873, 20), 'B')
        # Assigning a type to the variable 'A' (line 873)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 873, 16), 'A', B_64808)
        # SSA join for if statement (line 869)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 874):
        
        # Assigning a Name to a Attribute (line 874):
        # Getting the type of 'False' (line 874)
        False_64809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 32), 'False')
        # Getting the type of 'self' (line 874)
        self_64810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 874, 12), 'self')
        # Setting the type of the member 'is_grayscale' of a type (line 874)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 874, 12), self_64810, 'is_grayscale', False_64809)
        # SSA join for if statement (line 858)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Attribute to a Tuple (line 876):
        
        # Assigning a Subscript to a Name (line 876):
        
        # Obtaining the type of the subscript
        int_64811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 876, 8), 'int')
        # Getting the type of 'self' (line 876)
        self_64812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 36), 'self')
        # Obtaining the member 'axes' of a type (line 876)
        axes_64813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 36), self_64812, 'axes')
        # Obtaining the member 'viewLim' of a type (line 876)
        viewLim_64814 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 36), axes_64813, 'viewLim')
        # Obtaining the member 'bounds' of a type (line 876)
        bounds_64815 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 36), viewLim_64814, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 876)
        getitem___64816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 8), bounds_64815, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 876)
        subscript_call_result_64817 = invoke(stypy.reporting.localization.Localization(__file__, 876, 8), getitem___64816, int_64811)
        
        # Assigning a type to the variable 'tuple_var_assignment_62357' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'tuple_var_assignment_62357', subscript_call_result_64817)
        
        # Assigning a Subscript to a Name (line 876):
        
        # Obtaining the type of the subscript
        int_64818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 876, 8), 'int')
        # Getting the type of 'self' (line 876)
        self_64819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 36), 'self')
        # Obtaining the member 'axes' of a type (line 876)
        axes_64820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 36), self_64819, 'axes')
        # Obtaining the member 'viewLim' of a type (line 876)
        viewLim_64821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 36), axes_64820, 'viewLim')
        # Obtaining the member 'bounds' of a type (line 876)
        bounds_64822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 36), viewLim_64821, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 876)
        getitem___64823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 8), bounds_64822, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 876)
        subscript_call_result_64824 = invoke(stypy.reporting.localization.Localization(__file__, 876, 8), getitem___64823, int_64818)
        
        # Assigning a type to the variable 'tuple_var_assignment_62358' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'tuple_var_assignment_62358', subscript_call_result_64824)
        
        # Assigning a Subscript to a Name (line 876):
        
        # Obtaining the type of the subscript
        int_64825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 876, 8), 'int')
        # Getting the type of 'self' (line 876)
        self_64826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 36), 'self')
        # Obtaining the member 'axes' of a type (line 876)
        axes_64827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 36), self_64826, 'axes')
        # Obtaining the member 'viewLim' of a type (line 876)
        viewLim_64828 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 36), axes_64827, 'viewLim')
        # Obtaining the member 'bounds' of a type (line 876)
        bounds_64829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 36), viewLim_64828, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 876)
        getitem___64830 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 8), bounds_64829, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 876)
        subscript_call_result_64831 = invoke(stypy.reporting.localization.Localization(__file__, 876, 8), getitem___64830, int_64825)
        
        # Assigning a type to the variable 'tuple_var_assignment_62359' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'tuple_var_assignment_62359', subscript_call_result_64831)
        
        # Assigning a Subscript to a Name (line 876):
        
        # Obtaining the type of the subscript
        int_64832 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 876, 8), 'int')
        # Getting the type of 'self' (line 876)
        self_64833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 36), 'self')
        # Obtaining the member 'axes' of a type (line 876)
        axes_64834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 36), self_64833, 'axes')
        # Obtaining the member 'viewLim' of a type (line 876)
        viewLim_64835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 36), axes_64834, 'viewLim')
        # Obtaining the member 'bounds' of a type (line 876)
        bounds_64836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 36), viewLim_64835, 'bounds')
        # Obtaining the member '__getitem__' of a type (line 876)
        getitem___64837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 876, 8), bounds_64836, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 876)
        subscript_call_result_64838 = invoke(stypy.reporting.localization.Localization(__file__, 876, 8), getitem___64837, int_64832)
        
        # Assigning a type to the variable 'tuple_var_assignment_62360' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'tuple_var_assignment_62360', subscript_call_result_64838)
        
        # Assigning a Name to a Name (line 876):
        # Getting the type of 'tuple_var_assignment_62357' (line 876)
        tuple_var_assignment_62357_64839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'tuple_var_assignment_62357')
        # Assigning a type to the variable 'x0' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'x0', tuple_var_assignment_62357_64839)
        
        # Assigning a Name to a Name (line 876):
        # Getting the type of 'tuple_var_assignment_62358' (line 876)
        tuple_var_assignment_62358_64840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'tuple_var_assignment_62358')
        # Assigning a type to the variable 'y0' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 12), 'y0', tuple_var_assignment_62358_64840)
        
        # Assigning a Name to a Name (line 876):
        # Getting the type of 'tuple_var_assignment_62359' (line 876)
        tuple_var_assignment_62359_64841 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'tuple_var_assignment_62359')
        # Assigning a type to the variable 'v_width' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 16), 'v_width', tuple_var_assignment_62359_64841)
        
        # Assigning a Name to a Name (line 876):
        # Getting the type of 'tuple_var_assignment_62360' (line 876)
        tuple_var_assignment_62360_64842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 876, 8), 'tuple_var_assignment_62360')
        # Assigning a type to the variable 'v_height' (line 876)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 876, 25), 'v_height', tuple_var_assignment_62360_64842)
        
        # Assigning a Attribute to a Tuple (line 877):
        
        # Assigning a Subscript to a Name (line 877):
        
        # Obtaining the type of the subscript
        int_64843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 8), 'int')
        # Getting the type of 'self' (line 877)
        self_64844 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 21), 'self')
        # Obtaining the member 'axes' of a type (line 877)
        axes_64845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 21), self_64844, 'axes')
        # Obtaining the member 'bbox' of a type (line 877)
        bbox_64846 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 21), axes_64845, 'bbox')
        # Obtaining the member 'extents' of a type (line 877)
        extents_64847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 21), bbox_64846, 'extents')
        # Obtaining the member '__getitem__' of a type (line 877)
        getitem___64848 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 8), extents_64847, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 877)
        subscript_call_result_64849 = invoke(stypy.reporting.localization.Localization(__file__, 877, 8), getitem___64848, int_64843)
        
        # Assigning a type to the variable 'tuple_var_assignment_62361' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'tuple_var_assignment_62361', subscript_call_result_64849)
        
        # Assigning a Subscript to a Name (line 877):
        
        # Obtaining the type of the subscript
        int_64850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 8), 'int')
        # Getting the type of 'self' (line 877)
        self_64851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 21), 'self')
        # Obtaining the member 'axes' of a type (line 877)
        axes_64852 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 21), self_64851, 'axes')
        # Obtaining the member 'bbox' of a type (line 877)
        bbox_64853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 21), axes_64852, 'bbox')
        # Obtaining the member 'extents' of a type (line 877)
        extents_64854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 21), bbox_64853, 'extents')
        # Obtaining the member '__getitem__' of a type (line 877)
        getitem___64855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 8), extents_64854, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 877)
        subscript_call_result_64856 = invoke(stypy.reporting.localization.Localization(__file__, 877, 8), getitem___64855, int_64850)
        
        # Assigning a type to the variable 'tuple_var_assignment_62362' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'tuple_var_assignment_62362', subscript_call_result_64856)
        
        # Assigning a Subscript to a Name (line 877):
        
        # Obtaining the type of the subscript
        int_64857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 8), 'int')
        # Getting the type of 'self' (line 877)
        self_64858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 21), 'self')
        # Obtaining the member 'axes' of a type (line 877)
        axes_64859 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 21), self_64858, 'axes')
        # Obtaining the member 'bbox' of a type (line 877)
        bbox_64860 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 21), axes_64859, 'bbox')
        # Obtaining the member 'extents' of a type (line 877)
        extents_64861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 21), bbox_64860, 'extents')
        # Obtaining the member '__getitem__' of a type (line 877)
        getitem___64862 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 8), extents_64861, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 877)
        subscript_call_result_64863 = invoke(stypy.reporting.localization.Localization(__file__, 877, 8), getitem___64862, int_64857)
        
        # Assigning a type to the variable 'tuple_var_assignment_62363' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'tuple_var_assignment_62363', subscript_call_result_64863)
        
        # Assigning a Subscript to a Name (line 877):
        
        # Obtaining the type of the subscript
        int_64864 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 877, 8), 'int')
        # Getting the type of 'self' (line 877)
        self_64865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 21), 'self')
        # Obtaining the member 'axes' of a type (line 877)
        axes_64866 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 21), self_64865, 'axes')
        # Obtaining the member 'bbox' of a type (line 877)
        bbox_64867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 21), axes_64866, 'bbox')
        # Obtaining the member 'extents' of a type (line 877)
        extents_64868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 21), bbox_64867, 'extents')
        # Obtaining the member '__getitem__' of a type (line 877)
        getitem___64869 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 877, 8), extents_64868, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 877)
        subscript_call_result_64870 = invoke(stypy.reporting.localization.Localization(__file__, 877, 8), getitem___64869, int_64864)
        
        # Assigning a type to the variable 'tuple_var_assignment_62364' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'tuple_var_assignment_62364', subscript_call_result_64870)
        
        # Assigning a Name to a Name (line 877):
        # Getting the type of 'tuple_var_assignment_62361' (line 877)
        tuple_var_assignment_62361_64871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'tuple_var_assignment_62361')
        # Assigning a type to the variable 'l' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'l', tuple_var_assignment_62361_64871)
        
        # Assigning a Name to a Name (line 877):
        # Getting the type of 'tuple_var_assignment_62362' (line 877)
        tuple_var_assignment_62362_64872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'tuple_var_assignment_62362')
        # Assigning a type to the variable 'b' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 11), 'b', tuple_var_assignment_62362_64872)
        
        # Assigning a Name to a Name (line 877):
        # Getting the type of 'tuple_var_assignment_62363' (line 877)
        tuple_var_assignment_62363_64873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'tuple_var_assignment_62363')
        # Assigning a type to the variable 'r' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 14), 'r', tuple_var_assignment_62363_64873)
        
        # Assigning a Name to a Name (line 877):
        # Getting the type of 'tuple_var_assignment_62364' (line 877)
        tuple_var_assignment_62364_64874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 877, 8), 'tuple_var_assignment_62364')
        # Assigning a type to the variable 't' (line 877)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 877, 17), 't', tuple_var_assignment_62364_64874)
        
        # Assigning a BinOp to a Name (line 878):
        
        # Assigning a BinOp to a Name (line 878):
        
        # Call to round(...): (line 878)
        # Processing the call arguments (line 878)
        # Getting the type of 'r' (line 878)
        r_64877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 26), 'r', False)
        # Processing the call keyword arguments (line 878)
        kwargs_64878 = {}
        # Getting the type of 'np' (line 878)
        np_64875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 17), 'np', False)
        # Obtaining the member 'round' of a type (line 878)
        round_64876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 17), np_64875, 'round')
        # Calling round(args, kwargs) (line 878)
        round_call_result_64879 = invoke(stypy.reporting.localization.Localization(__file__, 878, 17), round_64876, *[r_64877], **kwargs_64878)
        
        float_64880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 878, 31), 'float')
        # Applying the binary operator '+' (line 878)
        result_add_64881 = python_operator(stypy.reporting.localization.Localization(__file__, 878, 17), '+', round_call_result_64879, float_64880)
        
        
        # Call to round(...): (line 878)
        # Processing the call arguments (line 878)
        # Getting the type of 'l' (line 878)
        l_64884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 48), 'l', False)
        # Processing the call keyword arguments (line 878)
        kwargs_64885 = {}
        # Getting the type of 'np' (line 878)
        np_64882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 878, 39), 'np', False)
        # Obtaining the member 'round' of a type (line 878)
        round_64883 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 878, 39), np_64882, 'round')
        # Calling round(args, kwargs) (line 878)
        round_call_result_64886 = invoke(stypy.reporting.localization.Localization(__file__, 878, 39), round_64883, *[l_64884], **kwargs_64885)
        
        float_64887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 878, 53), 'float')
        # Applying the binary operator '-' (line 878)
        result_sub_64888 = python_operator(stypy.reporting.localization.Localization(__file__, 878, 39), '-', round_call_result_64886, float_64887)
        
        # Applying the binary operator '-' (line 878)
        result_sub_64889 = python_operator(stypy.reporting.localization.Localization(__file__, 878, 16), '-', result_add_64881, result_sub_64888)
        
        # Assigning a type to the variable 'width' (line 878)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 878, 8), 'width', result_sub_64889)
        
        # Assigning a BinOp to a Name (line 879):
        
        # Assigning a BinOp to a Name (line 879):
        
        # Call to round(...): (line 879)
        # Processing the call arguments (line 879)
        # Getting the type of 't' (line 879)
        t_64892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 27), 't', False)
        # Processing the call keyword arguments (line 879)
        kwargs_64893 = {}
        # Getting the type of 'np' (line 879)
        np_64890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 18), 'np', False)
        # Obtaining the member 'round' of a type (line 879)
        round_64891 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 18), np_64890, 'round')
        # Calling round(args, kwargs) (line 879)
        round_call_result_64894 = invoke(stypy.reporting.localization.Localization(__file__, 879, 18), round_64891, *[t_64892], **kwargs_64893)
        
        float_64895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 879, 32), 'float')
        # Applying the binary operator '+' (line 879)
        result_add_64896 = python_operator(stypy.reporting.localization.Localization(__file__, 879, 18), '+', round_call_result_64894, float_64895)
        
        
        # Call to round(...): (line 879)
        # Processing the call arguments (line 879)
        # Getting the type of 'b' (line 879)
        b_64899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 49), 'b', False)
        # Processing the call keyword arguments (line 879)
        kwargs_64900 = {}
        # Getting the type of 'np' (line 879)
        np_64897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 879, 40), 'np', False)
        # Obtaining the member 'round' of a type (line 879)
        round_64898 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 879, 40), np_64897, 'round')
        # Calling round(args, kwargs) (line 879)
        round_call_result_64901 = invoke(stypy.reporting.localization.Localization(__file__, 879, 40), round_64898, *[b_64899], **kwargs_64900)
        
        float_64902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 879, 54), 'float')
        # Applying the binary operator '-' (line 879)
        result_sub_64903 = python_operator(stypy.reporting.localization.Localization(__file__, 879, 40), '-', round_call_result_64901, float_64902)
        
        # Applying the binary operator '-' (line 879)
        result_sub_64904 = python_operator(stypy.reporting.localization.Localization(__file__, 879, 17), '-', result_add_64896, result_sub_64903)
        
        # Assigning a type to the variable 'height' (line 879)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 879, 8), 'height', result_sub_64904)
        
        # Getting the type of 'width' (line 880)
        width_64905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 8), 'width')
        # Getting the type of 'magnification' (line 880)
        magnification_64906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 880, 17), 'magnification')
        # Applying the binary operator '*=' (line 880)
        result_imul_64907 = python_operator(stypy.reporting.localization.Localization(__file__, 880, 8), '*=', width_64905, magnification_64906)
        # Assigning a type to the variable 'width' (line 880)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 880, 8), 'width', result_imul_64907)
        
        
        # Getting the type of 'height' (line 881)
        height_64908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 8), 'height')
        # Getting the type of 'magnification' (line 881)
        magnification_64909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 881, 18), 'magnification')
        # Applying the binary operator '*=' (line 881)
        result_imul_64910 = python_operator(stypy.reporting.localization.Localization(__file__, 881, 8), '*=', height_64908, magnification_64909)
        # Assigning a type to the variable 'height' (line 881)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 881, 8), 'height', result_imul_64910)
        
        
        # Assigning a Call to a Name (line 882):
        
        # Assigning a Call to a Name (line 882):
        
        # Call to pcolor(...): (line 882)
        # Processing the call arguments (line 882)
        # Getting the type of 'self' (line 882)
        self_64913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 27), 'self', False)
        # Obtaining the member '_Ax' of a type (line 882)
        _Ax_64914 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 27), self_64913, '_Ax')
        # Getting the type of 'self' (line 882)
        self_64915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 37), 'self', False)
        # Obtaining the member '_Ay' of a type (line 882)
        _Ay_64916 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 37), self_64915, '_Ay')
        # Getting the type of 'A' (line 882)
        A_64917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 47), 'A', False)
        
        # Call to int(...): (line 883)
        # Processing the call arguments (line 883)
        # Getting the type of 'height' (line 883)
        height_64919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 31), 'height', False)
        # Processing the call keyword arguments (line 883)
        kwargs_64920 = {}
        # Getting the type of 'int' (line 883)
        int_64918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 27), 'int', False)
        # Calling int(args, kwargs) (line 883)
        int_call_result_64921 = invoke(stypy.reporting.localization.Localization(__file__, 883, 27), int_64918, *[height_64919], **kwargs_64920)
        
        
        # Call to int(...): (line 883)
        # Processing the call arguments (line 883)
        # Getting the type of 'width' (line 883)
        width_64923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 44), 'width', False)
        # Processing the call keyword arguments (line 883)
        kwargs_64924 = {}
        # Getting the type of 'int' (line 883)
        int_64922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 883, 40), 'int', False)
        # Calling int(args, kwargs) (line 883)
        int_call_result_64925 = invoke(stypy.reporting.localization.Localization(__file__, 883, 40), int_64922, *[width_64923], **kwargs_64924)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 884)
        tuple_64926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 884, 28), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 884)
        # Adding element type (line 884)
        # Getting the type of 'x0' (line 884)
        x0_64927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 28), 'x0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 884, 28), tuple_64926, x0_64927)
        # Adding element type (line 884)
        # Getting the type of 'x0' (line 884)
        x0_64928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 32), 'x0', False)
        # Getting the type of 'v_width' (line 884)
        v_width_64929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 35), 'v_width', False)
        # Applying the binary operator '+' (line 884)
        result_add_64930 = python_operator(stypy.reporting.localization.Localization(__file__, 884, 32), '+', x0_64928, v_width_64929)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 884, 28), tuple_64926, result_add_64930)
        # Adding element type (line 884)
        # Getting the type of 'y0' (line 884)
        y0_64931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 44), 'y0', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 884, 28), tuple_64926, y0_64931)
        # Adding element type (line 884)
        # Getting the type of 'y0' (line 884)
        y0_64932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 48), 'y0', False)
        # Getting the type of 'v_height' (line 884)
        v_height_64933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 884, 51), 'v_height', False)
        # Applying the binary operator '+' (line 884)
        result_add_64934 = python_operator(stypy.reporting.localization.Localization(__file__, 884, 48), '+', y0_64932, v_height_64933)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 884, 28), tuple_64926, result_add_64934)
        
        
        # Obtaining the type of the subscript
        # Getting the type of 'self' (line 885)
        self_64935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 37), 'self', False)
        # Obtaining the member '_interpolation' of a type (line 885)
        _interpolation_64936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 37), self_64935, '_interpolation')
        # Getting the type of '_interpd_' (line 885)
        _interpd__64937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 885, 27), '_interpd_', False)
        # Obtaining the member '__getitem__' of a type (line 885)
        getitem___64938 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 885, 27), _interpd__64937, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 885)
        subscript_call_result_64939 = invoke(stypy.reporting.localization.Localization(__file__, 885, 27), getitem___64938, _interpolation_64936)
        
        # Processing the call keyword arguments (line 882)
        kwargs_64940 = {}
        # Getting the type of '_image' (line 882)
        _image_64911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 882, 13), '_image', False)
        # Obtaining the member 'pcolor' of a type (line 882)
        pcolor_64912 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 882, 13), _image_64911, 'pcolor')
        # Calling pcolor(args, kwargs) (line 882)
        pcolor_call_result_64941 = invoke(stypy.reporting.localization.Localization(__file__, 882, 13), pcolor_64912, *[_Ax_64914, _Ay_64916, A_64917, int_call_result_64921, int_call_result_64925, tuple_64926, subscript_call_result_64939], **kwargs_64940)
        
        # Assigning a type to the variable 'im' (line 882)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 882, 8), 'im', pcolor_call_result_64941)
        
        # Obtaining an instance of the builtin type 'tuple' (line 887)
        tuple_64942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 887, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 887)
        # Adding element type (line 887)
        # Getting the type of 'im' (line 887)
        im_64943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 15), 'im')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 887, 15), tuple_64942, im_64943)
        # Adding element type (line 887)
        # Getting the type of 'l' (line 887)
        l_64944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 19), 'l')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 887, 15), tuple_64942, l_64944)
        # Adding element type (line 887)
        # Getting the type of 'b' (line 887)
        b_64945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 22), 'b')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 887, 15), tuple_64942, b_64945)
        # Adding element type (line 887)
        
        # Call to IdentityTransform(...): (line 887)
        # Processing the call keyword arguments (line 887)
        kwargs_64947 = {}
        # Getting the type of 'IdentityTransform' (line 887)
        IdentityTransform_64946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 887, 25), 'IdentityTransform', False)
        # Calling IdentityTransform(args, kwargs) (line 887)
        IdentityTransform_call_result_64948 = invoke(stypy.reporting.localization.Localization(__file__, 887, 25), IdentityTransform_64946, *[], **kwargs_64947)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 887, 15), tuple_64942, IdentityTransform_call_result_64948)
        
        # Assigning a type to the variable 'stypy_return_type' (line 887)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 887, 8), 'stypy_return_type', tuple_64942)
        
        # ################# End of 'make_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'make_image' in the type store
        # Getting the type of 'stypy_return_type' (line 850)
        stypy_return_type_64949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_64949)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'make_image'
        return stypy_return_type_64949


    @norecursion
    def set_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_data'
        module_type_store = module_type_store.open_function_context('set_data', 889, 4, False)
        # Assigning a type to the variable 'self' (line 890)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 890, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NonUniformImage.set_data.__dict__.__setitem__('stypy_localization', localization)
        NonUniformImage.set_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NonUniformImage.set_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        NonUniformImage.set_data.__dict__.__setitem__('stypy_function_name', 'NonUniformImage.set_data')
        NonUniformImage.set_data.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'A'])
        NonUniformImage.set_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        NonUniformImage.set_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NonUniformImage.set_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        NonUniformImage.set_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        NonUniformImage.set_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NonUniformImage.set_data.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NonUniformImage.set_data', ['x', 'y', 'A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data', localization, ['x', 'y', 'A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data(...)' code ##################

        unicode_64950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, (-1)), 'unicode', u'\n        Set the grid for the pixel centers, and the pixel values.\n\n          *x* and *y* are monotonic 1-D ndarrays of lengths N and M,\n             respectively, specifying pixel centers\n\n          *A* is an (M,N) ndarray or masked array of values to be\n            colormapped, or a (M,N,3) RGB array, or a (M,N,4) RGBA\n            array.\n        ')
        
        # Assigning a Call to a Name (line 900):
        
        # Assigning a Call to a Name (line 900):
        
        # Call to array(...): (line 900)
        # Processing the call arguments (line 900)
        # Getting the type of 'x' (line 900)
        x_64953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 21), 'x', False)
        # Getting the type of 'np' (line 900)
        np_64954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 24), 'np', False)
        # Obtaining the member 'float32' of a type (line 900)
        float32_64955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 24), np_64954, 'float32')
        # Processing the call keyword arguments (line 900)
        kwargs_64956 = {}
        # Getting the type of 'np' (line 900)
        np_64951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 900)
        array_64952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 12), np_64951, 'array')
        # Calling array(args, kwargs) (line 900)
        array_call_result_64957 = invoke(stypy.reporting.localization.Localization(__file__, 900, 12), array_64952, *[x_64953, float32_64955], **kwargs_64956)
        
        # Assigning a type to the variable 'x' (line 900)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 8), 'x', array_call_result_64957)
        
        # Assigning a Call to a Name (line 901):
        
        # Assigning a Call to a Name (line 901):
        
        # Call to array(...): (line 901)
        # Processing the call arguments (line 901)
        # Getting the type of 'y' (line 901)
        y_64960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 21), 'y', False)
        # Getting the type of 'np' (line 901)
        np_64961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 24), 'np', False)
        # Obtaining the member 'float32' of a type (line 901)
        float32_64962 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 24), np_64961, 'float32')
        # Processing the call keyword arguments (line 901)
        kwargs_64963 = {}
        # Getting the type of 'np' (line 901)
        np_64958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 901, 12), 'np', False)
        # Obtaining the member 'array' of a type (line 901)
        array_64959 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 901, 12), np_64958, 'array')
        # Calling array(args, kwargs) (line 901)
        array_call_result_64964 = invoke(stypy.reporting.localization.Localization(__file__, 901, 12), array_64959, *[y_64960, float32_64962], **kwargs_64963)
        
        # Assigning a type to the variable 'y' (line 901)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 901, 8), 'y', array_call_result_64964)
        
        # Assigning a Call to a Name (line 902):
        
        # Assigning a Call to a Name (line 902):
        
        # Call to safe_masked_invalid(...): (line 902)
        # Processing the call arguments (line 902)
        # Getting the type of 'A' (line 902)
        A_64967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 38), 'A', False)
        # Processing the call keyword arguments (line 902)
        # Getting the type of 'True' (line 902)
        True_64968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 46), 'True', False)
        keyword_64969 = True_64968
        kwargs_64970 = {'copy': keyword_64969}
        # Getting the type of 'cbook' (line 902)
        cbook_64965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 12), 'cbook', False)
        # Obtaining the member 'safe_masked_invalid' of a type (line 902)
        safe_masked_invalid_64966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 902, 12), cbook_64965, 'safe_masked_invalid')
        # Calling safe_masked_invalid(args, kwargs) (line 902)
        safe_masked_invalid_call_result_64971 = invoke(stypy.reporting.localization.Localization(__file__, 902, 12), safe_masked_invalid_64966, *[A_64967], **kwargs_64970)
        
        # Assigning a type to the variable 'A' (line 902)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 8), 'A', safe_masked_invalid_call_result_64971)
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x' (line 903)
        x_64972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 16), 'x')
        # Obtaining the member 'ndim' of a type (line 903)
        ndim_64973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 16), x_64972, 'ndim')
        # Getting the type of 'y' (line 903)
        y_64974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 26), 'y')
        # Obtaining the member 'ndim' of a type (line 903)
        ndim_64975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 26), y_64974, 'ndim')
        # Applying the binary operator '==' (line 903)
        result_eq_64976 = python_operator(stypy.reporting.localization.Localization(__file__, 903, 16), '==', ndim_64973, ndim_64975)
        int_64977 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, 36), 'int')
        # Applying the binary operator '==' (line 903)
        result_eq_64978 = python_operator(stypy.reporting.localization.Localization(__file__, 903, 16), '==', ndim_64975, int_64977)
        # Applying the binary operator '&' (line 903)
        result_and__64979 = python_operator(stypy.reporting.localization.Localization(__file__, 903, 16), '&', result_eq_64976, result_eq_64978)
        
        
        
        # Obtaining the type of the subscript
        int_64980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, 50), 'int')
        int_64981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 903, 52), 'int')
        slice_64982 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 903, 42), int_64980, int_64981, None)
        # Getting the type of 'A' (line 903)
        A_64983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 42), 'A')
        # Obtaining the member 'shape' of a type (line 903)
        shape_64984 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 42), A_64983, 'shape')
        # Obtaining the member '__getitem__' of a type (line 903)
        getitem___64985 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 42), shape_64984, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 903)
        subscript_call_result_64986 = invoke(stypy.reporting.localization.Localization(__file__, 903, 42), getitem___64985, slice_64982)
        
        # Getting the type of 'y' (line 903)
        y_64987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 58), 'y')
        # Obtaining the member 'shape' of a type (line 903)
        shape_64988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 58), y_64987, 'shape')
        # Getting the type of 'x' (line 903)
        x_64989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 68), 'x')
        # Obtaining the member 'shape' of a type (line 903)
        shape_64990 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 903, 68), x_64989, 'shape')
        # Applying the binary operator '+' (line 903)
        result_add_64991 = python_operator(stypy.reporting.localization.Localization(__file__, 903, 58), '+', shape_64988, shape_64990)
        
        # Applying the binary operator '==' (line 903)
        result_eq_64992 = python_operator(stypy.reporting.localization.Localization(__file__, 903, 42), '==', subscript_call_result_64986, result_add_64991)
        
        # Applying the binary operator 'and' (line 903)
        result_and_keyword_64993 = python_operator(stypy.reporting.localization.Localization(__file__, 903, 16), 'and', result_and__64979, result_eq_64992)
        
        # Applying the 'not' unary operator (line 903)
        result_not__64994 = python_operator(stypy.reporting.localization.Localization(__file__, 903, 11), 'not', result_and_keyword_64993)
        
        # Testing the type of an if condition (line 903)
        if_condition_64995 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 903, 8), result_not__64994)
        # Assigning a type to the variable 'if_condition_64995' (line 903)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 903, 8), 'if_condition_64995', if_condition_64995)
        # SSA begins for if statement (line 903)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 904)
        # Processing the call arguments (line 904)
        unicode_64997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 904, 28), 'unicode', u"Axes don't match array shape")
        # Processing the call keyword arguments (line 904)
        kwargs_64998 = {}
        # Getting the type of 'TypeError' (line 904)
        TypeError_64996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 904)
        TypeError_call_result_64999 = invoke(stypy.reporting.localization.Localization(__file__, 904, 18), TypeError_64996, *[unicode_64997], **kwargs_64998)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 904, 12), TypeError_call_result_64999, 'raise parameter', BaseException)
        # SSA join for if statement (line 903)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'A' (line 905)
        A_65000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 905, 11), 'A')
        # Obtaining the member 'ndim' of a type (line 905)
        ndim_65001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 905, 11), A_65000, 'ndim')
        
        # Obtaining an instance of the builtin type 'list' (line 905)
        list_65002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 905)
        # Adding element type (line 905)
        int_65003 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 905, 25), list_65002, int_65003)
        # Adding element type (line 905)
        int_65004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 905, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 905, 25), list_65002, int_65004)
        
        # Applying the binary operator 'notin' (line 905)
        result_contains_65005 = python_operator(stypy.reporting.localization.Localization(__file__, 905, 11), 'notin', ndim_65001, list_65002)
        
        # Testing the type of an if condition (line 905)
        if_condition_65006 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 905, 8), result_contains_65005)
        # Assigning a type to the variable 'if_condition_65006' (line 905)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 905, 8), 'if_condition_65006', if_condition_65006)
        # SSA begins for if statement (line 905)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 906)
        # Processing the call arguments (line 906)
        unicode_65008 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 906, 28), 'unicode', u'Can only plot 2D or 3D data')
        # Processing the call keyword arguments (line 906)
        kwargs_65009 = {}
        # Getting the type of 'TypeError' (line 906)
        TypeError_65007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 906)
        TypeError_call_result_65010 = invoke(stypy.reporting.localization.Localization(__file__, 906, 18), TypeError_65007, *[unicode_65008], **kwargs_65009)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 906, 12), TypeError_call_result_65010, 'raise parameter', BaseException)
        # SSA join for if statement (line 905)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'A' (line 907)
        A_65011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 11), 'A')
        # Obtaining the member 'ndim' of a type (line 907)
        ndim_65012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 907, 11), A_65011, 'ndim')
        int_65013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 21), 'int')
        # Applying the binary operator '==' (line 907)
        result_eq_65014 = python_operator(stypy.reporting.localization.Localization(__file__, 907, 11), '==', ndim_65012, int_65013)
        
        
        
        # Obtaining the type of the subscript
        int_65015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 35), 'int')
        # Getting the type of 'A' (line 907)
        A_65016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 27), 'A')
        # Obtaining the member 'shape' of a type (line 907)
        shape_65017 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 907, 27), A_65016, 'shape')
        # Obtaining the member '__getitem__' of a type (line 907)
        getitem___65018 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 907, 27), shape_65017, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 907)
        subscript_call_result_65019 = invoke(stypy.reporting.localization.Localization(__file__, 907, 27), getitem___65018, int_65015)
        
        
        # Obtaining an instance of the builtin type 'list' (line 907)
        list_65020 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 907)
        # Adding element type (line 907)
        int_65021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 46), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 907, 45), list_65020, int_65021)
        # Adding element type (line 907)
        int_65022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 49), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 907, 45), list_65020, int_65022)
        # Adding element type (line 907)
        int_65023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 907, 52), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 907, 45), list_65020, int_65023)
        
        # Applying the binary operator 'notin' (line 907)
        result_contains_65024 = python_operator(stypy.reporting.localization.Localization(__file__, 907, 27), 'notin', subscript_call_result_65019, list_65020)
        
        # Applying the binary operator 'and' (line 907)
        result_and_keyword_65025 = python_operator(stypy.reporting.localization.Localization(__file__, 907, 11), 'and', result_eq_65014, result_contains_65024)
        
        # Testing the type of an if condition (line 907)
        if_condition_65026 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 907, 8), result_and_keyword_65025)
        # Assigning a type to the variable 'if_condition_65026' (line 907)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 907, 8), 'if_condition_65026', if_condition_65026)
        # SSA begins for if statement (line 907)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to TypeError(...): (line 908)
        # Processing the call arguments (line 908)
        unicode_65028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 908, 28), 'unicode', u'3D arrays must have three (RGB) or four (RGBA) color components')
        # Processing the call keyword arguments (line 908)
        kwargs_65029 = {}
        # Getting the type of 'TypeError' (line 908)
        TypeError_65027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 908)
        TypeError_call_result_65030 = invoke(stypy.reporting.localization.Localization(__file__, 908, 18), TypeError_65027, *[unicode_65028], **kwargs_65029)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 908, 12), TypeError_call_result_65030, 'raise parameter', BaseException)
        # SSA join for if statement (line 907)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'A' (line 910)
        A_65031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 11), 'A')
        # Obtaining the member 'ndim' of a type (line 910)
        ndim_65032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 11), A_65031, 'ndim')
        int_65033 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 910, 21), 'int')
        # Applying the binary operator '==' (line 910)
        result_eq_65034 = python_operator(stypy.reporting.localization.Localization(__file__, 910, 11), '==', ndim_65032, int_65033)
        
        
        
        # Obtaining the type of the subscript
        int_65035 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 910, 35), 'int')
        # Getting the type of 'A' (line 910)
        A_65036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 910, 27), 'A')
        # Obtaining the member 'shape' of a type (line 910)
        shape_65037 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 27), A_65036, 'shape')
        # Obtaining the member '__getitem__' of a type (line 910)
        getitem___65038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 910, 27), shape_65037, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 910)
        subscript_call_result_65039 = invoke(stypy.reporting.localization.Localization(__file__, 910, 27), getitem___65038, int_65035)
        
        int_65040 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 910, 41), 'int')
        # Applying the binary operator '==' (line 910)
        result_eq_65041 = python_operator(stypy.reporting.localization.Localization(__file__, 910, 27), '==', subscript_call_result_65039, int_65040)
        
        # Applying the binary operator 'and' (line 910)
        result_and_keyword_65042 = python_operator(stypy.reporting.localization.Localization(__file__, 910, 11), 'and', result_eq_65034, result_eq_65041)
        
        # Testing the type of an if condition (line 910)
        if_condition_65043 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 910, 8), result_and_keyword_65042)
        # Assigning a type to the variable 'if_condition_65043' (line 910)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 910, 8), 'if_condition_65043', if_condition_65043)
        # SSA begins for if statement (line 910)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Attribute (line 911):
        
        # Assigning a Subscript to a Attribute (line 911):
        
        # Obtaining the type of the subscript
        int_65044 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 30), 'int')
        int_65045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 911, 32), 'int')
        slice_65046 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 911, 22), int_65044, int_65045, None)
        # Getting the type of 'A' (line 911)
        A_65047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 22), 'A')
        # Obtaining the member 'shape' of a type (line 911)
        shape_65048 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 22), A_65047, 'shape')
        # Obtaining the member '__getitem__' of a type (line 911)
        getitem___65049 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 22), shape_65048, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 911)
        subscript_call_result_65050 = invoke(stypy.reporting.localization.Localization(__file__, 911, 22), getitem___65049, slice_65046)
        
        # Getting the type of 'A' (line 911)
        A_65051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 12), 'A')
        # Setting the type of the member 'shape' of a type (line 911)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 911, 12), A_65051, 'shape', subscript_call_result_65050)
        # SSA join for if statement (line 910)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 912):
        
        # Assigning a Name to a Attribute (line 912):
        # Getting the type of 'A' (line 912)
        A_65052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 18), 'A')
        # Getting the type of 'self' (line 912)
        self_65053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 912, 8), 'self')
        # Setting the type of the member '_A' of a type (line 912)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 912, 8), self_65053, '_A', A_65052)
        
        # Assigning a Name to a Attribute (line 913):
        
        # Assigning a Name to a Attribute (line 913):
        # Getting the type of 'x' (line 913)
        x_65054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 19), 'x')
        # Getting the type of 'self' (line 913)
        self_65055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 913, 8), 'self')
        # Setting the type of the member '_Ax' of a type (line 913)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 913, 8), self_65055, '_Ax', x_65054)
        
        # Assigning a Name to a Attribute (line 914):
        
        # Assigning a Name to a Attribute (line 914):
        # Getting the type of 'y' (line 914)
        y_65056 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 19), 'y')
        # Getting the type of 'self' (line 914)
        self_65057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 914, 8), 'self')
        # Setting the type of the member '_Ay' of a type (line 914)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 914, 8), self_65057, '_Ay', y_65056)
        
        # Assigning a Name to a Attribute (line 915):
        
        # Assigning a Name to a Attribute (line 915):
        # Getting the type of 'None' (line 915)
        None_65058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 24), 'None')
        # Getting the type of 'self' (line 915)
        self_65059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 915, 8), 'self')
        # Setting the type of the member '_imcache' of a type (line 915)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 915, 8), self_65059, '_imcache', None_65058)
        
        # Assigning a Name to a Attribute (line 917):
        
        # Assigning a Name to a Attribute (line 917):
        # Getting the type of 'True' (line 917)
        True_65060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 21), 'True')
        # Getting the type of 'self' (line 917)
        self_65061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 917, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 917)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 917, 8), self_65061, 'stale', True_65060)
        
        # ################# End of 'set_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data' in the type store
        # Getting the type of 'stypy_return_type' (line 889)
        stypy_return_type_65062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 889, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65062)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data'
        return stypy_return_type_65062


    @norecursion
    def set_array(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_array'
        module_type_store = module_type_store.open_function_context('set_array', 919, 4, False)
        # Assigning a type to the variable 'self' (line 920)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 920, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NonUniformImage.set_array.__dict__.__setitem__('stypy_localization', localization)
        NonUniformImage.set_array.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NonUniformImage.set_array.__dict__.__setitem__('stypy_type_store', module_type_store)
        NonUniformImage.set_array.__dict__.__setitem__('stypy_function_name', 'NonUniformImage.set_array')
        NonUniformImage.set_array.__dict__.__setitem__('stypy_param_names_list', [])
        NonUniformImage.set_array.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        NonUniformImage.set_array.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NonUniformImage.set_array.__dict__.__setitem__('stypy_call_defaults', defaults)
        NonUniformImage.set_array.__dict__.__setitem__('stypy_call_varargs', varargs)
        NonUniformImage.set_array.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NonUniformImage.set_array.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NonUniformImage.set_array', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_array', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_array(...)' code ##################

        
        # Call to NotImplementedError(...): (line 920)
        # Processing the call arguments (line 920)
        unicode_65064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 920, 34), 'unicode', u'Method not supported')
        # Processing the call keyword arguments (line 920)
        kwargs_65065 = {}
        # Getting the type of 'NotImplementedError' (line 920)
        NotImplementedError_65063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 920, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 920)
        NotImplementedError_call_result_65066 = invoke(stypy.reporting.localization.Localization(__file__, 920, 14), NotImplementedError_65063, *[unicode_65064], **kwargs_65065)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 920, 8), NotImplementedError_call_result_65066, 'raise parameter', BaseException)
        
        # ################# End of 'set_array(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_array' in the type store
        # Getting the type of 'stypy_return_type' (line 919)
        stypy_return_type_65067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65067)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_array'
        return stypy_return_type_65067


    @norecursion
    def set_interpolation(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_interpolation'
        module_type_store = module_type_store.open_function_context('set_interpolation', 922, 4, False)
        # Assigning a type to the variable 'self' (line 923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NonUniformImage.set_interpolation.__dict__.__setitem__('stypy_localization', localization)
        NonUniformImage.set_interpolation.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NonUniformImage.set_interpolation.__dict__.__setitem__('stypy_type_store', module_type_store)
        NonUniformImage.set_interpolation.__dict__.__setitem__('stypy_function_name', 'NonUniformImage.set_interpolation')
        NonUniformImage.set_interpolation.__dict__.__setitem__('stypy_param_names_list', ['s'])
        NonUniformImage.set_interpolation.__dict__.__setitem__('stypy_varargs_param_name', None)
        NonUniformImage.set_interpolation.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NonUniformImage.set_interpolation.__dict__.__setitem__('stypy_call_defaults', defaults)
        NonUniformImage.set_interpolation.__dict__.__setitem__('stypy_call_varargs', varargs)
        NonUniformImage.set_interpolation.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NonUniformImage.set_interpolation.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NonUniformImage.set_interpolation', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_interpolation', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_interpolation(...)' code ##################

        
        
        # Evaluating a boolean operation
        
        # Getting the type of 's' (line 923)
        s_65068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 11), 's')
        # Getting the type of 'None' (line 923)
        None_65069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 20), 'None')
        # Applying the binary operator 'isnot' (line 923)
        result_is_not_65070 = python_operator(stypy.reporting.localization.Localization(__file__, 923, 11), 'isnot', s_65068, None_65069)
        
        
        # Getting the type of 's' (line 923)
        s_65071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 29), 's')
        
        # Obtaining an instance of the builtin type 'tuple' (line 923)
        tuple_65072 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 923, 39), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 923)
        # Adding element type (line 923)
        unicode_65073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 923, 39), 'unicode', u'nearest')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 923, 39), tuple_65072, unicode_65073)
        # Adding element type (line 923)
        unicode_65074 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 923, 50), 'unicode', u'bilinear')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 923, 39), tuple_65072, unicode_65074)
        
        # Applying the binary operator 'notin' (line 923)
        result_contains_65075 = python_operator(stypy.reporting.localization.Localization(__file__, 923, 29), 'notin', s_65071, tuple_65072)
        
        # Applying the binary operator 'and' (line 923)
        result_and_keyword_65076 = python_operator(stypy.reporting.localization.Localization(__file__, 923, 11), 'and', result_is_not_65070, result_contains_65075)
        
        # Testing the type of an if condition (line 923)
        if_condition_65077 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 923, 8), result_and_keyword_65076)
        # Assigning a type to the variable 'if_condition_65077' (line 923)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 8), 'if_condition_65077', if_condition_65077)
        # SSA begins for if statement (line 923)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to NotImplementedError(...): (line 924)
        # Processing the call arguments (line 924)
        unicode_65079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 924, 38), 'unicode', u'Only nearest neighbor and bilinear interpolations are supported')
        # Processing the call keyword arguments (line 924)
        kwargs_65080 = {}
        # Getting the type of 'NotImplementedError' (line 924)
        NotImplementedError_65078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 924, 18), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 924)
        NotImplementedError_call_result_65081 = invoke(stypy.reporting.localization.Localization(__file__, 924, 18), NotImplementedError_65078, *[unicode_65079], **kwargs_65080)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 924, 12), NotImplementedError_call_result_65081, 'raise parameter', BaseException)
        # SSA join for if statement (line 923)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_interpolation(...): (line 926)
        # Processing the call arguments (line 926)
        # Getting the type of 'self' (line 926)
        self_65084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 36), 'self', False)
        # Getting the type of 's' (line 926)
        s_65085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 42), 's', False)
        # Processing the call keyword arguments (line 926)
        kwargs_65086 = {}
        # Getting the type of 'AxesImage' (line 926)
        AxesImage_65082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 8), 'AxesImage', False)
        # Obtaining the member 'set_interpolation' of a type (line 926)
        set_interpolation_65083 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 926, 8), AxesImage_65082, 'set_interpolation')
        # Calling set_interpolation(args, kwargs) (line 926)
        set_interpolation_call_result_65087 = invoke(stypy.reporting.localization.Localization(__file__, 926, 8), set_interpolation_65083, *[self_65084, s_65085], **kwargs_65086)
        
        
        # ################# End of 'set_interpolation(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_interpolation' in the type store
        # Getting the type of 'stypy_return_type' (line 922)
        stypy_return_type_65088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65088)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_interpolation'
        return stypy_return_type_65088


    @norecursion
    def get_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extent'
        module_type_store = module_type_store.open_function_context('get_extent', 928, 4, False)
        # Assigning a type to the variable 'self' (line 929)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 929, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NonUniformImage.get_extent.__dict__.__setitem__('stypy_localization', localization)
        NonUniformImage.get_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NonUniformImage.get_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        NonUniformImage.get_extent.__dict__.__setitem__('stypy_function_name', 'NonUniformImage.get_extent')
        NonUniformImage.get_extent.__dict__.__setitem__('stypy_param_names_list', [])
        NonUniformImage.get_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        NonUniformImage.get_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NonUniformImage.get_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        NonUniformImage.get_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        NonUniformImage.get_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NonUniformImage.get_extent.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NonUniformImage.get_extent', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extent', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extent(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 929)
        # Getting the type of 'self' (line 929)
        self_65089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 11), 'self')
        # Obtaining the member '_A' of a type (line 929)
        _A_65090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 929, 11), self_65089, '_A')
        # Getting the type of 'None' (line 929)
        None_65091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 929, 22), 'None')
        
        (may_be_65092, more_types_in_union_65093) = may_be_none(_A_65090, None_65091)

        if may_be_65092:

            if more_types_in_union_65093:
                # Runtime conditional SSA (line 929)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to RuntimeError(...): (line 930)
            # Processing the call arguments (line 930)
            unicode_65095 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 930, 31), 'unicode', u'Must set data first')
            # Processing the call keyword arguments (line 930)
            kwargs_65096 = {}
            # Getting the type of 'RuntimeError' (line 930)
            RuntimeError_65094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 930, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 930)
            RuntimeError_call_result_65097 = invoke(stypy.reporting.localization.Localization(__file__, 930, 18), RuntimeError_65094, *[unicode_65095], **kwargs_65096)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 930, 12), RuntimeError_call_result_65097, 'raise parameter', BaseException)

            if more_types_in_union_65093:
                # SSA join for if statement (line 929)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Obtaining an instance of the builtin type 'tuple' (line 931)
        tuple_65098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 931)
        # Adding element type (line 931)
        
        # Obtaining the type of the subscript
        int_65099 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 24), 'int')
        # Getting the type of 'self' (line 931)
        self_65100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 15), 'self')
        # Obtaining the member '_Ax' of a type (line 931)
        _Ax_65101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 15), self_65100, '_Ax')
        # Obtaining the member '__getitem__' of a type (line 931)
        getitem___65102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 15), _Ax_65101, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 931)
        subscript_call_result_65103 = invoke(stypy.reporting.localization.Localization(__file__, 931, 15), getitem___65102, int_65099)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 931, 15), tuple_65098, subscript_call_result_65103)
        # Adding element type (line 931)
        
        # Obtaining the type of the subscript
        int_65104 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 37), 'int')
        # Getting the type of 'self' (line 931)
        self_65105 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 28), 'self')
        # Obtaining the member '_Ax' of a type (line 931)
        _Ax_65106 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 28), self_65105, '_Ax')
        # Obtaining the member '__getitem__' of a type (line 931)
        getitem___65107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 28), _Ax_65106, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 931)
        subscript_call_result_65108 = invoke(stypy.reporting.localization.Localization(__file__, 931, 28), getitem___65107, int_65104)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 931, 15), tuple_65098, subscript_call_result_65108)
        # Adding element type (line 931)
        
        # Obtaining the type of the subscript
        int_65109 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 51), 'int')
        # Getting the type of 'self' (line 931)
        self_65110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 42), 'self')
        # Obtaining the member '_Ay' of a type (line 931)
        _Ay_65111 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 42), self_65110, '_Ay')
        # Obtaining the member '__getitem__' of a type (line 931)
        getitem___65112 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 42), _Ay_65111, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 931)
        subscript_call_result_65113 = invoke(stypy.reporting.localization.Localization(__file__, 931, 42), getitem___65112, int_65109)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 931, 15), tuple_65098, subscript_call_result_65113)
        # Adding element type (line 931)
        
        # Obtaining the type of the subscript
        int_65114 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, 64), 'int')
        # Getting the type of 'self' (line 931)
        self_65115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 931, 55), 'self')
        # Obtaining the member '_Ay' of a type (line 931)
        _Ay_65116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 55), self_65115, '_Ay')
        # Obtaining the member '__getitem__' of a type (line 931)
        getitem___65117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 931, 55), _Ay_65116, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 931)
        subscript_call_result_65118 = invoke(stypy.reporting.localization.Localization(__file__, 931, 55), getitem___65117, int_65114)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 931, 15), tuple_65098, subscript_call_result_65118)
        
        # Assigning a type to the variable 'stypy_return_type' (line 931)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 931, 8), 'stypy_return_type', tuple_65098)
        
        # ################# End of 'get_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 928)
        stypy_return_type_65119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 928, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65119)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extent'
        return stypy_return_type_65119


    @norecursion
    def set_filternorm(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_filternorm'
        module_type_store = module_type_store.open_function_context('set_filternorm', 933, 4, False)
        # Assigning a type to the variable 'self' (line 934)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NonUniformImage.set_filternorm.__dict__.__setitem__('stypy_localization', localization)
        NonUniformImage.set_filternorm.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NonUniformImage.set_filternorm.__dict__.__setitem__('stypy_type_store', module_type_store)
        NonUniformImage.set_filternorm.__dict__.__setitem__('stypy_function_name', 'NonUniformImage.set_filternorm')
        NonUniformImage.set_filternorm.__dict__.__setitem__('stypy_param_names_list', ['s'])
        NonUniformImage.set_filternorm.__dict__.__setitem__('stypy_varargs_param_name', None)
        NonUniformImage.set_filternorm.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NonUniformImage.set_filternorm.__dict__.__setitem__('stypy_call_defaults', defaults)
        NonUniformImage.set_filternorm.__dict__.__setitem__('stypy_call_varargs', varargs)
        NonUniformImage.set_filternorm.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NonUniformImage.set_filternorm.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NonUniformImage.set_filternorm', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_filternorm', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_filternorm(...)' code ##################

        pass
        
        # ################# End of 'set_filternorm(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_filternorm' in the type store
        # Getting the type of 'stypy_return_type' (line 933)
        stypy_return_type_65120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65120)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_filternorm'
        return stypy_return_type_65120


    @norecursion
    def set_filterrad(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_filterrad'
        module_type_store = module_type_store.open_function_context('set_filterrad', 936, 4, False)
        # Assigning a type to the variable 'self' (line 937)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NonUniformImage.set_filterrad.__dict__.__setitem__('stypy_localization', localization)
        NonUniformImage.set_filterrad.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NonUniformImage.set_filterrad.__dict__.__setitem__('stypy_type_store', module_type_store)
        NonUniformImage.set_filterrad.__dict__.__setitem__('stypy_function_name', 'NonUniformImage.set_filterrad')
        NonUniformImage.set_filterrad.__dict__.__setitem__('stypy_param_names_list', ['s'])
        NonUniformImage.set_filterrad.__dict__.__setitem__('stypy_varargs_param_name', None)
        NonUniformImage.set_filterrad.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NonUniformImage.set_filterrad.__dict__.__setitem__('stypy_call_defaults', defaults)
        NonUniformImage.set_filterrad.__dict__.__setitem__('stypy_call_varargs', varargs)
        NonUniformImage.set_filterrad.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NonUniformImage.set_filterrad.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NonUniformImage.set_filterrad', ['s'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_filterrad', localization, ['s'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_filterrad(...)' code ##################

        pass
        
        # ################# End of 'set_filterrad(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_filterrad' in the type store
        # Getting the type of 'stypy_return_type' (line 936)
        stypy_return_type_65121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65121)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_filterrad'
        return stypy_return_type_65121


    @norecursion
    def set_norm(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_norm'
        module_type_store = module_type_store.open_function_context('set_norm', 939, 4, False)
        # Assigning a type to the variable 'self' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NonUniformImage.set_norm.__dict__.__setitem__('stypy_localization', localization)
        NonUniformImage.set_norm.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NonUniformImage.set_norm.__dict__.__setitem__('stypy_type_store', module_type_store)
        NonUniformImage.set_norm.__dict__.__setitem__('stypy_function_name', 'NonUniformImage.set_norm')
        NonUniformImage.set_norm.__dict__.__setitem__('stypy_param_names_list', ['norm'])
        NonUniformImage.set_norm.__dict__.__setitem__('stypy_varargs_param_name', None)
        NonUniformImage.set_norm.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NonUniformImage.set_norm.__dict__.__setitem__('stypy_call_defaults', defaults)
        NonUniformImage.set_norm.__dict__.__setitem__('stypy_call_varargs', varargs)
        NonUniformImage.set_norm.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NonUniformImage.set_norm.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NonUniformImage.set_norm', ['norm'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_norm', localization, ['norm'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_norm(...)' code ##################

        
        
        # Getting the type of 'self' (line 940)
        self_65122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 11), 'self')
        # Obtaining the member '_A' of a type (line 940)
        _A_65123 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 940, 11), self_65122, '_A')
        # Getting the type of 'None' (line 940)
        None_65124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 940, 26), 'None')
        # Applying the binary operator 'isnot' (line 940)
        result_is_not_65125 = python_operator(stypy.reporting.localization.Localization(__file__, 940, 11), 'isnot', _A_65123, None_65124)
        
        # Testing the type of an if condition (line 940)
        if_condition_65126 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 940, 8), result_is_not_65125)
        # Assigning a type to the variable 'if_condition_65126' (line 940)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 940, 8), 'if_condition_65126', if_condition_65126)
        # SSA begins for if statement (line 940)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 941)
        # Processing the call arguments (line 941)
        unicode_65128 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 941, 31), 'unicode', u'Cannot change colors after loading data')
        # Processing the call keyword arguments (line 941)
        kwargs_65129 = {}
        # Getting the type of 'RuntimeError' (line 941)
        RuntimeError_65127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 941)
        RuntimeError_call_result_65130 = invoke(stypy.reporting.localization.Localization(__file__, 941, 18), RuntimeError_65127, *[unicode_65128], **kwargs_65129)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 941, 12), RuntimeError_call_result_65130, 'raise parameter', BaseException)
        # SSA join for if statement (line 940)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_norm(...): (line 942)
        # Processing the call arguments (line 942)
        # Getting the type of 'norm' (line 942)
        norm_65137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 46), 'norm', False)
        # Processing the call keyword arguments (line 942)
        kwargs_65138 = {}
        
        # Call to super(...): (line 942)
        # Processing the call arguments (line 942)
        # Getting the type of 'NonUniformImage' (line 942)
        NonUniformImage_65132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 14), 'NonUniformImage', False)
        # Getting the type of 'self' (line 942)
        self_65133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 31), 'self', False)
        # Processing the call keyword arguments (line 942)
        kwargs_65134 = {}
        # Getting the type of 'super' (line 942)
        super_65131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 942, 8), 'super', False)
        # Calling super(args, kwargs) (line 942)
        super_call_result_65135 = invoke(stypy.reporting.localization.Localization(__file__, 942, 8), super_65131, *[NonUniformImage_65132, self_65133], **kwargs_65134)
        
        # Obtaining the member 'set_norm' of a type (line 942)
        set_norm_65136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 942, 8), super_call_result_65135, 'set_norm')
        # Calling set_norm(args, kwargs) (line 942)
        set_norm_call_result_65139 = invoke(stypy.reporting.localization.Localization(__file__, 942, 8), set_norm_65136, *[norm_65137], **kwargs_65138)
        
        
        # ################# End of 'set_norm(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_norm' in the type store
        # Getting the type of 'stypy_return_type' (line 939)
        stypy_return_type_65140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 939, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65140)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_norm'
        return stypy_return_type_65140


    @norecursion
    def set_cmap(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_cmap'
        module_type_store = module_type_store.open_function_context('set_cmap', 944, 4, False)
        # Assigning a type to the variable 'self' (line 945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        NonUniformImage.set_cmap.__dict__.__setitem__('stypy_localization', localization)
        NonUniformImage.set_cmap.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        NonUniformImage.set_cmap.__dict__.__setitem__('stypy_type_store', module_type_store)
        NonUniformImage.set_cmap.__dict__.__setitem__('stypy_function_name', 'NonUniformImage.set_cmap')
        NonUniformImage.set_cmap.__dict__.__setitem__('stypy_param_names_list', ['cmap'])
        NonUniformImage.set_cmap.__dict__.__setitem__('stypy_varargs_param_name', None)
        NonUniformImage.set_cmap.__dict__.__setitem__('stypy_kwargs_param_name', None)
        NonUniformImage.set_cmap.__dict__.__setitem__('stypy_call_defaults', defaults)
        NonUniformImage.set_cmap.__dict__.__setitem__('stypy_call_varargs', varargs)
        NonUniformImage.set_cmap.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        NonUniformImage.set_cmap.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'NonUniformImage.set_cmap', ['cmap'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_cmap', localization, ['cmap'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_cmap(...)' code ##################

        
        
        # Getting the type of 'self' (line 945)
        self_65141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 11), 'self')
        # Obtaining the member '_A' of a type (line 945)
        _A_65142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 945, 11), self_65141, '_A')
        # Getting the type of 'None' (line 945)
        None_65143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 945, 26), 'None')
        # Applying the binary operator 'isnot' (line 945)
        result_is_not_65144 = python_operator(stypy.reporting.localization.Localization(__file__, 945, 11), 'isnot', _A_65142, None_65143)
        
        # Testing the type of an if condition (line 945)
        if_condition_65145 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 945, 8), result_is_not_65144)
        # Assigning a type to the variable 'if_condition_65145' (line 945)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 945, 8), 'if_condition_65145', if_condition_65145)
        # SSA begins for if statement (line 945)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to RuntimeError(...): (line 946)
        # Processing the call arguments (line 946)
        unicode_65147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 946, 31), 'unicode', u'Cannot change colors after loading data')
        # Processing the call keyword arguments (line 946)
        kwargs_65148 = {}
        # Getting the type of 'RuntimeError' (line 946)
        RuntimeError_65146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 946, 18), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 946)
        RuntimeError_call_result_65149 = invoke(stypy.reporting.localization.Localization(__file__, 946, 18), RuntimeError_65146, *[unicode_65147], **kwargs_65148)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 946, 12), RuntimeError_call_result_65149, 'raise parameter', BaseException)
        # SSA join for if statement (line 945)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to set_cmap(...): (line 947)
        # Processing the call arguments (line 947)
        # Getting the type of 'cmap' (line 947)
        cmap_65156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 46), 'cmap', False)
        # Processing the call keyword arguments (line 947)
        kwargs_65157 = {}
        
        # Call to super(...): (line 947)
        # Processing the call arguments (line 947)
        # Getting the type of 'NonUniformImage' (line 947)
        NonUniformImage_65151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 14), 'NonUniformImage', False)
        # Getting the type of 'self' (line 947)
        self_65152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 31), 'self', False)
        # Processing the call keyword arguments (line 947)
        kwargs_65153 = {}
        # Getting the type of 'super' (line 947)
        super_65150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 947, 8), 'super', False)
        # Calling super(args, kwargs) (line 947)
        super_call_result_65154 = invoke(stypy.reporting.localization.Localization(__file__, 947, 8), super_65150, *[NonUniformImage_65151, self_65152], **kwargs_65153)
        
        # Obtaining the member 'set_cmap' of a type (line 947)
        set_cmap_65155 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 947, 8), super_call_result_65154, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 947)
        set_cmap_call_result_65158 = invoke(stypy.reporting.localization.Localization(__file__, 947, 8), set_cmap_65155, *[cmap_65156], **kwargs_65157)
        
        
        # ################# End of 'set_cmap(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_cmap' in the type store
        # Getting the type of 'stypy_return_type' (line 944)
        stypy_return_type_65159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 944, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65159)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_cmap'
        return stypy_return_type_65159


# Assigning a type to the variable 'NonUniformImage' (line 833)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 833, 0), 'NonUniformImage', NonUniformImage)
# Declaration of the 'PcolorImage' class
# Getting the type of 'AxesImage' (line 950)
AxesImage_65160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 950, 18), 'AxesImage')

class PcolorImage(AxesImage_65160, ):
    unicode_65161 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 956, (-1)), 'unicode', u'\n    Make a pcolor-style plot with an irregular rectangular grid.\n\n    This uses a variation of the original irregular image code,\n    and it is used by pcolorfast for the corresponding grid type.\n    ')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 958)
        None_65162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 958, 19), 'None')
        # Getting the type of 'None' (line 959)
        None_65163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 19), 'None')
        # Getting the type of 'None' (line 960)
        None_65164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 960, 19), 'None')
        # Getting the type of 'None' (line 961)
        None_65165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 961, 22), 'None')
        # Getting the type of 'None' (line 962)
        None_65166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 962, 22), 'None')
        defaults = [None_65162, None_65163, None_65164, None_65165, None_65166]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 957, 4, False)
        # Assigning a type to the variable 'self' (line 958)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 958, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PcolorImage.__init__', ['ax', 'x', 'y', 'A', 'cmap', 'norm'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['ax', 'x', 'y', 'A', 'cmap', 'norm'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_65167 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 972, (-1)), 'unicode', u'\n        cmap defaults to its rc setting\n\n        cmap is a colors.Colormap instance\n        norm is a colors.Normalize instance to map luminance to 0-1\n\n        Additional kwargs are matplotlib.artist properties\n        ')
        
        # Call to __init__(...): (line 973)
        # Processing the call arguments (line 973)
        # Getting the type of 'ax' (line 973)
        ax_65174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 42), 'ax', False)
        # Processing the call keyword arguments (line 973)
        # Getting the type of 'norm' (line 973)
        norm_65175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 51), 'norm', False)
        keyword_65176 = norm_65175
        # Getting the type of 'cmap' (line 973)
        cmap_65177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 62), 'cmap', False)
        keyword_65178 = cmap_65177
        kwargs_65179 = {'cmap': keyword_65178, 'norm': keyword_65176}
        
        # Call to super(...): (line 973)
        # Processing the call arguments (line 973)
        # Getting the type of 'PcolorImage' (line 973)
        PcolorImage_65169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 14), 'PcolorImage', False)
        # Getting the type of 'self' (line 973)
        self_65170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 27), 'self', False)
        # Processing the call keyword arguments (line 973)
        kwargs_65171 = {}
        # Getting the type of 'super' (line 973)
        super_65168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 973, 8), 'super', False)
        # Calling super(args, kwargs) (line 973)
        super_call_result_65172 = invoke(stypy.reporting.localization.Localization(__file__, 973, 8), super_65168, *[PcolorImage_65169, self_65170], **kwargs_65171)
        
        # Obtaining the member '__init__' of a type (line 973)
        init___65173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 973, 8), super_call_result_65172, '__init__')
        # Calling __init__(args, kwargs) (line 973)
        init___call_result_65180 = invoke(stypy.reporting.localization.Localization(__file__, 973, 8), init___65173, *[ax_65174], **kwargs_65179)
        
        
        # Call to update(...): (line 974)
        # Processing the call arguments (line 974)
        # Getting the type of 'kwargs' (line 974)
        kwargs_65183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 20), 'kwargs', False)
        # Processing the call keyword arguments (line 974)
        kwargs_65184 = {}
        # Getting the type of 'self' (line 974)
        self_65181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 974, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 974)
        update_65182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 974, 8), self_65181, 'update')
        # Calling update(args, kwargs) (line 974)
        update_call_result_65185 = invoke(stypy.reporting.localization.Localization(__file__, 974, 8), update_65182, *[kwargs_65183], **kwargs_65184)
        
        
        # Type idiom detected: calculating its left and rigth part (line 975)
        # Getting the type of 'A' (line 975)
        A_65186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 8), 'A')
        # Getting the type of 'None' (line 975)
        None_65187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 975, 20), 'None')
        
        (may_be_65188, more_types_in_union_65189) = may_not_be_none(A_65186, None_65187)

        if may_be_65188:

            if more_types_in_union_65189:
                # Runtime conditional SSA (line 975)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to set_data(...): (line 976)
            # Processing the call arguments (line 976)
            # Getting the type of 'x' (line 976)
            x_65192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 26), 'x', False)
            # Getting the type of 'y' (line 976)
            y_65193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 29), 'y', False)
            # Getting the type of 'A' (line 976)
            A_65194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 32), 'A', False)
            # Processing the call keyword arguments (line 976)
            kwargs_65195 = {}
            # Getting the type of 'self' (line 976)
            self_65190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 976, 12), 'self', False)
            # Obtaining the member 'set_data' of a type (line 976)
            set_data_65191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 976, 12), self_65190, 'set_data')
            # Calling set_data(args, kwargs) (line 976)
            set_data_call_result_65196 = invoke(stypy.reporting.localization.Localization(__file__, 976, 12), set_data_65191, *[x_65192, y_65193, A_65194], **kwargs_65195)
            

            if more_types_in_union_65189:
                # SSA join for if statement (line 975)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def make_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_65197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 978, 49), 'float')
        # Getting the type of 'False' (line 978)
        False_65198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 64), 'False')
        defaults = [float_65197, False_65198]
        # Create a new context for function 'make_image'
        module_type_store = module_type_store.open_function_context('make_image', 978, 4, False)
        # Assigning a type to the variable 'self' (line 979)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 979, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PcolorImage.make_image.__dict__.__setitem__('stypy_localization', localization)
        PcolorImage.make_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PcolorImage.make_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        PcolorImage.make_image.__dict__.__setitem__('stypy_function_name', 'PcolorImage.make_image')
        PcolorImage.make_image.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'magnification', 'unsampled'])
        PcolorImage.make_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        PcolorImage.make_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PcolorImage.make_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        PcolorImage.make_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        PcolorImage.make_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PcolorImage.make_image.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PcolorImage.make_image', ['renderer', 'magnification', 'unsampled'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'make_image', localization, ['renderer', 'magnification', 'unsampled'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'make_image(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 979)
        # Getting the type of 'self' (line 979)
        self_65199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 11), 'self')
        # Obtaining the member '_A' of a type (line 979)
        _A_65200 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 979, 11), self_65199, '_A')
        # Getting the type of 'None' (line 979)
        None_65201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 979, 22), 'None')
        
        (may_be_65202, more_types_in_union_65203) = may_be_none(_A_65200, None_65201)

        if may_be_65202:

            if more_types_in_union_65203:
                # Runtime conditional SSA (line 979)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to RuntimeError(...): (line 980)
            # Processing the call arguments (line 980)
            unicode_65205 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 980, 31), 'unicode', u'You must first set the image array')
            # Processing the call keyword arguments (line 980)
            kwargs_65206 = {}
            # Getting the type of 'RuntimeError' (line 980)
            RuntimeError_65204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 980, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 980)
            RuntimeError_call_result_65207 = invoke(stypy.reporting.localization.Localization(__file__, 980, 18), RuntimeError_65204, *[unicode_65205], **kwargs_65206)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 980, 12), RuntimeError_call_result_65207, 'raise parameter', BaseException)

            if more_types_in_union_65203:
                # SSA join for if statement (line 979)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Getting the type of 'unsampled' (line 981)
        unsampled_65208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 981, 11), 'unsampled')
        # Testing the type of an if condition (line 981)
        if_condition_65209 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 981, 8), unsampled_65208)
        # Assigning a type to the variable 'if_condition_65209' (line 981)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 981, 8), 'if_condition_65209', if_condition_65209)
        # SSA begins for if statement (line 981)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 982)
        # Processing the call arguments (line 982)
        unicode_65211 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 982, 29), 'unicode', u'unsampled not supported on PColorImage')
        # Processing the call keyword arguments (line 982)
        kwargs_65212 = {}
        # Getting the type of 'ValueError' (line 982)
        ValueError_65210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 982, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 982)
        ValueError_call_result_65213 = invoke(stypy.reporting.localization.Localization(__file__, 982, 18), ValueError_65210, *[unicode_65211], **kwargs_65212)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 982, 12), ValueError_call_result_65213, 'raise parameter', BaseException)
        # SSA join for if statement (line 981)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 983):
        
        # Assigning a Call to a Name (line 983):
        
        # Call to get_facecolor(...): (line 983)
        # Processing the call keyword arguments (line 983)
        kwargs_65218 = {}
        # Getting the type of 'self' (line 983)
        self_65214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 983, 13), 'self', False)
        # Obtaining the member 'axes' of a type (line 983)
        axes_65215 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 983, 13), self_65214, 'axes')
        # Obtaining the member 'patch' of a type (line 983)
        patch_65216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 983, 13), axes_65215, 'patch')
        # Obtaining the member 'get_facecolor' of a type (line 983)
        get_facecolor_65217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 983, 13), patch_65216, 'get_facecolor')
        # Calling get_facecolor(args, kwargs) (line 983)
        get_facecolor_call_result_65219 = invoke(stypy.reporting.localization.Localization(__file__, 983, 13), get_facecolor_65217, *[], **kwargs_65218)
        
        # Assigning a type to the variable 'fc' (line 983)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 983, 8), 'fc', get_facecolor_call_result_65219)
        
        # Assigning a Call to a Name (line 984):
        
        # Assigning a Call to a Name (line 984):
        
        # Call to to_rgba(...): (line 984)
        # Processing the call arguments (line 984)
        # Getting the type of 'fc' (line 984)
        fc_65222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 29), 'fc', False)
        int_65223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 984, 33), 'int')
        # Processing the call keyword arguments (line 984)
        kwargs_65224 = {}
        # Getting the type of 'mcolors' (line 984)
        mcolors_65220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 984, 13), 'mcolors', False)
        # Obtaining the member 'to_rgba' of a type (line 984)
        to_rgba_65221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 984, 13), mcolors_65220, 'to_rgba')
        # Calling to_rgba(args, kwargs) (line 984)
        to_rgba_call_result_65225 = invoke(stypy.reporting.localization.Localization(__file__, 984, 13), to_rgba_65221, *[fc_65222, int_65223], **kwargs_65224)
        
        # Assigning a type to the variable 'bg' (line 984)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 984, 8), 'bg', to_rgba_call_result_65225)
        
        # Assigning a Call to a Name (line 985):
        
        # Assigning a Call to a Name (line 985):
        
        # Call to astype(...): (line 985)
        # Processing the call arguments (line 985)
        # Getting the type of 'np' (line 985)
        np_65234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 39), 'np', False)
        # Obtaining the member 'uint8' of a type (line 985)
        uint8_65235 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 985, 39), np_65234, 'uint8')
        # Processing the call keyword arguments (line 985)
        kwargs_65236 = {}
        
        # Call to array(...): (line 985)
        # Processing the call arguments (line 985)
        # Getting the type of 'bg' (line 985)
        bg_65228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 23), 'bg', False)
        # Processing the call keyword arguments (line 985)
        kwargs_65229 = {}
        # Getting the type of 'np' (line 985)
        np_65226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 985, 14), 'np', False)
        # Obtaining the member 'array' of a type (line 985)
        array_65227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 985, 14), np_65226, 'array')
        # Calling array(args, kwargs) (line 985)
        array_call_result_65230 = invoke(stypy.reporting.localization.Localization(__file__, 985, 14), array_65227, *[bg_65228], **kwargs_65229)
        
        int_65231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 985, 27), 'int')
        # Applying the binary operator '*' (line 985)
        result_mul_65232 = python_operator(stypy.reporting.localization.Localization(__file__, 985, 14), '*', array_call_result_65230, int_65231)
        
        # Obtaining the member 'astype' of a type (line 985)
        astype_65233 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 985, 14), result_mul_65232, 'astype')
        # Calling astype(args, kwargs) (line 985)
        astype_call_result_65237 = invoke(stypy.reporting.localization.Localization(__file__, 985, 14), astype_65233, *[uint8_65235], **kwargs_65236)
        
        # Assigning a type to the variable 'bg' (line 985)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 985, 8), 'bg', astype_call_result_65237)
        
        # Assigning a Attribute to a Tuple (line 986):
        
        # Assigning a Subscript to a Name (line 986):
        
        # Obtaining the type of the subscript
        int_65238 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 8), 'int')
        # Getting the type of 'self' (line 986)
        self_65239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 21), 'self')
        # Obtaining the member 'axes' of a type (line 986)
        axes_65240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 21), self_65239, 'axes')
        # Obtaining the member 'bbox' of a type (line 986)
        bbox_65241 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 21), axes_65240, 'bbox')
        # Obtaining the member 'extents' of a type (line 986)
        extents_65242 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 21), bbox_65241, 'extents')
        # Obtaining the member '__getitem__' of a type (line 986)
        getitem___65243 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 8), extents_65242, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 986)
        subscript_call_result_65244 = invoke(stypy.reporting.localization.Localization(__file__, 986, 8), getitem___65243, int_65238)
        
        # Assigning a type to the variable 'tuple_var_assignment_62365' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'tuple_var_assignment_62365', subscript_call_result_65244)
        
        # Assigning a Subscript to a Name (line 986):
        
        # Obtaining the type of the subscript
        int_65245 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 8), 'int')
        # Getting the type of 'self' (line 986)
        self_65246 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 21), 'self')
        # Obtaining the member 'axes' of a type (line 986)
        axes_65247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 21), self_65246, 'axes')
        # Obtaining the member 'bbox' of a type (line 986)
        bbox_65248 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 21), axes_65247, 'bbox')
        # Obtaining the member 'extents' of a type (line 986)
        extents_65249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 21), bbox_65248, 'extents')
        # Obtaining the member '__getitem__' of a type (line 986)
        getitem___65250 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 8), extents_65249, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 986)
        subscript_call_result_65251 = invoke(stypy.reporting.localization.Localization(__file__, 986, 8), getitem___65250, int_65245)
        
        # Assigning a type to the variable 'tuple_var_assignment_62366' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'tuple_var_assignment_62366', subscript_call_result_65251)
        
        # Assigning a Subscript to a Name (line 986):
        
        # Obtaining the type of the subscript
        int_65252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 8), 'int')
        # Getting the type of 'self' (line 986)
        self_65253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 21), 'self')
        # Obtaining the member 'axes' of a type (line 986)
        axes_65254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 21), self_65253, 'axes')
        # Obtaining the member 'bbox' of a type (line 986)
        bbox_65255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 21), axes_65254, 'bbox')
        # Obtaining the member 'extents' of a type (line 986)
        extents_65256 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 21), bbox_65255, 'extents')
        # Obtaining the member '__getitem__' of a type (line 986)
        getitem___65257 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 8), extents_65256, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 986)
        subscript_call_result_65258 = invoke(stypy.reporting.localization.Localization(__file__, 986, 8), getitem___65257, int_65252)
        
        # Assigning a type to the variable 'tuple_var_assignment_62367' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'tuple_var_assignment_62367', subscript_call_result_65258)
        
        # Assigning a Subscript to a Name (line 986):
        
        # Obtaining the type of the subscript
        int_65259 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 986, 8), 'int')
        # Getting the type of 'self' (line 986)
        self_65260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 21), 'self')
        # Obtaining the member 'axes' of a type (line 986)
        axes_65261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 21), self_65260, 'axes')
        # Obtaining the member 'bbox' of a type (line 986)
        bbox_65262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 21), axes_65261, 'bbox')
        # Obtaining the member 'extents' of a type (line 986)
        extents_65263 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 21), bbox_65262, 'extents')
        # Obtaining the member '__getitem__' of a type (line 986)
        getitem___65264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 986, 8), extents_65263, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 986)
        subscript_call_result_65265 = invoke(stypy.reporting.localization.Localization(__file__, 986, 8), getitem___65264, int_65259)
        
        # Assigning a type to the variable 'tuple_var_assignment_62368' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'tuple_var_assignment_62368', subscript_call_result_65265)
        
        # Assigning a Name to a Name (line 986):
        # Getting the type of 'tuple_var_assignment_62365' (line 986)
        tuple_var_assignment_62365_65266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'tuple_var_assignment_62365')
        # Assigning a type to the variable 'l' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'l', tuple_var_assignment_62365_65266)
        
        # Assigning a Name to a Name (line 986):
        # Getting the type of 'tuple_var_assignment_62366' (line 986)
        tuple_var_assignment_62366_65267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'tuple_var_assignment_62366')
        # Assigning a type to the variable 'b' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 11), 'b', tuple_var_assignment_62366_65267)
        
        # Assigning a Name to a Name (line 986):
        # Getting the type of 'tuple_var_assignment_62367' (line 986)
        tuple_var_assignment_62367_65268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'tuple_var_assignment_62367')
        # Assigning a type to the variable 'r' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 14), 'r', tuple_var_assignment_62367_65268)
        
        # Assigning a Name to a Name (line 986):
        # Getting the type of 'tuple_var_assignment_62368' (line 986)
        tuple_var_assignment_62368_65269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 986, 8), 'tuple_var_assignment_62368')
        # Assigning a type to the variable 't' (line 986)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 986, 17), 't', tuple_var_assignment_62368_65269)
        
        # Assigning a BinOp to a Name (line 987):
        
        # Assigning a BinOp to a Name (line 987):
        
        # Call to round(...): (line 987)
        # Processing the call arguments (line 987)
        # Getting the type of 'r' (line 987)
        r_65272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 26), 'r', False)
        # Processing the call keyword arguments (line 987)
        kwargs_65273 = {}
        # Getting the type of 'np' (line 987)
        np_65270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 17), 'np', False)
        # Obtaining the member 'round' of a type (line 987)
        round_65271 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 17), np_65270, 'round')
        # Calling round(args, kwargs) (line 987)
        round_call_result_65274 = invoke(stypy.reporting.localization.Localization(__file__, 987, 17), round_65271, *[r_65272], **kwargs_65273)
        
        float_65275 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 31), 'float')
        # Applying the binary operator '+' (line 987)
        result_add_65276 = python_operator(stypy.reporting.localization.Localization(__file__, 987, 17), '+', round_call_result_65274, float_65275)
        
        
        # Call to round(...): (line 987)
        # Processing the call arguments (line 987)
        # Getting the type of 'l' (line 987)
        l_65279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 48), 'l', False)
        # Processing the call keyword arguments (line 987)
        kwargs_65280 = {}
        # Getting the type of 'np' (line 987)
        np_65277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 987, 39), 'np', False)
        # Obtaining the member 'round' of a type (line 987)
        round_65278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 987, 39), np_65277, 'round')
        # Calling round(args, kwargs) (line 987)
        round_call_result_65281 = invoke(stypy.reporting.localization.Localization(__file__, 987, 39), round_65278, *[l_65279], **kwargs_65280)
        
        float_65282 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 987, 53), 'float')
        # Applying the binary operator '-' (line 987)
        result_sub_65283 = python_operator(stypy.reporting.localization.Localization(__file__, 987, 39), '-', round_call_result_65281, float_65282)
        
        # Applying the binary operator '-' (line 987)
        result_sub_65284 = python_operator(stypy.reporting.localization.Localization(__file__, 987, 16), '-', result_add_65276, result_sub_65283)
        
        # Assigning a type to the variable 'width' (line 987)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 987, 8), 'width', result_sub_65284)
        
        # Assigning a BinOp to a Name (line 988):
        
        # Assigning a BinOp to a Name (line 988):
        
        # Call to round(...): (line 988)
        # Processing the call arguments (line 988)
        # Getting the type of 't' (line 988)
        t_65287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 27), 't', False)
        # Processing the call keyword arguments (line 988)
        kwargs_65288 = {}
        # Getting the type of 'np' (line 988)
        np_65285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 18), 'np', False)
        # Obtaining the member 'round' of a type (line 988)
        round_65286 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 18), np_65285, 'round')
        # Calling round(args, kwargs) (line 988)
        round_call_result_65289 = invoke(stypy.reporting.localization.Localization(__file__, 988, 18), round_65286, *[t_65287], **kwargs_65288)
        
        float_65290 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 988, 32), 'float')
        # Applying the binary operator '+' (line 988)
        result_add_65291 = python_operator(stypy.reporting.localization.Localization(__file__, 988, 18), '+', round_call_result_65289, float_65290)
        
        
        # Call to round(...): (line 988)
        # Processing the call arguments (line 988)
        # Getting the type of 'b' (line 988)
        b_65294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 49), 'b', False)
        # Processing the call keyword arguments (line 988)
        kwargs_65295 = {}
        # Getting the type of 'np' (line 988)
        np_65292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 988, 40), 'np', False)
        # Obtaining the member 'round' of a type (line 988)
        round_65293 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 988, 40), np_65292, 'round')
        # Calling round(args, kwargs) (line 988)
        round_call_result_65296 = invoke(stypy.reporting.localization.Localization(__file__, 988, 40), round_65293, *[b_65294], **kwargs_65295)
        
        float_65297 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 988, 54), 'float')
        # Applying the binary operator '-' (line 988)
        result_sub_65298 = python_operator(stypy.reporting.localization.Localization(__file__, 988, 40), '-', round_call_result_65296, float_65297)
        
        # Applying the binary operator '-' (line 988)
        result_sub_65299 = python_operator(stypy.reporting.localization.Localization(__file__, 988, 17), '-', result_add_65291, result_sub_65298)
        
        # Assigning a type to the variable 'height' (line 988)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 988, 8), 'height', result_sub_65299)
        
        # Assigning a Call to a Name (line 990):
        
        # Assigning a Call to a Name (line 990):
        
        # Call to int(...): (line 990)
        # Processing the call arguments (line 990)
        
        # Call to round(...): (line 990)
        # Processing the call arguments (line 990)
        # Getting the type of 'width' (line 990)
        width_65303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 29), 'width', False)
        # Getting the type of 'magnification' (line 990)
        magnification_65304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 37), 'magnification', False)
        # Applying the binary operator '*' (line 990)
        result_mul_65305 = python_operator(stypy.reporting.localization.Localization(__file__, 990, 29), '*', width_65303, magnification_65304)
        
        # Processing the call keyword arguments (line 990)
        kwargs_65306 = {}
        # Getting the type of 'np' (line 990)
        np_65301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 20), 'np', False)
        # Obtaining the member 'round' of a type (line 990)
        round_65302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 990, 20), np_65301, 'round')
        # Calling round(args, kwargs) (line 990)
        round_call_result_65307 = invoke(stypy.reporting.localization.Localization(__file__, 990, 20), round_65302, *[result_mul_65305], **kwargs_65306)
        
        # Processing the call keyword arguments (line 990)
        kwargs_65308 = {}
        # Getting the type of 'int' (line 990)
        int_65300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 990, 16), 'int', False)
        # Calling int(args, kwargs) (line 990)
        int_call_result_65309 = invoke(stypy.reporting.localization.Localization(__file__, 990, 16), int_65300, *[round_call_result_65307], **kwargs_65308)
        
        # Assigning a type to the variable 'width' (line 990)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 990, 8), 'width', int_call_result_65309)
        
        # Assigning a Call to a Name (line 991):
        
        # Assigning a Call to a Name (line 991):
        
        # Call to int(...): (line 991)
        # Processing the call arguments (line 991)
        
        # Call to round(...): (line 991)
        # Processing the call arguments (line 991)
        # Getting the type of 'height' (line 991)
        height_65313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 30), 'height', False)
        # Getting the type of 'magnification' (line 991)
        magnification_65314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 39), 'magnification', False)
        # Applying the binary operator '*' (line 991)
        result_mul_65315 = python_operator(stypy.reporting.localization.Localization(__file__, 991, 30), '*', height_65313, magnification_65314)
        
        # Processing the call keyword arguments (line 991)
        kwargs_65316 = {}
        # Getting the type of 'np' (line 991)
        np_65311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 21), 'np', False)
        # Obtaining the member 'round' of a type (line 991)
        round_65312 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 991, 21), np_65311, 'round')
        # Calling round(args, kwargs) (line 991)
        round_call_result_65317 = invoke(stypy.reporting.localization.Localization(__file__, 991, 21), round_65312, *[result_mul_65315], **kwargs_65316)
        
        # Processing the call keyword arguments (line 991)
        kwargs_65318 = {}
        # Getting the type of 'int' (line 991)
        int_65310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 991, 17), 'int', False)
        # Calling int(args, kwargs) (line 991)
        int_call_result_65319 = invoke(stypy.reporting.localization.Localization(__file__, 991, 17), int_65310, *[round_call_result_65317], **kwargs_65318)
        
        # Assigning a type to the variable 'height' (line 991)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 991, 8), 'height', int_call_result_65319)
        
        # Type idiom detected: calculating its left and rigth part (line 992)
        # Getting the type of 'self' (line 992)
        self_65320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 11), 'self')
        # Obtaining the member '_rgbacache' of a type (line 992)
        _rgbacache_65321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 992, 11), self_65320, '_rgbacache')
        # Getting the type of 'None' (line 992)
        None_65322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 992, 30), 'None')
        
        (may_be_65323, more_types_in_union_65324) = may_be_none(_rgbacache_65321, None_65322)

        if may_be_65323:

            if more_types_in_union_65324:
                # Runtime conditional SSA (line 992)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 993):
            
            # Assigning a Call to a Name (line 993):
            
            # Call to to_rgba(...): (line 993)
            # Processing the call arguments (line 993)
            # Getting the type of 'self' (line 993)
            self_65327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 29), 'self', False)
            # Obtaining the member '_A' of a type (line 993)
            _A_65328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 29), self_65327, '_A')
            # Processing the call keyword arguments (line 993)
            # Getting the type of 'True' (line 993)
            True_65329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 44), 'True', False)
            keyword_65330 = True_65329
            kwargs_65331 = {'bytes': keyword_65330}
            # Getting the type of 'self' (line 993)
            self_65325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 993, 16), 'self', False)
            # Obtaining the member 'to_rgba' of a type (line 993)
            to_rgba_65326 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 993, 16), self_65325, 'to_rgba')
            # Calling to_rgba(args, kwargs) (line 993)
            to_rgba_call_result_65332 = invoke(stypy.reporting.localization.Localization(__file__, 993, 16), to_rgba_65326, *[_A_65328], **kwargs_65331)
            
            # Assigning a type to the variable 'A' (line 993)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 993, 12), 'A', to_rgba_call_result_65332)
            
            # Assigning a Name to a Attribute (line 994):
            
            # Assigning a Name to a Attribute (line 994):
            # Getting the type of 'A' (line 994)
            A_65333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 30), 'A')
            # Getting the type of 'self' (line 994)
            self_65334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 994, 12), 'self')
            # Setting the type of the member '_rgbacache' of a type (line 994)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 994, 12), self_65334, '_rgbacache', A_65333)
            
            
            # Getting the type of 'self' (line 995)
            self_65335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 995, 15), 'self')
            # Obtaining the member '_A' of a type (line 995)
            _A_65336 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 15), self_65335, '_A')
            # Obtaining the member 'ndim' of a type (line 995)
            ndim_65337 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 995, 15), _A_65336, 'ndim')
            int_65338 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 995, 31), 'int')
            # Applying the binary operator '==' (line 995)
            result_eq_65339 = python_operator(stypy.reporting.localization.Localization(__file__, 995, 15), '==', ndim_65337, int_65338)
            
            # Testing the type of an if condition (line 995)
            if_condition_65340 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 995, 12), result_eq_65339)
            # Assigning a type to the variable 'if_condition_65340' (line 995)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 995, 12), 'if_condition_65340', if_condition_65340)
            # SSA begins for if statement (line 995)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
            
            # Assigning a Call to a Attribute (line 996):
            
            # Assigning a Call to a Attribute (line 996):
            
            # Call to is_gray(...): (line 996)
            # Processing the call keyword arguments (line 996)
            kwargs_65344 = {}
            # Getting the type of 'self' (line 996)
            self_65341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 36), 'self', False)
            # Obtaining the member 'cmap' of a type (line 996)
            cmap_65342 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 36), self_65341, 'cmap')
            # Obtaining the member 'is_gray' of a type (line 996)
            is_gray_65343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 36), cmap_65342, 'is_gray')
            # Calling is_gray(args, kwargs) (line 996)
            is_gray_call_result_65345 = invoke(stypy.reporting.localization.Localization(__file__, 996, 36), is_gray_65343, *[], **kwargs_65344)
            
            # Getting the type of 'self' (line 996)
            self_65346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 996, 16), 'self')
            # Setting the type of the member 'is_grayscale' of a type (line 996)
            module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 996, 16), self_65346, 'is_grayscale', is_gray_call_result_65345)
            # SSA join for if statement (line 995)
            module_type_store = module_type_store.join_ssa_context()
            

            if more_types_in_union_65324:
                # Runtime conditional SSA for else branch (line 992)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_65323) or more_types_in_union_65324):
            
            # Assigning a Attribute to a Name (line 998):
            
            # Assigning a Attribute to a Name (line 998):
            # Getting the type of 'self' (line 998)
            self_65347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 998, 16), 'self')
            # Obtaining the member '_rgbacache' of a type (line 998)
            _rgbacache_65348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 998, 16), self_65347, '_rgbacache')
            # Assigning a type to the variable 'A' (line 998)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 998, 12), 'A', _rgbacache_65348)

            if (may_be_65323 and more_types_in_union_65324):
                # SSA join for if statement (line 992)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Assigning a Attribute to a Name (line 999):
        
        # Assigning a Attribute to a Name (line 999):
        # Getting the type of 'self' (line 999)
        self_65349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 999, 13), 'self')
        # Obtaining the member 'axes' of a type (line 999)
        axes_65350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 13), self_65349, 'axes')
        # Obtaining the member 'viewLim' of a type (line 999)
        viewLim_65351 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 999, 13), axes_65350, 'viewLim')
        # Assigning a type to the variable 'vl' (line 999)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 999, 8), 'vl', viewLim_65351)
        
        # Assigning a Call to a Name (line 1000):
        
        # Assigning a Call to a Name (line 1000):
        
        # Call to pcolor2(...): (line 1000)
        # Processing the call arguments (line 1000)
        # Getting the type of 'self' (line 1000)
        self_65354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 28), 'self', False)
        # Obtaining the member '_Ax' of a type (line 1000)
        _Ax_65355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 28), self_65354, '_Ax')
        # Getting the type of 'self' (line 1000)
        self_65356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 38), 'self', False)
        # Obtaining the member '_Ay' of a type (line 1000)
        _Ay_65357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 38), self_65356, '_Ay')
        # Getting the type of 'A' (line 1000)
        A_65358 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 48), 'A', False)
        # Getting the type of 'height' (line 1001)
        height_65359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1001, 28), 'height', False)
        # Getting the type of 'width' (line 1002)
        width_65360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1002, 28), 'width', False)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1003)
        tuple_65361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1003, 29), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1003)
        # Adding element type (line 1003)
        # Getting the type of 'vl' (line 1003)
        vl_65362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 29), 'vl', False)
        # Obtaining the member 'x0' of a type (line 1003)
        x0_65363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 29), vl_65362, 'x0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1003, 29), tuple_65361, x0_65363)
        # Adding element type (line 1003)
        # Getting the type of 'vl' (line 1003)
        vl_65364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 36), 'vl', False)
        # Obtaining the member 'x1' of a type (line 1003)
        x1_65365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 36), vl_65364, 'x1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1003, 29), tuple_65361, x1_65365)
        # Adding element type (line 1003)
        # Getting the type of 'vl' (line 1003)
        vl_65366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 43), 'vl', False)
        # Obtaining the member 'y0' of a type (line 1003)
        y0_65367 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 43), vl_65366, 'y0')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1003, 29), tuple_65361, y0_65367)
        # Adding element type (line 1003)
        # Getting the type of 'vl' (line 1003)
        vl_65368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1003, 50), 'vl', False)
        # Obtaining the member 'y1' of a type (line 1003)
        y1_65369 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1003, 50), vl_65368, 'y1')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1003, 29), tuple_65361, y1_65369)
        
        # Getting the type of 'bg' (line 1004)
        bg_65370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1004, 28), 'bg', False)
        # Processing the call keyword arguments (line 1000)
        kwargs_65371 = {}
        # Getting the type of '_image' (line 1000)
        _image_65352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1000, 13), '_image', False)
        # Obtaining the member 'pcolor2' of a type (line 1000)
        pcolor2_65353 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1000, 13), _image_65352, 'pcolor2')
        # Calling pcolor2(args, kwargs) (line 1000)
        pcolor2_call_result_65372 = invoke(stypy.reporting.localization.Localization(__file__, 1000, 13), pcolor2_65353, *[_Ax_65355, _Ay_65357, A_65358, height_65359, width_65360, tuple_65361, bg_65370], **kwargs_65371)
        
        # Assigning a type to the variable 'im' (line 1000)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1000, 8), 'im', pcolor2_call_result_65372)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1005)
        tuple_65373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1005, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1005)
        # Adding element type (line 1005)
        # Getting the type of 'im' (line 1005)
        im_65374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 15), 'im')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1005, 15), tuple_65373, im_65374)
        # Adding element type (line 1005)
        # Getting the type of 'l' (line 1005)
        l_65375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 19), 'l')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1005, 15), tuple_65373, l_65375)
        # Adding element type (line 1005)
        # Getting the type of 'b' (line 1005)
        b_65376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 22), 'b')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1005, 15), tuple_65373, b_65376)
        # Adding element type (line 1005)
        
        # Call to IdentityTransform(...): (line 1005)
        # Processing the call keyword arguments (line 1005)
        kwargs_65378 = {}
        # Getting the type of 'IdentityTransform' (line 1005)
        IdentityTransform_65377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1005, 25), 'IdentityTransform', False)
        # Calling IdentityTransform(args, kwargs) (line 1005)
        IdentityTransform_call_result_65379 = invoke(stypy.reporting.localization.Localization(__file__, 1005, 25), IdentityTransform_65377, *[], **kwargs_65378)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1005, 15), tuple_65373, IdentityTransform_call_result_65379)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1005)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1005, 8), 'stypy_return_type', tuple_65373)
        
        # ################# End of 'make_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'make_image' in the type store
        # Getting the type of 'stypy_return_type' (line 978)
        stypy_return_type_65380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 978, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65380)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'make_image'
        return stypy_return_type_65380


    @norecursion
    def _check_unsampled_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_check_unsampled_image'
        module_type_store = module_type_store.open_function_context('_check_unsampled_image', 1007, 4, False)
        # Assigning a type to the variable 'self' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PcolorImage._check_unsampled_image.__dict__.__setitem__('stypy_localization', localization)
        PcolorImage._check_unsampled_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PcolorImage._check_unsampled_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        PcolorImage._check_unsampled_image.__dict__.__setitem__('stypy_function_name', 'PcolorImage._check_unsampled_image')
        PcolorImage._check_unsampled_image.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        PcolorImage._check_unsampled_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        PcolorImage._check_unsampled_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PcolorImage._check_unsampled_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        PcolorImage._check_unsampled_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        PcolorImage._check_unsampled_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PcolorImage._check_unsampled_image.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PcolorImage._check_unsampled_image', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, '_check_unsampled_image', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '_check_unsampled_image(...)' code ##################

        # Getting the type of 'False' (line 1008)
        False_65381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1008, 15), 'False')
        # Assigning a type to the variable 'stypy_return_type' (line 1008)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1008, 8), 'stypy_return_type', False_65381)
        
        # ################# End of '_check_unsampled_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function '_check_unsampled_image' in the type store
        # Getting the type of 'stypy_return_type' (line 1007)
        stypy_return_type_65382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1007, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65382)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_check_unsampled_image'
        return stypy_return_type_65382


    @norecursion
    def set_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_data'
        module_type_store = module_type_store.open_function_context('set_data', 1010, 4, False)
        # Assigning a type to the variable 'self' (line 1011)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1011, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PcolorImage.set_data.__dict__.__setitem__('stypy_localization', localization)
        PcolorImage.set_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PcolorImage.set_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        PcolorImage.set_data.__dict__.__setitem__('stypy_function_name', 'PcolorImage.set_data')
        PcolorImage.set_data.__dict__.__setitem__('stypy_param_names_list', ['x', 'y', 'A'])
        PcolorImage.set_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        PcolorImage.set_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PcolorImage.set_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        PcolorImage.set_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        PcolorImage.set_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PcolorImage.set_data.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PcolorImage.set_data', ['x', 'y', 'A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data', localization, ['x', 'y', 'A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data(...)' code ##################

        unicode_65383 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1023, (-1)), 'unicode', u'\n        Set the grid for the rectangle boundaries, and the data values.\n\n          *x* and *y* are monotonic 1-D ndarrays of lengths N+1 and M+1,\n             respectively, specifying rectangle boundaries.  If None,\n             they will be created as uniform arrays from 0 through N\n             and 0 through M, respectively.\n\n          *A* is an (M,N) ndarray or masked array of values to be\n            colormapped, or a (M,N,3) RGB array, or a (M,N,4) RGBA\n            array.\n\n        ')
        
        # Assigning a Call to a Name (line 1024):
        
        # Assigning a Call to a Name (line 1024):
        
        # Call to safe_masked_invalid(...): (line 1024)
        # Processing the call arguments (line 1024)
        # Getting the type of 'A' (line 1024)
        A_65386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 38), 'A', False)
        # Processing the call keyword arguments (line 1024)
        # Getting the type of 'True' (line 1024)
        True_65387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 46), 'True', False)
        keyword_65388 = True_65387
        kwargs_65389 = {'copy': keyword_65388}
        # Getting the type of 'cbook' (line 1024)
        cbook_65384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1024, 12), 'cbook', False)
        # Obtaining the member 'safe_masked_invalid' of a type (line 1024)
        safe_masked_invalid_65385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1024, 12), cbook_65384, 'safe_masked_invalid')
        # Calling safe_masked_invalid(args, kwargs) (line 1024)
        safe_masked_invalid_call_result_65390 = invoke(stypy.reporting.localization.Localization(__file__, 1024, 12), safe_masked_invalid_65385, *[A_65386], **kwargs_65389)
        
        # Assigning a type to the variable 'A' (line 1024)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1024, 8), 'A', safe_masked_invalid_call_result_65390)
        
        # Type idiom detected: calculating its left and rigth part (line 1025)
        # Getting the type of 'x' (line 1025)
        x_65391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 11), 'x')
        # Getting the type of 'None' (line 1025)
        None_65392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1025, 16), 'None')
        
        (may_be_65393, more_types_in_union_65394) = may_be_none(x_65391, None_65392)

        if may_be_65393:

            if more_types_in_union_65394:
                # Runtime conditional SSA (line 1025)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1026):
            
            # Assigning a Call to a Name (line 1026):
            
            # Call to arange(...): (line 1026)
            # Processing the call arguments (line 1026)
            int_65397 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 26), 'int')
            
            # Obtaining the type of the subscript
            int_65398 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 37), 'int')
            # Getting the type of 'A' (line 1026)
            A_65399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 29), 'A', False)
            # Obtaining the member 'shape' of a type (line 1026)
            shape_65400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 29), A_65399, 'shape')
            # Obtaining the member '__getitem__' of a type (line 1026)
            getitem___65401 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 29), shape_65400, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1026)
            subscript_call_result_65402 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 29), getitem___65401, int_65398)
            
            int_65403 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1026, 40), 'int')
            # Applying the binary operator '+' (line 1026)
            result_add_65404 = python_operator(stypy.reporting.localization.Localization(__file__, 1026, 29), '+', subscript_call_result_65402, int_65403)
            
            # Processing the call keyword arguments (line 1026)
            # Getting the type of 'np' (line 1026)
            np_65405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 49), 'np', False)
            # Obtaining the member 'float64' of a type (line 1026)
            float64_65406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 49), np_65405, 'float64')
            keyword_65407 = float64_65406
            kwargs_65408 = {'dtype': keyword_65407}
            # Getting the type of 'np' (line 1026)
            np_65395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1026, 16), 'np', False)
            # Obtaining the member 'arange' of a type (line 1026)
            arange_65396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1026, 16), np_65395, 'arange')
            # Calling arange(args, kwargs) (line 1026)
            arange_call_result_65409 = invoke(stypy.reporting.localization.Localization(__file__, 1026, 16), arange_65396, *[int_65397, result_add_65404], **kwargs_65408)
            
            # Assigning a type to the variable 'x' (line 1026)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1026, 12), 'x', arange_call_result_65409)

            if more_types_in_union_65394:
                # Runtime conditional SSA for else branch (line 1025)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_65393) or more_types_in_union_65394):
            
            # Assigning a Call to a Name (line 1028):
            
            # Assigning a Call to a Name (line 1028):
            
            # Call to ravel(...): (line 1028)
            # Processing the call keyword arguments (line 1028)
            kwargs_65418 = {}
            
            # Call to array(...): (line 1028)
            # Processing the call arguments (line 1028)
            # Getting the type of 'x' (line 1028)
            x_65412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 25), 'x', False)
            # Getting the type of 'np' (line 1028)
            np_65413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 28), 'np', False)
            # Obtaining the member 'float64' of a type (line 1028)
            float64_65414 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 28), np_65413, 'float64')
            # Processing the call keyword arguments (line 1028)
            kwargs_65415 = {}
            # Getting the type of 'np' (line 1028)
            np_65410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1028, 16), 'np', False)
            # Obtaining the member 'array' of a type (line 1028)
            array_65411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 16), np_65410, 'array')
            # Calling array(args, kwargs) (line 1028)
            array_call_result_65416 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 16), array_65411, *[x_65412, float64_65414], **kwargs_65415)
            
            # Obtaining the member 'ravel' of a type (line 1028)
            ravel_65417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1028, 16), array_call_result_65416, 'ravel')
            # Calling ravel(args, kwargs) (line 1028)
            ravel_call_result_65419 = invoke(stypy.reporting.localization.Localization(__file__, 1028, 16), ravel_65417, *[], **kwargs_65418)
            
            # Assigning a type to the variable 'x' (line 1028)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1028, 12), 'x', ravel_call_result_65419)

            if (may_be_65393 and more_types_in_union_65394):
                # SSA join for if statement (line 1025)
                module_type_store = module_type_store.join_ssa_context()


        
        
        # Type idiom detected: calculating its left and rigth part (line 1029)
        # Getting the type of 'y' (line 1029)
        y_65420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 11), 'y')
        # Getting the type of 'None' (line 1029)
        None_65421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1029, 16), 'None')
        
        (may_be_65422, more_types_in_union_65423) = may_be_none(y_65420, None_65421)

        if may_be_65422:

            if more_types_in_union_65423:
                # Runtime conditional SSA (line 1029)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 1030):
            
            # Assigning a Call to a Name (line 1030):
            
            # Call to arange(...): (line 1030)
            # Processing the call arguments (line 1030)
            int_65426 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 26), 'int')
            
            # Obtaining the type of the subscript
            int_65427 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 37), 'int')
            # Getting the type of 'A' (line 1030)
            A_65428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 29), 'A', False)
            # Obtaining the member 'shape' of a type (line 1030)
            shape_65429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 29), A_65428, 'shape')
            # Obtaining the member '__getitem__' of a type (line 1030)
            getitem___65430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 29), shape_65429, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1030)
            subscript_call_result_65431 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 29), getitem___65430, int_65427)
            
            int_65432 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1030, 40), 'int')
            # Applying the binary operator '+' (line 1030)
            result_add_65433 = python_operator(stypy.reporting.localization.Localization(__file__, 1030, 29), '+', subscript_call_result_65431, int_65432)
            
            # Processing the call keyword arguments (line 1030)
            # Getting the type of 'np' (line 1030)
            np_65434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 49), 'np', False)
            # Obtaining the member 'float64' of a type (line 1030)
            float64_65435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 49), np_65434, 'float64')
            keyword_65436 = float64_65435
            kwargs_65437 = {'dtype': keyword_65436}
            # Getting the type of 'np' (line 1030)
            np_65424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1030, 16), 'np', False)
            # Obtaining the member 'arange' of a type (line 1030)
            arange_65425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1030, 16), np_65424, 'arange')
            # Calling arange(args, kwargs) (line 1030)
            arange_call_result_65438 = invoke(stypy.reporting.localization.Localization(__file__, 1030, 16), arange_65425, *[int_65426, result_add_65433], **kwargs_65437)
            
            # Assigning a type to the variable 'y' (line 1030)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1030, 12), 'y', arange_call_result_65438)

            if more_types_in_union_65423:
                # Runtime conditional SSA for else branch (line 1029)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_65422) or more_types_in_union_65423):
            
            # Assigning a Call to a Name (line 1032):
            
            # Assigning a Call to a Name (line 1032):
            
            # Call to ravel(...): (line 1032)
            # Processing the call keyword arguments (line 1032)
            kwargs_65447 = {}
            
            # Call to array(...): (line 1032)
            # Processing the call arguments (line 1032)
            # Getting the type of 'y' (line 1032)
            y_65441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 25), 'y', False)
            # Getting the type of 'np' (line 1032)
            np_65442 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 28), 'np', False)
            # Obtaining the member 'float64' of a type (line 1032)
            float64_65443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 28), np_65442, 'float64')
            # Processing the call keyword arguments (line 1032)
            kwargs_65444 = {}
            # Getting the type of 'np' (line 1032)
            np_65439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1032, 16), 'np', False)
            # Obtaining the member 'array' of a type (line 1032)
            array_65440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 16), np_65439, 'array')
            # Calling array(args, kwargs) (line 1032)
            array_call_result_65445 = invoke(stypy.reporting.localization.Localization(__file__, 1032, 16), array_65440, *[y_65441, float64_65443], **kwargs_65444)
            
            # Obtaining the member 'ravel' of a type (line 1032)
            ravel_65446 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1032, 16), array_call_result_65445, 'ravel')
            # Calling ravel(args, kwargs) (line 1032)
            ravel_call_result_65448 = invoke(stypy.reporting.localization.Localization(__file__, 1032, 16), ravel_65446, *[], **kwargs_65447)
            
            # Assigning a type to the variable 'y' (line 1032)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1032, 12), 'y', ravel_call_result_65448)

            if (may_be_65422 and more_types_in_union_65423):
                # SSA join for if statement (line 1029)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        
        # Obtaining the type of the subscript
        int_65449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1034, 20), 'int')
        slice_65450 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1034, 11), None, int_65449, None)
        # Getting the type of 'A' (line 1034)
        A_65451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 11), 'A')
        # Obtaining the member 'shape' of a type (line 1034)
        shape_65452 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 11), A_65451, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1034)
        getitem___65453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 11), shape_65452, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1034)
        subscript_call_result_65454 = invoke(stypy.reporting.localization.Localization(__file__, 1034, 11), getitem___65453, slice_65450)
        
        
        # Obtaining an instance of the builtin type 'tuple' (line 1034)
        tuple_65455 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1034, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1034)
        # Adding element type (line 1034)
        # Getting the type of 'y' (line 1034)
        y_65456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 27), 'y')
        # Obtaining the member 'size' of a type (line 1034)
        size_65457 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 27), y_65456, 'size')
        int_65458 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1034, 34), 'int')
        # Applying the binary operator '-' (line 1034)
        result_sub_65459 = python_operator(stypy.reporting.localization.Localization(__file__, 1034, 27), '-', size_65457, int_65458)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1034, 27), tuple_65455, result_sub_65459)
        # Adding element type (line 1034)
        # Getting the type of 'x' (line 1034)
        x_65460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1034, 37), 'x')
        # Obtaining the member 'size' of a type (line 1034)
        size_65461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1034, 37), x_65460, 'size')
        int_65462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1034, 44), 'int')
        # Applying the binary operator '-' (line 1034)
        result_sub_65463 = python_operator(stypy.reporting.localization.Localization(__file__, 1034, 37), '-', size_65461, int_65462)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1034, 27), tuple_65455, result_sub_65463)
        
        # Applying the binary operator '!=' (line 1034)
        result_ne_65464 = python_operator(stypy.reporting.localization.Localization(__file__, 1034, 11), '!=', subscript_call_result_65454, tuple_65455)
        
        # Testing the type of an if condition (line 1034)
        if_condition_65465 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1034, 8), result_ne_65464)
        # Assigning a type to the variable 'if_condition_65465' (line 1034)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1034, 8), 'if_condition_65465', if_condition_65465)
        # SSA begins for if statement (line 1034)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1035)
        # Processing the call arguments (line 1035)
        unicode_65467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1036, 16), 'unicode', u"Axes don't match array shape. Got %s, expected %s.")
        
        # Obtaining an instance of the builtin type 'tuple' (line 1037)
        tuple_65468 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 17), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1037)
        # Adding element type (line 1037)
        
        # Obtaining the type of the subscript
        int_65469 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 26), 'int')
        slice_65470 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1037, 17), None, int_65469, None)
        # Getting the type of 'A' (line 1037)
        A_65471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 17), 'A', False)
        # Obtaining the member 'shape' of a type (line 1037)
        shape_65472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 17), A_65471, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1037)
        getitem___65473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 17), shape_65472, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1037)
        subscript_call_result_65474 = invoke(stypy.reporting.localization.Localization(__file__, 1037, 17), getitem___65473, slice_65470)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1037, 17), tuple_65468, subscript_call_result_65474)
        # Adding element type (line 1037)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1037)
        tuple_65475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 31), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1037)
        # Adding element type (line 1037)
        # Getting the type of 'y' (line 1037)
        y_65476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 31), 'y', False)
        # Obtaining the member 'size' of a type (line 1037)
        size_65477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 31), y_65476, 'size')
        int_65478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 40), 'int')
        # Applying the binary operator '-' (line 1037)
        result_sub_65479 = python_operator(stypy.reporting.localization.Localization(__file__, 1037, 31), '-', size_65477, int_65478)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1037, 31), tuple_65475, result_sub_65479)
        # Adding element type (line 1037)
        # Getting the type of 'x' (line 1037)
        x_65480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1037, 43), 'x', False)
        # Obtaining the member 'size' of a type (line 1037)
        size_65481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1037, 43), x_65480, 'size')
        int_65482 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, 52), 'int')
        # Applying the binary operator '-' (line 1037)
        result_sub_65483 = python_operator(stypy.reporting.localization.Localization(__file__, 1037, 43), '-', size_65481, int_65482)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1037, 31), tuple_65475, result_sub_65483)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1037, 17), tuple_65468, tuple_65475)
        
        # Applying the binary operator '%' (line 1036)
        result_mod_65484 = python_operator(stypy.reporting.localization.Localization(__file__, 1036, 16), '%', unicode_65467, tuple_65468)
        
        # Processing the call keyword arguments (line 1035)
        kwargs_65485 = {}
        # Getting the type of 'ValueError' (line 1035)
        ValueError_65466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1035, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1035)
        ValueError_call_result_65486 = invoke(stypy.reporting.localization.Localization(__file__, 1035, 18), ValueError_65466, *[result_mod_65484], **kwargs_65485)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1035, 12), ValueError_call_result_65486, 'raise parameter', BaseException)
        # SSA join for if statement (line 1034)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Getting the type of 'A' (line 1038)
        A_65487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1038, 11), 'A')
        # Obtaining the member 'ndim' of a type (line 1038)
        ndim_65488 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1038, 11), A_65487, 'ndim')
        
        # Obtaining an instance of the builtin type 'list' (line 1038)
        list_65489 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, 25), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1038)
        # Adding element type (line 1038)
        int_65490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, 26), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1038, 25), list_65489, int_65490)
        # Adding element type (line 1038)
        int_65491 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1038, 29), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1038, 25), list_65489, int_65491)
        
        # Applying the binary operator 'notin' (line 1038)
        result_contains_65492 = python_operator(stypy.reporting.localization.Localization(__file__, 1038, 11), 'notin', ndim_65488, list_65489)
        
        # Testing the type of an if condition (line 1038)
        if_condition_65493 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1038, 8), result_contains_65492)
        # Assigning a type to the variable 'if_condition_65493' (line 1038)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1038, 8), 'if_condition_65493', if_condition_65493)
        # SSA begins for if statement (line 1038)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to ValueError(...): (line 1039)
        # Processing the call arguments (line 1039)
        unicode_65495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 29), 'unicode', u'A must be 2D or 3D')
        # Processing the call keyword arguments (line 1039)
        kwargs_65496 = {}
        # Getting the type of 'ValueError' (line 1039)
        ValueError_65494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1039)
        ValueError_call_result_65497 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 18), ValueError_65494, *[unicode_65495], **kwargs_65496)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1039, 12), ValueError_call_result_65497, 'raise parameter', BaseException)
        # SSA join for if statement (line 1038)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'A' (line 1040)
        A_65498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 11), 'A')
        # Obtaining the member 'ndim' of a type (line 1040)
        ndim_65499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 11), A_65498, 'ndim')
        int_65500 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 21), 'int')
        # Applying the binary operator '==' (line 1040)
        result_eq_65501 = python_operator(stypy.reporting.localization.Localization(__file__, 1040, 11), '==', ndim_65499, int_65500)
        
        
        
        # Obtaining the type of the subscript
        int_65502 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 35), 'int')
        # Getting the type of 'A' (line 1040)
        A_65503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1040, 27), 'A')
        # Obtaining the member 'shape' of a type (line 1040)
        shape_65504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 27), A_65503, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1040)
        getitem___65505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1040, 27), shape_65504, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1040)
        subscript_call_result_65506 = invoke(stypy.reporting.localization.Localization(__file__, 1040, 27), getitem___65505, int_65502)
        
        int_65507 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 41), 'int')
        # Applying the binary operator '==' (line 1040)
        result_eq_65508 = python_operator(stypy.reporting.localization.Localization(__file__, 1040, 27), '==', subscript_call_result_65506, int_65507)
        
        # Applying the binary operator 'and' (line 1040)
        result_and_keyword_65509 = python_operator(stypy.reporting.localization.Localization(__file__, 1040, 11), 'and', result_eq_65501, result_eq_65508)
        
        # Testing the type of an if condition (line 1040)
        if_condition_65510 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1040, 8), result_and_keyword_65509)
        # Assigning a type to the variable 'if_condition_65510' (line 1040)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 8), 'if_condition_65510', if_condition_65510)
        # SSA begins for if statement (line 1040)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Attribute (line 1041):
        
        # Assigning a Subscript to a Attribute (line 1041):
        
        # Obtaining the type of the subscript
        int_65511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1041, 31), 'int')
        slice_65512 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1041, 22), None, int_65511, None)
        # Getting the type of 'A' (line 1041)
        A_65513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 22), 'A')
        # Obtaining the member 'shape' of a type (line 1041)
        shape_65514 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 22), A_65513, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1041)
        getitem___65515 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 22), shape_65514, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1041)
        subscript_call_result_65516 = invoke(stypy.reporting.localization.Localization(__file__, 1041, 22), getitem___65515, slice_65512)
        
        # Getting the type of 'A' (line 1041)
        A_65517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1041, 12), 'A')
        # Setting the type of the member 'shape' of a type (line 1041)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1041, 12), A_65517, 'shape', subscript_call_result_65516)
        # SSA join for if statement (line 1040)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1042):
        
        # Assigning a Name to a Attribute (line 1042):
        # Getting the type of 'False' (line 1042)
        False_65518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 28), 'False')
        # Getting the type of 'self' (line 1042)
        self_65519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1042, 8), 'self')
        # Setting the type of the member 'is_grayscale' of a type (line 1042)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1042, 8), self_65519, 'is_grayscale', False_65518)
        
        
        # Getting the type of 'A' (line 1043)
        A_65520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1043, 11), 'A')
        # Obtaining the member 'ndim' of a type (line 1043)
        ndim_65521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1043, 11), A_65520, 'ndim')
        int_65522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1043, 21), 'int')
        # Applying the binary operator '==' (line 1043)
        result_eq_65523 = python_operator(stypy.reporting.localization.Localization(__file__, 1043, 11), '==', ndim_65521, int_65522)
        
        # Testing the type of an if condition (line 1043)
        if_condition_65524 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1043, 8), result_eq_65523)
        # Assigning a type to the variable 'if_condition_65524' (line 1043)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1043, 8), 'if_condition_65524', if_condition_65524)
        # SSA begins for if statement (line 1043)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        
        # Obtaining the type of the subscript
        int_65525 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 23), 'int')
        # Getting the type of 'A' (line 1044)
        A_65526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1044, 15), 'A')
        # Obtaining the member 'shape' of a type (line 1044)
        shape_65527 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 15), A_65526, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1044)
        getitem___65528 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1044, 15), shape_65527, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1044)
        subscript_call_result_65529 = invoke(stypy.reporting.localization.Localization(__file__, 1044, 15), getitem___65528, int_65525)
        
        
        # Obtaining an instance of the builtin type 'list' (line 1044)
        list_65530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1044)
        # Adding element type (line 1044)
        int_65531 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 30), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1044, 29), list_65530, int_65531)
        # Adding element type (line 1044)
        int_65532 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1044, 33), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1044, 29), list_65530, int_65532)
        
        # Applying the binary operator 'in' (line 1044)
        result_contains_65533 = python_operator(stypy.reporting.localization.Localization(__file__, 1044, 15), 'in', subscript_call_result_65529, list_65530)
        
        # Testing the type of an if condition (line 1044)
        if_condition_65534 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1044, 12), result_contains_65533)
        # Assigning a type to the variable 'if_condition_65534' (line 1044)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1044, 12), 'if_condition_65534', if_condition_65534)
        # SSA begins for if statement (line 1044)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Evaluating a boolean operation
        
        # Call to all(...): (line 1045)
        # Processing the call keyword arguments (line 1045)
        kwargs_65549 = {}
        
        
        # Obtaining the type of the subscript
        slice_65535 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1045, 21), None, None, None)
        slice_65536 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1045, 21), None, None, None)
        int_65537 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 29), 'int')
        # Getting the type of 'A' (line 1045)
        A_65538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 21), 'A', False)
        # Obtaining the member '__getitem__' of a type (line 1045)
        getitem___65539 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 21), A_65538, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1045)
        subscript_call_result_65540 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 21), getitem___65539, (slice_65535, slice_65536, int_65537))
        
        
        # Obtaining the type of the subscript
        slice_65541 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1045, 35), None, None, None)
        slice_65542 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1045, 35), None, None, None)
        int_65543 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1045, 43), 'int')
        # Getting the type of 'A' (line 1045)
        A_65544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1045, 35), 'A', False)
        # Obtaining the member '__getitem__' of a type (line 1045)
        getitem___65545 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 35), A_65544, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1045)
        subscript_call_result_65546 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 35), getitem___65545, (slice_65541, slice_65542, int_65543))
        
        # Applying the binary operator '==' (line 1045)
        result_eq_65547 = python_operator(stypy.reporting.localization.Localization(__file__, 1045, 21), '==', subscript_call_result_65540, subscript_call_result_65546)
        
        # Obtaining the member 'all' of a type (line 1045)
        all_65548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1045, 21), result_eq_65547, 'all')
        # Calling all(args, kwargs) (line 1045)
        all_call_result_65550 = invoke(stypy.reporting.localization.Localization(__file__, 1045, 21), all_65548, *[], **kwargs_65549)
        
        
        # Call to all(...): (line 1046)
        # Processing the call keyword arguments (line 1046)
        kwargs_65565 = {}
        
        
        # Obtaining the type of the subscript
        slice_65551 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1046, 25), None, None, None)
        slice_65552 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1046, 25), None, None, None)
        int_65553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 33), 'int')
        # Getting the type of 'A' (line 1046)
        A_65554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 25), 'A', False)
        # Obtaining the member '__getitem__' of a type (line 1046)
        getitem___65555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 25), A_65554, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1046)
        subscript_call_result_65556 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 25), getitem___65555, (slice_65551, slice_65552, int_65553))
        
        
        # Obtaining the type of the subscript
        slice_65557 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1046, 39), None, None, None)
        slice_65558 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1046, 39), None, None, None)
        int_65559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1046, 47), 'int')
        # Getting the type of 'A' (line 1046)
        A_65560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1046, 39), 'A', False)
        # Obtaining the member '__getitem__' of a type (line 1046)
        getitem___65561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 39), A_65560, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1046)
        subscript_call_result_65562 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 39), getitem___65561, (slice_65557, slice_65558, int_65559))
        
        # Applying the binary operator '==' (line 1046)
        result_eq_65563 = python_operator(stypy.reporting.localization.Localization(__file__, 1046, 25), '==', subscript_call_result_65556, subscript_call_result_65562)
        
        # Obtaining the member 'all' of a type (line 1046)
        all_65564 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1046, 25), result_eq_65563, 'all')
        # Calling all(args, kwargs) (line 1046)
        all_call_result_65566 = invoke(stypy.reporting.localization.Localization(__file__, 1046, 25), all_65564, *[], **kwargs_65565)
        
        # Applying the binary operator 'and' (line 1045)
        result_and_keyword_65567 = python_operator(stypy.reporting.localization.Localization(__file__, 1045, 20), 'and', all_call_result_65550, all_call_result_65566)
        
        # Testing the type of an if condition (line 1045)
        if_condition_65568 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1045, 16), result_and_keyword_65567)
        # Assigning a type to the variable 'if_condition_65568' (line 1045)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1045, 16), 'if_condition_65568', if_condition_65568)
        # SSA begins for if statement (line 1045)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 1047):
        
        # Assigning a Name to a Attribute (line 1047):
        # Getting the type of 'True' (line 1047)
        True_65569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 40), 'True')
        # Getting the type of 'self' (line 1047)
        self_65570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1047, 20), 'self')
        # Setting the type of the member 'is_grayscale' of a type (line 1047)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1047, 20), self_65570, 'is_grayscale', True_65569)
        # SSA join for if statement (line 1045)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1044)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1049)
        # Processing the call arguments (line 1049)
        unicode_65572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 33), 'unicode', u'3D arrays must have RGB or RGBA as last dim')
        # Processing the call keyword arguments (line 1049)
        kwargs_65573 = {}
        # Getting the type of 'ValueError' (line 1049)
        ValueError_65571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 22), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1049)
        ValueError_call_result_65574 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 22), ValueError_65571, *[unicode_65572], **kwargs_65573)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1049, 16), ValueError_call_result_65574, 'raise parameter', BaseException)
        # SSA join for if statement (line 1044)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1043)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_65575 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 13), 'int')
        # Getting the type of 'x' (line 1052)
        x_65576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 11), 'x')
        # Obtaining the member '__getitem__' of a type (line 1052)
        getitem___65577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 11), x_65576, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1052)
        subscript_call_result_65578 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 11), getitem___65577, int_65575)
        
        
        # Obtaining the type of the subscript
        int_65579 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1052, 21), 'int')
        # Getting the type of 'x' (line 1052)
        x_65580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 19), 'x')
        # Obtaining the member '__getitem__' of a type (line 1052)
        getitem___65581 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1052, 19), x_65580, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1052)
        subscript_call_result_65582 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 19), getitem___65581, int_65579)
        
        # Applying the binary operator '<' (line 1052)
        result_lt_65583 = python_operator(stypy.reporting.localization.Localization(__file__, 1052, 11), '<', subscript_call_result_65578, subscript_call_result_65582)
        
        # Testing the type of an if condition (line 1052)
        if_condition_65584 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1052, 8), result_lt_65583)
        # Assigning a type to the variable 'if_condition_65584' (line 1052)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 8), 'if_condition_65584', if_condition_65584)
        # SSA begins for if statement (line 1052)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1053):
        
        # Assigning a Subscript to a Name (line 1053):
        
        # Obtaining the type of the subscript
        int_65585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1053, 20), 'int')
        slice_65586 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1053, 16), None, None, int_65585)
        # Getting the type of 'x' (line 1053)
        x_65587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 16), 'x')
        # Obtaining the member '__getitem__' of a type (line 1053)
        getitem___65588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 16), x_65587, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1053)
        subscript_call_result_65589 = invoke(stypy.reporting.localization.Localization(__file__, 1053, 16), getitem___65588, slice_65586)
        
        # Assigning a type to the variable 'x' (line 1053)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 12), 'x', subscript_call_result_65589)
        
        # Assigning a Subscript to a Name (line 1054):
        
        # Assigning a Subscript to a Name (line 1054):
        
        # Obtaining the type of the subscript
        slice_65590 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1054, 16), None, None, None)
        int_65591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1054, 23), 'int')
        slice_65592 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1054, 16), None, None, int_65591)
        # Getting the type of 'A' (line 1054)
        A_65593 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 16), 'A')
        # Obtaining the member '__getitem__' of a type (line 1054)
        getitem___65594 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 16), A_65593, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1054)
        subscript_call_result_65595 = invoke(stypy.reporting.localization.Localization(__file__, 1054, 16), getitem___65594, (slice_65590, slice_65592))
        
        # Assigning a type to the variable 'A' (line 1054)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1054, 12), 'A', subscript_call_result_65595)
        # SSA join for if statement (line 1052)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Obtaining the type of the subscript
        int_65596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1055, 13), 'int')
        # Getting the type of 'y' (line 1055)
        y_65597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 11), 'y')
        # Obtaining the member '__getitem__' of a type (line 1055)
        getitem___65598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1055, 11), y_65597, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1055)
        subscript_call_result_65599 = invoke(stypy.reporting.localization.Localization(__file__, 1055, 11), getitem___65598, int_65596)
        
        
        # Obtaining the type of the subscript
        int_65600 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1055, 21), 'int')
        # Getting the type of 'y' (line 1055)
        y_65601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1055, 19), 'y')
        # Obtaining the member '__getitem__' of a type (line 1055)
        getitem___65602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1055, 19), y_65601, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1055)
        subscript_call_result_65603 = invoke(stypy.reporting.localization.Localization(__file__, 1055, 19), getitem___65602, int_65600)
        
        # Applying the binary operator '<' (line 1055)
        result_lt_65604 = python_operator(stypy.reporting.localization.Localization(__file__, 1055, 11), '<', subscript_call_result_65599, subscript_call_result_65603)
        
        # Testing the type of an if condition (line 1055)
        if_condition_65605 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1055, 8), result_lt_65604)
        # Assigning a type to the variable 'if_condition_65605' (line 1055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 8), 'if_condition_65605', if_condition_65605)
        # SSA begins for if statement (line 1055)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 1056):
        
        # Assigning a Subscript to a Name (line 1056):
        
        # Obtaining the type of the subscript
        int_65606 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1056, 20), 'int')
        slice_65607 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1056, 16), None, None, int_65606)
        # Getting the type of 'y' (line 1056)
        y_65608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 16), 'y')
        # Obtaining the member '__getitem__' of a type (line 1056)
        getitem___65609 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 16), y_65608, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1056)
        subscript_call_result_65610 = invoke(stypy.reporting.localization.Localization(__file__, 1056, 16), getitem___65609, slice_65607)
        
        # Assigning a type to the variable 'y' (line 1056)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 12), 'y', subscript_call_result_65610)
        
        # Assigning a Subscript to a Name (line 1057):
        
        # Assigning a Subscript to a Name (line 1057):
        
        # Obtaining the type of the subscript
        int_65611 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1057, 20), 'int')
        slice_65612 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1057, 16), None, None, int_65611)
        # Getting the type of 'A' (line 1057)
        A_65613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 16), 'A')
        # Obtaining the member '__getitem__' of a type (line 1057)
        getitem___65614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1057, 16), A_65613, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1057)
        subscript_call_result_65615 = invoke(stypy.reporting.localization.Localization(__file__, 1057, 16), getitem___65614, slice_65612)
        
        # Assigning a type to the variable 'A' (line 1057)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 12), 'A', subscript_call_result_65615)
        # SSA join for if statement (line 1055)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Attribute (line 1059):
        
        # Assigning a Name to a Attribute (line 1059):
        # Getting the type of 'A' (line 1059)
        A_65616 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 18), 'A')
        # Getting the type of 'self' (line 1059)
        self_65617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 8), 'self')
        # Setting the type of the member '_A' of a type (line 1059)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1059, 8), self_65617, '_A', A_65616)
        
        # Assigning a Name to a Attribute (line 1060):
        
        # Assigning a Name to a Attribute (line 1060):
        # Getting the type of 'x' (line 1060)
        x_65618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 19), 'x')
        # Getting the type of 'self' (line 1060)
        self_65619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 8), 'self')
        # Setting the type of the member '_Ax' of a type (line 1060)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1060, 8), self_65619, '_Ax', x_65618)
        
        # Assigning a Name to a Attribute (line 1061):
        
        # Assigning a Name to a Attribute (line 1061):
        # Getting the type of 'y' (line 1061)
        y_65620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 19), 'y')
        # Getting the type of 'self' (line 1061)
        self_65621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1061, 8), 'self')
        # Setting the type of the member '_Ay' of a type (line 1061)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1061, 8), self_65621, '_Ay', y_65620)
        
        # Assigning a Name to a Attribute (line 1062):
        
        # Assigning a Name to a Attribute (line 1062):
        # Getting the type of 'None' (line 1062)
        None_65622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 26), 'None')
        # Getting the type of 'self' (line 1062)
        self_65623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 8), 'self')
        # Setting the type of the member '_rgbacache' of a type (line 1062)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1062, 8), self_65623, '_rgbacache', None_65622)
        
        # Assigning a Name to a Attribute (line 1063):
        
        # Assigning a Name to a Attribute (line 1063):
        # Getting the type of 'True' (line 1063)
        True_65624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 21), 'True')
        # Getting the type of 'self' (line 1063)
        self_65625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1063, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1063)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1063, 8), self_65625, 'stale', True_65624)
        
        # ################# End of 'set_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data' in the type store
        # Getting the type of 'stypy_return_type' (line 1010)
        stypy_return_type_65626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1010, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65626)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data'
        return stypy_return_type_65626


    @norecursion
    def set_array(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_array'
        module_type_store = module_type_store.open_function_context('set_array', 1065, 4, False)
        # Assigning a type to the variable 'self' (line 1066)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1066, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PcolorImage.set_array.__dict__.__setitem__('stypy_localization', localization)
        PcolorImage.set_array.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PcolorImage.set_array.__dict__.__setitem__('stypy_type_store', module_type_store)
        PcolorImage.set_array.__dict__.__setitem__('stypy_function_name', 'PcolorImage.set_array')
        PcolorImage.set_array.__dict__.__setitem__('stypy_param_names_list', [])
        PcolorImage.set_array.__dict__.__setitem__('stypy_varargs_param_name', 'args')
        PcolorImage.set_array.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PcolorImage.set_array.__dict__.__setitem__('stypy_call_defaults', defaults)
        PcolorImage.set_array.__dict__.__setitem__('stypy_call_varargs', varargs)
        PcolorImage.set_array.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PcolorImage.set_array.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PcolorImage.set_array', [], 'args', None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_array', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_array(...)' code ##################

        
        # Call to NotImplementedError(...): (line 1066)
        # Processing the call arguments (line 1066)
        unicode_65628 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1066, 34), 'unicode', u'Method not supported')
        # Processing the call keyword arguments (line 1066)
        kwargs_65629 = {}
        # Getting the type of 'NotImplementedError' (line 1066)
        NotImplementedError_65627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 14), 'NotImplementedError', False)
        # Calling NotImplementedError(args, kwargs) (line 1066)
        NotImplementedError_call_result_65630 = invoke(stypy.reporting.localization.Localization(__file__, 1066, 14), NotImplementedError_65627, *[unicode_65628], **kwargs_65629)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1066, 8), NotImplementedError_call_result_65630, 'raise parameter', BaseException)
        
        # ################# End of 'set_array(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_array' in the type store
        # Getting the type of 'stypy_return_type' (line 1065)
        stypy_return_type_65631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65631)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_array'
        return stypy_return_type_65631


    @norecursion
    def get_cursor_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_cursor_data'
        module_type_store = module_type_store.open_function_context('get_cursor_data', 1068, 4, False)
        # Assigning a type to the variable 'self' (line 1069)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1069, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        PcolorImage.get_cursor_data.__dict__.__setitem__('stypy_localization', localization)
        PcolorImage.get_cursor_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        PcolorImage.get_cursor_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        PcolorImage.get_cursor_data.__dict__.__setitem__('stypy_function_name', 'PcolorImage.get_cursor_data')
        PcolorImage.get_cursor_data.__dict__.__setitem__('stypy_param_names_list', ['event'])
        PcolorImage.get_cursor_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        PcolorImage.get_cursor_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        PcolorImage.get_cursor_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        PcolorImage.get_cursor_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        PcolorImage.get_cursor_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        PcolorImage.get_cursor_data.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'PcolorImage.get_cursor_data', ['event'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_cursor_data', localization, ['event'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_cursor_data(...)' code ##################

        unicode_65632 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1069, 8), 'unicode', u'Get the cursor data for a given event')
        
        # Assigning a Tuple to a Tuple (line 1070):
        
        # Assigning a Attribute to a Name (line 1070):
        # Getting the type of 'event' (line 1070)
        event_65633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 15), 'event')
        # Obtaining the member 'xdata' of a type (line 1070)
        xdata_65634 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 15), event_65633, 'xdata')
        # Assigning a type to the variable 'tuple_assignment_62369' (line 1070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 8), 'tuple_assignment_62369', xdata_65634)
        
        # Assigning a Attribute to a Name (line 1070):
        # Getting the type of 'event' (line 1070)
        event_65635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 28), 'event')
        # Obtaining the member 'ydata' of a type (line 1070)
        ydata_65636 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1070, 28), event_65635, 'ydata')
        # Assigning a type to the variable 'tuple_assignment_62370' (line 1070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 8), 'tuple_assignment_62370', ydata_65636)
        
        # Assigning a Name to a Name (line 1070):
        # Getting the type of 'tuple_assignment_62369' (line 1070)
        tuple_assignment_62369_65637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 8), 'tuple_assignment_62369')
        # Assigning a type to the variable 'x' (line 1070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 8), 'x', tuple_assignment_62369_65637)
        
        # Assigning a Name to a Name (line 1070):
        # Getting the type of 'tuple_assignment_62370' (line 1070)
        tuple_assignment_62370_65638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1070, 8), 'tuple_assignment_62370')
        # Assigning a type to the variable 'y' (line 1070)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1070, 11), 'y', tuple_assignment_62370_65638)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'x' (line 1071)
        x_65639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 12), 'x')
        
        # Obtaining the type of the subscript
        int_65640 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1071, 25), 'int')
        # Getting the type of 'self' (line 1071)
        self_65641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 16), 'self')
        # Obtaining the member '_Ax' of a type (line 1071)
        _Ax_65642 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1071, 16), self_65641, '_Ax')
        # Obtaining the member '__getitem__' of a type (line 1071)
        getitem___65643 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1071, 16), _Ax_65642, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1071)
        subscript_call_result_65644 = invoke(stypy.reporting.localization.Localization(__file__, 1071, 16), getitem___65643, int_65640)
        
        # Applying the binary operator '<' (line 1071)
        result_lt_65645 = python_operator(stypy.reporting.localization.Localization(__file__, 1071, 12), '<', x_65639, subscript_call_result_65644)
        
        
        # Getting the type of 'x' (line 1071)
        x_65646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 31), 'x')
        
        # Obtaining the type of the subscript
        int_65647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1071, 44), 'int')
        # Getting the type of 'self' (line 1071)
        self_65648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1071, 35), 'self')
        # Obtaining the member '_Ax' of a type (line 1071)
        _Ax_65649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1071, 35), self_65648, '_Ax')
        # Obtaining the member '__getitem__' of a type (line 1071)
        getitem___65650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1071, 35), _Ax_65649, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1071)
        subscript_call_result_65651 = invoke(stypy.reporting.localization.Localization(__file__, 1071, 35), getitem___65650, int_65647)
        
        # Applying the binary operator '>' (line 1071)
        result_gt_65652 = python_operator(stypy.reporting.localization.Localization(__file__, 1071, 31), '>', x_65646, subscript_call_result_65651)
        
        # Applying the binary operator 'or' (line 1071)
        result_or_keyword_65653 = python_operator(stypy.reporting.localization.Localization(__file__, 1071, 12), 'or', result_lt_65645, result_gt_65652)
        
        # Getting the type of 'y' (line 1072)
        y_65654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 16), 'y')
        
        # Obtaining the type of the subscript
        int_65655 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1072, 29), 'int')
        # Getting the type of 'self' (line 1072)
        self_65656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 20), 'self')
        # Obtaining the member '_Ay' of a type (line 1072)
        _Ay_65657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 20), self_65656, '_Ay')
        # Obtaining the member '__getitem__' of a type (line 1072)
        getitem___65658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 20), _Ay_65657, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1072)
        subscript_call_result_65659 = invoke(stypy.reporting.localization.Localization(__file__, 1072, 20), getitem___65658, int_65655)
        
        # Applying the binary operator '<' (line 1072)
        result_lt_65660 = python_operator(stypy.reporting.localization.Localization(__file__, 1072, 16), '<', y_65654, subscript_call_result_65659)
        
        # Applying the binary operator 'or' (line 1071)
        result_or_keyword_65661 = python_operator(stypy.reporting.localization.Localization(__file__, 1071, 12), 'or', result_or_keyword_65653, result_lt_65660)
        
        # Getting the type of 'y' (line 1072)
        y_65662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 35), 'y')
        
        # Obtaining the type of the subscript
        int_65663 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1072, 48), 'int')
        # Getting the type of 'self' (line 1072)
        self_65664 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1072, 39), 'self')
        # Obtaining the member '_Ay' of a type (line 1072)
        _Ay_65665 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 39), self_65664, '_Ay')
        # Obtaining the member '__getitem__' of a type (line 1072)
        getitem___65666 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1072, 39), _Ay_65665, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1072)
        subscript_call_result_65667 = invoke(stypy.reporting.localization.Localization(__file__, 1072, 39), getitem___65666, int_65663)
        
        # Applying the binary operator '>' (line 1072)
        result_gt_65668 = python_operator(stypy.reporting.localization.Localization(__file__, 1072, 35), '>', y_65662, subscript_call_result_65667)
        
        # Applying the binary operator 'or' (line 1071)
        result_or_keyword_65669 = python_operator(stypy.reporting.localization.Localization(__file__, 1071, 12), 'or', result_or_keyword_65661, result_gt_65668)
        
        # Testing the type of an if condition (line 1071)
        if_condition_65670 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1071, 8), result_or_keyword_65669)
        # Assigning a type to the variable 'if_condition_65670' (line 1071)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1071, 8), 'if_condition_65670', if_condition_65670)
        # SSA begins for if statement (line 1071)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'None' (line 1073)
        None_65671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1073, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1073)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1073, 12), 'stypy_return_type', None_65671)
        # SSA join for if statement (line 1071)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a BinOp to a Name (line 1074):
        
        # Assigning a BinOp to a Name (line 1074):
        
        # Call to searchsorted(...): (line 1074)
        # Processing the call arguments (line 1074)
        # Getting the type of 'self' (line 1074)
        self_65674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 28), 'self', False)
        # Obtaining the member '_Ax' of a type (line 1074)
        _Ax_65675 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 28), self_65674, '_Ax')
        # Getting the type of 'x' (line 1074)
        x_65676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 38), 'x', False)
        # Processing the call keyword arguments (line 1074)
        kwargs_65677 = {}
        # Getting the type of 'np' (line 1074)
        np_65672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1074, 12), 'np', False)
        # Obtaining the member 'searchsorted' of a type (line 1074)
        searchsorted_65673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1074, 12), np_65672, 'searchsorted')
        # Calling searchsorted(args, kwargs) (line 1074)
        searchsorted_call_result_65678 = invoke(stypy.reporting.localization.Localization(__file__, 1074, 12), searchsorted_65673, *[_Ax_65675, x_65676], **kwargs_65677)
        
        int_65679 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1074, 43), 'int')
        # Applying the binary operator '-' (line 1074)
        result_sub_65680 = python_operator(stypy.reporting.localization.Localization(__file__, 1074, 12), '-', searchsorted_call_result_65678, int_65679)
        
        # Assigning a type to the variable 'j' (line 1074)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1074, 8), 'j', result_sub_65680)
        
        # Assigning a BinOp to a Name (line 1075):
        
        # Assigning a BinOp to a Name (line 1075):
        
        # Call to searchsorted(...): (line 1075)
        # Processing the call arguments (line 1075)
        # Getting the type of 'self' (line 1075)
        self_65683 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 28), 'self', False)
        # Obtaining the member '_Ay' of a type (line 1075)
        _Ay_65684 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 28), self_65683, '_Ay')
        # Getting the type of 'y' (line 1075)
        y_65685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 38), 'y', False)
        # Processing the call keyword arguments (line 1075)
        kwargs_65686 = {}
        # Getting the type of 'np' (line 1075)
        np_65681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1075, 12), 'np', False)
        # Obtaining the member 'searchsorted' of a type (line 1075)
        searchsorted_65682 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1075, 12), np_65681, 'searchsorted')
        # Calling searchsorted(args, kwargs) (line 1075)
        searchsorted_call_result_65687 = invoke(stypy.reporting.localization.Localization(__file__, 1075, 12), searchsorted_65682, *[_Ay_65684, y_65685], **kwargs_65686)
        
        int_65688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1075, 43), 'int')
        # Applying the binary operator '-' (line 1075)
        result_sub_65689 = python_operator(stypy.reporting.localization.Localization(__file__, 1075, 12), '-', searchsorted_call_result_65687, int_65688)
        
        # Assigning a type to the variable 'i' (line 1075)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1075, 8), 'i', result_sub_65689)
        
        
        # SSA begins for try-except statement (line 1076)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        
        # Obtaining the type of the subscript
        
        # Obtaining an instance of the builtin type 'tuple' (line 1077)
        tuple_65690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1077, 27), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1077)
        # Adding element type (line 1077)
        # Getting the type of 'i' (line 1077)
        i_65691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 27), 'i')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1077, 27), tuple_65690, i_65691)
        # Adding element type (line 1077)
        # Getting the type of 'j' (line 1077)
        j_65692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 30), 'j')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1077, 27), tuple_65690, j_65692)
        
        # Getting the type of 'self' (line 1077)
        self_65693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1077, 19), 'self')
        # Obtaining the member '_A' of a type (line 1077)
        _A_65694 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 19), self_65693, '_A')
        # Obtaining the member '__getitem__' of a type (line 1077)
        getitem___65695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1077, 19), _A_65694, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1077)
        subscript_call_result_65696 = invoke(stypy.reporting.localization.Localization(__file__, 1077, 19), getitem___65695, tuple_65690)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1077)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1077, 12), 'stypy_return_type', subscript_call_result_65696)
        # SSA branch for the except part of a try statement (line 1076)
        # SSA branch for the except 'IndexError' branch of a try statement (line 1076)
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'None' (line 1079)
        None_65697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1079, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1079)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1079, 12), 'stypy_return_type', None_65697)
        # SSA join for try-except statement (line 1076)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_cursor_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_cursor_data' in the type store
        # Getting the type of 'stypy_return_type' (line 1068)
        stypy_return_type_65698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1068, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65698)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_cursor_data'
        return stypy_return_type_65698


# Assigning a type to the variable 'PcolorImage' (line 950)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 950, 0), 'PcolorImage', PcolorImage)
# Declaration of the 'FigureImage' class
# Getting the type of '_ImageBase' (line 1082)
_ImageBase_65699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1082, 18), '_ImageBase')

class FigureImage(_ImageBase_65699, ):
    
    # Assigning a Num to a Name (line 1083):
    
    # Assigning a Str to a Name (line 1085):

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1088)
        None_65700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1088, 22), 'None')
        # Getting the type of 'None' (line 1089)
        None_65701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1089, 22), 'None')
        int_65702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1090, 25), 'int')
        int_65703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1091, 25), 'int')
        # Getting the type of 'None' (line 1092)
        None_65704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1092, 24), 'None')
        defaults = [None_65700, None_65701, int_65702, int_65703, None_65704]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1087, 4, False)
        # Assigning a type to the variable 'self' (line 1088)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1088, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureImage.__init__', ['fig', 'cmap', 'norm', 'offsetx', 'offsety', 'origin'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['fig', 'cmap', 'norm', 'offsetx', 'offsety', 'origin'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_65705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1100, (-1)), 'unicode', u'\n        cmap is a colors.Colormap instance\n        norm is a colors.Normalize instance to map luminance to 0-1\n\n        kwargs are an optional list of Artist keyword args\n        ')
        
        # Call to __init__(...): (line 1101)
        # Processing the call arguments (line 1101)
        # Getting the type of 'None' (line 1102)
        None_65712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1102, 12), 'None', False)
        # Processing the call keyword arguments (line 1101)
        # Getting the type of 'norm' (line 1103)
        norm_65713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1103, 17), 'norm', False)
        keyword_65714 = norm_65713
        # Getting the type of 'cmap' (line 1104)
        cmap_65715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1104, 17), 'cmap', False)
        keyword_65716 = cmap_65715
        # Getting the type of 'origin' (line 1105)
        origin_65717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1105, 19), 'origin', False)
        keyword_65718 = origin_65717
        kwargs_65719 = {'origin': keyword_65718, 'cmap': keyword_65716, 'norm': keyword_65714}
        
        # Call to super(...): (line 1101)
        # Processing the call arguments (line 1101)
        # Getting the type of 'FigureImage' (line 1101)
        FigureImage_65707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 14), 'FigureImage', False)
        # Getting the type of 'self' (line 1101)
        self_65708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 27), 'self', False)
        # Processing the call keyword arguments (line 1101)
        kwargs_65709 = {}
        # Getting the type of 'super' (line 1101)
        super_65706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1101, 8), 'super', False)
        # Calling super(args, kwargs) (line 1101)
        super_call_result_65710 = invoke(stypy.reporting.localization.Localization(__file__, 1101, 8), super_65706, *[FigureImage_65707, self_65708], **kwargs_65709)
        
        # Obtaining the member '__init__' of a type (line 1101)
        init___65711 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1101, 8), super_call_result_65710, '__init__')
        # Calling __init__(args, kwargs) (line 1101)
        init___call_result_65720 = invoke(stypy.reporting.localization.Localization(__file__, 1101, 8), init___65711, *[None_65712], **kwargs_65719)
        
        
        # Assigning a Name to a Attribute (line 1107):
        
        # Assigning a Name to a Attribute (line 1107):
        # Getting the type of 'fig' (line 1107)
        fig_65721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 22), 'fig')
        # Getting the type of 'self' (line 1107)
        self_65722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1107, 8), 'self')
        # Setting the type of the member 'figure' of a type (line 1107)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1107, 8), self_65722, 'figure', fig_65721)
        
        # Assigning a Name to a Attribute (line 1108):
        
        # Assigning a Name to a Attribute (line 1108):
        # Getting the type of 'offsetx' (line 1108)
        offsetx_65723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 18), 'offsetx')
        # Getting the type of 'self' (line 1108)
        self_65724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1108, 8), 'self')
        # Setting the type of the member 'ox' of a type (line 1108)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1108, 8), self_65724, 'ox', offsetx_65723)
        
        # Assigning a Name to a Attribute (line 1109):
        
        # Assigning a Name to a Attribute (line 1109):
        # Getting the type of 'offsety' (line 1109)
        offsety_65725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 18), 'offsety')
        # Getting the type of 'self' (line 1109)
        self_65726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1109, 8), 'self')
        # Setting the type of the member 'oy' of a type (line 1109)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1109, 8), self_65726, 'oy', offsety_65725)
        
        # Call to update(...): (line 1110)
        # Processing the call arguments (line 1110)
        # Getting the type of 'kwargs' (line 1110)
        kwargs_65729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 20), 'kwargs', False)
        # Processing the call keyword arguments (line 1110)
        kwargs_65730 = {}
        # Getting the type of 'self' (line 1110)
        self_65727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1110, 8), 'self', False)
        # Obtaining the member 'update' of a type (line 1110)
        update_65728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1110, 8), self_65727, 'update')
        # Calling update(args, kwargs) (line 1110)
        update_call_result_65731 = invoke(stypy.reporting.localization.Localization(__file__, 1110, 8), update_65728, *[kwargs_65729], **kwargs_65730)
        
        
        # Assigning a Num to a Attribute (line 1111):
        
        # Assigning a Num to a Attribute (line 1111):
        float_65732 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1111, 29), 'float')
        # Getting the type of 'self' (line 1111)
        self_65733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1111, 8), 'self')
        # Setting the type of the member 'magnification' of a type (line 1111)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1111, 8), self_65733, 'magnification', float_65732)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_extent'
        module_type_store = module_type_store.open_function_context('get_extent', 1113, 4, False)
        # Assigning a type to the variable 'self' (line 1114)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1114, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureImage.get_extent.__dict__.__setitem__('stypy_localization', localization)
        FigureImage.get_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureImage.get_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureImage.get_extent.__dict__.__setitem__('stypy_function_name', 'FigureImage.get_extent')
        FigureImage.get_extent.__dict__.__setitem__('stypy_param_names_list', [])
        FigureImage.get_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureImage.get_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureImage.get_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureImage.get_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureImage.get_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureImage.get_extent.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureImage.get_extent', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_extent', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_extent(...)' code ##################

        unicode_65734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1114, 8), 'unicode', u'Get the image extent: left, right, bottom, top')
        
        # Assigning a Call to a Tuple (line 1115):
        
        # Assigning a Call to a Name:
        
        # Call to get_size(...): (line 1115)
        # Processing the call keyword arguments (line 1115)
        kwargs_65737 = {}
        # Getting the type of 'self' (line 1115)
        self_65735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 27), 'self', False)
        # Obtaining the member 'get_size' of a type (line 1115)
        get_size_65736 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 27), self_65735, 'get_size')
        # Calling get_size(args, kwargs) (line 1115)
        get_size_call_result_65738 = invoke(stypy.reporting.localization.Localization(__file__, 1115, 27), get_size_65736, *[], **kwargs_65737)
        
        # Assigning a type to the variable 'call_assignment_62371' (line 1115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'call_assignment_62371', get_size_call_result_65738)
        
        # Assigning a Call to a Name (line 1115):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_65741 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1115, 8), 'int')
        # Processing the call keyword arguments
        kwargs_65742 = {}
        # Getting the type of 'call_assignment_62371' (line 1115)
        call_assignment_62371_65739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'call_assignment_62371', False)
        # Obtaining the member '__getitem__' of a type (line 1115)
        getitem___65740 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 8), call_assignment_62371_65739, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_65743 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___65740, *[int_65741], **kwargs_65742)
        
        # Assigning a type to the variable 'call_assignment_62372' (line 1115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'call_assignment_62372', getitem___call_result_65743)
        
        # Assigning a Name to a Name (line 1115):
        # Getting the type of 'call_assignment_62372' (line 1115)
        call_assignment_62372_65744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'call_assignment_62372')
        # Assigning a type to the variable 'numrows' (line 1115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'numrows', call_assignment_62372_65744)
        
        # Assigning a Call to a Name (line 1115):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_65747 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1115, 8), 'int')
        # Processing the call keyword arguments
        kwargs_65748 = {}
        # Getting the type of 'call_assignment_62371' (line 1115)
        call_assignment_62371_65745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'call_assignment_62371', False)
        # Obtaining the member '__getitem__' of a type (line 1115)
        getitem___65746 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1115, 8), call_assignment_62371_65745, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_65749 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___65746, *[int_65747], **kwargs_65748)
        
        # Assigning a type to the variable 'call_assignment_62373' (line 1115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'call_assignment_62373', getitem___call_result_65749)
        
        # Assigning a Name to a Name (line 1115):
        # Getting the type of 'call_assignment_62373' (line 1115)
        call_assignment_62373_65750 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1115, 8), 'call_assignment_62373')
        # Assigning a type to the variable 'numcols' (line 1115)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1115, 17), 'numcols', call_assignment_62373_65750)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1116)
        tuple_65751 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1116, 16), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1116)
        # Adding element type (line 1116)
        float_65752 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1116, 16), 'float')
        # Getting the type of 'self' (line 1116)
        self_65753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 23), 'self')
        # Obtaining the member 'ox' of a type (line 1116)
        ox_65754 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 23), self_65753, 'ox')
        # Applying the binary operator '+' (line 1116)
        result_add_65755 = python_operator(stypy.reporting.localization.Localization(__file__, 1116, 16), '+', float_65752, ox_65754)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1116, 16), tuple_65751, result_add_65755)
        # Adding element type (line 1116)
        # Getting the type of 'numcols' (line 1116)
        numcols_65756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 32), 'numcols')
        float_65757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1116, 40), 'float')
        # Applying the binary operator '-' (line 1116)
        result_sub_65758 = python_operator(stypy.reporting.localization.Localization(__file__, 1116, 32), '-', numcols_65756, float_65757)
        
        # Getting the type of 'self' (line 1116)
        self_65759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1116, 46), 'self')
        # Obtaining the member 'ox' of a type (line 1116)
        ox_65760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1116, 46), self_65759, 'ox')
        # Applying the binary operator '+' (line 1116)
        result_add_65761 = python_operator(stypy.reporting.localization.Localization(__file__, 1116, 44), '+', result_sub_65758, ox_65760)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1116, 16), tuple_65751, result_add_65761)
        # Adding element type (line 1116)
        float_65762 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1117, 16), 'float')
        # Getting the type of 'self' (line 1117)
        self_65763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 23), 'self')
        # Obtaining the member 'oy' of a type (line 1117)
        oy_65764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 23), self_65763, 'oy')
        # Applying the binary operator '+' (line 1117)
        result_add_65765 = python_operator(stypy.reporting.localization.Localization(__file__, 1117, 16), '+', float_65762, oy_65764)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1116, 16), tuple_65751, result_add_65765)
        # Adding element type (line 1116)
        # Getting the type of 'numrows' (line 1117)
        numrows_65766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 32), 'numrows')
        float_65767 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1117, 40), 'float')
        # Applying the binary operator '-' (line 1117)
        result_sub_65768 = python_operator(stypy.reporting.localization.Localization(__file__, 1117, 32), '-', numrows_65766, float_65767)
        
        # Getting the type of 'self' (line 1117)
        self_65769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1117, 46), 'self')
        # Obtaining the member 'oy' of a type (line 1117)
        oy_65770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1117, 46), self_65769, 'oy')
        # Applying the binary operator '+' (line 1117)
        result_add_65771 = python_operator(stypy.reporting.localization.Localization(__file__, 1117, 44), '+', result_sub_65768, oy_65770)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1116, 16), tuple_65751, result_add_65771)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1116)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1116, 8), 'stypy_return_type', tuple_65751)
        
        # ################# End of 'get_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 1113)
        stypy_return_type_65772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1113, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65772)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_extent'
        return stypy_return_type_65772


    @norecursion
    def make_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_65773 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1119, 49), 'float')
        # Getting the type of 'False' (line 1119)
        False_65774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 64), 'False')
        defaults = [float_65773, False_65774]
        # Create a new context for function 'make_image'
        module_type_store = module_type_store.open_function_context('make_image', 1119, 4, False)
        # Assigning a type to the variable 'self' (line 1120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureImage.make_image.__dict__.__setitem__('stypy_localization', localization)
        FigureImage.make_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureImage.make_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureImage.make_image.__dict__.__setitem__('stypy_function_name', 'FigureImage.make_image')
        FigureImage.make_image.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'magnification', 'unsampled'])
        FigureImage.make_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureImage.make_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureImage.make_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureImage.make_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureImage.make_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureImage.make_image.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureImage.make_image', ['renderer', 'magnification', 'unsampled'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'make_image', localization, ['renderer', 'magnification', 'unsampled'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'make_image(...)' code ##################

        
        # Assigning a BinOp to a Name (line 1120):
        
        # Assigning a BinOp to a Name (line 1120):
        # Getting the type of 'renderer' (line 1120)
        renderer_65775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 14), 'renderer')
        # Obtaining the member 'dpi' of a type (line 1120)
        dpi_65776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 14), renderer_65775, 'dpi')
        # Getting the type of 'self' (line 1120)
        self_65777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1120, 27), 'self')
        # Obtaining the member 'figure' of a type (line 1120)
        figure_65778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 27), self_65777, 'figure')
        # Obtaining the member 'dpi' of a type (line 1120)
        dpi_65779 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1120, 27), figure_65778, 'dpi')
        # Applying the binary operator 'div' (line 1120)
        result_div_65780 = python_operator(stypy.reporting.localization.Localization(__file__, 1120, 14), 'div', dpi_65776, dpi_65779)
        
        # Assigning a type to the variable 'fac' (line 1120)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1120, 8), 'fac', result_div_65780)
        
        # Assigning a Call to a Name (line 1124):
        
        # Assigning a Call to a Name (line 1124):
        
        # Call to Bbox(...): (line 1124)
        # Processing the call arguments (line 1124)
        
        # Obtaining an instance of the builtin type 'list' (line 1124)
        list_65782 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1124)
        # Adding element type (line 1124)
        
        # Obtaining an instance of the builtin type 'list' (line 1124)
        list_65783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1124, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1124)
        # Adding element type (line 1124)
        # Getting the type of 'self' (line 1124)
        self_65784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 22), 'self', False)
        # Obtaining the member 'ox' of a type (line 1124)
        ox_65785 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 22), self_65784, 'ox')
        # Getting the type of 'fac' (line 1124)
        fac_65786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 30), 'fac', False)
        # Applying the binary operator 'div' (line 1124)
        result_div_65787 = python_operator(stypy.reporting.localization.Localization(__file__, 1124, 22), 'div', ox_65785, fac_65786)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1124, 21), list_65783, result_div_65787)
        # Adding element type (line 1124)
        # Getting the type of 'self' (line 1124)
        self_65788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 35), 'self', False)
        # Obtaining the member 'oy' of a type (line 1124)
        oy_65789 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1124, 35), self_65788, 'oy')
        # Getting the type of 'fac' (line 1124)
        fac_65790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 43), 'fac', False)
        # Applying the binary operator 'div' (line 1124)
        result_div_65791 = python_operator(stypy.reporting.localization.Localization(__file__, 1124, 35), 'div', oy_65789, fac_65790)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1124, 21), list_65783, result_div_65791)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1124, 20), list_65782, list_65783)
        # Adding element type (line 1124)
        
        # Obtaining an instance of the builtin type 'list' (line 1125)
        list_65792 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1125, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1125)
        # Adding element type (line 1125)
        # Getting the type of 'self' (line 1125)
        self_65793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 23), 'self', False)
        # Obtaining the member 'ox' of a type (line 1125)
        ox_65794 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 23), self_65793, 'ox')
        # Getting the type of 'fac' (line 1125)
        fac_65795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 31), 'fac', False)
        # Applying the binary operator 'div' (line 1125)
        result_div_65796 = python_operator(stypy.reporting.localization.Localization(__file__, 1125, 23), 'div', ox_65794, fac_65795)
        
        
        # Obtaining the type of the subscript
        int_65797 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1125, 51), 'int')
        # Getting the type of 'self' (line 1125)
        self_65798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1125, 37), 'self', False)
        # Obtaining the member '_A' of a type (line 1125)
        _A_65799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 37), self_65798, '_A')
        # Obtaining the member 'shape' of a type (line 1125)
        shape_65800 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 37), _A_65799, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1125)
        getitem___65801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1125, 37), shape_65800, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1125)
        subscript_call_result_65802 = invoke(stypy.reporting.localization.Localization(__file__, 1125, 37), getitem___65801, int_65797)
        
        # Applying the binary operator '+' (line 1125)
        result_add_65803 = python_operator(stypy.reporting.localization.Localization(__file__, 1125, 23), '+', result_div_65796, subscript_call_result_65802)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1125, 21), list_65792, result_add_65803)
        # Adding element type (line 1125)
        # Getting the type of 'self' (line 1126)
        self_65804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 22), 'self', False)
        # Obtaining the member 'oy' of a type (line 1126)
        oy_65805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 22), self_65804, 'oy')
        # Getting the type of 'fac' (line 1126)
        fac_65806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 30), 'fac', False)
        # Applying the binary operator 'div' (line 1126)
        result_div_65807 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 22), 'div', oy_65805, fac_65806)
        
        
        # Obtaining the type of the subscript
        int_65808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1126, 50), 'int')
        # Getting the type of 'self' (line 1126)
        self_65809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1126, 36), 'self', False)
        # Obtaining the member '_A' of a type (line 1126)
        _A_65810 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 36), self_65809, '_A')
        # Obtaining the member 'shape' of a type (line 1126)
        shape_65811 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 36), _A_65810, 'shape')
        # Obtaining the member '__getitem__' of a type (line 1126)
        getitem___65812 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1126, 36), shape_65811, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1126)
        subscript_call_result_65813 = invoke(stypy.reporting.localization.Localization(__file__, 1126, 36), getitem___65812, int_65808)
        
        # Applying the binary operator '+' (line 1126)
        result_add_65814 = python_operator(stypy.reporting.localization.Localization(__file__, 1126, 22), '+', result_div_65807, subscript_call_result_65813)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1125, 21), list_65792, result_add_65814)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1124, 20), list_65782, list_65792)
        
        # Processing the call keyword arguments (line 1124)
        kwargs_65815 = {}
        # Getting the type of 'Bbox' (line 1124)
        Bbox_65781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1124, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 1124)
        Bbox_call_result_65816 = invoke(stypy.reporting.localization.Localization(__file__, 1124, 15), Bbox_65781, *[list_65782], **kwargs_65815)
        
        # Assigning a type to the variable 'bbox' (line 1124)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1124, 8), 'bbox', Bbox_call_result_65816)
        
        # Assigning a Call to a Tuple (line 1127):
        
        # Assigning a Call to a Name:
        
        # Call to get_size_inches(...): (line 1127)
        # Processing the call keyword arguments (line 1127)
        kwargs_65820 = {}
        # Getting the type of 'self' (line 1127)
        self_65817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 24), 'self', False)
        # Obtaining the member 'figure' of a type (line 1127)
        figure_65818 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 24), self_65817, 'figure')
        # Obtaining the member 'get_size_inches' of a type (line 1127)
        get_size_inches_65819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 24), figure_65818, 'get_size_inches')
        # Calling get_size_inches(args, kwargs) (line 1127)
        get_size_inches_call_result_65821 = invoke(stypy.reporting.localization.Localization(__file__, 1127, 24), get_size_inches_65819, *[], **kwargs_65820)
        
        # Assigning a type to the variable 'call_assignment_62374' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 8), 'call_assignment_62374', get_size_inches_call_result_65821)
        
        # Assigning a Call to a Name (line 1127):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_65824 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 8), 'int')
        # Processing the call keyword arguments
        kwargs_65825 = {}
        # Getting the type of 'call_assignment_62374' (line 1127)
        call_assignment_62374_65822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 8), 'call_assignment_62374', False)
        # Obtaining the member '__getitem__' of a type (line 1127)
        getitem___65823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 8), call_assignment_62374_65822, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_65826 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___65823, *[int_65824], **kwargs_65825)
        
        # Assigning a type to the variable 'call_assignment_62375' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 8), 'call_assignment_62375', getitem___call_result_65826)
        
        # Assigning a Name to a Name (line 1127):
        # Getting the type of 'call_assignment_62375' (line 1127)
        call_assignment_62375_65827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 8), 'call_assignment_62375')
        # Assigning a type to the variable 'width' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 8), 'width', call_assignment_62375_65827)
        
        # Assigning a Call to a Name (line 1127):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_65830 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1127, 8), 'int')
        # Processing the call keyword arguments
        kwargs_65831 = {}
        # Getting the type of 'call_assignment_62374' (line 1127)
        call_assignment_62374_65828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 8), 'call_assignment_62374', False)
        # Obtaining the member '__getitem__' of a type (line 1127)
        getitem___65829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1127, 8), call_assignment_62374_65828, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_65832 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___65829, *[int_65830], **kwargs_65831)
        
        # Assigning a type to the variable 'call_assignment_62376' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 8), 'call_assignment_62376', getitem___call_result_65832)
        
        # Assigning a Name to a Name (line 1127):
        # Getting the type of 'call_assignment_62376' (line 1127)
        call_assignment_62376_65833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1127, 8), 'call_assignment_62376')
        # Assigning a type to the variable 'height' (line 1127)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1127, 15), 'height', call_assignment_62376_65833)
        
        # Getting the type of 'width' (line 1128)
        width_65834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 8), 'width')
        # Getting the type of 'renderer' (line 1128)
        renderer_65835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1128, 17), 'renderer')
        # Obtaining the member 'dpi' of a type (line 1128)
        dpi_65836 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1128, 17), renderer_65835, 'dpi')
        # Applying the binary operator '*=' (line 1128)
        result_imul_65837 = python_operator(stypy.reporting.localization.Localization(__file__, 1128, 8), '*=', width_65834, dpi_65836)
        # Assigning a type to the variable 'width' (line 1128)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1128, 8), 'width', result_imul_65837)
        
        
        # Getting the type of 'height' (line 1129)
        height_65838 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'height')
        # Getting the type of 'renderer' (line 1129)
        renderer_65839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1129, 18), 'renderer')
        # Obtaining the member 'dpi' of a type (line 1129)
        dpi_65840 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1129, 18), renderer_65839, 'dpi')
        # Applying the binary operator '*=' (line 1129)
        result_imul_65841 = python_operator(stypy.reporting.localization.Localization(__file__, 1129, 8), '*=', height_65838, dpi_65840)
        # Assigning a type to the variable 'height' (line 1129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1129, 8), 'height', result_imul_65841)
        
        
        # Assigning a Call to a Name (line 1130):
        
        # Assigning a Call to a Name (line 1130):
        
        # Call to Bbox(...): (line 1130)
        # Processing the call arguments (line 1130)
        
        # Obtaining an instance of the builtin type 'list' (line 1130)
        list_65843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1130)
        # Adding element type (line 1130)
        
        # Obtaining an instance of the builtin type 'list' (line 1130)
        list_65844 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1130)
        # Adding element type (line 1130)
        int_65845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1130, 21), list_65844, int_65845)
        # Adding element type (line 1130)
        int_65846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1130, 21), list_65844, int_65846)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1130, 20), list_65843, list_65844)
        # Adding element type (line 1130)
        
        # Obtaining an instance of the builtin type 'list' (line 1130)
        list_65847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1130, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1130)
        # Adding element type (line 1130)
        # Getting the type of 'width' (line 1130)
        width_65848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 30), 'width', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1130, 29), list_65847, width_65848)
        # Adding element type (line 1130)
        # Getting the type of 'height' (line 1130)
        height_65849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 37), 'height', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1130, 29), list_65847, height_65849)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1130, 20), list_65843, list_65847)
        
        # Processing the call keyword arguments (line 1130)
        kwargs_65850 = {}
        # Getting the type of 'Bbox' (line 1130)
        Bbox_65842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1130, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 1130)
        Bbox_call_result_65851 = invoke(stypy.reporting.localization.Localization(__file__, 1130, 15), Bbox_65842, *[list_65843], **kwargs_65850)
        
        # Assigning a type to the variable 'clip' (line 1130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1130, 8), 'clip', Bbox_call_result_65851)
        
        # Call to _make_image(...): (line 1132)
        # Processing the call arguments (line 1132)
        # Getting the type of 'self' (line 1133)
        self_65854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 12), 'self', False)
        # Obtaining the member '_A' of a type (line 1133)
        _A_65855 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1133, 12), self_65854, '_A')
        # Getting the type of 'bbox' (line 1133)
        bbox_65856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 21), 'bbox', False)
        # Getting the type of 'bbox' (line 1133)
        bbox_65857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 27), 'bbox', False)
        # Getting the type of 'clip' (line 1133)
        clip_65858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 33), 'clip', False)
        # Processing the call keyword arguments (line 1132)
        # Getting the type of 'magnification' (line 1133)
        magnification_65859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 53), 'magnification', False)
        # Getting the type of 'fac' (line 1133)
        fac_65860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1133, 69), 'fac', False)
        # Applying the binary operator 'div' (line 1133)
        result_div_65861 = python_operator(stypy.reporting.localization.Localization(__file__, 1133, 53), 'div', magnification_65859, fac_65860)
        
        keyword_65862 = result_div_65861
        # Getting the type of 'unsampled' (line 1134)
        unsampled_65863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 22), 'unsampled', False)
        keyword_65864 = unsampled_65863
        # Getting the type of 'False' (line 1134)
        False_65865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1134, 55), 'False', False)
        keyword_65866 = False_65865
        kwargs_65867 = {'magnification': keyword_65862, 'round_to_pixel_border': keyword_65866, 'unsampled': keyword_65864}
        # Getting the type of 'self' (line 1132)
        self_65852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1132, 15), 'self', False)
        # Obtaining the member '_make_image' of a type (line 1132)
        _make_image_65853 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1132, 15), self_65852, '_make_image')
        # Calling _make_image(args, kwargs) (line 1132)
        _make_image_call_result_65868 = invoke(stypy.reporting.localization.Localization(__file__, 1132, 15), _make_image_65853, *[_A_65855, bbox_65856, bbox_65857, clip_65858], **kwargs_65867)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1132)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1132, 8), 'stypy_return_type', _make_image_call_result_65868)
        
        # ################# End of 'make_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'make_image' in the type store
        # Getting the type of 'stypy_return_type' (line 1119)
        stypy_return_type_65869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1119, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65869)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'make_image'
        return stypy_return_type_65869


    @norecursion
    def set_data(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'set_data'
        module_type_store = module_type_store.open_function_context('set_data', 1136, 4, False)
        # Assigning a type to the variable 'self' (line 1137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1137, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        FigureImage.set_data.__dict__.__setitem__('stypy_localization', localization)
        FigureImage.set_data.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        FigureImage.set_data.__dict__.__setitem__('stypy_type_store', module_type_store)
        FigureImage.set_data.__dict__.__setitem__('stypy_function_name', 'FigureImage.set_data')
        FigureImage.set_data.__dict__.__setitem__('stypy_param_names_list', ['A'])
        FigureImage.set_data.__dict__.__setitem__('stypy_varargs_param_name', None)
        FigureImage.set_data.__dict__.__setitem__('stypy_kwargs_param_name', None)
        FigureImage.set_data.__dict__.__setitem__('stypy_call_defaults', defaults)
        FigureImage.set_data.__dict__.__setitem__('stypy_call_varargs', varargs)
        FigureImage.set_data.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        FigureImage.set_data.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'FigureImage.set_data', ['A'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'set_data', localization, ['A'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'set_data(...)' code ##################

        unicode_65870 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1137, 8), 'unicode', u'Set the image array.')
        
        # Call to set_array(...): (line 1138)
        # Processing the call arguments (line 1138)
        # Getting the type of 'self' (line 1138)
        self_65874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 36), 'self', False)
        
        # Call to safe_masked_invalid(...): (line 1139)
        # Processing the call arguments (line 1139)
        # Getting the type of 'A' (line 1139)
        A_65877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 62), 'A', False)
        # Processing the call keyword arguments (line 1139)
        # Getting the type of 'True' (line 1139)
        True_65878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 70), 'True', False)
        keyword_65879 = True_65878
        kwargs_65880 = {'copy': keyword_65879}
        # Getting the type of 'cbook' (line 1139)
        cbook_65875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1139, 36), 'cbook', False)
        # Obtaining the member 'safe_masked_invalid' of a type (line 1139)
        safe_masked_invalid_65876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1139, 36), cbook_65875, 'safe_masked_invalid')
        # Calling safe_masked_invalid(args, kwargs) (line 1139)
        safe_masked_invalid_call_result_65881 = invoke(stypy.reporting.localization.Localization(__file__, 1139, 36), safe_masked_invalid_65876, *[A_65877], **kwargs_65880)
        
        # Processing the call keyword arguments (line 1138)
        kwargs_65882 = {}
        # Getting the type of 'cm' (line 1138)
        cm_65871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1138, 8), 'cm', False)
        # Obtaining the member 'ScalarMappable' of a type (line 1138)
        ScalarMappable_65872 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 8), cm_65871, 'ScalarMappable')
        # Obtaining the member 'set_array' of a type (line 1138)
        set_array_65873 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1138, 8), ScalarMappable_65872, 'set_array')
        # Calling set_array(args, kwargs) (line 1138)
        set_array_call_result_65883 = invoke(stypy.reporting.localization.Localization(__file__, 1138, 8), set_array_65873, *[self_65874, safe_masked_invalid_call_result_65881], **kwargs_65882)
        
        
        # Assigning a Name to a Attribute (line 1140):
        
        # Assigning a Name to a Attribute (line 1140):
        # Getting the type of 'True' (line 1140)
        True_65884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 21), 'True')
        # Getting the type of 'self' (line 1140)
        self_65885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1140, 8), 'self')
        # Setting the type of the member 'stale' of a type (line 1140)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1140, 8), self_65885, 'stale', True_65884)
        
        # ################# End of 'set_data(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'set_data' in the type store
        # Getting the type of 'stypy_return_type' (line 1136)
        stypy_return_type_65886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1136, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65886)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'set_data'
        return stypy_return_type_65886


# Assigning a type to the variable 'FigureImage' (line 1082)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1082, 0), 'FigureImage', FigureImage)

# Assigning a Num to a Name (line 1083):
int_65887 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1083, 13), 'int')
# Getting the type of 'FigureImage'
FigureImage_65888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureImage')
# Setting the type of the member 'zorder' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureImage_65888, 'zorder', int_65887)

# Assigning a Str to a Name (line 1085):
unicode_65889 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1085, 21), 'unicode', u'nearest')
# Getting the type of 'FigureImage'
FigureImage_65890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'FigureImage')
# Setting the type of the member '_interpolation' of a type
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 0, 0), FigureImage_65890, '_interpolation', unicode_65889)
# Declaration of the 'BboxImage' class
# Getting the type of '_ImageBase' (line 1143)
_ImageBase_65891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1143, 16), '_ImageBase')

class BboxImage(_ImageBase_65891, ):
    unicode_65892 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1144, 4), 'unicode', u'The Image class whose size is determined by the given bbox.')

    @norecursion
    def __init__(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1146)
        None_65893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1146, 22), 'None')
        # Getting the type of 'None' (line 1147)
        None_65894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1147, 22), 'None')
        # Getting the type of 'None' (line 1148)
        None_65895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1148, 31), 'None')
        # Getting the type of 'None' (line 1149)
        None_65896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1149, 24), 'None')
        int_65897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1150, 28), 'int')
        float_65898 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1151, 27), 'float')
        # Getting the type of 'False' (line 1152)
        False_65899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1152, 26), 'False')
        # Getting the type of 'True' (line 1153)
        True_65900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1153, 34), 'True')
        defaults = [None_65893, None_65894, None_65895, None_65896, int_65897, float_65898, False_65899, True_65900]
        # Create a new context for function '__init__'
        module_type_store = module_type_store.open_function_context('__init__', 1145, 4, False)
        # Assigning a type to the variable 'self' (line 1146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1146, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxImage.__init__', ['bbox', 'cmap', 'norm', 'interpolation', 'origin', 'filternorm', 'filterrad', 'resample', 'interp_at_native'], None, 'kwargs', defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return

        # Initialize method data
        init_call_information(module_type_store, '__init__', localization, ['bbox', 'cmap', 'norm', 'interpolation', 'origin', 'filternorm', 'filterrad', 'resample', 'interp_at_native'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of '__init__(...)' code ##################

        unicode_65901 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1170, (-1)), 'unicode', u'\n        cmap is a colors.Colormap instance\n        norm is a colors.Normalize instance to map luminance to 0-1\n\n        interp_at_native is a flag that determines whether or not\n        interpolation should still be applied when the image is\n        displayed at its native resolution.  A common use case for this\n        is when displaying an image for annotational purposes; it is\n        treated similarly to Photoshop (interpolation is only used when\n        displaying the image at non-native resolutions).\n\n\n        kwargs are an optional list of Artist keyword args\n\n        ')
        
        # Call to __init__(...): (line 1171)
        # Processing the call arguments (line 1171)
        # Getting the type of 'None' (line 1172)
        None_65908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1172, 12), 'None', False)
        # Processing the call keyword arguments (line 1171)
        # Getting the type of 'cmap' (line 1173)
        cmap_65909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1173, 17), 'cmap', False)
        keyword_65910 = cmap_65909
        # Getting the type of 'norm' (line 1174)
        norm_65911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1174, 17), 'norm', False)
        keyword_65912 = norm_65911
        # Getting the type of 'interpolation' (line 1175)
        interpolation_65913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1175, 26), 'interpolation', False)
        keyword_65914 = interpolation_65913
        # Getting the type of 'origin' (line 1176)
        origin_65915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1176, 19), 'origin', False)
        keyword_65916 = origin_65915
        # Getting the type of 'filternorm' (line 1177)
        filternorm_65917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1177, 23), 'filternorm', False)
        keyword_65918 = filternorm_65917
        # Getting the type of 'filterrad' (line 1178)
        filterrad_65919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1178, 22), 'filterrad', False)
        keyword_65920 = filterrad_65919
        # Getting the type of 'resample' (line 1179)
        resample_65921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 21), 'resample', False)
        keyword_65922 = resample_65921
        # Getting the type of 'kwargs' (line 1180)
        kwargs_65923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 14), 'kwargs', False)
        kwargs_65924 = {'origin': keyword_65916, 'resample': keyword_65922, 'norm': keyword_65912, 'cmap': keyword_65910, 'filternorm': keyword_65918, 'kwargs_65923': kwargs_65923, 'filterrad': keyword_65920, 'interpolation': keyword_65914}
        
        # Call to super(...): (line 1171)
        # Processing the call arguments (line 1171)
        # Getting the type of 'BboxImage' (line 1171)
        BboxImage_65903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 14), 'BboxImage', False)
        # Getting the type of 'self' (line 1171)
        self_65904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 25), 'self', False)
        # Processing the call keyword arguments (line 1171)
        kwargs_65905 = {}
        # Getting the type of 'super' (line 1171)
        super_65902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1171, 8), 'super', False)
        # Calling super(args, kwargs) (line 1171)
        super_call_result_65906 = invoke(stypy.reporting.localization.Localization(__file__, 1171, 8), super_65902, *[BboxImage_65903, self_65904], **kwargs_65905)
        
        # Obtaining the member '__init__' of a type (line 1171)
        init___65907 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1171, 8), super_call_result_65906, '__init__')
        # Calling __init__(args, kwargs) (line 1171)
        init___call_result_65925 = invoke(stypy.reporting.localization.Localization(__file__, 1171, 8), init___65907, *[None_65908], **kwargs_65924)
        
        
        # Assigning a Name to a Attribute (line 1183):
        
        # Assigning a Name to a Attribute (line 1183):
        # Getting the type of 'bbox' (line 1183)
        bbox_65926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 20), 'bbox')
        # Getting the type of 'self' (line 1183)
        self_65927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 8), 'self')
        # Setting the type of the member 'bbox' of a type (line 1183)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1183, 8), self_65927, 'bbox', bbox_65926)
        
        # Assigning a Name to a Attribute (line 1184):
        
        # Assigning a Name to a Attribute (line 1184):
        # Getting the type of 'interp_at_native' (line 1184)
        interp_at_native_65928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 32), 'interp_at_native')
        # Getting the type of 'self' (line 1184)
        self_65929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1184, 8), 'self')
        # Setting the type of the member 'interp_at_native' of a type (line 1184)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1184, 8), self_65929, 'interp_at_native', interp_at_native_65928)
        
        # Assigning a Call to a Attribute (line 1185):
        
        # Assigning a Call to a Attribute (line 1185):
        
        # Call to IdentityTransform(...): (line 1185)
        # Processing the call keyword arguments (line 1185)
        kwargs_65931 = {}
        # Getting the type of 'IdentityTransform' (line 1185)
        IdentityTransform_65930 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 26), 'IdentityTransform', False)
        # Calling IdentityTransform(args, kwargs) (line 1185)
        IdentityTransform_call_result_65932 = invoke(stypy.reporting.localization.Localization(__file__, 1185, 26), IdentityTransform_65930, *[], **kwargs_65931)
        
        # Getting the type of 'self' (line 1185)
        self_65933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1185, 8), 'self')
        # Setting the type of the member '_transform' of a type (line 1185)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1185, 8), self_65933, '_transform', IdentityTransform_call_result_65932)
        
        # ################# End of '__init__(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()


    @norecursion
    def get_transform(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'get_transform'
        module_type_store = module_type_store.open_function_context('get_transform', 1187, 4, False)
        # Assigning a type to the variable 'self' (line 1188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxImage.get_transform.__dict__.__setitem__('stypy_localization', localization)
        BboxImage.get_transform.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxImage.get_transform.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxImage.get_transform.__dict__.__setitem__('stypy_function_name', 'BboxImage.get_transform')
        BboxImage.get_transform.__dict__.__setitem__('stypy_param_names_list', [])
        BboxImage.get_transform.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxImage.get_transform.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxImage.get_transform.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxImage.get_transform.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxImage.get_transform.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxImage.get_transform.__dict__.__setitem__('stypy_declared_arg_number', 1)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxImage.get_transform', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_transform', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_transform(...)' code ##################

        # Getting the type of 'self' (line 1188)
        self_65934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1188, 15), 'self')
        # Obtaining the member '_transform' of a type (line 1188)
        _transform_65935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1188, 15), self_65934, '_transform')
        # Assigning a type to the variable 'stypy_return_type' (line 1188)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1188, 8), 'stypy_return_type', _transform_65935)
        
        # ################# End of 'get_transform(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_transform' in the type store
        # Getting the type of 'stypy_return_type' (line 1187)
        stypy_return_type_65936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1187, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65936)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_transform'
        return stypy_return_type_65936


    @norecursion
    def get_window_extent(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        # Getting the type of 'None' (line 1190)
        None_65937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 41), 'None')
        defaults = [None_65937]
        # Create a new context for function 'get_window_extent'
        module_type_store = module_type_store.open_function_context('get_window_extent', 1190, 4, False)
        # Assigning a type to the variable 'self' (line 1191)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1191, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxImage.get_window_extent.__dict__.__setitem__('stypy_localization', localization)
        BboxImage.get_window_extent.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxImage.get_window_extent.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxImage.get_window_extent.__dict__.__setitem__('stypy_function_name', 'BboxImage.get_window_extent')
        BboxImage.get_window_extent.__dict__.__setitem__('stypy_param_names_list', ['renderer'])
        BboxImage.get_window_extent.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxImage.get_window_extent.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxImage.get_window_extent.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxImage.get_window_extent.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxImage.get_window_extent.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxImage.get_window_extent.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxImage.get_window_extent', ['renderer'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'get_window_extent', localization, ['renderer'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'get_window_extent(...)' code ##################

        
        # Type idiom detected: calculating its left and rigth part (line 1191)
        # Getting the type of 'renderer' (line 1191)
        renderer_65938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 11), 'renderer')
        # Getting the type of 'None' (line 1191)
        None_65939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1191, 23), 'None')
        
        (may_be_65940, more_types_in_union_65941) = may_be_none(renderer_65938, None_65939)

        if may_be_65940:

            if more_types_in_union_65941:
                # Runtime conditional SSA (line 1191)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Attribute to a Name (line 1192):
            
            # Assigning a Attribute to a Name (line 1192):
            
            # Call to get_figure(...): (line 1192)
            # Processing the call keyword arguments (line 1192)
            kwargs_65944 = {}
            # Getting the type of 'self' (line 1192)
            self_65942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1192, 23), 'self', False)
            # Obtaining the member 'get_figure' of a type (line 1192)
            get_figure_65943 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1192, 23), self_65942, 'get_figure')
            # Calling get_figure(args, kwargs) (line 1192)
            get_figure_call_result_65945 = invoke(stypy.reporting.localization.Localization(__file__, 1192, 23), get_figure_65943, *[], **kwargs_65944)
            
            # Obtaining the member '_cachedRenderer' of a type (line 1192)
            _cachedRenderer_65946 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1192, 23), get_figure_call_result_65945, '_cachedRenderer')
            # Assigning a type to the variable 'renderer' (line 1192)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1192, 12), 'renderer', _cachedRenderer_65946)

            if more_types_in_union_65941:
                # SSA join for if statement (line 1191)
                module_type_store = module_type_store.join_ssa_context()


        
        
        
        # Call to isinstance(...): (line 1194)
        # Processing the call arguments (line 1194)
        # Getting the type of 'self' (line 1194)
        self_65948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 22), 'self', False)
        # Obtaining the member 'bbox' of a type (line 1194)
        bbox_65949 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1194, 22), self_65948, 'bbox')
        # Getting the type of 'BboxBase' (line 1194)
        BboxBase_65950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 33), 'BboxBase', False)
        # Processing the call keyword arguments (line 1194)
        kwargs_65951 = {}
        # Getting the type of 'isinstance' (line 1194)
        isinstance_65947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1194, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1194)
        isinstance_call_result_65952 = invoke(stypy.reporting.localization.Localization(__file__, 1194, 11), isinstance_65947, *[bbox_65949, BboxBase_65950], **kwargs_65951)
        
        # Testing the type of an if condition (line 1194)
        if_condition_65953 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1194, 8), isinstance_call_result_65952)
        # Assigning a type to the variable 'if_condition_65953' (line 1194)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1194, 8), 'if_condition_65953', if_condition_65953)
        # SSA begins for if statement (line 1194)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # Getting the type of 'self' (line 1195)
        self_65954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1195, 19), 'self')
        # Obtaining the member 'bbox' of a type (line 1195)
        bbox_65955 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1195, 19), self_65954, 'bbox')
        # Assigning a type to the variable 'stypy_return_type' (line 1195)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1195, 12), 'stypy_return_type', bbox_65955)
        # SSA branch for the else part of an if statement (line 1194)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to callable(...): (line 1196)
        # Processing the call arguments (line 1196)
        # Getting the type of 'self' (line 1196)
        self_65957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 22), 'self', False)
        # Obtaining the member 'bbox' of a type (line 1196)
        bbox_65958 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1196, 22), self_65957, 'bbox')
        # Processing the call keyword arguments (line 1196)
        kwargs_65959 = {}
        # Getting the type of 'callable' (line 1196)
        callable_65956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1196, 13), 'callable', False)
        # Calling callable(args, kwargs) (line 1196)
        callable_call_result_65960 = invoke(stypy.reporting.localization.Localization(__file__, 1196, 13), callable_65956, *[bbox_65958], **kwargs_65959)
        
        # Testing the type of an if condition (line 1196)
        if_condition_65961 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1196, 13), callable_call_result_65960)
        # Assigning a type to the variable 'if_condition_65961' (line 1196)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1196, 13), 'if_condition_65961', if_condition_65961)
        # SSA begins for if statement (line 1196)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to bbox(...): (line 1197)
        # Processing the call arguments (line 1197)
        # Getting the type of 'renderer' (line 1197)
        renderer_65964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 29), 'renderer', False)
        # Processing the call keyword arguments (line 1197)
        kwargs_65965 = {}
        # Getting the type of 'self' (line 1197)
        self_65962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1197, 19), 'self', False)
        # Obtaining the member 'bbox' of a type (line 1197)
        bbox_65963 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1197, 19), self_65962, 'bbox')
        # Calling bbox(args, kwargs) (line 1197)
        bbox_call_result_65966 = invoke(stypy.reporting.localization.Localization(__file__, 1197, 19), bbox_65963, *[renderer_65964], **kwargs_65965)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1197)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1197, 12), 'stypy_return_type', bbox_call_result_65966)
        # SSA branch for the else part of an if statement (line 1196)
        module_type_store.open_ssa_branch('else')
        
        # Call to ValueError(...): (line 1199)
        # Processing the call arguments (line 1199)
        unicode_65968 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1199, 29), 'unicode', u'unknown type of bbox')
        # Processing the call keyword arguments (line 1199)
        kwargs_65969 = {}
        # Getting the type of 'ValueError' (line 1199)
        ValueError_65967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1199, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1199)
        ValueError_call_result_65970 = invoke(stypy.reporting.localization.Localization(__file__, 1199, 18), ValueError_65967, *[unicode_65968], **kwargs_65969)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1199, 12), ValueError_call_result_65970, 'raise parameter', BaseException)
        # SSA join for if statement (line 1196)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 1194)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'get_window_extent(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'get_window_extent' in the type store
        # Getting the type of 'stypy_return_type' (line 1190)
        stypy_return_type_65971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1190, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_65971)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'get_window_extent'
        return stypy_return_type_65971


    @norecursion
    def contains(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'contains'
        module_type_store = module_type_store.open_function_context('contains', 1201, 4, False)
        # Assigning a type to the variable 'self' (line 1202)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1202, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxImage.contains.__dict__.__setitem__('stypy_localization', localization)
        BboxImage.contains.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxImage.contains.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxImage.contains.__dict__.__setitem__('stypy_function_name', 'BboxImage.contains')
        BboxImage.contains.__dict__.__setitem__('stypy_param_names_list', ['mouseevent'])
        BboxImage.contains.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxImage.contains.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxImage.contains.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxImage.contains.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxImage.contains.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxImage.contains.__dict__.__setitem__('stypy_declared_arg_number', 2)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxImage.contains', ['mouseevent'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'contains', localization, ['mouseevent'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'contains(...)' code ##################

        unicode_65972 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1202, 8), 'unicode', u'Test whether the mouse event occurred within the image.')
        
        
        # Call to callable(...): (line 1203)
        # Processing the call arguments (line 1203)
        # Getting the type of 'self' (line 1203)
        self_65974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 20), 'self', False)
        # Obtaining the member '_contains' of a type (line 1203)
        _contains_65975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1203, 20), self_65974, '_contains')
        # Processing the call keyword arguments (line 1203)
        kwargs_65976 = {}
        # Getting the type of 'callable' (line 1203)
        callable_65973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 11), 'callable', False)
        # Calling callable(args, kwargs) (line 1203)
        callable_call_result_65977 = invoke(stypy.reporting.localization.Localization(__file__, 1203, 11), callable_65973, *[_contains_65975], **kwargs_65976)
        
        # Testing the type of an if condition (line 1203)
        if_condition_65978 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1203, 8), callable_call_result_65977)
        # Assigning a type to the variable 'if_condition_65978' (line 1203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 8), 'if_condition_65978', if_condition_65978)
        # SSA begins for if statement (line 1203)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to _contains(...): (line 1204)
        # Processing the call arguments (line 1204)
        # Getting the type of 'self' (line 1204)
        self_65981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 34), 'self', False)
        # Getting the type of 'mouseevent' (line 1204)
        mouseevent_65982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 40), 'mouseevent', False)
        # Processing the call keyword arguments (line 1204)
        kwargs_65983 = {}
        # Getting the type of 'self' (line 1204)
        self_65979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1204, 19), 'self', False)
        # Obtaining the member '_contains' of a type (line 1204)
        _contains_65980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1204, 19), self_65979, '_contains')
        # Calling _contains(args, kwargs) (line 1204)
        _contains_call_result_65984 = invoke(stypy.reporting.localization.Localization(__file__, 1204, 19), _contains_65980, *[self_65981, mouseevent_65982], **kwargs_65983)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1204)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1204, 12), 'stypy_return_type', _contains_call_result_65984)
        # SSA join for if statement (line 1203)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to get_visible(...): (line 1206)
        # Processing the call keyword arguments (line 1206)
        kwargs_65987 = {}
        # Getting the type of 'self' (line 1206)
        self_65985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 15), 'self', False)
        # Obtaining the member 'get_visible' of a type (line 1206)
        get_visible_65986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 15), self_65985, 'get_visible')
        # Calling get_visible(args, kwargs) (line 1206)
        get_visible_call_result_65988 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 15), get_visible_65986, *[], **kwargs_65987)
        
        # Applying the 'not' unary operator (line 1206)
        result_not__65989 = python_operator(stypy.reporting.localization.Localization(__file__, 1206, 11), 'not', get_visible_call_result_65988)
        
        # Testing the type of an if condition (line 1206)
        if_condition_65990 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1206, 8), result_not__65989)
        # Assigning a type to the variable 'if_condition_65990' (line 1206)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 8), 'if_condition_65990', if_condition_65990)
        # SSA begins for if statement (line 1206)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 1207)
        tuple_65991 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1207, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1207)
        # Adding element type (line 1207)
        # Getting the type of 'False' (line 1207)
        False_65992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 19), 'False')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1207, 19), tuple_65991, False_65992)
        # Adding element type (line 1207)
        
        # Obtaining an instance of the builtin type 'dict' (line 1207)
        dict_65993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1207, 26), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1207)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1207, 19), tuple_65991, dict_65993)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1207)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1207, 12), 'stypy_return_type', tuple_65991)
        # SSA join for if statement (line 1206)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Tuple to a Tuple (line 1209):
        
        # Assigning a Attribute to a Name (line 1209):
        # Getting the type of 'mouseevent' (line 1209)
        mouseevent_65994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 15), 'mouseevent')
        # Obtaining the member 'x' of a type (line 1209)
        x_65995 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1209, 15), mouseevent_65994, 'x')
        # Assigning a type to the variable 'tuple_assignment_62377' (line 1209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 8), 'tuple_assignment_62377', x_65995)
        
        # Assigning a Attribute to a Name (line 1209):
        # Getting the type of 'mouseevent' (line 1209)
        mouseevent_65996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 29), 'mouseevent')
        # Obtaining the member 'y' of a type (line 1209)
        y_65997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1209, 29), mouseevent_65996, 'y')
        # Assigning a type to the variable 'tuple_assignment_62378' (line 1209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 8), 'tuple_assignment_62378', y_65997)
        
        # Assigning a Name to a Name (line 1209):
        # Getting the type of 'tuple_assignment_62377' (line 1209)
        tuple_assignment_62377_65998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 8), 'tuple_assignment_62377')
        # Assigning a type to the variable 'x' (line 1209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 8), 'x', tuple_assignment_62377_65998)
        
        # Assigning a Name to a Name (line 1209):
        # Getting the type of 'tuple_assignment_62378' (line 1209)
        tuple_assignment_62378_65999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 8), 'tuple_assignment_62378')
        # Assigning a type to the variable 'y' (line 1209)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 11), 'y', tuple_assignment_62378_65999)
        
        # Assigning a Call to a Name (line 1210):
        
        # Assigning a Call to a Name (line 1210):
        
        # Call to contains(...): (line 1210)
        # Processing the call arguments (line 1210)
        # Getting the type of 'x' (line 1210)
        x_66005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 51), 'x', False)
        # Getting the type of 'y' (line 1210)
        y_66006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 54), 'y', False)
        # Processing the call keyword arguments (line 1210)
        kwargs_66007 = {}
        
        # Call to get_window_extent(...): (line 1210)
        # Processing the call keyword arguments (line 1210)
        kwargs_66002 = {}
        # Getting the type of 'self' (line 1210)
        self_66000 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 17), 'self', False)
        # Obtaining the member 'get_window_extent' of a type (line 1210)
        get_window_extent_66001 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 17), self_66000, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1210)
        get_window_extent_call_result_66003 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 17), get_window_extent_66001, *[], **kwargs_66002)
        
        # Obtaining the member 'contains' of a type (line 1210)
        contains_66004 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 17), get_window_extent_call_result_66003, 'contains')
        # Calling contains(args, kwargs) (line 1210)
        contains_call_result_66008 = invoke(stypy.reporting.localization.Localization(__file__, 1210, 17), contains_66004, *[x_66005, y_66006], **kwargs_66007)
        
        # Assigning a type to the variable 'inside' (line 1210)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 8), 'inside', contains_call_result_66008)
        
        # Obtaining an instance of the builtin type 'tuple' (line 1212)
        tuple_66009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1212, 15), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 1212)
        # Adding element type (line 1212)
        # Getting the type of 'inside' (line 1212)
        inside_66010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 15), 'inside')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1212, 15), tuple_66009, inside_66010)
        # Adding element type (line 1212)
        
        # Obtaining an instance of the builtin type 'dict' (line 1212)
        dict_66011 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1212, 23), 'dict')
        # Adding type elements to the builtin type 'dict' instance (line 1212)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1212, 15), tuple_66009, dict_66011)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1212)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 8), 'stypy_return_type', tuple_66009)
        
        # ################# End of 'contains(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'contains' in the type store
        # Getting the type of 'stypy_return_type' (line 1201)
        stypy_return_type_66012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1201, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_66012)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'contains'
        return stypy_return_type_66012


    @norecursion
    def make_image(type_of_self, localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        float_66013 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1214, 49), 'float')
        # Getting the type of 'False' (line 1214)
        False_66014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 64), 'False')
        defaults = [float_66013, False_66014]
        # Create a new context for function 'make_image'
        module_type_store = module_type_store.open_function_context('make_image', 1214, 4, False)
        # Assigning a type to the variable 'self' (line 1215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 4), 'self', type_of_self)
        
        # Passed parameters checking function
        BboxImage.make_image.__dict__.__setitem__('stypy_localization', localization)
        BboxImage.make_image.__dict__.__setitem__('stypy_type_of_self', type_of_self)
        BboxImage.make_image.__dict__.__setitem__('stypy_type_store', module_type_store)
        BboxImage.make_image.__dict__.__setitem__('stypy_function_name', 'BboxImage.make_image')
        BboxImage.make_image.__dict__.__setitem__('stypy_param_names_list', ['renderer', 'magnification', 'unsampled'])
        BboxImage.make_image.__dict__.__setitem__('stypy_varargs_param_name', None)
        BboxImage.make_image.__dict__.__setitem__('stypy_kwargs_param_name', None)
        BboxImage.make_image.__dict__.__setitem__('stypy_call_defaults', defaults)
        BboxImage.make_image.__dict__.__setitem__('stypy_call_varargs', varargs)
        BboxImage.make_image.__dict__.__setitem__('stypy_call_kwargs', kwargs)
        BboxImage.make_image.__dict__.__setitem__('stypy_declared_arg_number', 4)
        arguments = process_argument_values(localization, type_of_self, module_type_store, 'BboxImage.make_image', ['renderer', 'magnification', 'unsampled'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'make_image', localization, ['renderer', 'magnification', 'unsampled'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'make_image(...)' code ##################

        
        # Assigning a Call to a Tuple (line 1215):
        
        # Assigning a Call to a Name:
        
        # Call to get_canvas_width_height(...): (line 1215)
        # Processing the call keyword arguments (line 1215)
        kwargs_66017 = {}
        # Getting the type of 'renderer' (line 1215)
        renderer_66015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 24), 'renderer', False)
        # Obtaining the member 'get_canvas_width_height' of a type (line 1215)
        get_canvas_width_height_66016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 24), renderer_66015, 'get_canvas_width_height')
        # Calling get_canvas_width_height(args, kwargs) (line 1215)
        get_canvas_width_height_call_result_66018 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 24), get_canvas_width_height_66016, *[], **kwargs_66017)
        
        # Assigning a type to the variable 'call_assignment_62379' (line 1215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'call_assignment_62379', get_canvas_width_height_call_result_66018)
        
        # Assigning a Call to a Name (line 1215):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_66021 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1215, 8), 'int')
        # Processing the call keyword arguments
        kwargs_66022 = {}
        # Getting the type of 'call_assignment_62379' (line 1215)
        call_assignment_62379_66019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'call_assignment_62379', False)
        # Obtaining the member '__getitem__' of a type (line 1215)
        getitem___66020 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 8), call_assignment_62379_66019, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_66023 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___66020, *[int_66021], **kwargs_66022)
        
        # Assigning a type to the variable 'call_assignment_62380' (line 1215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'call_assignment_62380', getitem___call_result_66023)
        
        # Assigning a Name to a Name (line 1215):
        # Getting the type of 'call_assignment_62380' (line 1215)
        call_assignment_62380_66024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'call_assignment_62380')
        # Assigning a type to the variable 'width' (line 1215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'width', call_assignment_62380_66024)
        
        # Assigning a Call to a Name (line 1215):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_66027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1215, 8), 'int')
        # Processing the call keyword arguments
        kwargs_66028 = {}
        # Getting the type of 'call_assignment_62379' (line 1215)
        call_assignment_62379_66025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'call_assignment_62379', False)
        # Obtaining the member '__getitem__' of a type (line 1215)
        getitem___66026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 8), call_assignment_62379_66025, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_66029 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___66026, *[int_66027], **kwargs_66028)
        
        # Assigning a type to the variable 'call_assignment_62381' (line 1215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'call_assignment_62381', getitem___call_result_66029)
        
        # Assigning a Name to a Name (line 1215):
        # Getting the type of 'call_assignment_62381' (line 1215)
        call_assignment_62381_66030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'call_assignment_62381')
        # Assigning a type to the variable 'height' (line 1215)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 15), 'height', call_assignment_62381_66030)
        
        # Assigning a Call to a Name (line 1217):
        
        # Assigning a Call to a Name (line 1217):
        
        # Call to frozen(...): (line 1217)
        # Processing the call keyword arguments (line 1217)
        kwargs_66037 = {}
        
        # Call to get_window_extent(...): (line 1217)
        # Processing the call arguments (line 1217)
        # Getting the type of 'renderer' (line 1217)
        renderer_66033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 41), 'renderer', False)
        # Processing the call keyword arguments (line 1217)
        kwargs_66034 = {}
        # Getting the type of 'self' (line 1217)
        self_66031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 18), 'self', False)
        # Obtaining the member 'get_window_extent' of a type (line 1217)
        get_window_extent_66032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 18), self_66031, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1217)
        get_window_extent_call_result_66035 = invoke(stypy.reporting.localization.Localization(__file__, 1217, 18), get_window_extent_66032, *[renderer_66033], **kwargs_66034)
        
        # Obtaining the member 'frozen' of a type (line 1217)
        frozen_66036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1217, 18), get_window_extent_call_result_66035, 'frozen')
        # Calling frozen(args, kwargs) (line 1217)
        frozen_call_result_66038 = invoke(stypy.reporting.localization.Localization(__file__, 1217, 18), frozen_66036, *[], **kwargs_66037)
        
        # Assigning a type to the variable 'bbox_in' (line 1217)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 8), 'bbox_in', frozen_call_result_66038)
        
        # Getting the type of 'bbox_in' (line 1218)
        bbox_in_66039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 8), 'bbox_in')
        # Obtaining the member '_points' of a type (line 1218)
        _points_66040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 8), bbox_in_66039, '_points')
        
        # Obtaining an instance of the builtin type 'list' (line 1218)
        list_66041 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1218, 27), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1218)
        # Adding element type (line 1218)
        # Getting the type of 'width' (line 1218)
        width_66042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 28), 'width')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1218, 27), list_66041, width_66042)
        # Adding element type (line 1218)
        # Getting the type of 'height' (line 1218)
        height_66043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 35), 'height')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1218, 27), list_66041, height_66043)
        
        # Applying the binary operator 'div=' (line 1218)
        result_div_66044 = python_operator(stypy.reporting.localization.Localization(__file__, 1218, 8), 'div=', _points_66040, list_66041)
        # Getting the type of 'bbox_in' (line 1218)
        bbox_in_66045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 8), 'bbox_in')
        # Setting the type of the member '_points' of a type (line 1218)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1218, 8), bbox_in_66045, '_points', result_div_66044)
        
        
        # Assigning a Call to a Name (line 1219):
        
        # Assigning a Call to a Name (line 1219):
        
        # Call to get_window_extent(...): (line 1219)
        # Processing the call arguments (line 1219)
        # Getting the type of 'renderer' (line 1219)
        renderer_66048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 42), 'renderer', False)
        # Processing the call keyword arguments (line 1219)
        kwargs_66049 = {}
        # Getting the type of 'self' (line 1219)
        self_66046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1219, 19), 'self', False)
        # Obtaining the member 'get_window_extent' of a type (line 1219)
        get_window_extent_66047 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1219, 19), self_66046, 'get_window_extent')
        # Calling get_window_extent(args, kwargs) (line 1219)
        get_window_extent_call_result_66050 = invoke(stypy.reporting.localization.Localization(__file__, 1219, 19), get_window_extent_66047, *[renderer_66048], **kwargs_66049)
        
        # Assigning a type to the variable 'bbox_out' (line 1219)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1219, 8), 'bbox_out', get_window_extent_call_result_66050)
        
        # Assigning a Call to a Name (line 1220):
        
        # Assigning a Call to a Name (line 1220):
        
        # Call to Bbox(...): (line 1220)
        # Processing the call arguments (line 1220)
        
        # Obtaining an instance of the builtin type 'list' (line 1220)
        list_66052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1220, 20), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1220)
        # Adding element type (line 1220)
        
        # Obtaining an instance of the builtin type 'list' (line 1220)
        list_66053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1220, 21), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1220)
        # Adding element type (line 1220)
        int_66054 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1220, 22), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1220, 21), list_66053, int_66054)
        # Adding element type (line 1220)
        int_66055 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1220, 25), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1220, 21), list_66053, int_66055)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1220, 20), list_66052, list_66053)
        # Adding element type (line 1220)
        
        # Obtaining an instance of the builtin type 'list' (line 1220)
        list_66056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1220, 29), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1220)
        # Adding element type (line 1220)
        # Getting the type of 'width' (line 1220)
        width_66057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 30), 'width', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1220, 29), list_66056, width_66057)
        # Adding element type (line 1220)
        # Getting the type of 'height' (line 1220)
        height_66058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 37), 'height', False)
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1220, 29), list_66056, height_66058)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1220, 20), list_66052, list_66056)
        
        # Processing the call keyword arguments (line 1220)
        kwargs_66059 = {}
        # Getting the type of 'Bbox' (line 1220)
        Bbox_66051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 15), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 1220)
        Bbox_call_result_66060 = invoke(stypy.reporting.localization.Localization(__file__, 1220, 15), Bbox_66051, *[list_66052], **kwargs_66059)
        
        # Assigning a type to the variable 'clip' (line 1220)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 8), 'clip', Bbox_call_result_66060)
        
        # Assigning a Call to a Attribute (line 1221):
        
        # Assigning a Call to a Attribute (line 1221):
        
        # Call to BboxTransform(...): (line 1221)
        # Processing the call arguments (line 1221)
        
        # Call to Bbox(...): (line 1221)
        # Processing the call arguments (line 1221)
        
        # Obtaining an instance of the builtin type 'list' (line 1221)
        list_66063 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 45), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1221)
        # Adding element type (line 1221)
        
        # Obtaining an instance of the builtin type 'list' (line 1221)
        list_66064 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 46), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1221)
        # Adding element type (line 1221)
        int_66065 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 47), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1221, 46), list_66064, int_66065)
        # Adding element type (line 1221)
        int_66066 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 50), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1221, 46), list_66064, int_66066)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1221, 45), list_66063, list_66064)
        # Adding element type (line 1221)
        
        # Obtaining an instance of the builtin type 'list' (line 1221)
        list_66067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 54), 'list')
        # Adding type elements to the builtin type 'list' instance (line 1221)
        # Adding element type (line 1221)
        int_66068 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 55), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1221, 54), list_66067, int_66068)
        # Adding element type (line 1221)
        int_66069 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1221, 58), 'int')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1221, 54), list_66067, int_66069)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1221, 45), list_66063, list_66067)
        
        # Processing the call keyword arguments (line 1221)
        kwargs_66070 = {}
        # Getting the type of 'Bbox' (line 1221)
        Bbox_66062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 40), 'Bbox', False)
        # Calling Bbox(args, kwargs) (line 1221)
        Bbox_call_result_66071 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 40), Bbox_66062, *[list_66063], **kwargs_66070)
        
        # Getting the type of 'clip' (line 1221)
        clip_66072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 64), 'clip', False)
        # Processing the call keyword arguments (line 1221)
        kwargs_66073 = {}
        # Getting the type of 'BboxTransform' (line 1221)
        BboxTransform_66061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 26), 'BboxTransform', False)
        # Calling BboxTransform(args, kwargs) (line 1221)
        BboxTransform_call_result_66074 = invoke(stypy.reporting.localization.Localization(__file__, 1221, 26), BboxTransform_66061, *[Bbox_call_result_66071, clip_66072], **kwargs_66073)
        
        # Getting the type of 'self' (line 1221)
        self_66075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1221, 8), 'self')
        # Setting the type of the member '_transform' of a type (line 1221)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 1221, 8), self_66075, '_transform', BboxTransform_call_result_66074)
        
        # Call to _make_image(...): (line 1223)
        # Processing the call arguments (line 1223)
        # Getting the type of 'self' (line 1224)
        self_66078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1224, 12), 'self', False)
        # Obtaining the member '_A' of a type (line 1224)
        _A_66079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1224, 12), self_66078, '_A')
        # Getting the type of 'bbox_in' (line 1225)
        bbox_in_66080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 12), 'bbox_in', False)
        # Getting the type of 'bbox_out' (line 1225)
        bbox_out_66081 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 21), 'bbox_out', False)
        # Getting the type of 'clip' (line 1225)
        clip_66082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 31), 'clip', False)
        # Getting the type of 'magnification' (line 1225)
        magnification_66083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 37), 'magnification', False)
        # Processing the call keyword arguments (line 1223)
        # Getting the type of 'unsampled' (line 1225)
        unsampled_66084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1225, 62), 'unsampled', False)
        keyword_66085 = unsampled_66084
        kwargs_66086 = {'unsampled': keyword_66085}
        # Getting the type of 'self' (line 1223)
        self_66076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 15), 'self', False)
        # Obtaining the member '_make_image' of a type (line 1223)
        _make_image_66077 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1223, 15), self_66076, '_make_image')
        # Calling _make_image(args, kwargs) (line 1223)
        _make_image_call_result_66087 = invoke(stypy.reporting.localization.Localization(__file__, 1223, 15), _make_image_66077, *[_A_66079, bbox_in_66080, bbox_out_66081, clip_66082, magnification_66083], **kwargs_66086)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1223)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 8), 'stypy_return_type', _make_image_call_result_66087)
        
        # ################# End of 'make_image(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'make_image' in the type store
        # Getting the type of 'stypy_return_type' (line 1214)
        stypy_return_type_66088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1214, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_66088)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'make_image'
        return stypy_return_type_66088


# Assigning a type to the variable 'BboxImage' (line 1143)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1143, 0), 'BboxImage', BboxImage)

@norecursion
def imread(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1228)
    None_66089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 25), 'None')
    defaults = [None_66089]
    # Create a new context for function 'imread'
    module_type_store = module_type_store.open_function_context('imread', 1228, 0, False)
    
    # Passed parameters checking function
    imread.stypy_localization = localization
    imread.stypy_type_of_self = None
    imread.stypy_type_store = module_type_store
    imread.stypy_function_name = 'imread'
    imread.stypy_param_names_list = ['fname', 'format']
    imread.stypy_varargs_param_name = None
    imread.stypy_kwargs_param_name = None
    imread.stypy_call_defaults = defaults
    imread.stypy_call_varargs = varargs
    imread.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'imread', ['fname', 'format'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'imread', localization, ['fname', 'format'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'imread(...)' code ##################

    unicode_66090 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1250, (-1)), 'unicode', u'\n    Read an image from a file into an array.\n\n    *fname* may be a string path, a valid URL, or a Python\n    file-like object.  If using a file object, it must be opened in binary\n    mode.\n\n    If *format* is provided, will try to read file of that type,\n    otherwise the format is deduced from the filename.  If nothing can\n    be deduced, PNG is tried.\n\n    Return value is a :class:`numpy.array`.  For grayscale images, the\n    return array is MxN.  For RGB images, the return value is MxNx3.\n    For RGBA images the return value is MxNx4.\n\n    matplotlib can only read PNGs natively, but if `PIL\n    <http://www.pythonware.com/products/pil/>`_ is installed, it will\n    use it to load the image and return an array (if possible) which\n    can be used with :func:`~matplotlib.pyplot.imshow`. Note, URL strings\n    may not be compatible with PIL. Check the PIL documentation for more\n    information.\n    ')

    @norecursion
    def pilread(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pilread'
        module_type_store = module_type_store.open_function_context('pilread', 1252, 4, False)
        
        # Passed parameters checking function
        pilread.stypy_localization = localization
        pilread.stypy_type_of_self = None
        pilread.stypy_type_store = module_type_store
        pilread.stypy_function_name = 'pilread'
        pilread.stypy_param_names_list = ['fname']
        pilread.stypy_varargs_param_name = None
        pilread.stypy_kwargs_param_name = None
        pilread.stypy_call_defaults = defaults
        pilread.stypy_call_varargs = varargs
        pilread.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'pilread', ['fname'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pilread', localization, ['fname'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pilread(...)' code ##################

        unicode_66091 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1253, 8), 'unicode', u'try to load the image with PIL or return None')
        
        
        # SSA begins for try-except statement (line 1254)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1255, 12))
        
        # 'from PIL import Image' statement (line 1255)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_66092 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1255, 12), 'PIL')

        if (type(import_66092) is not StypyTypeError):

            if (import_66092 != 'pyd_module'):
                __import__(import_66092)
                sys_modules_66093 = sys.modules[import_66092]
                import_from_module(stypy.reporting.localization.Localization(__file__, 1255, 12), 'PIL', sys_modules_66093.module_type_store, module_type_store, ['Image'])
                nest_module(stypy.reporting.localization.Localization(__file__, 1255, 12), __file__, sys_modules_66093, sys_modules_66093.module_type_store, module_type_store)
            else:
                from PIL import Image

                import_from_module(stypy.reporting.localization.Localization(__file__, 1255, 12), 'PIL', None, module_type_store, ['Image'], [Image])

        else:
            # Assigning a type to the variable 'PIL' (line 1255)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1255, 12), 'PIL', import_66092)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        # SSA branch for the except part of a try statement (line 1254)
        # SSA branch for the except 'ImportError' branch of a try statement (line 1254)
        module_type_store.open_ssa_branch('except')
        # Getting the type of 'None' (line 1257)
        None_66094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1257, 19), 'None')
        # Assigning a type to the variable 'stypy_return_type' (line 1257)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1257, 12), 'stypy_return_type', None_66094)
        # SSA join for try-except statement (line 1254)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to open(...): (line 1258)
        # Processing the call arguments (line 1258)
        # Getting the type of 'fname' (line 1258)
        fname_66097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 24), 'fname', False)
        # Processing the call keyword arguments (line 1258)
        kwargs_66098 = {}
        # Getting the type of 'Image' (line 1258)
        Image_66095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1258, 13), 'Image', False)
        # Obtaining the member 'open' of a type (line 1258)
        open_66096 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1258, 13), Image_66095, 'open')
        # Calling open(args, kwargs) (line 1258)
        open_call_result_66099 = invoke(stypy.reporting.localization.Localization(__file__, 1258, 13), open_66096, *[fname_66097], **kwargs_66098)
        
        with_66100 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1258, 13), open_call_result_66099, 'with parameter', '__enter__', '__exit__')

        if with_66100:
            # Calling the __enter__ method to initiate a with section
            # Obtaining the member '__enter__' of a type (line 1258)
            enter___66101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1258, 13), open_call_result_66099, '__enter__')
            with_enter_66102 = invoke(stypy.reporting.localization.Localization(__file__, 1258, 13), enter___66101)
            # Assigning a type to the variable 'image' (line 1258)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1258, 13), 'image', with_enter_66102)
            
            # Call to pil_to_array(...): (line 1259)
            # Processing the call arguments (line 1259)
            # Getting the type of 'image' (line 1259)
            image_66104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 32), 'image', False)
            # Processing the call keyword arguments (line 1259)
            kwargs_66105 = {}
            # Getting the type of 'pil_to_array' (line 1259)
            pil_to_array_66103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1259, 19), 'pil_to_array', False)
            # Calling pil_to_array(args, kwargs) (line 1259)
            pil_to_array_call_result_66106 = invoke(stypy.reporting.localization.Localization(__file__, 1259, 19), pil_to_array_66103, *[image_66104], **kwargs_66105)
            
            # Assigning a type to the variable 'stypy_return_type' (line 1259)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1259, 12), 'stypy_return_type', pil_to_array_call_result_66106)
            # Calling the __exit__ method to finish a with section
            # Obtaining the member '__exit__' of a type (line 1258)
            exit___66107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1258, 13), open_call_result_66099, '__exit__')
            with_exit_66108 = invoke(stypy.reporting.localization.Localization(__file__, 1258, 13), exit___66107, None, None, None)

        
        # ################# End of 'pilread(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pilread' in the type store
        # Getting the type of 'stypy_return_type' (line 1252)
        stypy_return_type_66109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1252, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_66109)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pilread'
        return stypy_return_type_66109

    # Assigning a type to the variable 'pilread' (line 1252)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1252, 4), 'pilread', pilread)
    
    # Assigning a Dict to a Name (line 1261):
    
    # Assigning a Dict to a Name (line 1261):
    
    # Obtaining an instance of the builtin type 'dict' (line 1261)
    dict_66110 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, 15), 'dict')
    # Adding type elements to the builtin type 'dict' instance (line 1261)
    # Adding element type (key, value) (line 1261)
    unicode_66111 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1261, 16), 'unicode', u'png')
    # Getting the type of '_png' (line 1261)
    _png_66112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1261, 23), '_png')
    # Obtaining the member 'read_png' of a type (line 1261)
    read_png_66113 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1261, 23), _png_66112, 'read_png')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1261, 15), dict_66110, (unicode_66111, read_png_66113))
    
    # Assigning a type to the variable 'handlers' (line 1261)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1261, 4), 'handlers', dict_66110)
    
    # Type idiom detected: calculating its left and rigth part (line 1262)
    # Getting the type of 'format' (line 1262)
    format_66114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 7), 'format')
    # Getting the type of 'None' (line 1262)
    None_66115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1262, 17), 'None')
    
    (may_be_66116, more_types_in_union_66117) = may_be_none(format_66114, None_66115)

    if may_be_66116:

        if more_types_in_union_66117:
            # Runtime conditional SSA (line 1262)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        
        # Call to isinstance(...): (line 1263)
        # Processing the call arguments (line 1263)
        # Getting the type of 'fname' (line 1263)
        fname_66119 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 22), 'fname', False)
        # Getting the type of 'six' (line 1263)
        six_66120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 29), 'six', False)
        # Obtaining the member 'string_types' of a type (line 1263)
        string_types_66121 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1263, 29), six_66120, 'string_types')
        # Processing the call keyword arguments (line 1263)
        kwargs_66122 = {}
        # Getting the type of 'isinstance' (line 1263)
        isinstance_66118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1263, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 1263)
        isinstance_call_result_66123 = invoke(stypy.reporting.localization.Localization(__file__, 1263, 11), isinstance_66118, *[fname_66119, string_types_66121], **kwargs_66122)
        
        # Testing the type of an if condition (line 1263)
        if_condition_66124 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1263, 8), isinstance_call_result_66123)
        # Assigning a type to the variable 'if_condition_66124' (line 1263)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1263, 8), 'if_condition_66124', if_condition_66124)
        # SSA begins for if statement (line 1263)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 1264):
        
        # Assigning a Call to a Name (line 1264):
        
        # Call to urlparse(...): (line 1264)
        # Processing the call arguments (line 1264)
        # Getting the type of 'fname' (line 1264)
        fname_66126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 30), 'fname', False)
        # Processing the call keyword arguments (line 1264)
        kwargs_66127 = {}
        # Getting the type of 'urlparse' (line 1264)
        urlparse_66125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1264, 21), 'urlparse', False)
        # Calling urlparse(args, kwargs) (line 1264)
        urlparse_call_result_66128 = invoke(stypy.reporting.localization.Localization(__file__, 1264, 21), urlparse_66125, *[fname_66126], **kwargs_66127)
        
        # Assigning a type to the variable 'parsed' (line 1264)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1264, 12), 'parsed', urlparse_call_result_66128)
        
        
        
        # Call to len(...): (line 1266)
        # Processing the call arguments (line 1266)
        # Getting the type of 'parsed' (line 1266)
        parsed_66130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 19), 'parsed', False)
        # Obtaining the member 'scheme' of a type (line 1266)
        scheme_66131 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1266, 19), parsed_66130, 'scheme')
        # Processing the call keyword arguments (line 1266)
        kwargs_66132 = {}
        # Getting the type of 'len' (line 1266)
        len_66129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1266, 15), 'len', False)
        # Calling len(args, kwargs) (line 1266)
        len_call_result_66133 = invoke(stypy.reporting.localization.Localization(__file__, 1266, 15), len_66129, *[scheme_66131], **kwargs_66132)
        
        int_66134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1266, 36), 'int')
        # Applying the binary operator '>' (line 1266)
        result_gt_66135 = python_operator(stypy.reporting.localization.Localization(__file__, 1266, 15), '>', len_call_result_66133, int_66134)
        
        # Testing the type of an if condition (line 1266)
        if_condition_66136 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1266, 12), result_gt_66135)
        # Assigning a type to the variable 'if_condition_66136' (line 1266)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1266, 12), 'if_condition_66136', if_condition_66136)
        # SSA begins for if statement (line 1266)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Str to a Name (line 1267):
        
        # Assigning a Str to a Name (line 1267):
        unicode_66137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1267, 22), 'unicode', u'png')
        # Assigning a type to the variable 'ext' (line 1267)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1267, 16), 'ext', unicode_66137)
        # SSA branch for the else part of an if statement (line 1266)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Tuple (line 1269):
        
        # Assigning a Call to a Name:
        
        # Call to splitext(...): (line 1269)
        # Processing the call arguments (line 1269)
        # Getting the type of 'fname' (line 1269)
        fname_66141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 49), 'fname', False)
        # Processing the call keyword arguments (line 1269)
        kwargs_66142 = {}
        # Getting the type of 'os' (line 1269)
        os_66138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 32), 'os', False)
        # Obtaining the member 'path' of a type (line 1269)
        path_66139 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1269, 32), os_66138, 'path')
        # Obtaining the member 'splitext' of a type (line 1269)
        splitext_66140 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1269, 32), path_66139, 'splitext')
        # Calling splitext(args, kwargs) (line 1269)
        splitext_call_result_66143 = invoke(stypy.reporting.localization.Localization(__file__, 1269, 32), splitext_66140, *[fname_66141], **kwargs_66142)
        
        # Assigning a type to the variable 'call_assignment_62382' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 16), 'call_assignment_62382', splitext_call_result_66143)
        
        # Assigning a Call to a Name (line 1269):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_66146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1269, 16), 'int')
        # Processing the call keyword arguments
        kwargs_66147 = {}
        # Getting the type of 'call_assignment_62382' (line 1269)
        call_assignment_62382_66144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 16), 'call_assignment_62382', False)
        # Obtaining the member '__getitem__' of a type (line 1269)
        getitem___66145 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1269, 16), call_assignment_62382_66144, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_66148 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___66145, *[int_66146], **kwargs_66147)
        
        # Assigning a type to the variable 'call_assignment_62383' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 16), 'call_assignment_62383', getitem___call_result_66148)
        
        # Assigning a Name to a Name (line 1269):
        # Getting the type of 'call_assignment_62383' (line 1269)
        call_assignment_62383_66149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 16), 'call_assignment_62383')
        # Assigning a type to the variable 'basename' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 16), 'basename', call_assignment_62383_66149)
        
        # Assigning a Call to a Name (line 1269):
        
        # Call to __getitem__(...):
        # Processing the call arguments
        int_66152 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1269, 16), 'int')
        # Processing the call keyword arguments
        kwargs_66153 = {}
        # Getting the type of 'call_assignment_62382' (line 1269)
        call_assignment_62382_66150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 16), 'call_assignment_62382', False)
        # Obtaining the member '__getitem__' of a type (line 1269)
        getitem___66151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1269, 16), call_assignment_62382_66150, '__getitem__')
        # Calling __getitem__(args, kwargs)
        getitem___call_result_66154 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___66151, *[int_66152], **kwargs_66153)
        
        # Assigning a type to the variable 'call_assignment_62384' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 16), 'call_assignment_62384', getitem___call_result_66154)
        
        # Assigning a Name to a Name (line 1269):
        # Getting the type of 'call_assignment_62384' (line 1269)
        call_assignment_62384_66155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1269, 16), 'call_assignment_62384')
        # Assigning a type to the variable 'ext' (line 1269)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1269, 26), 'ext', call_assignment_62384_66155)
        
        # Assigning a Subscript to a Name (line 1270):
        
        # Assigning a Subscript to a Name (line 1270):
        
        # Obtaining the type of the subscript
        int_66156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1270, 34), 'int')
        slice_66157 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1270, 22), int_66156, None, None)
        
        # Call to lower(...): (line 1270)
        # Processing the call keyword arguments (line 1270)
        kwargs_66160 = {}
        # Getting the type of 'ext' (line 1270)
        ext_66158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1270, 22), 'ext', False)
        # Obtaining the member 'lower' of a type (line 1270)
        lower_66159 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1270, 22), ext_66158, 'lower')
        # Calling lower(args, kwargs) (line 1270)
        lower_call_result_66161 = invoke(stypy.reporting.localization.Localization(__file__, 1270, 22), lower_66159, *[], **kwargs_66160)
        
        # Obtaining the member '__getitem__' of a type (line 1270)
        getitem___66162 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1270, 22), lower_call_result_66161, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 1270)
        subscript_call_result_66163 = invoke(stypy.reporting.localization.Localization(__file__, 1270, 22), getitem___66162, slice_66157)
        
        # Assigning a type to the variable 'ext' (line 1270)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1270, 16), 'ext', subscript_call_result_66163)
        # SSA join for if statement (line 1266)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 1263)
        module_type_store.open_ssa_branch('else')
        
        # Type idiom detected: calculating its left and rigth part (line 1271)
        unicode_66164 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1271, 28), 'unicode', u'name')
        # Getting the type of 'fname' (line 1271)
        fname_66165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1271, 21), 'fname')
        
        (may_be_66166, more_types_in_union_66167) = may_provide_member(unicode_66164, fname_66165)

        if may_be_66166:

            if more_types_in_union_66167:
                # Runtime conditional SSA (line 1271)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            # Assigning a type to the variable 'fname' (line 1271)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 13), 'fname', remove_not_member_provider_from_union(fname_66165, u'name'))
            
            # Assigning a Call to a Tuple (line 1272):
            
            # Assigning a Call to a Name:
            
            # Call to splitext(...): (line 1272)
            # Processing the call arguments (line 1272)
            # Getting the type of 'fname' (line 1272)
            fname_66171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 45), 'fname', False)
            # Obtaining the member 'name' of a type (line 1272)
            name_66172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 45), fname_66171, 'name')
            # Processing the call keyword arguments (line 1272)
            kwargs_66173 = {}
            # Getting the type of 'os' (line 1272)
            os_66168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 28), 'os', False)
            # Obtaining the member 'path' of a type (line 1272)
            path_66169 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 28), os_66168, 'path')
            # Obtaining the member 'splitext' of a type (line 1272)
            splitext_66170 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 28), path_66169, 'splitext')
            # Calling splitext(args, kwargs) (line 1272)
            splitext_call_result_66174 = invoke(stypy.reporting.localization.Localization(__file__, 1272, 28), splitext_66170, *[name_66172], **kwargs_66173)
            
            # Assigning a type to the variable 'call_assignment_62385' (line 1272)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 12), 'call_assignment_62385', splitext_call_result_66174)
            
            # Assigning a Call to a Name (line 1272):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_66177 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1272, 12), 'int')
            # Processing the call keyword arguments
            kwargs_66178 = {}
            # Getting the type of 'call_assignment_62385' (line 1272)
            call_assignment_62385_66175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 12), 'call_assignment_62385', False)
            # Obtaining the member '__getitem__' of a type (line 1272)
            getitem___66176 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 12), call_assignment_62385_66175, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_66179 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___66176, *[int_66177], **kwargs_66178)
            
            # Assigning a type to the variable 'call_assignment_62386' (line 1272)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 12), 'call_assignment_62386', getitem___call_result_66179)
            
            # Assigning a Name to a Name (line 1272):
            # Getting the type of 'call_assignment_62386' (line 1272)
            call_assignment_62386_66180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 12), 'call_assignment_62386')
            # Assigning a type to the variable 'basename' (line 1272)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 12), 'basename', call_assignment_62386_66180)
            
            # Assigning a Call to a Name (line 1272):
            
            # Call to __getitem__(...):
            # Processing the call arguments
            int_66183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1272, 12), 'int')
            # Processing the call keyword arguments
            kwargs_66184 = {}
            # Getting the type of 'call_assignment_62385' (line 1272)
            call_assignment_62385_66181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 12), 'call_assignment_62385', False)
            # Obtaining the member '__getitem__' of a type (line 1272)
            getitem___66182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1272, 12), call_assignment_62385_66181, '__getitem__')
            # Calling __getitem__(args, kwargs)
            getitem___call_result_66185 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___66182, *[int_66183], **kwargs_66184)
            
            # Assigning a type to the variable 'call_assignment_62387' (line 1272)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 12), 'call_assignment_62387', getitem___call_result_66185)
            
            # Assigning a Name to a Name (line 1272):
            # Getting the type of 'call_assignment_62387' (line 1272)
            call_assignment_62387_66186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1272, 12), 'call_assignment_62387')
            # Assigning a type to the variable 'ext' (line 1272)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1272, 22), 'ext', call_assignment_62387_66186)
            
            # Assigning a Subscript to a Name (line 1273):
            
            # Assigning a Subscript to a Name (line 1273):
            
            # Obtaining the type of the subscript
            int_66187 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1273, 30), 'int')
            slice_66188 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1273, 18), int_66187, None, None)
            
            # Call to lower(...): (line 1273)
            # Processing the call keyword arguments (line 1273)
            kwargs_66191 = {}
            # Getting the type of 'ext' (line 1273)
            ext_66189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1273, 18), 'ext', False)
            # Obtaining the member 'lower' of a type (line 1273)
            lower_66190 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1273, 18), ext_66189, 'lower')
            # Calling lower(args, kwargs) (line 1273)
            lower_call_result_66192 = invoke(stypy.reporting.localization.Localization(__file__, 1273, 18), lower_66190, *[], **kwargs_66191)
            
            # Obtaining the member '__getitem__' of a type (line 1273)
            getitem___66193 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1273, 18), lower_call_result_66192, '__getitem__')
            # Calling the subscript (__getitem__) to obtain the elements type (line 1273)
            subscript_call_result_66194 = invoke(stypy.reporting.localization.Localization(__file__, 1273, 18), getitem___66193, slice_66188)
            
            # Assigning a type to the variable 'ext' (line 1273)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1273, 12), 'ext', subscript_call_result_66194)

            if more_types_in_union_66167:
                # Runtime conditional SSA for else branch (line 1271)
                module_type_store.open_ssa_branch('idiom else')



        if ((not may_be_66166) or more_types_in_union_66167):
            # Assigning a type to the variable 'fname' (line 1271)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1271, 13), 'fname', remove_member_provider_from_union(fname_66165, u'name'))
            
            # Assigning a Str to a Name (line 1275):
            
            # Assigning a Str to a Name (line 1275):
            unicode_66195 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1275, 18), 'unicode', u'png')
            # Assigning a type to the variable 'ext' (line 1275)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1275, 12), 'ext', unicode_66195)

            if (may_be_66166 and more_types_in_union_66167):
                # SSA join for if statement (line 1271)
                module_type_store = module_type_store.join_ssa_context()


        
        # SSA join for if statement (line 1263)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_66117:
            # Runtime conditional SSA for else branch (line 1262)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_66116) or more_types_in_union_66117):
        
        # Assigning a Name to a Name (line 1277):
        
        # Assigning a Name to a Name (line 1277):
        # Getting the type of 'format' (line 1277)
        format_66196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 14), 'format')
        # Assigning a type to the variable 'ext' (line 1277)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1277, 8), 'ext', format_66196)

        if (may_be_66116 and more_types_in_union_66117):
            # SSA join for if statement (line 1262)
            module_type_store = module_type_store.join_ssa_context()


    
    
    
    # Getting the type of 'ext' (line 1279)
    ext_66197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 7), 'ext')
    # Getting the type of 'handlers' (line 1279)
    handlers_66198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1279, 18), 'handlers')
    # Applying the binary operator 'notin' (line 1279)
    result_contains_66199 = python_operator(stypy.reporting.localization.Localization(__file__, 1279, 7), 'notin', ext_66197, handlers_66198)
    
    # Testing the type of an if condition (line 1279)
    if_condition_66200 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1279, 4), result_contains_66199)
    # Assigning a type to the variable 'if_condition_66200' (line 1279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1279, 4), 'if_condition_66200', if_condition_66200)
    # SSA begins for if statement (line 1279)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1280):
    
    # Assigning a Call to a Name (line 1280):
    
    # Call to pilread(...): (line 1280)
    # Processing the call arguments (line 1280)
    # Getting the type of 'fname' (line 1280)
    fname_66202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 21), 'fname', False)
    # Processing the call keyword arguments (line 1280)
    kwargs_66203 = {}
    # Getting the type of 'pilread' (line 1280)
    pilread_66201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 13), 'pilread', False)
    # Calling pilread(args, kwargs) (line 1280)
    pilread_call_result_66204 = invoke(stypy.reporting.localization.Localization(__file__, 1280, 13), pilread_66201, *[fname_66202], **kwargs_66203)
    
    # Assigning a type to the variable 'im' (line 1280)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 8), 'im', pilread_call_result_66204)
    
    # Type idiom detected: calculating its left and rigth part (line 1281)
    # Getting the type of 'im' (line 1281)
    im_66205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 11), 'im')
    # Getting the type of 'None' (line 1281)
    None_66206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1281, 17), 'None')
    
    (may_be_66207, more_types_in_union_66208) = may_be_none(im_66205, None_66206)

    if may_be_66207:

        if more_types_in_union_66208:
            # Runtime conditional SSA (line 1281)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to ValueError(...): (line 1282)
        # Processing the call arguments (line 1282)
        unicode_66210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1282, 29), 'unicode', u'Only know how to handle extensions: %s; with Pillow installed matplotlib can handle more images')
        
        # Call to list(...): (line 1284)
        # Processing the call arguments (line 1284)
        # Getting the type of 'handlers' (line 1284)
        handlers_66212 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 50), 'handlers', False)
        # Processing the call keyword arguments (line 1284)
        kwargs_66213 = {}
        # Getting the type of 'list' (line 1284)
        list_66211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1284, 45), 'list', False)
        # Calling list(args, kwargs) (line 1284)
        list_call_result_66214 = invoke(stypy.reporting.localization.Localization(__file__, 1284, 45), list_66211, *[handlers_66212], **kwargs_66213)
        
        # Applying the binary operator '%' (line 1282)
        result_mod_66215 = python_operator(stypy.reporting.localization.Localization(__file__, 1282, 29), '%', unicode_66210, list_call_result_66214)
        
        # Processing the call keyword arguments (line 1282)
        kwargs_66216 = {}
        # Getting the type of 'ValueError' (line 1282)
        ValueError_66209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1282, 18), 'ValueError', False)
        # Calling ValueError(args, kwargs) (line 1282)
        ValueError_call_result_66217 = invoke(stypy.reporting.localization.Localization(__file__, 1282, 18), ValueError_66209, *[result_mod_66215], **kwargs_66216)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1282, 12), ValueError_call_result_66217, 'raise parameter', BaseException)

        if more_types_in_union_66208:
            # SSA join for if statement (line 1281)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'im' (line 1285)
    im_66218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1285, 15), 'im')
    # Assigning a type to the variable 'stypy_return_type' (line 1285)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1285, 8), 'stypy_return_type', im_66218)
    # SSA join for if statement (line 1279)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 1287):
    
    # Assigning a Subscript to a Name (line 1287):
    
    # Obtaining the type of the subscript
    # Getting the type of 'ext' (line 1287)
    ext_66219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 23), 'ext')
    # Getting the type of 'handlers' (line 1287)
    handlers_66220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 14), 'handlers')
    # Obtaining the member '__getitem__' of a type (line 1287)
    getitem___66221 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1287, 14), handlers_66220, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1287)
    subscript_call_result_66222 = invoke(stypy.reporting.localization.Localization(__file__, 1287, 14), getitem___66221, ext_66219)
    
    # Assigning a type to the variable 'handler' (line 1287)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1287, 4), 'handler', subscript_call_result_66222)
    
    
    # Call to isinstance(...): (line 1292)
    # Processing the call arguments (line 1292)
    # Getting the type of 'fname' (line 1292)
    fname_66224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 18), 'fname', False)
    # Getting the type of 'six' (line 1292)
    six_66225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 25), 'six', False)
    # Obtaining the member 'string_types' of a type (line 1292)
    string_types_66226 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1292, 25), six_66225, 'string_types')
    # Processing the call keyword arguments (line 1292)
    kwargs_66227 = {}
    # Getting the type of 'isinstance' (line 1292)
    isinstance_66223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1292, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1292)
    isinstance_call_result_66228 = invoke(stypy.reporting.localization.Localization(__file__, 1292, 7), isinstance_66223, *[fname_66224, string_types_66226], **kwargs_66227)
    
    # Testing the type of an if condition (line 1292)
    if_condition_66229 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1292, 4), isinstance_call_result_66228)
    # Assigning a type to the variable 'if_condition_66229' (line 1292)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1292, 4), 'if_condition_66229', if_condition_66229)
    # SSA begins for if statement (line 1292)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1293):
    
    # Assigning a Call to a Name (line 1293):
    
    # Call to urlparse(...): (line 1293)
    # Processing the call arguments (line 1293)
    # Getting the type of 'fname' (line 1293)
    fname_66231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 26), 'fname', False)
    # Processing the call keyword arguments (line 1293)
    kwargs_66232 = {}
    # Getting the type of 'urlparse' (line 1293)
    urlparse_66230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 17), 'urlparse', False)
    # Calling urlparse(args, kwargs) (line 1293)
    urlparse_call_result_66233 = invoke(stypy.reporting.localization.Localization(__file__, 1293, 17), urlparse_66230, *[fname_66231], **kwargs_66232)
    
    # Assigning a type to the variable 'parsed' (line 1293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'parsed', urlparse_call_result_66233)
    
    
    
    # Call to len(...): (line 1295)
    # Processing the call arguments (line 1295)
    # Getting the type of 'parsed' (line 1295)
    parsed_66235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 15), 'parsed', False)
    # Obtaining the member 'scheme' of a type (line 1295)
    scheme_66236 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1295, 15), parsed_66235, 'scheme')
    # Processing the call keyword arguments (line 1295)
    kwargs_66237 = {}
    # Getting the type of 'len' (line 1295)
    len_66234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 11), 'len', False)
    # Calling len(args, kwargs) (line 1295)
    len_call_result_66238 = invoke(stypy.reporting.localization.Localization(__file__, 1295, 11), len_66234, *[scheme_66236], **kwargs_66237)
    
    int_66239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1295, 32), 'int')
    # Applying the binary operator '>' (line 1295)
    result_gt_66240 = python_operator(stypy.reporting.localization.Localization(__file__, 1295, 11), '>', len_call_result_66238, int_66239)
    
    # Testing the type of an if condition (line 1295)
    if_condition_66241 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1295, 8), result_gt_66240)
    # Assigning a type to the variable 'if_condition_66241' (line 1295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1295, 8), 'if_condition_66241', if_condition_66241)
    # SSA begins for if statement (line 1295)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1296):
    
    # Assigning a Call to a Name (line 1296):
    
    # Call to BytesIO(...): (line 1296)
    # Processing the call arguments (line 1296)
    
    # Call to read(...): (line 1296)
    # Processing the call keyword arguments (line 1296)
    kwargs_66248 = {}
    
    # Call to urlopen(...): (line 1296)
    # Processing the call arguments (line 1296)
    # Getting the type of 'fname' (line 1296)
    fname_66244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 33), 'fname', False)
    # Processing the call keyword arguments (line 1296)
    kwargs_66245 = {}
    # Getting the type of 'urlopen' (line 1296)
    urlopen_66243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 25), 'urlopen', False)
    # Calling urlopen(args, kwargs) (line 1296)
    urlopen_call_result_66246 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 25), urlopen_66243, *[fname_66244], **kwargs_66245)
    
    # Obtaining the member 'read' of a type (line 1296)
    read_66247 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1296, 25), urlopen_call_result_66246, 'read')
    # Calling read(args, kwargs) (line 1296)
    read_call_result_66249 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 25), read_66247, *[], **kwargs_66248)
    
    # Processing the call keyword arguments (line 1296)
    kwargs_66250 = {}
    # Getting the type of 'BytesIO' (line 1296)
    BytesIO_66242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1296, 17), 'BytesIO', False)
    # Calling BytesIO(args, kwargs) (line 1296)
    BytesIO_call_result_66251 = invoke(stypy.reporting.localization.Localization(__file__, 1296, 17), BytesIO_66242, *[read_call_result_66249], **kwargs_66250)
    
    # Assigning a type to the variable 'fd' (line 1296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1296, 12), 'fd', BytesIO_call_result_66251)
    
    # Call to handler(...): (line 1297)
    # Processing the call arguments (line 1297)
    # Getting the type of 'fd' (line 1297)
    fd_66253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 27), 'fd', False)
    # Processing the call keyword arguments (line 1297)
    kwargs_66254 = {}
    # Getting the type of 'handler' (line 1297)
    handler_66252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 19), 'handler', False)
    # Calling handler(args, kwargs) (line 1297)
    handler_call_result_66255 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 19), handler_66252, *[fd_66253], **kwargs_66254)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 12), 'stypy_return_type', handler_call_result_66255)
    # SSA branch for the else part of an if statement (line 1295)
    module_type_store.open_ssa_branch('else')
    
    # Call to open(...): (line 1299)
    # Processing the call arguments (line 1299)
    # Getting the type of 'fname' (line 1299)
    fname_66257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 22), 'fname', False)
    unicode_66258 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1299, 29), 'unicode', u'rb')
    # Processing the call keyword arguments (line 1299)
    kwargs_66259 = {}
    # Getting the type of 'open' (line 1299)
    open_66256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 17), 'open', False)
    # Calling open(args, kwargs) (line 1299)
    open_call_result_66260 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 17), open_66256, *[fname_66257, unicode_66258], **kwargs_66259)
    
    with_66261 = ensure_var_has_members(stypy.reporting.localization.Localization(__file__, 1299, 17), open_call_result_66260, 'with parameter', '__enter__', '__exit__')

    if with_66261:
        # Calling the __enter__ method to initiate a with section
        # Obtaining the member '__enter__' of a type (line 1299)
        enter___66262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 17), open_call_result_66260, '__enter__')
        with_enter_66263 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 17), enter___66262)
        # Assigning a type to the variable 'fd' (line 1299)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 17), 'fd', with_enter_66263)
        
        # Call to handler(...): (line 1300)
        # Processing the call arguments (line 1300)
        # Getting the type of 'fd' (line 1300)
        fd_66265 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 31), 'fd', False)
        # Processing the call keyword arguments (line 1300)
        kwargs_66266 = {}
        # Getting the type of 'handler' (line 1300)
        handler_66264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 23), 'handler', False)
        # Calling handler(args, kwargs) (line 1300)
        handler_call_result_66267 = invoke(stypy.reporting.localization.Localization(__file__, 1300, 23), handler_66264, *[fd_66265], **kwargs_66266)
        
        # Assigning a type to the variable 'stypy_return_type' (line 1300)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1300, 16), 'stypy_return_type', handler_call_result_66267)
        # Calling the __exit__ method to finish a with section
        # Obtaining the member '__exit__' of a type (line 1299)
        exit___66268 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1299, 17), open_call_result_66260, '__exit__')
        with_exit_66269 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 17), exit___66268, None, None, None)

    # SSA join for if statement (line 1295)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 1292)
    module_type_store.open_ssa_branch('else')
    
    # Call to handler(...): (line 1302)
    # Processing the call arguments (line 1302)
    # Getting the type of 'fname' (line 1302)
    fname_66271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 23), 'fname', False)
    # Processing the call keyword arguments (line 1302)
    kwargs_66272 = {}
    # Getting the type of 'handler' (line 1302)
    handler_66270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 15), 'handler', False)
    # Calling handler(args, kwargs) (line 1302)
    handler_call_result_66273 = invoke(stypy.reporting.localization.Localization(__file__, 1302, 15), handler_66270, *[fname_66271], **kwargs_66272)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 8), 'stypy_return_type', handler_call_result_66273)
    # SSA join for if statement (line 1292)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'imread(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'imread' in the type store
    # Getting the type of 'stypy_return_type' (line 1228)
    stypy_return_type_66274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1228, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_66274)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'imread'
    return stypy_return_type_66274

# Assigning a type to the variable 'imread' (line 1228)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1228, 0), 'imread', imread)

@norecursion
def imsave(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1305)
    None_66275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 28), 'None')
    # Getting the type of 'None' (line 1305)
    None_66276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 39), 'None')
    # Getting the type of 'None' (line 1305)
    None_66277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 50), 'None')
    # Getting the type of 'None' (line 1305)
    None_66278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 63), 'None')
    # Getting the type of 'None' (line 1306)
    None_66279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1306, 18), 'None')
    int_66280 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1306, 28), 'int')
    defaults = [None_66275, None_66276, None_66277, None_66278, None_66279, int_66280]
    # Create a new context for function 'imsave'
    module_type_store = module_type_store.open_function_context('imsave', 1305, 0, False)
    
    # Passed parameters checking function
    imsave.stypy_localization = localization
    imsave.stypy_type_of_self = None
    imsave.stypy_type_store = module_type_store
    imsave.stypy_function_name = 'imsave'
    imsave.stypy_param_names_list = ['fname', 'arr', 'vmin', 'vmax', 'cmap', 'format', 'origin', 'dpi']
    imsave.stypy_varargs_param_name = None
    imsave.stypy_kwargs_param_name = None
    imsave.stypy_call_defaults = defaults
    imsave.stypy_call_varargs = varargs
    imsave.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'imsave', ['fname', 'arr', 'vmin', 'vmax', 'cmap', 'format', 'origin', 'dpi'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'imsave', localization, ['fname', 'arr', 'vmin', 'vmax', 'cmap', 'format', 'origin', 'dpi'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'imsave(...)' code ##################

    unicode_66281 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1338, (-1)), 'unicode', u"\n    Save an array as in image file.\n\n    The output formats available depend on the backend being used.\n\n    Parameters\n    ----------\n    fname : str or file-like\n        Path string to a filename, or a Python file-like object.\n        If *format* is *None* and *fname* is a string, the output\n        format is deduced from the extension of the filename.\n    arr : array-like\n        An MxN (luminance), MxNx3 (RGB) or MxNx4 (RGBA) array.\n    vmin, vmax: [ None | scalar ]\n        *vmin* and *vmax* set the color scaling for the image by fixing the\n        values that map to the colormap color limits. If either *vmin*\n        or *vmax* is None, that limit is determined from the *arr*\n        min/max value.\n    cmap : matplotlib.colors.Colormap, optional\n        For example, ``cm.viridis``.  If ``None``, defaults to the\n        ``image.cmap`` rcParam.\n    format : str\n        One of the file extensions supported by the active backend.  Most\n        backends support png, pdf, ps, eps and svg.\n    origin : [ 'upper' | 'lower' ]\n        Indicates whether the ``(0, 0)`` index of the array is in the\n        upper left or lower left corner of the axes.  Defaults to the\n        ``image.origin`` rcParam.\n    dpi : int\n        The DPI to store in the metadata of the file.  This does not affect the\n        resolution of the output image.\n    ")
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1339, 4))
    
    # 'from matplotlib.backends.backend_agg import FigureCanvas' statement (line 1339)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_66282 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1339, 4), 'matplotlib.backends.backend_agg')

    if (type(import_66282) is not StypyTypeError):

        if (import_66282 != 'pyd_module'):
            __import__(import_66282)
            sys_modules_66283 = sys.modules[import_66282]
            import_from_module(stypy.reporting.localization.Localization(__file__, 1339, 4), 'matplotlib.backends.backend_agg', sys_modules_66283.module_type_store, module_type_store, ['FigureCanvasAgg'])
            nest_module(stypy.reporting.localization.Localization(__file__, 1339, 4), __file__, sys_modules_66283, sys_modules_66283.module_type_store, module_type_store)
        else:
            from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas

            import_from_module(stypy.reporting.localization.Localization(__file__, 1339, 4), 'matplotlib.backends.backend_agg', None, module_type_store, ['FigureCanvasAgg'], [FigureCanvas])

    else:
        # Assigning a type to the variable 'matplotlib.backends.backend_agg' (line 1339)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1339, 4), 'matplotlib.backends.backend_agg', import_66282)

    # Adding an alias
    module_type_store.add_alias('FigureCanvas', 'FigureCanvasAgg')
    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1340, 4))
    
    # 'from matplotlib.figure import Figure' statement (line 1340)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_66284 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1340, 4), 'matplotlib.figure')

    if (type(import_66284) is not StypyTypeError):

        if (import_66284 != 'pyd_module'):
            __import__(import_66284)
            sys_modules_66285 = sys.modules[import_66284]
            import_from_module(stypy.reporting.localization.Localization(__file__, 1340, 4), 'matplotlib.figure', sys_modules_66285.module_type_store, module_type_store, ['Figure'])
            nest_module(stypy.reporting.localization.Localization(__file__, 1340, 4), __file__, sys_modules_66285, sys_modules_66285.module_type_store, module_type_store)
        else:
            from matplotlib.figure import Figure

            import_from_module(stypy.reporting.localization.Localization(__file__, 1340, 4), 'matplotlib.figure', None, module_type_store, ['Figure'], [Figure])

    else:
        # Assigning a type to the variable 'matplotlib.figure' (line 1340)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 4), 'matplotlib.figure', import_66284)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'format' (line 1343)
    format_66286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 8), 'format')
    unicode_66287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1343, 18), 'unicode', u'png')
    # Applying the binary operator '==' (line 1343)
    result_eq_66288 = python_operator(stypy.reporting.localization.Localization(__file__, 1343, 8), '==', format_66286, unicode_66287)
    
    
    # Getting the type of 'format' (line 1343)
    format_66289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 27), 'format')
    # Getting the type of 'None' (line 1343)
    None_66290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1343, 37), 'None')
    # Applying the binary operator 'is' (line 1343)
    result_is__66291 = python_operator(stypy.reporting.localization.Localization(__file__, 1343, 27), 'is', format_66289, None_66290)
    
    # Applying the binary operator 'or' (line 1343)
    result_or_keyword_66292 = python_operator(stypy.reporting.localization.Localization(__file__, 1343, 8), 'or', result_eq_66288, result_is__66291)
    
    # Evaluating a boolean operation
    
    # Call to isinstance(...): (line 1344)
    # Processing the call arguments (line 1344)
    # Getting the type of 'fname' (line 1344)
    fname_66294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 23), 'fname', False)
    # Getting the type of 'six' (line 1344)
    six_66295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 30), 'six', False)
    # Obtaining the member 'string_types' of a type (line 1344)
    string_types_66296 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1344, 30), six_66295, 'string_types')
    # Processing the call keyword arguments (line 1344)
    kwargs_66297 = {}
    # Getting the type of 'isinstance' (line 1344)
    isinstance_66293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1344, 12), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1344)
    isinstance_call_result_66298 = invoke(stypy.reporting.localization.Localization(__file__, 1344, 12), isinstance_66293, *[fname_66294, string_types_66296], **kwargs_66297)
    
    
    # Call to endswith(...): (line 1345)
    # Processing the call arguments (line 1345)
    unicode_66304 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1345, 35), 'unicode', u'.png')
    # Processing the call keyword arguments (line 1345)
    kwargs_66305 = {}
    
    # Call to lower(...): (line 1345)
    # Processing the call keyword arguments (line 1345)
    kwargs_66301 = {}
    # Getting the type of 'fname' (line 1345)
    fname_66299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1345, 12), 'fname', False)
    # Obtaining the member 'lower' of a type (line 1345)
    lower_66300 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 12), fname_66299, 'lower')
    # Calling lower(args, kwargs) (line 1345)
    lower_call_result_66302 = invoke(stypy.reporting.localization.Localization(__file__, 1345, 12), lower_66300, *[], **kwargs_66301)
    
    # Obtaining the member 'endswith' of a type (line 1345)
    endswith_66303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1345, 12), lower_call_result_66302, 'endswith')
    # Calling endswith(args, kwargs) (line 1345)
    endswith_call_result_66306 = invoke(stypy.reporting.localization.Localization(__file__, 1345, 12), endswith_66303, *[unicode_66304], **kwargs_66305)
    
    # Applying the binary operator 'and' (line 1344)
    result_and_keyword_66307 = python_operator(stypy.reporting.localization.Localization(__file__, 1344, 12), 'and', isinstance_call_result_66298, endswith_call_result_66306)
    
    # Applying the binary operator 'or' (line 1343)
    result_or_keyword_66308 = python_operator(stypy.reporting.localization.Localization(__file__, 1343, 8), 'or', result_or_keyword_66292, result_and_keyword_66307)
    
    # Testing the type of an if condition (line 1343)
    if_condition_66309 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1343, 4), result_or_keyword_66308)
    # Assigning a type to the variable 'if_condition_66309' (line 1343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1343, 4), 'if_condition_66309', if_condition_66309)
    # SSA begins for if statement (line 1343)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1346):
    
    # Assigning a Call to a Name (line 1346):
    
    # Call to AxesImage(...): (line 1346)
    # Processing the call arguments (line 1346)
    # Getting the type of 'None' (line 1346)
    None_66311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 26), 'None', False)
    # Processing the call keyword arguments (line 1346)
    # Getting the type of 'cmap' (line 1346)
    cmap_66312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 37), 'cmap', False)
    keyword_66313 = cmap_66312
    # Getting the type of 'origin' (line 1346)
    origin_66314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 50), 'origin', False)
    keyword_66315 = origin_66314
    kwargs_66316 = {'origin': keyword_66315, 'cmap': keyword_66313}
    # Getting the type of 'AxesImage' (line 1346)
    AxesImage_66310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1346, 16), 'AxesImage', False)
    # Calling AxesImage(args, kwargs) (line 1346)
    AxesImage_call_result_66317 = invoke(stypy.reporting.localization.Localization(__file__, 1346, 16), AxesImage_66310, *[None_66311], **kwargs_66316)
    
    # Assigning a type to the variable 'image' (line 1346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1346, 8), 'image', AxesImage_call_result_66317)
    
    # Call to set_data(...): (line 1347)
    # Processing the call arguments (line 1347)
    # Getting the type of 'arr' (line 1347)
    arr_66320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 23), 'arr', False)
    # Processing the call keyword arguments (line 1347)
    kwargs_66321 = {}
    # Getting the type of 'image' (line 1347)
    image_66318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1347, 8), 'image', False)
    # Obtaining the member 'set_data' of a type (line 1347)
    set_data_66319 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1347, 8), image_66318, 'set_data')
    # Calling set_data(args, kwargs) (line 1347)
    set_data_call_result_66322 = invoke(stypy.reporting.localization.Localization(__file__, 1347, 8), set_data_66319, *[arr_66320], **kwargs_66321)
    
    
    # Call to set_clim(...): (line 1348)
    # Processing the call arguments (line 1348)
    # Getting the type of 'vmin' (line 1348)
    vmin_66325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 23), 'vmin', False)
    # Getting the type of 'vmax' (line 1348)
    vmax_66326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 29), 'vmax', False)
    # Processing the call keyword arguments (line 1348)
    kwargs_66327 = {}
    # Getting the type of 'image' (line 1348)
    image_66323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1348, 8), 'image', False)
    # Obtaining the member 'set_clim' of a type (line 1348)
    set_clim_66324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1348, 8), image_66323, 'set_clim')
    # Calling set_clim(args, kwargs) (line 1348)
    set_clim_call_result_66328 = invoke(stypy.reporting.localization.Localization(__file__, 1348, 8), set_clim_66324, *[vmin_66325, vmax_66326], **kwargs_66327)
    
    
    # Call to write_png(...): (line 1349)
    # Processing the call arguments (line 1349)
    # Getting the type of 'fname' (line 1349)
    fname_66331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 24), 'fname', False)
    # Processing the call keyword arguments (line 1349)
    kwargs_66332 = {}
    # Getting the type of 'image' (line 1349)
    image_66329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1349, 8), 'image', False)
    # Obtaining the member 'write_png' of a type (line 1349)
    write_png_66330 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1349, 8), image_66329, 'write_png')
    # Calling write_png(args, kwargs) (line 1349)
    write_png_call_result_66333 = invoke(stypy.reporting.localization.Localization(__file__, 1349, 8), write_png_66330, *[fname_66331], **kwargs_66332)
    
    # SSA branch for the else part of an if statement (line 1343)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1351):
    
    # Assigning a Call to a Name (line 1351):
    
    # Call to Figure(...): (line 1351)
    # Processing the call keyword arguments (line 1351)
    # Getting the type of 'dpi' (line 1351)
    dpi_66335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 25), 'dpi', False)
    keyword_66336 = dpi_66335
    # Getting the type of 'False' (line 1351)
    False_66337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 38), 'False', False)
    keyword_66338 = False_66337
    kwargs_66339 = {'dpi': keyword_66336, 'frameon': keyword_66338}
    # Getting the type of 'Figure' (line 1351)
    Figure_66334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1351, 14), 'Figure', False)
    # Calling Figure(args, kwargs) (line 1351)
    Figure_call_result_66340 = invoke(stypy.reporting.localization.Localization(__file__, 1351, 14), Figure_66334, *[], **kwargs_66339)
    
    # Assigning a type to the variable 'fig' (line 1351)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1351, 8), 'fig', Figure_call_result_66340)
    
    # Call to FigureCanvas(...): (line 1352)
    # Processing the call arguments (line 1352)
    # Getting the type of 'fig' (line 1352)
    fig_66342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 21), 'fig', False)
    # Processing the call keyword arguments (line 1352)
    kwargs_66343 = {}
    # Getting the type of 'FigureCanvas' (line 1352)
    FigureCanvas_66341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1352, 8), 'FigureCanvas', False)
    # Calling FigureCanvas(args, kwargs) (line 1352)
    FigureCanvas_call_result_66344 = invoke(stypy.reporting.localization.Localization(__file__, 1352, 8), FigureCanvas_66341, *[fig_66342], **kwargs_66343)
    
    
    # Call to figimage(...): (line 1353)
    # Processing the call arguments (line 1353)
    # Getting the type of 'arr' (line 1353)
    arr_66347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 21), 'arr', False)
    # Processing the call keyword arguments (line 1353)
    # Getting the type of 'cmap' (line 1353)
    cmap_66348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 31), 'cmap', False)
    keyword_66349 = cmap_66348
    # Getting the type of 'vmin' (line 1353)
    vmin_66350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 42), 'vmin', False)
    keyword_66351 = vmin_66350
    # Getting the type of 'vmax' (line 1353)
    vmax_66352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 53), 'vmax', False)
    keyword_66353 = vmax_66352
    # Getting the type of 'origin' (line 1353)
    origin_66354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 66), 'origin', False)
    keyword_66355 = origin_66354
    # Getting the type of 'True' (line 1354)
    True_66356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1354, 28), 'True', False)
    keyword_66357 = True_66356
    kwargs_66358 = {'vmax': keyword_66353, 'origin': keyword_66355, 'cmap': keyword_66349, 'resize': keyword_66357, 'vmin': keyword_66351}
    # Getting the type of 'fig' (line 1353)
    fig_66345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1353, 8), 'fig', False)
    # Obtaining the member 'figimage' of a type (line 1353)
    figimage_66346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1353, 8), fig_66345, 'figimage')
    # Calling figimage(args, kwargs) (line 1353)
    figimage_call_result_66359 = invoke(stypy.reporting.localization.Localization(__file__, 1353, 8), figimage_66346, *[arr_66347], **kwargs_66358)
    
    
    # Call to savefig(...): (line 1355)
    # Processing the call arguments (line 1355)
    # Getting the type of 'fname' (line 1355)
    fname_66362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 20), 'fname', False)
    # Processing the call keyword arguments (line 1355)
    # Getting the type of 'dpi' (line 1355)
    dpi_66363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 31), 'dpi', False)
    keyword_66364 = dpi_66363
    # Getting the type of 'format' (line 1355)
    format_66365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 43), 'format', False)
    keyword_66366 = format_66365
    # Getting the type of 'True' (line 1355)
    True_66367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 63), 'True', False)
    keyword_66368 = True_66367
    kwargs_66369 = {'transparent': keyword_66368, 'dpi': keyword_66364, 'format': keyword_66366}
    # Getting the type of 'fig' (line 1355)
    fig_66360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1355, 8), 'fig', False)
    # Obtaining the member 'savefig' of a type (line 1355)
    savefig_66361 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1355, 8), fig_66360, 'savefig')
    # Calling savefig(args, kwargs) (line 1355)
    savefig_call_result_66370 = invoke(stypy.reporting.localization.Localization(__file__, 1355, 8), savefig_66361, *[fname_66362], **kwargs_66369)
    
    # SSA join for if statement (line 1343)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'imsave(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'imsave' in the type store
    # Getting the type of 'stypy_return_type' (line 1305)
    stypy_return_type_66371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_66371)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'imsave'
    return stypy_return_type_66371

# Assigning a type to the variable 'imsave' (line 1305)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 0), 'imsave', imsave)

@norecursion
def pil_to_array(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pil_to_array'
    module_type_store = module_type_store.open_function_context('pil_to_array', 1358, 0, False)
    
    # Passed parameters checking function
    pil_to_array.stypy_localization = localization
    pil_to_array.stypy_type_of_self = None
    pil_to_array.stypy_type_store = module_type_store
    pil_to_array.stypy_function_name = 'pil_to_array'
    pil_to_array.stypy_param_names_list = ['pilImage']
    pil_to_array.stypy_varargs_param_name = None
    pil_to_array.stypy_kwargs_param_name = None
    pil_to_array.stypy_call_defaults = defaults
    pil_to_array.stypy_call_varargs = varargs
    pil_to_array.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pil_to_array', ['pilImage'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pil_to_array', localization, ['pilImage'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pil_to_array(...)' code ##################

    unicode_66372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1364, (-1)), 'unicode', u'Load a PIL image and return it as a numpy array.\n\n    Grayscale images are returned as ``(M, N)`` arrays.  RGB images are\n    returned as ``(M, N, 3)`` arrays.  RGBA images are returned as ``(M, N,\n    4)`` arrays.\n    ')
    
    
    # Getting the type of 'pilImage' (line 1365)
    pilImage_66373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1365, 7), 'pilImage')
    # Obtaining the member 'mode' of a type (line 1365)
    mode_66374 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1365, 7), pilImage_66373, 'mode')
    
    # Obtaining an instance of the builtin type 'list' (line 1365)
    list_66375 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, 24), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1365)
    # Adding element type (line 1365)
    unicode_66376 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, 25), 'unicode', u'RGBA')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 24), list_66375, unicode_66376)
    # Adding element type (line 1365)
    unicode_66377 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, 33), 'unicode', u'RGBX')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 24), list_66375, unicode_66377)
    # Adding element type (line 1365)
    unicode_66378 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, 41), 'unicode', u'RGB')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 24), list_66375, unicode_66378)
    # Adding element type (line 1365)
    unicode_66379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1365, 48), 'unicode', u'L')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1365, 24), list_66375, unicode_66379)
    
    # Applying the binary operator 'in' (line 1365)
    result_contains_66380 = python_operator(stypy.reporting.localization.Localization(__file__, 1365, 7), 'in', mode_66374, list_66375)
    
    # Testing the type of an if condition (line 1365)
    if_condition_66381 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1365, 4), result_contains_66380)
    # Assigning a type to the variable 'if_condition_66381' (line 1365)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1365, 4), 'if_condition_66381', if_condition_66381)
    # SSA begins for if statement (line 1365)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to asarray(...): (line 1367)
    # Processing the call arguments (line 1367)
    # Getting the type of 'pilImage' (line 1367)
    pilImage_66384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 26), 'pilImage', False)
    # Processing the call keyword arguments (line 1367)
    kwargs_66385 = {}
    # Getting the type of 'np' (line 1367)
    np_66382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1367, 15), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1367)
    asarray_66383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1367, 15), np_66382, 'asarray')
    # Calling asarray(args, kwargs) (line 1367)
    asarray_call_result_66386 = invoke(stypy.reporting.localization.Localization(__file__, 1367, 15), asarray_66383, *[pilImage_66384], **kwargs_66385)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1367, 8), 'stypy_return_type', asarray_call_result_66386)
    # SSA branch for the else part of an if statement (line 1365)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to startswith(...): (line 1368)
    # Processing the call arguments (line 1368)
    unicode_66390 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1368, 34), 'unicode', u'I;16')
    # Processing the call keyword arguments (line 1368)
    kwargs_66391 = {}
    # Getting the type of 'pilImage' (line 1368)
    pilImage_66387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1368, 9), 'pilImage', False)
    # Obtaining the member 'mode' of a type (line 1368)
    mode_66388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 9), pilImage_66387, 'mode')
    # Obtaining the member 'startswith' of a type (line 1368)
    startswith_66389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1368, 9), mode_66388, 'startswith')
    # Calling startswith(args, kwargs) (line 1368)
    startswith_call_result_66392 = invoke(stypy.reporting.localization.Localization(__file__, 1368, 9), startswith_66389, *[unicode_66390], **kwargs_66391)
    
    # Testing the type of an if condition (line 1368)
    if_condition_66393 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1368, 9), startswith_call_result_66392)
    # Assigning a type to the variable 'if_condition_66393' (line 1368)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1368, 9), 'if_condition_66393', if_condition_66393)
    # SSA begins for if statement (line 1368)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1370):
    
    # Assigning a Call to a Name (line 1370):
    
    # Call to tobytes(...): (line 1370)
    # Processing the call arguments (line 1370)
    unicode_66396 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1370, 31), 'unicode', u'raw')
    # Getting the type of 'pilImage' (line 1370)
    pilImage_66397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 38), 'pilImage', False)
    # Obtaining the member 'mode' of a type (line 1370)
    mode_66398 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 38), pilImage_66397, 'mode')
    # Processing the call keyword arguments (line 1370)
    kwargs_66399 = {}
    # Getting the type of 'pilImage' (line 1370)
    pilImage_66394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1370, 14), 'pilImage', False)
    # Obtaining the member 'tobytes' of a type (line 1370)
    tobytes_66395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1370, 14), pilImage_66394, 'tobytes')
    # Calling tobytes(args, kwargs) (line 1370)
    tobytes_call_result_66400 = invoke(stypy.reporting.localization.Localization(__file__, 1370, 14), tobytes_66395, *[unicode_66396, mode_66398], **kwargs_66399)
    
    # Assigning a type to the variable 'raw' (line 1370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1370, 8), 'raw', tobytes_call_result_66400)
    
    
    # Call to endswith(...): (line 1371)
    # Processing the call arguments (line 1371)
    unicode_66404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1371, 34), 'unicode', u'B')
    # Processing the call keyword arguments (line 1371)
    kwargs_66405 = {}
    # Getting the type of 'pilImage' (line 1371)
    pilImage_66401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1371, 11), 'pilImage', False)
    # Obtaining the member 'mode' of a type (line 1371)
    mode_66402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 11), pilImage_66401, 'mode')
    # Obtaining the member 'endswith' of a type (line 1371)
    endswith_66403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1371, 11), mode_66402, 'endswith')
    # Calling endswith(args, kwargs) (line 1371)
    endswith_call_result_66406 = invoke(stypy.reporting.localization.Localization(__file__, 1371, 11), endswith_66403, *[unicode_66404], **kwargs_66405)
    
    # Testing the type of an if condition (line 1371)
    if_condition_66407 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1371, 8), endswith_call_result_66406)
    # Assigning a type to the variable 'if_condition_66407' (line 1371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1371, 8), 'if_condition_66407', if_condition_66407)
    # SSA begins for if statement (line 1371)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1372):
    
    # Assigning a Call to a Name (line 1372):
    
    # Call to fromstring(...): (line 1372)
    # Processing the call arguments (line 1372)
    # Getting the type of 'raw' (line 1372)
    raw_66410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 30), 'raw', False)
    unicode_66411 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1372, 35), 'unicode', u'>u2')
    # Processing the call keyword arguments (line 1372)
    kwargs_66412 = {}
    # Getting the type of 'np' (line 1372)
    np_66408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1372, 16), 'np', False)
    # Obtaining the member 'fromstring' of a type (line 1372)
    fromstring_66409 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1372, 16), np_66408, 'fromstring')
    # Calling fromstring(args, kwargs) (line 1372)
    fromstring_call_result_66413 = invoke(stypy.reporting.localization.Localization(__file__, 1372, 16), fromstring_66409, *[raw_66410, unicode_66411], **kwargs_66412)
    
    # Assigning a type to the variable 'x' (line 1372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1372, 12), 'x', fromstring_call_result_66413)
    # SSA branch for the else part of an if statement (line 1371)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 1374):
    
    # Assigning a Call to a Name (line 1374):
    
    # Call to fromstring(...): (line 1374)
    # Processing the call arguments (line 1374)
    # Getting the type of 'raw' (line 1374)
    raw_66416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 30), 'raw', False)
    unicode_66417 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1374, 35), 'unicode', u'<u2')
    # Processing the call keyword arguments (line 1374)
    kwargs_66418 = {}
    # Getting the type of 'np' (line 1374)
    np_66414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1374, 16), 'np', False)
    # Obtaining the member 'fromstring' of a type (line 1374)
    fromstring_66415 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1374, 16), np_66414, 'fromstring')
    # Calling fromstring(args, kwargs) (line 1374)
    fromstring_call_result_66419 = invoke(stypy.reporting.localization.Localization(__file__, 1374, 16), fromstring_66415, *[raw_66416, unicode_66417], **kwargs_66418)
    
    # Assigning a type to the variable 'x' (line 1374)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1374, 12), 'x', fromstring_call_result_66419)
    # SSA join for if statement (line 1371)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to astype(...): (line 1375)
    # Processing the call arguments (line 1375)
    unicode_66431 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 53), 'unicode', u'=u2')
    # Processing the call keyword arguments (line 1375)
    kwargs_66432 = {}
    
    # Call to reshape(...): (line 1375)
    # Processing the call arguments (line 1375)
    
    # Obtaining the type of the subscript
    int_66422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1375, 41), 'int')
    slice_66423 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 1375, 25), None, None, int_66422)
    # Getting the type of 'pilImage' (line 1375)
    pilImage_66424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 25), 'pilImage', False)
    # Obtaining the member 'size' of a type (line 1375)
    size_66425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 25), pilImage_66424, 'size')
    # Obtaining the member '__getitem__' of a type (line 1375)
    getitem___66426 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 25), size_66425, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1375)
    subscript_call_result_66427 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 25), getitem___66426, slice_66423)
    
    # Processing the call keyword arguments (line 1375)
    kwargs_66428 = {}
    # Getting the type of 'x' (line 1375)
    x_66420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1375, 15), 'x', False)
    # Obtaining the member 'reshape' of a type (line 1375)
    reshape_66421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 15), x_66420, 'reshape')
    # Calling reshape(args, kwargs) (line 1375)
    reshape_call_result_66429 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 15), reshape_66421, *[subscript_call_result_66427], **kwargs_66428)
    
    # Obtaining the member 'astype' of a type (line 1375)
    astype_66430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1375, 15), reshape_call_result_66429, 'astype')
    # Calling astype(args, kwargs) (line 1375)
    astype_call_result_66433 = invoke(stypy.reporting.localization.Localization(__file__, 1375, 15), astype_66430, *[unicode_66431], **kwargs_66432)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1375)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1375, 8), 'stypy_return_type', astype_call_result_66433)
    # SSA branch for the else part of an if statement (line 1368)
    module_type_store.open_ssa_branch('else')
    
    
    # SSA begins for try-except statement (line 1377)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a Call to a Name (line 1378):
    
    # Assigning a Call to a Name (line 1378):
    
    # Call to convert(...): (line 1378)
    # Processing the call arguments (line 1378)
    unicode_66436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1378, 40), 'unicode', u'RGBA')
    # Processing the call keyword arguments (line 1378)
    kwargs_66437 = {}
    # Getting the type of 'pilImage' (line 1378)
    pilImage_66434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1378, 23), 'pilImage', False)
    # Obtaining the member 'convert' of a type (line 1378)
    convert_66435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1378, 23), pilImage_66434, 'convert')
    # Calling convert(args, kwargs) (line 1378)
    convert_call_result_66438 = invoke(stypy.reporting.localization.Localization(__file__, 1378, 23), convert_66435, *[unicode_66436], **kwargs_66437)
    
    # Assigning a type to the variable 'pilImage' (line 1378)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1378, 12), 'pilImage', convert_call_result_66438)
    # SSA branch for the except part of a try statement (line 1377)
    # SSA branch for the except 'ValueError' branch of a try statement (line 1377)
    module_type_store.open_ssa_branch('except')
    
    # Call to RuntimeError(...): (line 1380)
    # Processing the call arguments (line 1380)
    unicode_66440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1380, 31), 'unicode', u'Unknown image mode')
    # Processing the call keyword arguments (line 1380)
    kwargs_66441 = {}
    # Getting the type of 'RuntimeError' (line 1380)
    RuntimeError_66439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1380, 18), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 1380)
    RuntimeError_call_result_66442 = invoke(stypy.reporting.localization.Localization(__file__, 1380, 18), RuntimeError_66439, *[unicode_66440], **kwargs_66441)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1380, 12), RuntimeError_call_result_66442, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 1377)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to asarray(...): (line 1381)
    # Processing the call arguments (line 1381)
    # Getting the type of 'pilImage' (line 1381)
    pilImage_66445 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 26), 'pilImage', False)
    # Processing the call keyword arguments (line 1381)
    kwargs_66446 = {}
    # Getting the type of 'np' (line 1381)
    np_66443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1381, 15), 'np', False)
    # Obtaining the member 'asarray' of a type (line 1381)
    asarray_66444 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1381, 15), np_66443, 'asarray')
    # Calling asarray(args, kwargs) (line 1381)
    asarray_call_result_66447 = invoke(stypy.reporting.localization.Localization(__file__, 1381, 15), asarray_66444, *[pilImage_66445], **kwargs_66446)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1381)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1381, 8), 'stypy_return_type', asarray_call_result_66447)
    # SSA join for if statement (line 1368)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1365)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'pil_to_array(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pil_to_array' in the type store
    # Getting the type of 'stypy_return_type' (line 1358)
    stypy_return_type_66448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1358, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_66448)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pil_to_array'
    return stypy_return_type_66448

# Assigning a type to the variable 'pil_to_array' (line 1358)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1358, 0), 'pil_to_array', pil_to_array)

@norecursion
def thumbnail(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_66449 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1384, 39), 'float')
    unicode_66450 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1384, 58), 'unicode', u'bilinear')
    # Getting the type of 'False' (line 1385)
    False_66451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1385, 22), 'False')
    defaults = [float_66449, unicode_66450, False_66451]
    # Create a new context for function 'thumbnail'
    module_type_store = module_type_store.open_function_context('thumbnail', 1384, 0, False)
    
    # Passed parameters checking function
    thumbnail.stypy_localization = localization
    thumbnail.stypy_type_of_self = None
    thumbnail.stypy_type_store = module_type_store
    thumbnail.stypy_function_name = 'thumbnail'
    thumbnail.stypy_param_names_list = ['infile', 'thumbfile', 'scale', 'interpolation', 'preview']
    thumbnail.stypy_varargs_param_name = None
    thumbnail.stypy_kwargs_param_name = None
    thumbnail.stypy_call_defaults = defaults
    thumbnail.stypy_call_varargs = varargs
    thumbnail.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'thumbnail', ['infile', 'thumbfile', 'scale', 'interpolation', 'preview'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'thumbnail', localization, ['infile', 'thumbfile', 'scale', 'interpolation', 'preview'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'thumbnail(...)' code ##################

    unicode_66452 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1420, (-1)), 'unicode', u"\n    make a thumbnail of image in *infile* with output filename\n    *thumbfile*.\n\n      *infile* the image file -- must be PNG or Pillow-readable if you\n         have `Pillow <http://python-pillow.org/>`_ installed\n\n      *thumbfile*\n        the thumbnail filename\n\n      *scale*\n        the scale factor for the thumbnail\n\n      *interpolation*\n        the interpolation scheme used in the resampling\n\n\n      *preview*\n        if True, the default backend (presumably a user interface\n        backend) will be used which will cause a figure to be raised\n        if :func:`~matplotlib.pyplot.show` is called.  If it is False,\n        a pure image backend will be used depending on the extension,\n        'png'->FigureCanvasAgg, 'pdf'->FigureCanvasPdf,\n        'svg'->FigureCanvasSVG\n\n\n    See examples/misc/image_thumbnail.py.\n\n    .. htmlonly::\n\n        :ref:`sphx_glr_gallery_misc_image_thumbnail_sgskip.py`\n\n    Return value is the figure instance containing the thumbnail\n\n    ")
    
    # Assigning a Call to a Tuple (line 1421):
    
    # Assigning a Call to a Name:
    
    # Call to split(...): (line 1421)
    # Processing the call arguments (line 1421)
    # Getting the type of 'infile' (line 1421)
    infile_66456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 38), 'infile', False)
    # Processing the call keyword arguments (line 1421)
    kwargs_66457 = {}
    # Getting the type of 'os' (line 1421)
    os_66453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 24), 'os', False)
    # Obtaining the member 'path' of a type (line 1421)
    path_66454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 24), os_66453, 'path')
    # Obtaining the member 'split' of a type (line 1421)
    split_66455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 24), path_66454, 'split')
    # Calling split(args, kwargs) (line 1421)
    split_call_result_66458 = invoke(stypy.reporting.localization.Localization(__file__, 1421, 24), split_66455, *[infile_66456], **kwargs_66457)
    
    # Assigning a type to the variable 'call_assignment_62388' (line 1421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 4), 'call_assignment_62388', split_call_result_66458)
    
    # Assigning a Call to a Name (line 1421):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_66461 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1421, 4), 'int')
    # Processing the call keyword arguments
    kwargs_66462 = {}
    # Getting the type of 'call_assignment_62388' (line 1421)
    call_assignment_62388_66459 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 4), 'call_assignment_62388', False)
    # Obtaining the member '__getitem__' of a type (line 1421)
    getitem___66460 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 4), call_assignment_62388_66459, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_66463 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___66460, *[int_66461], **kwargs_66462)
    
    # Assigning a type to the variable 'call_assignment_62389' (line 1421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 4), 'call_assignment_62389', getitem___call_result_66463)
    
    # Assigning a Name to a Name (line 1421):
    # Getting the type of 'call_assignment_62389' (line 1421)
    call_assignment_62389_66464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 4), 'call_assignment_62389')
    # Assigning a type to the variable 'basedir' (line 1421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 4), 'basedir', call_assignment_62389_66464)
    
    # Assigning a Call to a Name (line 1421):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_66467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1421, 4), 'int')
    # Processing the call keyword arguments
    kwargs_66468 = {}
    # Getting the type of 'call_assignment_62388' (line 1421)
    call_assignment_62388_66465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 4), 'call_assignment_62388', False)
    # Obtaining the member '__getitem__' of a type (line 1421)
    getitem___66466 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1421, 4), call_assignment_62388_66465, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_66469 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___66466, *[int_66467], **kwargs_66468)
    
    # Assigning a type to the variable 'call_assignment_62390' (line 1421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 4), 'call_assignment_62390', getitem___call_result_66469)
    
    # Assigning a Name to a Name (line 1421):
    # Getting the type of 'call_assignment_62390' (line 1421)
    call_assignment_62390_66470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1421, 4), 'call_assignment_62390')
    # Assigning a type to the variable 'basename' (line 1421)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1421, 13), 'basename', call_assignment_62390_66470)
    
    # Assigning a Call to a Tuple (line 1422):
    
    # Assigning a Call to a Name:
    
    # Call to splitext(...): (line 1422)
    # Processing the call arguments (line 1422)
    # Getting the type of 'thumbfile' (line 1422)
    thumbfile_66474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 39), 'thumbfile', False)
    # Processing the call keyword arguments (line 1422)
    kwargs_66475 = {}
    # Getting the type of 'os' (line 1422)
    os_66471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 22), 'os', False)
    # Obtaining the member 'path' of a type (line 1422)
    path_66472 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 22), os_66471, 'path')
    # Obtaining the member 'splitext' of a type (line 1422)
    splitext_66473 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 22), path_66472, 'splitext')
    # Calling splitext(args, kwargs) (line 1422)
    splitext_call_result_66476 = invoke(stypy.reporting.localization.Localization(__file__, 1422, 22), splitext_66473, *[thumbfile_66474], **kwargs_66475)
    
    # Assigning a type to the variable 'call_assignment_62391' (line 1422)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 4), 'call_assignment_62391', splitext_call_result_66476)
    
    # Assigning a Call to a Name (line 1422):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_66479 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1422, 4), 'int')
    # Processing the call keyword arguments
    kwargs_66480 = {}
    # Getting the type of 'call_assignment_62391' (line 1422)
    call_assignment_62391_66477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 4), 'call_assignment_62391', False)
    # Obtaining the member '__getitem__' of a type (line 1422)
    getitem___66478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 4), call_assignment_62391_66477, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_66481 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___66478, *[int_66479], **kwargs_66480)
    
    # Assigning a type to the variable 'call_assignment_62392' (line 1422)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 4), 'call_assignment_62392', getitem___call_result_66481)
    
    # Assigning a Name to a Name (line 1422):
    # Getting the type of 'call_assignment_62392' (line 1422)
    call_assignment_62392_66482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 4), 'call_assignment_62392')
    # Assigning a type to the variable 'baseout' (line 1422)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 4), 'baseout', call_assignment_62392_66482)
    
    # Assigning a Call to a Name (line 1422):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_66485 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1422, 4), 'int')
    # Processing the call keyword arguments
    kwargs_66486 = {}
    # Getting the type of 'call_assignment_62391' (line 1422)
    call_assignment_62391_66483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 4), 'call_assignment_62391', False)
    # Obtaining the member '__getitem__' of a type (line 1422)
    getitem___66484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1422, 4), call_assignment_62391_66483, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_66487 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___66484, *[int_66485], **kwargs_66486)
    
    # Assigning a type to the variable 'call_assignment_62393' (line 1422)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 4), 'call_assignment_62393', getitem___call_result_66487)
    
    # Assigning a Name to a Name (line 1422):
    # Getting the type of 'call_assignment_62393' (line 1422)
    call_assignment_62393_66488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1422, 4), 'call_assignment_62393')
    # Assigning a type to the variable 'extout' (line 1422)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1422, 13), 'extout', call_assignment_62393_66488)
    
    # Assigning a Call to a Name (line 1424):
    
    # Assigning a Call to a Name (line 1424):
    
    # Call to imread(...): (line 1424)
    # Processing the call arguments (line 1424)
    # Getting the type of 'infile' (line 1424)
    infile_66490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 16), 'infile', False)
    # Processing the call keyword arguments (line 1424)
    kwargs_66491 = {}
    # Getting the type of 'imread' (line 1424)
    imread_66489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1424, 9), 'imread', False)
    # Calling imread(args, kwargs) (line 1424)
    imread_call_result_66492 = invoke(stypy.reporting.localization.Localization(__file__, 1424, 9), imread_66489, *[infile_66490], **kwargs_66491)
    
    # Assigning a type to the variable 'im' (line 1424)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1424, 4), 'im', imread_call_result_66492)
    
    # Assigning a Attribute to a Tuple (line 1425):
    
    # Assigning a Subscript to a Name (line 1425):
    
    # Obtaining the type of the subscript
    int_66493 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 4), 'int')
    # Getting the type of 'im' (line 1425)
    im_66494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 24), 'im')
    # Obtaining the member 'shape' of a type (line 1425)
    shape_66495 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 24), im_66494, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1425)
    getitem___66496 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 4), shape_66495, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1425)
    subscript_call_result_66497 = invoke(stypy.reporting.localization.Localization(__file__, 1425, 4), getitem___66496, int_66493)
    
    # Assigning a type to the variable 'tuple_var_assignment_62394' (line 1425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'tuple_var_assignment_62394', subscript_call_result_66497)
    
    # Assigning a Subscript to a Name (line 1425):
    
    # Obtaining the type of the subscript
    int_66498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 4), 'int')
    # Getting the type of 'im' (line 1425)
    im_66499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 24), 'im')
    # Obtaining the member 'shape' of a type (line 1425)
    shape_66500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 24), im_66499, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1425)
    getitem___66501 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 4), shape_66500, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1425)
    subscript_call_result_66502 = invoke(stypy.reporting.localization.Localization(__file__, 1425, 4), getitem___66501, int_66498)
    
    # Assigning a type to the variable 'tuple_var_assignment_62395' (line 1425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'tuple_var_assignment_62395', subscript_call_result_66502)
    
    # Assigning a Subscript to a Name (line 1425):
    
    # Obtaining the type of the subscript
    int_66503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1425, 4), 'int')
    # Getting the type of 'im' (line 1425)
    im_66504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 24), 'im')
    # Obtaining the member 'shape' of a type (line 1425)
    shape_66505 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 24), im_66504, 'shape')
    # Obtaining the member '__getitem__' of a type (line 1425)
    getitem___66506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1425, 4), shape_66505, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1425)
    subscript_call_result_66507 = invoke(stypy.reporting.localization.Localization(__file__, 1425, 4), getitem___66506, int_66503)
    
    # Assigning a type to the variable 'tuple_var_assignment_62396' (line 1425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'tuple_var_assignment_62396', subscript_call_result_66507)
    
    # Assigning a Name to a Name (line 1425):
    # Getting the type of 'tuple_var_assignment_62394' (line 1425)
    tuple_var_assignment_62394_66508 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'tuple_var_assignment_62394')
    # Assigning a type to the variable 'rows' (line 1425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'rows', tuple_var_assignment_62394_66508)
    
    # Assigning a Name to a Name (line 1425):
    # Getting the type of 'tuple_var_assignment_62395' (line 1425)
    tuple_var_assignment_62395_66509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'tuple_var_assignment_62395')
    # Assigning a type to the variable 'cols' (line 1425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 10), 'cols', tuple_var_assignment_62395_66509)
    
    # Assigning a Name to a Name (line 1425):
    # Getting the type of 'tuple_var_assignment_62396' (line 1425)
    tuple_var_assignment_62396_66510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1425, 4), 'tuple_var_assignment_62396')
    # Assigning a type to the variable 'depth' (line 1425)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1425, 16), 'depth', tuple_var_assignment_62396_66510)
    
    # Assigning a Num to a Name (line 1429):
    
    # Assigning a Num to a Name (line 1429):
    int_66511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1429, 10), 'int')
    # Assigning a type to the variable 'dpi' (line 1429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1429, 4), 'dpi', int_66511)
    
    # Assigning a BinOp to a Name (line 1431):
    
    # Assigning a BinOp to a Name (line 1431):
    
    # Call to float(...): (line 1431)
    # Processing the call arguments (line 1431)
    # Getting the type of 'rows' (line 1431)
    rows_66513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 19), 'rows', False)
    # Processing the call keyword arguments (line 1431)
    kwargs_66514 = {}
    # Getting the type of 'float' (line 1431)
    float_66512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 13), 'float', False)
    # Calling float(args, kwargs) (line 1431)
    float_call_result_66515 = invoke(stypy.reporting.localization.Localization(__file__, 1431, 13), float_66512, *[rows_66513], **kwargs_66514)
    
    # Getting the type of 'dpi' (line 1431)
    dpi_66516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 25), 'dpi')
    # Applying the binary operator 'div' (line 1431)
    result_div_66517 = python_operator(stypy.reporting.localization.Localization(__file__, 1431, 13), 'div', float_call_result_66515, dpi_66516)
    
    # Getting the type of 'scale' (line 1431)
    scale_66518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1431, 29), 'scale')
    # Applying the binary operator '*' (line 1431)
    result_mul_66519 = python_operator(stypy.reporting.localization.Localization(__file__, 1431, 28), '*', result_div_66517, scale_66518)
    
    # Assigning a type to the variable 'height' (line 1431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1431, 4), 'height', result_mul_66519)
    
    # Assigning a BinOp to a Name (line 1432):
    
    # Assigning a BinOp to a Name (line 1432):
    
    # Call to float(...): (line 1432)
    # Processing the call arguments (line 1432)
    # Getting the type of 'cols' (line 1432)
    cols_66521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 18), 'cols', False)
    # Processing the call keyword arguments (line 1432)
    kwargs_66522 = {}
    # Getting the type of 'float' (line 1432)
    float_66520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 12), 'float', False)
    # Calling float(args, kwargs) (line 1432)
    float_call_result_66523 = invoke(stypy.reporting.localization.Localization(__file__, 1432, 12), float_66520, *[cols_66521], **kwargs_66522)
    
    # Getting the type of 'dpi' (line 1432)
    dpi_66524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 24), 'dpi')
    # Applying the binary operator 'div' (line 1432)
    result_div_66525 = python_operator(stypy.reporting.localization.Localization(__file__, 1432, 12), 'div', float_call_result_66523, dpi_66524)
    
    # Getting the type of 'scale' (line 1432)
    scale_66526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1432, 28), 'scale')
    # Applying the binary operator '*' (line 1432)
    result_mul_66527 = python_operator(stypy.reporting.localization.Localization(__file__, 1432, 27), '*', result_div_66525, scale_66526)
    
    # Assigning a type to the variable 'width' (line 1432)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1432, 4), 'width', result_mul_66527)
    
    # Assigning a Call to a Name (line 1434):
    
    # Assigning a Call to a Name (line 1434):
    
    # Call to lower(...): (line 1434)
    # Processing the call keyword arguments (line 1434)
    kwargs_66530 = {}
    # Getting the type of 'extout' (line 1434)
    extout_66528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1434, 16), 'extout', False)
    # Obtaining the member 'lower' of a type (line 1434)
    lower_66529 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1434, 16), extout_66528, 'lower')
    # Calling lower(args, kwargs) (line 1434)
    lower_call_result_66531 = invoke(stypy.reporting.localization.Localization(__file__, 1434, 16), lower_66529, *[], **kwargs_66530)
    
    # Assigning a type to the variable 'extension' (line 1434)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1434, 4), 'extension', lower_call_result_66531)
    
    # Getting the type of 'preview' (line 1436)
    preview_66532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1436, 7), 'preview')
    # Testing the type of an if condition (line 1436)
    if_condition_66533 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1436, 4), preview_66532)
    # Assigning a type to the variable 'if_condition_66533' (line 1436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1436, 4), 'if_condition_66533', if_condition_66533)
    # SSA begins for if statement (line 1436)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1438, 8))
    
    # 'import matplotlib.pyplot' statement (line 1438)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_66534 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1438, 8), 'matplotlib.pyplot')

    if (type(import_66534) is not StypyTypeError):

        if (import_66534 != 'pyd_module'):
            __import__(import_66534)
            sys_modules_66535 = sys.modules[import_66534]
            import_module(stypy.reporting.localization.Localization(__file__, 1438, 8), 'plt', sys_modules_66535.module_type_store, module_type_store)
        else:
            import matplotlib.pyplot as plt

            import_module(stypy.reporting.localization.Localization(__file__, 1438, 8), 'plt', matplotlib.pyplot, module_type_store)

    else:
        # Assigning a type to the variable 'matplotlib.pyplot' (line 1438)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1438, 8), 'matplotlib.pyplot', import_66534)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Call to a Name (line 1439):
    
    # Assigning a Call to a Name (line 1439):
    
    # Call to figure(...): (line 1439)
    # Processing the call keyword arguments (line 1439)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1439)
    tuple_66538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1439, 34), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1439)
    # Adding element type (line 1439)
    # Getting the type of 'width' (line 1439)
    width_66539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 34), 'width', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1439, 34), tuple_66538, width_66539)
    # Adding element type (line 1439)
    # Getting the type of 'height' (line 1439)
    height_66540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 41), 'height', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1439, 34), tuple_66538, height_66540)
    
    keyword_66541 = tuple_66538
    # Getting the type of 'dpi' (line 1439)
    dpi_66542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 54), 'dpi', False)
    keyword_66543 = dpi_66542
    kwargs_66544 = {'dpi': keyword_66543, 'figsize': keyword_66541}
    # Getting the type of 'plt' (line 1439)
    plt_66536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1439, 14), 'plt', False)
    # Obtaining the member 'figure' of a type (line 1439)
    figure_66537 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1439, 14), plt_66536, 'figure')
    # Calling figure(args, kwargs) (line 1439)
    figure_call_result_66545 = invoke(stypy.reporting.localization.Localization(__file__, 1439, 14), figure_66537, *[], **kwargs_66544)
    
    # Assigning a type to the variable 'fig' (line 1439)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1439, 8), 'fig', figure_call_result_66545)
    # SSA branch for the else part of an if statement (line 1436)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'extension' (line 1441)
    extension_66546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1441, 11), 'extension')
    unicode_66547 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1441, 24), 'unicode', u'.png')
    # Applying the binary operator '==' (line 1441)
    result_eq_66548 = python_operator(stypy.reporting.localization.Localization(__file__, 1441, 11), '==', extension_66546, unicode_66547)
    
    # Testing the type of an if condition (line 1441)
    if_condition_66549 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1441, 8), result_eq_66548)
    # Assigning a type to the variable 'if_condition_66549' (line 1441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1441, 8), 'if_condition_66549', if_condition_66549)
    # SSA begins for if statement (line 1441)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1442, 12))
    
    # 'from matplotlib.backends.backend_agg import FigureCanvas' statement (line 1442)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_66550 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1442, 12), 'matplotlib.backends.backend_agg')

    if (type(import_66550) is not StypyTypeError):

        if (import_66550 != 'pyd_module'):
            __import__(import_66550)
            sys_modules_66551 = sys.modules[import_66550]
            import_from_module(stypy.reporting.localization.Localization(__file__, 1442, 12), 'matplotlib.backends.backend_agg', sys_modules_66551.module_type_store, module_type_store, ['FigureCanvasAgg'])
            nest_module(stypy.reporting.localization.Localization(__file__, 1442, 12), __file__, sys_modules_66551, sys_modules_66551.module_type_store, module_type_store)
        else:
            from matplotlib.backends.backend_agg import FigureCanvasAgg as FigureCanvas

            import_from_module(stypy.reporting.localization.Localization(__file__, 1442, 12), 'matplotlib.backends.backend_agg', None, module_type_store, ['FigureCanvasAgg'], [FigureCanvas])

    else:
        # Assigning a type to the variable 'matplotlib.backends.backend_agg' (line 1442)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1442, 12), 'matplotlib.backends.backend_agg', import_66550)

    # Adding an alias
    module_type_store.add_alias('FigureCanvas', 'FigureCanvasAgg')
    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    # SSA branch for the else part of an if statement (line 1441)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'extension' (line 1444)
    extension_66552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1444, 13), 'extension')
    unicode_66553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1444, 26), 'unicode', u'.pdf')
    # Applying the binary operator '==' (line 1444)
    result_eq_66554 = python_operator(stypy.reporting.localization.Localization(__file__, 1444, 13), '==', extension_66552, unicode_66553)
    
    # Testing the type of an if condition (line 1444)
    if_condition_66555 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1444, 13), result_eq_66554)
    # Assigning a type to the variable 'if_condition_66555' (line 1444)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1444, 13), 'if_condition_66555', if_condition_66555)
    # SSA begins for if statement (line 1444)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1445, 12))
    
    # 'from matplotlib.backends.backend_pdf import FigureCanvas' statement (line 1445)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_66556 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1445, 12), 'matplotlib.backends.backend_pdf')

    if (type(import_66556) is not StypyTypeError):

        if (import_66556 != 'pyd_module'):
            __import__(import_66556)
            sys_modules_66557 = sys.modules[import_66556]
            import_from_module(stypy.reporting.localization.Localization(__file__, 1445, 12), 'matplotlib.backends.backend_pdf', sys_modules_66557.module_type_store, module_type_store, ['FigureCanvasPdf'])
            nest_module(stypy.reporting.localization.Localization(__file__, 1445, 12), __file__, sys_modules_66557, sys_modules_66557.module_type_store, module_type_store)
        else:
            from matplotlib.backends.backend_pdf import FigureCanvasPdf as FigureCanvas

            import_from_module(stypy.reporting.localization.Localization(__file__, 1445, 12), 'matplotlib.backends.backend_pdf', None, module_type_store, ['FigureCanvasPdf'], [FigureCanvas])

    else:
        # Assigning a type to the variable 'matplotlib.backends.backend_pdf' (line 1445)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1445, 12), 'matplotlib.backends.backend_pdf', import_66556)

    # Adding an alias
    module_type_store.add_alias('FigureCanvas', 'FigureCanvasPdf')
    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    # SSA branch for the else part of an if statement (line 1444)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'extension' (line 1447)
    extension_66558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1447, 13), 'extension')
    unicode_66559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1447, 26), 'unicode', u'.svg')
    # Applying the binary operator '==' (line 1447)
    result_eq_66560 = python_operator(stypy.reporting.localization.Localization(__file__, 1447, 13), '==', extension_66558, unicode_66559)
    
    # Testing the type of an if condition (line 1447)
    if_condition_66561 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1447, 13), result_eq_66560)
    # Assigning a type to the variable 'if_condition_66561' (line 1447)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1447, 13), 'if_condition_66561', if_condition_66561)
    # SSA begins for if statement (line 1447)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1448, 12))
    
    # 'from matplotlib.backends.backend_svg import FigureCanvas' statement (line 1448)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_66562 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1448, 12), 'matplotlib.backends.backend_svg')

    if (type(import_66562) is not StypyTypeError):

        if (import_66562 != 'pyd_module'):
            __import__(import_66562)
            sys_modules_66563 = sys.modules[import_66562]
            import_from_module(stypy.reporting.localization.Localization(__file__, 1448, 12), 'matplotlib.backends.backend_svg', sys_modules_66563.module_type_store, module_type_store, ['FigureCanvasSVG'])
            nest_module(stypy.reporting.localization.Localization(__file__, 1448, 12), __file__, sys_modules_66563, sys_modules_66563.module_type_store, module_type_store)
        else:
            from matplotlib.backends.backend_svg import FigureCanvasSVG as FigureCanvas

            import_from_module(stypy.reporting.localization.Localization(__file__, 1448, 12), 'matplotlib.backends.backend_svg', None, module_type_store, ['FigureCanvasSVG'], [FigureCanvas])

    else:
        # Assigning a type to the variable 'matplotlib.backends.backend_svg' (line 1448)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1448, 12), 'matplotlib.backends.backend_svg', import_66562)

    # Adding an alias
    module_type_store.add_alias('FigureCanvas', 'FigureCanvasSVG')
    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    # SSA branch for the else part of an if statement (line 1447)
    module_type_store.open_ssa_branch('else')
    
    # Call to ValueError(...): (line 1451)
    # Processing the call arguments (line 1451)
    unicode_66565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1451, 29), 'unicode', u"Can only handle extensions 'png', 'svg' or 'pdf'")
    # Processing the call keyword arguments (line 1451)
    kwargs_66566 = {}
    # Getting the type of 'ValueError' (line 1451)
    ValueError_66564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1451, 18), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 1451)
    ValueError_call_result_66567 = invoke(stypy.reporting.localization.Localization(__file__, 1451, 18), ValueError_66564, *[unicode_66565], **kwargs_66566)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1451, 12), ValueError_call_result_66567, 'raise parameter', BaseException)
    # SSA join for if statement (line 1447)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1444)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1441)
    module_type_store = module_type_store.join_ssa_context()
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1454, 8))
    
    # 'from matplotlib.figure import Figure' statement (line 1454)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_66568 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 1454, 8), 'matplotlib.figure')

    if (type(import_66568) is not StypyTypeError):

        if (import_66568 != 'pyd_module'):
            __import__(import_66568)
            sys_modules_66569 = sys.modules[import_66568]
            import_from_module(stypy.reporting.localization.Localization(__file__, 1454, 8), 'matplotlib.figure', sys_modules_66569.module_type_store, module_type_store, ['Figure'])
            nest_module(stypy.reporting.localization.Localization(__file__, 1454, 8), __file__, sys_modules_66569, sys_modules_66569.module_type_store, module_type_store)
        else:
            from matplotlib.figure import Figure

            import_from_module(stypy.reporting.localization.Localization(__file__, 1454, 8), 'matplotlib.figure', None, module_type_store, ['Figure'], [Figure])

    else:
        # Assigning a type to the variable 'matplotlib.figure' (line 1454)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1454, 8), 'matplotlib.figure', import_66568)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Call to a Name (line 1455):
    
    # Assigning a Call to a Name (line 1455):
    
    # Call to Figure(...): (line 1455)
    # Processing the call keyword arguments (line 1455)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1455)
    tuple_66571 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1455, 30), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1455)
    # Adding element type (line 1455)
    # Getting the type of 'width' (line 1455)
    width_66572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 30), 'width', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1455, 30), tuple_66571, width_66572)
    # Adding element type (line 1455)
    # Getting the type of 'height' (line 1455)
    height_66573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 37), 'height', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1455, 30), tuple_66571, height_66573)
    
    keyword_66574 = tuple_66571
    # Getting the type of 'dpi' (line 1455)
    dpi_66575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 50), 'dpi', False)
    keyword_66576 = dpi_66575
    kwargs_66577 = {'dpi': keyword_66576, 'figsize': keyword_66574}
    # Getting the type of 'Figure' (line 1455)
    Figure_66570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1455, 14), 'Figure', False)
    # Calling Figure(args, kwargs) (line 1455)
    Figure_call_result_66578 = invoke(stypy.reporting.localization.Localization(__file__, 1455, 14), Figure_66570, *[], **kwargs_66577)
    
    # Assigning a type to the variable 'fig' (line 1455)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1455, 8), 'fig', Figure_call_result_66578)
    
    # Call to FigureCanvas(...): (line 1456)
    # Processing the call arguments (line 1456)
    # Getting the type of 'fig' (line 1456)
    fig_66580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 21), 'fig', False)
    # Processing the call keyword arguments (line 1456)
    kwargs_66581 = {}
    # Getting the type of 'FigureCanvas' (line 1456)
    FigureCanvas_66579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 8), 'FigureCanvas', False)
    # Calling FigureCanvas(args, kwargs) (line 1456)
    FigureCanvas_call_result_66582 = invoke(stypy.reporting.localization.Localization(__file__, 1456, 8), FigureCanvas_66579, *[fig_66580], **kwargs_66581)
    
    # SSA join for if statement (line 1436)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1458):
    
    # Assigning a Call to a Name (line 1458):
    
    # Call to add_axes(...): (line 1458)
    # Processing the call arguments (line 1458)
    
    # Obtaining an instance of the builtin type 'list' (line 1458)
    list_66585 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 22), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1458)
    # Adding element type (line 1458)
    int_66586 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 23), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1458, 22), list_66585, int_66586)
    # Adding element type (line 1458)
    int_66587 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 26), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1458, 22), list_66585, int_66587)
    # Adding element type (line 1458)
    int_66588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 29), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1458, 22), list_66585, int_66588)
    # Adding element type (line 1458)
    int_66589 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 32), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1458, 22), list_66585, int_66589)
    
    # Processing the call keyword arguments (line 1458)
    unicode_66590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1458, 43), 'unicode', u'auto')
    keyword_66591 = unicode_66590
    # Getting the type of 'False' (line 1459)
    False_66592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1459, 30), 'False', False)
    keyword_66593 = False_66592
    
    # Obtaining an instance of the builtin type 'list' (line 1459)
    list_66594 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 44), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1459)
    
    keyword_66595 = list_66594
    
    # Obtaining an instance of the builtin type 'list' (line 1459)
    list_66596 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1459, 55), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1459)
    
    keyword_66597 = list_66596
    kwargs_66598 = {'xticks': keyword_66595, 'yticks': keyword_66597, 'aspect': keyword_66591, 'frameon': keyword_66593}
    # Getting the type of 'fig' (line 1458)
    fig_66583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1458, 9), 'fig', False)
    # Obtaining the member 'add_axes' of a type (line 1458)
    add_axes_66584 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1458, 9), fig_66583, 'add_axes')
    # Calling add_axes(args, kwargs) (line 1458)
    add_axes_call_result_66599 = invoke(stypy.reporting.localization.Localization(__file__, 1458, 9), add_axes_66584, *[list_66585], **kwargs_66598)
    
    # Assigning a type to the variable 'ax' (line 1458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1458, 4), 'ax', add_axes_call_result_66599)
    
    # Assigning a Call to a Tuple (line 1461):
    
    # Assigning a Call to a Name:
    
    # Call to splitext(...): (line 1461)
    # Processing the call arguments (line 1461)
    # Getting the type of 'basename' (line 1461)
    basename_66603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 37), 'basename', False)
    # Processing the call keyword arguments (line 1461)
    kwargs_66604 = {}
    # Getting the type of 'os' (line 1461)
    os_66600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 20), 'os', False)
    # Obtaining the member 'path' of a type (line 1461)
    path_66601 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 20), os_66600, 'path')
    # Obtaining the member 'splitext' of a type (line 1461)
    splitext_66602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 20), path_66601, 'splitext')
    # Calling splitext(args, kwargs) (line 1461)
    splitext_call_result_66605 = invoke(stypy.reporting.localization.Localization(__file__, 1461, 20), splitext_66602, *[basename_66603], **kwargs_66604)
    
    # Assigning a type to the variable 'call_assignment_62397' (line 1461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'call_assignment_62397', splitext_call_result_66605)
    
    # Assigning a Call to a Name (line 1461):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_66608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1461, 4), 'int')
    # Processing the call keyword arguments
    kwargs_66609 = {}
    # Getting the type of 'call_assignment_62397' (line 1461)
    call_assignment_62397_66606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'call_assignment_62397', False)
    # Obtaining the member '__getitem__' of a type (line 1461)
    getitem___66607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 4), call_assignment_62397_66606, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_66610 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___66607, *[int_66608], **kwargs_66609)
    
    # Assigning a type to the variable 'call_assignment_62398' (line 1461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'call_assignment_62398', getitem___call_result_66610)
    
    # Assigning a Name to a Name (line 1461):
    # Getting the type of 'call_assignment_62398' (line 1461)
    call_assignment_62398_66611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'call_assignment_62398')
    # Assigning a type to the variable 'basename' (line 1461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'basename', call_assignment_62398_66611)
    
    # Assigning a Call to a Name (line 1461):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_66614 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1461, 4), 'int')
    # Processing the call keyword arguments
    kwargs_66615 = {}
    # Getting the type of 'call_assignment_62397' (line 1461)
    call_assignment_62397_66612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'call_assignment_62397', False)
    # Obtaining the member '__getitem__' of a type (line 1461)
    getitem___66613 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1461, 4), call_assignment_62397_66612, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_66616 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___66613, *[int_66614], **kwargs_66615)
    
    # Assigning a type to the variable 'call_assignment_62399' (line 1461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'call_assignment_62399', getitem___call_result_66616)
    
    # Assigning a Name to a Name (line 1461):
    # Getting the type of 'call_assignment_62399' (line 1461)
    call_assignment_62399_66617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1461, 4), 'call_assignment_62399')
    # Assigning a type to the variable 'ext' (line 1461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1461, 14), 'ext', call_assignment_62399_66617)
    
    # Call to imshow(...): (line 1462)
    # Processing the call arguments (line 1462)
    # Getting the type of 'im' (line 1462)
    im_66620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 14), 'im', False)
    # Processing the call keyword arguments (line 1462)
    unicode_66621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1462, 25), 'unicode', u'auto')
    keyword_66622 = unicode_66621
    # Getting the type of 'True' (line 1462)
    True_66623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 42), 'True', False)
    keyword_66624 = True_66623
    # Getting the type of 'interpolation' (line 1462)
    interpolation_66625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 62), 'interpolation', False)
    keyword_66626 = interpolation_66625
    kwargs_66627 = {'resample': keyword_66624, 'aspect': keyword_66622, 'interpolation': keyword_66626}
    # Getting the type of 'ax' (line 1462)
    ax_66618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1462, 4), 'ax', False)
    # Obtaining the member 'imshow' of a type (line 1462)
    imshow_66619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1462, 4), ax_66618, 'imshow')
    # Calling imshow(args, kwargs) (line 1462)
    imshow_call_result_66628 = invoke(stypy.reporting.localization.Localization(__file__, 1462, 4), imshow_66619, *[im_66620], **kwargs_66627)
    
    
    # Call to savefig(...): (line 1463)
    # Processing the call arguments (line 1463)
    # Getting the type of 'thumbfile' (line 1463)
    thumbfile_66631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 16), 'thumbfile', False)
    # Processing the call keyword arguments (line 1463)
    # Getting the type of 'dpi' (line 1463)
    dpi_66632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 31), 'dpi', False)
    keyword_66633 = dpi_66632
    kwargs_66634 = {'dpi': keyword_66633}
    # Getting the type of 'fig' (line 1463)
    fig_66629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1463, 4), 'fig', False)
    # Obtaining the member 'savefig' of a type (line 1463)
    savefig_66630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1463, 4), fig_66629, 'savefig')
    # Calling savefig(args, kwargs) (line 1463)
    savefig_call_result_66635 = invoke(stypy.reporting.localization.Localization(__file__, 1463, 4), savefig_66630, *[thumbfile_66631], **kwargs_66634)
    
    # Getting the type of 'fig' (line 1464)
    fig_66636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1464, 11), 'fig')
    # Assigning a type to the variable 'stypy_return_type' (line 1464)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1464, 4), 'stypy_return_type', fig_66636)
    
    # ################# End of 'thumbnail(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'thumbnail' in the type store
    # Getting the type of 'stypy_return_type' (line 1384)
    stypy_return_type_66637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1384, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_66637)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'thumbnail'
    return stypy_return_type_66637

# Assigning a type to the variable 'thumbnail' (line 1384)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1384, 0), 'thumbnail', thumbnail)

# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
