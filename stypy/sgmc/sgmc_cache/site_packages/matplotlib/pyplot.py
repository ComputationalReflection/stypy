
# -*- coding: utf-8 -*-

"""
ORIGINAL PROGRAM SOURCE CODE:
1: # Note: The first part of this file can be modified in place, but the latter
2: # part is autogenerated by the boilerplate.py script.
3: '''
4: Provides a MATLAB-like plotting framework.
5: 
6: :mod:`~matplotlib.pylab` combines pyplot with numpy into a single namespace.
7: This is convenient for interactive work, but for programming it
8: is recommended that the namespaces be kept separate, e.g.::
9: 
10:     import numpy as np
11:     import matplotlib.pyplot as plt
12: 
13:     x = np.arange(0, 5, 0.1);
14:     y = np.sin(x)
15:     plt.plot(x, y)
16: 
17: '''
18: from __future__ import (absolute_import, division, print_function,
19:                         unicode_literals)
20: 
21: import six
22: 
23: import sys
24: import warnings
25: import types
26: 
27: from cycler import cycler
28: import matplotlib
29: import matplotlib.colorbar
30: from matplotlib import style
31: from matplotlib import _pylab_helpers, interactive
32: from matplotlib.cbook import dedent, silent_list, is_numlike
33: from matplotlib.cbook import _string_to_bool
34: from matplotlib.cbook import deprecated
35: from matplotlib import docstring
36: from matplotlib.backend_bases import FigureCanvasBase
37: from matplotlib.figure import Figure, figaspect
38: from matplotlib.gridspec import GridSpec
39: from matplotlib.image import imread as _imread
40: from matplotlib.image import imsave as _imsave
41: from matplotlib import rcParams, rcParamsDefault, get_backend
42: from matplotlib import rc_context
43: from matplotlib.rcsetup import interactive_bk as _interactive_bk
44: from matplotlib.artist import getp, get, Artist
45: from matplotlib.artist import setp as _setp
46: from matplotlib.axes import Axes, Subplot
47: from matplotlib.projections import PolarAxes
48: from matplotlib import mlab  # for csv2rec, detrend_none, window_hanning
49: from matplotlib.scale import get_scale_docs, get_scale_names
50: 
51: from matplotlib import cm
52: from matplotlib.cm import get_cmap, register_cmap
53: 
54: import numpy as np
55: 
56: # We may not need the following imports here:
57: from matplotlib.colors import Normalize
58: from matplotlib.lines import Line2D
59: from matplotlib.text import Text, Annotation
60: from matplotlib.patches import Polygon, Rectangle, Circle, Arrow
61: from matplotlib.widgets import SubplotTool, Button, Slider, Widget
62: 
63: from .ticker import TickHelper, Formatter, FixedFormatter, NullFormatter,\
64:            FuncFormatter, FormatStrFormatter, ScalarFormatter,\
65:            LogFormatter, LogFormatterExponent, LogFormatterMathtext,\
66:            Locator, IndexLocator, FixedLocator, NullLocator,\
67:            LinearLocator, LogLocator, AutoLocator, MultipleLocator,\
68:            MaxNLocator
69: from matplotlib.backends import pylab_setup
70: 
71: ## Backend detection ##
72: def _backend_selection():
73:     ''' If rcParams['backend_fallback'] is true, check to see if the
74:         current backend is compatible with the current running event
75:         loop, and if not switches to a compatible one.
76:     '''
77:     backend = rcParams['backend']
78:     if not rcParams['backend_fallback'] or backend not in _interactive_bk:
79:         return
80:     is_agg_backend = rcParams['backend'].endswith('Agg')
81:     if 'wx' in sys.modules and not backend in ('WX', 'WXAgg'):
82:         import wx
83:         if wx.App.IsMainLoopRunning():
84:             rcParams['backend'] = 'wx' + 'Agg' * is_agg_backend
85:     elif 'PyQt4.QtCore' in sys.modules and not backend == 'Qt4Agg':
86:         import PyQt4.QtGui
87:         if not PyQt4.QtGui.qApp.startingUp():
88:             # The mainloop is running.
89:             rcParams['backend'] = 'qt4Agg'
90:     elif 'PyQt5.QtCore' in sys.modules and not backend == 'Qt5Agg':
91:         import PyQt5.QtWidgets
92:         if not PyQt5.QtWidgets.qApp.startingUp():
93:             # The mainloop is running.
94:             rcParams['backend'] = 'qt5Agg'
95:     elif ('gtk' in sys.modules and
96:           backend not in ('GTK', 'GTKAgg', 'GTKCairo')):
97:         if 'gi' in sys.modules:
98:             from gi.repository import GObject
99:             ml = GObject.MainLoop
100:         else:
101:             import gobject
102:             ml = gobject.MainLoop
103:         if ml().is_running():
104:             rcParams['backend'] = 'gtk' + 'Agg' * is_agg_backend
105:     elif 'Tkinter' in sys.modules and not backend == 'TkAgg':
106:         # import Tkinter
107:         pass  # what if anything do we need to do for tkinter?
108: 
109: _backend_selection()
110: 
111: ## Global ##
112: 
113: _backend_mod, new_figure_manager, draw_if_interactive, _show = pylab_setup()
114: 
115: _IP_REGISTERED = None
116: _INSTALL_FIG_OBSERVER = False
117: 
118: 
119: def install_repl_displayhook():
120:     '''
121:     Install a repl display hook so that any stale figure are automatically
122:     redrawn when control is returned to the repl.
123: 
124:     This works with IPython terminals and kernels,
125:     as well as vanilla python shells.
126:     '''
127:     global _IP_REGISTERED
128:     global _INSTALL_FIG_OBSERVER
129: 
130:     class _NotIPython(Exception):
131:         pass
132: 
133:     # see if we have IPython hooks around, if use them
134: 
135:     try:
136:         if 'IPython' in sys.modules:
137:             from IPython import get_ipython
138:             ip = get_ipython()
139:             if ip is None:
140:                 raise _NotIPython()
141: 
142:             if _IP_REGISTERED:
143:                 return
144: 
145:             def post_execute():
146:                 if matplotlib.is_interactive():
147:                     draw_all()
148: 
149:             # IPython >= 2
150:             try:
151:                 ip.events.register('post_execute', post_execute)
152:             except AttributeError:
153:                 # IPython 1.x
154:                 ip.register_post_execute(post_execute)
155: 
156:             _IP_REGISTERED = post_execute
157:             _INSTALL_FIG_OBSERVER = False
158: 
159:             # trigger IPython's eventloop integration, if available
160:             from IPython.core.pylabtools import backend2gui
161: 
162:             ipython_gui_name = backend2gui.get(get_backend())
163:             if ipython_gui_name:
164:                 ip.enable_gui(ipython_gui_name)
165:         else:
166:             _INSTALL_FIG_OBSERVER = True
167: 
168:     # import failed or ipython is not running
169:     except (ImportError, _NotIPython):
170:         _INSTALL_FIG_OBSERVER = True
171: 
172: 
173: def uninstall_repl_displayhook():
174:     '''
175:     Uninstalls the matplotlib display hook.
176: 
177:     .. warning
178: 
179:        Need IPython >= 2 for this to work.  For IPython < 2 will raise a
180:        ``NotImplementedError``
181: 
182:     .. warning
183: 
184:        If you are using vanilla python and have installed another
185:        display hook this will reset ``sys.displayhook`` to what ever
186:        function was there when matplotlib installed it's displayhook,
187:        possibly discarding your changes.
188:     '''
189:     global _IP_REGISTERED
190:     global _INSTALL_FIG_OBSERVER
191:     if _IP_REGISTERED:
192:         from IPython import get_ipython
193:         ip = get_ipython()
194:         try:
195:             ip.events.unregister('post_execute', _IP_REGISTERED)
196:         except AttributeError:
197:             raise NotImplementedError("Can not unregister events "
198:                                       "in IPython < 2.0")
199:         _IP_REGISTERED = None
200: 
201:     if _INSTALL_FIG_OBSERVER:
202:         _INSTALL_FIG_OBSERVER = False
203: 
204: 
205: draw_all = _pylab_helpers.Gcf.draw_all
206: 
207: 
208: @docstring.copy_dedent(Artist.findobj)
209: def findobj(o=None, match=None, include_self=True):
210:     if o is None:
211:         o = gcf()
212:     return o.findobj(match, include_self=include_self)
213: 
214: 
215: def switch_backend(newbackend):
216:     '''
217:     Switch the default backend.  This feature is **experimental**, and
218:     is only expected to work switching to an image backend.  e.g., if
219:     you have a bunch of PostScript scripts that you want to run from
220:     an interactive ipython session, you may want to switch to the PS
221:     backend before running them to avoid having a bunch of GUI windows
222:     popup.  If you try to interactively switch from one GUI backend to
223:     another, you will explode.
224: 
225:     Calling this command will close all open windows.
226:     '''
227:     close('all')
228:     global _backend_mod, new_figure_manager, draw_if_interactive, _show
229:     matplotlib.use(newbackend, warn=False, force=True)
230:     from matplotlib.backends import pylab_setup
231:     _backend_mod, new_figure_manager, draw_if_interactive, _show = pylab_setup()
232: 
233: 
234: def show(*args, **kw):
235:     '''
236:     Display a figure.
237:     When running in ipython with its pylab mode, display all
238:     figures and return to the ipython prompt.
239: 
240:     In non-interactive mode, display all figures and block until
241:     the figures have been closed; in interactive mode it has no
242:     effect unless figures were created prior to a change from
243:     non-interactive to interactive mode (not recommended).  In
244:     that case it displays the figures but does not block.
245: 
246:     A single experimental keyword argument, *block*, may be
247:     set to True or False to override the blocking behavior
248:     described above.
249:     '''
250:     global _show
251:     return _show(*args, **kw)
252: 
253: 
254: def isinteractive():
255:     '''
256:     Return status of interactive mode.
257:     '''
258:     return matplotlib.is_interactive()
259: 
260: 
261: def ioff():
262:     'Turn interactive mode off.'
263:     matplotlib.interactive(False)
264:     uninstall_repl_displayhook()
265: 
266: 
267: def ion():
268:     'Turn interactive mode on.'
269:     matplotlib.interactive(True)
270:     install_repl_displayhook()
271: 
272: 
273: def pause(interval):
274:     '''
275:     Pause for *interval* seconds.
276: 
277:     If there is an active figure, it will be updated and displayed before the
278:     pause, and the GUI event loop (if any) will run during the pause.
279: 
280:     This can be used for crude animation.  For more complex animation, see
281:     :mod:`matplotlib.animation`.
282: 
283:     This function is experimental; its behavior may be changed or extended in a
284:     future release.
285:     '''
286:     manager = _pylab_helpers.Gcf.get_active()
287:     if manager is not None:
288:         canvas = manager.canvas
289:         if canvas.figure.stale:
290:             canvas.draw_idle()
291:         show(block=False)
292:         canvas.start_event_loop(interval)
293:     else:
294:         time.sleep(interval)
295: 
296: 
297: @docstring.copy_dedent(matplotlib.rc)
298: def rc(*args, **kwargs):
299:     matplotlib.rc(*args, **kwargs)
300: 
301: 
302: @docstring.copy_dedent(matplotlib.rc_context)
303: def rc_context(rc=None, fname=None):
304:     return matplotlib.rc_context(rc, fname)
305: 
306: 
307: @docstring.copy_dedent(matplotlib.rcdefaults)
308: def rcdefaults():
309:     matplotlib.rcdefaults()
310:     if matplotlib.is_interactive():
311:         draw_all()
312: 
313: 
314: # The current "image" (ScalarMappable) is retrieved or set
315: # only via the pyplot interface using the following two
316: # functions:
317: def gci():
318:     '''
319:     Get the current colorable artist.  Specifically, returns the
320:     current :class:`~matplotlib.cm.ScalarMappable` instance (image or
321:     patch collection), or *None* if no images or patch collections
322:     have been defined.  The commands :func:`~matplotlib.pyplot.imshow`
323:     and :func:`~matplotlib.pyplot.figimage` create
324:     :class:`~matplotlib.image.Image` instances, and the commands
325:     :func:`~matplotlib.pyplot.pcolor` and
326:     :func:`~matplotlib.pyplot.scatter` create
327:     :class:`~matplotlib.collections.Collection` instances.  The
328:     current image is an attribute of the current axes, or the nearest
329:     earlier axes in the current figure that contains an image.
330:     '''
331:     return gcf()._gci()
332: 
333: 
334: def sci(im):
335:     '''
336:     Set the current image.  This image will be the target of colormap
337:     commands like :func:`~matplotlib.pyplot.jet`,
338:     :func:`~matplotlib.pyplot.hot` or
339:     :func:`~matplotlib.pyplot.clim`).  The current image is an
340:     attribute of the current axes.
341:     '''
342:     gca()._sci(im)
343: 
344: 
345: ## Any Artist ##
346: # (getp is simply imported)
347: @docstring.copy(_setp)
348: def setp(*args, **kwargs):
349:     return _setp(*args, **kwargs)
350: 
351: 
352: def xkcd(scale=1, length=100, randomness=2):
353:     '''
354:     Turns on `xkcd <https://xkcd.com/>`_ sketch-style drawing mode.
355:     This will only have effect on things drawn after this function is
356:     called.
357: 
358:     For best results, the "Humor Sans" font should be installed: it is
359:     not included with matplotlib.
360: 
361:     Parameters
362:     ----------
363:     scale : float, optional
364:         The amplitude of the wiggle perpendicular to the source line.
365:     length : float, optional
366:         The length of the wiggle along the line.
367:     randomness : float, optional
368:         The scale factor by which the length is shrunken or expanded.
369: 
370:     Notes
371:     -----
372:     This function works by a number of rcParams, so it will probably
373:     override others you have set before.
374: 
375:     If you want the effects of this function to be temporary, it can
376:     be used as a context manager, for example::
377: 
378:         with plt.xkcd():
379:             # This figure will be in XKCD-style
380:             fig1 = plt.figure()
381:             # ...
382: 
383:         # This figure will be in regular style
384:         fig2 = plt.figure()
385:     '''
386:     if rcParams['text.usetex']:
387:         raise RuntimeError(
388:             "xkcd mode is not compatible with text.usetex = True")
389: 
390:     from matplotlib import patheffects
391:     context = rc_context()
392:     try:
393:         rcParams['font.family'] = ['xkcd', 'Humor Sans', 'Comic Sans MS']
394:         rcParams['font.size'] = 14.0
395:         rcParams['path.sketch'] = (scale, length, randomness)
396:         rcParams['path.effects'] = [
397:             patheffects.withStroke(linewidth=4, foreground="w")]
398:         rcParams['axes.linewidth'] = 1.5
399:         rcParams['lines.linewidth'] = 2.0
400:         rcParams['figure.facecolor'] = 'white'
401:         rcParams['grid.linewidth'] = 0.0
402:         rcParams['axes.grid'] = False
403:         rcParams['axes.unicode_minus'] = False
404:         rcParams['axes.edgecolor'] = 'black'
405:         rcParams['xtick.major.size'] = 8
406:         rcParams['xtick.major.width'] = 3
407:         rcParams['ytick.major.size'] = 8
408:         rcParams['ytick.major.width'] = 3
409:     except:
410:         context.__exit__(*sys.exc_info())
411:         raise
412:     return context
413: 
414: 
415: ## Figures ##
416: 
417: def figure(num=None,  # autoincrement if None, else integer from 1-N
418:            figsize=None,  # defaults to rc figure.figsize
419:            dpi=None,  # defaults to rc figure.dpi
420:            facecolor=None,  # defaults to rc figure.facecolor
421:            edgecolor=None,  # defaults to rc figure.edgecolor
422:            frameon=True,
423:            FigureClass=Figure,
424:            clear=False,
425:            **kwargs
426:            ):
427:     '''
428:     Creates a new figure.
429: 
430:     Parameters
431:     ----------
432: 
433:     num : integer or string, optional, default: none
434:         If not provided, a new figure will be created, and the figure number
435:         will be incremented. The figure objects holds this number in a `number`
436:         attribute.
437:         If num is provided, and a figure with this id already exists, make
438:         it active, and returns a reference to it. If this figure does not
439:         exists, create it and returns it.
440:         If num is a string, the window title will be set to this figure's
441:         `num`.
442: 
443:     figsize : tuple of integers, optional, default: None
444:         width, height in inches. If not provided, defaults to rc
445:         figure.figsize.
446: 
447:     dpi : integer, optional, default: None
448:         resolution of the figure. If not provided, defaults to rc figure.dpi.
449: 
450:     facecolor :
451:         the background color. If not provided, defaults to rc figure.facecolor.
452: 
453:     edgecolor :
454:         the border color. If not provided, defaults to rc figure.edgecolor.
455: 
456:     frameon : bool, optional, default: True
457:         If False, suppress drawing the figure frame.
458: 
459:     FigureClass : class derived from matplotlib.figure.Figure
460:         Optionally use a custom Figure instance.
461: 
462:     clear : bool, optional, default: False
463:         If True and the figure already exists, then it is cleared.
464: 
465:     Returns
466:     -------
467:     figure : Figure
468:         The Figure instance returned will also be passed to new_figure_manager
469:         in the backends, which allows to hook custom Figure classes into the
470:         pylab interface. Additional kwargs will be passed to the figure init
471:         function.
472: 
473:     Notes
474:     -----
475:     If you are creating many figures, make sure you explicitly call "close"
476:     on the figures you are not using, because this will enable pylab
477:     to properly clean up the memory.
478: 
479:     rcParams defines the default values, which can be modified in the
480:     matplotlibrc file
481: 
482:     '''
483: 
484:     if figsize is None:
485:         figsize = rcParams['figure.figsize']
486:     if dpi is None:
487:         dpi = rcParams['figure.dpi']
488:     if facecolor is None:
489:         facecolor = rcParams['figure.facecolor']
490:     if edgecolor is None:
491:         edgecolor = rcParams['figure.edgecolor']
492: 
493:     allnums = get_fignums()
494:     next_num = max(allnums) + 1 if allnums else 1
495:     figLabel = ''
496:     if num is None:
497:         num = next_num
498:     elif isinstance(num, six.string_types):
499:         figLabel = num
500:         allLabels = get_figlabels()
501:         if figLabel not in allLabels:
502:             if figLabel == 'all':
503:                 warnings.warn("close('all') closes all existing figures")
504:             num = next_num
505:         else:
506:             inum = allLabels.index(figLabel)
507:             num = allnums[inum]
508:     else:
509:         num = int(num)  # crude validation of num argument
510: 
511:     figManager = _pylab_helpers.Gcf.get_fig_manager(num)
512:     if figManager is None:
513:         max_open_warning = rcParams['figure.max_open_warning']
514: 
515:         if (max_open_warning >= 1 and len(allnums) >= max_open_warning):
516:             warnings.warn(
517:                 "More than %d figures have been opened. Figures "
518:                 "created through the pyplot interface "
519:                 "(`matplotlib.pyplot.figure`) are retained until "
520:                 "explicitly closed and may consume too much memory. "
521:                 "(To control this warning, see the rcParam "
522:                 "`figure.max_open_warning`)." %
523:                 max_open_warning, RuntimeWarning)
524: 
525:         if get_backend().lower() == 'ps':
526:             dpi = 72
527: 
528:         figManager = new_figure_manager(num, figsize=figsize,
529:                                         dpi=dpi,
530:                                         facecolor=facecolor,
531:                                         edgecolor=edgecolor,
532:                                         frameon=frameon,
533:                                         FigureClass=FigureClass,
534:                                         **kwargs)
535: 
536:         if figLabel:
537:             figManager.set_window_title(figLabel)
538:             figManager.canvas.figure.set_label(figLabel)
539: 
540:         # make this figure current on button press event
541:         def make_active(event):
542:             _pylab_helpers.Gcf.set_active(figManager)
543: 
544:         cid = figManager.canvas.mpl_connect('button_press_event', make_active)
545:         figManager._cidgcf = cid
546: 
547:         _pylab_helpers.Gcf.set_active(figManager)
548:         fig = figManager.canvas.figure
549:         fig.number = num
550: 
551:         # make sure backends (inline) that we don't ship that expect this
552:         # to be called in plotting commands to make the figure call show
553:         # still work.  There is probably a better way to do this in the
554:         # FigureManager base class.
555:         if matplotlib.is_interactive():
556:             draw_if_interactive()
557: 
558:         if _INSTALL_FIG_OBSERVER:
559:             fig.stale_callback = _auto_draw_if_interactive
560: 
561:     if clear:
562:         figManager.canvas.figure.clear()
563: 
564:     return figManager.canvas.figure
565: 
566: 
567: def _auto_draw_if_interactive(fig, val):
568:     '''
569:     This is an internal helper function for making sure that auto-redrawing
570:     works as intended in the plain python repl.
571: 
572:     Parameters
573:     ----------
574:     fig : Figure
575:         A figure object which is assumed to be associated with a canvas
576:     '''
577:     if val and matplotlib.is_interactive() and not fig.canvas.is_saving():
578:         fig.canvas.draw_idle()
579: 
580: 
581: def gcf():
582:     "Get a reference to the current figure."
583: 
584:     figManager = _pylab_helpers.Gcf.get_active()
585:     if figManager is not None:
586:         return figManager.canvas.figure
587:     else:
588:         return figure()
589: 
590: 
591: def fignum_exists(num):
592:     return _pylab_helpers.Gcf.has_fignum(num) or num in get_figlabels()
593: 
594: 
595: def get_fignums():
596:     '''Return a list of existing figure numbers.'''
597:     return sorted(_pylab_helpers.Gcf.figs)
598: 
599: 
600: def get_figlabels():
601:     "Return a list of existing figure labels."
602:     figManagers = _pylab_helpers.Gcf.get_all_fig_managers()
603:     figManagers.sort(key=lambda m: m.num)
604:     return [m.canvas.figure.get_label() for m in figManagers]
605: 
606: 
607: def get_current_fig_manager():
608:     figManager = _pylab_helpers.Gcf.get_active()
609:     if figManager is None:
610:         gcf()  # creates an active figure as a side effect
611:         figManager = _pylab_helpers.Gcf.get_active()
612:     return figManager
613: 
614: 
615: @docstring.copy_dedent(FigureCanvasBase.mpl_connect)
616: def connect(s, func):
617:     return get_current_fig_manager().canvas.mpl_connect(s, func)
618: 
619: 
620: @docstring.copy_dedent(FigureCanvasBase.mpl_disconnect)
621: def disconnect(cid):
622:     return get_current_fig_manager().canvas.mpl_disconnect(cid)
623: 
624: 
625: def close(*args):
626:     '''
627:     Close a figure window.
628: 
629:     ``close()`` by itself closes the current figure
630: 
631:     ``close(h)`` where *h* is a :class:`Figure` instance, closes that figure
632: 
633:     ``close(num)`` closes figure number *num*
634: 
635:     ``close(name)`` where *name* is a string, closes figure with that label
636: 
637:     ``close('all')`` closes all the figure windows
638:     '''
639: 
640:     if len(args) == 0:
641:         figManager = _pylab_helpers.Gcf.get_active()
642:         if figManager is None:
643:             return
644:         else:
645:             _pylab_helpers.Gcf.destroy(figManager.num)
646:     elif len(args) == 1:
647:         arg = args[0]
648:         if arg == 'all':
649:             _pylab_helpers.Gcf.destroy_all()
650:         elif isinstance(arg, six.integer_types):
651:             _pylab_helpers.Gcf.destroy(arg)
652:         elif hasattr(arg, 'int'):
653:             # if we are dealing with a type UUID, we
654:             # can use its integer representation
655:             _pylab_helpers.Gcf.destroy(arg.int)
656:         elif isinstance(arg, six.string_types):
657:             allLabels = get_figlabels()
658:             if arg in allLabels:
659:                 num = get_fignums()[allLabels.index(arg)]
660:                 _pylab_helpers.Gcf.destroy(num)
661:         elif isinstance(arg, Figure):
662:             _pylab_helpers.Gcf.destroy_fig(arg)
663:         else:
664:             raise TypeError('Unrecognized argument type %s to close' % type(arg))
665:     else:
666:         raise TypeError('close takes 0 or 1 arguments')
667: 
668: 
669: def clf():
670:     '''
671:     Clear the current figure.
672:     '''
673:     gcf().clf()
674: 
675: 
676: def draw():
677:     '''Redraw the current figure.
678: 
679:     This is used to update a figure that has been altered, but not
680:     automatically re-drawn.  If interactive mode is on (:func:`.ion()`), this
681:     should be only rarely needed, but there may be ways to modify the state of
682:     a figure without marking it as `stale`.  Please report these cases as
683:     bugs.
684: 
685:     A more object-oriented alternative, given any
686:     :class:`~matplotlib.figure.Figure` instance, :attr:`fig`, that
687:     was created using a :mod:`~matplotlib.pyplot` function, is::
688: 
689:         fig.canvas.draw_idle()
690:     '''
691:     get_current_fig_manager().canvas.draw_idle()
692: 
693: 
694: @docstring.copy_dedent(Figure.savefig)
695: def savefig(*args, **kwargs):
696:     fig = gcf()
697:     res = fig.savefig(*args, **kwargs)
698:     fig.canvas.draw_idle()   # need this if 'transparent=True' to reset colors
699:     return res
700: 
701: 
702: @docstring.copy_dedent(Figure.ginput)
703: def ginput(*args, **kwargs):
704:     '''
705:     Blocking call to interact with the figure.
706: 
707:     This will wait for *n* clicks from the user and return a list of the
708:     coordinates of each click.
709: 
710:     If *timeout* is negative, does not timeout.
711:     '''
712:     return gcf().ginput(*args, **kwargs)
713: 
714: 
715: @docstring.copy_dedent(Figure.waitforbuttonpress)
716: def waitforbuttonpress(*args, **kwargs):
717:     '''
718:     Blocking call to interact with the figure.
719: 
720:     This will wait for *n* key or mouse clicks from the user and
721:     return a list containing True's for keyboard clicks and False's
722:     for mouse clicks.
723: 
724:     If *timeout* is negative, does not timeout.
725:     '''
726:     return gcf().waitforbuttonpress(*args, **kwargs)
727: 
728: 
729: # Putting things in figures
730: 
731: @docstring.copy_dedent(Figure.text)
732: def figtext(*args, **kwargs):
733:     return gcf().text(*args, **kwargs)
734: 
735: 
736: @docstring.copy_dedent(Figure.suptitle)
737: def suptitle(*args, **kwargs):
738:     return gcf().suptitle(*args, **kwargs)
739: 
740: 
741: @docstring.copy_dedent(Figure.figimage)
742: def figimage(*args, **kwargs):
743:     return gcf().figimage(*args, **kwargs)
744: 
745: 
746: def figlegend(*args, **kwargs):
747:     '''
748:     Place a legend in the figure.
749: 
750:     *labels*
751:       a sequence of strings
752: 
753:     *handles*
754:       a sequence of :class:`~matplotlib.lines.Line2D` or
755:       :class:`~matplotlib.patches.Patch` instances
756: 
757:     *loc*
758:       can be a string or an integer specifying the legend
759:       location
760: 
761:     A :class:`matplotlib.legend.Legend` instance is returned.
762: 
763:     Examples
764:     --------
765: 
766:     To make a legend from existing artists on every axes::
767: 
768:       figlegend()
769: 
770:     To make a legend for a list of lines and labels::
771: 
772:       figlegend( (line1, line2, line3),
773:                  ('label1', 'label2', 'label3'),
774:                  'upper right' )
775: 
776:     .. seealso::
777: 
778:        :func:`~matplotlib.pyplot.legend`
779: 
780:     '''
781:     return gcf().legend(*args, **kwargs)
782: 
783: 
784: ## Figure and Axes hybrid ##
785: 
786: _hold_msg = '''pyplot.hold is deprecated.
787:     Future behavior will be consistent with the long-time default:
788:     plot commands add elements without first clearing the
789:     Axes and/or Figure.'''
790: 
791: @deprecated("2.0", message=_hold_msg)
792: def hold(b=None):
793:     '''
794:     Set the hold state.  If *b* is None (default), toggle the
795:     hold state, else set the hold state to boolean value *b*::
796: 
797:       hold()      # toggle hold
798:       hold(True)  # hold is on
799:       hold(False) # hold is off
800: 
801:     When *hold* is *True*, subsequent plot commands will add elements to
802:     the current axes.  When *hold* is *False*, the current axes and
803:     figure will be cleared on the next plot command.
804: 
805:     '''
806: 
807:     fig = gcf()
808:     ax = fig.gca()
809: 
810:     if b is not None:
811:         b = bool(b)
812:     fig._hold = b
813:     ax._hold = b
814: 
815:     # b=None toggles the hold state, so let's get get the current hold
816:     # state; but should pyplot hold toggle the rc setting - me thinks
817:     # not
818:     b = ax._hold
819: 
820:     # The comment above looks ancient; and probably the line below,
821:     # contrary to the comment, is equally ancient.  It will trigger
822:     # a second warning, but "Oh, well...".
823:     rc('axes', hold=b)
824: 
825: @deprecated("2.0", message=_hold_msg)
826: def ishold():
827:     '''
828:     Return the hold status of the current axes.
829: 
830:     '''
831:     return gca()._hold
832: 
833: 
834: @deprecated("2.0", message=_hold_msg)
835: def over(func, *args, **kwargs):
836:     '''
837:     Call a function with hold(True).
838: 
839:     Calls::
840: 
841:       func(*args, **kwargs)
842: 
843:     with ``hold(True)`` and then restores the hold state.
844: 
845:     '''
846:     ax = gca()
847:     h = ax._hold
848:     ax._hold = True
849:     func(*args, **kwargs)
850:     ax._hold = h
851: 
852: ## Axes ##
853: 
854: 
855: def axes(*args, **kwargs):
856:     '''
857:     Add an axes to the figure.
858: 
859:     The axes is added at position *rect* specified by:
860: 
861:     - ``axes()`` by itself creates a default full ``subplot(111)`` window axis.
862: 
863:     - ``axes(rect, facecolor='w')`` where *rect* = [left, bottom, width,
864:       height] in normalized (0, 1) units.  *facecolor* is the background
865:       color for the axis, default white.
866: 
867:     - ``axes(h)`` where *h* is an axes instance makes *h* the current
868:       axis and the parent of *h* the current figure.
869:       An :class:`~matplotlib.axes.Axes` instance is returned.
870: 
871:     =========   ==============   ==============================================
872:     kwarg       Accepts          Description
873:     =========   ==============   ==============================================
874:     facecolor   color            the axes background color
875:     frameon     [True|False]     display the frame?
876:     sharex      otherax          current axes shares xaxis attribute
877:                                  with otherax
878:     sharey      otherax          current axes shares yaxis attribute
879:                                  with otherax
880:     polar       [True|False]     use a polar axes?
881:     aspect      [str | num]      ['equal', 'auto'] or a number.  If a number
882:                                  the ratio of x-unit/y-unit in screen-space.
883:                                  Also see
884:                                  :meth:`~matplotlib.axes.Axes.set_aspect`.
885:     =========   ==============   ==============================================
886: 
887:     Examples:
888: 
889:     * :file:`examples/pylab_examples/axes_demo.py` places custom axes.
890:     * :file:`examples/pylab_examples/shared_axis_demo.py` uses
891:       *sharex* and *sharey*.
892: 
893:     '''
894: 
895:     nargs = len(args)
896:     if len(args) == 0:
897:         return subplot(111, **kwargs)
898:     if nargs > 1:
899:         raise TypeError('Only one non keyword arg to axes allowed')
900:     arg = args[0]
901: 
902:     if isinstance(arg, Axes):
903:         sca(arg)
904:         a = arg
905:     else:
906:         rect = arg
907:         a = gcf().add_axes(rect, **kwargs)
908:     return a
909: 
910: 
911: def delaxes(*args):
912:     '''
913:     Remove an axes from the current figure.  If *ax*
914:     doesn't exist, an error will be raised.
915: 
916:     ``delaxes()``: delete the current axes
917:     '''
918:     if not len(args):
919:         ax = gca()
920:     else:
921:         ax = args[0]
922:     ret = gcf().delaxes(ax)
923:     return ret
924: 
925: 
926: def sca(ax):
927:     '''
928:     Set the current Axes instance to *ax*.
929: 
930:     The current Figure is updated to the parent of *ax*.
931:     '''
932:     managers = _pylab_helpers.Gcf.get_all_fig_managers()
933:     for m in managers:
934:         if ax in m.canvas.figure.axes:
935:             _pylab_helpers.Gcf.set_active(m)
936:             m.canvas.figure.sca(ax)
937:             return
938:     raise ValueError("Axes instance argument was not found in a figure.")
939: 
940: 
941: def gca(**kwargs):
942:     '''
943:     Get the current :class:`~matplotlib.axes.Axes` instance on the
944:     current figure matching the given keyword args, or create one.
945: 
946:     Examples
947:     --------
948:     To get the current polar axes on the current figure::
949: 
950:         plt.gca(projection='polar')
951: 
952:     If the current axes doesn't exist, or isn't a polar one, the appropriate
953:     axes will be created and then returned.
954: 
955:     See Also
956:     --------
957:     matplotlib.figure.Figure.gca : The figure's gca method.
958:     '''
959:     return gcf().gca(**kwargs)
960: 
961: # More ways of creating axes:
962: 
963: 
964: def subplot(*args, **kwargs):
965:     '''
966:     Return a subplot axes positioned by the given grid definition.
967: 
968:     Typical call signature::
969: 
970:       subplot(nrows, ncols, plot_number)
971: 
972:     Where *nrows* and *ncols* are used to notionally split the figure
973:     into ``nrows * ncols`` sub-axes, and *plot_number* is used to identify
974:     the particular subplot that this function is to create within the notional
975:     grid. *plot_number* starts at 1, increments across rows first and has a
976:     maximum of ``nrows * ncols``.
977: 
978:     In the case when *nrows*, *ncols* and *plot_number* are all less than 10,
979:     a convenience exists, such that the a 3 digit number can be given instead,
980:     where the hundreds represent *nrows*, the tens represent *ncols* and the
981:     units represent *plot_number*. For instance::
982: 
983:       subplot(211)
984: 
985:     produces a subaxes in a figure which represents the top plot (i.e. the
986:     first) in a 2 row by 1 column notional grid (no grid actually exists,
987:     but conceptually this is how the returned subplot has been positioned).
988: 
989:     .. note::
990: 
991:        Creating a subplot will delete any pre-existing subplot that overlaps
992:        with it beyond sharing a boundary::
993: 
994:           import matplotlib.pyplot as plt
995:           # plot a line, implicitly creating a subplot(111)
996:           plt.plot([1,2,3])
997:           # now create a subplot which represents the top plot of a grid
998:           # with 2 rows and 1 column. Since this subplot will overlap the
999:           # first, the plot (and its axes) previously created, will be removed
1000:           plt.subplot(211)
1001:           plt.plot(range(12))
1002:           plt.subplot(212, facecolor='y') # creates 2nd subplot with yellow background
1003: 
1004:        If you do not want this behavior, use the
1005:        :meth:`~matplotlib.figure.Figure.add_subplot` method or the
1006:        :func:`~matplotlib.pyplot.axes` function instead.
1007: 
1008:     Keyword arguments:
1009: 
1010:       *facecolor*:
1011:         The background color of the subplot, which can be any valid
1012:         color specifier.  See :mod:`matplotlib.colors` for more
1013:         information.
1014: 
1015:       *polar*:
1016:         A boolean flag indicating whether the subplot plot should be
1017:         a polar projection.  Defaults to *False*.
1018: 
1019:       *projection*:
1020:         A string giving the name of a custom projection to be used
1021:         for the subplot. This projection must have been previously
1022:         registered. See :mod:`matplotlib.projections`.
1023: 
1024:     .. seealso::
1025: 
1026:         :func:`~matplotlib.pyplot.axes`
1027:             For additional information on :func:`axes` and
1028:             :func:`subplot` keyword arguments.
1029: 
1030:         :file:`gallery/pie_and_polar_charts/polar_scatter.py`
1031:             For an example
1032: 
1033:     **Example:**
1034: 
1035:     .. plot:: gallery/subplots_axes_and_figures/subplot.py
1036: 
1037:     '''
1038:     # if subplot called without arguments, create subplot(1,1,1)
1039:     if len(args)==0:
1040:         args=(1,1,1)
1041: 
1042:     # This check was added because it is very easy to type
1043:     # subplot(1, 2, False) when subplots(1, 2, False) was intended
1044:     # (sharex=False, that is). In most cases, no error will
1045:     # ever occur, but mysterious behavior can result because what was
1046:     # intended to be the sharex argument is instead treated as a
1047:     # subplot index for subplot()
1048:     if len(args) >= 3 and isinstance(args[2], bool) :
1049:         warnings.warn("The subplot index argument to subplot() appears"
1050:                       " to be a boolean. Did you intend to use subplots()?")
1051: 
1052:     fig = gcf()
1053:     a = fig.add_subplot(*args, **kwargs)
1054:     bbox = a.bbox
1055:     byebye = []
1056:     for other in fig.axes:
1057:         if other==a: continue
1058:         if bbox.fully_overlaps(other.bbox):
1059:             byebye.append(other)
1060:     for ax in byebye: delaxes(ax)
1061: 
1062:     return a
1063: 
1064: 
1065: def subplots(nrows=1, ncols=1, sharex=False, sharey=False, squeeze=True,
1066:              subplot_kw=None, gridspec_kw=None, **fig_kw):
1067:     '''
1068:     Create a figure and a set of subplots
1069: 
1070:     This utility wrapper makes it convenient to create common layouts of
1071:     subplots, including the enclosing figure object, in a single call.
1072: 
1073:     Parameters
1074:     ----------
1075:     nrows, ncols : int, optional, default: 1
1076:         Number of rows/columns of the subplot grid.
1077: 
1078:     sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False
1079:         Controls sharing of properties among x (`sharex`) or y (`sharey`)
1080:         axes:
1081: 
1082:             - True or 'all': x- or y-axis will be shared among all
1083:               subplots.
1084:             - False or 'none': each subplot x- or y-axis will be
1085:               independent.
1086:             - 'row': each subplot row will share an x- or y-axis.
1087:             - 'col': each subplot column will share an x- or y-axis.
1088: 
1089:         When subplots have a shared x-axis along a column, only the x tick
1090:         labels of the bottom subplot are visible.  Similarly, when subplots
1091:         have a shared y-axis along a row, only the y tick labels of the first
1092:         column subplot are visible.
1093: 
1094:     squeeze : bool, optional, default: True
1095:         - If True, extra dimensions are squeezed out from the returned Axes
1096:           object:
1097: 
1098:             - if only one subplot is constructed (nrows=ncols=1), the
1099:               resulting single Axes object is returned as a scalar.
1100:             - for Nx1 or 1xN subplots, the returned object is a 1D numpy
1101:               object array of Axes objects are returned as numpy 1D arrays.
1102:             - for NxM, subplots with N>1 and M>1 are returned as a 2D arrays.
1103: 
1104:         - If False, no squeezing at all is done: the returned Axes object is
1105:           always a 2D array containing Axes instances, even if it ends up
1106:           being 1x1.
1107: 
1108:     subplot_kw : dict, optional
1109:         Dict with keywords passed to the
1110:         :meth:`~matplotlib.figure.Figure.add_subplot` call used to create each
1111:         subplot.
1112: 
1113:     gridspec_kw : dict, optional
1114:         Dict with keywords passed to the
1115:         :class:`~matplotlib.gridspec.GridSpec` constructor used to create the
1116:         grid the subplots are placed on.
1117: 
1118:     **fig_kw :
1119:         All additional keyword arguments are passed to the :func:`figure` call.
1120: 
1121:     Returns
1122:     -------
1123:     fig : :class:`matplotlib.figure.Figure` object
1124: 
1125:     ax : Axes object or array of Axes objects.
1126: 
1127:         ax can be either a single :class:`matplotlib.axes.Axes` object or an
1128:         array of Axes objects if more than one subplot was created.  The
1129:         dimensions of the resulting array can be controlled with the squeeze
1130:         keyword, see above.
1131: 
1132:     Examples
1133:     --------
1134:     First create some toy data:
1135: 
1136:     >>> x = np.linspace(0, 2*np.pi, 400)
1137:     >>> y = np.sin(x**2)
1138: 
1139:     Creates just a figure and only one subplot
1140: 
1141:     >>> fig, ax = plt.subplots()
1142:     >>> ax.plot(x, y)
1143:     >>> ax.set_title('Simple plot')
1144: 
1145:     Creates two subplots and unpacks the output array immediately
1146: 
1147:     >>> f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)
1148:     >>> ax1.plot(x, y)
1149:     >>> ax1.set_title('Sharing Y axis')
1150:     >>> ax2.scatter(x, y)
1151: 
1152:     Creates four polar axes, and accesses them through the returned array
1153: 
1154:     >>> fig, axes = plt.subplots(2, 2, subplot_kw=dict(polar=True))
1155:     >>> axes[0, 0].plot(x, y)
1156:     >>> axes[1, 1].scatter(x, y)
1157: 
1158:     Share a X axis with each column of subplots
1159: 
1160:     >>> plt.subplots(2, 2, sharex='col')
1161: 
1162:     Share a Y axis with each row of subplots
1163: 
1164:     >>> plt.subplots(2, 2, sharey='row')
1165: 
1166:     Share both X and Y axes with all subplots
1167: 
1168:     >>> plt.subplots(2, 2, sharex='all', sharey='all')
1169: 
1170:     Note that this is the same as
1171: 
1172:     >>> plt.subplots(2, 2, sharex=True, sharey=True)
1173: 
1174:     See Also
1175:     --------
1176:     figure
1177:     subplot
1178:     '''
1179:     fig = figure(**fig_kw)
1180:     axs = fig.subplots(nrows=nrows, ncols=ncols, sharex=sharex, sharey=sharey,
1181:                        squeeze=squeeze, subplot_kw=subplot_kw,
1182:                        gridspec_kw=gridspec_kw)
1183:     return fig, axs
1184: 
1185: 
1186: def subplot2grid(shape, loc, rowspan=1, colspan=1, fig=None, **kwargs):
1187:     '''
1188:     Create a subplot in a grid.  The grid is specified by *shape*, at
1189:     location of *loc*, spanning *rowspan*, *colspan* cells in each
1190:     direction.  The index for loc is 0-based.  The current figure will
1191:     be used unless *fig* is specified. ::
1192: 
1193:       subplot2grid(shape, loc, rowspan=1, colspan=1)
1194: 
1195:     is identical to ::
1196: 
1197:       gridspec=GridSpec(shape[0], shape[1])
1198:       subplotspec=gridspec.new_subplotspec(loc, rowspan, colspan)
1199:       subplot(subplotspec)
1200:     '''
1201: 
1202:     if fig is None:
1203:         fig = gcf()
1204: 
1205:     s1, s2 = shape
1206:     subplotspec = GridSpec(s1, s2).new_subplotspec(loc,
1207:                                                    rowspan=rowspan,
1208:                                                    colspan=colspan)
1209:     a = fig.add_subplot(subplotspec, **kwargs)
1210:     bbox = a.bbox
1211:     byebye = []
1212:     for other in fig.axes:
1213:         if other == a:
1214:             continue
1215:         if bbox.fully_overlaps(other.bbox):
1216:             byebye.append(other)
1217:     for ax in byebye:
1218:         delaxes(ax)
1219: 
1220:     return a
1221: 
1222: 
1223: def twinx(ax=None):
1224:     '''
1225:     Make a second axes that shares the *x*-axis.  The new axes will
1226:     overlay *ax* (or the current axes if *ax* is *None*).  The ticks
1227:     for *ax2* will be placed on the right, and the *ax2* instance is
1228:     returned.
1229: 
1230:     .. seealso::
1231: 
1232:        :file:`examples/api_examples/two_scales.py`
1233:           For an example
1234:     '''
1235:     if ax is None:
1236:         ax=gca()
1237:     ax1 = ax.twinx()
1238:     return ax1
1239: 
1240: 
1241: def twiny(ax=None):
1242:     '''
1243:     Make a second axes that shares the *y*-axis.  The new axis will
1244:     overlay *ax* (or the current axes if *ax* is *None*).  The ticks
1245:     for *ax2* will be placed on the top, and the *ax2* instance is
1246:     returned.
1247:     '''
1248:     if ax is None:
1249:         ax=gca()
1250:     ax1 = ax.twiny()
1251:     return ax1
1252: 
1253: 
1254: def subplots_adjust(*args, **kwargs):
1255:     '''
1256:     Tune the subplot layout.
1257: 
1258:     call signature::
1259: 
1260:       subplots_adjust(left=None, bottom=None, right=None, top=None,
1261:                       wspace=None, hspace=None)
1262: 
1263:     The parameter meanings (and suggested defaults) are::
1264: 
1265:       left  = 0.125  # the left side of the subplots of the figure
1266:       right = 0.9    # the right side of the subplots of the figure
1267:       bottom = 0.1   # the bottom of the subplots of the figure
1268:       top = 0.9      # the top of the subplots of the figure
1269:       wspace = 0.2   # the amount of width reserved for blank space between subplots,
1270:                      # expressed as a fraction of the average axis width
1271:       hspace = 0.2   # the amount of height reserved for white space between subplots,
1272:                      # expressed as a fraction of the average axis height
1273: 
1274:     The actual defaults are controlled by the rc file
1275:     '''
1276:     fig = gcf()
1277:     fig.subplots_adjust(*args, **kwargs)
1278: 
1279: 
1280: def subplot_tool(targetfig=None):
1281:     '''
1282:     Launch a subplot tool window for a figure.
1283: 
1284:     A :class:`matplotlib.widgets.SubplotTool` instance is returned.
1285:     '''
1286:     tbar = rcParams['toolbar'] # turn off the navigation toolbar for the toolfig
1287:     rcParams['toolbar'] = 'None'
1288:     if targetfig is None:
1289:         manager = get_current_fig_manager()
1290:         targetfig = manager.canvas.figure
1291:     else:
1292:         # find the manager for this figure
1293:         for manager in _pylab_helpers.Gcf._activeQue:
1294:             if manager.canvas.figure==targetfig: break
1295:         else: raise RuntimeError('Could not find manager for targetfig')
1296: 
1297:     toolfig = figure(figsize=(6,3))
1298:     toolfig.subplots_adjust(top=0.9)
1299:     ret =  SubplotTool(targetfig, toolfig)
1300:     rcParams['toolbar'] = tbar
1301:     _pylab_helpers.Gcf.set_active(manager)  # restore the current figure
1302:     return ret
1303: 
1304: 
1305: def tight_layout(pad=1.08, h_pad=None, w_pad=None, rect=None):
1306:     '''
1307:     Automatically adjust subplot parameters to give specified padding.
1308: 
1309:     Parameters:
1310: 
1311:     pad : float
1312:         padding between the figure edge and the edges of subplots, as a fraction of the font-size.
1313:     h_pad, w_pad : float
1314:         padding (height/width) between edges of adjacent subplots.
1315:         Defaults to `pad_inches`.
1316:     rect : if rect is given, it is interpreted as a rectangle
1317:         (left, bottom, right, top) in the normalized figure
1318:         coordinate that the whole subplots area (including
1319:         labels) will fit into. Default is (0, 0, 1, 1).
1320:     '''
1321: 
1322:     fig = gcf()
1323:     fig.tight_layout(pad=pad, h_pad=h_pad, w_pad=w_pad, rect=rect)
1324: 
1325: 
1326: def box(on=None):
1327:     '''
1328:     Turn the axes box on or off.  *on* may be a boolean or a string,
1329:     'on' or 'off'.
1330: 
1331:     If *on* is *None*, toggle state.
1332:     '''
1333:     ax = gca()
1334:     on = _string_to_bool(on)
1335:     if on is None:
1336:         on = not ax.get_frame_on()
1337:     ax.set_frame_on(on)
1338: 
1339: 
1340: def title(s, *args, **kwargs):
1341:     '''
1342:     Set a title of the current axes.
1343: 
1344:     Set one of the three available axes titles. The available titles are
1345:     positioned above the axes in the center, flush with the left edge,
1346:     and flush with the right edge.
1347: 
1348:     .. seealso::
1349:         See :func:`~matplotlib.pyplot.text` for adding text
1350:         to the current axes
1351: 
1352:     Parameters
1353:     ----------
1354:     label : str
1355:         Text to use for the title
1356: 
1357:     fontdict : dict
1358:         A dictionary controlling the appearance of the title text,
1359:         the default `fontdict` is:
1360: 
1361:             {'fontsize': rcParams['axes.titlesize'],
1362:             'fontweight' : rcParams['axes.titleweight'],
1363:             'verticalalignment': 'baseline',
1364:             'horizontalalignment': loc}
1365: 
1366:     loc : {'center', 'left', 'right'}, str, optional
1367:         Which title to set, defaults to 'center'
1368: 
1369:     Returns
1370:     -------
1371:     text : :class:`~matplotlib.text.Text`
1372:         The matplotlib text instance representing the title
1373: 
1374:     Other parameters
1375:     ----------------
1376:     kwargs : text properties
1377:         Other keyword arguments are text properties, see
1378:         :class:`~matplotlib.text.Text` for a list of valid text
1379:         properties.
1380: 
1381:     '''
1382:     return gca().set_title(s, *args, **kwargs)
1383: 
1384: ## Axis ##
1385: 
1386: 
1387: def axis(*v, **kwargs):
1388:     '''
1389:     Convenience method to get or set axis properties.
1390: 
1391:     Calling with no arguments::
1392: 
1393:       >>> axis()
1394: 
1395:     returns the current axes limits ``[xmin, xmax, ymin, ymax]``.::
1396: 
1397:       >>> axis(v)
1398: 
1399:     sets the min and max of the x and y axes, with
1400:     ``v = [xmin, xmax, ymin, ymax]``.::
1401: 
1402:       >>> axis('off')
1403: 
1404:     turns off the axis lines and labels.::
1405: 
1406:       >>> axis('equal')
1407: 
1408:     changes limits of *x* or *y* axis so that equal increments of *x*
1409:     and *y* have the same length; a circle is circular.::
1410: 
1411:       >>> axis('scaled')
1412: 
1413:     achieves the same result by changing the dimensions of the plot box instead
1414:     of the axis data limits.::
1415: 
1416:       >>> axis('tight')
1417: 
1418:     changes *x* and *y* axis limits such that all data is shown. If
1419:     all data is already shown, it will move it to the center of the
1420:     figure without modifying (*xmax* - *xmin*) or (*ymax* -
1421:     *ymin*). Note this is slightly different than in MATLAB.::
1422: 
1423:       >>> axis('image')
1424: 
1425:     is 'scaled' with the axis limits equal to the data limits.::
1426: 
1427:       >>> axis('auto')
1428: 
1429:     and::
1430: 
1431:       >>> axis('normal')
1432: 
1433:     are deprecated. They restore default behavior; axis limits are automatically
1434:     scaled to make the data fit comfortably within the plot box.
1435: 
1436:     if ``len(*v)==0``, you can pass in *xmin*, *xmax*, *ymin*, *ymax*
1437:     as kwargs selectively to alter just those limits without changing
1438:     the others.
1439: 
1440:       >>> axis('square')
1441: 
1442:     changes the limit ranges (*xmax*-*xmin*) and (*ymax*-*ymin*) of
1443:     the *x* and *y* axes to be the same, and have the same scaling,
1444:     resulting in a square plot.
1445: 
1446:     The xmin, xmax, ymin, ymax tuple is returned
1447: 
1448:     .. seealso::
1449: 
1450:         :func:`xlim`, :func:`ylim`
1451:            For setting the x- and y-limits individually.
1452:     '''
1453:     return gca().axis(*v, **kwargs)
1454: 
1455: 
1456: def xlabel(s, *args, **kwargs):
1457:     '''
1458:     Set the *x* axis label of the current axis.
1459: 
1460:     Default override is::
1461: 
1462:       override = {
1463:           'fontsize'            : 'small',
1464:           'verticalalignment'   : 'top',
1465:           'horizontalalignment' : 'center'
1466:           }
1467: 
1468:     .. seealso::
1469: 
1470:         :func:`~matplotlib.pyplot.text`
1471:             For information on how override and the optional args work
1472:     '''
1473:     return gca().set_xlabel(s, *args, **kwargs)
1474: 
1475: 
1476: def ylabel(s, *args, **kwargs):
1477:     '''
1478:     Set the *y* axis label of the current axis.
1479: 
1480:     Defaults override is::
1481: 
1482:         override = {
1483:            'fontsize'            : 'small',
1484:            'verticalalignment'   : 'center',
1485:            'horizontalalignment' : 'right',
1486:            'rotation'='vertical' : }
1487: 
1488:     .. seealso::
1489: 
1490:         :func:`~matplotlib.pyplot.text`
1491:             For information on how override and the optional args
1492:             work.
1493:     '''
1494:     return gca().set_ylabel(s, *args, **kwargs)
1495: 
1496: 
1497: def xlim(*args, **kwargs):
1498:     '''
1499:     Get or set the *x* limits of the current axes.
1500: 
1501:     ::
1502: 
1503:       xmin, xmax = xlim()   # return the current xlim
1504:       xlim( (xmin, xmax) )  # set the xlim to xmin, xmax
1505:       xlim( xmin, xmax )    # set the xlim to xmin, xmax
1506: 
1507:     If you do not specify args, you can pass the xmin and xmax as
1508:     kwargs, e.g.::
1509: 
1510:       xlim(xmax=3) # adjust the max leaving min unchanged
1511:       xlim(xmin=1) # adjust the min leaving max unchanged
1512: 
1513:     Setting limits turns autoscaling off for the x-axis.
1514: 
1515:     The new axis limits are returned as a length 2 tuple.
1516: 
1517:     '''
1518:     ax = gca()
1519:     if not args and not kwargs:
1520:         return ax.get_xlim()
1521:     ret = ax.set_xlim(*args, **kwargs)
1522:     return ret
1523: 
1524: 
1525: def ylim(*args, **kwargs):
1526:     '''
1527:     Get or set the *y*-limits of the current axes.
1528: 
1529:     ::
1530: 
1531:       ymin, ymax = ylim()   # return the current ylim
1532:       ylim( (ymin, ymax) )  # set the ylim to ymin, ymax
1533:       ylim( ymin, ymax )    # set the ylim to ymin, ymax
1534: 
1535:     If you do not specify args, you can pass the *ymin* and *ymax* as
1536:     kwargs, e.g.::
1537: 
1538:       ylim(ymax=3) # adjust the max leaving min unchanged
1539:       ylim(ymin=1) # adjust the min leaving max unchanged
1540: 
1541:     Setting limits turns autoscaling off for the y-axis.
1542: 
1543:     The new axis limits are returned as a length 2 tuple.
1544:     '''
1545:     ax = gca()
1546:     if not args and not kwargs:
1547:         return ax.get_ylim()
1548:     ret = ax.set_ylim(*args, **kwargs)
1549:     return ret
1550: 
1551: 
1552: @docstring.dedent_interpd
1553: def xscale(*args, **kwargs):
1554:     '''
1555:     Set the scaling of the *x*-axis.
1556: 
1557:     call signature::
1558: 
1559:       xscale(scale, **kwargs)
1560: 
1561:     The available scales are: %(scale)s
1562: 
1563:     Different keywords may be accepted, depending on the scale:
1564: 
1565:     %(scale_docs)s
1566:     '''
1567:     gca().set_xscale(*args, **kwargs)
1568: 
1569: 
1570: @docstring.dedent_interpd
1571: def yscale(*args, **kwargs):
1572:     '''
1573:     Set the scaling of the *y*-axis.
1574: 
1575:     call signature::
1576: 
1577:       yscale(scale, **kwargs)
1578: 
1579:     The available scales are: %(scale)s
1580: 
1581:     Different keywords may be accepted, depending on the scale:
1582: 
1583:     %(scale_docs)s
1584:     '''
1585:     gca().set_yscale(*args, **kwargs)
1586: 
1587: 
1588: def xticks(*args, **kwargs):
1589:     '''
1590:     Get or set the *x*-limits of the current tick locations and labels.
1591: 
1592:     ::
1593: 
1594:       # return locs, labels where locs is an array of tick locations and
1595:       # labels is an array of tick labels.
1596:       locs, labels = xticks()
1597: 
1598:       # set the locations of the xticks
1599:       xticks( arange(6) )
1600: 
1601:       # set the locations and labels of the xticks
1602:       xticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )
1603: 
1604:     The keyword args, if any, are :class:`~matplotlib.text.Text`
1605:     properties. For example, to rotate long labels::
1606: 
1607:       xticks( arange(12), calendar.month_name[1:13], rotation=17 )
1608:     '''
1609:     ax = gca()
1610: 
1611:     if len(args)==0:
1612:         locs = ax.get_xticks()
1613:         labels = ax.get_xticklabels()
1614:     elif len(args)==1:
1615:         locs = ax.set_xticks(args[0])
1616:         labels = ax.get_xticklabels()
1617:     elif len(args)==2:
1618:         locs = ax.set_xticks(args[0])
1619:         labels = ax.set_xticklabels(args[1], **kwargs)
1620:     else: raise TypeError('Illegal number of arguments to xticks')
1621:     if len(kwargs):
1622:         for l in labels:
1623:             l.update(kwargs)
1624: 
1625:     return locs, silent_list('Text xticklabel', labels)
1626: 
1627: 
1628: def yticks(*args, **kwargs):
1629:     '''
1630:     Get or set the *y*-limits of the current tick locations and labels.
1631: 
1632:     ::
1633: 
1634:       # return locs, labels where locs is an array of tick locations and
1635:       # labels is an array of tick labels.
1636:       locs, labels = yticks()
1637: 
1638:       # set the locations of the yticks
1639:       yticks( arange(6) )
1640: 
1641:       # set the locations and labels of the yticks
1642:       yticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )
1643: 
1644:     The keyword args, if any, are :class:`~matplotlib.text.Text`
1645:     properties. For example, to rotate long labels::
1646: 
1647:       yticks( arange(12), calendar.month_name[1:13], rotation=45 )
1648:     '''
1649:     ax = gca()
1650: 
1651:     if len(args)==0:
1652:         locs = ax.get_yticks()
1653:         labels = ax.get_yticklabels()
1654:     elif len(args)==1:
1655:         locs = ax.set_yticks(args[0])
1656:         labels = ax.get_yticklabels()
1657:     elif len(args)==2:
1658:         locs = ax.set_yticks(args[0])
1659:         labels = ax.set_yticklabels(args[1], **kwargs)
1660:     else: raise TypeError('Illegal number of arguments to yticks')
1661:     if len(kwargs):
1662:         for l in labels:
1663:             l.update(kwargs)
1664: 
1665: 
1666:     return ( locs,
1667:              silent_list('Text yticklabel', labels)
1668:              )
1669: 
1670: 
1671: def minorticks_on():
1672:     '''
1673:     Display minor ticks on the current plot.
1674: 
1675:     Displaying minor ticks reduces performance; turn them off using
1676:     minorticks_off() if drawing speed is a problem.
1677:     '''
1678:     gca().minorticks_on()
1679: 
1680: 
1681: def minorticks_off():
1682:     '''
1683:     Remove minor ticks from the current plot.
1684:     '''
1685:     gca().minorticks_off()
1686: 
1687: 
1688: def rgrids(*args, **kwargs):
1689:     '''
1690:     Get or set the radial gridlines on a polar plot.
1691: 
1692:     call signatures::
1693: 
1694:       lines, labels = rgrids()
1695:       lines, labels = rgrids(radii, labels=None, angle=22.5, **kwargs)
1696: 
1697:     When called with no arguments, :func:`rgrid` simply returns the
1698:     tuple (*lines*, *labels*), where *lines* is an array of radial
1699:     gridlines (:class:`~matplotlib.lines.Line2D` instances) and
1700:     *labels* is an array of tick labels
1701:     (:class:`~matplotlib.text.Text` instances). When called with
1702:     arguments, the labels will appear at the specified radial
1703:     distances and angles.
1704: 
1705:     *labels*, if not *None*, is a len(*radii*) list of strings of the
1706:     labels to use at each angle.
1707: 
1708:     If *labels* is None, the rformatter will be used
1709: 
1710:     Examples::
1711: 
1712:       # set the locations of the radial gridlines and labels
1713:       lines, labels = rgrids( (0.25, 0.5, 1.0) )
1714: 
1715:       # set the locations and labels of the radial gridlines and labels
1716:       lines, labels = rgrids( (0.25, 0.5, 1.0), ('Tom', 'Dick', 'Harry' )
1717: 
1718:     '''
1719:     ax = gca()
1720:     if not isinstance(ax, PolarAxes):
1721:         raise RuntimeError('rgrids only defined for polar axes')
1722:     if len(args)==0:
1723:         lines = ax.yaxis.get_gridlines()
1724:         labels = ax.yaxis.get_ticklabels()
1725:     else:
1726:         lines, labels = ax.set_rgrids(*args, **kwargs)
1727: 
1728:     return ( silent_list('Line2D rgridline', lines),
1729:              silent_list('Text rgridlabel', labels) )
1730: 
1731: 
1732: def thetagrids(*args, **kwargs):
1733:     '''
1734:     Get or set the theta locations of the gridlines in a polar plot.
1735: 
1736:     If no arguments are passed, return a tuple (*lines*, *labels*)
1737:     where *lines* is an array of radial gridlines
1738:     (:class:`~matplotlib.lines.Line2D` instances) and *labels* is an
1739:     array of tick labels (:class:`~matplotlib.text.Text` instances)::
1740: 
1741:       lines, labels = thetagrids()
1742: 
1743:     Otherwise the syntax is::
1744: 
1745:       lines, labels = thetagrids(angles, labels=None, fmt='%d', frac = 1.1)
1746: 
1747:     set the angles at which to place the theta grids (these gridlines
1748:     are equal along the theta dimension).
1749: 
1750:     *angles* is in degrees.
1751: 
1752:     *labels*, if not *None*, is a len(angles) list of strings of the
1753:     labels to use at each angle.
1754: 
1755:     If *labels* is *None*, the labels will be ``fmt%angle``.
1756: 
1757:     *frac* is the fraction of the polar axes radius at which to place
1758:     the label (1 is the edge). e.g., 1.05 is outside the axes and 0.95
1759:     is inside the axes.
1760: 
1761:     Return value is a list of tuples (*lines*, *labels*):
1762: 
1763:       - *lines* are :class:`~matplotlib.lines.Line2D` instances
1764: 
1765:       - *labels* are :class:`~matplotlib.text.Text` instances.
1766: 
1767:     Note that on input, the *labels* argument is a list of strings,
1768:     and on output it is a list of :class:`~matplotlib.text.Text`
1769:     instances.
1770: 
1771:     Examples::
1772: 
1773:       # set the locations of the radial gridlines and labels
1774:       lines, labels = thetagrids( range(45,360,90) )
1775: 
1776:       # set the locations and labels of the radial gridlines and labels
1777:       lines, labels = thetagrids( range(45,360,90), ('NE', 'NW', 'SW','SE') )
1778:     '''
1779:     ax = gca()
1780:     if not isinstance(ax, PolarAxes):
1781:         raise RuntimeError('rgrids only defined for polar axes')
1782:     if len(args)==0:
1783:         lines = ax.xaxis.get_ticklines()
1784:         labels = ax.xaxis.get_ticklabels()
1785:     else:
1786:         lines, labels = ax.set_thetagrids(*args, **kwargs)
1787: 
1788:     return (silent_list('Line2D thetagridline', lines),
1789:             silent_list('Text thetagridlabel', labels)
1790:             )
1791: 
1792: 
1793: ## Plotting Info ##
1794: 
1795: def plotting():
1796:     pass
1797: 
1798: 
1799: def get_plot_commands():
1800:     '''
1801:     Get a sorted list of all of the plotting commands.
1802:     '''
1803:     # This works by searching for all functions in this module and
1804:     # removing a few hard-coded exclusions, as well as all of the
1805:     # colormap-setting functions, and anything marked as private with
1806:     # a preceding underscore.
1807: 
1808:     import inspect
1809: 
1810:     exclude = {'colormaps', 'colors', 'connect', 'disconnect',
1811:                'get_plot_commands', 'get_current_fig_manager', 'ginput',
1812:                'plotting', 'waitforbuttonpress'}
1813:     exclude |= set(colormaps())
1814:     this_module = inspect.getmodule(get_plot_commands)
1815: 
1816:     commands = set()
1817:     for name, obj in list(six.iteritems(globals())):
1818:         if name.startswith('_') or name in exclude:
1819:             continue
1820:         if inspect.isfunction(obj) and inspect.getmodule(obj) is this_module:
1821:             commands.add(name)
1822: 
1823:     return sorted(commands)
1824: 
1825: 
1826: @deprecated('2.1')
1827: def colors():
1828:     '''
1829:     This is a do-nothing function to provide you with help on how
1830:     matplotlib handles colors.
1831: 
1832:     Commands which take color arguments can use several formats to
1833:     specify the colors.  For the basic built-in colors, you can use a
1834:     single letter
1835: 
1836:       =====   =======
1837:       Alias   Color
1838:       =====   =======
1839:       'b'     blue
1840:       'g'     green
1841:       'r'     red
1842:       'c'     cyan
1843:       'm'     magenta
1844:       'y'     yellow
1845:       'k'     black
1846:       'w'     white
1847:       =====   =======
1848: 
1849:     For a greater range of colors, you have two options.  You can
1850:     specify the color using an html hex string, as in::
1851: 
1852:       color = '#eeefff'
1853: 
1854:     or you can pass an R,G,B tuple, where each of R,G,B are in the
1855:     range [0,1].
1856: 
1857:     You can also use any legal html name for a color, for example::
1858: 
1859:       color = 'red'
1860:       color = 'burlywood'
1861:       color = 'chartreuse'
1862: 
1863:     The example below creates a subplot with a dark
1864:     slate gray background::
1865: 
1866:        subplot(111, facecolor=(0.1843, 0.3098, 0.3098))
1867: 
1868:     Here is an example that creates a pale turquoise title::
1869: 
1870:       title('Is this the best color?', color='#afeeee')
1871: 
1872:     '''
1873:     pass
1874: 
1875: 
1876: def colormaps():
1877:     '''
1878:     Matplotlib provides a number of colormaps, and others can be added using
1879:     :func:`~matplotlib.cm.register_cmap`.  This function documents the built-in
1880:     colormaps, and will also return a list of all registered colormaps if called.
1881: 
1882:     You can set the colormap for an image, pcolor, scatter, etc,
1883:     using a keyword argument::
1884: 
1885:       imshow(X, cmap=cm.hot)
1886: 
1887:     or using the :func:`set_cmap` function::
1888: 
1889:       imshow(X)
1890:       pyplot.set_cmap('hot')
1891:       pyplot.set_cmap('jet')
1892: 
1893:     In interactive mode, :func:`set_cmap` will update the colormap post-hoc,
1894:     allowing you to see which one works best for your data.
1895: 
1896:     All built-in colormaps can be reversed by appending ``_r``: For instance,
1897:     ``gray_r`` is the reverse of ``gray``.
1898: 
1899:     There are several common color schemes used in visualization:
1900: 
1901:     Sequential schemes
1902:       for unipolar data that progresses from low to high
1903:     Diverging schemes
1904:       for bipolar data that emphasizes positive or negative deviations from a
1905:       central value
1906:     Cyclic schemes
1907:       meant for plotting values that wrap around at the
1908:       endpoints, such as phase angle, wind direction, or time of day
1909:     Qualitative schemes
1910:       for nominal data that has no inherent ordering, where color is used
1911:       only to distinguish categories
1912: 
1913:     Matplotlib ships with 4 perceptually uniform color maps which are
1914:     the recommended color maps for sequential data:
1915: 
1916:       =========   ===================================================
1917:       Colormap    Description
1918:       =========   ===================================================
1919:       inferno     perceptually uniform shades of black-red-yellow
1920:       magma       perceptually uniform shades of black-red-white
1921:       plasma      perceptually uniform shades of blue-red-yellow
1922:       viridis     perceptually uniform shades of blue-green-yellow
1923:       =========   ===================================================
1924: 
1925:     The following colormaps are based on the `ColorBrewer
1926:     <http://colorbrewer2.org>`_ color specifications and designs developed by
1927:     Cynthia Brewer:
1928: 
1929:     ColorBrewer Diverging (luminance is highest at the midpoint, and
1930:     decreases towards differently-colored endpoints):
1931: 
1932:       ========  ===================================
1933:       Colormap  Description
1934:       ========  ===================================
1935:       BrBG      brown, white, blue-green
1936:       PiYG      pink, white, yellow-green
1937:       PRGn      purple, white, green
1938:       PuOr      orange, white, purple
1939:       RdBu      red, white, blue
1940:       RdGy      red, white, gray
1941:       RdYlBu    red, yellow, blue
1942:       RdYlGn    red, yellow, green
1943:       Spectral  red, orange, yellow, green, blue
1944:       ========  ===================================
1945: 
1946:     ColorBrewer Sequential (luminance decreases monotonically):
1947: 
1948:       ========  ====================================
1949:       Colormap  Description
1950:       ========  ====================================
1951:       Blues     white to dark blue
1952:       BuGn      white, light blue, dark green
1953:       BuPu      white, light blue, dark purple
1954:       GnBu      white, light green, dark blue
1955:       Greens    white to dark green
1956:       Greys     white to black (not linear)
1957:       Oranges   white, orange, dark brown
1958:       OrRd      white, orange, dark red
1959:       PuBu      white, light purple, dark blue
1960:       PuBuGn    white, light purple, dark green
1961:       PuRd      white, light purple, dark red
1962:       Purples   white to dark purple
1963:       RdPu      white, pink, dark purple
1964:       Reds      white to dark red
1965:       YlGn      light yellow, dark green
1966:       YlGnBu    light yellow, light green, dark blue
1967:       YlOrBr    light yellow, orange, dark brown
1968:       YlOrRd    light yellow, orange, dark red
1969:       ========  ====================================
1970: 
1971:     ColorBrewer Qualitative:
1972: 
1973:     (For plotting nominal data, :class:`ListedColormap` is used,
1974:     not :class:`LinearSegmentedColormap`.  Different sets of colors are
1975:     recommended for different numbers of categories.)
1976: 
1977:     * Accent
1978:     * Dark2
1979:     * Paired
1980:     * Pastel1
1981:     * Pastel2
1982:     * Set1
1983:     * Set2
1984:     * Set3
1985: 
1986:     A set of colormaps derived from those of the same name provided
1987:     with Matlab are also included:
1988: 
1989:       =========   =======================================================
1990:       Colormap    Description
1991:       =========   =======================================================
1992:       autumn      sequential linearly-increasing shades of red-orange-yellow
1993:       bone        sequential increasing black-white color map with
1994:                   a tinge of blue, to emulate X-ray film
1995:       cool        linearly-decreasing shades of cyan-magenta
1996:       copper      sequential increasing shades of black-copper
1997:       flag        repetitive red-white-blue-black pattern (not cyclic at
1998:                   endpoints)
1999:       gray        sequential linearly-increasing black-to-white
2000:                   grayscale
2001:       hot         sequential black-red-yellow-white, to emulate blackbody
2002:                   radiation from an object at increasing temperatures
2003:       hsv         cyclic red-yellow-green-cyan-blue-magenta-red, formed
2004:                   by changing the hue component in the HSV color space
2005:       jet         a spectral map with dark endpoints, blue-cyan-yellow-red;
2006:                   based on a fluid-jet simulation by NCSA [#]_
2007:       pink        sequential increasing pastel black-pink-white, meant
2008:                   for sepia tone colorization of photographs
2009:       prism       repetitive red-yellow-green-blue-purple-...-green pattern
2010:                   (not cyclic at endpoints)
2011:       spring      linearly-increasing shades of magenta-yellow
2012:       summer      sequential linearly-increasing shades of green-yellow
2013:       winter      linearly-increasing shades of blue-green
2014:       =========   =======================================================
2015: 
2016:     A set of palettes from the `Yorick scientific visualisation
2017:     package <https://dhmunro.github.io/yorick-doc/>`_, an evolution of
2018:     the GIST package, both by David H. Munro are included:
2019: 
2020:       ============  =======================================================
2021:       Colormap      Description
2022:       ============  =======================================================
2023:       gist_earth    mapmaker's colors from dark blue deep ocean to green
2024:                     lowlands to brown highlands to white mountains
2025:       gist_heat     sequential increasing black-red-orange-white, to emulate
2026:                     blackbody radiation from an iron bar as it grows hotter
2027:       gist_ncar     pseudo-spectral black-blue-green-yellow-red-purple-white
2028:                     colormap from National Center for Atmospheric
2029:                     Research [#]_
2030:       gist_rainbow  runs through the colors in spectral order from red to
2031:                     violet at full saturation (like *hsv* but not cyclic)
2032:       gist_stern    "Stern special" color table from Interactive Data
2033:                     Language software
2034:       ============  =======================================================
2035: 
2036: 
2037:     Other miscellaneous schemes:
2038: 
2039:       ============= =======================================================
2040:       Colormap      Description
2041:       ============= =======================================================
2042:       afmhot        sequential black-orange-yellow-white blackbody
2043:                     spectrum, commonly used in atomic force microscopy
2044:       brg           blue-red-green
2045:       bwr           diverging blue-white-red
2046:       coolwarm      diverging blue-gray-red, meant to avoid issues with 3D
2047:                     shading, color blindness, and ordering of colors [#]_
2048:       CMRmap        "Default colormaps on color images often reproduce to
2049:                     confusing grayscale images. The proposed colormap
2050:                     maintains an aesthetically pleasing color image that
2051:                     automatically reproduces to a monotonic grayscale with
2052:                     discrete, quantifiable saturation levels." [#]_
2053:       cubehelix     Unlike most other color schemes cubehelix was designed
2054:                     by D.A. Green to be monotonically increasing in terms
2055:                     of perceived brightness. Also, when printed on a black
2056:                     and white postscript printer, the scheme results in a
2057:                     greyscale with monotonically increasing brightness.
2058:                     This color scheme is named cubehelix because the r,g,b
2059:                     values produced can be visualised as a squashed helix
2060:                     around the diagonal in the r,g,b color cube.
2061:       gnuplot       gnuplot's traditional pm3d scheme
2062:                     (black-blue-red-yellow)
2063:       gnuplot2      sequential color printable as gray
2064:                     (black-blue-violet-yellow-white)
2065:       ocean         green-blue-white
2066:       rainbow       spectral purple-blue-green-yellow-orange-red colormap
2067:                     with diverging luminance
2068:       seismic       diverging blue-white-red
2069:       nipy_spectral black-purple-blue-green-yellow-red-white spectrum,
2070:                     originally from the Neuroimaging in Python project
2071:       terrain       mapmaker's colors, blue-green-yellow-brown-white,
2072:                     originally from IGOR Pro
2073:       ============= =======================================================
2074: 
2075:     The following colormaps are redundant and may be removed in future
2076:     versions.  It's recommended to use the names in the descriptions
2077:     instead, which produce identical output:
2078: 
2079:       =========  =======================================================
2080:       Colormap   Description
2081:       =========  =======================================================
2082:       gist_gray  identical to *gray*
2083:       gist_yarg  identical to *gray_r*
2084:       binary     identical to *gray_r*
2085:       spectral   identical to *nipy_spectral* [#]_
2086:       =========  =======================================================
2087: 
2088:     .. rubric:: Footnotes
2089: 
2090:     .. [#] Rainbow colormaps, ``jet`` in particular, are considered a poor
2091:       choice for scientific visualization by many researchers: `Rainbow Color
2092:       Map (Still) Considered Harmful
2093:       <http://ieeexplore.ieee.org/document/4118486/?arnumber=4118486>`_
2094: 
2095:     .. [#] Resembles "BkBlAqGrYeOrReViWh200" from NCAR Command
2096:       Language. See `Color Table Gallery
2097:       <https://www.ncl.ucar.edu/Document/Graphics/color_table_gallery.shtml>`_
2098: 
2099:     .. [#] See `Diverging Color Maps for Scientific Visualization
2100:       <http://www.kennethmoreland.com/color-maps/>`_ by Kenneth Moreland.
2101: 
2102:     .. [#] See `A Color Map for Effective Black-and-White Rendering of
2103:       Color-Scale Images
2104:       <https://www.mathworks.com/matlabcentral/fileexchange/2662-cmrmap-m>`_
2105:       by Carey Rappaport
2106: 
2107:     .. [#] Changed to distinguish from ColorBrewer's *Spectral* map.
2108:       :func:`spectral` still works, but
2109:       ``set_cmap('nipy_spectral')`` is recommended for clarity.
2110: 
2111: 
2112:     '''
2113:     return sorted(cm.cmap_d)
2114: 
2115: 
2116: def _setup_pyplot_info_docstrings():
2117:     '''
2118:     Generates the plotting and docstring.
2119: 
2120:     These must be done after the entire module is imported, so it is
2121:     called from the end of this module, which is generated by
2122:     boilerplate.py.
2123:     '''
2124:     # Generate the plotting docstring
2125:     import re
2126: 
2127:     def pad(s, l):
2128:         '''Pad string *s* to length *l*.'''
2129:         if l < len(s):
2130:             return s[:l]
2131:         return s + ' ' * (l - len(s))
2132: 
2133:     commands = get_plot_commands()
2134: 
2135:     first_sentence = re.compile(r"(?:\s*).+?\.(?:\s+|$)", flags=re.DOTALL)
2136: 
2137:     # Collect the first sentence of the docstring for all of the
2138:     # plotting commands.
2139:     rows = []
2140:     max_name = 0
2141:     max_summary = 0
2142:     for name in commands:
2143:         doc = globals()[name].__doc__
2144:         summary = ''
2145:         if doc is not None:
2146:             match = first_sentence.match(doc)
2147:             if match is not None:
2148:                 summary = match.group(0).strip().replace('\n', ' ')
2149:         name = '`%s`' % name
2150:         rows.append([name, summary])
2151:         max_name = max(max_name, len(name))
2152:         max_summary = max(max_summary, len(summary))
2153: 
2154:     lines = []
2155:     sep = '=' * max_name + ' ' + '=' * max_summary
2156:     lines.append(sep)
2157:     lines.append(' '.join([pad("Function", max_name),
2158:                            pad("Description", max_summary)]))
2159:     lines.append(sep)
2160:     for name, summary in rows:
2161:         lines.append(' '.join([pad(name, max_name),
2162:                                pad(summary, max_summary)]))
2163:     lines.append(sep)
2164: 
2165:     plotting.__doc__ = '\n'.join(lines)
2166: 
2167: ## Plotting part 1: manually generated functions and wrappers ##
2168: 
2169: def colorbar(mappable=None, cax=None, ax=None, **kw):
2170:     if mappable is None:
2171:         mappable = gci()
2172:         if mappable is None:
2173:             raise RuntimeError('No mappable was found to use for colorbar '
2174:                                'creation. First define a mappable such as '
2175:                                'an image (with imshow) or a contour set ('
2176:                                'with contourf).')
2177:     if ax is None:
2178:         ax = gca()
2179: 
2180:     ret = gcf().colorbar(mappable, cax = cax, ax=ax, **kw)
2181:     return ret
2182: colorbar.__doc__ = matplotlib.colorbar.colorbar_doc
2183: 
2184: 
2185: def clim(vmin=None, vmax=None):
2186:     '''
2187:     Set the color limits of the current image.
2188: 
2189:     To apply clim to all axes images do::
2190: 
2191:       clim(0, 0.5)
2192: 
2193:     If either *vmin* or *vmax* is None, the image min/max respectively
2194:     will be used for color scaling.
2195: 
2196:     If you want to set the clim of multiple images,
2197:     use, for example::
2198: 
2199:       for im in gca().get_images():
2200:           im.set_clim(0, 0.05)
2201: 
2202:     '''
2203:     im = gci()
2204:     if im is None:
2205:         raise RuntimeError('You must first define an image, e.g., with imshow')
2206: 
2207:     im.set_clim(vmin, vmax)
2208: 
2209: 
2210: def set_cmap(cmap):
2211:     '''
2212:     Set the default colormap.  Applies to the current image if any.
2213:     See help(colormaps) for more information.
2214: 
2215:     *cmap* must be a :class:`~matplotlib.colors.Colormap` instance, or
2216:     the name of a registered colormap.
2217: 
2218:     See :func:`matplotlib.cm.register_cmap` and
2219:     :func:`matplotlib.cm.get_cmap`.
2220:     '''
2221:     cmap = cm.get_cmap(cmap)
2222: 
2223:     rc('image', cmap=cmap.name)
2224:     im = gci()
2225: 
2226:     if im is not None:
2227:         im.set_cmap(cmap)
2228: 
2229: 
2230: 
2231: @docstring.copy_dedent(_imread)
2232: def imread(*args, **kwargs):
2233:     return _imread(*args, **kwargs)
2234: 
2235: 
2236: @docstring.copy_dedent(_imsave)
2237: def imsave(*args, **kwargs):
2238:     return _imsave(*args, **kwargs)
2239: 
2240: 
2241: def matshow(A, fignum=None, **kw):
2242:     '''
2243:     Display an array as a matrix in a new figure window.
2244: 
2245:     The origin is set at the upper left hand corner and rows (first
2246:     dimension of the array) are displayed horizontally.  The aspect
2247:     ratio of the figure window is that of the array, unless this would
2248:     make an excessively short or narrow figure.
2249: 
2250:     Tick labels for the xaxis are placed on top.
2251: 
2252:     With the exception of *fignum*, keyword arguments are passed to
2253:     :func:`~matplotlib.pyplot.imshow`.  You may set the *origin*
2254:     kwarg to "lower" if you want the first row in the array to be
2255:     at the bottom instead of the top.
2256: 
2257: 
2258:     *fignum*: [ None | integer | False ]
2259:       By default, :func:`matshow` creates a new figure window with
2260:       automatic numbering.  If *fignum* is given as an integer, the
2261:       created figure will use this figure number.  Because of how
2262:       :func:`matshow` tries to set the figure aspect ratio to be the
2263:       one of the array, if you provide the number of an already
2264:       existing figure, strange things may happen.
2265: 
2266:       If *fignum* is *False* or 0, a new figure window will **NOT** be created.
2267:     '''
2268:     A = np.asanyarray(A)
2269:     if fignum is False or fignum is 0:
2270:         ax = gca()
2271:     else:
2272:         # Extract actual aspect ratio of array and make appropriately sized figure
2273:         fig = figure(fignum, figsize=figaspect(A))
2274:         ax  = fig.add_axes([0.15, 0.09, 0.775, 0.775])
2275: 
2276:     im = ax.matshow(A, **kw)
2277:     sci(im)
2278: 
2279:     return im
2280: 
2281: 
2282: def polar(*args, **kwargs):
2283:     '''
2284:     Make a polar plot.
2285: 
2286:     call signature::
2287: 
2288:       polar(theta, r, **kwargs)
2289: 
2290:     Multiple *theta*, *r* arguments are supported, with format
2291:     strings, as in :func:`~matplotlib.pyplot.plot`.
2292: 
2293:     '''
2294:     # If an axis already exists, check if it has a polar projection
2295:     if gcf().get_axes():
2296:         if not isinstance(gca(), PolarAxes):
2297:             warnings.warn('Trying to create polar plot on an axis that does '
2298:                           'not have a polar projection.')
2299:     ax = gca(polar=True)
2300:     ret = ax.plot(*args, **kwargs)
2301:     return ret
2302: 
2303: 
2304: def plotfile(fname, cols=(0,), plotfuncs=None,
2305:              comments='#', skiprows=0, checkrows=5, delimiter=',',
2306:              names=None, subplots=True, newfig=True, **kwargs):
2307:     '''
2308:     Plot the data in a file.
2309: 
2310:     *cols* is a sequence of column identifiers to plot.  An identifier
2311:     is either an int or a string.  If it is an int, it indicates the
2312:     column number.  If it is a string, it indicates the column header.
2313:     matplotlib will make column headers lower case, replace spaces with
2314:     underscores, and remove all illegal characters; so ``'Adj Close*'``
2315:     will have name ``'adj_close'``.
2316: 
2317:     - If len(*cols*) == 1, only that column will be plotted on the *y* axis.
2318: 
2319:     - If len(*cols*) > 1, the first element will be an identifier for
2320:       data for the *x* axis and the remaining elements will be the
2321:       column indexes for multiple subplots if *subplots* is *True*
2322:       (the default), or for lines in a single subplot if *subplots*
2323:       is *False*.
2324: 
2325:     *plotfuncs*, if not *None*, is a dictionary mapping identifier to
2326:     an :class:`~matplotlib.axes.Axes` plotting function as a string.
2327:     Default is 'plot', other choices are 'semilogy', 'fill', 'bar',
2328:     etc.  You must use the same type of identifier in the *cols*
2329:     vector as you use in the *plotfuncs* dictionary, e.g., integer
2330:     column numbers in both or column names in both. If *subplots*
2331:     is *False*, then including any function such as 'semilogy'
2332:     that changes the axis scaling will set the scaling for all
2333:     columns.
2334: 
2335:     *comments*, *skiprows*, *checkrows*, *delimiter*, and *names*
2336:     are all passed on to :func:`matplotlib.pylab.csv2rec` to
2337:     load the data into a record array.
2338: 
2339:     If *newfig* is *True*, the plot always will be made in a new figure;
2340:     if *False*, it will be made in the current figure if one exists,
2341:     else in a new figure.
2342: 
2343:     kwargs are passed on to plotting functions.
2344: 
2345:     Example usage::
2346: 
2347:       # plot the 2nd and 4th column against the 1st in two subplots
2348:       plotfile(fname, (0,1,3))
2349: 
2350:       # plot using column names; specify an alternate plot type for volume
2351:       plotfile(fname, ('date', 'volume', 'adj_close'),
2352:                                     plotfuncs={'volume': 'semilogy'})
2353: 
2354:     Note: plotfile is intended as a convenience for quickly plotting
2355:     data from flat files; it is not intended as an alternative
2356:     interface to general plotting with pyplot or matplotlib.
2357:     '''
2358: 
2359:     if newfig:
2360:         fig = figure()
2361:     else:
2362:         fig = gcf()
2363: 
2364:     if len(cols)<1:
2365:         raise ValueError('must have at least one column of data')
2366: 
2367:     if plotfuncs is None:
2368:         plotfuncs = dict()
2369:     r = mlab.csv2rec(fname, comments=comments, skiprows=skiprows,
2370:                      checkrows=checkrows, delimiter=delimiter, names=names)
2371: 
2372:     def getname_val(identifier):
2373:         'return the name and column data for identifier'
2374:         if isinstance(identifier, six.string_types):
2375:             return identifier, r[identifier]
2376:         elif is_numlike(identifier):
2377:             name = r.dtype.names[int(identifier)]
2378:             return name, r[name]
2379:         else:
2380:             raise TypeError('identifier must be a string or integer')
2381: 
2382:     xname, x = getname_val(cols[0])
2383:     ynamelist = []
2384: 
2385:     if len(cols)==1:
2386:         ax1 = fig.add_subplot(1,1,1)
2387:         funcname = plotfuncs.get(cols[0], 'plot')
2388:         func = getattr(ax1, funcname)
2389:         func(x, **kwargs)
2390:         ax1.set_ylabel(xname)
2391:     else:
2392:         N = len(cols)
2393:         for i in range(1,N):
2394:             if subplots:
2395:                 if i==1:
2396:                     ax = ax1 = fig.add_subplot(N-1,1,i)
2397:                 else:
2398:                     ax = fig.add_subplot(N-1,1,i, sharex=ax1)
2399:             elif i==1:
2400:                 ax = fig.add_subplot(1,1,1)
2401: 
2402:             yname, y = getname_val(cols[i])
2403:             ynamelist.append(yname)
2404: 
2405:             funcname = plotfuncs.get(cols[i], 'plot')
2406:             func = getattr(ax, funcname)
2407: 
2408:             func(x, y, **kwargs)
2409:             if subplots:
2410:                 ax.set_ylabel(yname)
2411:             if ax.is_last_row():
2412:                 ax.set_xlabel(xname)
2413:             else:
2414:                 ax.set_xlabel('')
2415: 
2416:     if not subplots:
2417:         ax.legend(ynamelist, loc='best')
2418: 
2419:     if xname=='date':
2420:         fig.autofmt_xdate()
2421: 
2422: 
2423: def _autogen_docstring(base):
2424:     '''Autogenerated wrappers will get their docstring from a base function
2425:     with an addendum.'''
2426:     #msg = "\n\nAdditional kwargs: hold = [True|False] overrides default hold state"
2427:     msg = ''
2428:     addendum = docstring.Appender(msg, '\n\n')
2429:     return lambda func: addendum(docstring.copy_dedent(base)(func))
2430: 
2431: # This function cannot be generated by boilerplate.py because it may
2432: # return an image or a line.
2433: @_autogen_docstring(Axes.spy)
2434: def spy(Z, precision=0, marker=None, markersize=None, aspect='equal', **kwargs):
2435:     ax = gca()
2436:     hold = kwargs.pop('hold', None)
2437:     # allow callers to override the hold state by passing hold=True|False
2438:     washold = ax._hold
2439: 
2440:     if hold is not None:
2441:         ax._hold = hold
2442:         from matplotlib.cbook import mplDeprecation
2443:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2444:                       mplDeprecation)
2445:     try:
2446:         ret = ax.spy(Z, precision, marker, markersize, aspect, **kwargs)
2447:     finally:
2448:         ax._hold = washold
2449:     if isinstance(ret, cm.ScalarMappable):
2450:         sci(ret)
2451:     return ret
2452: 
2453: # just to be safe.  Interactive mode can be turned on without
2454: # calling `plt.ion()` so register it again here.
2455: # This is safe because multiple calls to `install_repl_displayhook`
2456: # are no-ops and the registered function respect `mpl.is_interactive()`
2457: # to determine if they should trigger a draw.
2458: install_repl_displayhook()
2459: 
2460: ################# REMAINING CONTENT GENERATED BY boilerplate.py ##############
2461: 
2462: 
2463: # This function was autogenerated by boilerplate.py.  Do not edit as
2464: # changes will be lost
2465: @_autogen_docstring(Axes.acorr)
2466: def acorr(x, hold=None, data=None, **kwargs):
2467:     ax = gca()
2468:     # Deprecated: allow callers to override the hold state
2469:     # by passing hold=True|False
2470:     washold = ax._hold
2471: 
2472:     if hold is not None:
2473:         ax._hold = hold
2474:         from matplotlib.cbook import mplDeprecation
2475:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2476:                       mplDeprecation)
2477:     try:
2478:         ret = ax.acorr(x, data=data, **kwargs)
2479:     finally:
2480:         ax._hold = washold
2481: 
2482:     return ret
2483: 
2484: # This function was autogenerated by boilerplate.py.  Do not edit as
2485: # changes will be lost
2486: @_autogen_docstring(Axes.angle_spectrum)
2487: def angle_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None,
2488:                    hold=None, data=None, **kwargs):
2489:     ax = gca()
2490:     # Deprecated: allow callers to override the hold state
2491:     # by passing hold=True|False
2492:     washold = ax._hold
2493: 
2494:     if hold is not None:
2495:         ax._hold = hold
2496:         from matplotlib.cbook import mplDeprecation
2497:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2498:                       mplDeprecation)
2499:     try:
2500:         ret = ax.angle_spectrum(x, Fs=Fs, Fc=Fc, window=window, pad_to=pad_to,
2501:                                 sides=sides, data=data, **kwargs)
2502:     finally:
2503:         ax._hold = washold
2504: 
2505:     return ret
2506: 
2507: # This function was autogenerated by boilerplate.py.  Do not edit as
2508: # changes will be lost
2509: @_autogen_docstring(Axes.arrow)
2510: def arrow(x, y, dx, dy, hold=None, **kwargs):
2511:     ax = gca()
2512:     # Deprecated: allow callers to override the hold state
2513:     # by passing hold=True|False
2514:     washold = ax._hold
2515: 
2516:     if hold is not None:
2517:         ax._hold = hold
2518:         from matplotlib.cbook import mplDeprecation
2519:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2520:                       mplDeprecation)
2521:     try:
2522:         ret = ax.arrow(x, y, dx, dy, **kwargs)
2523:     finally:
2524:         ax._hold = washold
2525: 
2526:     return ret
2527: 
2528: # This function was autogenerated by boilerplate.py.  Do not edit as
2529: # changes will be lost
2530: @_autogen_docstring(Axes.axhline)
2531: def axhline(y=0, xmin=0, xmax=1, hold=None, **kwargs):
2532:     ax = gca()
2533:     # Deprecated: allow callers to override the hold state
2534:     # by passing hold=True|False
2535:     washold = ax._hold
2536: 
2537:     if hold is not None:
2538:         ax._hold = hold
2539:         from matplotlib.cbook import mplDeprecation
2540:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2541:                       mplDeprecation)
2542:     try:
2543:         ret = ax.axhline(y=y, xmin=xmin, xmax=xmax, **kwargs)
2544:     finally:
2545:         ax._hold = washold
2546: 
2547:     return ret
2548: 
2549: # This function was autogenerated by boilerplate.py.  Do not edit as
2550: # changes will be lost
2551: @_autogen_docstring(Axes.axhspan)
2552: def axhspan(ymin, ymax, xmin=0, xmax=1, hold=None, **kwargs):
2553:     ax = gca()
2554:     # Deprecated: allow callers to override the hold state
2555:     # by passing hold=True|False
2556:     washold = ax._hold
2557: 
2558:     if hold is not None:
2559:         ax._hold = hold
2560:         from matplotlib.cbook import mplDeprecation
2561:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2562:                       mplDeprecation)
2563:     try:
2564:         ret = ax.axhspan(ymin, ymax, xmin=xmin, xmax=xmax, **kwargs)
2565:     finally:
2566:         ax._hold = washold
2567: 
2568:     return ret
2569: 
2570: # This function was autogenerated by boilerplate.py.  Do not edit as
2571: # changes will be lost
2572: @_autogen_docstring(Axes.axvline)
2573: def axvline(x=0, ymin=0, ymax=1, hold=None, **kwargs):
2574:     ax = gca()
2575:     # Deprecated: allow callers to override the hold state
2576:     # by passing hold=True|False
2577:     washold = ax._hold
2578: 
2579:     if hold is not None:
2580:         ax._hold = hold
2581:         from matplotlib.cbook import mplDeprecation
2582:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2583:                       mplDeprecation)
2584:     try:
2585:         ret = ax.axvline(x=x, ymin=ymin, ymax=ymax, **kwargs)
2586:     finally:
2587:         ax._hold = washold
2588: 
2589:     return ret
2590: 
2591: # This function was autogenerated by boilerplate.py.  Do not edit as
2592: # changes will be lost
2593: @_autogen_docstring(Axes.axvspan)
2594: def axvspan(xmin, xmax, ymin=0, ymax=1, hold=None, **kwargs):
2595:     ax = gca()
2596:     # Deprecated: allow callers to override the hold state
2597:     # by passing hold=True|False
2598:     washold = ax._hold
2599: 
2600:     if hold is not None:
2601:         ax._hold = hold
2602:         from matplotlib.cbook import mplDeprecation
2603:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2604:                       mplDeprecation)
2605:     try:
2606:         ret = ax.axvspan(xmin, xmax, ymin=ymin, ymax=ymax, **kwargs)
2607:     finally:
2608:         ax._hold = washold
2609: 
2610:     return ret
2611: 
2612: # This function was autogenerated by boilerplate.py.  Do not edit as
2613: # changes will be lost
2614: @_autogen_docstring(Axes.bar)
2615: def bar(*args, **kwargs):
2616:     ax = gca()
2617:     # Deprecated: allow callers to override the hold state
2618:     # by passing hold=True|False
2619:     washold = ax._hold
2620:     hold = kwargs.pop('hold', None)
2621:     if hold is not None:
2622:         ax._hold = hold
2623:         from matplotlib.cbook import mplDeprecation
2624:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2625:                       mplDeprecation)
2626:     try:
2627:         ret = ax.bar(*args, **kwargs)
2628:     finally:
2629:         ax._hold = washold
2630: 
2631:     return ret
2632: 
2633: # This function was autogenerated by boilerplate.py.  Do not edit as
2634: # changes will be lost
2635: @_autogen_docstring(Axes.barh)
2636: def barh(*args, **kwargs):
2637:     ax = gca()
2638:     # Deprecated: allow callers to override the hold state
2639:     # by passing hold=True|False
2640:     washold = ax._hold
2641:     hold = kwargs.pop('hold', None)
2642:     if hold is not None:
2643:         ax._hold = hold
2644:         from matplotlib.cbook import mplDeprecation
2645:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2646:                       mplDeprecation)
2647:     try:
2648:         ret = ax.barh(*args, **kwargs)
2649:     finally:
2650:         ax._hold = washold
2651: 
2652:     return ret
2653: 
2654: # This function was autogenerated by boilerplate.py.  Do not edit as
2655: # changes will be lost
2656: @_autogen_docstring(Axes.broken_barh)
2657: def broken_barh(xranges, yrange, hold=None, data=None, **kwargs):
2658:     ax = gca()
2659:     # Deprecated: allow callers to override the hold state
2660:     # by passing hold=True|False
2661:     washold = ax._hold
2662: 
2663:     if hold is not None:
2664:         ax._hold = hold
2665:         from matplotlib.cbook import mplDeprecation
2666:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2667:                       mplDeprecation)
2668:     try:
2669:         ret = ax.broken_barh(xranges, yrange, data=data, **kwargs)
2670:     finally:
2671:         ax._hold = washold
2672: 
2673:     return ret
2674: 
2675: # This function was autogenerated by boilerplate.py.  Do not edit as
2676: # changes will be lost
2677: @_autogen_docstring(Axes.boxplot)
2678: def boxplot(x, notch=None, sym=None, vert=None, whis=None, positions=None,
2679:             widths=None, patch_artist=None, bootstrap=None, usermedians=None,
2680:             conf_intervals=None, meanline=None, showmeans=None, showcaps=None,
2681:             showbox=None, showfliers=None, boxprops=None, labels=None,
2682:             flierprops=None, medianprops=None, meanprops=None, capprops=None,
2683:             whiskerprops=None, manage_xticks=True, autorange=False, zorder=None,
2684:             hold=None, data=None):
2685:     ax = gca()
2686:     # Deprecated: allow callers to override the hold state
2687:     # by passing hold=True|False
2688:     washold = ax._hold
2689: 
2690:     if hold is not None:
2691:         ax._hold = hold
2692:         from matplotlib.cbook import mplDeprecation
2693:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2694:                       mplDeprecation)
2695:     try:
2696:         ret = ax.boxplot(x, notch=notch, sym=sym, vert=vert, whis=whis,
2697:                          positions=positions, widths=widths,
2698:                          patch_artist=patch_artist, bootstrap=bootstrap,
2699:                          usermedians=usermedians,
2700:                          conf_intervals=conf_intervals, meanline=meanline,
2701:                          showmeans=showmeans, showcaps=showcaps,
2702:                          showbox=showbox, showfliers=showfliers,
2703:                          boxprops=boxprops, labels=labels,
2704:                          flierprops=flierprops, medianprops=medianprops,
2705:                          meanprops=meanprops, capprops=capprops,
2706:                          whiskerprops=whiskerprops,
2707:                          manage_xticks=manage_xticks, autorange=autorange,
2708:                          zorder=zorder, data=data)
2709:     finally:
2710:         ax._hold = washold
2711: 
2712:     return ret
2713: 
2714: # This function was autogenerated by boilerplate.py.  Do not edit as
2715: # changes will be lost
2716: @_autogen_docstring(Axes.cohere)
2717: def cohere(x, y, NFFT=256, Fs=2, Fc=0, detrend=mlab.detrend_none,
2718:            window=mlab.window_hanning, noverlap=0, pad_to=None, sides='default',
2719:            scale_by_freq=None, hold=None, data=None, **kwargs):
2720:     ax = gca()
2721:     # Deprecated: allow callers to override the hold state
2722:     # by passing hold=True|False
2723:     washold = ax._hold
2724: 
2725:     if hold is not None:
2726:         ax._hold = hold
2727:         from matplotlib.cbook import mplDeprecation
2728:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2729:                       mplDeprecation)
2730:     try:
2731:         ret = ax.cohere(x, y, NFFT=NFFT, Fs=Fs, Fc=Fc, detrend=detrend,
2732:                         window=window, noverlap=noverlap, pad_to=pad_to,
2733:                         sides=sides, scale_by_freq=scale_by_freq, data=data,
2734:                         **kwargs)
2735:     finally:
2736:         ax._hold = washold
2737: 
2738:     return ret
2739: 
2740: # This function was autogenerated by boilerplate.py.  Do not edit as
2741: # changes will be lost
2742: @_autogen_docstring(Axes.clabel)
2743: def clabel(CS, *args, **kwargs):
2744:     ax = gca()
2745:     # Deprecated: allow callers to override the hold state
2746:     # by passing hold=True|False
2747:     washold = ax._hold
2748:     hold = kwargs.pop('hold', None)
2749:     if hold is not None:
2750:         ax._hold = hold
2751:         from matplotlib.cbook import mplDeprecation
2752:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2753:                       mplDeprecation)
2754:     try:
2755:         ret = ax.clabel(CS, *args, **kwargs)
2756:     finally:
2757:         ax._hold = washold
2758: 
2759:     return ret
2760: 
2761: # This function was autogenerated by boilerplate.py.  Do not edit as
2762: # changes will be lost
2763: @_autogen_docstring(Axes.contour)
2764: def contour(*args, **kwargs):
2765:     ax = gca()
2766:     # Deprecated: allow callers to override the hold state
2767:     # by passing hold=True|False
2768:     washold = ax._hold
2769:     hold = kwargs.pop('hold', None)
2770:     if hold is not None:
2771:         ax._hold = hold
2772:         from matplotlib.cbook import mplDeprecation
2773:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2774:                       mplDeprecation)
2775:     try:
2776:         ret = ax.contour(*args, **kwargs)
2777:     finally:
2778:         ax._hold = washold
2779:     if ret._A is not None: sci(ret)
2780:     return ret
2781: 
2782: # This function was autogenerated by boilerplate.py.  Do not edit as
2783: # changes will be lost
2784: @_autogen_docstring(Axes.contourf)
2785: def contourf(*args, **kwargs):
2786:     ax = gca()
2787:     # Deprecated: allow callers to override the hold state
2788:     # by passing hold=True|False
2789:     washold = ax._hold
2790:     hold = kwargs.pop('hold', None)
2791:     if hold is not None:
2792:         ax._hold = hold
2793:         from matplotlib.cbook import mplDeprecation
2794:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2795:                       mplDeprecation)
2796:     try:
2797:         ret = ax.contourf(*args, **kwargs)
2798:     finally:
2799:         ax._hold = washold
2800:     if ret._A is not None: sci(ret)
2801:     return ret
2802: 
2803: # This function was autogenerated by boilerplate.py.  Do not edit as
2804: # changes will be lost
2805: @_autogen_docstring(Axes.csd)
2806: def csd(x, y, NFFT=None, Fs=None, Fc=None, detrend=None, window=None,
2807:         noverlap=None, pad_to=None, sides=None, scale_by_freq=None,
2808:         return_line=None, hold=None, data=None, **kwargs):
2809:     ax = gca()
2810:     # Deprecated: allow callers to override the hold state
2811:     # by passing hold=True|False
2812:     washold = ax._hold
2813: 
2814:     if hold is not None:
2815:         ax._hold = hold
2816:         from matplotlib.cbook import mplDeprecation
2817:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2818:                       mplDeprecation)
2819:     try:
2820:         ret = ax.csd(x, y, NFFT=NFFT, Fs=Fs, Fc=Fc, detrend=detrend,
2821:                      window=window, noverlap=noverlap, pad_to=pad_to,
2822:                      sides=sides, scale_by_freq=scale_by_freq,
2823:                      return_line=return_line, data=data, **kwargs)
2824:     finally:
2825:         ax._hold = washold
2826: 
2827:     return ret
2828: 
2829: # This function was autogenerated by boilerplate.py.  Do not edit as
2830: # changes will be lost
2831: @_autogen_docstring(Axes.errorbar)
2832: def errorbar(x, y, yerr=None, xerr=None, fmt='', ecolor=None, elinewidth=None,
2833:              capsize=None, barsabove=False, lolims=False, uplims=False,
2834:              xlolims=False, xuplims=False, errorevery=1, capthick=None,
2835:              hold=None, data=None, **kwargs):
2836:     ax = gca()
2837:     # Deprecated: allow callers to override the hold state
2838:     # by passing hold=True|False
2839:     washold = ax._hold
2840: 
2841:     if hold is not None:
2842:         ax._hold = hold
2843:         from matplotlib.cbook import mplDeprecation
2844:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2845:                       mplDeprecation)
2846:     try:
2847:         ret = ax.errorbar(x, y, yerr=yerr, xerr=xerr, fmt=fmt, ecolor=ecolor,
2848:                           elinewidth=elinewidth, capsize=capsize,
2849:                           barsabove=barsabove, lolims=lolims, uplims=uplims,
2850:                           xlolims=xlolims, xuplims=xuplims,
2851:                           errorevery=errorevery, capthick=capthick, data=data,
2852:                           **kwargs)
2853:     finally:
2854:         ax._hold = washold
2855: 
2856:     return ret
2857: 
2858: # This function was autogenerated by boilerplate.py.  Do not edit as
2859: # changes will be lost
2860: @_autogen_docstring(Axes.eventplot)
2861: def eventplot(positions, orientation='horizontal', lineoffsets=1, linelengths=1,
2862:               linewidths=None, colors=None, linestyles='solid', hold=None,
2863:               data=None, **kwargs):
2864:     ax = gca()
2865:     # Deprecated: allow callers to override the hold state
2866:     # by passing hold=True|False
2867:     washold = ax._hold
2868: 
2869:     if hold is not None:
2870:         ax._hold = hold
2871:         from matplotlib.cbook import mplDeprecation
2872:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2873:                       mplDeprecation)
2874:     try:
2875:         ret = ax.eventplot(positions, orientation=orientation,
2876:                            lineoffsets=lineoffsets, linelengths=linelengths,
2877:                            linewidths=linewidths, colors=colors,
2878:                            linestyles=linestyles, data=data, **kwargs)
2879:     finally:
2880:         ax._hold = washold
2881: 
2882:     return ret
2883: 
2884: # This function was autogenerated by boilerplate.py.  Do not edit as
2885: # changes will be lost
2886: @_autogen_docstring(Axes.fill)
2887: def fill(*args, **kwargs):
2888:     ax = gca()
2889:     # Deprecated: allow callers to override the hold state
2890:     # by passing hold=True|False
2891:     washold = ax._hold
2892:     hold = kwargs.pop('hold', None)
2893:     if hold is not None:
2894:         ax._hold = hold
2895:         from matplotlib.cbook import mplDeprecation
2896:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2897:                       mplDeprecation)
2898:     try:
2899:         ret = ax.fill(*args, **kwargs)
2900:     finally:
2901:         ax._hold = washold
2902: 
2903:     return ret
2904: 
2905: # This function was autogenerated by boilerplate.py.  Do not edit as
2906: # changes will be lost
2907: @_autogen_docstring(Axes.fill_between)
2908: def fill_between(x, y1, y2=0, where=None, interpolate=False, step=None,
2909:                  hold=None, data=None, **kwargs):
2910:     ax = gca()
2911:     # Deprecated: allow callers to override the hold state
2912:     # by passing hold=True|False
2913:     washold = ax._hold
2914: 
2915:     if hold is not None:
2916:         ax._hold = hold
2917:         from matplotlib.cbook import mplDeprecation
2918:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2919:                       mplDeprecation)
2920:     try:
2921:         ret = ax.fill_between(x, y1, y2=y2, where=where,
2922:                               interpolate=interpolate, step=step, data=data,
2923:                               **kwargs)
2924:     finally:
2925:         ax._hold = washold
2926: 
2927:     return ret
2928: 
2929: # This function was autogenerated by boilerplate.py.  Do not edit as
2930: # changes will be lost
2931: @_autogen_docstring(Axes.fill_betweenx)
2932: def fill_betweenx(y, x1, x2=0, where=None, step=None, interpolate=False,
2933:                   hold=None, data=None, **kwargs):
2934:     ax = gca()
2935:     # Deprecated: allow callers to override the hold state
2936:     # by passing hold=True|False
2937:     washold = ax._hold
2938: 
2939:     if hold is not None:
2940:         ax._hold = hold
2941:         from matplotlib.cbook import mplDeprecation
2942:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2943:                       mplDeprecation)
2944:     try:
2945:         ret = ax.fill_betweenx(y, x1, x2=x2, where=where, step=step,
2946:                                interpolate=interpolate, data=data, **kwargs)
2947:     finally:
2948:         ax._hold = washold
2949: 
2950:     return ret
2951: 
2952: # This function was autogenerated by boilerplate.py.  Do not edit as
2953: # changes will be lost
2954: @_autogen_docstring(Axes.hexbin)
2955: def hexbin(x, y, C=None, gridsize=100, bins=None, xscale='linear',
2956:            yscale='linear', extent=None, cmap=None, norm=None, vmin=None,
2957:            vmax=None, alpha=None, linewidths=None, edgecolors='face',
2958:            reduce_C_function=np.mean, mincnt=None, marginals=False, hold=None,
2959:            data=None, **kwargs):
2960:     ax = gca()
2961:     # Deprecated: allow callers to override the hold state
2962:     # by passing hold=True|False
2963:     washold = ax._hold
2964: 
2965:     if hold is not None:
2966:         ax._hold = hold
2967:         from matplotlib.cbook import mplDeprecation
2968:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2969:                       mplDeprecation)
2970:     try:
2971:         ret = ax.hexbin(x, y, C=C, gridsize=gridsize, bins=bins, xscale=xscale,
2972:                         yscale=yscale, extent=extent, cmap=cmap, norm=norm,
2973:                         vmin=vmin, vmax=vmax, alpha=alpha,
2974:                         linewidths=linewidths, edgecolors=edgecolors,
2975:                         reduce_C_function=reduce_C_function, mincnt=mincnt,
2976:                         marginals=marginals, data=data, **kwargs)
2977:     finally:
2978:         ax._hold = washold
2979:     sci(ret)
2980:     return ret
2981: 
2982: # This function was autogenerated by boilerplate.py.  Do not edit as
2983: # changes will be lost
2984: @_autogen_docstring(Axes.hist)
2985: def hist(x, bins=None, range=None, density=None, weights=None, cumulative=False,
2986:          bottom=None, histtype='bar', align='mid', orientation='vertical',
2987:          rwidth=None, log=False, color=None, label=None, stacked=False,
2988:          normed=None, hold=None, data=None, **kwargs):
2989:     ax = gca()
2990:     # Deprecated: allow callers to override the hold state
2991:     # by passing hold=True|False
2992:     washold = ax._hold
2993: 
2994:     if hold is not None:
2995:         ax._hold = hold
2996:         from matplotlib.cbook import mplDeprecation
2997:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
2998:                       mplDeprecation)
2999:     try:
3000:         ret = ax.hist(x, bins=bins, range=range, density=density,
3001:                       weights=weights, cumulative=cumulative, bottom=bottom,
3002:                       histtype=histtype, align=align, orientation=orientation,
3003:                       rwidth=rwidth, log=log, color=color, label=label,
3004:                       stacked=stacked, normed=normed, data=data, **kwargs)
3005:     finally:
3006:         ax._hold = washold
3007: 
3008:     return ret
3009: 
3010: # This function was autogenerated by boilerplate.py.  Do not edit as
3011: # changes will be lost
3012: @_autogen_docstring(Axes.hist2d)
3013: def hist2d(x, y, bins=10, range=None, normed=False, weights=None, cmin=None,
3014:            cmax=None, hold=None, data=None, **kwargs):
3015:     ax = gca()
3016:     # Deprecated: allow callers to override the hold state
3017:     # by passing hold=True|False
3018:     washold = ax._hold
3019: 
3020:     if hold is not None:
3021:         ax._hold = hold
3022:         from matplotlib.cbook import mplDeprecation
3023:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3024:                       mplDeprecation)
3025:     try:
3026:         ret = ax.hist2d(x, y, bins=bins, range=range, normed=normed,
3027:                         weights=weights, cmin=cmin, cmax=cmax, data=data,
3028:                         **kwargs)
3029:     finally:
3030:         ax._hold = washold
3031:     sci(ret[-1])
3032:     return ret
3033: 
3034: # This function was autogenerated by boilerplate.py.  Do not edit as
3035: # changes will be lost
3036: @_autogen_docstring(Axes.hlines)
3037: def hlines(y, xmin, xmax, colors='k', linestyles='solid', label='', hold=None,
3038:            data=None, **kwargs):
3039:     ax = gca()
3040:     # Deprecated: allow callers to override the hold state
3041:     # by passing hold=True|False
3042:     washold = ax._hold
3043: 
3044:     if hold is not None:
3045:         ax._hold = hold
3046:         from matplotlib.cbook import mplDeprecation
3047:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3048:                       mplDeprecation)
3049:     try:
3050:         ret = ax.hlines(y, xmin, xmax, colors=colors, linestyles=linestyles,
3051:                         label=label, data=data, **kwargs)
3052:     finally:
3053:         ax._hold = washold
3054: 
3055:     return ret
3056: 
3057: # This function was autogenerated by boilerplate.py.  Do not edit as
3058: # changes will be lost
3059: @_autogen_docstring(Axes.imshow)
3060: def imshow(X, cmap=None, norm=None, aspect=None, interpolation=None, alpha=None,
3061:            vmin=None, vmax=None, origin=None, extent=None, shape=None,
3062:            filternorm=1, filterrad=4.0, imlim=None, resample=None, url=None,
3063:            hold=None, data=None, **kwargs):
3064:     ax = gca()
3065:     # Deprecated: allow callers to override the hold state
3066:     # by passing hold=True|False
3067:     washold = ax._hold
3068: 
3069:     if hold is not None:
3070:         ax._hold = hold
3071:         from matplotlib.cbook import mplDeprecation
3072:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3073:                       mplDeprecation)
3074:     try:
3075:         ret = ax.imshow(X, cmap=cmap, norm=norm, aspect=aspect,
3076:                         interpolation=interpolation, alpha=alpha, vmin=vmin,
3077:                         vmax=vmax, origin=origin, extent=extent, shape=shape,
3078:                         filternorm=filternorm, filterrad=filterrad,
3079:                         imlim=imlim, resample=resample, url=url, data=data,
3080:                         **kwargs)
3081:     finally:
3082:         ax._hold = washold
3083:     sci(ret)
3084:     return ret
3085: 
3086: # This function was autogenerated by boilerplate.py.  Do not edit as
3087: # changes will be lost
3088: @_autogen_docstring(Axes.loglog)
3089: def loglog(*args, **kwargs):
3090:     ax = gca()
3091:     # Deprecated: allow callers to override the hold state
3092:     # by passing hold=True|False
3093:     washold = ax._hold
3094:     hold = kwargs.pop('hold', None)
3095:     if hold is not None:
3096:         ax._hold = hold
3097:         from matplotlib.cbook import mplDeprecation
3098:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3099:                       mplDeprecation)
3100:     try:
3101:         ret = ax.loglog(*args, **kwargs)
3102:     finally:
3103:         ax._hold = washold
3104: 
3105:     return ret
3106: 
3107: # This function was autogenerated by boilerplate.py.  Do not edit as
3108: # changes will be lost
3109: @_autogen_docstring(Axes.magnitude_spectrum)
3110: def magnitude_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None,
3111:                        sides=None, scale=None, hold=None, data=None, **kwargs):
3112:     ax = gca()
3113:     # Deprecated: allow callers to override the hold state
3114:     # by passing hold=True|False
3115:     washold = ax._hold
3116: 
3117:     if hold is not None:
3118:         ax._hold = hold
3119:         from matplotlib.cbook import mplDeprecation
3120:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3121:                       mplDeprecation)
3122:     try:
3123:         ret = ax.magnitude_spectrum(x, Fs=Fs, Fc=Fc, window=window,
3124:                                     pad_to=pad_to, sides=sides, scale=scale,
3125:                                     data=data, **kwargs)
3126:     finally:
3127:         ax._hold = washold
3128: 
3129:     return ret
3130: 
3131: # This function was autogenerated by boilerplate.py.  Do not edit as
3132: # changes will be lost
3133: @_autogen_docstring(Axes.pcolor)
3134: def pcolor(*args, **kwargs):
3135:     ax = gca()
3136:     # Deprecated: allow callers to override the hold state
3137:     # by passing hold=True|False
3138:     washold = ax._hold
3139:     hold = kwargs.pop('hold', None)
3140:     if hold is not None:
3141:         ax._hold = hold
3142:         from matplotlib.cbook import mplDeprecation
3143:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3144:                       mplDeprecation)
3145:     try:
3146:         ret = ax.pcolor(*args, **kwargs)
3147:     finally:
3148:         ax._hold = washold
3149:     sci(ret)
3150:     return ret
3151: 
3152: # This function was autogenerated by boilerplate.py.  Do not edit as
3153: # changes will be lost
3154: @_autogen_docstring(Axes.pcolormesh)
3155: def pcolormesh(*args, **kwargs):
3156:     ax = gca()
3157:     # Deprecated: allow callers to override the hold state
3158:     # by passing hold=True|False
3159:     washold = ax._hold
3160:     hold = kwargs.pop('hold', None)
3161:     if hold is not None:
3162:         ax._hold = hold
3163:         from matplotlib.cbook import mplDeprecation
3164:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3165:                       mplDeprecation)
3166:     try:
3167:         ret = ax.pcolormesh(*args, **kwargs)
3168:     finally:
3169:         ax._hold = washold
3170:     sci(ret)
3171:     return ret
3172: 
3173: # This function was autogenerated by boilerplate.py.  Do not edit as
3174: # changes will be lost
3175: @_autogen_docstring(Axes.phase_spectrum)
3176: def phase_spectrum(x, Fs=None, Fc=None, window=None, pad_to=None, sides=None,
3177:                    hold=None, data=None, **kwargs):
3178:     ax = gca()
3179:     # Deprecated: allow callers to override the hold state
3180:     # by passing hold=True|False
3181:     washold = ax._hold
3182: 
3183:     if hold is not None:
3184:         ax._hold = hold
3185:         from matplotlib.cbook import mplDeprecation
3186:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3187:                       mplDeprecation)
3188:     try:
3189:         ret = ax.phase_spectrum(x, Fs=Fs, Fc=Fc, window=window, pad_to=pad_to,
3190:                                 sides=sides, data=data, **kwargs)
3191:     finally:
3192:         ax._hold = washold
3193: 
3194:     return ret
3195: 
3196: # This function was autogenerated by boilerplate.py.  Do not edit as
3197: # changes will be lost
3198: @_autogen_docstring(Axes.pie)
3199: def pie(x, explode=None, labels=None, colors=None, autopct=None,
3200:         pctdistance=0.6, shadow=False, labeldistance=1.1, startangle=None,
3201:         radius=None, counterclock=True, wedgeprops=None, textprops=None,
3202:         center=(0, 0), frame=False, rotatelabels=False, hold=None, data=None):
3203:     ax = gca()
3204:     # Deprecated: allow callers to override the hold state
3205:     # by passing hold=True|False
3206:     washold = ax._hold
3207: 
3208:     if hold is not None:
3209:         ax._hold = hold
3210:         from matplotlib.cbook import mplDeprecation
3211:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3212:                       mplDeprecation)
3213:     try:
3214:         ret = ax.pie(x, explode=explode, labels=labels, colors=colors,
3215:                      autopct=autopct, pctdistance=pctdistance, shadow=shadow,
3216:                      labeldistance=labeldistance, startangle=startangle,
3217:                      radius=radius, counterclock=counterclock,
3218:                      wedgeprops=wedgeprops, textprops=textprops, center=center,
3219:                      frame=frame, rotatelabels=rotatelabels, data=data)
3220:     finally:
3221:         ax._hold = washold
3222: 
3223:     return ret
3224: 
3225: # This function was autogenerated by boilerplate.py.  Do not edit as
3226: # changes will be lost
3227: @_autogen_docstring(Axes.plot)
3228: def plot(*args, **kwargs):
3229:     ax = gca()
3230:     # Deprecated: allow callers to override the hold state
3231:     # by passing hold=True|False
3232:     washold = ax._hold
3233:     hold = kwargs.pop('hold', None)
3234:     if hold is not None:
3235:         ax._hold = hold
3236:         from matplotlib.cbook import mplDeprecation
3237:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3238:                       mplDeprecation)
3239:     try:
3240:         ret = ax.plot(*args, **kwargs)
3241:     finally:
3242:         ax._hold = washold
3243: 
3244:     return ret
3245: 
3246: # This function was autogenerated by boilerplate.py.  Do not edit as
3247: # changes will be lost
3248: @_autogen_docstring(Axes.plot_date)
3249: def plot_date(x, y, fmt='o', tz=None, xdate=True, ydate=False, hold=None,
3250:               data=None, **kwargs):
3251:     ax = gca()
3252:     # Deprecated: allow callers to override the hold state
3253:     # by passing hold=True|False
3254:     washold = ax._hold
3255: 
3256:     if hold is not None:
3257:         ax._hold = hold
3258:         from matplotlib.cbook import mplDeprecation
3259:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3260:                       mplDeprecation)
3261:     try:
3262:         ret = ax.plot_date(x, y, fmt=fmt, tz=tz, xdate=xdate, ydate=ydate,
3263:                            data=data, **kwargs)
3264:     finally:
3265:         ax._hold = washold
3266: 
3267:     return ret
3268: 
3269: # This function was autogenerated by boilerplate.py.  Do not edit as
3270: # changes will be lost
3271: @_autogen_docstring(Axes.psd)
3272: def psd(x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None,
3273:         noverlap=None, pad_to=None, sides=None, scale_by_freq=None,
3274:         return_line=None, hold=None, data=None, **kwargs):
3275:     ax = gca()
3276:     # Deprecated: allow callers to override the hold state
3277:     # by passing hold=True|False
3278:     washold = ax._hold
3279: 
3280:     if hold is not None:
3281:         ax._hold = hold
3282:         from matplotlib.cbook import mplDeprecation
3283:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3284:                       mplDeprecation)
3285:     try:
3286:         ret = ax.psd(x, NFFT=NFFT, Fs=Fs, Fc=Fc, detrend=detrend,
3287:                      window=window, noverlap=noverlap, pad_to=pad_to,
3288:                      sides=sides, scale_by_freq=scale_by_freq,
3289:                      return_line=return_line, data=data, **kwargs)
3290:     finally:
3291:         ax._hold = washold
3292: 
3293:     return ret
3294: 
3295: # This function was autogenerated by boilerplate.py.  Do not edit as
3296: # changes will be lost
3297: @_autogen_docstring(Axes.quiver)
3298: def quiver(*args, **kw):
3299:     ax = gca()
3300:     # Deprecated: allow callers to override the hold state
3301:     # by passing hold=True|False
3302:     washold = ax._hold
3303:     hold = kw.pop('hold', None)
3304:     if hold is not None:
3305:         ax._hold = hold
3306:         from matplotlib.cbook import mplDeprecation
3307:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3308:                       mplDeprecation)
3309:     try:
3310:         ret = ax.quiver(*args, **kw)
3311:     finally:
3312:         ax._hold = washold
3313:     sci(ret)
3314:     return ret
3315: 
3316: # This function was autogenerated by boilerplate.py.  Do not edit as
3317: # changes will be lost
3318: @_autogen_docstring(Axes.quiverkey)
3319: def quiverkey(*args, **kw):
3320:     ax = gca()
3321:     # Deprecated: allow callers to override the hold state
3322:     # by passing hold=True|False
3323:     washold = ax._hold
3324:     hold = kw.pop('hold', None)
3325:     if hold is not None:
3326:         ax._hold = hold
3327:         from matplotlib.cbook import mplDeprecation
3328:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3329:                       mplDeprecation)
3330:     try:
3331:         ret = ax.quiverkey(*args, **kw)
3332:     finally:
3333:         ax._hold = washold
3334: 
3335:     return ret
3336: 
3337: # This function was autogenerated by boilerplate.py.  Do not edit as
3338: # changes will be lost
3339: @_autogen_docstring(Axes.scatter)
3340: def scatter(x, y, s=None, c=None, marker=None, cmap=None, norm=None, vmin=None,
3341:             vmax=None, alpha=None, linewidths=None, verts=None, edgecolors=None,
3342:             hold=None, data=None, **kwargs):
3343:     ax = gca()
3344:     # Deprecated: allow callers to override the hold state
3345:     # by passing hold=True|False
3346:     washold = ax._hold
3347: 
3348:     if hold is not None:
3349:         ax._hold = hold
3350:         from matplotlib.cbook import mplDeprecation
3351:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3352:                       mplDeprecation)
3353:     try:
3354:         ret = ax.scatter(x, y, s=s, c=c, marker=marker, cmap=cmap, norm=norm,
3355:                          vmin=vmin, vmax=vmax, alpha=alpha,
3356:                          linewidths=linewidths, verts=verts,
3357:                          edgecolors=edgecolors, data=data, **kwargs)
3358:     finally:
3359:         ax._hold = washold
3360:     sci(ret)
3361:     return ret
3362: 
3363: # This function was autogenerated by boilerplate.py.  Do not edit as
3364: # changes will be lost
3365: @_autogen_docstring(Axes.semilogx)
3366: def semilogx(*args, **kwargs):
3367:     ax = gca()
3368:     # Deprecated: allow callers to override the hold state
3369:     # by passing hold=True|False
3370:     washold = ax._hold
3371:     hold = kwargs.pop('hold', None)
3372:     if hold is not None:
3373:         ax._hold = hold
3374:         from matplotlib.cbook import mplDeprecation
3375:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3376:                       mplDeprecation)
3377:     try:
3378:         ret = ax.semilogx(*args, **kwargs)
3379:     finally:
3380:         ax._hold = washold
3381: 
3382:     return ret
3383: 
3384: # This function was autogenerated by boilerplate.py.  Do not edit as
3385: # changes will be lost
3386: @_autogen_docstring(Axes.semilogy)
3387: def semilogy(*args, **kwargs):
3388:     ax = gca()
3389:     # Deprecated: allow callers to override the hold state
3390:     # by passing hold=True|False
3391:     washold = ax._hold
3392:     hold = kwargs.pop('hold', None)
3393:     if hold is not None:
3394:         ax._hold = hold
3395:         from matplotlib.cbook import mplDeprecation
3396:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3397:                       mplDeprecation)
3398:     try:
3399:         ret = ax.semilogy(*args, **kwargs)
3400:     finally:
3401:         ax._hold = washold
3402: 
3403:     return ret
3404: 
3405: # This function was autogenerated by boilerplate.py.  Do not edit as
3406: # changes will be lost
3407: @_autogen_docstring(Axes.specgram)
3408: def specgram(x, NFFT=None, Fs=None, Fc=None, detrend=None, window=None,
3409:              noverlap=None, cmap=None, xextent=None, pad_to=None, sides=None,
3410:              scale_by_freq=None, mode=None, scale=None, vmin=None, vmax=None,
3411:              hold=None, data=None, **kwargs):
3412:     ax = gca()
3413:     # Deprecated: allow callers to override the hold state
3414:     # by passing hold=True|False
3415:     washold = ax._hold
3416: 
3417:     if hold is not None:
3418:         ax._hold = hold
3419:         from matplotlib.cbook import mplDeprecation
3420:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3421:                       mplDeprecation)
3422:     try:
3423:         ret = ax.specgram(x, NFFT=NFFT, Fs=Fs, Fc=Fc, detrend=detrend,
3424:                           window=window, noverlap=noverlap, cmap=cmap,
3425:                           xextent=xextent, pad_to=pad_to, sides=sides,
3426:                           scale_by_freq=scale_by_freq, mode=mode, scale=scale,
3427:                           vmin=vmin, vmax=vmax, data=data, **kwargs)
3428:     finally:
3429:         ax._hold = washold
3430:     sci(ret[-1])
3431:     return ret
3432: 
3433: # This function was autogenerated by boilerplate.py.  Do not edit as
3434: # changes will be lost
3435: @_autogen_docstring(Axes.stackplot)
3436: def stackplot(x, *args, **kwargs):
3437:     ax = gca()
3438:     # Deprecated: allow callers to override the hold state
3439:     # by passing hold=True|False
3440:     washold = ax._hold
3441:     hold = kwargs.pop('hold', None)
3442:     if hold is not None:
3443:         ax._hold = hold
3444:         from matplotlib.cbook import mplDeprecation
3445:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3446:                       mplDeprecation)
3447:     try:
3448:         ret = ax.stackplot(x, *args, **kwargs)
3449:     finally:
3450:         ax._hold = washold
3451: 
3452:     return ret
3453: 
3454: # This function was autogenerated by boilerplate.py.  Do not edit as
3455: # changes will be lost
3456: @_autogen_docstring(Axes.stem)
3457: def stem(*args, **kwargs):
3458:     ax = gca()
3459:     # Deprecated: allow callers to override the hold state
3460:     # by passing hold=True|False
3461:     washold = ax._hold
3462:     hold = kwargs.pop('hold', None)
3463:     if hold is not None:
3464:         ax._hold = hold
3465:         from matplotlib.cbook import mplDeprecation
3466:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3467:                       mplDeprecation)
3468:     try:
3469:         ret = ax.stem(*args, **kwargs)
3470:     finally:
3471:         ax._hold = washold
3472: 
3473:     return ret
3474: 
3475: # This function was autogenerated by boilerplate.py.  Do not edit as
3476: # changes will be lost
3477: @_autogen_docstring(Axes.step)
3478: def step(x, y, *args, **kwargs):
3479:     ax = gca()
3480:     # Deprecated: allow callers to override the hold state
3481:     # by passing hold=True|False
3482:     washold = ax._hold
3483:     hold = kwargs.pop('hold', None)
3484:     if hold is not None:
3485:         ax._hold = hold
3486:         from matplotlib.cbook import mplDeprecation
3487:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3488:                       mplDeprecation)
3489:     try:
3490:         ret = ax.step(x, y, *args, **kwargs)
3491:     finally:
3492:         ax._hold = washold
3493: 
3494:     return ret
3495: 
3496: # This function was autogenerated by boilerplate.py.  Do not edit as
3497: # changes will be lost
3498: @_autogen_docstring(Axes.streamplot)
3499: def streamplot(x, y, u, v, density=1, linewidth=None, color=None, cmap=None,
3500:                norm=None, arrowsize=1, arrowstyle='-|>', minlength=0.1,
3501:                transform=None, zorder=None, start_points=None, maxlength=4.0,
3502:                integration_direction='both', hold=None, data=None):
3503:     ax = gca()
3504:     # Deprecated: allow callers to override the hold state
3505:     # by passing hold=True|False
3506:     washold = ax._hold
3507: 
3508:     if hold is not None:
3509:         ax._hold = hold
3510:         from matplotlib.cbook import mplDeprecation
3511:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3512:                       mplDeprecation)
3513:     try:
3514:         ret = ax.streamplot(x, y, u, v, density=density, linewidth=linewidth,
3515:                             color=color, cmap=cmap, norm=norm,
3516:                             arrowsize=arrowsize, arrowstyle=arrowstyle,
3517:                             minlength=minlength, transform=transform,
3518:                             zorder=zorder, start_points=start_points,
3519:                             maxlength=maxlength,
3520:                             integration_direction=integration_direction,
3521:                             data=data)
3522:     finally:
3523:         ax._hold = washold
3524:     sci(ret.lines)
3525:     return ret
3526: 
3527: # This function was autogenerated by boilerplate.py.  Do not edit as
3528: # changes will be lost
3529: @_autogen_docstring(Axes.tricontour)
3530: def tricontour(*args, **kwargs):
3531:     ax = gca()
3532:     # Deprecated: allow callers to override the hold state
3533:     # by passing hold=True|False
3534:     washold = ax._hold
3535:     hold = kwargs.pop('hold', None)
3536:     if hold is not None:
3537:         ax._hold = hold
3538:         from matplotlib.cbook import mplDeprecation
3539:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3540:                       mplDeprecation)
3541:     try:
3542:         ret = ax.tricontour(*args, **kwargs)
3543:     finally:
3544:         ax._hold = washold
3545:     if ret._A is not None: sci(ret)
3546:     return ret
3547: 
3548: # This function was autogenerated by boilerplate.py.  Do not edit as
3549: # changes will be lost
3550: @_autogen_docstring(Axes.tricontourf)
3551: def tricontourf(*args, **kwargs):
3552:     ax = gca()
3553:     # Deprecated: allow callers to override the hold state
3554:     # by passing hold=True|False
3555:     washold = ax._hold
3556:     hold = kwargs.pop('hold', None)
3557:     if hold is not None:
3558:         ax._hold = hold
3559:         from matplotlib.cbook import mplDeprecation
3560:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3561:                       mplDeprecation)
3562:     try:
3563:         ret = ax.tricontourf(*args, **kwargs)
3564:     finally:
3565:         ax._hold = washold
3566:     if ret._A is not None: sci(ret)
3567:     return ret
3568: 
3569: # This function was autogenerated by boilerplate.py.  Do not edit as
3570: # changes will be lost
3571: @_autogen_docstring(Axes.tripcolor)
3572: def tripcolor(*args, **kwargs):
3573:     ax = gca()
3574:     # Deprecated: allow callers to override the hold state
3575:     # by passing hold=True|False
3576:     washold = ax._hold
3577:     hold = kwargs.pop('hold', None)
3578:     if hold is not None:
3579:         ax._hold = hold
3580:         from matplotlib.cbook import mplDeprecation
3581:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3582:                       mplDeprecation)
3583:     try:
3584:         ret = ax.tripcolor(*args, **kwargs)
3585:     finally:
3586:         ax._hold = washold
3587:     sci(ret)
3588:     return ret
3589: 
3590: # This function was autogenerated by boilerplate.py.  Do not edit as
3591: # changes will be lost
3592: @_autogen_docstring(Axes.triplot)
3593: def triplot(*args, **kwargs):
3594:     ax = gca()
3595:     # Deprecated: allow callers to override the hold state
3596:     # by passing hold=True|False
3597:     washold = ax._hold
3598:     hold = kwargs.pop('hold', None)
3599:     if hold is not None:
3600:         ax._hold = hold
3601:         from matplotlib.cbook import mplDeprecation
3602:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3603:                       mplDeprecation)
3604:     try:
3605:         ret = ax.triplot(*args, **kwargs)
3606:     finally:
3607:         ax._hold = washold
3608: 
3609:     return ret
3610: 
3611: # This function was autogenerated by boilerplate.py.  Do not edit as
3612: # changes will be lost
3613: @_autogen_docstring(Axes.violinplot)
3614: def violinplot(dataset, positions=None, vert=True, widths=0.5, showmeans=False,
3615:                showextrema=True, showmedians=False, points=100, bw_method=None,
3616:                hold=None, data=None):
3617:     ax = gca()
3618:     # Deprecated: allow callers to override the hold state
3619:     # by passing hold=True|False
3620:     washold = ax._hold
3621: 
3622:     if hold is not None:
3623:         ax._hold = hold
3624:         from matplotlib.cbook import mplDeprecation
3625:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3626:                       mplDeprecation)
3627:     try:
3628:         ret = ax.violinplot(dataset, positions=positions, vert=vert,
3629:                             widths=widths, showmeans=showmeans,
3630:                             showextrema=showextrema, showmedians=showmedians,
3631:                             points=points, bw_method=bw_method, data=data)
3632:     finally:
3633:         ax._hold = washold
3634: 
3635:     return ret
3636: 
3637: # This function was autogenerated by boilerplate.py.  Do not edit as
3638: # changes will be lost
3639: @_autogen_docstring(Axes.vlines)
3640: def vlines(x, ymin, ymax, colors='k', linestyles='solid', label='', hold=None,
3641:            data=None, **kwargs):
3642:     ax = gca()
3643:     # Deprecated: allow callers to override the hold state
3644:     # by passing hold=True|False
3645:     washold = ax._hold
3646: 
3647:     if hold is not None:
3648:         ax._hold = hold
3649:         from matplotlib.cbook import mplDeprecation
3650:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3651:                       mplDeprecation)
3652:     try:
3653:         ret = ax.vlines(x, ymin, ymax, colors=colors, linestyles=linestyles,
3654:                         label=label, data=data, **kwargs)
3655:     finally:
3656:         ax._hold = washold
3657: 
3658:     return ret
3659: 
3660: # This function was autogenerated by boilerplate.py.  Do not edit as
3661: # changes will be lost
3662: @_autogen_docstring(Axes.xcorr)
3663: def xcorr(x, y, normed=True, detrend=mlab.detrend_none, usevlines=True,
3664:           maxlags=10, hold=None, data=None, **kwargs):
3665:     ax = gca()
3666:     # Deprecated: allow callers to override the hold state
3667:     # by passing hold=True|False
3668:     washold = ax._hold
3669: 
3670:     if hold is not None:
3671:         ax._hold = hold
3672:         from matplotlib.cbook import mplDeprecation
3673:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3674:                       mplDeprecation)
3675:     try:
3676:         ret = ax.xcorr(x, y, normed=normed, detrend=detrend,
3677:                        usevlines=usevlines, maxlags=maxlags, data=data,
3678:                        **kwargs)
3679:     finally:
3680:         ax._hold = washold
3681: 
3682:     return ret
3683: 
3684: # This function was autogenerated by boilerplate.py.  Do not edit as
3685: # changes will be lost
3686: @_autogen_docstring(Axes.barbs)
3687: def barbs(*args, **kw):
3688:     ax = gca()
3689:     # Deprecated: allow callers to override the hold state
3690:     # by passing hold=True|False
3691:     washold = ax._hold
3692:     hold = kw.pop('hold', None)
3693:     if hold is not None:
3694:         ax._hold = hold
3695:         from matplotlib.cbook import mplDeprecation
3696:         warnings.warn("The 'hold' keyword argument is deprecated since 2.0.",
3697:                       mplDeprecation)
3698:     try:
3699:         ret = ax.barbs(*args, **kw)
3700:     finally:
3701:         ax._hold = washold
3702: 
3703:     return ret
3704: 
3705: # This function was autogenerated by boilerplate.py.  Do not edit as
3706: # changes will be lost
3707: @docstring.copy_dedent(Axes.cla)
3708: def cla():
3709:     ret = gca().cla()
3710:     return ret
3711: 
3712: # This function was autogenerated by boilerplate.py.  Do not edit as
3713: # changes will be lost
3714: @docstring.copy_dedent(Axes.grid)
3715: def grid(b=None, which='major', axis='both', **kwargs):
3716:     ret = gca().grid(b=b, which=which, axis=axis, **kwargs)
3717:     return ret
3718: 
3719: # This function was autogenerated by boilerplate.py.  Do not edit as
3720: # changes will be lost
3721: @docstring.copy_dedent(Axes.legend)
3722: def legend(*args, **kwargs):
3723:     ret = gca().legend(*args, **kwargs)
3724:     return ret
3725: 
3726: # This function was autogenerated by boilerplate.py.  Do not edit as
3727: # changes will be lost
3728: @docstring.copy_dedent(Axes.table)
3729: def table(**kwargs):
3730:     ret = gca().table(**kwargs)
3731:     return ret
3732: 
3733: # This function was autogenerated by boilerplate.py.  Do not edit as
3734: # changes will be lost
3735: @docstring.copy_dedent(Axes.text)
3736: def text(x, y, s, fontdict=None, withdash=False, **kwargs):
3737:     ret = gca().text(x, y, s, fontdict=fontdict, withdash=withdash, **kwargs)
3738:     return ret
3739: 
3740: # This function was autogenerated by boilerplate.py.  Do not edit as
3741: # changes will be lost
3742: @docstring.copy_dedent(Axes.annotate)
3743: def annotate(*args, **kwargs):
3744:     ret = gca().annotate(*args, **kwargs)
3745:     return ret
3746: 
3747: # This function was autogenerated by boilerplate.py.  Do not edit as
3748: # changes will be lost
3749: @docstring.copy_dedent(Axes.ticklabel_format)
3750: def ticklabel_format(**kwargs):
3751:     ret = gca().ticklabel_format(**kwargs)
3752:     return ret
3753: 
3754: # This function was autogenerated by boilerplate.py.  Do not edit as
3755: # changes will be lost
3756: @docstring.copy_dedent(Axes.locator_params)
3757: def locator_params(axis='both', tight=None, **kwargs):
3758:     ret = gca().locator_params(axis=axis, tight=tight, **kwargs)
3759:     return ret
3760: 
3761: # This function was autogenerated by boilerplate.py.  Do not edit as
3762: # changes will be lost
3763: @docstring.copy_dedent(Axes.tick_params)
3764: def tick_params(axis='both', **kwargs):
3765:     ret = gca().tick_params(axis=axis, **kwargs)
3766:     return ret
3767: 
3768: # This function was autogenerated by boilerplate.py.  Do not edit as
3769: # changes will be lost
3770: @docstring.copy_dedent(Axes.margins)
3771: def margins(*args, **kw):
3772:     ret = gca().margins(*args, **kw)
3773:     return ret
3774: 
3775: # This function was autogenerated by boilerplate.py.  Do not edit as
3776: # changes will be lost
3777: @docstring.copy_dedent(Axes.autoscale)
3778: def autoscale(enable=True, axis='both', tight=None):
3779:     ret = gca().autoscale(enable=enable, axis=axis, tight=tight)
3780:     return ret
3781: 
3782: # This function was autogenerated by boilerplate.py.  Do not edit as
3783: # changes will be lost
3784: def autumn():
3785:     '''
3786:     set the default colormap to autumn and apply to current image if any.
3787:     See help(colormaps) for more information
3788:     '''
3789:     rc('image', cmap='autumn')
3790:     im = gci()
3791: 
3792:     if im is not None:
3793:         im.set_cmap(cm.autumn)
3794: 
3795: 
3796: # This function was autogenerated by boilerplate.py.  Do not edit as
3797: # changes will be lost
3798: def bone():
3799:     '''
3800:     set the default colormap to bone and apply to current image if any.
3801:     See help(colormaps) for more information
3802:     '''
3803:     rc('image', cmap='bone')
3804:     im = gci()
3805: 
3806:     if im is not None:
3807:         im.set_cmap(cm.bone)
3808: 
3809: 
3810: # This function was autogenerated by boilerplate.py.  Do not edit as
3811: # changes will be lost
3812: def cool():
3813:     '''
3814:     set the default colormap to cool and apply to current image if any.
3815:     See help(colormaps) for more information
3816:     '''
3817:     rc('image', cmap='cool')
3818:     im = gci()
3819: 
3820:     if im is not None:
3821:         im.set_cmap(cm.cool)
3822: 
3823: 
3824: # This function was autogenerated by boilerplate.py.  Do not edit as
3825: # changes will be lost
3826: def copper():
3827:     '''
3828:     set the default colormap to copper and apply to current image if any.
3829:     See help(colormaps) for more information
3830:     '''
3831:     rc('image', cmap='copper')
3832:     im = gci()
3833: 
3834:     if im is not None:
3835:         im.set_cmap(cm.copper)
3836: 
3837: 
3838: # This function was autogenerated by boilerplate.py.  Do not edit as
3839: # changes will be lost
3840: def flag():
3841:     '''
3842:     set the default colormap to flag and apply to current image if any.
3843:     See help(colormaps) for more information
3844:     '''
3845:     rc('image', cmap='flag')
3846:     im = gci()
3847: 
3848:     if im is not None:
3849:         im.set_cmap(cm.flag)
3850: 
3851: 
3852: # This function was autogenerated by boilerplate.py.  Do not edit as
3853: # changes will be lost
3854: def gray():
3855:     '''
3856:     set the default colormap to gray and apply to current image if any.
3857:     See help(colormaps) for more information
3858:     '''
3859:     rc('image', cmap='gray')
3860:     im = gci()
3861: 
3862:     if im is not None:
3863:         im.set_cmap(cm.gray)
3864: 
3865: 
3866: # This function was autogenerated by boilerplate.py.  Do not edit as
3867: # changes will be lost
3868: def hot():
3869:     '''
3870:     set the default colormap to hot and apply to current image if any.
3871:     See help(colormaps) for more information
3872:     '''
3873:     rc('image', cmap='hot')
3874:     im = gci()
3875: 
3876:     if im is not None:
3877:         im.set_cmap(cm.hot)
3878: 
3879: 
3880: # This function was autogenerated by boilerplate.py.  Do not edit as
3881: # changes will be lost
3882: def hsv():
3883:     '''
3884:     set the default colormap to hsv and apply to current image if any.
3885:     See help(colormaps) for more information
3886:     '''
3887:     rc('image', cmap='hsv')
3888:     im = gci()
3889: 
3890:     if im is not None:
3891:         im.set_cmap(cm.hsv)
3892: 
3893: 
3894: # This function was autogenerated by boilerplate.py.  Do not edit as
3895: # changes will be lost
3896: def jet():
3897:     '''
3898:     set the default colormap to jet and apply to current image if any.
3899:     See help(colormaps) for more information
3900:     '''
3901:     rc('image', cmap='jet')
3902:     im = gci()
3903: 
3904:     if im is not None:
3905:         im.set_cmap(cm.jet)
3906: 
3907: 
3908: # This function was autogenerated by boilerplate.py.  Do not edit as
3909: # changes will be lost
3910: def pink():
3911:     '''
3912:     set the default colormap to pink and apply to current image if any.
3913:     See help(colormaps) for more information
3914:     '''
3915:     rc('image', cmap='pink')
3916:     im = gci()
3917: 
3918:     if im is not None:
3919:         im.set_cmap(cm.pink)
3920: 
3921: 
3922: # This function was autogenerated by boilerplate.py.  Do not edit as
3923: # changes will be lost
3924: def prism():
3925:     '''
3926:     set the default colormap to prism and apply to current image if any.
3927:     See help(colormaps) for more information
3928:     '''
3929:     rc('image', cmap='prism')
3930:     im = gci()
3931: 
3932:     if im is not None:
3933:         im.set_cmap(cm.prism)
3934: 
3935: 
3936: # This function was autogenerated by boilerplate.py.  Do not edit as
3937: # changes will be lost
3938: def spring():
3939:     '''
3940:     set the default colormap to spring and apply to current image if any.
3941:     See help(colormaps) for more information
3942:     '''
3943:     rc('image', cmap='spring')
3944:     im = gci()
3945: 
3946:     if im is not None:
3947:         im.set_cmap(cm.spring)
3948: 
3949: 
3950: # This function was autogenerated by boilerplate.py.  Do not edit as
3951: # changes will be lost
3952: def summer():
3953:     '''
3954:     set the default colormap to summer and apply to current image if any.
3955:     See help(colormaps) for more information
3956:     '''
3957:     rc('image', cmap='summer')
3958:     im = gci()
3959: 
3960:     if im is not None:
3961:         im.set_cmap(cm.summer)
3962: 
3963: 
3964: # This function was autogenerated by boilerplate.py.  Do not edit as
3965: # changes will be lost
3966: def winter():
3967:     '''
3968:     set the default colormap to winter and apply to current image if any.
3969:     See help(colormaps) for more information
3970:     '''
3971:     rc('image', cmap='winter')
3972:     im = gci()
3973: 
3974:     if im is not None:
3975:         im.set_cmap(cm.winter)
3976: 
3977: 
3978: # This function was autogenerated by boilerplate.py.  Do not edit as
3979: # changes will be lost
3980: def magma():
3981:     '''
3982:     set the default colormap to magma and apply to current image if any.
3983:     See help(colormaps) for more information
3984:     '''
3985:     rc('image', cmap='magma')
3986:     im = gci()
3987: 
3988:     if im is not None:
3989:         im.set_cmap(cm.magma)
3990: 
3991: 
3992: # This function was autogenerated by boilerplate.py.  Do not edit as
3993: # changes will be lost
3994: def inferno():
3995:     '''
3996:     set the default colormap to inferno and apply to current image if any.
3997:     See help(colormaps) for more information
3998:     '''
3999:     rc('image', cmap='inferno')
4000:     im = gci()
4001: 
4002:     if im is not None:
4003:         im.set_cmap(cm.inferno)
4004: 
4005: 
4006: # This function was autogenerated by boilerplate.py.  Do not edit as
4007: # changes will be lost
4008: def plasma():
4009:     '''
4010:     set the default colormap to plasma and apply to current image if any.
4011:     See help(colormaps) for more information
4012:     '''
4013:     rc('image', cmap='plasma')
4014:     im = gci()
4015: 
4016:     if im is not None:
4017:         im.set_cmap(cm.plasma)
4018: 
4019: 
4020: # This function was autogenerated by boilerplate.py.  Do not edit as
4021: # changes will be lost
4022: def viridis():
4023:     '''
4024:     set the default colormap to viridis and apply to current image if any.
4025:     See help(colormaps) for more information
4026:     '''
4027:     rc('image', cmap='viridis')
4028:     im = gci()
4029: 
4030:     if im is not None:
4031:         im.set_cmap(cm.viridis)
4032: 
4033: 
4034: # This function was autogenerated by boilerplate.py.  Do not edit as
4035: # changes will be lost
4036: def nipy_spectral():
4037:     '''
4038:     set the default colormap to nipy_spectral and apply to current image if any.
4039:     See help(colormaps) for more information
4040:     '''
4041:     rc('image', cmap='nipy_spectral')
4042:     im = gci()
4043: 
4044:     if im is not None:
4045:         im.set_cmap(cm.nipy_spectral)
4046: 
4047: 
4048: # This function was autogenerated by boilerplate.py.  Do not edit as
4049: # changes will be lost
4050: def spectral():
4051:     '''
4052:     set the default colormap to spectral and apply to current image if any.
4053:     See help(colormaps) for more information
4054:     '''
4055:     from matplotlib.cbook import warn_deprecated
4056:     warn_deprecated(
4057:                     "2.0",
4058:                     name="spectral",
4059:                     obj_type="colormap"
4060:                     )
4061: 
4062:     rc('image', cmap='spectral')
4063:     im = gci()
4064: 
4065:     if im is not None:
4066:         im.set_cmap(cm.spectral)
4067: 
4068: _setup_pyplot_info_docstrings()
4069: 

"""

# Import the stypy library necessary elements
from stypy.type_inference_programs.type_inference_programs_imports import *

# Create the module type store
module_type_store = Context(None, __file__)

# ################# Begin of the type inference program ##################

unicode_114616 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 17, (-1)), 'unicode', u'\nProvides a MATLAB-like plotting framework.\n\n:mod:`~matplotlib.pylab` combines pyplot with numpy into a single namespace.\nThis is convenient for interactive work, but for programming it\nis recommended that the namespaces be kept separate, e.g.::\n\n    import numpy as np\n    import matplotlib.pyplot as plt\n\n    x = np.arange(0, 5, 0.1);\n    y = np.sin(x)\n    plt.plot(x, y)\n\n')
stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 21, 0))

# 'import six' statement (line 21)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114617 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'six')

if (type(import_114617) is not StypyTypeError):

    if (import_114617 != 'pyd_module'):
        __import__(import_114617)
        sys_modules_114618 = sys.modules[import_114617]
        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'six', sys_modules_114618.module_type_store, module_type_store)
    else:
        import six

        import_module(stypy.reporting.localization.Localization(__file__, 21, 0), 'six', six, module_type_store)

else:
    # Assigning a type to the variable 'six' (line 21)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 21, 0), 'six', import_114617)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 23, 0))

# 'import sys' statement (line 23)
import sys

import_module(stypy.reporting.localization.Localization(__file__, 23, 0), 'sys', sys, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 24, 0))

# 'import warnings' statement (line 24)
import warnings

import_module(stypy.reporting.localization.Localization(__file__, 24, 0), 'warnings', warnings, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 25, 0))

# 'import types' statement (line 25)
import types

import_module(stypy.reporting.localization.Localization(__file__, 25, 0), 'types', types, module_type_store)

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 27, 0))

# 'from cycler import cycler' statement (line 27)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114619 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'cycler')

if (type(import_114619) is not StypyTypeError):

    if (import_114619 != 'pyd_module'):
        __import__(import_114619)
        sys_modules_114620 = sys.modules[import_114619]
        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'cycler', sys_modules_114620.module_type_store, module_type_store, ['cycler'])
        nest_module(stypy.reporting.localization.Localization(__file__, 27, 0), __file__, sys_modules_114620, sys_modules_114620.module_type_store, module_type_store)
    else:
        from cycler import cycler

        import_from_module(stypy.reporting.localization.Localization(__file__, 27, 0), 'cycler', None, module_type_store, ['cycler'], [cycler])

else:
    # Assigning a type to the variable 'cycler' (line 27)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 27, 0), 'cycler', import_114619)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 28, 0))

# 'import matplotlib' statement (line 28)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114621 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib')

if (type(import_114621) is not StypyTypeError):

    if (import_114621 != 'pyd_module'):
        __import__(import_114621)
        sys_modules_114622 = sys.modules[import_114621]
        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib', sys_modules_114622.module_type_store, module_type_store)
    else:
        import matplotlib

        import_module(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib', matplotlib, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib' (line 28)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 28, 0), 'matplotlib', import_114621)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 29, 0))

# 'import matplotlib.colorbar' statement (line 29)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114623 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.colorbar')

if (type(import_114623) is not StypyTypeError):

    if (import_114623 != 'pyd_module'):
        __import__(import_114623)
        sys_modules_114624 = sys.modules[import_114623]
        import_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.colorbar', sys_modules_114624.module_type_store, module_type_store)
    else:
        import matplotlib.colorbar

        import_module(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.colorbar', matplotlib.colorbar, module_type_store)

else:
    # Assigning a type to the variable 'matplotlib.colorbar' (line 29)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 29, 0), 'matplotlib.colorbar', import_114623)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 30, 0))

# 'from matplotlib import style' statement (line 30)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114625 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib')

if (type(import_114625) is not StypyTypeError):

    if (import_114625 != 'pyd_module'):
        __import__(import_114625)
        sys_modules_114626 = sys.modules[import_114625]
        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib', sys_modules_114626.module_type_store, module_type_store, ['style'])
        nest_module(stypy.reporting.localization.Localization(__file__, 30, 0), __file__, sys_modules_114626, sys_modules_114626.module_type_store, module_type_store)
    else:
        from matplotlib import style

        import_from_module(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib', None, module_type_store, ['style'], [style])

else:
    # Assigning a type to the variable 'matplotlib' (line 30)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 30, 0), 'matplotlib', import_114625)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 31, 0))

# 'from matplotlib import _pylab_helpers, interactive' statement (line 31)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114627 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib')

if (type(import_114627) is not StypyTypeError):

    if (import_114627 != 'pyd_module'):
        __import__(import_114627)
        sys_modules_114628 = sys.modules[import_114627]
        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib', sys_modules_114628.module_type_store, module_type_store, ['_pylab_helpers', 'interactive'])
        nest_module(stypy.reporting.localization.Localization(__file__, 31, 0), __file__, sys_modules_114628, sys_modules_114628.module_type_store, module_type_store)
    else:
        from matplotlib import _pylab_helpers, interactive

        import_from_module(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib', None, module_type_store, ['_pylab_helpers', 'interactive'], [_pylab_helpers, interactive])

else:
    # Assigning a type to the variable 'matplotlib' (line 31)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 31, 0), 'matplotlib', import_114627)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 32, 0))

# 'from matplotlib.cbook import dedent, silent_list, is_numlike' statement (line 32)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114629 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.cbook')

if (type(import_114629) is not StypyTypeError):

    if (import_114629 != 'pyd_module'):
        __import__(import_114629)
        sys_modules_114630 = sys.modules[import_114629]
        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.cbook', sys_modules_114630.module_type_store, module_type_store, ['dedent', 'silent_list', 'is_numlike'])
        nest_module(stypy.reporting.localization.Localization(__file__, 32, 0), __file__, sys_modules_114630, sys_modules_114630.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import dedent, silent_list, is_numlike

        import_from_module(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.cbook', None, module_type_store, ['dedent', 'silent_list', 'is_numlike'], [dedent, silent_list, is_numlike])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 32)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 32, 0), 'matplotlib.cbook', import_114629)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 33, 0))

# 'from matplotlib.cbook import _string_to_bool' statement (line 33)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114631 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.cbook')

if (type(import_114631) is not StypyTypeError):

    if (import_114631 != 'pyd_module'):
        __import__(import_114631)
        sys_modules_114632 = sys.modules[import_114631]
        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.cbook', sys_modules_114632.module_type_store, module_type_store, ['_string_to_bool'])
        nest_module(stypy.reporting.localization.Localization(__file__, 33, 0), __file__, sys_modules_114632, sys_modules_114632.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import _string_to_bool

        import_from_module(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.cbook', None, module_type_store, ['_string_to_bool'], [_string_to_bool])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 33)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 33, 0), 'matplotlib.cbook', import_114631)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 34, 0))

# 'from matplotlib.cbook import deprecated' statement (line 34)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114633 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.cbook')

if (type(import_114633) is not StypyTypeError):

    if (import_114633 != 'pyd_module'):
        __import__(import_114633)
        sys_modules_114634 = sys.modules[import_114633]
        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.cbook', sys_modules_114634.module_type_store, module_type_store, ['deprecated'])
        nest_module(stypy.reporting.localization.Localization(__file__, 34, 0), __file__, sys_modules_114634, sys_modules_114634.module_type_store, module_type_store)
    else:
        from matplotlib.cbook import deprecated

        import_from_module(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.cbook', None, module_type_store, ['deprecated'], [deprecated])

else:
    # Assigning a type to the variable 'matplotlib.cbook' (line 34)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 34, 0), 'matplotlib.cbook', import_114633)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 35, 0))

# 'from matplotlib import docstring' statement (line 35)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114635 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib')

if (type(import_114635) is not StypyTypeError):

    if (import_114635 != 'pyd_module'):
        __import__(import_114635)
        sys_modules_114636 = sys.modules[import_114635]
        import_from_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib', sys_modules_114636.module_type_store, module_type_store, ['docstring'])
        nest_module(stypy.reporting.localization.Localization(__file__, 35, 0), __file__, sys_modules_114636, sys_modules_114636.module_type_store, module_type_store)
    else:
        from matplotlib import docstring

        import_from_module(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib', None, module_type_store, ['docstring'], [docstring])

else:
    # Assigning a type to the variable 'matplotlib' (line 35)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 35, 0), 'matplotlib', import_114635)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 36, 0))

# 'from matplotlib.backend_bases import FigureCanvasBase' statement (line 36)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114637 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'matplotlib.backend_bases')

if (type(import_114637) is not StypyTypeError):

    if (import_114637 != 'pyd_module'):
        __import__(import_114637)
        sys_modules_114638 = sys.modules[import_114637]
        import_from_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'matplotlib.backend_bases', sys_modules_114638.module_type_store, module_type_store, ['FigureCanvasBase'])
        nest_module(stypy.reporting.localization.Localization(__file__, 36, 0), __file__, sys_modules_114638, sys_modules_114638.module_type_store, module_type_store)
    else:
        from matplotlib.backend_bases import FigureCanvasBase

        import_from_module(stypy.reporting.localization.Localization(__file__, 36, 0), 'matplotlib.backend_bases', None, module_type_store, ['FigureCanvasBase'], [FigureCanvasBase])

else:
    # Assigning a type to the variable 'matplotlib.backend_bases' (line 36)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 36, 0), 'matplotlib.backend_bases', import_114637)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 37, 0))

# 'from matplotlib.figure import Figure, figaspect' statement (line 37)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114639 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.figure')

if (type(import_114639) is not StypyTypeError):

    if (import_114639 != 'pyd_module'):
        __import__(import_114639)
        sys_modules_114640 = sys.modules[import_114639]
        import_from_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.figure', sys_modules_114640.module_type_store, module_type_store, ['Figure', 'figaspect'])
        nest_module(stypy.reporting.localization.Localization(__file__, 37, 0), __file__, sys_modules_114640, sys_modules_114640.module_type_store, module_type_store)
    else:
        from matplotlib.figure import Figure, figaspect

        import_from_module(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.figure', None, module_type_store, ['Figure', 'figaspect'], [Figure, figaspect])

else:
    # Assigning a type to the variable 'matplotlib.figure' (line 37)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 37, 0), 'matplotlib.figure', import_114639)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 38, 0))

# 'from matplotlib.gridspec import GridSpec' statement (line 38)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114641 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.gridspec')

if (type(import_114641) is not StypyTypeError):

    if (import_114641 != 'pyd_module'):
        __import__(import_114641)
        sys_modules_114642 = sys.modules[import_114641]
        import_from_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.gridspec', sys_modules_114642.module_type_store, module_type_store, ['GridSpec'])
        nest_module(stypy.reporting.localization.Localization(__file__, 38, 0), __file__, sys_modules_114642, sys_modules_114642.module_type_store, module_type_store)
    else:
        from matplotlib.gridspec import GridSpec

        import_from_module(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.gridspec', None, module_type_store, ['GridSpec'], [GridSpec])

else:
    # Assigning a type to the variable 'matplotlib.gridspec' (line 38)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 38, 0), 'matplotlib.gridspec', import_114641)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 39, 0))

# 'from matplotlib.image import _imread' statement (line 39)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114643 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.image')

if (type(import_114643) is not StypyTypeError):

    if (import_114643 != 'pyd_module'):
        __import__(import_114643)
        sys_modules_114644 = sys.modules[import_114643]
        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.image', sys_modules_114644.module_type_store, module_type_store, ['imread'])
        nest_module(stypy.reporting.localization.Localization(__file__, 39, 0), __file__, sys_modules_114644, sys_modules_114644.module_type_store, module_type_store)
    else:
        from matplotlib.image import imread as _imread

        import_from_module(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.image', None, module_type_store, ['imread'], [_imread])

else:
    # Assigning a type to the variable 'matplotlib.image' (line 39)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 39, 0), 'matplotlib.image', import_114643)

# Adding an alias
module_type_store.add_alias('_imread', 'imread')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 40, 0))

# 'from matplotlib.image import _imsave' statement (line 40)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114645 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.image')

if (type(import_114645) is not StypyTypeError):

    if (import_114645 != 'pyd_module'):
        __import__(import_114645)
        sys_modules_114646 = sys.modules[import_114645]
        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.image', sys_modules_114646.module_type_store, module_type_store, ['imsave'])
        nest_module(stypy.reporting.localization.Localization(__file__, 40, 0), __file__, sys_modules_114646, sys_modules_114646.module_type_store, module_type_store)
    else:
        from matplotlib.image import imsave as _imsave

        import_from_module(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.image', None, module_type_store, ['imsave'], [_imsave])

else:
    # Assigning a type to the variable 'matplotlib.image' (line 40)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 40, 0), 'matplotlib.image', import_114645)

# Adding an alias
module_type_store.add_alias('_imsave', 'imsave')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 41, 0))

# 'from matplotlib import rcParams, rcParamsDefault, get_backend' statement (line 41)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114647 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib')

if (type(import_114647) is not StypyTypeError):

    if (import_114647 != 'pyd_module'):
        __import__(import_114647)
        sys_modules_114648 = sys.modules[import_114647]
        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib', sys_modules_114648.module_type_store, module_type_store, ['rcParams', 'rcParamsDefault', 'get_backend'])
        nest_module(stypy.reporting.localization.Localization(__file__, 41, 0), __file__, sys_modules_114648, sys_modules_114648.module_type_store, module_type_store)
    else:
        from matplotlib import rcParams, rcParamsDefault, get_backend

        import_from_module(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib', None, module_type_store, ['rcParams', 'rcParamsDefault', 'get_backend'], [rcParams, rcParamsDefault, get_backend])

else:
    # Assigning a type to the variable 'matplotlib' (line 41)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 41, 0), 'matplotlib', import_114647)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 42, 0))

# 'from matplotlib import rc_context' statement (line 42)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114649 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib')

if (type(import_114649) is not StypyTypeError):

    if (import_114649 != 'pyd_module'):
        __import__(import_114649)
        sys_modules_114650 = sys.modules[import_114649]
        import_from_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib', sys_modules_114650.module_type_store, module_type_store, ['rc_context'])
        nest_module(stypy.reporting.localization.Localization(__file__, 42, 0), __file__, sys_modules_114650, sys_modules_114650.module_type_store, module_type_store)
    else:
        from matplotlib import rc_context

        import_from_module(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib', None, module_type_store, ['rc_context'], [rc_context])

else:
    # Assigning a type to the variable 'matplotlib' (line 42)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 42, 0), 'matplotlib', import_114649)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 43, 0))

# 'from matplotlib.rcsetup import _interactive_bk' statement (line 43)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114651 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 43, 0), 'matplotlib.rcsetup')

if (type(import_114651) is not StypyTypeError):

    if (import_114651 != 'pyd_module'):
        __import__(import_114651)
        sys_modules_114652 = sys.modules[import_114651]
        import_from_module(stypy.reporting.localization.Localization(__file__, 43, 0), 'matplotlib.rcsetup', sys_modules_114652.module_type_store, module_type_store, ['interactive_bk'])
        nest_module(stypy.reporting.localization.Localization(__file__, 43, 0), __file__, sys_modules_114652, sys_modules_114652.module_type_store, module_type_store)
    else:
        from matplotlib.rcsetup import interactive_bk as _interactive_bk

        import_from_module(stypy.reporting.localization.Localization(__file__, 43, 0), 'matplotlib.rcsetup', None, module_type_store, ['interactive_bk'], [_interactive_bk])

else:
    # Assigning a type to the variable 'matplotlib.rcsetup' (line 43)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 43, 0), 'matplotlib.rcsetup', import_114651)

# Adding an alias
module_type_store.add_alias('_interactive_bk', 'interactive_bk')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 44, 0))

# 'from matplotlib.artist import getp, get, Artist' statement (line 44)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114653 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.artist')

if (type(import_114653) is not StypyTypeError):

    if (import_114653 != 'pyd_module'):
        __import__(import_114653)
        sys_modules_114654 = sys.modules[import_114653]
        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.artist', sys_modules_114654.module_type_store, module_type_store, ['getp', 'get', 'Artist'])
        nest_module(stypy.reporting.localization.Localization(__file__, 44, 0), __file__, sys_modules_114654, sys_modules_114654.module_type_store, module_type_store)
    else:
        from matplotlib.artist import getp, get, Artist

        import_from_module(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.artist', None, module_type_store, ['getp', 'get', 'Artist'], [getp, get, Artist])

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 44)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 44, 0), 'matplotlib.artist', import_114653)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 45, 0))

# 'from matplotlib.artist import _setp' statement (line 45)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114655 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 45, 0), 'matplotlib.artist')

if (type(import_114655) is not StypyTypeError):

    if (import_114655 != 'pyd_module'):
        __import__(import_114655)
        sys_modules_114656 = sys.modules[import_114655]
        import_from_module(stypy.reporting.localization.Localization(__file__, 45, 0), 'matplotlib.artist', sys_modules_114656.module_type_store, module_type_store, ['setp'])
        nest_module(stypy.reporting.localization.Localization(__file__, 45, 0), __file__, sys_modules_114656, sys_modules_114656.module_type_store, module_type_store)
    else:
        from matplotlib.artist import setp as _setp

        import_from_module(stypy.reporting.localization.Localization(__file__, 45, 0), 'matplotlib.artist', None, module_type_store, ['setp'], [_setp])

else:
    # Assigning a type to the variable 'matplotlib.artist' (line 45)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 45, 0), 'matplotlib.artist', import_114655)

# Adding an alias
module_type_store.add_alias('_setp', 'setp')
remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 46, 0))

# 'from matplotlib.axes import Axes, Subplot' statement (line 46)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114657 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 46, 0), 'matplotlib.axes')

if (type(import_114657) is not StypyTypeError):

    if (import_114657 != 'pyd_module'):
        __import__(import_114657)
        sys_modules_114658 = sys.modules[import_114657]
        import_from_module(stypy.reporting.localization.Localization(__file__, 46, 0), 'matplotlib.axes', sys_modules_114658.module_type_store, module_type_store, ['Axes', 'Subplot'])
        nest_module(stypy.reporting.localization.Localization(__file__, 46, 0), __file__, sys_modules_114658, sys_modules_114658.module_type_store, module_type_store)
    else:
        from matplotlib.axes import Axes, Subplot

        import_from_module(stypy.reporting.localization.Localization(__file__, 46, 0), 'matplotlib.axes', None, module_type_store, ['Axes', 'Subplot'], [Axes, Subplot])

else:
    # Assigning a type to the variable 'matplotlib.axes' (line 46)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 46, 0), 'matplotlib.axes', import_114657)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 47, 0))

# 'from matplotlib.projections import PolarAxes' statement (line 47)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114659 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'matplotlib.projections')

if (type(import_114659) is not StypyTypeError):

    if (import_114659 != 'pyd_module'):
        __import__(import_114659)
        sys_modules_114660 = sys.modules[import_114659]
        import_from_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'matplotlib.projections', sys_modules_114660.module_type_store, module_type_store, ['PolarAxes'])
        nest_module(stypy.reporting.localization.Localization(__file__, 47, 0), __file__, sys_modules_114660, sys_modules_114660.module_type_store, module_type_store)
    else:
        from matplotlib.projections import PolarAxes

        import_from_module(stypy.reporting.localization.Localization(__file__, 47, 0), 'matplotlib.projections', None, module_type_store, ['PolarAxes'], [PolarAxes])

else:
    # Assigning a type to the variable 'matplotlib.projections' (line 47)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 47, 0), 'matplotlib.projections', import_114659)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 48, 0))

# 'from matplotlib import mlab' statement (line 48)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114661 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 48, 0), 'matplotlib')

if (type(import_114661) is not StypyTypeError):

    if (import_114661 != 'pyd_module'):
        __import__(import_114661)
        sys_modules_114662 = sys.modules[import_114661]
        import_from_module(stypy.reporting.localization.Localization(__file__, 48, 0), 'matplotlib', sys_modules_114662.module_type_store, module_type_store, ['mlab'])
        nest_module(stypy.reporting.localization.Localization(__file__, 48, 0), __file__, sys_modules_114662, sys_modules_114662.module_type_store, module_type_store)
    else:
        from matplotlib import mlab

        import_from_module(stypy.reporting.localization.Localization(__file__, 48, 0), 'matplotlib', None, module_type_store, ['mlab'], [mlab])

else:
    # Assigning a type to the variable 'matplotlib' (line 48)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 48, 0), 'matplotlib', import_114661)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 49, 0))

# 'from matplotlib.scale import get_scale_docs, get_scale_names' statement (line 49)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114663 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 49, 0), 'matplotlib.scale')

if (type(import_114663) is not StypyTypeError):

    if (import_114663 != 'pyd_module'):
        __import__(import_114663)
        sys_modules_114664 = sys.modules[import_114663]
        import_from_module(stypy.reporting.localization.Localization(__file__, 49, 0), 'matplotlib.scale', sys_modules_114664.module_type_store, module_type_store, ['get_scale_docs', 'get_scale_names'])
        nest_module(stypy.reporting.localization.Localization(__file__, 49, 0), __file__, sys_modules_114664, sys_modules_114664.module_type_store, module_type_store)
    else:
        from matplotlib.scale import get_scale_docs, get_scale_names

        import_from_module(stypy.reporting.localization.Localization(__file__, 49, 0), 'matplotlib.scale', None, module_type_store, ['get_scale_docs', 'get_scale_names'], [get_scale_docs, get_scale_names])

else:
    # Assigning a type to the variable 'matplotlib.scale' (line 49)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 49, 0), 'matplotlib.scale', import_114663)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 51, 0))

# 'from matplotlib import cm' statement (line 51)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114665 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 51, 0), 'matplotlib')

if (type(import_114665) is not StypyTypeError):

    if (import_114665 != 'pyd_module'):
        __import__(import_114665)
        sys_modules_114666 = sys.modules[import_114665]
        import_from_module(stypy.reporting.localization.Localization(__file__, 51, 0), 'matplotlib', sys_modules_114666.module_type_store, module_type_store, ['cm'])
        nest_module(stypy.reporting.localization.Localization(__file__, 51, 0), __file__, sys_modules_114666, sys_modules_114666.module_type_store, module_type_store)
    else:
        from matplotlib import cm

        import_from_module(stypy.reporting.localization.Localization(__file__, 51, 0), 'matplotlib', None, module_type_store, ['cm'], [cm])

else:
    # Assigning a type to the variable 'matplotlib' (line 51)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 51, 0), 'matplotlib', import_114665)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 52, 0))

# 'from matplotlib.cm import get_cmap, register_cmap' statement (line 52)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114667 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 52, 0), 'matplotlib.cm')

if (type(import_114667) is not StypyTypeError):

    if (import_114667 != 'pyd_module'):
        __import__(import_114667)
        sys_modules_114668 = sys.modules[import_114667]
        import_from_module(stypy.reporting.localization.Localization(__file__, 52, 0), 'matplotlib.cm', sys_modules_114668.module_type_store, module_type_store, ['get_cmap', 'register_cmap'])
        nest_module(stypy.reporting.localization.Localization(__file__, 52, 0), __file__, sys_modules_114668, sys_modules_114668.module_type_store, module_type_store)
    else:
        from matplotlib.cm import get_cmap, register_cmap

        import_from_module(stypy.reporting.localization.Localization(__file__, 52, 0), 'matplotlib.cm', None, module_type_store, ['get_cmap', 'register_cmap'], [get_cmap, register_cmap])

else:
    # Assigning a type to the variable 'matplotlib.cm' (line 52)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 52, 0), 'matplotlib.cm', import_114667)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 54, 0))

# 'import numpy' statement (line 54)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114669 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 54, 0), 'numpy')

if (type(import_114669) is not StypyTypeError):

    if (import_114669 != 'pyd_module'):
        __import__(import_114669)
        sys_modules_114670 = sys.modules[import_114669]
        import_module(stypy.reporting.localization.Localization(__file__, 54, 0), 'np', sys_modules_114670.module_type_store, module_type_store)
    else:
        import numpy as np

        import_module(stypy.reporting.localization.Localization(__file__, 54, 0), 'np', numpy, module_type_store)

else:
    # Assigning a type to the variable 'numpy' (line 54)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 54, 0), 'numpy', import_114669)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 57, 0))

# 'from matplotlib.colors import Normalize' statement (line 57)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114671 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 57, 0), 'matplotlib.colors')

if (type(import_114671) is not StypyTypeError):

    if (import_114671 != 'pyd_module'):
        __import__(import_114671)
        sys_modules_114672 = sys.modules[import_114671]
        import_from_module(stypy.reporting.localization.Localization(__file__, 57, 0), 'matplotlib.colors', sys_modules_114672.module_type_store, module_type_store, ['Normalize'])
        nest_module(stypy.reporting.localization.Localization(__file__, 57, 0), __file__, sys_modules_114672, sys_modules_114672.module_type_store, module_type_store)
    else:
        from matplotlib.colors import Normalize

        import_from_module(stypy.reporting.localization.Localization(__file__, 57, 0), 'matplotlib.colors', None, module_type_store, ['Normalize'], [Normalize])

else:
    # Assigning a type to the variable 'matplotlib.colors' (line 57)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 57, 0), 'matplotlib.colors', import_114671)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 58, 0))

# 'from matplotlib.lines import Line2D' statement (line 58)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114673 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 58, 0), 'matplotlib.lines')

if (type(import_114673) is not StypyTypeError):

    if (import_114673 != 'pyd_module'):
        __import__(import_114673)
        sys_modules_114674 = sys.modules[import_114673]
        import_from_module(stypy.reporting.localization.Localization(__file__, 58, 0), 'matplotlib.lines', sys_modules_114674.module_type_store, module_type_store, ['Line2D'])
        nest_module(stypy.reporting.localization.Localization(__file__, 58, 0), __file__, sys_modules_114674, sys_modules_114674.module_type_store, module_type_store)
    else:
        from matplotlib.lines import Line2D

        import_from_module(stypy.reporting.localization.Localization(__file__, 58, 0), 'matplotlib.lines', None, module_type_store, ['Line2D'], [Line2D])

else:
    # Assigning a type to the variable 'matplotlib.lines' (line 58)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 58, 0), 'matplotlib.lines', import_114673)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 59, 0))

# 'from matplotlib.text import Text, Annotation' statement (line 59)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114675 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 59, 0), 'matplotlib.text')

if (type(import_114675) is not StypyTypeError):

    if (import_114675 != 'pyd_module'):
        __import__(import_114675)
        sys_modules_114676 = sys.modules[import_114675]
        import_from_module(stypy.reporting.localization.Localization(__file__, 59, 0), 'matplotlib.text', sys_modules_114676.module_type_store, module_type_store, ['Text', 'Annotation'])
        nest_module(stypy.reporting.localization.Localization(__file__, 59, 0), __file__, sys_modules_114676, sys_modules_114676.module_type_store, module_type_store)
    else:
        from matplotlib.text import Text, Annotation

        import_from_module(stypy.reporting.localization.Localization(__file__, 59, 0), 'matplotlib.text', None, module_type_store, ['Text', 'Annotation'], [Text, Annotation])

else:
    # Assigning a type to the variable 'matplotlib.text' (line 59)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 59, 0), 'matplotlib.text', import_114675)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 60, 0))

# 'from matplotlib.patches import Polygon, Rectangle, Circle, Arrow' statement (line 60)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114677 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 60, 0), 'matplotlib.patches')

if (type(import_114677) is not StypyTypeError):

    if (import_114677 != 'pyd_module'):
        __import__(import_114677)
        sys_modules_114678 = sys.modules[import_114677]
        import_from_module(stypy.reporting.localization.Localization(__file__, 60, 0), 'matplotlib.patches', sys_modules_114678.module_type_store, module_type_store, ['Polygon', 'Rectangle', 'Circle', 'Arrow'])
        nest_module(stypy.reporting.localization.Localization(__file__, 60, 0), __file__, sys_modules_114678, sys_modules_114678.module_type_store, module_type_store)
    else:
        from matplotlib.patches import Polygon, Rectangle, Circle, Arrow

        import_from_module(stypy.reporting.localization.Localization(__file__, 60, 0), 'matplotlib.patches', None, module_type_store, ['Polygon', 'Rectangle', 'Circle', 'Arrow'], [Polygon, Rectangle, Circle, Arrow])

else:
    # Assigning a type to the variable 'matplotlib.patches' (line 60)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 60, 0), 'matplotlib.patches', import_114677)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 61, 0))

# 'from matplotlib.widgets import SubplotTool, Button, Slider, Widget' statement (line 61)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114679 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 61, 0), 'matplotlib.widgets')

if (type(import_114679) is not StypyTypeError):

    if (import_114679 != 'pyd_module'):
        __import__(import_114679)
        sys_modules_114680 = sys.modules[import_114679]
        import_from_module(stypy.reporting.localization.Localization(__file__, 61, 0), 'matplotlib.widgets', sys_modules_114680.module_type_store, module_type_store, ['SubplotTool', 'Button', 'Slider', 'Widget'])
        nest_module(stypy.reporting.localization.Localization(__file__, 61, 0), __file__, sys_modules_114680, sys_modules_114680.module_type_store, module_type_store)
    else:
        from matplotlib.widgets import SubplotTool, Button, Slider, Widget

        import_from_module(stypy.reporting.localization.Localization(__file__, 61, 0), 'matplotlib.widgets', None, module_type_store, ['SubplotTool', 'Button', 'Slider', 'Widget'], [SubplotTool, Button, Slider, Widget])

else:
    # Assigning a type to the variable 'matplotlib.widgets' (line 61)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 61, 0), 'matplotlib.widgets', import_114679)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 63, 0))

# 'from matplotlib.ticker import TickHelper, Formatter, FixedFormatter, NullFormatter, FuncFormatter, FormatStrFormatter, ScalarFormatter, LogFormatter, LogFormatterExponent, LogFormatterMathtext, Locator, IndexLocator, FixedLocator, NullLocator, LinearLocator, LogLocator, AutoLocator, MultipleLocator, MaxNLocator' statement (line 63)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114681 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 63, 0), 'matplotlib.ticker')

if (type(import_114681) is not StypyTypeError):

    if (import_114681 != 'pyd_module'):
        __import__(import_114681)
        sys_modules_114682 = sys.modules[import_114681]
        import_from_module(stypy.reporting.localization.Localization(__file__, 63, 0), 'matplotlib.ticker', sys_modules_114682.module_type_store, module_type_store, ['TickHelper', 'Formatter', 'FixedFormatter', 'NullFormatter', 'FuncFormatter', 'FormatStrFormatter', 'ScalarFormatter', 'LogFormatter', 'LogFormatterExponent', 'LogFormatterMathtext', 'Locator', 'IndexLocator', 'FixedLocator', 'NullLocator', 'LinearLocator', 'LogLocator', 'AutoLocator', 'MultipleLocator', 'MaxNLocator'])
        nest_module(stypy.reporting.localization.Localization(__file__, 63, 0), __file__, sys_modules_114682, sys_modules_114682.module_type_store, module_type_store)
    else:
        from matplotlib.ticker import TickHelper, Formatter, FixedFormatter, NullFormatter, FuncFormatter, FormatStrFormatter, ScalarFormatter, LogFormatter, LogFormatterExponent, LogFormatterMathtext, Locator, IndexLocator, FixedLocator, NullLocator, LinearLocator, LogLocator, AutoLocator, MultipleLocator, MaxNLocator

        import_from_module(stypy.reporting.localization.Localization(__file__, 63, 0), 'matplotlib.ticker', None, module_type_store, ['TickHelper', 'Formatter', 'FixedFormatter', 'NullFormatter', 'FuncFormatter', 'FormatStrFormatter', 'ScalarFormatter', 'LogFormatter', 'LogFormatterExponent', 'LogFormatterMathtext', 'Locator', 'IndexLocator', 'FixedLocator', 'NullLocator', 'LinearLocator', 'LogLocator', 'AutoLocator', 'MultipleLocator', 'MaxNLocator'], [TickHelper, Formatter, FixedFormatter, NullFormatter, FuncFormatter, FormatStrFormatter, ScalarFormatter, LogFormatter, LogFormatterExponent, LogFormatterMathtext, Locator, IndexLocator, FixedLocator, NullLocator, LinearLocator, LogLocator, AutoLocator, MultipleLocator, MaxNLocator])

else:
    # Assigning a type to the variable 'matplotlib.ticker' (line 63)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 63, 0), 'matplotlib.ticker', import_114681)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')

stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 69, 0))

# 'from matplotlib.backends import pylab_setup' statement (line 69)
update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
import_114683 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 69, 0), 'matplotlib.backends')

if (type(import_114683) is not StypyTypeError):

    if (import_114683 != 'pyd_module'):
        __import__(import_114683)
        sys_modules_114684 = sys.modules[import_114683]
        import_from_module(stypy.reporting.localization.Localization(__file__, 69, 0), 'matplotlib.backends', sys_modules_114684.module_type_store, module_type_store, ['pylab_setup'])
        nest_module(stypy.reporting.localization.Localization(__file__, 69, 0), __file__, sys_modules_114684, sys_modules_114684.module_type_store, module_type_store)
    else:
        from matplotlib.backends import pylab_setup

        import_from_module(stypy.reporting.localization.Localization(__file__, 69, 0), 'matplotlib.backends', None, module_type_store, ['pylab_setup'], [pylab_setup])

else:
    # Assigning a type to the variable 'matplotlib.backends' (line 69)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 69, 0), 'matplotlib.backends', import_114683)

remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')


@norecursion
def _backend_selection(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_backend_selection'
    module_type_store = module_type_store.open_function_context('_backend_selection', 72, 0, False)
    
    # Passed parameters checking function
    _backend_selection.stypy_localization = localization
    _backend_selection.stypy_type_of_self = None
    _backend_selection.stypy_type_store = module_type_store
    _backend_selection.stypy_function_name = '_backend_selection'
    _backend_selection.stypy_param_names_list = []
    _backend_selection.stypy_varargs_param_name = None
    _backend_selection.stypy_kwargs_param_name = None
    _backend_selection.stypy_call_defaults = defaults
    _backend_selection.stypy_call_varargs = varargs
    _backend_selection.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_backend_selection', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_backend_selection', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_backend_selection(...)' code ##################

    unicode_114685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 76, (-1)), 'unicode', u" If rcParams['backend_fallback'] is true, check to see if the\n        current backend is compatible with the current running event\n        loop, and if not switches to a compatible one.\n    ")
    
    # Assigning a Subscript to a Name (line 77):
    
    # Assigning a Subscript to a Name (line 77):
    
    # Obtaining the type of the subscript
    unicode_114686 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 77, 23), 'unicode', u'backend')
    # Getting the type of 'rcParams' (line 77)
    rcParams_114687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 77, 14), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 77)
    getitem___114688 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 77, 14), rcParams_114687, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 77)
    subscript_call_result_114689 = invoke(stypy.reporting.localization.Localization(__file__, 77, 14), getitem___114688, unicode_114686)
    
    # Assigning a type to the variable 'backend' (line 77)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 77, 4), 'backend', subscript_call_result_114689)
    
    
    # Evaluating a boolean operation
    
    
    # Obtaining the type of the subscript
    unicode_114690 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 78, 20), 'unicode', u'backend_fallback')
    # Getting the type of 'rcParams' (line 78)
    rcParams_114691 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 11), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 78)
    getitem___114692 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 78, 11), rcParams_114691, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 78)
    subscript_call_result_114693 = invoke(stypy.reporting.localization.Localization(__file__, 78, 11), getitem___114692, unicode_114690)
    
    # Applying the 'not' unary operator (line 78)
    result_not__114694 = python_operator(stypy.reporting.localization.Localization(__file__, 78, 7), 'not', subscript_call_result_114693)
    
    
    # Getting the type of 'backend' (line 78)
    backend_114695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 43), 'backend')
    # Getting the type of '_interactive_bk' (line 78)
    _interactive_bk_114696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 78, 58), '_interactive_bk')
    # Applying the binary operator 'notin' (line 78)
    result_contains_114697 = python_operator(stypy.reporting.localization.Localization(__file__, 78, 43), 'notin', backend_114695, _interactive_bk_114696)
    
    # Applying the binary operator 'or' (line 78)
    result_or_keyword_114698 = python_operator(stypy.reporting.localization.Localization(__file__, 78, 7), 'or', result_not__114694, result_contains_114697)
    
    # Testing the type of an if condition (line 78)
    if_condition_114699 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 78, 4), result_or_keyword_114698)
    # Assigning a type to the variable 'if_condition_114699' (line 78)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 78, 4), 'if_condition_114699', if_condition_114699)
    # SSA begins for if statement (line 78)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Assigning a type to the variable 'stypy_return_type' (line 79)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 79, 8), 'stypy_return_type', types.NoneType)
    # SSA join for if statement (line 78)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 80):
    
    # Assigning a Call to a Name (line 80):
    
    # Call to endswith(...): (line 80)
    # Processing the call arguments (line 80)
    unicode_114705 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 80, 50), 'unicode', u'Agg')
    # Processing the call keyword arguments (line 80)
    kwargs_114706 = {}
    
    # Obtaining the type of the subscript
    unicode_114700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 80, 30), 'unicode', u'backend')
    # Getting the type of 'rcParams' (line 80)
    rcParams_114701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 80, 21), 'rcParams', False)
    # Obtaining the member '__getitem__' of a type (line 80)
    getitem___114702 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 80, 21), rcParams_114701, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 80)
    subscript_call_result_114703 = invoke(stypy.reporting.localization.Localization(__file__, 80, 21), getitem___114702, unicode_114700)
    
    # Obtaining the member 'endswith' of a type (line 80)
    endswith_114704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 80, 21), subscript_call_result_114703, 'endswith')
    # Calling endswith(args, kwargs) (line 80)
    endswith_call_result_114707 = invoke(stypy.reporting.localization.Localization(__file__, 80, 21), endswith_114704, *[unicode_114705], **kwargs_114706)
    
    # Assigning a type to the variable 'is_agg_backend' (line 80)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 80, 4), 'is_agg_backend', endswith_call_result_114707)
    
    
    # Evaluating a boolean operation
    
    unicode_114708 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 7), 'unicode', u'wx')
    # Getting the type of 'sys' (line 81)
    sys_114709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 15), 'sys')
    # Obtaining the member 'modules' of a type (line 81)
    modules_114710 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 81, 15), sys_114709, 'modules')
    # Applying the binary operator 'in' (line 81)
    result_contains_114711 = python_operator(stypy.reporting.localization.Localization(__file__, 81, 7), 'in', unicode_114708, modules_114710)
    
    
    
    # Getting the type of 'backend' (line 81)
    backend_114712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 81, 35), 'backend')
    
    # Obtaining an instance of the builtin type 'tuple' (line 81)
    tuple_114713 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 47), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 81)
    # Adding element type (line 81)
    unicode_114714 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 47), 'unicode', u'WX')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 81, 47), tuple_114713, unicode_114714)
    # Adding element type (line 81)
    unicode_114715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 81, 53), 'unicode', u'WXAgg')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 81, 47), tuple_114713, unicode_114715)
    
    # Applying the binary operator 'in' (line 81)
    result_contains_114716 = python_operator(stypy.reporting.localization.Localization(__file__, 81, 35), 'in', backend_114712, tuple_114713)
    
    # Applying the 'not' unary operator (line 81)
    result_not__114717 = python_operator(stypy.reporting.localization.Localization(__file__, 81, 31), 'not', result_contains_114716)
    
    # Applying the binary operator 'and' (line 81)
    result_and_keyword_114718 = python_operator(stypy.reporting.localization.Localization(__file__, 81, 7), 'and', result_contains_114711, result_not__114717)
    
    # Testing the type of an if condition (line 81)
    if_condition_114719 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 81, 4), result_and_keyword_114718)
    # Assigning a type to the variable 'if_condition_114719' (line 81)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 81, 4), 'if_condition_114719', if_condition_114719)
    # SSA begins for if statement (line 81)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 82, 8))
    
    # 'import wx' statement (line 82)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_114720 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 82, 8), 'wx')

    if (type(import_114720) is not StypyTypeError):

        if (import_114720 != 'pyd_module'):
            __import__(import_114720)
            sys_modules_114721 = sys.modules[import_114720]
            import_module(stypy.reporting.localization.Localization(__file__, 82, 8), 'wx', sys_modules_114721.module_type_store, module_type_store)
        else:
            import wx

            import_module(stypy.reporting.localization.Localization(__file__, 82, 8), 'wx', wx, module_type_store)

    else:
        # Assigning a type to the variable 'wx' (line 82)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 82, 8), 'wx', import_114720)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    
    # Call to IsMainLoopRunning(...): (line 83)
    # Processing the call keyword arguments (line 83)
    kwargs_114725 = {}
    # Getting the type of 'wx' (line 83)
    wx_114722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 83, 11), 'wx', False)
    # Obtaining the member 'App' of a type (line 83)
    App_114723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 83, 11), wx_114722, 'App')
    # Obtaining the member 'IsMainLoopRunning' of a type (line 83)
    IsMainLoopRunning_114724 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 83, 11), App_114723, 'IsMainLoopRunning')
    # Calling IsMainLoopRunning(args, kwargs) (line 83)
    IsMainLoopRunning_call_result_114726 = invoke(stypy.reporting.localization.Localization(__file__, 83, 11), IsMainLoopRunning_114724, *[], **kwargs_114725)
    
    # Testing the type of an if condition (line 83)
    if_condition_114727 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 83, 8), IsMainLoopRunning_call_result_114726)
    # Assigning a type to the variable 'if_condition_114727' (line 83)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 83, 8), 'if_condition_114727', if_condition_114727)
    # SSA begins for if statement (line 83)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Subscript (line 84):
    
    # Assigning a BinOp to a Subscript (line 84):
    unicode_114728 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 34), 'unicode', u'wx')
    unicode_114729 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 41), 'unicode', u'Agg')
    # Getting the type of 'is_agg_backend' (line 84)
    is_agg_backend_114730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 49), 'is_agg_backend')
    # Applying the binary operator '*' (line 84)
    result_mul_114731 = python_operator(stypy.reporting.localization.Localization(__file__, 84, 41), '*', unicode_114729, is_agg_backend_114730)
    
    # Applying the binary operator '+' (line 84)
    result_add_114732 = python_operator(stypy.reporting.localization.Localization(__file__, 84, 34), '+', unicode_114728, result_mul_114731)
    
    # Getting the type of 'rcParams' (line 84)
    rcParams_114733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 84, 12), 'rcParams')
    unicode_114734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 84, 21), 'unicode', u'backend')
    # Storing an element on a container (line 84)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 84, 12), rcParams_114733, (unicode_114734, result_add_114732))
    # SSA join for if statement (line 83)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 81)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    unicode_114735 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 9), 'unicode', u'PyQt4.QtCore')
    # Getting the type of 'sys' (line 85)
    sys_114736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 27), 'sys')
    # Obtaining the member 'modules' of a type (line 85)
    modules_114737 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 85, 27), sys_114736, 'modules')
    # Applying the binary operator 'in' (line 85)
    result_contains_114738 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 9), 'in', unicode_114735, modules_114737)
    
    
    
    # Getting the type of 'backend' (line 85)
    backend_114739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 85, 47), 'backend')
    unicode_114740 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 85, 58), 'unicode', u'Qt4Agg')
    # Applying the binary operator '==' (line 85)
    result_eq_114741 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 47), '==', backend_114739, unicode_114740)
    
    # Applying the 'not' unary operator (line 85)
    result_not__114742 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 43), 'not', result_eq_114741)
    
    # Applying the binary operator 'and' (line 85)
    result_and_keyword_114743 = python_operator(stypy.reporting.localization.Localization(__file__, 85, 9), 'and', result_contains_114738, result_not__114742)
    
    # Testing the type of an if condition (line 85)
    if_condition_114744 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 85, 9), result_and_keyword_114743)
    # Assigning a type to the variable 'if_condition_114744' (line 85)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 85, 9), 'if_condition_114744', if_condition_114744)
    # SSA begins for if statement (line 85)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 86, 8))
    
    # 'import PyQt4.QtGui' statement (line 86)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_114745 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 86, 8), 'PyQt4.QtGui')

    if (type(import_114745) is not StypyTypeError):

        if (import_114745 != 'pyd_module'):
            __import__(import_114745)
            sys_modules_114746 = sys.modules[import_114745]
            import_module(stypy.reporting.localization.Localization(__file__, 86, 8), 'PyQt4.QtGui', sys_modules_114746.module_type_store, module_type_store)
        else:
            import PyQt4.QtGui

            import_module(stypy.reporting.localization.Localization(__file__, 86, 8), 'PyQt4.QtGui', PyQt4.QtGui, module_type_store)

    else:
        # Assigning a type to the variable 'PyQt4.QtGui' (line 86)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 86, 8), 'PyQt4.QtGui', import_114745)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    
    
    # Call to startingUp(...): (line 87)
    # Processing the call keyword arguments (line 87)
    kwargs_114751 = {}
    # Getting the type of 'PyQt4' (line 87)
    PyQt4_114747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 87, 15), 'PyQt4', False)
    # Obtaining the member 'QtGui' of a type (line 87)
    QtGui_114748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 87, 15), PyQt4_114747, 'QtGui')
    # Obtaining the member 'qApp' of a type (line 87)
    qApp_114749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 87, 15), QtGui_114748, 'qApp')
    # Obtaining the member 'startingUp' of a type (line 87)
    startingUp_114750 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 87, 15), qApp_114749, 'startingUp')
    # Calling startingUp(args, kwargs) (line 87)
    startingUp_call_result_114752 = invoke(stypy.reporting.localization.Localization(__file__, 87, 15), startingUp_114750, *[], **kwargs_114751)
    
    # Applying the 'not' unary operator (line 87)
    result_not__114753 = python_operator(stypy.reporting.localization.Localization(__file__, 87, 11), 'not', startingUp_call_result_114752)
    
    # Testing the type of an if condition (line 87)
    if_condition_114754 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 87, 8), result_not__114753)
    # Assigning a type to the variable 'if_condition_114754' (line 87)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 87, 8), 'if_condition_114754', if_condition_114754)
    # SSA begins for if statement (line 87)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Subscript (line 89):
    
    # Assigning a Str to a Subscript (line 89):
    unicode_114755 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 34), 'unicode', u'qt4Agg')
    # Getting the type of 'rcParams' (line 89)
    rcParams_114756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 89, 12), 'rcParams')
    unicode_114757 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 89, 21), 'unicode', u'backend')
    # Storing an element on a container (line 89)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 89, 12), rcParams_114756, (unicode_114757, unicode_114755))
    # SSA join for if statement (line 87)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 85)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    unicode_114758 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 9), 'unicode', u'PyQt5.QtCore')
    # Getting the type of 'sys' (line 90)
    sys_114759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 27), 'sys')
    # Obtaining the member 'modules' of a type (line 90)
    modules_114760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 90, 27), sys_114759, 'modules')
    # Applying the binary operator 'in' (line 90)
    result_contains_114761 = python_operator(stypy.reporting.localization.Localization(__file__, 90, 9), 'in', unicode_114758, modules_114760)
    
    
    
    # Getting the type of 'backend' (line 90)
    backend_114762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 90, 47), 'backend')
    unicode_114763 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 90, 58), 'unicode', u'Qt5Agg')
    # Applying the binary operator '==' (line 90)
    result_eq_114764 = python_operator(stypy.reporting.localization.Localization(__file__, 90, 47), '==', backend_114762, unicode_114763)
    
    # Applying the 'not' unary operator (line 90)
    result_not__114765 = python_operator(stypy.reporting.localization.Localization(__file__, 90, 43), 'not', result_eq_114764)
    
    # Applying the binary operator 'and' (line 90)
    result_and_keyword_114766 = python_operator(stypy.reporting.localization.Localization(__file__, 90, 9), 'and', result_contains_114761, result_not__114765)
    
    # Testing the type of an if condition (line 90)
    if_condition_114767 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 90, 9), result_and_keyword_114766)
    # Assigning a type to the variable 'if_condition_114767' (line 90)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 90, 9), 'if_condition_114767', if_condition_114767)
    # SSA begins for if statement (line 90)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 91, 8))
    
    # 'import PyQt5.QtWidgets' statement (line 91)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_114768 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 91, 8), 'PyQt5.QtWidgets')

    if (type(import_114768) is not StypyTypeError):

        if (import_114768 != 'pyd_module'):
            __import__(import_114768)
            sys_modules_114769 = sys.modules[import_114768]
            import_module(stypy.reporting.localization.Localization(__file__, 91, 8), 'PyQt5.QtWidgets', sys_modules_114769.module_type_store, module_type_store)
        else:
            import PyQt5.QtWidgets

            import_module(stypy.reporting.localization.Localization(__file__, 91, 8), 'PyQt5.QtWidgets', PyQt5.QtWidgets, module_type_store)

    else:
        # Assigning a type to the variable 'PyQt5.QtWidgets' (line 91)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 91, 8), 'PyQt5.QtWidgets', import_114768)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    
    
    # Call to startingUp(...): (line 92)
    # Processing the call keyword arguments (line 92)
    kwargs_114774 = {}
    # Getting the type of 'PyQt5' (line 92)
    PyQt5_114770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 92, 15), 'PyQt5', False)
    # Obtaining the member 'QtWidgets' of a type (line 92)
    QtWidgets_114771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 15), PyQt5_114770, 'QtWidgets')
    # Obtaining the member 'qApp' of a type (line 92)
    qApp_114772 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 15), QtWidgets_114771, 'qApp')
    # Obtaining the member 'startingUp' of a type (line 92)
    startingUp_114773 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 92, 15), qApp_114772, 'startingUp')
    # Calling startingUp(args, kwargs) (line 92)
    startingUp_call_result_114775 = invoke(stypy.reporting.localization.Localization(__file__, 92, 15), startingUp_114773, *[], **kwargs_114774)
    
    # Applying the 'not' unary operator (line 92)
    result_not__114776 = python_operator(stypy.reporting.localization.Localization(__file__, 92, 11), 'not', startingUp_call_result_114775)
    
    # Testing the type of an if condition (line 92)
    if_condition_114777 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 92, 8), result_not__114776)
    # Assigning a type to the variable 'if_condition_114777' (line 92)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 92, 8), 'if_condition_114777', if_condition_114777)
    # SSA begins for if statement (line 92)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Str to a Subscript (line 94):
    
    # Assigning a Str to a Subscript (line 94):
    unicode_114778 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 34), 'unicode', u'qt5Agg')
    # Getting the type of 'rcParams' (line 94)
    rcParams_114779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 94, 12), 'rcParams')
    unicode_114780 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 94, 21), 'unicode', u'backend')
    # Storing an element on a container (line 94)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 94, 12), rcParams_114779, (unicode_114780, unicode_114778))
    # SSA join for if statement (line 92)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 90)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    unicode_114781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 95, 10), 'unicode', u'gtk')
    # Getting the type of 'sys' (line 95)
    sys_114782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 95, 19), 'sys')
    # Obtaining the member 'modules' of a type (line 95)
    modules_114783 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 95, 19), sys_114782, 'modules')
    # Applying the binary operator 'in' (line 95)
    result_contains_114784 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 10), 'in', unicode_114781, modules_114783)
    
    
    # Getting the type of 'backend' (line 96)
    backend_114785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 96, 10), 'backend')
    
    # Obtaining an instance of the builtin type 'tuple' (line 96)
    tuple_114786 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 96)
    # Adding element type (line 96)
    unicode_114787 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 26), 'unicode', u'GTK')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 96, 26), tuple_114786, unicode_114787)
    # Adding element type (line 96)
    unicode_114788 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 33), 'unicode', u'GTKAgg')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 96, 26), tuple_114786, unicode_114788)
    # Adding element type (line 96)
    unicode_114789 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 96, 43), 'unicode', u'GTKCairo')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 96, 26), tuple_114786, unicode_114789)
    
    # Applying the binary operator 'notin' (line 96)
    result_contains_114790 = python_operator(stypy.reporting.localization.Localization(__file__, 96, 10), 'notin', backend_114785, tuple_114786)
    
    # Applying the binary operator 'and' (line 95)
    result_and_keyword_114791 = python_operator(stypy.reporting.localization.Localization(__file__, 95, 10), 'and', result_contains_114784, result_contains_114790)
    
    # Testing the type of an if condition (line 95)
    if_condition_114792 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 95, 9), result_and_keyword_114791)
    # Assigning a type to the variable 'if_condition_114792' (line 95)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 95, 9), 'if_condition_114792', if_condition_114792)
    # SSA begins for if statement (line 95)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    unicode_114793 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 97, 11), 'unicode', u'gi')
    # Getting the type of 'sys' (line 97)
    sys_114794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 97, 19), 'sys')
    # Obtaining the member 'modules' of a type (line 97)
    modules_114795 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 97, 19), sys_114794, 'modules')
    # Applying the binary operator 'in' (line 97)
    result_contains_114796 = python_operator(stypy.reporting.localization.Localization(__file__, 97, 11), 'in', unicode_114793, modules_114795)
    
    # Testing the type of an if condition (line 97)
    if_condition_114797 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 97, 8), result_contains_114796)
    # Assigning a type to the variable 'if_condition_114797' (line 97)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 97, 8), 'if_condition_114797', if_condition_114797)
    # SSA begins for if statement (line 97)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 98, 12))
    
    # 'from gi.repository import GObject' statement (line 98)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_114798 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 98, 12), 'gi.repository')

    if (type(import_114798) is not StypyTypeError):

        if (import_114798 != 'pyd_module'):
            __import__(import_114798)
            sys_modules_114799 = sys.modules[import_114798]
            import_from_module(stypy.reporting.localization.Localization(__file__, 98, 12), 'gi.repository', sys_modules_114799.module_type_store, module_type_store, ['GObject'])
            nest_module(stypy.reporting.localization.Localization(__file__, 98, 12), __file__, sys_modules_114799, sys_modules_114799.module_type_store, module_type_store)
        else:
            from gi.repository import GObject

            import_from_module(stypy.reporting.localization.Localization(__file__, 98, 12), 'gi.repository', None, module_type_store, ['GObject'], [GObject])

    else:
        # Assigning a type to the variable 'gi.repository' (line 98)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 98, 12), 'gi.repository', import_114798)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Attribute to a Name (line 99):
    
    # Assigning a Attribute to a Name (line 99):
    # Getting the type of 'GObject' (line 99)
    GObject_114800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 99, 17), 'GObject')
    # Obtaining the member 'MainLoop' of a type (line 99)
    MainLoop_114801 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 99, 17), GObject_114800, 'MainLoop')
    # Assigning a type to the variable 'ml' (line 99)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 99, 12), 'ml', MainLoop_114801)
    # SSA branch for the else part of an if statement (line 97)
    module_type_store.open_ssa_branch('else')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 101, 12))
    
    # 'import gobject' statement (line 101)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_114802 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 101, 12), 'gobject')

    if (type(import_114802) is not StypyTypeError):

        if (import_114802 != 'pyd_module'):
            __import__(import_114802)
            sys_modules_114803 = sys.modules[import_114802]
            import_module(stypy.reporting.localization.Localization(__file__, 101, 12), 'gobject', sys_modules_114803.module_type_store, module_type_store)
        else:
            import gobject

            import_module(stypy.reporting.localization.Localization(__file__, 101, 12), 'gobject', gobject, module_type_store)

    else:
        # Assigning a type to the variable 'gobject' (line 101)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 101, 12), 'gobject', import_114802)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Attribute to a Name (line 102):
    
    # Assigning a Attribute to a Name (line 102):
    # Getting the type of 'gobject' (line 102)
    gobject_114804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 102, 17), 'gobject')
    # Obtaining the member 'MainLoop' of a type (line 102)
    MainLoop_114805 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 102, 17), gobject_114804, 'MainLoop')
    # Assigning a type to the variable 'ml' (line 102)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 102, 12), 'ml', MainLoop_114805)
    # SSA join for if statement (line 97)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to is_running(...): (line 103)
    # Processing the call keyword arguments (line 103)
    kwargs_114810 = {}
    
    # Call to ml(...): (line 103)
    # Processing the call keyword arguments (line 103)
    kwargs_114807 = {}
    # Getting the type of 'ml' (line 103)
    ml_114806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 103, 11), 'ml', False)
    # Calling ml(args, kwargs) (line 103)
    ml_call_result_114808 = invoke(stypy.reporting.localization.Localization(__file__, 103, 11), ml_114806, *[], **kwargs_114807)
    
    # Obtaining the member 'is_running' of a type (line 103)
    is_running_114809 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 103, 11), ml_call_result_114808, 'is_running')
    # Calling is_running(args, kwargs) (line 103)
    is_running_call_result_114811 = invoke(stypy.reporting.localization.Localization(__file__, 103, 11), is_running_114809, *[], **kwargs_114810)
    
    # Testing the type of an if condition (line 103)
    if_condition_114812 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 103, 8), is_running_call_result_114811)
    # Assigning a type to the variable 'if_condition_114812' (line 103)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 103, 8), 'if_condition_114812', if_condition_114812)
    # SSA begins for if statement (line 103)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a BinOp to a Subscript (line 104):
    
    # Assigning a BinOp to a Subscript (line 104):
    unicode_114813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 34), 'unicode', u'gtk')
    unicode_114814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 42), 'unicode', u'Agg')
    # Getting the type of 'is_agg_backend' (line 104)
    is_agg_backend_114815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 50), 'is_agg_backend')
    # Applying the binary operator '*' (line 104)
    result_mul_114816 = python_operator(stypy.reporting.localization.Localization(__file__, 104, 42), '*', unicode_114814, is_agg_backend_114815)
    
    # Applying the binary operator '+' (line 104)
    result_add_114817 = python_operator(stypy.reporting.localization.Localization(__file__, 104, 34), '+', unicode_114813, result_mul_114816)
    
    # Getting the type of 'rcParams' (line 104)
    rcParams_114818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 104, 12), 'rcParams')
    unicode_114819 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 104, 21), 'unicode', u'backend')
    # Storing an element on a container (line 104)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 104, 12), rcParams_114818, (unicode_114819, result_add_114817))
    # SSA join for if statement (line 103)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 95)
    module_type_store.open_ssa_branch('else')
    
    
    # Evaluating a boolean operation
    
    unicode_114820 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 9), 'unicode', u'Tkinter')
    # Getting the type of 'sys' (line 105)
    sys_114821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 22), 'sys')
    # Obtaining the member 'modules' of a type (line 105)
    modules_114822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 105, 22), sys_114821, 'modules')
    # Applying the binary operator 'in' (line 105)
    result_contains_114823 = python_operator(stypy.reporting.localization.Localization(__file__, 105, 9), 'in', unicode_114820, modules_114822)
    
    
    
    # Getting the type of 'backend' (line 105)
    backend_114824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 105, 42), 'backend')
    unicode_114825 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 105, 53), 'unicode', u'TkAgg')
    # Applying the binary operator '==' (line 105)
    result_eq_114826 = python_operator(stypy.reporting.localization.Localization(__file__, 105, 42), '==', backend_114824, unicode_114825)
    
    # Applying the 'not' unary operator (line 105)
    result_not__114827 = python_operator(stypy.reporting.localization.Localization(__file__, 105, 38), 'not', result_eq_114826)
    
    # Applying the binary operator 'and' (line 105)
    result_and_keyword_114828 = python_operator(stypy.reporting.localization.Localization(__file__, 105, 9), 'and', result_contains_114823, result_not__114827)
    
    # Testing the type of an if condition (line 105)
    if_condition_114829 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 105, 9), result_and_keyword_114828)
    # Assigning a type to the variable 'if_condition_114829' (line 105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 105, 9), 'if_condition_114829', if_condition_114829)
    # SSA begins for if statement (line 105)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    pass
    # SSA join for if statement (line 105)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 95)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 90)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 85)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 81)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_backend_selection(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_backend_selection' in the type store
    # Getting the type of 'stypy_return_type' (line 72)
    stypy_return_type_114830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 72, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_114830)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_backend_selection'
    return stypy_return_type_114830

# Assigning a type to the variable '_backend_selection' (line 72)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 72, 0), '_backend_selection', _backend_selection)

# Call to _backend_selection(...): (line 109)
# Processing the call keyword arguments (line 109)
kwargs_114832 = {}
# Getting the type of '_backend_selection' (line 109)
_backend_selection_114831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 109, 0), '_backend_selection', False)
# Calling _backend_selection(args, kwargs) (line 109)
_backend_selection_call_result_114833 = invoke(stypy.reporting.localization.Localization(__file__, 109, 0), _backend_selection_114831, *[], **kwargs_114832)


# Assigning a Call to a Tuple (line 113):

# Assigning a Call to a Name:

# Call to pylab_setup(...): (line 113)
# Processing the call keyword arguments (line 113)
kwargs_114835 = {}
# Getting the type of 'pylab_setup' (line 113)
pylab_setup_114834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 63), 'pylab_setup', False)
# Calling pylab_setup(args, kwargs) (line 113)
pylab_setup_call_result_114836 = invoke(stypy.reporting.localization.Localization(__file__, 113, 63), pylab_setup_114834, *[], **kwargs_114835)

# Assigning a type to the variable 'call_assignment_114592' (line 113)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'call_assignment_114592', pylab_setup_call_result_114836)

# Assigning a Call to a Name (line 113):

# Call to __getitem__(...):
# Processing the call arguments
int_114839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 0), 'int')
# Processing the call keyword arguments
kwargs_114840 = {}
# Getting the type of 'call_assignment_114592' (line 113)
call_assignment_114592_114837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'call_assignment_114592', False)
# Obtaining the member '__getitem__' of a type (line 113)
getitem___114838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 0), call_assignment_114592_114837, '__getitem__')
# Calling __getitem__(args, kwargs)
getitem___call_result_114841 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___114838, *[int_114839], **kwargs_114840)

# Assigning a type to the variable 'call_assignment_114593' (line 113)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'call_assignment_114593', getitem___call_result_114841)

# Assigning a Name to a Name (line 113):
# Getting the type of 'call_assignment_114593' (line 113)
call_assignment_114593_114842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'call_assignment_114593')
# Assigning a type to the variable '_backend_mod' (line 113)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), '_backend_mod', call_assignment_114593_114842)

# Assigning a Call to a Name (line 113):

# Call to __getitem__(...):
# Processing the call arguments
int_114845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 0), 'int')
# Processing the call keyword arguments
kwargs_114846 = {}
# Getting the type of 'call_assignment_114592' (line 113)
call_assignment_114592_114843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'call_assignment_114592', False)
# Obtaining the member '__getitem__' of a type (line 113)
getitem___114844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 0), call_assignment_114592_114843, '__getitem__')
# Calling __getitem__(args, kwargs)
getitem___call_result_114847 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___114844, *[int_114845], **kwargs_114846)

# Assigning a type to the variable 'call_assignment_114594' (line 113)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'call_assignment_114594', getitem___call_result_114847)

# Assigning a Name to a Name (line 113):
# Getting the type of 'call_assignment_114594' (line 113)
call_assignment_114594_114848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'call_assignment_114594')
# Assigning a type to the variable 'new_figure_manager' (line 113)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 14), 'new_figure_manager', call_assignment_114594_114848)

# Assigning a Call to a Name (line 113):

# Call to __getitem__(...):
# Processing the call arguments
int_114851 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 0), 'int')
# Processing the call keyword arguments
kwargs_114852 = {}
# Getting the type of 'call_assignment_114592' (line 113)
call_assignment_114592_114849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'call_assignment_114592', False)
# Obtaining the member '__getitem__' of a type (line 113)
getitem___114850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 0), call_assignment_114592_114849, '__getitem__')
# Calling __getitem__(args, kwargs)
getitem___call_result_114853 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___114850, *[int_114851], **kwargs_114852)

# Assigning a type to the variable 'call_assignment_114595' (line 113)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'call_assignment_114595', getitem___call_result_114853)

# Assigning a Name to a Name (line 113):
# Getting the type of 'call_assignment_114595' (line 113)
call_assignment_114595_114854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'call_assignment_114595')
# Assigning a type to the variable 'draw_if_interactive' (line 113)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 34), 'draw_if_interactive', call_assignment_114595_114854)

# Assigning a Call to a Name (line 113):

# Call to __getitem__(...):
# Processing the call arguments
int_114857 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 113, 0), 'int')
# Processing the call keyword arguments
kwargs_114858 = {}
# Getting the type of 'call_assignment_114592' (line 113)
call_assignment_114592_114855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'call_assignment_114592', False)
# Obtaining the member '__getitem__' of a type (line 113)
getitem___114856 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 113, 0), call_assignment_114592_114855, '__getitem__')
# Calling __getitem__(args, kwargs)
getitem___call_result_114859 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___114856, *[int_114857], **kwargs_114858)

# Assigning a type to the variable 'call_assignment_114596' (line 113)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'call_assignment_114596', getitem___call_result_114859)

# Assigning a Name to a Name (line 113):
# Getting the type of 'call_assignment_114596' (line 113)
call_assignment_114596_114860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 113, 0), 'call_assignment_114596')
# Assigning a type to the variable '_show' (line 113)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 113, 55), '_show', call_assignment_114596_114860)

# Assigning a Name to a Name (line 115):

# Assigning a Name to a Name (line 115):
# Getting the type of 'None' (line 115)
None_114861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 115, 17), 'None')
# Assigning a type to the variable '_IP_REGISTERED' (line 115)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 115, 0), '_IP_REGISTERED', None_114861)

# Assigning a Name to a Name (line 116):

# Assigning a Name to a Name (line 116):
# Getting the type of 'False' (line 116)
False_114862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 116, 24), 'False')
# Assigning a type to the variable '_INSTALL_FIG_OBSERVER' (line 116)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 116, 0), '_INSTALL_FIG_OBSERVER', False_114862)

@norecursion
def install_repl_displayhook(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'install_repl_displayhook'
    module_type_store = module_type_store.open_function_context('install_repl_displayhook', 119, 0, False)
    
    # Passed parameters checking function
    install_repl_displayhook.stypy_localization = localization
    install_repl_displayhook.stypy_type_of_self = None
    install_repl_displayhook.stypy_type_store = module_type_store
    install_repl_displayhook.stypy_function_name = 'install_repl_displayhook'
    install_repl_displayhook.stypy_param_names_list = []
    install_repl_displayhook.stypy_varargs_param_name = None
    install_repl_displayhook.stypy_kwargs_param_name = None
    install_repl_displayhook.stypy_call_defaults = defaults
    install_repl_displayhook.stypy_call_varargs = varargs
    install_repl_displayhook.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'install_repl_displayhook', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'install_repl_displayhook', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'install_repl_displayhook(...)' code ##################

    unicode_114863 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 126, (-1)), 'unicode', u'\n    Install a repl display hook so that any stale figure are automatically\n    redrawn when control is returned to the repl.\n\n    This works with IPython terminals and kernels,\n    as well as vanilla python shells.\n    ')
    # Marking variables as global (line 127)
    module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 127, 4), '_IP_REGISTERED')
    # Marking variables as global (line 128)
    module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 128, 4), '_INSTALL_FIG_OBSERVER')
    # Declaration of the '_NotIPython' class
    # Getting the type of 'Exception' (line 130)
    Exception_114864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 130, 22), 'Exception')

    class _NotIPython(Exception_114864, ):
        pass

        @norecursion
        def __init__(type_of_self, localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function '__init__'
            module_type_store = module_type_store.open_function_context('__init__', 130, 4, False)
            # Assigning a type to the variable 'self' (line 131)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 131, 4), 'self', type_of_self)
            
            # Passed parameters checking function
            arguments = process_argument_values(localization, type_of_self, module_type_store, '_NotIPython.__init__', [], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return

            # Initialize method data
            init_call_information(module_type_store, '__init__', localization, [], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of '__init__(...)' code ##################

            pass
            
            # ################# End of '__init__(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()

    
    # Assigning a type to the variable '_NotIPython' (line 130)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 130, 4), '_NotIPython', _NotIPython)
    
    
    # SSA begins for try-except statement (line 135)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    
    unicode_114865 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 136, 11), 'unicode', u'IPython')
    # Getting the type of 'sys' (line 136)
    sys_114866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 136, 24), 'sys')
    # Obtaining the member 'modules' of a type (line 136)
    modules_114867 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 136, 24), sys_114866, 'modules')
    # Applying the binary operator 'in' (line 136)
    result_contains_114868 = python_operator(stypy.reporting.localization.Localization(__file__, 136, 11), 'in', unicode_114865, modules_114867)
    
    # Testing the type of an if condition (line 136)
    if_condition_114869 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 136, 8), result_contains_114868)
    # Assigning a type to the variable 'if_condition_114869' (line 136)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 136, 8), 'if_condition_114869', if_condition_114869)
    # SSA begins for if statement (line 136)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 137, 12))
    
    # 'from IPython import get_ipython' statement (line 137)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_114870 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 137, 12), 'IPython')

    if (type(import_114870) is not StypyTypeError):

        if (import_114870 != 'pyd_module'):
            __import__(import_114870)
            sys_modules_114871 = sys.modules[import_114870]
            import_from_module(stypy.reporting.localization.Localization(__file__, 137, 12), 'IPython', sys_modules_114871.module_type_store, module_type_store, ['get_ipython'])
            nest_module(stypy.reporting.localization.Localization(__file__, 137, 12), __file__, sys_modules_114871, sys_modules_114871.module_type_store, module_type_store)
        else:
            from IPython import get_ipython

            import_from_module(stypy.reporting.localization.Localization(__file__, 137, 12), 'IPython', None, module_type_store, ['get_ipython'], [get_ipython])

    else:
        # Assigning a type to the variable 'IPython' (line 137)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 137, 12), 'IPython', import_114870)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Call to a Name (line 138):
    
    # Assigning a Call to a Name (line 138):
    
    # Call to get_ipython(...): (line 138)
    # Processing the call keyword arguments (line 138)
    kwargs_114873 = {}
    # Getting the type of 'get_ipython' (line 138)
    get_ipython_114872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 138, 17), 'get_ipython', False)
    # Calling get_ipython(args, kwargs) (line 138)
    get_ipython_call_result_114874 = invoke(stypy.reporting.localization.Localization(__file__, 138, 17), get_ipython_114872, *[], **kwargs_114873)
    
    # Assigning a type to the variable 'ip' (line 138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 138, 12), 'ip', get_ipython_call_result_114874)
    
    # Type idiom detected: calculating its left and rigth part (line 139)
    # Getting the type of 'ip' (line 139)
    ip_114875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 15), 'ip')
    # Getting the type of 'None' (line 139)
    None_114876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 139, 21), 'None')
    
    (may_be_114877, more_types_in_union_114878) = may_be_none(ip_114875, None_114876)

    if may_be_114877:

        if more_types_in_union_114878:
            # Runtime conditional SSA (line 139)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to _NotIPython(...): (line 140)
        # Processing the call keyword arguments (line 140)
        kwargs_114880 = {}
        # Getting the type of '_NotIPython' (line 140)
        _NotIPython_114879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 140, 22), '_NotIPython', False)
        # Calling _NotIPython(args, kwargs) (line 140)
        _NotIPython_call_result_114881 = invoke(stypy.reporting.localization.Localization(__file__, 140, 22), _NotIPython_114879, *[], **kwargs_114880)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 140, 16), _NotIPython_call_result_114881, 'raise parameter', BaseException)

        if more_types_in_union_114878:
            # SSA join for if statement (line 139)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of '_IP_REGISTERED' (line 142)
    _IP_REGISTERED_114882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 142, 15), '_IP_REGISTERED')
    # Testing the type of an if condition (line 142)
    if_condition_114883 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 142, 12), _IP_REGISTERED_114882)
    # Assigning a type to the variable 'if_condition_114883' (line 142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 142, 12), 'if_condition_114883', if_condition_114883)
    # SSA begins for if statement (line 142)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # Assigning a type to the variable 'stypy_return_type' (line 143)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 143, 16), 'stypy_return_type', types.NoneType)
    # SSA join for if statement (line 142)
    module_type_store = module_type_store.join_ssa_context()
    

    @norecursion
    def post_execute(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'post_execute'
        module_type_store = module_type_store.open_function_context('post_execute', 145, 12, False)
        
        # Passed parameters checking function
        post_execute.stypy_localization = localization
        post_execute.stypy_type_of_self = None
        post_execute.stypy_type_store = module_type_store
        post_execute.stypy_function_name = 'post_execute'
        post_execute.stypy_param_names_list = []
        post_execute.stypy_varargs_param_name = None
        post_execute.stypy_kwargs_param_name = None
        post_execute.stypy_call_defaults = defaults
        post_execute.stypy_call_varargs = varargs
        post_execute.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'post_execute', [], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'post_execute', localization, [], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'post_execute(...)' code ##################

        
        
        # Call to is_interactive(...): (line 146)
        # Processing the call keyword arguments (line 146)
        kwargs_114886 = {}
        # Getting the type of 'matplotlib' (line 146)
        matplotlib_114884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 146, 19), 'matplotlib', False)
        # Obtaining the member 'is_interactive' of a type (line 146)
        is_interactive_114885 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 146, 19), matplotlib_114884, 'is_interactive')
        # Calling is_interactive(args, kwargs) (line 146)
        is_interactive_call_result_114887 = invoke(stypy.reporting.localization.Localization(__file__, 146, 19), is_interactive_114885, *[], **kwargs_114886)
        
        # Testing the type of an if condition (line 146)
        if_condition_114888 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 146, 16), is_interactive_call_result_114887)
        # Assigning a type to the variable 'if_condition_114888' (line 146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 146, 16), 'if_condition_114888', if_condition_114888)
        # SSA begins for if statement (line 146)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw_all(...): (line 147)
        # Processing the call keyword arguments (line 147)
        kwargs_114890 = {}
        # Getting the type of 'draw_all' (line 147)
        draw_all_114889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 147, 20), 'draw_all', False)
        # Calling draw_all(args, kwargs) (line 147)
        draw_all_call_result_114891 = invoke(stypy.reporting.localization.Localization(__file__, 147, 20), draw_all_114889, *[], **kwargs_114890)
        
        # SSA join for if statement (line 146)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'post_execute(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'post_execute' in the type store
        # Getting the type of 'stypy_return_type' (line 145)
        stypy_return_type_114892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 145, 12), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_114892)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'post_execute'
        return stypy_return_type_114892

    # Assigning a type to the variable 'post_execute' (line 145)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 145, 12), 'post_execute', post_execute)
    
    
    # SSA begins for try-except statement (line 150)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to register(...): (line 151)
    # Processing the call arguments (line 151)
    unicode_114896 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 151, 35), 'unicode', u'post_execute')
    # Getting the type of 'post_execute' (line 151)
    post_execute_114897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 51), 'post_execute', False)
    # Processing the call keyword arguments (line 151)
    kwargs_114898 = {}
    # Getting the type of 'ip' (line 151)
    ip_114893 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 151, 16), 'ip', False)
    # Obtaining the member 'events' of a type (line 151)
    events_114894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 16), ip_114893, 'events')
    # Obtaining the member 'register' of a type (line 151)
    register_114895 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 151, 16), events_114894, 'register')
    # Calling register(args, kwargs) (line 151)
    register_call_result_114899 = invoke(stypy.reporting.localization.Localization(__file__, 151, 16), register_114895, *[unicode_114896, post_execute_114897], **kwargs_114898)
    
    # SSA branch for the except part of a try statement (line 150)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 150)
    module_type_store.open_ssa_branch('except')
    
    # Call to register_post_execute(...): (line 154)
    # Processing the call arguments (line 154)
    # Getting the type of 'post_execute' (line 154)
    post_execute_114902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 41), 'post_execute', False)
    # Processing the call keyword arguments (line 154)
    kwargs_114903 = {}
    # Getting the type of 'ip' (line 154)
    ip_114900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 154, 16), 'ip', False)
    # Obtaining the member 'register_post_execute' of a type (line 154)
    register_post_execute_114901 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 154, 16), ip_114900, 'register_post_execute')
    # Calling register_post_execute(args, kwargs) (line 154)
    register_post_execute_call_result_114904 = invoke(stypy.reporting.localization.Localization(__file__, 154, 16), register_post_execute_114901, *[post_execute_114902], **kwargs_114903)
    
    # SSA join for try-except statement (line 150)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 156):
    
    # Assigning a Name to a Name (line 156):
    # Getting the type of 'post_execute' (line 156)
    post_execute_114905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 156, 29), 'post_execute')
    # Assigning a type to the variable '_IP_REGISTERED' (line 156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 156, 12), '_IP_REGISTERED', post_execute_114905)
    
    # Assigning a Name to a Name (line 157):
    
    # Assigning a Name to a Name (line 157):
    # Getting the type of 'False' (line 157)
    False_114906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 157, 36), 'False')
    # Assigning a type to the variable '_INSTALL_FIG_OBSERVER' (line 157)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 157, 12), '_INSTALL_FIG_OBSERVER', False_114906)
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 160, 12))
    
    # 'from IPython.core.pylabtools import backend2gui' statement (line 160)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_114907 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 160, 12), 'IPython.core.pylabtools')

    if (type(import_114907) is not StypyTypeError):

        if (import_114907 != 'pyd_module'):
            __import__(import_114907)
            sys_modules_114908 = sys.modules[import_114907]
            import_from_module(stypy.reporting.localization.Localization(__file__, 160, 12), 'IPython.core.pylabtools', sys_modules_114908.module_type_store, module_type_store, ['backend2gui'])
            nest_module(stypy.reporting.localization.Localization(__file__, 160, 12), __file__, sys_modules_114908, sys_modules_114908.module_type_store, module_type_store)
        else:
            from IPython.core.pylabtools import backend2gui

            import_from_module(stypy.reporting.localization.Localization(__file__, 160, 12), 'IPython.core.pylabtools', None, module_type_store, ['backend2gui'], [backend2gui])

    else:
        # Assigning a type to the variable 'IPython.core.pylabtools' (line 160)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 160, 12), 'IPython.core.pylabtools', import_114907)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Call to a Name (line 162):
    
    # Assigning a Call to a Name (line 162):
    
    # Call to get(...): (line 162)
    # Processing the call arguments (line 162)
    
    # Call to get_backend(...): (line 162)
    # Processing the call keyword arguments (line 162)
    kwargs_114912 = {}
    # Getting the type of 'get_backend' (line 162)
    get_backend_114911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 47), 'get_backend', False)
    # Calling get_backend(args, kwargs) (line 162)
    get_backend_call_result_114913 = invoke(stypy.reporting.localization.Localization(__file__, 162, 47), get_backend_114911, *[], **kwargs_114912)
    
    # Processing the call keyword arguments (line 162)
    kwargs_114914 = {}
    # Getting the type of 'backend2gui' (line 162)
    backend2gui_114909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 162, 31), 'backend2gui', False)
    # Obtaining the member 'get' of a type (line 162)
    get_114910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 162, 31), backend2gui_114909, 'get')
    # Calling get(args, kwargs) (line 162)
    get_call_result_114915 = invoke(stypy.reporting.localization.Localization(__file__, 162, 31), get_114910, *[get_backend_call_result_114913], **kwargs_114914)
    
    # Assigning a type to the variable 'ipython_gui_name' (line 162)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 162, 12), 'ipython_gui_name', get_call_result_114915)
    
    # Getting the type of 'ipython_gui_name' (line 163)
    ipython_gui_name_114916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 163, 15), 'ipython_gui_name')
    # Testing the type of an if condition (line 163)
    if_condition_114917 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 163, 12), ipython_gui_name_114916)
    # Assigning a type to the variable 'if_condition_114917' (line 163)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 163, 12), 'if_condition_114917', if_condition_114917)
    # SSA begins for if statement (line 163)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to enable_gui(...): (line 164)
    # Processing the call arguments (line 164)
    # Getting the type of 'ipython_gui_name' (line 164)
    ipython_gui_name_114920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 30), 'ipython_gui_name', False)
    # Processing the call keyword arguments (line 164)
    kwargs_114921 = {}
    # Getting the type of 'ip' (line 164)
    ip_114918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 164, 16), 'ip', False)
    # Obtaining the member 'enable_gui' of a type (line 164)
    enable_gui_114919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 164, 16), ip_114918, 'enable_gui')
    # Calling enable_gui(args, kwargs) (line 164)
    enable_gui_call_result_114922 = invoke(stypy.reporting.localization.Localization(__file__, 164, 16), enable_gui_114919, *[ipython_gui_name_114920], **kwargs_114921)
    
    # SSA join for if statement (line 163)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 136)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 166):
    
    # Assigning a Name to a Name (line 166):
    # Getting the type of 'True' (line 166)
    True_114923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 166, 36), 'True')
    # Assigning a type to the variable '_INSTALL_FIG_OBSERVER' (line 166)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 166, 12), '_INSTALL_FIG_OBSERVER', True_114923)
    # SSA join for if statement (line 136)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the except part of a try statement (line 135)
    # SSA branch for the except 'Tuple' branch of a try statement (line 135)
    module_type_store.open_ssa_branch('except')
    
    # Assigning a Name to a Name (line 170):
    
    # Assigning a Name to a Name (line 170):
    # Getting the type of 'True' (line 170)
    True_114924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 170, 32), 'True')
    # Assigning a type to the variable '_INSTALL_FIG_OBSERVER' (line 170)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 170, 8), '_INSTALL_FIG_OBSERVER', True_114924)
    # SSA join for try-except statement (line 135)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'install_repl_displayhook(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'install_repl_displayhook' in the type store
    # Getting the type of 'stypy_return_type' (line 119)
    stypy_return_type_114925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 119, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_114925)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'install_repl_displayhook'
    return stypy_return_type_114925

# Assigning a type to the variable 'install_repl_displayhook' (line 119)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 119, 0), 'install_repl_displayhook', install_repl_displayhook)

@norecursion
def uninstall_repl_displayhook(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'uninstall_repl_displayhook'
    module_type_store = module_type_store.open_function_context('uninstall_repl_displayhook', 173, 0, False)
    
    # Passed parameters checking function
    uninstall_repl_displayhook.stypy_localization = localization
    uninstall_repl_displayhook.stypy_type_of_self = None
    uninstall_repl_displayhook.stypy_type_store = module_type_store
    uninstall_repl_displayhook.stypy_function_name = 'uninstall_repl_displayhook'
    uninstall_repl_displayhook.stypy_param_names_list = []
    uninstall_repl_displayhook.stypy_varargs_param_name = None
    uninstall_repl_displayhook.stypy_kwargs_param_name = None
    uninstall_repl_displayhook.stypy_call_defaults = defaults
    uninstall_repl_displayhook.stypy_call_varargs = varargs
    uninstall_repl_displayhook.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'uninstall_repl_displayhook', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'uninstall_repl_displayhook', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'uninstall_repl_displayhook(...)' code ##################

    unicode_114926 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 188, (-1)), 'unicode', u"\n    Uninstalls the matplotlib display hook.\n\n    .. warning\n\n       Need IPython >= 2 for this to work.  For IPython < 2 will raise a\n       ``NotImplementedError``\n\n    .. warning\n\n       If you are using vanilla python and have installed another\n       display hook this will reset ``sys.displayhook`` to what ever\n       function was there when matplotlib installed it's displayhook,\n       possibly discarding your changes.\n    ")
    # Marking variables as global (line 189)
    module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 189, 4), '_IP_REGISTERED')
    # Marking variables as global (line 190)
    module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 190, 4), '_INSTALL_FIG_OBSERVER')
    
    # Getting the type of '_IP_REGISTERED' (line 191)
    _IP_REGISTERED_114927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 191, 7), '_IP_REGISTERED')
    # Testing the type of an if condition (line 191)
    if_condition_114928 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 191, 4), _IP_REGISTERED_114927)
    # Assigning a type to the variable 'if_condition_114928' (line 191)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 191, 4), 'if_condition_114928', if_condition_114928)
    # SSA begins for if statement (line 191)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 192, 8))
    
    # 'from IPython import get_ipython' statement (line 192)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_114929 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 192, 8), 'IPython')

    if (type(import_114929) is not StypyTypeError):

        if (import_114929 != 'pyd_module'):
            __import__(import_114929)
            sys_modules_114930 = sys.modules[import_114929]
            import_from_module(stypy.reporting.localization.Localization(__file__, 192, 8), 'IPython', sys_modules_114930.module_type_store, module_type_store, ['get_ipython'])
            nest_module(stypy.reporting.localization.Localization(__file__, 192, 8), __file__, sys_modules_114930, sys_modules_114930.module_type_store, module_type_store)
        else:
            from IPython import get_ipython

            import_from_module(stypy.reporting.localization.Localization(__file__, 192, 8), 'IPython', None, module_type_store, ['get_ipython'], [get_ipython])

    else:
        # Assigning a type to the variable 'IPython' (line 192)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 192, 8), 'IPython', import_114929)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Call to a Name (line 193):
    
    # Assigning a Call to a Name (line 193):
    
    # Call to get_ipython(...): (line 193)
    # Processing the call keyword arguments (line 193)
    kwargs_114932 = {}
    # Getting the type of 'get_ipython' (line 193)
    get_ipython_114931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 193, 13), 'get_ipython', False)
    # Calling get_ipython(args, kwargs) (line 193)
    get_ipython_call_result_114933 = invoke(stypy.reporting.localization.Localization(__file__, 193, 13), get_ipython_114931, *[], **kwargs_114932)
    
    # Assigning a type to the variable 'ip' (line 193)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 193, 8), 'ip', get_ipython_call_result_114933)
    
    
    # SSA begins for try-except statement (line 194)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Call to unregister(...): (line 195)
    # Processing the call arguments (line 195)
    unicode_114937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 195, 33), 'unicode', u'post_execute')
    # Getting the type of '_IP_REGISTERED' (line 195)
    _IP_REGISTERED_114938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 49), '_IP_REGISTERED', False)
    # Processing the call keyword arguments (line 195)
    kwargs_114939 = {}
    # Getting the type of 'ip' (line 195)
    ip_114934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 195, 12), 'ip', False)
    # Obtaining the member 'events' of a type (line 195)
    events_114935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 12), ip_114934, 'events')
    # Obtaining the member 'unregister' of a type (line 195)
    unregister_114936 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 195, 12), events_114935, 'unregister')
    # Calling unregister(args, kwargs) (line 195)
    unregister_call_result_114940 = invoke(stypy.reporting.localization.Localization(__file__, 195, 12), unregister_114936, *[unicode_114937, _IP_REGISTERED_114938], **kwargs_114939)
    
    # SSA branch for the except part of a try statement (line 194)
    # SSA branch for the except 'AttributeError' branch of a try statement (line 194)
    module_type_store.open_ssa_branch('except')
    
    # Call to NotImplementedError(...): (line 197)
    # Processing the call arguments (line 197)
    unicode_114942 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 197, 38), 'unicode', u'Can not unregister events in IPython < 2.0')
    # Processing the call keyword arguments (line 197)
    kwargs_114943 = {}
    # Getting the type of 'NotImplementedError' (line 197)
    NotImplementedError_114941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 197, 18), 'NotImplementedError', False)
    # Calling NotImplementedError(args, kwargs) (line 197)
    NotImplementedError_call_result_114944 = invoke(stypy.reporting.localization.Localization(__file__, 197, 18), NotImplementedError_114941, *[unicode_114942], **kwargs_114943)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 197, 12), NotImplementedError_call_result_114944, 'raise parameter', BaseException)
    # SSA join for try-except statement (line 194)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Name to a Name (line 199):
    
    # Assigning a Name to a Name (line 199):
    # Getting the type of 'None' (line 199)
    None_114945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 199, 25), 'None')
    # Assigning a type to the variable '_IP_REGISTERED' (line 199)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 199, 8), '_IP_REGISTERED', None_114945)
    # SSA join for if statement (line 191)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of '_INSTALL_FIG_OBSERVER' (line 201)
    _INSTALL_FIG_OBSERVER_114946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 201, 7), '_INSTALL_FIG_OBSERVER')
    # Testing the type of an if condition (line 201)
    if_condition_114947 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 201, 4), _INSTALL_FIG_OBSERVER_114946)
    # Assigning a type to the variable 'if_condition_114947' (line 201)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 201, 4), 'if_condition_114947', if_condition_114947)
    # SSA begins for if statement (line 201)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Name to a Name (line 202):
    
    # Assigning a Name to a Name (line 202):
    # Getting the type of 'False' (line 202)
    False_114948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 202, 32), 'False')
    # Assigning a type to the variable '_INSTALL_FIG_OBSERVER' (line 202)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 202, 8), '_INSTALL_FIG_OBSERVER', False_114948)
    # SSA join for if statement (line 201)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'uninstall_repl_displayhook(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'uninstall_repl_displayhook' in the type store
    # Getting the type of 'stypy_return_type' (line 173)
    stypy_return_type_114949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 173, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_114949)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'uninstall_repl_displayhook'
    return stypy_return_type_114949

# Assigning a type to the variable 'uninstall_repl_displayhook' (line 173)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 173, 0), 'uninstall_repl_displayhook', uninstall_repl_displayhook)

# Assigning a Attribute to a Name (line 205):

# Assigning a Attribute to a Name (line 205):
# Getting the type of '_pylab_helpers' (line 205)
_pylab_helpers_114950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 205, 11), '_pylab_helpers')
# Obtaining the member 'Gcf' of a type (line 205)
Gcf_114951 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 11), _pylab_helpers_114950, 'Gcf')
# Obtaining the member 'draw_all' of a type (line 205)
draw_all_114952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 205, 11), Gcf_114951, 'draw_all')
# Assigning a type to the variable 'draw_all' (line 205)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 205, 0), 'draw_all', draw_all_114952)

@norecursion
def findobj(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 209)
    None_114953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 14), 'None')
    # Getting the type of 'None' (line 209)
    None_114954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 26), 'None')
    # Getting the type of 'True' (line 209)
    True_114955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 209, 45), 'True')
    defaults = [None_114953, None_114954, True_114955]
    # Create a new context for function 'findobj'
    module_type_store = module_type_store.open_function_context('findobj', 208, 0, False)
    
    # Passed parameters checking function
    findobj.stypy_localization = localization
    findobj.stypy_type_of_self = None
    findobj.stypy_type_store = module_type_store
    findobj.stypy_function_name = 'findobj'
    findobj.stypy_param_names_list = ['o', 'match', 'include_self']
    findobj.stypy_varargs_param_name = None
    findobj.stypy_kwargs_param_name = None
    findobj.stypy_call_defaults = defaults
    findobj.stypy_call_varargs = varargs
    findobj.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'findobj', ['o', 'match', 'include_self'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'findobj', localization, ['o', 'match', 'include_self'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'findobj(...)' code ##################

    
    # Type idiom detected: calculating its left and rigth part (line 210)
    # Getting the type of 'o' (line 210)
    o_114956 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 7), 'o')
    # Getting the type of 'None' (line 210)
    None_114957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 210, 12), 'None')
    
    (may_be_114958, more_types_in_union_114959) = may_be_none(o_114956, None_114957)

    if may_be_114958:

        if more_types_in_union_114959:
            # Runtime conditional SSA (line 210)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 211):
        
        # Assigning a Call to a Name (line 211):
        
        # Call to gcf(...): (line 211)
        # Processing the call keyword arguments (line 211)
        kwargs_114961 = {}
        # Getting the type of 'gcf' (line 211)
        gcf_114960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 211, 12), 'gcf', False)
        # Calling gcf(args, kwargs) (line 211)
        gcf_call_result_114962 = invoke(stypy.reporting.localization.Localization(__file__, 211, 12), gcf_114960, *[], **kwargs_114961)
        
        # Assigning a type to the variable 'o' (line 211)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 211, 8), 'o', gcf_call_result_114962)

        if more_types_in_union_114959:
            # SSA join for if statement (line 210)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to findobj(...): (line 212)
    # Processing the call arguments (line 212)
    # Getting the type of 'match' (line 212)
    match_114965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 21), 'match', False)
    # Processing the call keyword arguments (line 212)
    # Getting the type of 'include_self' (line 212)
    include_self_114966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 41), 'include_self', False)
    keyword_114967 = include_self_114966
    kwargs_114968 = {'include_self': keyword_114967}
    # Getting the type of 'o' (line 212)
    o_114963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 212, 11), 'o', False)
    # Obtaining the member 'findobj' of a type (line 212)
    findobj_114964 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 212, 11), o_114963, 'findobj')
    # Calling findobj(args, kwargs) (line 212)
    findobj_call_result_114969 = invoke(stypy.reporting.localization.Localization(__file__, 212, 11), findobj_114964, *[match_114965], **kwargs_114968)
    
    # Assigning a type to the variable 'stypy_return_type' (line 212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 212, 4), 'stypy_return_type', findobj_call_result_114969)
    
    # ################# End of 'findobj(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'findobj' in the type store
    # Getting the type of 'stypy_return_type' (line 208)
    stypy_return_type_114970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 208, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_114970)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'findobj'
    return stypy_return_type_114970

# Assigning a type to the variable 'findobj' (line 208)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 208, 0), 'findobj', findobj)

@norecursion
def switch_backend(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'switch_backend'
    module_type_store = module_type_store.open_function_context('switch_backend', 215, 0, False)
    
    # Passed parameters checking function
    switch_backend.stypy_localization = localization
    switch_backend.stypy_type_of_self = None
    switch_backend.stypy_type_store = module_type_store
    switch_backend.stypy_function_name = 'switch_backend'
    switch_backend.stypy_param_names_list = ['newbackend']
    switch_backend.stypy_varargs_param_name = None
    switch_backend.stypy_kwargs_param_name = None
    switch_backend.stypy_call_defaults = defaults
    switch_backend.stypy_call_varargs = varargs
    switch_backend.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'switch_backend', ['newbackend'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'switch_backend', localization, ['newbackend'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'switch_backend(...)' code ##################

    unicode_114971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 226, (-1)), 'unicode', u'\n    Switch the default backend.  This feature is **experimental**, and\n    is only expected to work switching to an image backend.  e.g., if\n    you have a bunch of PostScript scripts that you want to run from\n    an interactive ipython session, you may want to switch to the PS\n    backend before running them to avoid having a bunch of GUI windows\n    popup.  If you try to interactively switch from one GUI backend to\n    another, you will explode.\n\n    Calling this command will close all open windows.\n    ')
    
    # Call to close(...): (line 227)
    # Processing the call arguments (line 227)
    unicode_114973 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 227, 10), 'unicode', u'all')
    # Processing the call keyword arguments (line 227)
    kwargs_114974 = {}
    # Getting the type of 'close' (line 227)
    close_114972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 227, 4), 'close', False)
    # Calling close(args, kwargs) (line 227)
    close_call_result_114975 = invoke(stypy.reporting.localization.Localization(__file__, 227, 4), close_114972, *[unicode_114973], **kwargs_114974)
    
    # Marking variables as global (line 228)
    module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 228, 4), '_backend_mod')
    module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 228, 4), 'new_figure_manager')
    module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 228, 4), 'draw_if_interactive')
    module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 228, 4), '_show')
    
    # Call to use(...): (line 229)
    # Processing the call arguments (line 229)
    # Getting the type of 'newbackend' (line 229)
    newbackend_114978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 19), 'newbackend', False)
    # Processing the call keyword arguments (line 229)
    # Getting the type of 'False' (line 229)
    False_114979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 36), 'False', False)
    keyword_114980 = False_114979
    # Getting the type of 'True' (line 229)
    True_114981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 49), 'True', False)
    keyword_114982 = True_114981
    kwargs_114983 = {'warn': keyword_114980, 'force': keyword_114982}
    # Getting the type of 'matplotlib' (line 229)
    matplotlib_114976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 229, 4), 'matplotlib', False)
    # Obtaining the member 'use' of a type (line 229)
    use_114977 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 229, 4), matplotlib_114976, 'use')
    # Calling use(args, kwargs) (line 229)
    use_call_result_114984 = invoke(stypy.reporting.localization.Localization(__file__, 229, 4), use_114977, *[newbackend_114978], **kwargs_114983)
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 230, 4))
    
    # 'from matplotlib.backends import pylab_setup' statement (line 230)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_114985 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 230, 4), 'matplotlib.backends')

    if (type(import_114985) is not StypyTypeError):

        if (import_114985 != 'pyd_module'):
            __import__(import_114985)
            sys_modules_114986 = sys.modules[import_114985]
            import_from_module(stypy.reporting.localization.Localization(__file__, 230, 4), 'matplotlib.backends', sys_modules_114986.module_type_store, module_type_store, ['pylab_setup'])
            nest_module(stypy.reporting.localization.Localization(__file__, 230, 4), __file__, sys_modules_114986, sys_modules_114986.module_type_store, module_type_store)
        else:
            from matplotlib.backends import pylab_setup

            import_from_module(stypy.reporting.localization.Localization(__file__, 230, 4), 'matplotlib.backends', None, module_type_store, ['pylab_setup'], [pylab_setup])

    else:
        # Assigning a type to the variable 'matplotlib.backends' (line 230)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 230, 4), 'matplotlib.backends', import_114985)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Call to a Tuple (line 231):
    
    # Assigning a Call to a Name:
    
    # Call to pylab_setup(...): (line 231)
    # Processing the call keyword arguments (line 231)
    kwargs_114988 = {}
    # Getting the type of 'pylab_setup' (line 231)
    pylab_setup_114987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 67), 'pylab_setup', False)
    # Calling pylab_setup(args, kwargs) (line 231)
    pylab_setup_call_result_114989 = invoke(stypy.reporting.localization.Localization(__file__, 231, 67), pylab_setup_114987, *[], **kwargs_114988)
    
    # Assigning a type to the variable 'call_assignment_114597' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'call_assignment_114597', pylab_setup_call_result_114989)
    
    # Assigning a Call to a Name (line 231):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_114992 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 4), 'int')
    # Processing the call keyword arguments
    kwargs_114993 = {}
    # Getting the type of 'call_assignment_114597' (line 231)
    call_assignment_114597_114990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'call_assignment_114597', False)
    # Obtaining the member '__getitem__' of a type (line 231)
    getitem___114991 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 4), call_assignment_114597_114990, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_114994 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___114991, *[int_114992], **kwargs_114993)
    
    # Assigning a type to the variable 'call_assignment_114598' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'call_assignment_114598', getitem___call_result_114994)
    
    # Assigning a Name to a Name (line 231):
    # Getting the type of 'call_assignment_114598' (line 231)
    call_assignment_114598_114995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'call_assignment_114598')
    # Assigning a type to the variable '_backend_mod' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), '_backend_mod', call_assignment_114598_114995)
    
    # Assigning a Call to a Name (line 231):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_114998 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 4), 'int')
    # Processing the call keyword arguments
    kwargs_114999 = {}
    # Getting the type of 'call_assignment_114597' (line 231)
    call_assignment_114597_114996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'call_assignment_114597', False)
    # Obtaining the member '__getitem__' of a type (line 231)
    getitem___114997 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 4), call_assignment_114597_114996, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_115000 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___114997, *[int_114998], **kwargs_114999)
    
    # Assigning a type to the variable 'call_assignment_114599' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'call_assignment_114599', getitem___call_result_115000)
    
    # Assigning a Name to a Name (line 231):
    # Getting the type of 'call_assignment_114599' (line 231)
    call_assignment_114599_115001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'call_assignment_114599')
    # Assigning a type to the variable 'new_figure_manager' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 18), 'new_figure_manager', call_assignment_114599_115001)
    
    # Assigning a Call to a Name (line 231):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_115004 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 4), 'int')
    # Processing the call keyword arguments
    kwargs_115005 = {}
    # Getting the type of 'call_assignment_114597' (line 231)
    call_assignment_114597_115002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'call_assignment_114597', False)
    # Obtaining the member '__getitem__' of a type (line 231)
    getitem___115003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 4), call_assignment_114597_115002, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_115006 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___115003, *[int_115004], **kwargs_115005)
    
    # Assigning a type to the variable 'call_assignment_114600' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'call_assignment_114600', getitem___call_result_115006)
    
    # Assigning a Name to a Name (line 231):
    # Getting the type of 'call_assignment_114600' (line 231)
    call_assignment_114600_115007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'call_assignment_114600')
    # Assigning a type to the variable 'draw_if_interactive' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 38), 'draw_if_interactive', call_assignment_114600_115007)
    
    # Assigning a Call to a Name (line 231):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_115010 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 231, 4), 'int')
    # Processing the call keyword arguments
    kwargs_115011 = {}
    # Getting the type of 'call_assignment_114597' (line 231)
    call_assignment_114597_115008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'call_assignment_114597', False)
    # Obtaining the member '__getitem__' of a type (line 231)
    getitem___115009 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 231, 4), call_assignment_114597_115008, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_115012 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___115009, *[int_115010], **kwargs_115011)
    
    # Assigning a type to the variable 'call_assignment_114601' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'call_assignment_114601', getitem___call_result_115012)
    
    # Assigning a Name to a Name (line 231):
    # Getting the type of 'call_assignment_114601' (line 231)
    call_assignment_114601_115013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 231, 4), 'call_assignment_114601')
    # Assigning a type to the variable '_show' (line 231)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 231, 59), '_show', call_assignment_114601_115013)
    
    # ################# End of 'switch_backend(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'switch_backend' in the type store
    # Getting the type of 'stypy_return_type' (line 215)
    stypy_return_type_115014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 215, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115014)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'switch_backend'
    return stypy_return_type_115014

# Assigning a type to the variable 'switch_backend' (line 215)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 215, 0), 'switch_backend', switch_backend)

@norecursion
def show(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'show'
    module_type_store = module_type_store.open_function_context('show', 234, 0, False)
    
    # Passed parameters checking function
    show.stypy_localization = localization
    show.stypy_type_of_self = None
    show.stypy_type_store = module_type_store
    show.stypy_function_name = 'show'
    show.stypy_param_names_list = []
    show.stypy_varargs_param_name = 'args'
    show.stypy_kwargs_param_name = 'kw'
    show.stypy_call_defaults = defaults
    show.stypy_call_varargs = varargs
    show.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'show', [], 'args', 'kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'show', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'show(...)' code ##################

    unicode_115015 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 249, (-1)), 'unicode', u'\n    Display a figure.\n    When running in ipython with its pylab mode, display all\n    figures and return to the ipython prompt.\n\n    In non-interactive mode, display all figures and block until\n    the figures have been closed; in interactive mode it has no\n    effect unless figures were created prior to a change from\n    non-interactive to interactive mode (not recommended).  In\n    that case it displays the figures but does not block.\n\n    A single experimental keyword argument, *block*, may be\n    set to True or False to override the blocking behavior\n    described above.\n    ')
    # Marking variables as global (line 250)
    module_type_store.declare_global(stypy.reporting.localization.Localization(__file__, 250, 4), '_show')
    
    # Call to _show(...): (line 251)
    # Getting the type of 'args' (line 251)
    args_115017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 18), 'args', False)
    # Processing the call keyword arguments (line 251)
    # Getting the type of 'kw' (line 251)
    kw_115018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 26), 'kw', False)
    kwargs_115019 = {'kw_115018': kw_115018}
    # Getting the type of '_show' (line 251)
    _show_115016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 251, 11), '_show', False)
    # Calling _show(args, kwargs) (line 251)
    _show_call_result_115020 = invoke(stypy.reporting.localization.Localization(__file__, 251, 11), _show_115016, *[args_115017], **kwargs_115019)
    
    # Assigning a type to the variable 'stypy_return_type' (line 251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 251, 4), 'stypy_return_type', _show_call_result_115020)
    
    # ################# End of 'show(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'show' in the type store
    # Getting the type of 'stypy_return_type' (line 234)
    stypy_return_type_115021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 234, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115021)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'show'
    return stypy_return_type_115021

# Assigning a type to the variable 'show' (line 234)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 234, 0), 'show', show)

@norecursion
def isinteractive(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'isinteractive'
    module_type_store = module_type_store.open_function_context('isinteractive', 254, 0, False)
    
    # Passed parameters checking function
    isinteractive.stypy_localization = localization
    isinteractive.stypy_type_of_self = None
    isinteractive.stypy_type_store = module_type_store
    isinteractive.stypy_function_name = 'isinteractive'
    isinteractive.stypy_param_names_list = []
    isinteractive.stypy_varargs_param_name = None
    isinteractive.stypy_kwargs_param_name = None
    isinteractive.stypy_call_defaults = defaults
    isinteractive.stypy_call_varargs = varargs
    isinteractive.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'isinteractive', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'isinteractive', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'isinteractive(...)' code ##################

    unicode_115022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 257, (-1)), 'unicode', u'\n    Return status of interactive mode.\n    ')
    
    # Call to is_interactive(...): (line 258)
    # Processing the call keyword arguments (line 258)
    kwargs_115025 = {}
    # Getting the type of 'matplotlib' (line 258)
    matplotlib_115023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 258, 11), 'matplotlib', False)
    # Obtaining the member 'is_interactive' of a type (line 258)
    is_interactive_115024 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 258, 11), matplotlib_115023, 'is_interactive')
    # Calling is_interactive(args, kwargs) (line 258)
    is_interactive_call_result_115026 = invoke(stypy.reporting.localization.Localization(__file__, 258, 11), is_interactive_115024, *[], **kwargs_115025)
    
    # Assigning a type to the variable 'stypy_return_type' (line 258)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 258, 4), 'stypy_return_type', is_interactive_call_result_115026)
    
    # ################# End of 'isinteractive(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'isinteractive' in the type store
    # Getting the type of 'stypy_return_type' (line 254)
    stypy_return_type_115027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 254, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115027)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'isinteractive'
    return stypy_return_type_115027

# Assigning a type to the variable 'isinteractive' (line 254)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 254, 0), 'isinteractive', isinteractive)

@norecursion
def ioff(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ioff'
    module_type_store = module_type_store.open_function_context('ioff', 261, 0, False)
    
    # Passed parameters checking function
    ioff.stypy_localization = localization
    ioff.stypy_type_of_self = None
    ioff.stypy_type_store = module_type_store
    ioff.stypy_function_name = 'ioff'
    ioff.stypy_param_names_list = []
    ioff.stypy_varargs_param_name = None
    ioff.stypy_kwargs_param_name = None
    ioff.stypy_call_defaults = defaults
    ioff.stypy_call_varargs = varargs
    ioff.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ioff', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ioff', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ioff(...)' code ##################

    unicode_115028 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 262, 4), 'unicode', u'Turn interactive mode off.')
    
    # Call to interactive(...): (line 263)
    # Processing the call arguments (line 263)
    # Getting the type of 'False' (line 263)
    False_115031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 27), 'False', False)
    # Processing the call keyword arguments (line 263)
    kwargs_115032 = {}
    # Getting the type of 'matplotlib' (line 263)
    matplotlib_115029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 263, 4), 'matplotlib', False)
    # Obtaining the member 'interactive' of a type (line 263)
    interactive_115030 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 263, 4), matplotlib_115029, 'interactive')
    # Calling interactive(args, kwargs) (line 263)
    interactive_call_result_115033 = invoke(stypy.reporting.localization.Localization(__file__, 263, 4), interactive_115030, *[False_115031], **kwargs_115032)
    
    
    # Call to uninstall_repl_displayhook(...): (line 264)
    # Processing the call keyword arguments (line 264)
    kwargs_115035 = {}
    # Getting the type of 'uninstall_repl_displayhook' (line 264)
    uninstall_repl_displayhook_115034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 264, 4), 'uninstall_repl_displayhook', False)
    # Calling uninstall_repl_displayhook(args, kwargs) (line 264)
    uninstall_repl_displayhook_call_result_115036 = invoke(stypy.reporting.localization.Localization(__file__, 264, 4), uninstall_repl_displayhook_115034, *[], **kwargs_115035)
    
    
    # ################# End of 'ioff(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ioff' in the type store
    # Getting the type of 'stypy_return_type' (line 261)
    stypy_return_type_115037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 261, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115037)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ioff'
    return stypy_return_type_115037

# Assigning a type to the variable 'ioff' (line 261)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 261, 0), 'ioff', ioff)

@norecursion
def ion(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ion'
    module_type_store = module_type_store.open_function_context('ion', 267, 0, False)
    
    # Passed parameters checking function
    ion.stypy_localization = localization
    ion.stypy_type_of_self = None
    ion.stypy_type_store = module_type_store
    ion.stypy_function_name = 'ion'
    ion.stypy_param_names_list = []
    ion.stypy_varargs_param_name = None
    ion.stypy_kwargs_param_name = None
    ion.stypy_call_defaults = defaults
    ion.stypy_call_varargs = varargs
    ion.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ion', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ion', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ion(...)' code ##################

    unicode_115038 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 268, 4), 'unicode', u'Turn interactive mode on.')
    
    # Call to interactive(...): (line 269)
    # Processing the call arguments (line 269)
    # Getting the type of 'True' (line 269)
    True_115041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 27), 'True', False)
    # Processing the call keyword arguments (line 269)
    kwargs_115042 = {}
    # Getting the type of 'matplotlib' (line 269)
    matplotlib_115039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 269, 4), 'matplotlib', False)
    # Obtaining the member 'interactive' of a type (line 269)
    interactive_115040 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 269, 4), matplotlib_115039, 'interactive')
    # Calling interactive(args, kwargs) (line 269)
    interactive_call_result_115043 = invoke(stypy.reporting.localization.Localization(__file__, 269, 4), interactive_115040, *[True_115041], **kwargs_115042)
    
    
    # Call to install_repl_displayhook(...): (line 270)
    # Processing the call keyword arguments (line 270)
    kwargs_115045 = {}
    # Getting the type of 'install_repl_displayhook' (line 270)
    install_repl_displayhook_115044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 270, 4), 'install_repl_displayhook', False)
    # Calling install_repl_displayhook(args, kwargs) (line 270)
    install_repl_displayhook_call_result_115046 = invoke(stypy.reporting.localization.Localization(__file__, 270, 4), install_repl_displayhook_115044, *[], **kwargs_115045)
    
    
    # ################# End of 'ion(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ion' in the type store
    # Getting the type of 'stypy_return_type' (line 267)
    stypy_return_type_115047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 267, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115047)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ion'
    return stypy_return_type_115047

# Assigning a type to the variable 'ion' (line 267)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 267, 0), 'ion', ion)

@norecursion
def pause(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pause'
    module_type_store = module_type_store.open_function_context('pause', 273, 0, False)
    
    # Passed parameters checking function
    pause.stypy_localization = localization
    pause.stypy_type_of_self = None
    pause.stypy_type_store = module_type_store
    pause.stypy_function_name = 'pause'
    pause.stypy_param_names_list = ['interval']
    pause.stypy_varargs_param_name = None
    pause.stypy_kwargs_param_name = None
    pause.stypy_call_defaults = defaults
    pause.stypy_call_varargs = varargs
    pause.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pause', ['interval'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pause', localization, ['interval'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pause(...)' code ##################

    unicode_115048 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 285, (-1)), 'unicode', u'\n    Pause for *interval* seconds.\n\n    If there is an active figure, it will be updated and displayed before the\n    pause, and the GUI event loop (if any) will run during the pause.\n\n    This can be used for crude animation.  For more complex animation, see\n    :mod:`matplotlib.animation`.\n\n    This function is experimental; its behavior may be changed or extended in a\n    future release.\n    ')
    
    # Assigning a Call to a Name (line 286):
    
    # Assigning a Call to a Name (line 286):
    
    # Call to get_active(...): (line 286)
    # Processing the call keyword arguments (line 286)
    kwargs_115052 = {}
    # Getting the type of '_pylab_helpers' (line 286)
    _pylab_helpers_115049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 286, 14), '_pylab_helpers', False)
    # Obtaining the member 'Gcf' of a type (line 286)
    Gcf_115050 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 14), _pylab_helpers_115049, 'Gcf')
    # Obtaining the member 'get_active' of a type (line 286)
    get_active_115051 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 286, 14), Gcf_115050, 'get_active')
    # Calling get_active(args, kwargs) (line 286)
    get_active_call_result_115053 = invoke(stypy.reporting.localization.Localization(__file__, 286, 14), get_active_115051, *[], **kwargs_115052)
    
    # Assigning a type to the variable 'manager' (line 286)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 286, 4), 'manager', get_active_call_result_115053)
    
    # Type idiom detected: calculating its left and rigth part (line 287)
    # Getting the type of 'manager' (line 287)
    manager_115054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 4), 'manager')
    # Getting the type of 'None' (line 287)
    None_115055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 287, 22), 'None')
    
    (may_be_115056, more_types_in_union_115057) = may_not_be_none(manager_115054, None_115055)

    if may_be_115056:

        if more_types_in_union_115057:
            # Runtime conditional SSA (line 287)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Attribute to a Name (line 288):
        
        # Assigning a Attribute to a Name (line 288):
        # Getting the type of 'manager' (line 288)
        manager_115058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 288, 17), 'manager')
        # Obtaining the member 'canvas' of a type (line 288)
        canvas_115059 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 288, 17), manager_115058, 'canvas')
        # Assigning a type to the variable 'canvas' (line 288)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 288, 8), 'canvas', canvas_115059)
        
        # Getting the type of 'canvas' (line 289)
        canvas_115060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 289, 11), 'canvas')
        # Obtaining the member 'figure' of a type (line 289)
        figure_115061 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 11), canvas_115060, 'figure')
        # Obtaining the member 'stale' of a type (line 289)
        stale_115062 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 289, 11), figure_115061, 'stale')
        # Testing the type of an if condition (line 289)
        if_condition_115063 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 289, 8), stale_115062)
        # Assigning a type to the variable 'if_condition_115063' (line 289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 289, 8), 'if_condition_115063', if_condition_115063)
        # SSA begins for if statement (line 289)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw_idle(...): (line 290)
        # Processing the call keyword arguments (line 290)
        kwargs_115066 = {}
        # Getting the type of 'canvas' (line 290)
        canvas_115064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 290, 12), 'canvas', False)
        # Obtaining the member 'draw_idle' of a type (line 290)
        draw_idle_115065 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 290, 12), canvas_115064, 'draw_idle')
        # Calling draw_idle(args, kwargs) (line 290)
        draw_idle_call_result_115067 = invoke(stypy.reporting.localization.Localization(__file__, 290, 12), draw_idle_115065, *[], **kwargs_115066)
        
        # SSA join for if statement (line 289)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Call to show(...): (line 291)
        # Processing the call keyword arguments (line 291)
        # Getting the type of 'False' (line 291)
        False_115069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 19), 'False', False)
        keyword_115070 = False_115069
        kwargs_115071 = {'block': keyword_115070}
        # Getting the type of 'show' (line 291)
        show_115068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 291, 8), 'show', False)
        # Calling show(args, kwargs) (line 291)
        show_call_result_115072 = invoke(stypy.reporting.localization.Localization(__file__, 291, 8), show_115068, *[], **kwargs_115071)
        
        
        # Call to start_event_loop(...): (line 292)
        # Processing the call arguments (line 292)
        # Getting the type of 'interval' (line 292)
        interval_115075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 32), 'interval', False)
        # Processing the call keyword arguments (line 292)
        kwargs_115076 = {}
        # Getting the type of 'canvas' (line 292)
        canvas_115073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 292, 8), 'canvas', False)
        # Obtaining the member 'start_event_loop' of a type (line 292)
        start_event_loop_115074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 292, 8), canvas_115073, 'start_event_loop')
        # Calling start_event_loop(args, kwargs) (line 292)
        start_event_loop_call_result_115077 = invoke(stypy.reporting.localization.Localization(__file__, 292, 8), start_event_loop_115074, *[interval_115075], **kwargs_115076)
        

        if more_types_in_union_115057:
            # Runtime conditional SSA for else branch (line 287)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_115056) or more_types_in_union_115057):
        
        # Call to sleep(...): (line 294)
        # Processing the call arguments (line 294)
        # Getting the type of 'interval' (line 294)
        interval_115080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 19), 'interval', False)
        # Processing the call keyword arguments (line 294)
        kwargs_115081 = {}
        # Getting the type of 'time' (line 294)
        time_115078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 294, 8), 'time', False)
        # Obtaining the member 'sleep' of a type (line 294)
        sleep_115079 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 294, 8), time_115078, 'sleep')
        # Calling sleep(args, kwargs) (line 294)
        sleep_call_result_115082 = invoke(stypy.reporting.localization.Localization(__file__, 294, 8), sleep_115079, *[interval_115080], **kwargs_115081)
        

        if (may_be_115056 and more_types_in_union_115057):
            # SSA join for if statement (line 287)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'pause(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pause' in the type store
    # Getting the type of 'stypy_return_type' (line 273)
    stypy_return_type_115083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 273, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115083)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pause'
    return stypy_return_type_115083

# Assigning a type to the variable 'pause' (line 273)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 273, 0), 'pause', pause)

@norecursion
def rc(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rc'
    module_type_store = module_type_store.open_function_context('rc', 297, 0, False)
    
    # Passed parameters checking function
    rc.stypy_localization = localization
    rc.stypy_type_of_self = None
    rc.stypy_type_store = module_type_store
    rc.stypy_function_name = 'rc'
    rc.stypy_param_names_list = []
    rc.stypy_varargs_param_name = 'args'
    rc.stypy_kwargs_param_name = 'kwargs'
    rc.stypy_call_defaults = defaults
    rc.stypy_call_varargs = varargs
    rc.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rc', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rc', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rc(...)' code ##################

    
    # Call to rc(...): (line 299)
    # Getting the type of 'args' (line 299)
    args_115086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 19), 'args', False)
    # Processing the call keyword arguments (line 299)
    # Getting the type of 'kwargs' (line 299)
    kwargs_115087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 27), 'kwargs', False)
    kwargs_115088 = {'kwargs_115087': kwargs_115087}
    # Getting the type of 'matplotlib' (line 299)
    matplotlib_115084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 299, 4), 'matplotlib', False)
    # Obtaining the member 'rc' of a type (line 299)
    rc_115085 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 299, 4), matplotlib_115084, 'rc')
    # Calling rc(args, kwargs) (line 299)
    rc_call_result_115089 = invoke(stypy.reporting.localization.Localization(__file__, 299, 4), rc_115085, *[args_115086], **kwargs_115088)
    
    
    # ################# End of 'rc(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rc' in the type store
    # Getting the type of 'stypy_return_type' (line 297)
    stypy_return_type_115090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 297, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115090)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rc'
    return stypy_return_type_115090

# Assigning a type to the variable 'rc' (line 297)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 297, 0), 'rc', rc)

@norecursion
def rc_context(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 303)
    None_115091 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 18), 'None')
    # Getting the type of 'None' (line 303)
    None_115092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 303, 30), 'None')
    defaults = [None_115091, None_115092]
    # Create a new context for function 'rc_context'
    module_type_store = module_type_store.open_function_context('rc_context', 302, 0, False)
    
    # Passed parameters checking function
    rc_context.stypy_localization = localization
    rc_context.stypy_type_of_self = None
    rc_context.stypy_type_store = module_type_store
    rc_context.stypy_function_name = 'rc_context'
    rc_context.stypy_param_names_list = ['rc', 'fname']
    rc_context.stypy_varargs_param_name = None
    rc_context.stypy_kwargs_param_name = None
    rc_context.stypy_call_defaults = defaults
    rc_context.stypy_call_varargs = varargs
    rc_context.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rc_context', ['rc', 'fname'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rc_context', localization, ['rc', 'fname'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rc_context(...)' code ##################

    
    # Call to rc_context(...): (line 304)
    # Processing the call arguments (line 304)
    # Getting the type of 'rc' (line 304)
    rc_115095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 33), 'rc', False)
    # Getting the type of 'fname' (line 304)
    fname_115096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 37), 'fname', False)
    # Processing the call keyword arguments (line 304)
    kwargs_115097 = {}
    # Getting the type of 'matplotlib' (line 304)
    matplotlib_115093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 304, 11), 'matplotlib', False)
    # Obtaining the member 'rc_context' of a type (line 304)
    rc_context_115094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 304, 11), matplotlib_115093, 'rc_context')
    # Calling rc_context(args, kwargs) (line 304)
    rc_context_call_result_115098 = invoke(stypy.reporting.localization.Localization(__file__, 304, 11), rc_context_115094, *[rc_115095, fname_115096], **kwargs_115097)
    
    # Assigning a type to the variable 'stypy_return_type' (line 304)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 304, 4), 'stypy_return_type', rc_context_call_result_115098)
    
    # ################# End of 'rc_context(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rc_context' in the type store
    # Getting the type of 'stypy_return_type' (line 302)
    stypy_return_type_115099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 302, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115099)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rc_context'
    return stypy_return_type_115099

# Assigning a type to the variable 'rc_context' (line 302)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 302, 0), 'rc_context', rc_context)

@norecursion
def rcdefaults(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rcdefaults'
    module_type_store = module_type_store.open_function_context('rcdefaults', 307, 0, False)
    
    # Passed parameters checking function
    rcdefaults.stypy_localization = localization
    rcdefaults.stypy_type_of_self = None
    rcdefaults.stypy_type_store = module_type_store
    rcdefaults.stypy_function_name = 'rcdefaults'
    rcdefaults.stypy_param_names_list = []
    rcdefaults.stypy_varargs_param_name = None
    rcdefaults.stypy_kwargs_param_name = None
    rcdefaults.stypy_call_defaults = defaults
    rcdefaults.stypy_call_varargs = varargs
    rcdefaults.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rcdefaults', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rcdefaults', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rcdefaults(...)' code ##################

    
    # Call to rcdefaults(...): (line 309)
    # Processing the call keyword arguments (line 309)
    kwargs_115102 = {}
    # Getting the type of 'matplotlib' (line 309)
    matplotlib_115100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 309, 4), 'matplotlib', False)
    # Obtaining the member 'rcdefaults' of a type (line 309)
    rcdefaults_115101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 309, 4), matplotlib_115100, 'rcdefaults')
    # Calling rcdefaults(args, kwargs) (line 309)
    rcdefaults_call_result_115103 = invoke(stypy.reporting.localization.Localization(__file__, 309, 4), rcdefaults_115101, *[], **kwargs_115102)
    
    
    
    # Call to is_interactive(...): (line 310)
    # Processing the call keyword arguments (line 310)
    kwargs_115106 = {}
    # Getting the type of 'matplotlib' (line 310)
    matplotlib_115104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 310, 7), 'matplotlib', False)
    # Obtaining the member 'is_interactive' of a type (line 310)
    is_interactive_115105 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 310, 7), matplotlib_115104, 'is_interactive')
    # Calling is_interactive(args, kwargs) (line 310)
    is_interactive_call_result_115107 = invoke(stypy.reporting.localization.Localization(__file__, 310, 7), is_interactive_115105, *[], **kwargs_115106)
    
    # Testing the type of an if condition (line 310)
    if_condition_115108 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 310, 4), is_interactive_call_result_115107)
    # Assigning a type to the variable 'if_condition_115108' (line 310)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 310, 4), 'if_condition_115108', if_condition_115108)
    # SSA begins for if statement (line 310)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to draw_all(...): (line 311)
    # Processing the call keyword arguments (line 311)
    kwargs_115110 = {}
    # Getting the type of 'draw_all' (line 311)
    draw_all_115109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 311, 8), 'draw_all', False)
    # Calling draw_all(args, kwargs) (line 311)
    draw_all_call_result_115111 = invoke(stypy.reporting.localization.Localization(__file__, 311, 8), draw_all_115109, *[], **kwargs_115110)
    
    # SSA join for if statement (line 310)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'rcdefaults(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rcdefaults' in the type store
    # Getting the type of 'stypy_return_type' (line 307)
    stypy_return_type_115112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 307, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115112)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rcdefaults'
    return stypy_return_type_115112

# Assigning a type to the variable 'rcdefaults' (line 307)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 307, 0), 'rcdefaults', rcdefaults)

@norecursion
def gci(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'gci'
    module_type_store = module_type_store.open_function_context('gci', 317, 0, False)
    
    # Passed parameters checking function
    gci.stypy_localization = localization
    gci.stypy_type_of_self = None
    gci.stypy_type_store = module_type_store
    gci.stypy_function_name = 'gci'
    gci.stypy_param_names_list = []
    gci.stypy_varargs_param_name = None
    gci.stypy_kwargs_param_name = None
    gci.stypy_call_defaults = defaults
    gci.stypy_call_varargs = varargs
    gci.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'gci', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'gci', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'gci(...)' code ##################

    unicode_115113 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 330, (-1)), 'unicode', u'\n    Get the current colorable artist.  Specifically, returns the\n    current :class:`~matplotlib.cm.ScalarMappable` instance (image or\n    patch collection), or *None* if no images or patch collections\n    have been defined.  The commands :func:`~matplotlib.pyplot.imshow`\n    and :func:`~matplotlib.pyplot.figimage` create\n    :class:`~matplotlib.image.Image` instances, and the commands\n    :func:`~matplotlib.pyplot.pcolor` and\n    :func:`~matplotlib.pyplot.scatter` create\n    :class:`~matplotlib.collections.Collection` instances.  The\n    current image is an attribute of the current axes, or the nearest\n    earlier axes in the current figure that contains an image.\n    ')
    
    # Call to _gci(...): (line 331)
    # Processing the call keyword arguments (line 331)
    kwargs_115118 = {}
    
    # Call to gcf(...): (line 331)
    # Processing the call keyword arguments (line 331)
    kwargs_115115 = {}
    # Getting the type of 'gcf' (line 331)
    gcf_115114 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 331, 11), 'gcf', False)
    # Calling gcf(args, kwargs) (line 331)
    gcf_call_result_115116 = invoke(stypy.reporting.localization.Localization(__file__, 331, 11), gcf_115114, *[], **kwargs_115115)
    
    # Obtaining the member '_gci' of a type (line 331)
    _gci_115117 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 331, 11), gcf_call_result_115116, '_gci')
    # Calling _gci(args, kwargs) (line 331)
    _gci_call_result_115119 = invoke(stypy.reporting.localization.Localization(__file__, 331, 11), _gci_115117, *[], **kwargs_115118)
    
    # Assigning a type to the variable 'stypy_return_type' (line 331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 331, 4), 'stypy_return_type', _gci_call_result_115119)
    
    # ################# End of 'gci(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'gci' in the type store
    # Getting the type of 'stypy_return_type' (line 317)
    stypy_return_type_115120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 317, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115120)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'gci'
    return stypy_return_type_115120

# Assigning a type to the variable 'gci' (line 317)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 317, 0), 'gci', gci)

@norecursion
def sci(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'sci'
    module_type_store = module_type_store.open_function_context('sci', 334, 0, False)
    
    # Passed parameters checking function
    sci.stypy_localization = localization
    sci.stypy_type_of_self = None
    sci.stypy_type_store = module_type_store
    sci.stypy_function_name = 'sci'
    sci.stypy_param_names_list = ['im']
    sci.stypy_varargs_param_name = None
    sci.stypy_kwargs_param_name = None
    sci.stypy_call_defaults = defaults
    sci.stypy_call_varargs = varargs
    sci.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sci', ['im'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sci', localization, ['im'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sci(...)' code ##################

    unicode_115121 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 341, (-1)), 'unicode', u'\n    Set the current image.  This image will be the target of colormap\n    commands like :func:`~matplotlib.pyplot.jet`,\n    :func:`~matplotlib.pyplot.hot` or\n    :func:`~matplotlib.pyplot.clim`).  The current image is an\n    attribute of the current axes.\n    ')
    
    # Call to _sci(...): (line 342)
    # Processing the call arguments (line 342)
    # Getting the type of 'im' (line 342)
    im_115126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 15), 'im', False)
    # Processing the call keyword arguments (line 342)
    kwargs_115127 = {}
    
    # Call to gca(...): (line 342)
    # Processing the call keyword arguments (line 342)
    kwargs_115123 = {}
    # Getting the type of 'gca' (line 342)
    gca_115122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 342, 4), 'gca', False)
    # Calling gca(args, kwargs) (line 342)
    gca_call_result_115124 = invoke(stypy.reporting.localization.Localization(__file__, 342, 4), gca_115122, *[], **kwargs_115123)
    
    # Obtaining the member '_sci' of a type (line 342)
    _sci_115125 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 342, 4), gca_call_result_115124, '_sci')
    # Calling _sci(args, kwargs) (line 342)
    _sci_call_result_115128 = invoke(stypy.reporting.localization.Localization(__file__, 342, 4), _sci_115125, *[im_115126], **kwargs_115127)
    
    
    # ################# End of 'sci(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sci' in the type store
    # Getting the type of 'stypy_return_type' (line 334)
    stypy_return_type_115129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 334, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115129)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sci'
    return stypy_return_type_115129

# Assigning a type to the variable 'sci' (line 334)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 334, 0), 'sci', sci)

@norecursion
def setp(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'setp'
    module_type_store = module_type_store.open_function_context('setp', 347, 0, False)
    
    # Passed parameters checking function
    setp.stypy_localization = localization
    setp.stypy_type_of_self = None
    setp.stypy_type_store = module_type_store
    setp.stypy_function_name = 'setp'
    setp.stypy_param_names_list = []
    setp.stypy_varargs_param_name = 'args'
    setp.stypy_kwargs_param_name = 'kwargs'
    setp.stypy_call_defaults = defaults
    setp.stypy_call_varargs = varargs
    setp.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'setp', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'setp', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'setp(...)' code ##################

    
    # Call to _setp(...): (line 349)
    # Getting the type of 'args' (line 349)
    args_115131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 18), 'args', False)
    # Processing the call keyword arguments (line 349)
    # Getting the type of 'kwargs' (line 349)
    kwargs_115132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 26), 'kwargs', False)
    kwargs_115133 = {'kwargs_115132': kwargs_115132}
    # Getting the type of '_setp' (line 349)
    _setp_115130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 349, 11), '_setp', False)
    # Calling _setp(args, kwargs) (line 349)
    _setp_call_result_115134 = invoke(stypy.reporting.localization.Localization(__file__, 349, 11), _setp_115130, *[args_115131], **kwargs_115133)
    
    # Assigning a type to the variable 'stypy_return_type' (line 349)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 349, 4), 'stypy_return_type', _setp_call_result_115134)
    
    # ################# End of 'setp(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'setp' in the type store
    # Getting the type of 'stypy_return_type' (line 347)
    stypy_return_type_115135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 347, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115135)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'setp'
    return stypy_return_type_115135

# Assigning a type to the variable 'setp' (line 347)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 347, 0), 'setp', setp)

@norecursion
def xkcd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_115136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 15), 'int')
    int_115137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 25), 'int')
    int_115138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 352, 41), 'int')
    defaults = [int_115136, int_115137, int_115138]
    # Create a new context for function 'xkcd'
    module_type_store = module_type_store.open_function_context('xkcd', 352, 0, False)
    
    # Passed parameters checking function
    xkcd.stypy_localization = localization
    xkcd.stypy_type_of_self = None
    xkcd.stypy_type_store = module_type_store
    xkcd.stypy_function_name = 'xkcd'
    xkcd.stypy_param_names_list = ['scale', 'length', 'randomness']
    xkcd.stypy_varargs_param_name = None
    xkcd.stypy_kwargs_param_name = None
    xkcd.stypy_call_defaults = defaults
    xkcd.stypy_call_varargs = varargs
    xkcd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'xkcd', ['scale', 'length', 'randomness'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'xkcd', localization, ['scale', 'length', 'randomness'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'xkcd(...)' code ##################

    unicode_115139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 385, (-1)), 'unicode', u'\n    Turns on `xkcd <https://xkcd.com/>`_ sketch-style drawing mode.\n    This will only have effect on things drawn after this function is\n    called.\n\n    For best results, the "Humor Sans" font should be installed: it is\n    not included with matplotlib.\n\n    Parameters\n    ----------\n    scale : float, optional\n        The amplitude of the wiggle perpendicular to the source line.\n    length : float, optional\n        The length of the wiggle along the line.\n    randomness : float, optional\n        The scale factor by which the length is shrunken or expanded.\n\n    Notes\n    -----\n    This function works by a number of rcParams, so it will probably\n    override others you have set before.\n\n    If you want the effects of this function to be temporary, it can\n    be used as a context manager, for example::\n\n        with plt.xkcd():\n            # This figure will be in XKCD-style\n            fig1 = plt.figure()\n            # ...\n\n        # This figure will be in regular style\n        fig2 = plt.figure()\n    ')
    
    
    # Obtaining the type of the subscript
    unicode_115140 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 386, 16), 'unicode', u'text.usetex')
    # Getting the type of 'rcParams' (line 386)
    rcParams_115141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 386, 7), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 386)
    getitem___115142 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 386, 7), rcParams_115141, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 386)
    subscript_call_result_115143 = invoke(stypy.reporting.localization.Localization(__file__, 386, 7), getitem___115142, unicode_115140)
    
    # Testing the type of an if condition (line 386)
    if_condition_115144 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 386, 4), subscript_call_result_115143)
    # Assigning a type to the variable 'if_condition_115144' (line 386)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 386, 4), 'if_condition_115144', if_condition_115144)
    # SSA begins for if statement (line 386)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to RuntimeError(...): (line 387)
    # Processing the call arguments (line 387)
    unicode_115146 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 388, 12), 'unicode', u'xkcd mode is not compatible with text.usetex = True')
    # Processing the call keyword arguments (line 387)
    kwargs_115147 = {}
    # Getting the type of 'RuntimeError' (line 387)
    RuntimeError_115145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 387, 14), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 387)
    RuntimeError_call_result_115148 = invoke(stypy.reporting.localization.Localization(__file__, 387, 14), RuntimeError_115145, *[unicode_115146], **kwargs_115147)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 387, 8), RuntimeError_call_result_115148, 'raise parameter', BaseException)
    # SSA join for if statement (line 386)
    module_type_store = module_type_store.join_ssa_context()
    
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 390, 4))
    
    # 'from matplotlib import patheffects' statement (line 390)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_115149 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 390, 4), 'matplotlib')

    if (type(import_115149) is not StypyTypeError):

        if (import_115149 != 'pyd_module'):
            __import__(import_115149)
            sys_modules_115150 = sys.modules[import_115149]
            import_from_module(stypy.reporting.localization.Localization(__file__, 390, 4), 'matplotlib', sys_modules_115150.module_type_store, module_type_store, ['patheffects'])
            nest_module(stypy.reporting.localization.Localization(__file__, 390, 4), __file__, sys_modules_115150, sys_modules_115150.module_type_store, module_type_store)
        else:
            from matplotlib import patheffects

            import_from_module(stypy.reporting.localization.Localization(__file__, 390, 4), 'matplotlib', None, module_type_store, ['patheffects'], [patheffects])

    else:
        # Assigning a type to the variable 'matplotlib' (line 390)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 390, 4), 'matplotlib', import_115149)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Assigning a Call to a Name (line 391):
    
    # Assigning a Call to a Name (line 391):
    
    # Call to rc_context(...): (line 391)
    # Processing the call keyword arguments (line 391)
    kwargs_115152 = {}
    # Getting the type of 'rc_context' (line 391)
    rc_context_115151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 391, 14), 'rc_context', False)
    # Calling rc_context(args, kwargs) (line 391)
    rc_context_call_result_115153 = invoke(stypy.reporting.localization.Localization(__file__, 391, 14), rc_context_115151, *[], **kwargs_115152)
    
    # Assigning a type to the variable 'context' (line 391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 391, 4), 'context', rc_context_call_result_115153)
    
    
    # SSA begins for try-except statement (line 392)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'try-except')
    
    # Assigning a List to a Subscript (line 393):
    
    # Assigning a List to a Subscript (line 393):
    
    # Obtaining an instance of the builtin type 'list' (line 393)
    list_115154 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 34), 'list')
    # Adding type elements to the builtin type 'list' instance (line 393)
    # Adding element type (line 393)
    unicode_115155 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 35), 'unicode', u'xkcd')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 393, 34), list_115154, unicode_115155)
    # Adding element type (line 393)
    unicode_115156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 43), 'unicode', u'Humor Sans')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 393, 34), list_115154, unicode_115156)
    # Adding element type (line 393)
    unicode_115157 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 57), 'unicode', u'Comic Sans MS')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 393, 34), list_115154, unicode_115157)
    
    # Getting the type of 'rcParams' (line 393)
    rcParams_115158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 393, 8), 'rcParams')
    unicode_115159 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 393, 17), 'unicode', u'font.family')
    # Storing an element on a container (line 393)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 393, 8), rcParams_115158, (unicode_115159, list_115154))
    
    # Assigning a Num to a Subscript (line 394):
    
    # Assigning a Num to a Subscript (line 394):
    float_115160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 32), 'float')
    # Getting the type of 'rcParams' (line 394)
    rcParams_115161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 394, 8), 'rcParams')
    unicode_115162 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 394, 17), 'unicode', u'font.size')
    # Storing an element on a container (line 394)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 394, 8), rcParams_115161, (unicode_115162, float_115160))
    
    # Assigning a Tuple to a Subscript (line 395):
    
    # Assigning a Tuple to a Subscript (line 395):
    
    # Obtaining an instance of the builtin type 'tuple' (line 395)
    tuple_115163 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 35), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 395)
    # Adding element type (line 395)
    # Getting the type of 'scale' (line 395)
    scale_115164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 35), 'scale')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 395, 35), tuple_115163, scale_115164)
    # Adding element type (line 395)
    # Getting the type of 'length' (line 395)
    length_115165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 42), 'length')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 395, 35), tuple_115163, length_115165)
    # Adding element type (line 395)
    # Getting the type of 'randomness' (line 395)
    randomness_115166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 50), 'randomness')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 395, 35), tuple_115163, randomness_115166)
    
    # Getting the type of 'rcParams' (line 395)
    rcParams_115167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 395, 8), 'rcParams')
    unicode_115168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 395, 17), 'unicode', u'path.sketch')
    # Storing an element on a container (line 395)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 395, 8), rcParams_115167, (unicode_115168, tuple_115163))
    
    # Assigning a List to a Subscript (line 396):
    
    # Assigning a List to a Subscript (line 396):
    
    # Obtaining an instance of the builtin type 'list' (line 396)
    list_115169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 35), 'list')
    # Adding type elements to the builtin type 'list' instance (line 396)
    # Adding element type (line 396)
    
    # Call to withStroke(...): (line 397)
    # Processing the call keyword arguments (line 397)
    int_115172 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 45), 'int')
    keyword_115173 = int_115172
    unicode_115174 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 397, 59), 'unicode', u'w')
    keyword_115175 = unicode_115174
    kwargs_115176 = {'foreground': keyword_115175, 'linewidth': keyword_115173}
    # Getting the type of 'patheffects' (line 397)
    patheffects_115170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 397, 12), 'patheffects', False)
    # Obtaining the member 'withStroke' of a type (line 397)
    withStroke_115171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 397, 12), patheffects_115170, 'withStroke')
    # Calling withStroke(args, kwargs) (line 397)
    withStroke_call_result_115177 = invoke(stypy.reporting.localization.Localization(__file__, 397, 12), withStroke_115171, *[], **kwargs_115176)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 396, 35), list_115169, withStroke_call_result_115177)
    
    # Getting the type of 'rcParams' (line 396)
    rcParams_115178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 396, 8), 'rcParams')
    unicode_115179 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 396, 17), 'unicode', u'path.effects')
    # Storing an element on a container (line 396)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 396, 8), rcParams_115178, (unicode_115179, list_115169))
    
    # Assigning a Num to a Subscript (line 398):
    
    # Assigning a Num to a Subscript (line 398):
    float_115180 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 37), 'float')
    # Getting the type of 'rcParams' (line 398)
    rcParams_115181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 398, 8), 'rcParams')
    unicode_115182 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 398, 17), 'unicode', u'axes.linewidth')
    # Storing an element on a container (line 398)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 398, 8), rcParams_115181, (unicode_115182, float_115180))
    
    # Assigning a Num to a Subscript (line 399):
    
    # Assigning a Num to a Subscript (line 399):
    float_115183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 38), 'float')
    # Getting the type of 'rcParams' (line 399)
    rcParams_115184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 399, 8), 'rcParams')
    unicode_115185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 399, 17), 'unicode', u'lines.linewidth')
    # Storing an element on a container (line 399)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 399, 8), rcParams_115184, (unicode_115185, float_115183))
    
    # Assigning a Str to a Subscript (line 400):
    
    # Assigning a Str to a Subscript (line 400):
    unicode_115186 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 39), 'unicode', u'white')
    # Getting the type of 'rcParams' (line 400)
    rcParams_115187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 400, 8), 'rcParams')
    unicode_115188 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 400, 17), 'unicode', u'figure.facecolor')
    # Storing an element on a container (line 400)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 400, 8), rcParams_115187, (unicode_115188, unicode_115186))
    
    # Assigning a Num to a Subscript (line 401):
    
    # Assigning a Num to a Subscript (line 401):
    float_115189 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, 37), 'float')
    # Getting the type of 'rcParams' (line 401)
    rcParams_115190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 401, 8), 'rcParams')
    unicode_115191 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 401, 17), 'unicode', u'grid.linewidth')
    # Storing an element on a container (line 401)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 401, 8), rcParams_115190, (unicode_115191, float_115189))
    
    # Assigning a Name to a Subscript (line 402):
    
    # Assigning a Name to a Subscript (line 402):
    # Getting the type of 'False' (line 402)
    False_115192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 32), 'False')
    # Getting the type of 'rcParams' (line 402)
    rcParams_115193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 402, 8), 'rcParams')
    unicode_115194 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 402, 17), 'unicode', u'axes.grid')
    # Storing an element on a container (line 402)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 402, 8), rcParams_115193, (unicode_115194, False_115192))
    
    # Assigning a Name to a Subscript (line 403):
    
    # Assigning a Name to a Subscript (line 403):
    # Getting the type of 'False' (line 403)
    False_115195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 41), 'False')
    # Getting the type of 'rcParams' (line 403)
    rcParams_115196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 403, 8), 'rcParams')
    unicode_115197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 403, 17), 'unicode', u'axes.unicode_minus')
    # Storing an element on a container (line 403)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 403, 8), rcParams_115196, (unicode_115197, False_115195))
    
    # Assigning a Str to a Subscript (line 404):
    
    # Assigning a Str to a Subscript (line 404):
    unicode_115198 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 37), 'unicode', u'black')
    # Getting the type of 'rcParams' (line 404)
    rcParams_115199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 404, 8), 'rcParams')
    unicode_115200 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 404, 17), 'unicode', u'axes.edgecolor')
    # Storing an element on a container (line 404)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 404, 8), rcParams_115199, (unicode_115200, unicode_115198))
    
    # Assigning a Num to a Subscript (line 405):
    
    # Assigning a Num to a Subscript (line 405):
    int_115201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 405, 39), 'int')
    # Getting the type of 'rcParams' (line 405)
    rcParams_115202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 405, 8), 'rcParams')
    unicode_115203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 405, 17), 'unicode', u'xtick.major.size')
    # Storing an element on a container (line 405)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 405, 8), rcParams_115202, (unicode_115203, int_115201))
    
    # Assigning a Num to a Subscript (line 406):
    
    # Assigning a Num to a Subscript (line 406):
    int_115204 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, 40), 'int')
    # Getting the type of 'rcParams' (line 406)
    rcParams_115205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 406, 8), 'rcParams')
    unicode_115206 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 406, 17), 'unicode', u'xtick.major.width')
    # Storing an element on a container (line 406)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 406, 8), rcParams_115205, (unicode_115206, int_115204))
    
    # Assigning a Num to a Subscript (line 407):
    
    # Assigning a Num to a Subscript (line 407):
    int_115207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 407, 39), 'int')
    # Getting the type of 'rcParams' (line 407)
    rcParams_115208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 407, 8), 'rcParams')
    unicode_115209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 407, 17), 'unicode', u'ytick.major.size')
    # Storing an element on a container (line 407)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 407, 8), rcParams_115208, (unicode_115209, int_115207))
    
    # Assigning a Num to a Subscript (line 408):
    
    # Assigning a Num to a Subscript (line 408):
    int_115210 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 408, 40), 'int')
    # Getting the type of 'rcParams' (line 408)
    rcParams_115211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 408, 8), 'rcParams')
    unicode_115212 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 408, 17), 'unicode', u'ytick.major.width')
    # Storing an element on a container (line 408)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 408, 8), rcParams_115211, (unicode_115212, int_115210))
    # SSA branch for the except part of a try statement (line 392)
    # SSA branch for the except '<any exception>' branch of a try statement (line 392)
    module_type_store.open_ssa_branch('except')
    
    # Call to __exit__(...): (line 410)
    
    # Call to exc_info(...): (line 410)
    # Processing the call keyword arguments (line 410)
    kwargs_115217 = {}
    # Getting the type of 'sys' (line 410)
    sys_115215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 26), 'sys', False)
    # Obtaining the member 'exc_info' of a type (line 410)
    exc_info_115216 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 26), sys_115215, 'exc_info')
    # Calling exc_info(args, kwargs) (line 410)
    exc_info_call_result_115218 = invoke(stypy.reporting.localization.Localization(__file__, 410, 26), exc_info_115216, *[], **kwargs_115217)
    
    # Processing the call keyword arguments (line 410)
    kwargs_115219 = {}
    # Getting the type of 'context' (line 410)
    context_115213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 410, 8), 'context', False)
    # Obtaining the member '__exit__' of a type (line 410)
    exit___115214 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 410, 8), context_115213, '__exit__')
    # Calling __exit__(args, kwargs) (line 410)
    exit___call_result_115220 = invoke(stypy.reporting.localization.Localization(__file__, 410, 8), exit___115214, *[exc_info_call_result_115218], **kwargs_115219)
    
    # SSA join for try-except statement (line 392)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'context' (line 412)
    context_115221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 412, 11), 'context')
    # Assigning a type to the variable 'stypy_return_type' (line 412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 412, 4), 'stypy_return_type', context_115221)
    
    # ################# End of 'xkcd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'xkcd' in the type store
    # Getting the type of 'stypy_return_type' (line 352)
    stypy_return_type_115222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 352, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115222)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'xkcd'
    return stypy_return_type_115222

# Assigning a type to the variable 'xkcd' (line 352)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 352, 0), 'xkcd', xkcd)

@norecursion
def figure(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 417)
    None_115223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 15), 'None')
    # Getting the type of 'None' (line 418)
    None_115224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 418, 19), 'None')
    # Getting the type of 'None' (line 419)
    None_115225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 419, 15), 'None')
    # Getting the type of 'None' (line 420)
    None_115226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 420, 21), 'None')
    # Getting the type of 'None' (line 421)
    None_115227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 421, 21), 'None')
    # Getting the type of 'True' (line 422)
    True_115228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 422, 19), 'True')
    # Getting the type of 'Figure' (line 423)
    Figure_115229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 423, 23), 'Figure')
    # Getting the type of 'False' (line 424)
    False_115230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 424, 17), 'False')
    defaults = [None_115223, None_115224, None_115225, None_115226, None_115227, True_115228, Figure_115229, False_115230]
    # Create a new context for function 'figure'
    module_type_store = module_type_store.open_function_context('figure', 417, 0, False)
    
    # Passed parameters checking function
    figure.stypy_localization = localization
    figure.stypy_type_of_self = None
    figure.stypy_type_store = module_type_store
    figure.stypy_function_name = 'figure'
    figure.stypy_param_names_list = ['num', 'figsize', 'dpi', 'facecolor', 'edgecolor', 'frameon', 'FigureClass', 'clear']
    figure.stypy_varargs_param_name = None
    figure.stypy_kwargs_param_name = 'kwargs'
    figure.stypy_call_defaults = defaults
    figure.stypy_call_varargs = varargs
    figure.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'figure', ['num', 'figsize', 'dpi', 'facecolor', 'edgecolor', 'frameon', 'FigureClass', 'clear'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'figure', localization, ['num', 'figsize', 'dpi', 'facecolor', 'edgecolor', 'frameon', 'FigureClass', 'clear'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'figure(...)' code ##################

    unicode_115231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 482, (-1)), 'unicode', u'\n    Creates a new figure.\n\n    Parameters\n    ----------\n\n    num : integer or string, optional, default: none\n        If not provided, a new figure will be created, and the figure number\n        will be incremented. The figure objects holds this number in a `number`\n        attribute.\n        If num is provided, and a figure with this id already exists, make\n        it active, and returns a reference to it. If this figure does not\n        exists, create it and returns it.\n        If num is a string, the window title will be set to this figure\'s\n        `num`.\n\n    figsize : tuple of integers, optional, default: None\n        width, height in inches. If not provided, defaults to rc\n        figure.figsize.\n\n    dpi : integer, optional, default: None\n        resolution of the figure. If not provided, defaults to rc figure.dpi.\n\n    facecolor :\n        the background color. If not provided, defaults to rc figure.facecolor.\n\n    edgecolor :\n        the border color. If not provided, defaults to rc figure.edgecolor.\n\n    frameon : bool, optional, default: True\n        If False, suppress drawing the figure frame.\n\n    FigureClass : class derived from matplotlib.figure.Figure\n        Optionally use a custom Figure instance.\n\n    clear : bool, optional, default: False\n        If True and the figure already exists, then it is cleared.\n\n    Returns\n    -------\n    figure : Figure\n        The Figure instance returned will also be passed to new_figure_manager\n        in the backends, which allows to hook custom Figure classes into the\n        pylab interface. Additional kwargs will be passed to the figure init\n        function.\n\n    Notes\n    -----\n    If you are creating many figures, make sure you explicitly call "close"\n    on the figures you are not using, because this will enable pylab\n    to properly clean up the memory.\n\n    rcParams defines the default values, which can be modified in the\n    matplotlibrc file\n\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 484)
    # Getting the type of 'figsize' (line 484)
    figsize_115232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 7), 'figsize')
    # Getting the type of 'None' (line 484)
    None_115233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 484, 18), 'None')
    
    (may_be_115234, more_types_in_union_115235) = may_be_none(figsize_115232, None_115233)

    if may_be_115234:

        if more_types_in_union_115235:
            # Runtime conditional SSA (line 484)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Subscript to a Name (line 485):
        
        # Assigning a Subscript to a Name (line 485):
        
        # Obtaining the type of the subscript
        unicode_115236 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 485, 27), 'unicode', u'figure.figsize')
        # Getting the type of 'rcParams' (line 485)
        rcParams_115237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 485, 18), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 485)
        getitem___115238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 485, 18), rcParams_115237, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 485)
        subscript_call_result_115239 = invoke(stypy.reporting.localization.Localization(__file__, 485, 18), getitem___115238, unicode_115236)
        
        # Assigning a type to the variable 'figsize' (line 485)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 485, 8), 'figsize', subscript_call_result_115239)

        if more_types_in_union_115235:
            # SSA join for if statement (line 484)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 486)
    # Getting the type of 'dpi' (line 486)
    dpi_115240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 7), 'dpi')
    # Getting the type of 'None' (line 486)
    None_115241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 486, 14), 'None')
    
    (may_be_115242, more_types_in_union_115243) = may_be_none(dpi_115240, None_115241)

    if may_be_115242:

        if more_types_in_union_115243:
            # Runtime conditional SSA (line 486)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Subscript to a Name (line 487):
        
        # Assigning a Subscript to a Name (line 487):
        
        # Obtaining the type of the subscript
        unicode_115244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 487, 23), 'unicode', u'figure.dpi')
        # Getting the type of 'rcParams' (line 487)
        rcParams_115245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 487, 14), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 487)
        getitem___115246 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 487, 14), rcParams_115245, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 487)
        subscript_call_result_115247 = invoke(stypy.reporting.localization.Localization(__file__, 487, 14), getitem___115246, unicode_115244)
        
        # Assigning a type to the variable 'dpi' (line 487)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 487, 8), 'dpi', subscript_call_result_115247)

        if more_types_in_union_115243:
            # SSA join for if statement (line 486)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 488)
    # Getting the type of 'facecolor' (line 488)
    facecolor_115248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 7), 'facecolor')
    # Getting the type of 'None' (line 488)
    None_115249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 488, 20), 'None')
    
    (may_be_115250, more_types_in_union_115251) = may_be_none(facecolor_115248, None_115249)

    if may_be_115250:

        if more_types_in_union_115251:
            # Runtime conditional SSA (line 488)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Subscript to a Name (line 489):
        
        # Assigning a Subscript to a Name (line 489):
        
        # Obtaining the type of the subscript
        unicode_115252 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 489, 29), 'unicode', u'figure.facecolor')
        # Getting the type of 'rcParams' (line 489)
        rcParams_115253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 489, 20), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 489)
        getitem___115254 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 489, 20), rcParams_115253, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 489)
        subscript_call_result_115255 = invoke(stypy.reporting.localization.Localization(__file__, 489, 20), getitem___115254, unicode_115252)
        
        # Assigning a type to the variable 'facecolor' (line 489)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 489, 8), 'facecolor', subscript_call_result_115255)

        if more_types_in_union_115251:
            # SSA join for if statement (line 488)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 490)
    # Getting the type of 'edgecolor' (line 490)
    edgecolor_115256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 7), 'edgecolor')
    # Getting the type of 'None' (line 490)
    None_115257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 490, 20), 'None')
    
    (may_be_115258, more_types_in_union_115259) = may_be_none(edgecolor_115256, None_115257)

    if may_be_115258:

        if more_types_in_union_115259:
            # Runtime conditional SSA (line 490)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Subscript to a Name (line 491):
        
        # Assigning a Subscript to a Name (line 491):
        
        # Obtaining the type of the subscript
        unicode_115260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 491, 29), 'unicode', u'figure.edgecolor')
        # Getting the type of 'rcParams' (line 491)
        rcParams_115261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 491, 20), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 491)
        getitem___115262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 491, 20), rcParams_115261, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 491)
        subscript_call_result_115263 = invoke(stypy.reporting.localization.Localization(__file__, 491, 20), getitem___115262, unicode_115260)
        
        # Assigning a type to the variable 'edgecolor' (line 491)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 491, 8), 'edgecolor', subscript_call_result_115263)

        if more_types_in_union_115259:
            # SSA join for if statement (line 490)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 493):
    
    # Assigning a Call to a Name (line 493):
    
    # Call to get_fignums(...): (line 493)
    # Processing the call keyword arguments (line 493)
    kwargs_115265 = {}
    # Getting the type of 'get_fignums' (line 493)
    get_fignums_115264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 493, 14), 'get_fignums', False)
    # Calling get_fignums(args, kwargs) (line 493)
    get_fignums_call_result_115266 = invoke(stypy.reporting.localization.Localization(__file__, 493, 14), get_fignums_115264, *[], **kwargs_115265)
    
    # Assigning a type to the variable 'allnums' (line 493)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 493, 4), 'allnums', get_fignums_call_result_115266)
    
    # Assigning a IfExp to a Name (line 494):
    
    # Assigning a IfExp to a Name (line 494):
    
    # Getting the type of 'allnums' (line 494)
    allnums_115267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 35), 'allnums')
    # Testing the type of an if expression (line 494)
    is_suitable_condition(stypy.reporting.localization.Localization(__file__, 494, 15), allnums_115267)
    # SSA begins for if expression (line 494)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if expression')
    
    # Call to max(...): (line 494)
    # Processing the call arguments (line 494)
    # Getting the type of 'allnums' (line 494)
    allnums_115269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 19), 'allnums', False)
    # Processing the call keyword arguments (line 494)
    kwargs_115270 = {}
    # Getting the type of 'max' (line 494)
    max_115268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 494, 15), 'max', False)
    # Calling max(args, kwargs) (line 494)
    max_call_result_115271 = invoke(stypy.reporting.localization.Localization(__file__, 494, 15), max_115268, *[allnums_115269], **kwargs_115270)
    
    int_115272 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 30), 'int')
    # Applying the binary operator '+' (line 494)
    result_add_115273 = python_operator(stypy.reporting.localization.Localization(__file__, 494, 15), '+', max_call_result_115271, int_115272)
    
    # SSA branch for the else part of an if expression (line 494)
    module_type_store.open_ssa_branch('if expression else')
    int_115274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 494, 48), 'int')
    # SSA join for if expression (line 494)
    module_type_store = module_type_store.join_ssa_context()
    if_exp_115275 = union_type.UnionType.add(result_add_115273, int_115274)
    
    # Assigning a type to the variable 'next_num' (line 494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 494, 4), 'next_num', if_exp_115275)
    
    # Assigning a Str to a Name (line 495):
    
    # Assigning a Str to a Name (line 495):
    unicode_115276 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 495, 15), 'unicode', u'')
    # Assigning a type to the variable 'figLabel' (line 495)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 495, 4), 'figLabel', unicode_115276)
    
    # Type idiom detected: calculating its left and rigth part (line 496)
    # Getting the type of 'num' (line 496)
    num_115277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 7), 'num')
    # Getting the type of 'None' (line 496)
    None_115278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 496, 14), 'None')
    
    (may_be_115279, more_types_in_union_115280) = may_be_none(num_115277, None_115278)

    if may_be_115279:

        if more_types_in_union_115280:
            # Runtime conditional SSA (line 496)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Name (line 497):
        
        # Assigning a Name to a Name (line 497):
        # Getting the type of 'next_num' (line 497)
        next_num_115281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 497, 14), 'next_num')
        # Assigning a type to the variable 'num' (line 497)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 497, 8), 'num', next_num_115281)

        if more_types_in_union_115280:
            # Runtime conditional SSA for else branch (line 496)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_115279) or more_types_in_union_115280):
        
        
        # Call to isinstance(...): (line 498)
        # Processing the call arguments (line 498)
        # Getting the type of 'num' (line 498)
        num_115283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 20), 'num', False)
        # Getting the type of 'six' (line 498)
        six_115284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 25), 'six', False)
        # Obtaining the member 'string_types' of a type (line 498)
        string_types_115285 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 498, 25), six_115284, 'string_types')
        # Processing the call keyword arguments (line 498)
        kwargs_115286 = {}
        # Getting the type of 'isinstance' (line 498)
        isinstance_115282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 498, 9), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 498)
        isinstance_call_result_115287 = invoke(stypy.reporting.localization.Localization(__file__, 498, 9), isinstance_115282, *[num_115283, string_types_115285], **kwargs_115286)
        
        # Testing the type of an if condition (line 498)
        if_condition_115288 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 498, 9), isinstance_call_result_115287)
        # Assigning a type to the variable 'if_condition_115288' (line 498)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 498, 9), 'if_condition_115288', if_condition_115288)
        # SSA begins for if statement (line 498)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Name (line 499):
        
        # Assigning a Name to a Name (line 499):
        # Getting the type of 'num' (line 499)
        num_115289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 499, 19), 'num')
        # Assigning a type to the variable 'figLabel' (line 499)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 499, 8), 'figLabel', num_115289)
        
        # Assigning a Call to a Name (line 500):
        
        # Assigning a Call to a Name (line 500):
        
        # Call to get_figlabels(...): (line 500)
        # Processing the call keyword arguments (line 500)
        kwargs_115291 = {}
        # Getting the type of 'get_figlabels' (line 500)
        get_figlabels_115290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 500, 20), 'get_figlabels', False)
        # Calling get_figlabels(args, kwargs) (line 500)
        get_figlabels_call_result_115292 = invoke(stypy.reporting.localization.Localization(__file__, 500, 20), get_figlabels_115290, *[], **kwargs_115291)
        
        # Assigning a type to the variable 'allLabels' (line 500)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 500, 8), 'allLabels', get_figlabels_call_result_115292)
        
        
        # Getting the type of 'figLabel' (line 501)
        figLabel_115293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 11), 'figLabel')
        # Getting the type of 'allLabels' (line 501)
        allLabels_115294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 501, 27), 'allLabels')
        # Applying the binary operator 'notin' (line 501)
        result_contains_115295 = python_operator(stypy.reporting.localization.Localization(__file__, 501, 11), 'notin', figLabel_115293, allLabels_115294)
        
        # Testing the type of an if condition (line 501)
        if_condition_115296 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 501, 8), result_contains_115295)
        # Assigning a type to the variable 'if_condition_115296' (line 501)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 501, 8), 'if_condition_115296', if_condition_115296)
        # SSA begins for if statement (line 501)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        
        # Getting the type of 'figLabel' (line 502)
        figLabel_115297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 502, 15), 'figLabel')
        unicode_115298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 502, 27), 'unicode', u'all')
        # Applying the binary operator '==' (line 502)
        result_eq_115299 = python_operator(stypy.reporting.localization.Localization(__file__, 502, 15), '==', figLabel_115297, unicode_115298)
        
        # Testing the type of an if condition (line 502)
        if_condition_115300 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 502, 12), result_eq_115299)
        # Assigning a type to the variable 'if_condition_115300' (line 502)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 502, 12), 'if_condition_115300', if_condition_115300)
        # SSA begins for if statement (line 502)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 503)
        # Processing the call arguments (line 503)
        unicode_115303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 503, 30), 'unicode', u"close('all') closes all existing figures")
        # Processing the call keyword arguments (line 503)
        kwargs_115304 = {}
        # Getting the type of 'warnings' (line 503)
        warnings_115301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 503, 16), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 503)
        warn_115302 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 503, 16), warnings_115301, 'warn')
        # Calling warn(args, kwargs) (line 503)
        warn_call_result_115305 = invoke(stypy.reporting.localization.Localization(__file__, 503, 16), warn_115302, *[unicode_115303], **kwargs_115304)
        
        # SSA join for if statement (line 502)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Name to a Name (line 504):
        
        # Assigning a Name to a Name (line 504):
        # Getting the type of 'next_num' (line 504)
        next_num_115306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 504, 18), 'next_num')
        # Assigning a type to the variable 'num' (line 504)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 504, 12), 'num', next_num_115306)
        # SSA branch for the else part of an if statement (line 501)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 506):
        
        # Assigning a Call to a Name (line 506):
        
        # Call to index(...): (line 506)
        # Processing the call arguments (line 506)
        # Getting the type of 'figLabel' (line 506)
        figLabel_115309 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 35), 'figLabel', False)
        # Processing the call keyword arguments (line 506)
        kwargs_115310 = {}
        # Getting the type of 'allLabels' (line 506)
        allLabels_115307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 506, 19), 'allLabels', False)
        # Obtaining the member 'index' of a type (line 506)
        index_115308 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 506, 19), allLabels_115307, 'index')
        # Calling index(args, kwargs) (line 506)
        index_call_result_115311 = invoke(stypy.reporting.localization.Localization(__file__, 506, 19), index_115308, *[figLabel_115309], **kwargs_115310)
        
        # Assigning a type to the variable 'inum' (line 506)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 506, 12), 'inum', index_call_result_115311)
        
        # Assigning a Subscript to a Name (line 507):
        
        # Assigning a Subscript to a Name (line 507):
        
        # Obtaining the type of the subscript
        # Getting the type of 'inum' (line 507)
        inum_115312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 26), 'inum')
        # Getting the type of 'allnums' (line 507)
        allnums_115313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 507, 18), 'allnums')
        # Obtaining the member '__getitem__' of a type (line 507)
        getitem___115314 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 507, 18), allnums_115313, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 507)
        subscript_call_result_115315 = invoke(stypy.reporting.localization.Localization(__file__, 507, 18), getitem___115314, inum_115312)
        
        # Assigning a type to the variable 'num' (line 507)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 507, 12), 'num', subscript_call_result_115315)
        # SSA join for if statement (line 501)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 498)
        module_type_store.open_ssa_branch('else')
        
        # Assigning a Call to a Name (line 509):
        
        # Assigning a Call to a Name (line 509):
        
        # Call to int(...): (line 509)
        # Processing the call arguments (line 509)
        # Getting the type of 'num' (line 509)
        num_115317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 18), 'num', False)
        # Processing the call keyword arguments (line 509)
        kwargs_115318 = {}
        # Getting the type of 'int' (line 509)
        int_115316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 509, 14), 'int', False)
        # Calling int(args, kwargs) (line 509)
        int_call_result_115319 = invoke(stypy.reporting.localization.Localization(__file__, 509, 14), int_115316, *[num_115317], **kwargs_115318)
        
        # Assigning a type to the variable 'num' (line 509)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 509, 8), 'num', int_call_result_115319)
        # SSA join for if statement (line 498)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_115279 and more_types_in_union_115280):
            # SSA join for if statement (line 496)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 511):
    
    # Assigning a Call to a Name (line 511):
    
    # Call to get_fig_manager(...): (line 511)
    # Processing the call arguments (line 511)
    # Getting the type of 'num' (line 511)
    num_115323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 52), 'num', False)
    # Processing the call keyword arguments (line 511)
    kwargs_115324 = {}
    # Getting the type of '_pylab_helpers' (line 511)
    _pylab_helpers_115320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 511, 17), '_pylab_helpers', False)
    # Obtaining the member 'Gcf' of a type (line 511)
    Gcf_115321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 17), _pylab_helpers_115320, 'Gcf')
    # Obtaining the member 'get_fig_manager' of a type (line 511)
    get_fig_manager_115322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 511, 17), Gcf_115321, 'get_fig_manager')
    # Calling get_fig_manager(args, kwargs) (line 511)
    get_fig_manager_call_result_115325 = invoke(stypy.reporting.localization.Localization(__file__, 511, 17), get_fig_manager_115322, *[num_115323], **kwargs_115324)
    
    # Assigning a type to the variable 'figManager' (line 511)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 511, 4), 'figManager', get_fig_manager_call_result_115325)
    
    # Type idiom detected: calculating its left and rigth part (line 512)
    # Getting the type of 'figManager' (line 512)
    figManager_115326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 7), 'figManager')
    # Getting the type of 'None' (line 512)
    None_115327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 512, 21), 'None')
    
    (may_be_115328, more_types_in_union_115329) = may_be_none(figManager_115326, None_115327)

    if may_be_115328:

        if more_types_in_union_115329:
            # Runtime conditional SSA (line 512)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Subscript to a Name (line 513):
        
        # Assigning a Subscript to a Name (line 513):
        
        # Obtaining the type of the subscript
        unicode_115330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 513, 36), 'unicode', u'figure.max_open_warning')
        # Getting the type of 'rcParams' (line 513)
        rcParams_115331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 513, 27), 'rcParams')
        # Obtaining the member '__getitem__' of a type (line 513)
        getitem___115332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 513, 27), rcParams_115331, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 513)
        subscript_call_result_115333 = invoke(stypy.reporting.localization.Localization(__file__, 513, 27), getitem___115332, unicode_115330)
        
        # Assigning a type to the variable 'max_open_warning' (line 513)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 513, 8), 'max_open_warning', subscript_call_result_115333)
        
        
        # Evaluating a boolean operation
        
        # Getting the type of 'max_open_warning' (line 515)
        max_open_warning_115334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 12), 'max_open_warning')
        int_115335 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 515, 32), 'int')
        # Applying the binary operator '>=' (line 515)
        result_ge_115336 = python_operator(stypy.reporting.localization.Localization(__file__, 515, 12), '>=', max_open_warning_115334, int_115335)
        
        
        
        # Call to len(...): (line 515)
        # Processing the call arguments (line 515)
        # Getting the type of 'allnums' (line 515)
        allnums_115338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 42), 'allnums', False)
        # Processing the call keyword arguments (line 515)
        kwargs_115339 = {}
        # Getting the type of 'len' (line 515)
        len_115337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 38), 'len', False)
        # Calling len(args, kwargs) (line 515)
        len_call_result_115340 = invoke(stypy.reporting.localization.Localization(__file__, 515, 38), len_115337, *[allnums_115338], **kwargs_115339)
        
        # Getting the type of 'max_open_warning' (line 515)
        max_open_warning_115341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 515, 54), 'max_open_warning')
        # Applying the binary operator '>=' (line 515)
        result_ge_115342 = python_operator(stypy.reporting.localization.Localization(__file__, 515, 38), '>=', len_call_result_115340, max_open_warning_115341)
        
        # Applying the binary operator 'and' (line 515)
        result_and_keyword_115343 = python_operator(stypy.reporting.localization.Localization(__file__, 515, 12), 'and', result_ge_115336, result_ge_115342)
        
        # Testing the type of an if condition (line 515)
        if_condition_115344 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 515, 8), result_and_keyword_115343)
        # Assigning a type to the variable 'if_condition_115344' (line 515)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 515, 8), 'if_condition_115344', if_condition_115344)
        # SSA begins for if statement (line 515)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to warn(...): (line 516)
        # Processing the call arguments (line 516)
        unicode_115347 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 517, 16), 'unicode', u'More than %d figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`).')
        # Getting the type of 'max_open_warning' (line 523)
        max_open_warning_115348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 16), 'max_open_warning', False)
        # Applying the binary operator '%' (line 517)
        result_mod_115349 = python_operator(stypy.reporting.localization.Localization(__file__, 517, 16), '%', unicode_115347, max_open_warning_115348)
        
        # Getting the type of 'RuntimeWarning' (line 523)
        RuntimeWarning_115350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 523, 34), 'RuntimeWarning', False)
        # Processing the call keyword arguments (line 516)
        kwargs_115351 = {}
        # Getting the type of 'warnings' (line 516)
        warnings_115345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 516, 12), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 516)
        warn_115346 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 516, 12), warnings_115345, 'warn')
        # Calling warn(args, kwargs) (line 516)
        warn_call_result_115352 = invoke(stypy.reporting.localization.Localization(__file__, 516, 12), warn_115346, *[result_mod_115349, RuntimeWarning_115350], **kwargs_115351)
        
        # SSA join for if statement (line 515)
        module_type_store = module_type_store.join_ssa_context()
        
        
        
        
        # Call to lower(...): (line 525)
        # Processing the call keyword arguments (line 525)
        kwargs_115357 = {}
        
        # Call to get_backend(...): (line 525)
        # Processing the call keyword arguments (line 525)
        kwargs_115354 = {}
        # Getting the type of 'get_backend' (line 525)
        get_backend_115353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 525, 11), 'get_backend', False)
        # Calling get_backend(args, kwargs) (line 525)
        get_backend_call_result_115355 = invoke(stypy.reporting.localization.Localization(__file__, 525, 11), get_backend_115353, *[], **kwargs_115354)
        
        # Obtaining the member 'lower' of a type (line 525)
        lower_115356 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 525, 11), get_backend_call_result_115355, 'lower')
        # Calling lower(args, kwargs) (line 525)
        lower_call_result_115358 = invoke(stypy.reporting.localization.Localization(__file__, 525, 11), lower_115356, *[], **kwargs_115357)
        
        unicode_115359 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 525, 36), 'unicode', u'ps')
        # Applying the binary operator '==' (line 525)
        result_eq_115360 = python_operator(stypy.reporting.localization.Localization(__file__, 525, 11), '==', lower_call_result_115358, unicode_115359)
        
        # Testing the type of an if condition (line 525)
        if_condition_115361 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 525, 8), result_eq_115360)
        # Assigning a type to the variable 'if_condition_115361' (line 525)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 525, 8), 'if_condition_115361', if_condition_115361)
        # SSA begins for if statement (line 525)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Num to a Name (line 526):
        
        # Assigning a Num to a Name (line 526):
        int_115362 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 526, 18), 'int')
        # Assigning a type to the variable 'dpi' (line 526)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 526, 12), 'dpi', int_115362)
        # SSA join for if statement (line 525)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Assigning a Call to a Name (line 528):
        
        # Assigning a Call to a Name (line 528):
        
        # Call to new_figure_manager(...): (line 528)
        # Processing the call arguments (line 528)
        # Getting the type of 'num' (line 528)
        num_115364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 40), 'num', False)
        # Processing the call keyword arguments (line 528)
        # Getting the type of 'figsize' (line 528)
        figsize_115365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 53), 'figsize', False)
        keyword_115366 = figsize_115365
        # Getting the type of 'dpi' (line 529)
        dpi_115367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 529, 44), 'dpi', False)
        keyword_115368 = dpi_115367
        # Getting the type of 'facecolor' (line 530)
        facecolor_115369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 530, 50), 'facecolor', False)
        keyword_115370 = facecolor_115369
        # Getting the type of 'edgecolor' (line 531)
        edgecolor_115371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 531, 50), 'edgecolor', False)
        keyword_115372 = edgecolor_115371
        # Getting the type of 'frameon' (line 532)
        frameon_115373 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 532, 48), 'frameon', False)
        keyword_115374 = frameon_115373
        # Getting the type of 'FigureClass' (line 533)
        FigureClass_115375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 533, 52), 'FigureClass', False)
        keyword_115376 = FigureClass_115375
        # Getting the type of 'kwargs' (line 534)
        kwargs_115377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 534, 42), 'kwargs', False)
        kwargs_115378 = {'edgecolor': keyword_115372, 'facecolor': keyword_115370, 'kwargs_115377': kwargs_115377, 'frameon': keyword_115374, 'FigureClass': keyword_115376, 'figsize': keyword_115366, 'dpi': keyword_115368}
        # Getting the type of 'new_figure_manager' (line 528)
        new_figure_manager_115363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 528, 21), 'new_figure_manager', False)
        # Calling new_figure_manager(args, kwargs) (line 528)
        new_figure_manager_call_result_115379 = invoke(stypy.reporting.localization.Localization(__file__, 528, 21), new_figure_manager_115363, *[num_115364], **kwargs_115378)
        
        # Assigning a type to the variable 'figManager' (line 528)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 528, 8), 'figManager', new_figure_manager_call_result_115379)
        
        # Getting the type of 'figLabel' (line 536)
        figLabel_115380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 536, 11), 'figLabel')
        # Testing the type of an if condition (line 536)
        if_condition_115381 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 536, 8), figLabel_115380)
        # Assigning a type to the variable 'if_condition_115381' (line 536)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 536, 8), 'if_condition_115381', if_condition_115381)
        # SSA begins for if statement (line 536)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to set_window_title(...): (line 537)
        # Processing the call arguments (line 537)
        # Getting the type of 'figLabel' (line 537)
        figLabel_115384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 40), 'figLabel', False)
        # Processing the call keyword arguments (line 537)
        kwargs_115385 = {}
        # Getting the type of 'figManager' (line 537)
        figManager_115382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 537, 12), 'figManager', False)
        # Obtaining the member 'set_window_title' of a type (line 537)
        set_window_title_115383 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 537, 12), figManager_115382, 'set_window_title')
        # Calling set_window_title(args, kwargs) (line 537)
        set_window_title_call_result_115386 = invoke(stypy.reporting.localization.Localization(__file__, 537, 12), set_window_title_115383, *[figLabel_115384], **kwargs_115385)
        
        
        # Call to set_label(...): (line 538)
        # Processing the call arguments (line 538)
        # Getting the type of 'figLabel' (line 538)
        figLabel_115391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 47), 'figLabel', False)
        # Processing the call keyword arguments (line 538)
        kwargs_115392 = {}
        # Getting the type of 'figManager' (line 538)
        figManager_115387 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 538, 12), 'figManager', False)
        # Obtaining the member 'canvas' of a type (line 538)
        canvas_115388 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 12), figManager_115387, 'canvas')
        # Obtaining the member 'figure' of a type (line 538)
        figure_115389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 12), canvas_115388, 'figure')
        # Obtaining the member 'set_label' of a type (line 538)
        set_label_115390 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 538, 12), figure_115389, 'set_label')
        # Calling set_label(args, kwargs) (line 538)
        set_label_call_result_115393 = invoke(stypy.reporting.localization.Localization(__file__, 538, 12), set_label_115390, *[figLabel_115391], **kwargs_115392)
        
        # SSA join for if statement (line 536)
        module_type_store = module_type_store.join_ssa_context()
        

        @norecursion
        def make_active(localization, *varargs, **kwargs):
            global module_type_store
            # Assign values to the parameters with defaults
            defaults = []
            # Create a new context for function 'make_active'
            module_type_store = module_type_store.open_function_context('make_active', 541, 8, False)
            
            # Passed parameters checking function
            make_active.stypy_localization = localization
            make_active.stypy_type_of_self = None
            make_active.stypy_type_store = module_type_store
            make_active.stypy_function_name = 'make_active'
            make_active.stypy_param_names_list = ['event']
            make_active.stypy_varargs_param_name = None
            make_active.stypy_kwargs_param_name = None
            make_active.stypy_call_defaults = defaults
            make_active.stypy_call_varargs = varargs
            make_active.stypy_call_kwargs = kwargs
            arguments = process_argument_values(localization, None, module_type_store, 'make_active', ['event'], None, None, defaults, varargs, kwargs)

            if is_error_type(arguments):
                # Destroy the current context
                module_type_store = module_type_store.close_function_context()
                return arguments

            # Initialize method data
            init_call_information(module_type_store, 'make_active', localization, ['event'], arguments)
            
            # Default return type storage variable (SSA)
            # Assigning a type to the variable 'stypy_return_type'
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
            
            
            # ################# Begin of 'make_active(...)' code ##################

            
            # Call to set_active(...): (line 542)
            # Processing the call arguments (line 542)
            # Getting the type of 'figManager' (line 542)
            figManager_115397 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 42), 'figManager', False)
            # Processing the call keyword arguments (line 542)
            kwargs_115398 = {}
            # Getting the type of '_pylab_helpers' (line 542)
            _pylab_helpers_115394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 542, 12), '_pylab_helpers', False)
            # Obtaining the member 'Gcf' of a type (line 542)
            Gcf_115395 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 12), _pylab_helpers_115394, 'Gcf')
            # Obtaining the member 'set_active' of a type (line 542)
            set_active_115396 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 542, 12), Gcf_115395, 'set_active')
            # Calling set_active(args, kwargs) (line 542)
            set_active_call_result_115399 = invoke(stypy.reporting.localization.Localization(__file__, 542, 12), set_active_115396, *[figManager_115397], **kwargs_115398)
            
            
            # ################# End of 'make_active(...)' code ##################

            # Teardown call information
            teardown_call_information(localization, arguments)
            
            # Storing the return type of function 'make_active' in the type store
            # Getting the type of 'stypy_return_type' (line 541)
            stypy_return_type_115400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'stypy_return_type')
            module_type_store.store_return_type_of_current_context(stypy_return_type_115400)
            
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            
            # Return type of the function 'make_active'
            return stypy_return_type_115400

        # Assigning a type to the variable 'make_active' (line 541)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 541, 8), 'make_active', make_active)
        
        # Assigning a Call to a Name (line 544):
        
        # Assigning a Call to a Name (line 544):
        
        # Call to mpl_connect(...): (line 544)
        # Processing the call arguments (line 544)
        unicode_115404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 544, 44), 'unicode', u'button_press_event')
        # Getting the type of 'make_active' (line 544)
        make_active_115405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 66), 'make_active', False)
        # Processing the call keyword arguments (line 544)
        kwargs_115406 = {}
        # Getting the type of 'figManager' (line 544)
        figManager_115401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 544, 14), 'figManager', False)
        # Obtaining the member 'canvas' of a type (line 544)
        canvas_115402 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 14), figManager_115401, 'canvas')
        # Obtaining the member 'mpl_connect' of a type (line 544)
        mpl_connect_115403 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 544, 14), canvas_115402, 'mpl_connect')
        # Calling mpl_connect(args, kwargs) (line 544)
        mpl_connect_call_result_115407 = invoke(stypy.reporting.localization.Localization(__file__, 544, 14), mpl_connect_115403, *[unicode_115404, make_active_115405], **kwargs_115406)
        
        # Assigning a type to the variable 'cid' (line 544)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 544, 8), 'cid', mpl_connect_call_result_115407)
        
        # Assigning a Name to a Attribute (line 545):
        
        # Assigning a Name to a Attribute (line 545):
        # Getting the type of 'cid' (line 545)
        cid_115408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 29), 'cid')
        # Getting the type of 'figManager' (line 545)
        figManager_115409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 545, 8), 'figManager')
        # Setting the type of the member '_cidgcf' of a type (line 545)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 545, 8), figManager_115409, '_cidgcf', cid_115408)
        
        # Call to set_active(...): (line 547)
        # Processing the call arguments (line 547)
        # Getting the type of 'figManager' (line 547)
        figManager_115413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 38), 'figManager', False)
        # Processing the call keyword arguments (line 547)
        kwargs_115414 = {}
        # Getting the type of '_pylab_helpers' (line 547)
        _pylab_helpers_115410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 547, 8), '_pylab_helpers', False)
        # Obtaining the member 'Gcf' of a type (line 547)
        Gcf_115411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 8), _pylab_helpers_115410, 'Gcf')
        # Obtaining the member 'set_active' of a type (line 547)
        set_active_115412 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 547, 8), Gcf_115411, 'set_active')
        # Calling set_active(args, kwargs) (line 547)
        set_active_call_result_115415 = invoke(stypy.reporting.localization.Localization(__file__, 547, 8), set_active_115412, *[figManager_115413], **kwargs_115414)
        
        
        # Assigning a Attribute to a Name (line 548):
        
        # Assigning a Attribute to a Name (line 548):
        # Getting the type of 'figManager' (line 548)
        figManager_115416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 548, 14), 'figManager')
        # Obtaining the member 'canvas' of a type (line 548)
        canvas_115417 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 14), figManager_115416, 'canvas')
        # Obtaining the member 'figure' of a type (line 548)
        figure_115418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 548, 14), canvas_115417, 'figure')
        # Assigning a type to the variable 'fig' (line 548)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 548, 8), 'fig', figure_115418)
        
        # Assigning a Name to a Attribute (line 549):
        
        # Assigning a Name to a Attribute (line 549):
        # Getting the type of 'num' (line 549)
        num_115419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 21), 'num')
        # Getting the type of 'fig' (line 549)
        fig_115420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 549, 8), 'fig')
        # Setting the type of the member 'number' of a type (line 549)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 549, 8), fig_115420, 'number', num_115419)
        
        
        # Call to is_interactive(...): (line 555)
        # Processing the call keyword arguments (line 555)
        kwargs_115423 = {}
        # Getting the type of 'matplotlib' (line 555)
        matplotlib_115421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 555, 11), 'matplotlib', False)
        # Obtaining the member 'is_interactive' of a type (line 555)
        is_interactive_115422 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 555, 11), matplotlib_115421, 'is_interactive')
        # Calling is_interactive(args, kwargs) (line 555)
        is_interactive_call_result_115424 = invoke(stypy.reporting.localization.Localization(__file__, 555, 11), is_interactive_115422, *[], **kwargs_115423)
        
        # Testing the type of an if condition (line 555)
        if_condition_115425 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 555, 8), is_interactive_call_result_115424)
        # Assigning a type to the variable 'if_condition_115425' (line 555)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 555, 8), 'if_condition_115425', if_condition_115425)
        # SSA begins for if statement (line 555)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to draw_if_interactive(...): (line 556)
        # Processing the call keyword arguments (line 556)
        kwargs_115427 = {}
        # Getting the type of 'draw_if_interactive' (line 556)
        draw_if_interactive_115426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 556, 12), 'draw_if_interactive', False)
        # Calling draw_if_interactive(args, kwargs) (line 556)
        draw_if_interactive_call_result_115428 = invoke(stypy.reporting.localization.Localization(__file__, 556, 12), draw_if_interactive_115426, *[], **kwargs_115427)
        
        # SSA join for if statement (line 555)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # Getting the type of '_INSTALL_FIG_OBSERVER' (line 558)
        _INSTALL_FIG_OBSERVER_115429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 558, 11), '_INSTALL_FIG_OBSERVER')
        # Testing the type of an if condition (line 558)
        if_condition_115430 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 558, 8), _INSTALL_FIG_OBSERVER_115429)
        # Assigning a type to the variable 'if_condition_115430' (line 558)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 558, 8), 'if_condition_115430', if_condition_115430)
        # SSA begins for if statement (line 558)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Name to a Attribute (line 559):
        
        # Assigning a Name to a Attribute (line 559):
        # Getting the type of '_auto_draw_if_interactive' (line 559)
        _auto_draw_if_interactive_115431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 33), '_auto_draw_if_interactive')
        # Getting the type of 'fig' (line 559)
        fig_115432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 559, 12), 'fig')
        # Setting the type of the member 'stale_callback' of a type (line 559)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 559, 12), fig_115432, 'stale_callback', _auto_draw_if_interactive_115431)
        # SSA join for if statement (line 558)
        module_type_store = module_type_store.join_ssa_context()
        

        if more_types_in_union_115329:
            # SSA join for if statement (line 512)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Getting the type of 'clear' (line 561)
    clear_115433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 561, 7), 'clear')
    # Testing the type of an if condition (line 561)
    if_condition_115434 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 561, 4), clear_115433)
    # Assigning a type to the variable 'if_condition_115434' (line 561)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 561, 4), 'if_condition_115434', if_condition_115434)
    # SSA begins for if statement (line 561)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to clear(...): (line 562)
    # Processing the call keyword arguments (line 562)
    kwargs_115439 = {}
    # Getting the type of 'figManager' (line 562)
    figManager_115435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 562, 8), 'figManager', False)
    # Obtaining the member 'canvas' of a type (line 562)
    canvas_115436 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 8), figManager_115435, 'canvas')
    # Obtaining the member 'figure' of a type (line 562)
    figure_115437 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 8), canvas_115436, 'figure')
    # Obtaining the member 'clear' of a type (line 562)
    clear_115438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 562, 8), figure_115437, 'clear')
    # Calling clear(args, kwargs) (line 562)
    clear_call_result_115440 = invoke(stypy.reporting.localization.Localization(__file__, 562, 8), clear_115438, *[], **kwargs_115439)
    
    # SSA join for if statement (line 561)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'figManager' (line 564)
    figManager_115441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 564, 11), 'figManager')
    # Obtaining the member 'canvas' of a type (line 564)
    canvas_115442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 11), figManager_115441, 'canvas')
    # Obtaining the member 'figure' of a type (line 564)
    figure_115443 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 564, 11), canvas_115442, 'figure')
    # Assigning a type to the variable 'stypy_return_type' (line 564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 564, 4), 'stypy_return_type', figure_115443)
    
    # ################# End of 'figure(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'figure' in the type store
    # Getting the type of 'stypy_return_type' (line 417)
    stypy_return_type_115444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 417, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115444)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'figure'
    return stypy_return_type_115444

# Assigning a type to the variable 'figure' (line 417)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 417, 0), 'figure', figure)

@norecursion
def _auto_draw_if_interactive(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_auto_draw_if_interactive'
    module_type_store = module_type_store.open_function_context('_auto_draw_if_interactive', 567, 0, False)
    
    # Passed parameters checking function
    _auto_draw_if_interactive.stypy_localization = localization
    _auto_draw_if_interactive.stypy_type_of_self = None
    _auto_draw_if_interactive.stypy_type_store = module_type_store
    _auto_draw_if_interactive.stypy_function_name = '_auto_draw_if_interactive'
    _auto_draw_if_interactive.stypy_param_names_list = ['fig', 'val']
    _auto_draw_if_interactive.stypy_varargs_param_name = None
    _auto_draw_if_interactive.stypy_kwargs_param_name = None
    _auto_draw_if_interactive.stypy_call_defaults = defaults
    _auto_draw_if_interactive.stypy_call_varargs = varargs
    _auto_draw_if_interactive.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_auto_draw_if_interactive', ['fig', 'val'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_auto_draw_if_interactive', localization, ['fig', 'val'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_auto_draw_if_interactive(...)' code ##################

    unicode_115445 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 576, (-1)), 'unicode', u'\n    This is an internal helper function for making sure that auto-redrawing\n    works as intended in the plain python repl.\n\n    Parameters\n    ----------\n    fig : Figure\n        A figure object which is assumed to be associated with a canvas\n    ')
    
    
    # Evaluating a boolean operation
    # Getting the type of 'val' (line 577)
    val_115446 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 7), 'val')
    
    # Call to is_interactive(...): (line 577)
    # Processing the call keyword arguments (line 577)
    kwargs_115449 = {}
    # Getting the type of 'matplotlib' (line 577)
    matplotlib_115447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 15), 'matplotlib', False)
    # Obtaining the member 'is_interactive' of a type (line 577)
    is_interactive_115448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 15), matplotlib_115447, 'is_interactive')
    # Calling is_interactive(args, kwargs) (line 577)
    is_interactive_call_result_115450 = invoke(stypy.reporting.localization.Localization(__file__, 577, 15), is_interactive_115448, *[], **kwargs_115449)
    
    # Applying the binary operator 'and' (line 577)
    result_and_keyword_115451 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 7), 'and', val_115446, is_interactive_call_result_115450)
    
    
    # Call to is_saving(...): (line 577)
    # Processing the call keyword arguments (line 577)
    kwargs_115455 = {}
    # Getting the type of 'fig' (line 577)
    fig_115452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 577, 51), 'fig', False)
    # Obtaining the member 'canvas' of a type (line 577)
    canvas_115453 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 51), fig_115452, 'canvas')
    # Obtaining the member 'is_saving' of a type (line 577)
    is_saving_115454 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 577, 51), canvas_115453, 'is_saving')
    # Calling is_saving(args, kwargs) (line 577)
    is_saving_call_result_115456 = invoke(stypy.reporting.localization.Localization(__file__, 577, 51), is_saving_115454, *[], **kwargs_115455)
    
    # Applying the 'not' unary operator (line 577)
    result_not__115457 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 47), 'not', is_saving_call_result_115456)
    
    # Applying the binary operator 'and' (line 577)
    result_and_keyword_115458 = python_operator(stypy.reporting.localization.Localization(__file__, 577, 7), 'and', result_and_keyword_115451, result_not__115457)
    
    # Testing the type of an if condition (line 577)
    if_condition_115459 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 577, 4), result_and_keyword_115458)
    # Assigning a type to the variable 'if_condition_115459' (line 577)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 577, 4), 'if_condition_115459', if_condition_115459)
    # SSA begins for if statement (line 577)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to draw_idle(...): (line 578)
    # Processing the call keyword arguments (line 578)
    kwargs_115463 = {}
    # Getting the type of 'fig' (line 578)
    fig_115460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 578, 8), 'fig', False)
    # Obtaining the member 'canvas' of a type (line 578)
    canvas_115461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 8), fig_115460, 'canvas')
    # Obtaining the member 'draw_idle' of a type (line 578)
    draw_idle_115462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 578, 8), canvas_115461, 'draw_idle')
    # Calling draw_idle(args, kwargs) (line 578)
    draw_idle_call_result_115464 = invoke(stypy.reporting.localization.Localization(__file__, 578, 8), draw_idle_115462, *[], **kwargs_115463)
    
    # SSA join for if statement (line 577)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of '_auto_draw_if_interactive(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_auto_draw_if_interactive' in the type store
    # Getting the type of 'stypy_return_type' (line 567)
    stypy_return_type_115465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 567, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115465)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_auto_draw_if_interactive'
    return stypy_return_type_115465

# Assigning a type to the variable '_auto_draw_if_interactive' (line 567)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 567, 0), '_auto_draw_if_interactive', _auto_draw_if_interactive)

@norecursion
def gcf(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'gcf'
    module_type_store = module_type_store.open_function_context('gcf', 581, 0, False)
    
    # Passed parameters checking function
    gcf.stypy_localization = localization
    gcf.stypy_type_of_self = None
    gcf.stypy_type_store = module_type_store
    gcf.stypy_function_name = 'gcf'
    gcf.stypy_param_names_list = []
    gcf.stypy_varargs_param_name = None
    gcf.stypy_kwargs_param_name = None
    gcf.stypy_call_defaults = defaults
    gcf.stypy_call_varargs = varargs
    gcf.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'gcf', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'gcf', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'gcf(...)' code ##################

    unicode_115466 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 582, 4), 'unicode', u'Get a reference to the current figure.')
    
    # Assigning a Call to a Name (line 584):
    
    # Assigning a Call to a Name (line 584):
    
    # Call to get_active(...): (line 584)
    # Processing the call keyword arguments (line 584)
    kwargs_115470 = {}
    # Getting the type of '_pylab_helpers' (line 584)
    _pylab_helpers_115467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 584, 17), '_pylab_helpers', False)
    # Obtaining the member 'Gcf' of a type (line 584)
    Gcf_115468 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 17), _pylab_helpers_115467, 'Gcf')
    # Obtaining the member 'get_active' of a type (line 584)
    get_active_115469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 584, 17), Gcf_115468, 'get_active')
    # Calling get_active(args, kwargs) (line 584)
    get_active_call_result_115471 = invoke(stypy.reporting.localization.Localization(__file__, 584, 17), get_active_115469, *[], **kwargs_115470)
    
    # Assigning a type to the variable 'figManager' (line 584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 584, 4), 'figManager', get_active_call_result_115471)
    
    # Type idiom detected: calculating its left and rigth part (line 585)
    # Getting the type of 'figManager' (line 585)
    figManager_115472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 4), 'figManager')
    # Getting the type of 'None' (line 585)
    None_115473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 585, 25), 'None')
    
    (may_be_115474, more_types_in_union_115475) = may_not_be_none(figManager_115472, None_115473)

    if may_be_115474:

        if more_types_in_union_115475:
            # Runtime conditional SSA (line 585)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Getting the type of 'figManager' (line 586)
        figManager_115476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 586, 15), 'figManager')
        # Obtaining the member 'canvas' of a type (line 586)
        canvas_115477 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 586, 15), figManager_115476, 'canvas')
        # Obtaining the member 'figure' of a type (line 586)
        figure_115478 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 586, 15), canvas_115477, 'figure')
        # Assigning a type to the variable 'stypy_return_type' (line 586)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 586, 8), 'stypy_return_type', figure_115478)

        if more_types_in_union_115475:
            # Runtime conditional SSA for else branch (line 585)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_115474) or more_types_in_union_115475):
        
        # Call to figure(...): (line 588)
        # Processing the call keyword arguments (line 588)
        kwargs_115480 = {}
        # Getting the type of 'figure' (line 588)
        figure_115479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 588, 15), 'figure', False)
        # Calling figure(args, kwargs) (line 588)
        figure_call_result_115481 = invoke(stypy.reporting.localization.Localization(__file__, 588, 15), figure_115479, *[], **kwargs_115480)
        
        # Assigning a type to the variable 'stypy_return_type' (line 588)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 588, 8), 'stypy_return_type', figure_call_result_115481)

        if (may_be_115474 and more_types_in_union_115475):
            # SSA join for if statement (line 585)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'gcf(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'gcf' in the type store
    # Getting the type of 'stypy_return_type' (line 581)
    stypy_return_type_115482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 581, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115482)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'gcf'
    return stypy_return_type_115482

# Assigning a type to the variable 'gcf' (line 581)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 581, 0), 'gcf', gcf)

@norecursion
def fignum_exists(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'fignum_exists'
    module_type_store = module_type_store.open_function_context('fignum_exists', 591, 0, False)
    
    # Passed parameters checking function
    fignum_exists.stypy_localization = localization
    fignum_exists.stypy_type_of_self = None
    fignum_exists.stypy_type_store = module_type_store
    fignum_exists.stypy_function_name = 'fignum_exists'
    fignum_exists.stypy_param_names_list = ['num']
    fignum_exists.stypy_varargs_param_name = None
    fignum_exists.stypy_kwargs_param_name = None
    fignum_exists.stypy_call_defaults = defaults
    fignum_exists.stypy_call_varargs = varargs
    fignum_exists.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fignum_exists', ['num'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fignum_exists', localization, ['num'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fignum_exists(...)' code ##################

    
    # Evaluating a boolean operation
    
    # Call to has_fignum(...): (line 592)
    # Processing the call arguments (line 592)
    # Getting the type of 'num' (line 592)
    num_115486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 41), 'num', False)
    # Processing the call keyword arguments (line 592)
    kwargs_115487 = {}
    # Getting the type of '_pylab_helpers' (line 592)
    _pylab_helpers_115483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 11), '_pylab_helpers', False)
    # Obtaining the member 'Gcf' of a type (line 592)
    Gcf_115484 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 11), _pylab_helpers_115483, 'Gcf')
    # Obtaining the member 'has_fignum' of a type (line 592)
    has_fignum_115485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 592, 11), Gcf_115484, 'has_fignum')
    # Calling has_fignum(args, kwargs) (line 592)
    has_fignum_call_result_115488 = invoke(stypy.reporting.localization.Localization(__file__, 592, 11), has_fignum_115485, *[num_115486], **kwargs_115487)
    
    
    # Getting the type of 'num' (line 592)
    num_115489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 49), 'num')
    
    # Call to get_figlabels(...): (line 592)
    # Processing the call keyword arguments (line 592)
    kwargs_115491 = {}
    # Getting the type of 'get_figlabels' (line 592)
    get_figlabels_115490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 592, 56), 'get_figlabels', False)
    # Calling get_figlabels(args, kwargs) (line 592)
    get_figlabels_call_result_115492 = invoke(stypy.reporting.localization.Localization(__file__, 592, 56), get_figlabels_115490, *[], **kwargs_115491)
    
    # Applying the binary operator 'in' (line 592)
    result_contains_115493 = python_operator(stypy.reporting.localization.Localization(__file__, 592, 49), 'in', num_115489, get_figlabels_call_result_115492)
    
    # Applying the binary operator 'or' (line 592)
    result_or_keyword_115494 = python_operator(stypy.reporting.localization.Localization(__file__, 592, 11), 'or', has_fignum_call_result_115488, result_contains_115493)
    
    # Assigning a type to the variable 'stypy_return_type' (line 592)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 592, 4), 'stypy_return_type', result_or_keyword_115494)
    
    # ################# End of 'fignum_exists(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fignum_exists' in the type store
    # Getting the type of 'stypy_return_type' (line 591)
    stypy_return_type_115495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 591, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115495)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fignum_exists'
    return stypy_return_type_115495

# Assigning a type to the variable 'fignum_exists' (line 591)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 591, 0), 'fignum_exists', fignum_exists)

@norecursion
def get_fignums(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_fignums'
    module_type_store = module_type_store.open_function_context('get_fignums', 595, 0, False)
    
    # Passed parameters checking function
    get_fignums.stypy_localization = localization
    get_fignums.stypy_type_of_self = None
    get_fignums.stypy_type_store = module_type_store
    get_fignums.stypy_function_name = 'get_fignums'
    get_fignums.stypy_param_names_list = []
    get_fignums.stypy_varargs_param_name = None
    get_fignums.stypy_kwargs_param_name = None
    get_fignums.stypy_call_defaults = defaults
    get_fignums.stypy_call_varargs = varargs
    get_fignums.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_fignums', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_fignums', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_fignums(...)' code ##################

    unicode_115496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 596, 4), 'unicode', u'Return a list of existing figure numbers.')
    
    # Call to sorted(...): (line 597)
    # Processing the call arguments (line 597)
    # Getting the type of '_pylab_helpers' (line 597)
    _pylab_helpers_115498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 18), '_pylab_helpers', False)
    # Obtaining the member 'Gcf' of a type (line 597)
    Gcf_115499 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 18), _pylab_helpers_115498, 'Gcf')
    # Obtaining the member 'figs' of a type (line 597)
    figs_115500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 597, 18), Gcf_115499, 'figs')
    # Processing the call keyword arguments (line 597)
    kwargs_115501 = {}
    # Getting the type of 'sorted' (line 597)
    sorted_115497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 597, 11), 'sorted', False)
    # Calling sorted(args, kwargs) (line 597)
    sorted_call_result_115502 = invoke(stypy.reporting.localization.Localization(__file__, 597, 11), sorted_115497, *[figs_115500], **kwargs_115501)
    
    # Assigning a type to the variable 'stypy_return_type' (line 597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 597, 4), 'stypy_return_type', sorted_call_result_115502)
    
    # ################# End of 'get_fignums(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_fignums' in the type store
    # Getting the type of 'stypy_return_type' (line 595)
    stypy_return_type_115503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 595, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115503)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_fignums'
    return stypy_return_type_115503

# Assigning a type to the variable 'get_fignums' (line 595)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 595, 0), 'get_fignums', get_fignums)

@norecursion
def get_figlabels(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_figlabels'
    module_type_store = module_type_store.open_function_context('get_figlabels', 600, 0, False)
    
    # Passed parameters checking function
    get_figlabels.stypy_localization = localization
    get_figlabels.stypy_type_of_self = None
    get_figlabels.stypy_type_store = module_type_store
    get_figlabels.stypy_function_name = 'get_figlabels'
    get_figlabels.stypy_param_names_list = []
    get_figlabels.stypy_varargs_param_name = None
    get_figlabels.stypy_kwargs_param_name = None
    get_figlabels.stypy_call_defaults = defaults
    get_figlabels.stypy_call_varargs = varargs
    get_figlabels.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_figlabels', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_figlabels', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_figlabels(...)' code ##################

    unicode_115504 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 601, 4), 'unicode', u'Return a list of existing figure labels.')
    
    # Assigning a Call to a Name (line 602):
    
    # Assigning a Call to a Name (line 602):
    
    # Call to get_all_fig_managers(...): (line 602)
    # Processing the call keyword arguments (line 602)
    kwargs_115508 = {}
    # Getting the type of '_pylab_helpers' (line 602)
    _pylab_helpers_115505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 602, 18), '_pylab_helpers', False)
    # Obtaining the member 'Gcf' of a type (line 602)
    Gcf_115506 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 18), _pylab_helpers_115505, 'Gcf')
    # Obtaining the member 'get_all_fig_managers' of a type (line 602)
    get_all_fig_managers_115507 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 602, 18), Gcf_115506, 'get_all_fig_managers')
    # Calling get_all_fig_managers(args, kwargs) (line 602)
    get_all_fig_managers_call_result_115509 = invoke(stypy.reporting.localization.Localization(__file__, 602, 18), get_all_fig_managers_115507, *[], **kwargs_115508)
    
    # Assigning a type to the variable 'figManagers' (line 602)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 602, 4), 'figManagers', get_all_fig_managers_call_result_115509)
    
    # Call to sort(...): (line 603)
    # Processing the call keyword arguments (line 603)

    @norecursion
    def _stypy_temp_lambda_21(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_21'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_21', 603, 25, True)
        # Passed parameters checking function
        _stypy_temp_lambda_21.stypy_localization = localization
        _stypy_temp_lambda_21.stypy_type_of_self = None
        _stypy_temp_lambda_21.stypy_type_store = module_type_store
        _stypy_temp_lambda_21.stypy_function_name = '_stypy_temp_lambda_21'
        _stypy_temp_lambda_21.stypy_param_names_list = ['m']
        _stypy_temp_lambda_21.stypy_varargs_param_name = None
        _stypy_temp_lambda_21.stypy_kwargs_param_name = None
        _stypy_temp_lambda_21.stypy_call_defaults = defaults
        _stypy_temp_lambda_21.stypy_call_varargs = varargs
        _stypy_temp_lambda_21.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_21', ['m'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_21', ['m'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        # Getting the type of 'm' (line 603)
        m_115512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 35), 'm', False)
        # Obtaining the member 'num' of a type (line 603)
        num_115513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 35), m_115512, 'num')
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 603)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 25), 'stypy_return_type', num_115513)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_21' in the type store
        # Getting the type of 'stypy_return_type' (line 603)
        stypy_return_type_115514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 25), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_115514)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_21'
        return stypy_return_type_115514

    # Assigning a type to the variable '_stypy_temp_lambda_21' (line 603)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 603, 25), '_stypy_temp_lambda_21', _stypy_temp_lambda_21)
    # Getting the type of '_stypy_temp_lambda_21' (line 603)
    _stypy_temp_lambda_21_115515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 25), '_stypy_temp_lambda_21')
    keyword_115516 = _stypy_temp_lambda_21_115515
    kwargs_115517 = {'key': keyword_115516}
    # Getting the type of 'figManagers' (line 603)
    figManagers_115510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 603, 4), 'figManagers', False)
    # Obtaining the member 'sort' of a type (line 603)
    sort_115511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 603, 4), figManagers_115510, 'sort')
    # Calling sort(args, kwargs) (line 603)
    sort_call_result_115518 = invoke(stypy.reporting.localization.Localization(__file__, 603, 4), sort_115511, *[], **kwargs_115517)
    
    # Calculating list comprehension
    # Calculating comprehension expression
    # Getting the type of 'figManagers' (line 604)
    figManagers_115525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 49), 'figManagers')
    comprehension_115526 = get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 604, 12), figManagers_115525)
    # Assigning a type to the variable 'm' (line 604)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 12), 'm', comprehension_115526)
    
    # Call to get_label(...): (line 604)
    # Processing the call keyword arguments (line 604)
    kwargs_115523 = {}
    # Getting the type of 'm' (line 604)
    m_115519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 604, 12), 'm', False)
    # Obtaining the member 'canvas' of a type (line 604)
    canvas_115520 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 12), m_115519, 'canvas')
    # Obtaining the member 'figure' of a type (line 604)
    figure_115521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 12), canvas_115520, 'figure')
    # Obtaining the member 'get_label' of a type (line 604)
    get_label_115522 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 604, 12), figure_115521, 'get_label')
    # Calling get_label(args, kwargs) (line 604)
    get_label_call_result_115524 = invoke(stypy.reporting.localization.Localization(__file__, 604, 12), get_label_115522, *[], **kwargs_115523)
    
    list_115527 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 604, 12), 'list')
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 604, 12), list_115527, get_label_call_result_115524)
    # Assigning a type to the variable 'stypy_return_type' (line 604)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 604, 4), 'stypy_return_type', list_115527)
    
    # ################# End of 'get_figlabels(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_figlabels' in the type store
    # Getting the type of 'stypy_return_type' (line 600)
    stypy_return_type_115528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 600, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115528)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_figlabels'
    return stypy_return_type_115528

# Assigning a type to the variable 'get_figlabels' (line 600)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 600, 0), 'get_figlabels', get_figlabels)

@norecursion
def get_current_fig_manager(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_current_fig_manager'
    module_type_store = module_type_store.open_function_context('get_current_fig_manager', 607, 0, False)
    
    # Passed parameters checking function
    get_current_fig_manager.stypy_localization = localization
    get_current_fig_manager.stypy_type_of_self = None
    get_current_fig_manager.stypy_type_store = module_type_store
    get_current_fig_manager.stypy_function_name = 'get_current_fig_manager'
    get_current_fig_manager.stypy_param_names_list = []
    get_current_fig_manager.stypy_varargs_param_name = None
    get_current_fig_manager.stypy_kwargs_param_name = None
    get_current_fig_manager.stypy_call_defaults = defaults
    get_current_fig_manager.stypy_call_varargs = varargs
    get_current_fig_manager.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_current_fig_manager', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_current_fig_manager', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_current_fig_manager(...)' code ##################

    
    # Assigning a Call to a Name (line 608):
    
    # Assigning a Call to a Name (line 608):
    
    # Call to get_active(...): (line 608)
    # Processing the call keyword arguments (line 608)
    kwargs_115532 = {}
    # Getting the type of '_pylab_helpers' (line 608)
    _pylab_helpers_115529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 608, 17), '_pylab_helpers', False)
    # Obtaining the member 'Gcf' of a type (line 608)
    Gcf_115530 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 17), _pylab_helpers_115529, 'Gcf')
    # Obtaining the member 'get_active' of a type (line 608)
    get_active_115531 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 608, 17), Gcf_115530, 'get_active')
    # Calling get_active(args, kwargs) (line 608)
    get_active_call_result_115533 = invoke(stypy.reporting.localization.Localization(__file__, 608, 17), get_active_115531, *[], **kwargs_115532)
    
    # Assigning a type to the variable 'figManager' (line 608)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 608, 4), 'figManager', get_active_call_result_115533)
    
    # Type idiom detected: calculating its left and rigth part (line 609)
    # Getting the type of 'figManager' (line 609)
    figManager_115534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 7), 'figManager')
    # Getting the type of 'None' (line 609)
    None_115535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 609, 21), 'None')
    
    (may_be_115536, more_types_in_union_115537) = may_be_none(figManager_115534, None_115535)

    if may_be_115536:

        if more_types_in_union_115537:
            # Runtime conditional SSA (line 609)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to gcf(...): (line 610)
        # Processing the call keyword arguments (line 610)
        kwargs_115539 = {}
        # Getting the type of 'gcf' (line 610)
        gcf_115538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 610, 8), 'gcf', False)
        # Calling gcf(args, kwargs) (line 610)
        gcf_call_result_115540 = invoke(stypy.reporting.localization.Localization(__file__, 610, 8), gcf_115538, *[], **kwargs_115539)
        
        
        # Assigning a Call to a Name (line 611):
        
        # Assigning a Call to a Name (line 611):
        
        # Call to get_active(...): (line 611)
        # Processing the call keyword arguments (line 611)
        kwargs_115544 = {}
        # Getting the type of '_pylab_helpers' (line 611)
        _pylab_helpers_115541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 611, 21), '_pylab_helpers', False)
        # Obtaining the member 'Gcf' of a type (line 611)
        Gcf_115542 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 21), _pylab_helpers_115541, 'Gcf')
        # Obtaining the member 'get_active' of a type (line 611)
        get_active_115543 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 611, 21), Gcf_115542, 'get_active')
        # Calling get_active(args, kwargs) (line 611)
        get_active_call_result_115545 = invoke(stypy.reporting.localization.Localization(__file__, 611, 21), get_active_115543, *[], **kwargs_115544)
        
        # Assigning a type to the variable 'figManager' (line 611)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 611, 8), 'figManager', get_active_call_result_115545)

        if more_types_in_union_115537:
            # SSA join for if statement (line 609)
            module_type_store = module_type_store.join_ssa_context()


    
    # Getting the type of 'figManager' (line 612)
    figManager_115546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 612, 11), 'figManager')
    # Assigning a type to the variable 'stypy_return_type' (line 612)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 612, 4), 'stypy_return_type', figManager_115546)
    
    # ################# End of 'get_current_fig_manager(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_current_fig_manager' in the type store
    # Getting the type of 'stypy_return_type' (line 607)
    stypy_return_type_115547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 607, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115547)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_current_fig_manager'
    return stypy_return_type_115547

# Assigning a type to the variable 'get_current_fig_manager' (line 607)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 607, 0), 'get_current_fig_manager', get_current_fig_manager)

@norecursion
def connect(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'connect'
    module_type_store = module_type_store.open_function_context('connect', 615, 0, False)
    
    # Passed parameters checking function
    connect.stypy_localization = localization
    connect.stypy_type_of_self = None
    connect.stypy_type_store = module_type_store
    connect.stypy_function_name = 'connect'
    connect.stypy_param_names_list = ['s', 'func']
    connect.stypy_varargs_param_name = None
    connect.stypy_kwargs_param_name = None
    connect.stypy_call_defaults = defaults
    connect.stypy_call_varargs = varargs
    connect.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'connect', ['s', 'func'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'connect', localization, ['s', 'func'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'connect(...)' code ##################

    
    # Call to mpl_connect(...): (line 617)
    # Processing the call arguments (line 617)
    # Getting the type of 's' (line 617)
    s_115553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 56), 's', False)
    # Getting the type of 'func' (line 617)
    func_115554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 59), 'func', False)
    # Processing the call keyword arguments (line 617)
    kwargs_115555 = {}
    
    # Call to get_current_fig_manager(...): (line 617)
    # Processing the call keyword arguments (line 617)
    kwargs_115549 = {}
    # Getting the type of 'get_current_fig_manager' (line 617)
    get_current_fig_manager_115548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 617, 11), 'get_current_fig_manager', False)
    # Calling get_current_fig_manager(args, kwargs) (line 617)
    get_current_fig_manager_call_result_115550 = invoke(stypy.reporting.localization.Localization(__file__, 617, 11), get_current_fig_manager_115548, *[], **kwargs_115549)
    
    # Obtaining the member 'canvas' of a type (line 617)
    canvas_115551 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 11), get_current_fig_manager_call_result_115550, 'canvas')
    # Obtaining the member 'mpl_connect' of a type (line 617)
    mpl_connect_115552 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 617, 11), canvas_115551, 'mpl_connect')
    # Calling mpl_connect(args, kwargs) (line 617)
    mpl_connect_call_result_115556 = invoke(stypy.reporting.localization.Localization(__file__, 617, 11), mpl_connect_115552, *[s_115553, func_115554], **kwargs_115555)
    
    # Assigning a type to the variable 'stypy_return_type' (line 617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 617, 4), 'stypy_return_type', mpl_connect_call_result_115556)
    
    # ################# End of 'connect(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'connect' in the type store
    # Getting the type of 'stypy_return_type' (line 615)
    stypy_return_type_115557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 615, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115557)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'connect'
    return stypy_return_type_115557

# Assigning a type to the variable 'connect' (line 615)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 615, 0), 'connect', connect)

@norecursion
def disconnect(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'disconnect'
    module_type_store = module_type_store.open_function_context('disconnect', 620, 0, False)
    
    # Passed parameters checking function
    disconnect.stypy_localization = localization
    disconnect.stypy_type_of_self = None
    disconnect.stypy_type_store = module_type_store
    disconnect.stypy_function_name = 'disconnect'
    disconnect.stypy_param_names_list = ['cid']
    disconnect.stypy_varargs_param_name = None
    disconnect.stypy_kwargs_param_name = None
    disconnect.stypy_call_defaults = defaults
    disconnect.stypy_call_varargs = varargs
    disconnect.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'disconnect', ['cid'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'disconnect', localization, ['cid'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'disconnect(...)' code ##################

    
    # Call to mpl_disconnect(...): (line 622)
    # Processing the call arguments (line 622)
    # Getting the type of 'cid' (line 622)
    cid_115563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 59), 'cid', False)
    # Processing the call keyword arguments (line 622)
    kwargs_115564 = {}
    
    # Call to get_current_fig_manager(...): (line 622)
    # Processing the call keyword arguments (line 622)
    kwargs_115559 = {}
    # Getting the type of 'get_current_fig_manager' (line 622)
    get_current_fig_manager_115558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 622, 11), 'get_current_fig_manager', False)
    # Calling get_current_fig_manager(args, kwargs) (line 622)
    get_current_fig_manager_call_result_115560 = invoke(stypy.reporting.localization.Localization(__file__, 622, 11), get_current_fig_manager_115558, *[], **kwargs_115559)
    
    # Obtaining the member 'canvas' of a type (line 622)
    canvas_115561 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 11), get_current_fig_manager_call_result_115560, 'canvas')
    # Obtaining the member 'mpl_disconnect' of a type (line 622)
    mpl_disconnect_115562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 622, 11), canvas_115561, 'mpl_disconnect')
    # Calling mpl_disconnect(args, kwargs) (line 622)
    mpl_disconnect_call_result_115565 = invoke(stypy.reporting.localization.Localization(__file__, 622, 11), mpl_disconnect_115562, *[cid_115563], **kwargs_115564)
    
    # Assigning a type to the variable 'stypy_return_type' (line 622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 622, 4), 'stypy_return_type', mpl_disconnect_call_result_115565)
    
    # ################# End of 'disconnect(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'disconnect' in the type store
    # Getting the type of 'stypy_return_type' (line 620)
    stypy_return_type_115566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 620, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115566)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'disconnect'
    return stypy_return_type_115566

# Assigning a type to the variable 'disconnect' (line 620)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 620, 0), 'disconnect', disconnect)

@norecursion
def close(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'close'
    module_type_store = module_type_store.open_function_context('close', 625, 0, False)
    
    # Passed parameters checking function
    close.stypy_localization = localization
    close.stypy_type_of_self = None
    close.stypy_type_store = module_type_store
    close.stypy_function_name = 'close'
    close.stypy_param_names_list = []
    close.stypy_varargs_param_name = 'args'
    close.stypy_kwargs_param_name = None
    close.stypy_call_defaults = defaults
    close.stypy_call_varargs = varargs
    close.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'close', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'close', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'close(...)' code ##################

    unicode_115567 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 638, (-1)), 'unicode', u"\n    Close a figure window.\n\n    ``close()`` by itself closes the current figure\n\n    ``close(h)`` where *h* is a :class:`Figure` instance, closes that figure\n\n    ``close(num)`` closes figure number *num*\n\n    ``close(name)`` where *name* is a string, closes figure with that label\n\n    ``close('all')`` closes all the figure windows\n    ")
    
    
    
    # Call to len(...): (line 640)
    # Processing the call arguments (line 640)
    # Getting the type of 'args' (line 640)
    args_115569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 11), 'args', False)
    # Processing the call keyword arguments (line 640)
    kwargs_115570 = {}
    # Getting the type of 'len' (line 640)
    len_115568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 640, 7), 'len', False)
    # Calling len(args, kwargs) (line 640)
    len_call_result_115571 = invoke(stypy.reporting.localization.Localization(__file__, 640, 7), len_115568, *[args_115569], **kwargs_115570)
    
    int_115572 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 640, 20), 'int')
    # Applying the binary operator '==' (line 640)
    result_eq_115573 = python_operator(stypy.reporting.localization.Localization(__file__, 640, 7), '==', len_call_result_115571, int_115572)
    
    # Testing the type of an if condition (line 640)
    if_condition_115574 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 640, 4), result_eq_115573)
    # Assigning a type to the variable 'if_condition_115574' (line 640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 640, 4), 'if_condition_115574', if_condition_115574)
    # SSA begins for if statement (line 640)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 641):
    
    # Assigning a Call to a Name (line 641):
    
    # Call to get_active(...): (line 641)
    # Processing the call keyword arguments (line 641)
    kwargs_115578 = {}
    # Getting the type of '_pylab_helpers' (line 641)
    _pylab_helpers_115575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 641, 21), '_pylab_helpers', False)
    # Obtaining the member 'Gcf' of a type (line 641)
    Gcf_115576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 21), _pylab_helpers_115575, 'Gcf')
    # Obtaining the member 'get_active' of a type (line 641)
    get_active_115577 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 641, 21), Gcf_115576, 'get_active')
    # Calling get_active(args, kwargs) (line 641)
    get_active_call_result_115579 = invoke(stypy.reporting.localization.Localization(__file__, 641, 21), get_active_115577, *[], **kwargs_115578)
    
    # Assigning a type to the variable 'figManager' (line 641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 641, 8), 'figManager', get_active_call_result_115579)
    
    # Type idiom detected: calculating its left and rigth part (line 642)
    # Getting the type of 'figManager' (line 642)
    figManager_115580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 11), 'figManager')
    # Getting the type of 'None' (line 642)
    None_115581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 642, 25), 'None')
    
    (may_be_115582, more_types_in_union_115583) = may_be_none(figManager_115580, None_115581)

    if may_be_115582:

        if more_types_in_union_115583:
            # Runtime conditional SSA (line 642)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'stypy_return_type' (line 643)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 643, 12), 'stypy_return_type', types.NoneType)

        if more_types_in_union_115583:
            # Runtime conditional SSA for else branch (line 642)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_115582) or more_types_in_union_115583):
        
        # Call to destroy(...): (line 645)
        # Processing the call arguments (line 645)
        # Getting the type of 'figManager' (line 645)
        figManager_115587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 39), 'figManager', False)
        # Obtaining the member 'num' of a type (line 645)
        num_115588 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 39), figManager_115587, 'num')
        # Processing the call keyword arguments (line 645)
        kwargs_115589 = {}
        # Getting the type of '_pylab_helpers' (line 645)
        _pylab_helpers_115584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 645, 12), '_pylab_helpers', False)
        # Obtaining the member 'Gcf' of a type (line 645)
        Gcf_115585 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 12), _pylab_helpers_115584, 'Gcf')
        # Obtaining the member 'destroy' of a type (line 645)
        destroy_115586 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 645, 12), Gcf_115585, 'destroy')
        # Calling destroy(args, kwargs) (line 645)
        destroy_call_result_115590 = invoke(stypy.reporting.localization.Localization(__file__, 645, 12), destroy_115586, *[num_115588], **kwargs_115589)
        

        if (may_be_115582 and more_types_in_union_115583):
            # SSA join for if statement (line 642)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA branch for the else part of an if statement (line 640)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to len(...): (line 646)
    # Processing the call arguments (line 646)
    # Getting the type of 'args' (line 646)
    args_115592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 13), 'args', False)
    # Processing the call keyword arguments (line 646)
    kwargs_115593 = {}
    # Getting the type of 'len' (line 646)
    len_115591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 646, 9), 'len', False)
    # Calling len(args, kwargs) (line 646)
    len_call_result_115594 = invoke(stypy.reporting.localization.Localization(__file__, 646, 9), len_115591, *[args_115592], **kwargs_115593)
    
    int_115595 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 646, 22), 'int')
    # Applying the binary operator '==' (line 646)
    result_eq_115596 = python_operator(stypy.reporting.localization.Localization(__file__, 646, 9), '==', len_call_result_115594, int_115595)
    
    # Testing the type of an if condition (line 646)
    if_condition_115597 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 646, 9), result_eq_115596)
    # Assigning a type to the variable 'if_condition_115597' (line 646)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 646, 9), 'if_condition_115597', if_condition_115597)
    # SSA begins for if statement (line 646)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Subscript to a Name (line 647):
    
    # Assigning a Subscript to a Name (line 647):
    
    # Obtaining the type of the subscript
    int_115598 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 647, 19), 'int')
    # Getting the type of 'args' (line 647)
    args_115599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 647, 14), 'args')
    # Obtaining the member '__getitem__' of a type (line 647)
    getitem___115600 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 647, 14), args_115599, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 647)
    subscript_call_result_115601 = invoke(stypy.reporting.localization.Localization(__file__, 647, 14), getitem___115600, int_115598)
    
    # Assigning a type to the variable 'arg' (line 647)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 647, 8), 'arg', subscript_call_result_115601)
    
    
    # Getting the type of 'arg' (line 648)
    arg_115602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 648, 11), 'arg')
    unicode_115603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 648, 18), 'unicode', u'all')
    # Applying the binary operator '==' (line 648)
    result_eq_115604 = python_operator(stypy.reporting.localization.Localization(__file__, 648, 11), '==', arg_115602, unicode_115603)
    
    # Testing the type of an if condition (line 648)
    if_condition_115605 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 648, 8), result_eq_115604)
    # Assigning a type to the variable 'if_condition_115605' (line 648)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 648, 8), 'if_condition_115605', if_condition_115605)
    # SSA begins for if statement (line 648)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to destroy_all(...): (line 649)
    # Processing the call keyword arguments (line 649)
    kwargs_115609 = {}
    # Getting the type of '_pylab_helpers' (line 649)
    _pylab_helpers_115606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 649, 12), '_pylab_helpers', False)
    # Obtaining the member 'Gcf' of a type (line 649)
    Gcf_115607 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 12), _pylab_helpers_115606, 'Gcf')
    # Obtaining the member 'destroy_all' of a type (line 649)
    destroy_all_115608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 649, 12), Gcf_115607, 'destroy_all')
    # Calling destroy_all(args, kwargs) (line 649)
    destroy_all_call_result_115610 = invoke(stypy.reporting.localization.Localization(__file__, 649, 12), destroy_all_115608, *[], **kwargs_115609)
    
    # SSA branch for the else part of an if statement (line 648)
    module_type_store.open_ssa_branch('else')
    
    
    # Call to isinstance(...): (line 650)
    # Processing the call arguments (line 650)
    # Getting the type of 'arg' (line 650)
    arg_115612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 24), 'arg', False)
    # Getting the type of 'six' (line 650)
    six_115613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 29), 'six', False)
    # Obtaining the member 'integer_types' of a type (line 650)
    integer_types_115614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 650, 29), six_115613, 'integer_types')
    # Processing the call keyword arguments (line 650)
    kwargs_115615 = {}
    # Getting the type of 'isinstance' (line 650)
    isinstance_115611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 650, 13), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 650)
    isinstance_call_result_115616 = invoke(stypy.reporting.localization.Localization(__file__, 650, 13), isinstance_115611, *[arg_115612, integer_types_115614], **kwargs_115615)
    
    # Testing the type of an if condition (line 650)
    if_condition_115617 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 650, 13), isinstance_call_result_115616)
    # Assigning a type to the variable 'if_condition_115617' (line 650)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 650, 13), 'if_condition_115617', if_condition_115617)
    # SSA begins for if statement (line 650)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to destroy(...): (line 651)
    # Processing the call arguments (line 651)
    # Getting the type of 'arg' (line 651)
    arg_115621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 39), 'arg', False)
    # Processing the call keyword arguments (line 651)
    kwargs_115622 = {}
    # Getting the type of '_pylab_helpers' (line 651)
    _pylab_helpers_115618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 651, 12), '_pylab_helpers', False)
    # Obtaining the member 'Gcf' of a type (line 651)
    Gcf_115619 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 12), _pylab_helpers_115618, 'Gcf')
    # Obtaining the member 'destroy' of a type (line 651)
    destroy_115620 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 651, 12), Gcf_115619, 'destroy')
    # Calling destroy(args, kwargs) (line 651)
    destroy_call_result_115623 = invoke(stypy.reporting.localization.Localization(__file__, 651, 12), destroy_115620, *[arg_115621], **kwargs_115622)
    
    # SSA branch for the else part of an if statement (line 650)
    module_type_store.open_ssa_branch('else')
    
    # Type idiom detected: calculating its left and rigth part (line 652)
    unicode_115624 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 652, 26), 'unicode', u'int')
    # Getting the type of 'arg' (line 652)
    arg_115625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 652, 21), 'arg')
    
    (may_be_115626, more_types_in_union_115627) = may_provide_member(unicode_115624, arg_115625)

    if may_be_115626:

        if more_types_in_union_115627:
            # Runtime conditional SSA (line 652)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        # Assigning a type to the variable 'arg' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 13), 'arg', remove_not_member_provider_from_union(arg_115625, u'int'))
        
        # Call to destroy(...): (line 655)
        # Processing the call arguments (line 655)
        # Getting the type of 'arg' (line 655)
        arg_115631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 39), 'arg', False)
        # Obtaining the member 'int' of a type (line 655)
        int_115632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 39), arg_115631, 'int')
        # Processing the call keyword arguments (line 655)
        kwargs_115633 = {}
        # Getting the type of '_pylab_helpers' (line 655)
        _pylab_helpers_115628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 655, 12), '_pylab_helpers', False)
        # Obtaining the member 'Gcf' of a type (line 655)
        Gcf_115629 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 12), _pylab_helpers_115628, 'Gcf')
        # Obtaining the member 'destroy' of a type (line 655)
        destroy_115630 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 655, 12), Gcf_115629, 'destroy')
        # Calling destroy(args, kwargs) (line 655)
        destroy_call_result_115634 = invoke(stypy.reporting.localization.Localization(__file__, 655, 12), destroy_115630, *[int_115632], **kwargs_115633)
        

        if more_types_in_union_115627:
            # Runtime conditional SSA for else branch (line 652)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_115626) or more_types_in_union_115627):
        # Assigning a type to the variable 'arg' (line 652)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 652, 13), 'arg', remove_member_provider_from_union(arg_115625, u'int'))
        
        
        # Call to isinstance(...): (line 656)
        # Processing the call arguments (line 656)
        # Getting the type of 'arg' (line 656)
        arg_115636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 24), 'arg', False)
        # Getting the type of 'six' (line 656)
        six_115637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 29), 'six', False)
        # Obtaining the member 'string_types' of a type (line 656)
        string_types_115638 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 656, 29), six_115637, 'string_types')
        # Processing the call keyword arguments (line 656)
        kwargs_115639 = {}
        # Getting the type of 'isinstance' (line 656)
        isinstance_115635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 656, 13), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 656)
        isinstance_call_result_115640 = invoke(stypy.reporting.localization.Localization(__file__, 656, 13), isinstance_115635, *[arg_115636, string_types_115638], **kwargs_115639)
        
        # Testing the type of an if condition (line 656)
        if_condition_115641 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 656, 13), isinstance_call_result_115640)
        # Assigning a type to the variable 'if_condition_115641' (line 656)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 656, 13), 'if_condition_115641', if_condition_115641)
        # SSA begins for if statement (line 656)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Call to a Name (line 657):
        
        # Assigning a Call to a Name (line 657):
        
        # Call to get_figlabels(...): (line 657)
        # Processing the call keyword arguments (line 657)
        kwargs_115643 = {}
        # Getting the type of 'get_figlabels' (line 657)
        get_figlabels_115642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 657, 24), 'get_figlabels', False)
        # Calling get_figlabels(args, kwargs) (line 657)
        get_figlabels_call_result_115644 = invoke(stypy.reporting.localization.Localization(__file__, 657, 24), get_figlabels_115642, *[], **kwargs_115643)
        
        # Assigning a type to the variable 'allLabels' (line 657)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 657, 12), 'allLabels', get_figlabels_call_result_115644)
        
        
        # Getting the type of 'arg' (line 658)
        arg_115645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 15), 'arg')
        # Getting the type of 'allLabels' (line 658)
        allLabels_115646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 658, 22), 'allLabels')
        # Applying the binary operator 'in' (line 658)
        result_contains_115647 = python_operator(stypy.reporting.localization.Localization(__file__, 658, 15), 'in', arg_115645, allLabels_115646)
        
        # Testing the type of an if condition (line 658)
        if_condition_115648 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 658, 12), result_contains_115647)
        # Assigning a type to the variable 'if_condition_115648' (line 658)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 658, 12), 'if_condition_115648', if_condition_115648)
        # SSA begins for if statement (line 658)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 659):
        
        # Assigning a Subscript to a Name (line 659):
        
        # Obtaining the type of the subscript
        
        # Call to index(...): (line 659)
        # Processing the call arguments (line 659)
        # Getting the type of 'arg' (line 659)
        arg_115651 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 52), 'arg', False)
        # Processing the call keyword arguments (line 659)
        kwargs_115652 = {}
        # Getting the type of 'allLabels' (line 659)
        allLabels_115649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 36), 'allLabels', False)
        # Obtaining the member 'index' of a type (line 659)
        index_115650 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 36), allLabels_115649, 'index')
        # Calling index(args, kwargs) (line 659)
        index_call_result_115653 = invoke(stypy.reporting.localization.Localization(__file__, 659, 36), index_115650, *[arg_115651], **kwargs_115652)
        
        
        # Call to get_fignums(...): (line 659)
        # Processing the call keyword arguments (line 659)
        kwargs_115655 = {}
        # Getting the type of 'get_fignums' (line 659)
        get_fignums_115654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 659, 22), 'get_fignums', False)
        # Calling get_fignums(args, kwargs) (line 659)
        get_fignums_call_result_115656 = invoke(stypy.reporting.localization.Localization(__file__, 659, 22), get_fignums_115654, *[], **kwargs_115655)
        
        # Obtaining the member '__getitem__' of a type (line 659)
        getitem___115657 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 659, 22), get_fignums_call_result_115656, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 659)
        subscript_call_result_115658 = invoke(stypy.reporting.localization.Localization(__file__, 659, 22), getitem___115657, index_call_result_115653)
        
        # Assigning a type to the variable 'num' (line 659)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 659, 16), 'num', subscript_call_result_115658)
        
        # Call to destroy(...): (line 660)
        # Processing the call arguments (line 660)
        # Getting the type of 'num' (line 660)
        num_115662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 43), 'num', False)
        # Processing the call keyword arguments (line 660)
        kwargs_115663 = {}
        # Getting the type of '_pylab_helpers' (line 660)
        _pylab_helpers_115659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 660, 16), '_pylab_helpers', False)
        # Obtaining the member 'Gcf' of a type (line 660)
        Gcf_115660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 16), _pylab_helpers_115659, 'Gcf')
        # Obtaining the member 'destroy' of a type (line 660)
        destroy_115661 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 660, 16), Gcf_115660, 'destroy')
        # Calling destroy(args, kwargs) (line 660)
        destroy_call_result_115664 = invoke(stypy.reporting.localization.Localization(__file__, 660, 16), destroy_115661, *[num_115662], **kwargs_115663)
        
        # SSA join for if statement (line 658)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of an if statement (line 656)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to isinstance(...): (line 661)
        # Processing the call arguments (line 661)
        # Getting the type of 'arg' (line 661)
        arg_115666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 24), 'arg', False)
        # Getting the type of 'Figure' (line 661)
        Figure_115667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 29), 'Figure', False)
        # Processing the call keyword arguments (line 661)
        kwargs_115668 = {}
        # Getting the type of 'isinstance' (line 661)
        isinstance_115665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 661, 13), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 661)
        isinstance_call_result_115669 = invoke(stypy.reporting.localization.Localization(__file__, 661, 13), isinstance_115665, *[arg_115666, Figure_115667], **kwargs_115668)
        
        # Testing the type of an if condition (line 661)
        if_condition_115670 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 661, 13), isinstance_call_result_115669)
        # Assigning a type to the variable 'if_condition_115670' (line 661)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 661, 13), 'if_condition_115670', if_condition_115670)
        # SSA begins for if statement (line 661)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Call to destroy_fig(...): (line 662)
        # Processing the call arguments (line 662)
        # Getting the type of 'arg' (line 662)
        arg_115674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 43), 'arg', False)
        # Processing the call keyword arguments (line 662)
        kwargs_115675 = {}
        # Getting the type of '_pylab_helpers' (line 662)
        _pylab_helpers_115671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 662, 12), '_pylab_helpers', False)
        # Obtaining the member 'Gcf' of a type (line 662)
        Gcf_115672 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 12), _pylab_helpers_115671, 'Gcf')
        # Obtaining the member 'destroy_fig' of a type (line 662)
        destroy_fig_115673 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 662, 12), Gcf_115672, 'destroy_fig')
        # Calling destroy_fig(args, kwargs) (line 662)
        destroy_fig_call_result_115676 = invoke(stypy.reporting.localization.Localization(__file__, 662, 12), destroy_fig_115673, *[arg_115674], **kwargs_115675)
        
        # SSA branch for the else part of an if statement (line 661)
        module_type_store.open_ssa_branch('else')
        
        # Call to TypeError(...): (line 664)
        # Processing the call arguments (line 664)
        unicode_115678 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 664, 28), 'unicode', u'Unrecognized argument type %s to close')
        
        # Call to type(...): (line 664)
        # Processing the call arguments (line 664)
        # Getting the type of 'arg' (line 664)
        arg_115680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 76), 'arg', False)
        # Processing the call keyword arguments (line 664)
        kwargs_115681 = {}
        # Getting the type of 'type' (line 664)
        type_115679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 71), 'type', False)
        # Calling type(args, kwargs) (line 664)
        type_call_result_115682 = invoke(stypy.reporting.localization.Localization(__file__, 664, 71), type_115679, *[arg_115680], **kwargs_115681)
        
        # Applying the binary operator '%' (line 664)
        result_mod_115683 = python_operator(stypy.reporting.localization.Localization(__file__, 664, 28), '%', unicode_115678, type_call_result_115682)
        
        # Processing the call keyword arguments (line 664)
        kwargs_115684 = {}
        # Getting the type of 'TypeError' (line 664)
        TypeError_115677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 664, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 664)
        TypeError_call_result_115685 = invoke(stypy.reporting.localization.Localization(__file__, 664, 18), TypeError_115677, *[result_mod_115683], **kwargs_115684)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 664, 12), TypeError_call_result_115685, 'raise parameter', BaseException)
        # SSA join for if statement (line 661)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 656)
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_115626 and more_types_in_union_115627):
            # SSA join for if statement (line 652)
            module_type_store = module_type_store.join_ssa_context()


    
    # SSA join for if statement (line 650)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 648)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 646)
    module_type_store.open_ssa_branch('else')
    
    # Call to TypeError(...): (line 666)
    # Processing the call arguments (line 666)
    unicode_115687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 666, 24), 'unicode', u'close takes 0 or 1 arguments')
    # Processing the call keyword arguments (line 666)
    kwargs_115688 = {}
    # Getting the type of 'TypeError' (line 666)
    TypeError_115686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 666, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 666)
    TypeError_call_result_115689 = invoke(stypy.reporting.localization.Localization(__file__, 666, 14), TypeError_115686, *[unicode_115687], **kwargs_115688)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 666, 8), TypeError_call_result_115689, 'raise parameter', BaseException)
    # SSA join for if statement (line 646)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 640)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'close(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'close' in the type store
    # Getting the type of 'stypy_return_type' (line 625)
    stypy_return_type_115690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 625, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115690)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'close'
    return stypy_return_type_115690

# Assigning a type to the variable 'close' (line 625)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 625, 0), 'close', close)

@norecursion
def clf(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'clf'
    module_type_store = module_type_store.open_function_context('clf', 669, 0, False)
    
    # Passed parameters checking function
    clf.stypy_localization = localization
    clf.stypy_type_of_self = None
    clf.stypy_type_store = module_type_store
    clf.stypy_function_name = 'clf'
    clf.stypy_param_names_list = []
    clf.stypy_varargs_param_name = None
    clf.stypy_kwargs_param_name = None
    clf.stypy_call_defaults = defaults
    clf.stypy_call_varargs = varargs
    clf.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'clf', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'clf', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'clf(...)' code ##################

    unicode_115691 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 672, (-1)), 'unicode', u'\n    Clear the current figure.\n    ')
    
    # Call to clf(...): (line 673)
    # Processing the call keyword arguments (line 673)
    kwargs_115696 = {}
    
    # Call to gcf(...): (line 673)
    # Processing the call keyword arguments (line 673)
    kwargs_115693 = {}
    # Getting the type of 'gcf' (line 673)
    gcf_115692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 673, 4), 'gcf', False)
    # Calling gcf(args, kwargs) (line 673)
    gcf_call_result_115694 = invoke(stypy.reporting.localization.Localization(__file__, 673, 4), gcf_115692, *[], **kwargs_115693)
    
    # Obtaining the member 'clf' of a type (line 673)
    clf_115695 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 673, 4), gcf_call_result_115694, 'clf')
    # Calling clf(args, kwargs) (line 673)
    clf_call_result_115697 = invoke(stypy.reporting.localization.Localization(__file__, 673, 4), clf_115695, *[], **kwargs_115696)
    
    
    # ################# End of 'clf(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'clf' in the type store
    # Getting the type of 'stypy_return_type' (line 669)
    stypy_return_type_115698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 669, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115698)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'clf'
    return stypy_return_type_115698

# Assigning a type to the variable 'clf' (line 669)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 669, 0), 'clf', clf)

@norecursion
def draw(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'draw'
    module_type_store = module_type_store.open_function_context('draw', 676, 0, False)
    
    # Passed parameters checking function
    draw.stypy_localization = localization
    draw.stypy_type_of_self = None
    draw.stypy_type_store = module_type_store
    draw.stypy_function_name = 'draw'
    draw.stypy_param_names_list = []
    draw.stypy_varargs_param_name = None
    draw.stypy_kwargs_param_name = None
    draw.stypy_call_defaults = defaults
    draw.stypy_call_varargs = varargs
    draw.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'draw', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'draw', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'draw(...)' code ##################

    unicode_115699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 690, (-1)), 'unicode', u'Redraw the current figure.\n\n    This is used to update a figure that has been altered, but not\n    automatically re-drawn.  If interactive mode is on (:func:`.ion()`), this\n    should be only rarely needed, but there may be ways to modify the state of\n    a figure without marking it as `stale`.  Please report these cases as\n    bugs.\n\n    A more object-oriented alternative, given any\n    :class:`~matplotlib.figure.Figure` instance, :attr:`fig`, that\n    was created using a :mod:`~matplotlib.pyplot` function, is::\n\n        fig.canvas.draw_idle()\n    ')
    
    # Call to draw_idle(...): (line 691)
    # Processing the call keyword arguments (line 691)
    kwargs_115705 = {}
    
    # Call to get_current_fig_manager(...): (line 691)
    # Processing the call keyword arguments (line 691)
    kwargs_115701 = {}
    # Getting the type of 'get_current_fig_manager' (line 691)
    get_current_fig_manager_115700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 691, 4), 'get_current_fig_manager', False)
    # Calling get_current_fig_manager(args, kwargs) (line 691)
    get_current_fig_manager_call_result_115702 = invoke(stypy.reporting.localization.Localization(__file__, 691, 4), get_current_fig_manager_115700, *[], **kwargs_115701)
    
    # Obtaining the member 'canvas' of a type (line 691)
    canvas_115703 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 4), get_current_fig_manager_call_result_115702, 'canvas')
    # Obtaining the member 'draw_idle' of a type (line 691)
    draw_idle_115704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 691, 4), canvas_115703, 'draw_idle')
    # Calling draw_idle(args, kwargs) (line 691)
    draw_idle_call_result_115706 = invoke(stypy.reporting.localization.Localization(__file__, 691, 4), draw_idle_115704, *[], **kwargs_115705)
    
    
    # ################# End of 'draw(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'draw' in the type store
    # Getting the type of 'stypy_return_type' (line 676)
    stypy_return_type_115707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 676, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115707)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'draw'
    return stypy_return_type_115707

# Assigning a type to the variable 'draw' (line 676)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 676, 0), 'draw', draw)

@norecursion
def savefig(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'savefig'
    module_type_store = module_type_store.open_function_context('savefig', 694, 0, False)
    
    # Passed parameters checking function
    savefig.stypy_localization = localization
    savefig.stypy_type_of_self = None
    savefig.stypy_type_store = module_type_store
    savefig.stypy_function_name = 'savefig'
    savefig.stypy_param_names_list = []
    savefig.stypy_varargs_param_name = 'args'
    savefig.stypy_kwargs_param_name = 'kwargs'
    savefig.stypy_call_defaults = defaults
    savefig.stypy_call_varargs = varargs
    savefig.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'savefig', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'savefig', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'savefig(...)' code ##################

    
    # Assigning a Call to a Name (line 696):
    
    # Assigning a Call to a Name (line 696):
    
    # Call to gcf(...): (line 696)
    # Processing the call keyword arguments (line 696)
    kwargs_115709 = {}
    # Getting the type of 'gcf' (line 696)
    gcf_115708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 696, 10), 'gcf', False)
    # Calling gcf(args, kwargs) (line 696)
    gcf_call_result_115710 = invoke(stypy.reporting.localization.Localization(__file__, 696, 10), gcf_115708, *[], **kwargs_115709)
    
    # Assigning a type to the variable 'fig' (line 696)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 696, 4), 'fig', gcf_call_result_115710)
    
    # Assigning a Call to a Name (line 697):
    
    # Assigning a Call to a Name (line 697):
    
    # Call to savefig(...): (line 697)
    # Getting the type of 'args' (line 697)
    args_115713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 23), 'args', False)
    # Processing the call keyword arguments (line 697)
    # Getting the type of 'kwargs' (line 697)
    kwargs_115714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 31), 'kwargs', False)
    kwargs_115715 = {'kwargs_115714': kwargs_115714}
    # Getting the type of 'fig' (line 697)
    fig_115711 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 697, 10), 'fig', False)
    # Obtaining the member 'savefig' of a type (line 697)
    savefig_115712 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 697, 10), fig_115711, 'savefig')
    # Calling savefig(args, kwargs) (line 697)
    savefig_call_result_115716 = invoke(stypy.reporting.localization.Localization(__file__, 697, 10), savefig_115712, *[args_115713], **kwargs_115715)
    
    # Assigning a type to the variable 'res' (line 697)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 697, 4), 'res', savefig_call_result_115716)
    
    # Call to draw_idle(...): (line 698)
    # Processing the call keyword arguments (line 698)
    kwargs_115720 = {}
    # Getting the type of 'fig' (line 698)
    fig_115717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 698, 4), 'fig', False)
    # Obtaining the member 'canvas' of a type (line 698)
    canvas_115718 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 4), fig_115717, 'canvas')
    # Obtaining the member 'draw_idle' of a type (line 698)
    draw_idle_115719 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 698, 4), canvas_115718, 'draw_idle')
    # Calling draw_idle(args, kwargs) (line 698)
    draw_idle_call_result_115721 = invoke(stypy.reporting.localization.Localization(__file__, 698, 4), draw_idle_115719, *[], **kwargs_115720)
    
    # Getting the type of 'res' (line 699)
    res_115722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 699, 11), 'res')
    # Assigning a type to the variable 'stypy_return_type' (line 699)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 699, 4), 'stypy_return_type', res_115722)
    
    # ################# End of 'savefig(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'savefig' in the type store
    # Getting the type of 'stypy_return_type' (line 694)
    stypy_return_type_115723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 694, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115723)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'savefig'
    return stypy_return_type_115723

# Assigning a type to the variable 'savefig' (line 694)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 694, 0), 'savefig', savefig)

@norecursion
def ginput(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ginput'
    module_type_store = module_type_store.open_function_context('ginput', 702, 0, False)
    
    # Passed parameters checking function
    ginput.stypy_localization = localization
    ginput.stypy_type_of_self = None
    ginput.stypy_type_store = module_type_store
    ginput.stypy_function_name = 'ginput'
    ginput.stypy_param_names_list = []
    ginput.stypy_varargs_param_name = 'args'
    ginput.stypy_kwargs_param_name = 'kwargs'
    ginput.stypy_call_defaults = defaults
    ginput.stypy_call_varargs = varargs
    ginput.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ginput', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ginput', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ginput(...)' code ##################

    unicode_115724 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 711, (-1)), 'unicode', u'\n    Blocking call to interact with the figure.\n\n    This will wait for *n* clicks from the user and return a list of the\n    coordinates of each click.\n\n    If *timeout* is negative, does not timeout.\n    ')
    
    # Call to ginput(...): (line 712)
    # Getting the type of 'args' (line 712)
    args_115729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 25), 'args', False)
    # Processing the call keyword arguments (line 712)
    # Getting the type of 'kwargs' (line 712)
    kwargs_115730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 33), 'kwargs', False)
    kwargs_115731 = {'kwargs_115730': kwargs_115730}
    
    # Call to gcf(...): (line 712)
    # Processing the call keyword arguments (line 712)
    kwargs_115726 = {}
    # Getting the type of 'gcf' (line 712)
    gcf_115725 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 712, 11), 'gcf', False)
    # Calling gcf(args, kwargs) (line 712)
    gcf_call_result_115727 = invoke(stypy.reporting.localization.Localization(__file__, 712, 11), gcf_115725, *[], **kwargs_115726)
    
    # Obtaining the member 'ginput' of a type (line 712)
    ginput_115728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 712, 11), gcf_call_result_115727, 'ginput')
    # Calling ginput(args, kwargs) (line 712)
    ginput_call_result_115732 = invoke(stypy.reporting.localization.Localization(__file__, 712, 11), ginput_115728, *[args_115729], **kwargs_115731)
    
    # Assigning a type to the variable 'stypy_return_type' (line 712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 712, 4), 'stypy_return_type', ginput_call_result_115732)
    
    # ################# End of 'ginput(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ginput' in the type store
    # Getting the type of 'stypy_return_type' (line 702)
    stypy_return_type_115733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 702, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115733)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ginput'
    return stypy_return_type_115733

# Assigning a type to the variable 'ginput' (line 702)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 702, 0), 'ginput', ginput)

@norecursion
def waitforbuttonpress(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'waitforbuttonpress'
    module_type_store = module_type_store.open_function_context('waitforbuttonpress', 715, 0, False)
    
    # Passed parameters checking function
    waitforbuttonpress.stypy_localization = localization
    waitforbuttonpress.stypy_type_of_self = None
    waitforbuttonpress.stypy_type_store = module_type_store
    waitforbuttonpress.stypy_function_name = 'waitforbuttonpress'
    waitforbuttonpress.stypy_param_names_list = []
    waitforbuttonpress.stypy_varargs_param_name = 'args'
    waitforbuttonpress.stypy_kwargs_param_name = 'kwargs'
    waitforbuttonpress.stypy_call_defaults = defaults
    waitforbuttonpress.stypy_call_varargs = varargs
    waitforbuttonpress.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'waitforbuttonpress', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'waitforbuttonpress', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'waitforbuttonpress(...)' code ##################

    unicode_115734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 725, (-1)), 'unicode', u"\n    Blocking call to interact with the figure.\n\n    This will wait for *n* key or mouse clicks from the user and\n    return a list containing True's for keyboard clicks and False's\n    for mouse clicks.\n\n    If *timeout* is negative, does not timeout.\n    ")
    
    # Call to waitforbuttonpress(...): (line 726)
    # Getting the type of 'args' (line 726)
    args_115739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 37), 'args', False)
    # Processing the call keyword arguments (line 726)
    # Getting the type of 'kwargs' (line 726)
    kwargs_115740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 45), 'kwargs', False)
    kwargs_115741 = {'kwargs_115740': kwargs_115740}
    
    # Call to gcf(...): (line 726)
    # Processing the call keyword arguments (line 726)
    kwargs_115736 = {}
    # Getting the type of 'gcf' (line 726)
    gcf_115735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 726, 11), 'gcf', False)
    # Calling gcf(args, kwargs) (line 726)
    gcf_call_result_115737 = invoke(stypy.reporting.localization.Localization(__file__, 726, 11), gcf_115735, *[], **kwargs_115736)
    
    # Obtaining the member 'waitforbuttonpress' of a type (line 726)
    waitforbuttonpress_115738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 726, 11), gcf_call_result_115737, 'waitforbuttonpress')
    # Calling waitforbuttonpress(args, kwargs) (line 726)
    waitforbuttonpress_call_result_115742 = invoke(stypy.reporting.localization.Localization(__file__, 726, 11), waitforbuttonpress_115738, *[args_115739], **kwargs_115741)
    
    # Assigning a type to the variable 'stypy_return_type' (line 726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 726, 4), 'stypy_return_type', waitforbuttonpress_call_result_115742)
    
    # ################# End of 'waitforbuttonpress(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'waitforbuttonpress' in the type store
    # Getting the type of 'stypy_return_type' (line 715)
    stypy_return_type_115743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 715, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115743)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'waitforbuttonpress'
    return stypy_return_type_115743

# Assigning a type to the variable 'waitforbuttonpress' (line 715)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 715, 0), 'waitforbuttonpress', waitforbuttonpress)

@norecursion
def figtext(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'figtext'
    module_type_store = module_type_store.open_function_context('figtext', 731, 0, False)
    
    # Passed parameters checking function
    figtext.stypy_localization = localization
    figtext.stypy_type_of_self = None
    figtext.stypy_type_store = module_type_store
    figtext.stypy_function_name = 'figtext'
    figtext.stypy_param_names_list = []
    figtext.stypy_varargs_param_name = 'args'
    figtext.stypy_kwargs_param_name = 'kwargs'
    figtext.stypy_call_defaults = defaults
    figtext.stypy_call_varargs = varargs
    figtext.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'figtext', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'figtext', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'figtext(...)' code ##################

    
    # Call to text(...): (line 733)
    # Getting the type of 'args' (line 733)
    args_115748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 23), 'args', False)
    # Processing the call keyword arguments (line 733)
    # Getting the type of 'kwargs' (line 733)
    kwargs_115749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 31), 'kwargs', False)
    kwargs_115750 = {'kwargs_115749': kwargs_115749}
    
    # Call to gcf(...): (line 733)
    # Processing the call keyword arguments (line 733)
    kwargs_115745 = {}
    # Getting the type of 'gcf' (line 733)
    gcf_115744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 733, 11), 'gcf', False)
    # Calling gcf(args, kwargs) (line 733)
    gcf_call_result_115746 = invoke(stypy.reporting.localization.Localization(__file__, 733, 11), gcf_115744, *[], **kwargs_115745)
    
    # Obtaining the member 'text' of a type (line 733)
    text_115747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 733, 11), gcf_call_result_115746, 'text')
    # Calling text(args, kwargs) (line 733)
    text_call_result_115751 = invoke(stypy.reporting.localization.Localization(__file__, 733, 11), text_115747, *[args_115748], **kwargs_115750)
    
    # Assigning a type to the variable 'stypy_return_type' (line 733)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 733, 4), 'stypy_return_type', text_call_result_115751)
    
    # ################# End of 'figtext(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'figtext' in the type store
    # Getting the type of 'stypy_return_type' (line 731)
    stypy_return_type_115752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 731, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115752)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'figtext'
    return stypy_return_type_115752

# Assigning a type to the variable 'figtext' (line 731)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 731, 0), 'figtext', figtext)

@norecursion
def suptitle(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'suptitle'
    module_type_store = module_type_store.open_function_context('suptitle', 736, 0, False)
    
    # Passed parameters checking function
    suptitle.stypy_localization = localization
    suptitle.stypy_type_of_self = None
    suptitle.stypy_type_store = module_type_store
    suptitle.stypy_function_name = 'suptitle'
    suptitle.stypy_param_names_list = []
    suptitle.stypy_varargs_param_name = 'args'
    suptitle.stypy_kwargs_param_name = 'kwargs'
    suptitle.stypy_call_defaults = defaults
    suptitle.stypy_call_varargs = varargs
    suptitle.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'suptitle', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'suptitle', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'suptitle(...)' code ##################

    
    # Call to suptitle(...): (line 738)
    # Getting the type of 'args' (line 738)
    args_115757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 27), 'args', False)
    # Processing the call keyword arguments (line 738)
    # Getting the type of 'kwargs' (line 738)
    kwargs_115758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 35), 'kwargs', False)
    kwargs_115759 = {'kwargs_115758': kwargs_115758}
    
    # Call to gcf(...): (line 738)
    # Processing the call keyword arguments (line 738)
    kwargs_115754 = {}
    # Getting the type of 'gcf' (line 738)
    gcf_115753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 738, 11), 'gcf', False)
    # Calling gcf(args, kwargs) (line 738)
    gcf_call_result_115755 = invoke(stypy.reporting.localization.Localization(__file__, 738, 11), gcf_115753, *[], **kwargs_115754)
    
    # Obtaining the member 'suptitle' of a type (line 738)
    suptitle_115756 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 738, 11), gcf_call_result_115755, 'suptitle')
    # Calling suptitle(args, kwargs) (line 738)
    suptitle_call_result_115760 = invoke(stypy.reporting.localization.Localization(__file__, 738, 11), suptitle_115756, *[args_115757], **kwargs_115759)
    
    # Assigning a type to the variable 'stypy_return_type' (line 738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 738, 4), 'stypy_return_type', suptitle_call_result_115760)
    
    # ################# End of 'suptitle(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'suptitle' in the type store
    # Getting the type of 'stypy_return_type' (line 736)
    stypy_return_type_115761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 736, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115761)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'suptitle'
    return stypy_return_type_115761

# Assigning a type to the variable 'suptitle' (line 736)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 736, 0), 'suptitle', suptitle)

@norecursion
def figimage(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'figimage'
    module_type_store = module_type_store.open_function_context('figimage', 741, 0, False)
    
    # Passed parameters checking function
    figimage.stypy_localization = localization
    figimage.stypy_type_of_self = None
    figimage.stypy_type_store = module_type_store
    figimage.stypy_function_name = 'figimage'
    figimage.stypy_param_names_list = []
    figimage.stypy_varargs_param_name = 'args'
    figimage.stypy_kwargs_param_name = 'kwargs'
    figimage.stypy_call_defaults = defaults
    figimage.stypy_call_varargs = varargs
    figimage.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'figimage', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'figimage', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'figimage(...)' code ##################

    
    # Call to figimage(...): (line 743)
    # Getting the type of 'args' (line 743)
    args_115766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 27), 'args', False)
    # Processing the call keyword arguments (line 743)
    # Getting the type of 'kwargs' (line 743)
    kwargs_115767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 35), 'kwargs', False)
    kwargs_115768 = {'kwargs_115767': kwargs_115767}
    
    # Call to gcf(...): (line 743)
    # Processing the call keyword arguments (line 743)
    kwargs_115763 = {}
    # Getting the type of 'gcf' (line 743)
    gcf_115762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 743, 11), 'gcf', False)
    # Calling gcf(args, kwargs) (line 743)
    gcf_call_result_115764 = invoke(stypy.reporting.localization.Localization(__file__, 743, 11), gcf_115762, *[], **kwargs_115763)
    
    # Obtaining the member 'figimage' of a type (line 743)
    figimage_115765 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 743, 11), gcf_call_result_115764, 'figimage')
    # Calling figimage(args, kwargs) (line 743)
    figimage_call_result_115769 = invoke(stypy.reporting.localization.Localization(__file__, 743, 11), figimage_115765, *[args_115766], **kwargs_115768)
    
    # Assigning a type to the variable 'stypy_return_type' (line 743)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 743, 4), 'stypy_return_type', figimage_call_result_115769)
    
    # ################# End of 'figimage(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'figimage' in the type store
    # Getting the type of 'stypy_return_type' (line 741)
    stypy_return_type_115770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 741, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115770)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'figimage'
    return stypy_return_type_115770

# Assigning a type to the variable 'figimage' (line 741)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 741, 0), 'figimage', figimage)

@norecursion
def figlegend(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'figlegend'
    module_type_store = module_type_store.open_function_context('figlegend', 746, 0, False)
    
    # Passed parameters checking function
    figlegend.stypy_localization = localization
    figlegend.stypy_type_of_self = None
    figlegend.stypy_type_store = module_type_store
    figlegend.stypy_function_name = 'figlegend'
    figlegend.stypy_param_names_list = []
    figlegend.stypy_varargs_param_name = 'args'
    figlegend.stypy_kwargs_param_name = 'kwargs'
    figlegend.stypy_call_defaults = defaults
    figlegend.stypy_call_varargs = varargs
    figlegend.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'figlegend', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'figlegend', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'figlegend(...)' code ##################

    unicode_115771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 780, (-1)), 'unicode', u"\n    Place a legend in the figure.\n\n    *labels*\n      a sequence of strings\n\n    *handles*\n      a sequence of :class:`~matplotlib.lines.Line2D` or\n      :class:`~matplotlib.patches.Patch` instances\n\n    *loc*\n      can be a string or an integer specifying the legend\n      location\n\n    A :class:`matplotlib.legend.Legend` instance is returned.\n\n    Examples\n    --------\n\n    To make a legend from existing artists on every axes::\n\n      figlegend()\n\n    To make a legend for a list of lines and labels::\n\n      figlegend( (line1, line2, line3),\n                 ('label1', 'label2', 'label3'),\n                 'upper right' )\n\n    .. seealso::\n\n       :func:`~matplotlib.pyplot.legend`\n\n    ")
    
    # Call to legend(...): (line 781)
    # Getting the type of 'args' (line 781)
    args_115776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 25), 'args', False)
    # Processing the call keyword arguments (line 781)
    # Getting the type of 'kwargs' (line 781)
    kwargs_115777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 33), 'kwargs', False)
    kwargs_115778 = {'kwargs_115777': kwargs_115777}
    
    # Call to gcf(...): (line 781)
    # Processing the call keyword arguments (line 781)
    kwargs_115773 = {}
    # Getting the type of 'gcf' (line 781)
    gcf_115772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 781, 11), 'gcf', False)
    # Calling gcf(args, kwargs) (line 781)
    gcf_call_result_115774 = invoke(stypy.reporting.localization.Localization(__file__, 781, 11), gcf_115772, *[], **kwargs_115773)
    
    # Obtaining the member 'legend' of a type (line 781)
    legend_115775 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 781, 11), gcf_call_result_115774, 'legend')
    # Calling legend(args, kwargs) (line 781)
    legend_call_result_115779 = invoke(stypy.reporting.localization.Localization(__file__, 781, 11), legend_115775, *[args_115776], **kwargs_115778)
    
    # Assigning a type to the variable 'stypy_return_type' (line 781)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 781, 4), 'stypy_return_type', legend_call_result_115779)
    
    # ################# End of 'figlegend(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'figlegend' in the type store
    # Getting the type of 'stypy_return_type' (line 746)
    stypy_return_type_115780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 746, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115780)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'figlegend'
    return stypy_return_type_115780

# Assigning a type to the variable 'figlegend' (line 746)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 746, 0), 'figlegend', figlegend)

# Assigning a Str to a Name (line 786):

# Assigning a Str to a Name (line 786):
unicode_115781 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 789, (-1)), 'unicode', u'pyplot.hold is deprecated.\n    Future behavior will be consistent with the long-time default:\n    plot commands add elements without first clearing the\n    Axes and/or Figure.')
# Assigning a type to the variable '_hold_msg' (line 786)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 786, 0), '_hold_msg', unicode_115781)

@norecursion
def hold(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 792)
    None_115782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 792, 11), 'None')
    defaults = [None_115782]
    # Create a new context for function 'hold'
    module_type_store = module_type_store.open_function_context('hold', 791, 0, False)
    
    # Passed parameters checking function
    hold.stypy_localization = localization
    hold.stypy_type_of_self = None
    hold.stypy_type_store = module_type_store
    hold.stypy_function_name = 'hold'
    hold.stypy_param_names_list = ['b']
    hold.stypy_varargs_param_name = None
    hold.stypy_kwargs_param_name = None
    hold.stypy_call_defaults = defaults
    hold.stypy_call_varargs = varargs
    hold.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hold', ['b'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hold', localization, ['b'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hold(...)' code ##################

    unicode_115783 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 805, (-1)), 'unicode', u'\n    Set the hold state.  If *b* is None (default), toggle the\n    hold state, else set the hold state to boolean value *b*::\n\n      hold()      # toggle hold\n      hold(True)  # hold is on\n      hold(False) # hold is off\n\n    When *hold* is *True*, subsequent plot commands will add elements to\n    the current axes.  When *hold* is *False*, the current axes and\n    figure will be cleared on the next plot command.\n\n    ')
    
    # Assigning a Call to a Name (line 807):
    
    # Assigning a Call to a Name (line 807):
    
    # Call to gcf(...): (line 807)
    # Processing the call keyword arguments (line 807)
    kwargs_115785 = {}
    # Getting the type of 'gcf' (line 807)
    gcf_115784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 807, 10), 'gcf', False)
    # Calling gcf(args, kwargs) (line 807)
    gcf_call_result_115786 = invoke(stypy.reporting.localization.Localization(__file__, 807, 10), gcf_115784, *[], **kwargs_115785)
    
    # Assigning a type to the variable 'fig' (line 807)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 807, 4), 'fig', gcf_call_result_115786)
    
    # Assigning a Call to a Name (line 808):
    
    # Assigning a Call to a Name (line 808):
    
    # Call to gca(...): (line 808)
    # Processing the call keyword arguments (line 808)
    kwargs_115789 = {}
    # Getting the type of 'fig' (line 808)
    fig_115787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 808, 9), 'fig', False)
    # Obtaining the member 'gca' of a type (line 808)
    gca_115788 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 808, 9), fig_115787, 'gca')
    # Calling gca(args, kwargs) (line 808)
    gca_call_result_115790 = invoke(stypy.reporting.localization.Localization(__file__, 808, 9), gca_115788, *[], **kwargs_115789)
    
    # Assigning a type to the variable 'ax' (line 808)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 808, 4), 'ax', gca_call_result_115790)
    
    # Type idiom detected: calculating its left and rigth part (line 810)
    # Getting the type of 'b' (line 810)
    b_115791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 4), 'b')
    # Getting the type of 'None' (line 810)
    None_115792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 810, 16), 'None')
    
    (may_be_115793, more_types_in_union_115794) = may_not_be_none(b_115791, None_115792)

    if may_be_115793:

        if more_types_in_union_115794:
            # Runtime conditional SSA (line 810)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 811):
        
        # Assigning a Call to a Name (line 811):
        
        # Call to bool(...): (line 811)
        # Processing the call arguments (line 811)
        # Getting the type of 'b' (line 811)
        b_115796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 17), 'b', False)
        # Processing the call keyword arguments (line 811)
        kwargs_115797 = {}
        # Getting the type of 'bool' (line 811)
        bool_115795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 811, 12), 'bool', False)
        # Calling bool(args, kwargs) (line 811)
        bool_call_result_115798 = invoke(stypy.reporting.localization.Localization(__file__, 811, 12), bool_115795, *[b_115796], **kwargs_115797)
        
        # Assigning a type to the variable 'b' (line 811)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 811, 8), 'b', bool_call_result_115798)

        if more_types_in_union_115794:
            # SSA join for if statement (line 810)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Attribute (line 812):
    
    # Assigning a Name to a Attribute (line 812):
    # Getting the type of 'b' (line 812)
    b_115799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 16), 'b')
    # Getting the type of 'fig' (line 812)
    fig_115800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 812, 4), 'fig')
    # Setting the type of the member '_hold' of a type (line 812)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 812, 4), fig_115800, '_hold', b_115799)
    
    # Assigning a Name to a Attribute (line 813):
    
    # Assigning a Name to a Attribute (line 813):
    # Getting the type of 'b' (line 813)
    b_115801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 15), 'b')
    # Getting the type of 'ax' (line 813)
    ax_115802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 813, 4), 'ax')
    # Setting the type of the member '_hold' of a type (line 813)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 813, 4), ax_115802, '_hold', b_115801)
    
    # Assigning a Attribute to a Name (line 818):
    
    # Assigning a Attribute to a Name (line 818):
    # Getting the type of 'ax' (line 818)
    ax_115803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 818, 8), 'ax')
    # Obtaining the member '_hold' of a type (line 818)
    _hold_115804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 818, 8), ax_115803, '_hold')
    # Assigning a type to the variable 'b' (line 818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 818, 4), 'b', _hold_115804)
    
    # Call to rc(...): (line 823)
    # Processing the call arguments (line 823)
    unicode_115806 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 823, 7), 'unicode', u'axes')
    # Processing the call keyword arguments (line 823)
    # Getting the type of 'b' (line 823)
    b_115807 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 20), 'b', False)
    keyword_115808 = b_115807
    kwargs_115809 = {'hold': keyword_115808}
    # Getting the type of 'rc' (line 823)
    rc_115805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 823, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 823)
    rc_call_result_115810 = invoke(stypy.reporting.localization.Localization(__file__, 823, 4), rc_115805, *[unicode_115806], **kwargs_115809)
    
    
    # ################# End of 'hold(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hold' in the type store
    # Getting the type of 'stypy_return_type' (line 791)
    stypy_return_type_115811 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 791, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115811)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hold'
    return stypy_return_type_115811

# Assigning a type to the variable 'hold' (line 791)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 791, 0), 'hold', hold)

@norecursion
def ishold(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ishold'
    module_type_store = module_type_store.open_function_context('ishold', 825, 0, False)
    
    # Passed parameters checking function
    ishold.stypy_localization = localization
    ishold.stypy_type_of_self = None
    ishold.stypy_type_store = module_type_store
    ishold.stypy_function_name = 'ishold'
    ishold.stypy_param_names_list = []
    ishold.stypy_varargs_param_name = None
    ishold.stypy_kwargs_param_name = None
    ishold.stypy_call_defaults = defaults
    ishold.stypy_call_varargs = varargs
    ishold.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ishold', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ishold', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ishold(...)' code ##################

    unicode_115812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 830, (-1)), 'unicode', u'\n    Return the hold status of the current axes.\n\n    ')
    
    # Call to gca(...): (line 831)
    # Processing the call keyword arguments (line 831)
    kwargs_115814 = {}
    # Getting the type of 'gca' (line 831)
    gca_115813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 831, 11), 'gca', False)
    # Calling gca(args, kwargs) (line 831)
    gca_call_result_115815 = invoke(stypy.reporting.localization.Localization(__file__, 831, 11), gca_115813, *[], **kwargs_115814)
    
    # Obtaining the member '_hold' of a type (line 831)
    _hold_115816 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 831, 11), gca_call_result_115815, '_hold')
    # Assigning a type to the variable 'stypy_return_type' (line 831)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 831, 4), 'stypy_return_type', _hold_115816)
    
    # ################# End of 'ishold(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ishold' in the type store
    # Getting the type of 'stypy_return_type' (line 825)
    stypy_return_type_115817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 825, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115817)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ishold'
    return stypy_return_type_115817

# Assigning a type to the variable 'ishold' (line 825)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 825, 0), 'ishold', ishold)

@norecursion
def over(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'over'
    module_type_store = module_type_store.open_function_context('over', 834, 0, False)
    
    # Passed parameters checking function
    over.stypy_localization = localization
    over.stypy_type_of_self = None
    over.stypy_type_store = module_type_store
    over.stypy_function_name = 'over'
    over.stypy_param_names_list = ['func']
    over.stypy_varargs_param_name = 'args'
    over.stypy_kwargs_param_name = 'kwargs'
    over.stypy_call_defaults = defaults
    over.stypy_call_varargs = varargs
    over.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'over', ['func'], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'over', localization, ['func'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'over(...)' code ##################

    unicode_115818 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 845, (-1)), 'unicode', u'\n    Call a function with hold(True).\n\n    Calls::\n\n      func(*args, **kwargs)\n\n    with ``hold(True)`` and then restores the hold state.\n\n    ')
    
    # Assigning a Call to a Name (line 846):
    
    # Assigning a Call to a Name (line 846):
    
    # Call to gca(...): (line 846)
    # Processing the call keyword arguments (line 846)
    kwargs_115820 = {}
    # Getting the type of 'gca' (line 846)
    gca_115819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 846, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 846)
    gca_call_result_115821 = invoke(stypy.reporting.localization.Localization(__file__, 846, 9), gca_115819, *[], **kwargs_115820)
    
    # Assigning a type to the variable 'ax' (line 846)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 846, 4), 'ax', gca_call_result_115821)
    
    # Assigning a Attribute to a Name (line 847):
    
    # Assigning a Attribute to a Name (line 847):
    # Getting the type of 'ax' (line 847)
    ax_115822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 847, 8), 'ax')
    # Obtaining the member '_hold' of a type (line 847)
    _hold_115823 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 847, 8), ax_115822, '_hold')
    # Assigning a type to the variable 'h' (line 847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 847, 4), 'h', _hold_115823)
    
    # Assigning a Name to a Attribute (line 848):
    
    # Assigning a Name to a Attribute (line 848):
    # Getting the type of 'True' (line 848)
    True_115824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 15), 'True')
    # Getting the type of 'ax' (line 848)
    ax_115825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 848, 4), 'ax')
    # Setting the type of the member '_hold' of a type (line 848)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 848, 4), ax_115825, '_hold', True_115824)
    
    # Call to func(...): (line 849)
    # Getting the type of 'args' (line 849)
    args_115827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 10), 'args', False)
    # Processing the call keyword arguments (line 849)
    # Getting the type of 'kwargs' (line 849)
    kwargs_115828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 18), 'kwargs', False)
    kwargs_115829 = {'kwargs_115828': kwargs_115828}
    # Getting the type of 'func' (line 849)
    func_115826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 849, 4), 'func', False)
    # Calling func(args, kwargs) (line 849)
    func_call_result_115830 = invoke(stypy.reporting.localization.Localization(__file__, 849, 4), func_115826, *[args_115827], **kwargs_115829)
    
    
    # Assigning a Name to a Attribute (line 850):
    
    # Assigning a Name to a Attribute (line 850):
    # Getting the type of 'h' (line 850)
    h_115831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 15), 'h')
    # Getting the type of 'ax' (line 850)
    ax_115832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 850, 4), 'ax')
    # Setting the type of the member '_hold' of a type (line 850)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 850, 4), ax_115832, '_hold', h_115831)
    
    # ################# End of 'over(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'over' in the type store
    # Getting the type of 'stypy_return_type' (line 834)
    stypy_return_type_115833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 834, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115833)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'over'
    return stypy_return_type_115833

# Assigning a type to the variable 'over' (line 834)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 834, 0), 'over', over)

@norecursion
def axes(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'axes'
    module_type_store = module_type_store.open_function_context('axes', 855, 0, False)
    
    # Passed parameters checking function
    axes.stypy_localization = localization
    axes.stypy_type_of_self = None
    axes.stypy_type_store = module_type_store
    axes.stypy_function_name = 'axes'
    axes.stypy_param_names_list = []
    axes.stypy_varargs_param_name = 'args'
    axes.stypy_kwargs_param_name = 'kwargs'
    axes.stypy_call_defaults = defaults
    axes.stypy_call_varargs = varargs
    axes.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'axes', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'axes', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'axes(...)' code ##################

    unicode_115834 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 893, (-1)), 'unicode', u"\n    Add an axes to the figure.\n\n    The axes is added at position *rect* specified by:\n\n    - ``axes()`` by itself creates a default full ``subplot(111)`` window axis.\n\n    - ``axes(rect, facecolor='w')`` where *rect* = [left, bottom, width,\n      height] in normalized (0, 1) units.  *facecolor* is the background\n      color for the axis, default white.\n\n    - ``axes(h)`` where *h* is an axes instance makes *h* the current\n      axis and the parent of *h* the current figure.\n      An :class:`~matplotlib.axes.Axes` instance is returned.\n\n    =========   ==============   ==============================================\n    kwarg       Accepts          Description\n    =========   ==============   ==============================================\n    facecolor   color            the axes background color\n    frameon     [True|False]     display the frame?\n    sharex      otherax          current axes shares xaxis attribute\n                                 with otherax\n    sharey      otherax          current axes shares yaxis attribute\n                                 with otherax\n    polar       [True|False]     use a polar axes?\n    aspect      [str | num]      ['equal', 'auto'] or a number.  If a number\n                                 the ratio of x-unit/y-unit in screen-space.\n                                 Also see\n                                 :meth:`~matplotlib.axes.Axes.set_aspect`.\n    =========   ==============   ==============================================\n\n    Examples:\n\n    * :file:`examples/pylab_examples/axes_demo.py` places custom axes.\n    * :file:`examples/pylab_examples/shared_axis_demo.py` uses\n      *sharex* and *sharey*.\n\n    ")
    
    # Assigning a Call to a Name (line 895):
    
    # Assigning a Call to a Name (line 895):
    
    # Call to len(...): (line 895)
    # Processing the call arguments (line 895)
    # Getting the type of 'args' (line 895)
    args_115836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 16), 'args', False)
    # Processing the call keyword arguments (line 895)
    kwargs_115837 = {}
    # Getting the type of 'len' (line 895)
    len_115835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 895, 12), 'len', False)
    # Calling len(args, kwargs) (line 895)
    len_call_result_115838 = invoke(stypy.reporting.localization.Localization(__file__, 895, 12), len_115835, *[args_115836], **kwargs_115837)
    
    # Assigning a type to the variable 'nargs' (line 895)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 895, 4), 'nargs', len_call_result_115838)
    
    
    
    # Call to len(...): (line 896)
    # Processing the call arguments (line 896)
    # Getting the type of 'args' (line 896)
    args_115840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 11), 'args', False)
    # Processing the call keyword arguments (line 896)
    kwargs_115841 = {}
    # Getting the type of 'len' (line 896)
    len_115839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 896, 7), 'len', False)
    # Calling len(args, kwargs) (line 896)
    len_call_result_115842 = invoke(stypy.reporting.localization.Localization(__file__, 896, 7), len_115839, *[args_115840], **kwargs_115841)
    
    int_115843 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 896, 20), 'int')
    # Applying the binary operator '==' (line 896)
    result_eq_115844 = python_operator(stypy.reporting.localization.Localization(__file__, 896, 7), '==', len_call_result_115842, int_115843)
    
    # Testing the type of an if condition (line 896)
    if_condition_115845 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 896, 4), result_eq_115844)
    # Assigning a type to the variable 'if_condition_115845' (line 896)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 896, 4), 'if_condition_115845', if_condition_115845)
    # SSA begins for if statement (line 896)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to subplot(...): (line 897)
    # Processing the call arguments (line 897)
    int_115847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 897, 23), 'int')
    # Processing the call keyword arguments (line 897)
    # Getting the type of 'kwargs' (line 897)
    kwargs_115848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 30), 'kwargs', False)
    kwargs_115849 = {'kwargs_115848': kwargs_115848}
    # Getting the type of 'subplot' (line 897)
    subplot_115846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 897, 15), 'subplot', False)
    # Calling subplot(args, kwargs) (line 897)
    subplot_call_result_115850 = invoke(stypy.reporting.localization.Localization(__file__, 897, 15), subplot_115846, *[int_115847], **kwargs_115849)
    
    # Assigning a type to the variable 'stypy_return_type' (line 897)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 897, 8), 'stypy_return_type', subplot_call_result_115850)
    # SSA join for if statement (line 896)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'nargs' (line 898)
    nargs_115851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 898, 7), 'nargs')
    int_115852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 898, 15), 'int')
    # Applying the binary operator '>' (line 898)
    result_gt_115853 = python_operator(stypy.reporting.localization.Localization(__file__, 898, 7), '>', nargs_115851, int_115852)
    
    # Testing the type of an if condition (line 898)
    if_condition_115854 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 898, 4), result_gt_115853)
    # Assigning a type to the variable 'if_condition_115854' (line 898)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 898, 4), 'if_condition_115854', if_condition_115854)
    # SSA begins for if statement (line 898)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to TypeError(...): (line 899)
    # Processing the call arguments (line 899)
    unicode_115856 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 899, 24), 'unicode', u'Only one non keyword arg to axes allowed')
    # Processing the call keyword arguments (line 899)
    kwargs_115857 = {}
    # Getting the type of 'TypeError' (line 899)
    TypeError_115855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 899, 14), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 899)
    TypeError_call_result_115858 = invoke(stypy.reporting.localization.Localization(__file__, 899, 14), TypeError_115855, *[unicode_115856], **kwargs_115857)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 899, 8), TypeError_call_result_115858, 'raise parameter', BaseException)
    # SSA join for if statement (line 898)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Subscript to a Name (line 900):
    
    # Assigning a Subscript to a Name (line 900):
    
    # Obtaining the type of the subscript
    int_115859 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 900, 15), 'int')
    # Getting the type of 'args' (line 900)
    args_115860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 900, 10), 'args')
    # Obtaining the member '__getitem__' of a type (line 900)
    getitem___115861 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 900, 10), args_115860, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 900)
    subscript_call_result_115862 = invoke(stypy.reporting.localization.Localization(__file__, 900, 10), getitem___115861, int_115859)
    
    # Assigning a type to the variable 'arg' (line 900)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 900, 4), 'arg', subscript_call_result_115862)
    
    
    # Call to isinstance(...): (line 902)
    # Processing the call arguments (line 902)
    # Getting the type of 'arg' (line 902)
    arg_115864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 18), 'arg', False)
    # Getting the type of 'Axes' (line 902)
    Axes_115865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 23), 'Axes', False)
    # Processing the call keyword arguments (line 902)
    kwargs_115866 = {}
    # Getting the type of 'isinstance' (line 902)
    isinstance_115863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 902, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 902)
    isinstance_call_result_115867 = invoke(stypy.reporting.localization.Localization(__file__, 902, 7), isinstance_115863, *[arg_115864, Axes_115865], **kwargs_115866)
    
    # Testing the type of an if condition (line 902)
    if_condition_115868 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 902, 4), isinstance_call_result_115867)
    # Assigning a type to the variable 'if_condition_115868' (line 902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 902, 4), 'if_condition_115868', if_condition_115868)
    # SSA begins for if statement (line 902)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sca(...): (line 903)
    # Processing the call arguments (line 903)
    # Getting the type of 'arg' (line 903)
    arg_115870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 12), 'arg', False)
    # Processing the call keyword arguments (line 903)
    kwargs_115871 = {}
    # Getting the type of 'sca' (line 903)
    sca_115869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 903, 8), 'sca', False)
    # Calling sca(args, kwargs) (line 903)
    sca_call_result_115872 = invoke(stypy.reporting.localization.Localization(__file__, 903, 8), sca_115869, *[arg_115870], **kwargs_115871)
    
    
    # Assigning a Name to a Name (line 904):
    
    # Assigning a Name to a Name (line 904):
    # Getting the type of 'arg' (line 904)
    arg_115873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 904, 12), 'arg')
    # Assigning a type to the variable 'a' (line 904)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 904, 8), 'a', arg_115873)
    # SSA branch for the else part of an if statement (line 902)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Name to a Name (line 906):
    
    # Assigning a Name to a Name (line 906):
    # Getting the type of 'arg' (line 906)
    arg_115874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 906, 15), 'arg')
    # Assigning a type to the variable 'rect' (line 906)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 906, 8), 'rect', arg_115874)
    
    # Assigning a Call to a Name (line 907):
    
    # Assigning a Call to a Name (line 907):
    
    # Call to add_axes(...): (line 907)
    # Processing the call arguments (line 907)
    # Getting the type of 'rect' (line 907)
    rect_115879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 27), 'rect', False)
    # Processing the call keyword arguments (line 907)
    # Getting the type of 'kwargs' (line 907)
    kwargs_115880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 35), 'kwargs', False)
    kwargs_115881 = {'kwargs_115880': kwargs_115880}
    
    # Call to gcf(...): (line 907)
    # Processing the call keyword arguments (line 907)
    kwargs_115876 = {}
    # Getting the type of 'gcf' (line 907)
    gcf_115875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 907, 12), 'gcf', False)
    # Calling gcf(args, kwargs) (line 907)
    gcf_call_result_115877 = invoke(stypy.reporting.localization.Localization(__file__, 907, 12), gcf_115875, *[], **kwargs_115876)
    
    # Obtaining the member 'add_axes' of a type (line 907)
    add_axes_115878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 907, 12), gcf_call_result_115877, 'add_axes')
    # Calling add_axes(args, kwargs) (line 907)
    add_axes_call_result_115882 = invoke(stypy.reporting.localization.Localization(__file__, 907, 12), add_axes_115878, *[rect_115879], **kwargs_115881)
    
    # Assigning a type to the variable 'a' (line 907)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 907, 8), 'a', add_axes_call_result_115882)
    # SSA join for if statement (line 902)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'a' (line 908)
    a_115883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 908, 11), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 908)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 908, 4), 'stypy_return_type', a_115883)
    
    # ################# End of 'axes(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'axes' in the type store
    # Getting the type of 'stypy_return_type' (line 855)
    stypy_return_type_115884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 855, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115884)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'axes'
    return stypy_return_type_115884

# Assigning a type to the variable 'axes' (line 855)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 855, 0), 'axes', axes)

@norecursion
def delaxes(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'delaxes'
    module_type_store = module_type_store.open_function_context('delaxes', 911, 0, False)
    
    # Passed parameters checking function
    delaxes.stypy_localization = localization
    delaxes.stypy_type_of_self = None
    delaxes.stypy_type_store = module_type_store
    delaxes.stypy_function_name = 'delaxes'
    delaxes.stypy_param_names_list = []
    delaxes.stypy_varargs_param_name = 'args'
    delaxes.stypy_kwargs_param_name = None
    delaxes.stypy_call_defaults = defaults
    delaxes.stypy_call_varargs = varargs
    delaxes.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'delaxes', [], 'args', None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'delaxes', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'delaxes(...)' code ##################

    unicode_115885 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 917, (-1)), 'unicode', u"\n    Remove an axes from the current figure.  If *ax*\n    doesn't exist, an error will be raised.\n\n    ``delaxes()``: delete the current axes\n    ")
    
    
    
    # Call to len(...): (line 918)
    # Processing the call arguments (line 918)
    # Getting the type of 'args' (line 918)
    args_115887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 15), 'args', False)
    # Processing the call keyword arguments (line 918)
    kwargs_115888 = {}
    # Getting the type of 'len' (line 918)
    len_115886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 918, 11), 'len', False)
    # Calling len(args, kwargs) (line 918)
    len_call_result_115889 = invoke(stypy.reporting.localization.Localization(__file__, 918, 11), len_115886, *[args_115887], **kwargs_115888)
    
    # Applying the 'not' unary operator (line 918)
    result_not__115890 = python_operator(stypy.reporting.localization.Localization(__file__, 918, 7), 'not', len_call_result_115889)
    
    # Testing the type of an if condition (line 918)
    if_condition_115891 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 918, 4), result_not__115890)
    # Assigning a type to the variable 'if_condition_115891' (line 918)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 918, 4), 'if_condition_115891', if_condition_115891)
    # SSA begins for if statement (line 918)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 919):
    
    # Assigning a Call to a Name (line 919):
    
    # Call to gca(...): (line 919)
    # Processing the call keyword arguments (line 919)
    kwargs_115893 = {}
    # Getting the type of 'gca' (line 919)
    gca_115892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 919, 13), 'gca', False)
    # Calling gca(args, kwargs) (line 919)
    gca_call_result_115894 = invoke(stypy.reporting.localization.Localization(__file__, 919, 13), gca_115892, *[], **kwargs_115893)
    
    # Assigning a type to the variable 'ax' (line 919)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 919, 8), 'ax', gca_call_result_115894)
    # SSA branch for the else part of an if statement (line 918)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Subscript to a Name (line 921):
    
    # Assigning a Subscript to a Name (line 921):
    
    # Obtaining the type of the subscript
    int_115895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 921, 18), 'int')
    # Getting the type of 'args' (line 921)
    args_115896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 921, 13), 'args')
    # Obtaining the member '__getitem__' of a type (line 921)
    getitem___115897 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 921, 13), args_115896, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 921)
    subscript_call_result_115898 = invoke(stypy.reporting.localization.Localization(__file__, 921, 13), getitem___115897, int_115895)
    
    # Assigning a type to the variable 'ax' (line 921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 921, 8), 'ax', subscript_call_result_115898)
    # SSA join for if statement (line 918)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 922):
    
    # Assigning a Call to a Name (line 922):
    
    # Call to delaxes(...): (line 922)
    # Processing the call arguments (line 922)
    # Getting the type of 'ax' (line 922)
    ax_115903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 24), 'ax', False)
    # Processing the call keyword arguments (line 922)
    kwargs_115904 = {}
    
    # Call to gcf(...): (line 922)
    # Processing the call keyword arguments (line 922)
    kwargs_115900 = {}
    # Getting the type of 'gcf' (line 922)
    gcf_115899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 922, 10), 'gcf', False)
    # Calling gcf(args, kwargs) (line 922)
    gcf_call_result_115901 = invoke(stypy.reporting.localization.Localization(__file__, 922, 10), gcf_115899, *[], **kwargs_115900)
    
    # Obtaining the member 'delaxes' of a type (line 922)
    delaxes_115902 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 922, 10), gcf_call_result_115901, 'delaxes')
    # Calling delaxes(args, kwargs) (line 922)
    delaxes_call_result_115905 = invoke(stypy.reporting.localization.Localization(__file__, 922, 10), delaxes_115902, *[ax_115903], **kwargs_115904)
    
    # Assigning a type to the variable 'ret' (line 922)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 922, 4), 'ret', delaxes_call_result_115905)
    # Getting the type of 'ret' (line 923)
    ret_115906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 923, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 923)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 923, 4), 'stypy_return_type', ret_115906)
    
    # ################# End of 'delaxes(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'delaxes' in the type store
    # Getting the type of 'stypy_return_type' (line 911)
    stypy_return_type_115907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 911, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115907)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'delaxes'
    return stypy_return_type_115907

# Assigning a type to the variable 'delaxes' (line 911)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 911, 0), 'delaxes', delaxes)

@norecursion
def sca(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'sca'
    module_type_store = module_type_store.open_function_context('sca', 926, 0, False)
    
    # Passed parameters checking function
    sca.stypy_localization = localization
    sca.stypy_type_of_self = None
    sca.stypy_type_store = module_type_store
    sca.stypy_function_name = 'sca'
    sca.stypy_param_names_list = ['ax']
    sca.stypy_varargs_param_name = None
    sca.stypy_kwargs_param_name = None
    sca.stypy_call_defaults = defaults
    sca.stypy_call_varargs = varargs
    sca.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'sca', ['ax'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'sca', localization, ['ax'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'sca(...)' code ##################

    unicode_115908 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 931, (-1)), 'unicode', u'\n    Set the current Axes instance to *ax*.\n\n    The current Figure is updated to the parent of *ax*.\n    ')
    
    # Assigning a Call to a Name (line 932):
    
    # Assigning a Call to a Name (line 932):
    
    # Call to get_all_fig_managers(...): (line 932)
    # Processing the call keyword arguments (line 932)
    kwargs_115912 = {}
    # Getting the type of '_pylab_helpers' (line 932)
    _pylab_helpers_115909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 932, 15), '_pylab_helpers', False)
    # Obtaining the member 'Gcf' of a type (line 932)
    Gcf_115910 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 15), _pylab_helpers_115909, 'Gcf')
    # Obtaining the member 'get_all_fig_managers' of a type (line 932)
    get_all_fig_managers_115911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 932, 15), Gcf_115910, 'get_all_fig_managers')
    # Calling get_all_fig_managers(args, kwargs) (line 932)
    get_all_fig_managers_call_result_115913 = invoke(stypy.reporting.localization.Localization(__file__, 932, 15), get_all_fig_managers_115911, *[], **kwargs_115912)
    
    # Assigning a type to the variable 'managers' (line 932)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 932, 4), 'managers', get_all_fig_managers_call_result_115913)
    
    # Getting the type of 'managers' (line 933)
    managers_115914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 933, 13), 'managers')
    # Testing the type of a for loop iterable (line 933)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 933, 4), managers_115914)
    # Getting the type of the for loop variable (line 933)
    for_loop_var_115915 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 933, 4), managers_115914)
    # Assigning a type to the variable 'm' (line 933)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 933, 4), 'm', for_loop_var_115915)
    # SSA begins for a for statement (line 933)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'ax' (line 934)
    ax_115916 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 11), 'ax')
    # Getting the type of 'm' (line 934)
    m_115917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 934, 17), 'm')
    # Obtaining the member 'canvas' of a type (line 934)
    canvas_115918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 17), m_115917, 'canvas')
    # Obtaining the member 'figure' of a type (line 934)
    figure_115919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 17), canvas_115918, 'figure')
    # Obtaining the member 'axes' of a type (line 934)
    axes_115920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 934, 17), figure_115919, 'axes')
    # Applying the binary operator 'in' (line 934)
    result_contains_115921 = python_operator(stypy.reporting.localization.Localization(__file__, 934, 11), 'in', ax_115916, axes_115920)
    
    # Testing the type of an if condition (line 934)
    if_condition_115922 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 934, 8), result_contains_115921)
    # Assigning a type to the variable 'if_condition_115922' (line 934)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 934, 8), 'if_condition_115922', if_condition_115922)
    # SSA begins for if statement (line 934)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_active(...): (line 935)
    # Processing the call arguments (line 935)
    # Getting the type of 'm' (line 935)
    m_115926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 42), 'm', False)
    # Processing the call keyword arguments (line 935)
    kwargs_115927 = {}
    # Getting the type of '_pylab_helpers' (line 935)
    _pylab_helpers_115923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 935, 12), '_pylab_helpers', False)
    # Obtaining the member 'Gcf' of a type (line 935)
    Gcf_115924 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 12), _pylab_helpers_115923, 'Gcf')
    # Obtaining the member 'set_active' of a type (line 935)
    set_active_115925 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 935, 12), Gcf_115924, 'set_active')
    # Calling set_active(args, kwargs) (line 935)
    set_active_call_result_115928 = invoke(stypy.reporting.localization.Localization(__file__, 935, 12), set_active_115925, *[m_115926], **kwargs_115927)
    
    
    # Call to sca(...): (line 936)
    # Processing the call arguments (line 936)
    # Getting the type of 'ax' (line 936)
    ax_115933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 32), 'ax', False)
    # Processing the call keyword arguments (line 936)
    kwargs_115934 = {}
    # Getting the type of 'm' (line 936)
    m_115929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 936, 12), 'm', False)
    # Obtaining the member 'canvas' of a type (line 936)
    canvas_115930 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 12), m_115929, 'canvas')
    # Obtaining the member 'figure' of a type (line 936)
    figure_115931 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 12), canvas_115930, 'figure')
    # Obtaining the member 'sca' of a type (line 936)
    sca_115932 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 936, 12), figure_115931, 'sca')
    # Calling sca(args, kwargs) (line 936)
    sca_call_result_115935 = invoke(stypy.reporting.localization.Localization(__file__, 936, 12), sca_115932, *[ax_115933], **kwargs_115934)
    
    # Assigning a type to the variable 'stypy_return_type' (line 937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 937, 12), 'stypy_return_type', types.NoneType)
    # SSA join for if statement (line 934)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to ValueError(...): (line 938)
    # Processing the call arguments (line 938)
    unicode_115937 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 938, 21), 'unicode', u'Axes instance argument was not found in a figure.')
    # Processing the call keyword arguments (line 938)
    kwargs_115938 = {}
    # Getting the type of 'ValueError' (line 938)
    ValueError_115936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 938, 10), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 938)
    ValueError_call_result_115939 = invoke(stypy.reporting.localization.Localization(__file__, 938, 10), ValueError_115936, *[unicode_115937], **kwargs_115938)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 938, 4), ValueError_call_result_115939, 'raise parameter', BaseException)
    
    # ################# End of 'sca(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'sca' in the type store
    # Getting the type of 'stypy_return_type' (line 926)
    stypy_return_type_115940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 926, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115940)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'sca'
    return stypy_return_type_115940

# Assigning a type to the variable 'sca' (line 926)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 926, 0), 'sca', sca)

@norecursion
def gca(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'gca'
    module_type_store = module_type_store.open_function_context('gca', 941, 0, False)
    
    # Passed parameters checking function
    gca.stypy_localization = localization
    gca.stypy_type_of_self = None
    gca.stypy_type_store = module_type_store
    gca.stypy_function_name = 'gca'
    gca.stypy_param_names_list = []
    gca.stypy_varargs_param_name = None
    gca.stypy_kwargs_param_name = 'kwargs'
    gca.stypy_call_defaults = defaults
    gca.stypy_call_varargs = varargs
    gca.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'gca', [], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'gca', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'gca(...)' code ##################

    unicode_115941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 958, (-1)), 'unicode', u"\n    Get the current :class:`~matplotlib.axes.Axes` instance on the\n    current figure matching the given keyword args, or create one.\n\n    Examples\n    --------\n    To get the current polar axes on the current figure::\n\n        plt.gca(projection='polar')\n\n    If the current axes doesn't exist, or isn't a polar one, the appropriate\n    axes will be created and then returned.\n\n    See Also\n    --------\n    matplotlib.figure.Figure.gca : The figure's gca method.\n    ")
    
    # Call to gca(...): (line 959)
    # Processing the call keyword arguments (line 959)
    # Getting the type of 'kwargs' (line 959)
    kwargs_115946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 23), 'kwargs', False)
    kwargs_115947 = {'kwargs_115946': kwargs_115946}
    
    # Call to gcf(...): (line 959)
    # Processing the call keyword arguments (line 959)
    kwargs_115943 = {}
    # Getting the type of 'gcf' (line 959)
    gcf_115942 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 959, 11), 'gcf', False)
    # Calling gcf(args, kwargs) (line 959)
    gcf_call_result_115944 = invoke(stypy.reporting.localization.Localization(__file__, 959, 11), gcf_115942, *[], **kwargs_115943)
    
    # Obtaining the member 'gca' of a type (line 959)
    gca_115945 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 959, 11), gcf_call_result_115944, 'gca')
    # Calling gca(args, kwargs) (line 959)
    gca_call_result_115948 = invoke(stypy.reporting.localization.Localization(__file__, 959, 11), gca_115945, *[], **kwargs_115947)
    
    # Assigning a type to the variable 'stypy_return_type' (line 959)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 959, 4), 'stypy_return_type', gca_call_result_115948)
    
    # ################# End of 'gca(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'gca' in the type store
    # Getting the type of 'stypy_return_type' (line 941)
    stypy_return_type_115949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 941, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_115949)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'gca'
    return stypy_return_type_115949

# Assigning a type to the variable 'gca' (line 941)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 941, 0), 'gca', gca)

@norecursion
def subplot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'subplot'
    module_type_store = module_type_store.open_function_context('subplot', 964, 0, False)
    
    # Passed parameters checking function
    subplot.stypy_localization = localization
    subplot.stypy_type_of_self = None
    subplot.stypy_type_store = module_type_store
    subplot.stypy_function_name = 'subplot'
    subplot.stypy_param_names_list = []
    subplot.stypy_varargs_param_name = 'args'
    subplot.stypy_kwargs_param_name = 'kwargs'
    subplot.stypy_call_defaults = defaults
    subplot.stypy_call_varargs = varargs
    subplot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'subplot', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'subplot', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'subplot(...)' code ##################

    unicode_115950 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1037, (-1)), 'unicode', u"\n    Return a subplot axes positioned by the given grid definition.\n\n    Typical call signature::\n\n      subplot(nrows, ncols, plot_number)\n\n    Where *nrows* and *ncols* are used to notionally split the figure\n    into ``nrows * ncols`` sub-axes, and *plot_number* is used to identify\n    the particular subplot that this function is to create within the notional\n    grid. *plot_number* starts at 1, increments across rows first and has a\n    maximum of ``nrows * ncols``.\n\n    In the case when *nrows*, *ncols* and *plot_number* are all less than 10,\n    a convenience exists, such that the a 3 digit number can be given instead,\n    where the hundreds represent *nrows*, the tens represent *ncols* and the\n    units represent *plot_number*. For instance::\n\n      subplot(211)\n\n    produces a subaxes in a figure which represents the top plot (i.e. the\n    first) in a 2 row by 1 column notional grid (no grid actually exists,\n    but conceptually this is how the returned subplot has been positioned).\n\n    .. note::\n\n       Creating a subplot will delete any pre-existing subplot that overlaps\n       with it beyond sharing a boundary::\n\n          import matplotlib.pyplot as plt\n          # plot a line, implicitly creating a subplot(111)\n          plt.plot([1,2,3])\n          # now create a subplot which represents the top plot of a grid\n          # with 2 rows and 1 column. Since this subplot will overlap the\n          # first, the plot (and its axes) previously created, will be removed\n          plt.subplot(211)\n          plt.plot(range(12))\n          plt.subplot(212, facecolor='y') # creates 2nd subplot with yellow background\n\n       If you do not want this behavior, use the\n       :meth:`~matplotlib.figure.Figure.add_subplot` method or the\n       :func:`~matplotlib.pyplot.axes` function instead.\n\n    Keyword arguments:\n\n      *facecolor*:\n        The background color of the subplot, which can be any valid\n        color specifier.  See :mod:`matplotlib.colors` for more\n        information.\n\n      *polar*:\n        A boolean flag indicating whether the subplot plot should be\n        a polar projection.  Defaults to *False*.\n\n      *projection*:\n        A string giving the name of a custom projection to be used\n        for the subplot. This projection must have been previously\n        registered. See :mod:`matplotlib.projections`.\n\n    .. seealso::\n\n        :func:`~matplotlib.pyplot.axes`\n            For additional information on :func:`axes` and\n            :func:`subplot` keyword arguments.\n\n        :file:`gallery/pie_and_polar_charts/polar_scatter.py`\n            For an example\n\n    **Example:**\n\n    .. plot:: gallery/subplots_axes_and_figures/subplot.py\n\n    ")
    
    
    
    # Call to len(...): (line 1039)
    # Processing the call arguments (line 1039)
    # Getting the type of 'args' (line 1039)
    args_115952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 11), 'args', False)
    # Processing the call keyword arguments (line 1039)
    kwargs_115953 = {}
    # Getting the type of 'len' (line 1039)
    len_115951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1039, 7), 'len', False)
    # Calling len(args, kwargs) (line 1039)
    len_call_result_115954 = invoke(stypy.reporting.localization.Localization(__file__, 1039, 7), len_115951, *[args_115952], **kwargs_115953)
    
    int_115955 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1039, 18), 'int')
    # Applying the binary operator '==' (line 1039)
    result_eq_115956 = python_operator(stypy.reporting.localization.Localization(__file__, 1039, 7), '==', len_call_result_115954, int_115955)
    
    # Testing the type of an if condition (line 1039)
    if_condition_115957 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1039, 4), result_eq_115956)
    # Assigning a type to the variable 'if_condition_115957' (line 1039)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1039, 4), 'if_condition_115957', if_condition_115957)
    # SSA begins for if statement (line 1039)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Tuple to a Name (line 1040):
    
    # Assigning a Tuple to a Name (line 1040):
    
    # Obtaining an instance of the builtin type 'tuple' (line 1040)
    tuple_115958 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 14), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1040)
    # Adding element type (line 1040)
    int_115959 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 14), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1040, 14), tuple_115958, int_115959)
    # Adding element type (line 1040)
    int_115960 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 16), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1040, 14), tuple_115958, int_115960)
    # Adding element type (line 1040)
    int_115961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1040, 18), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1040, 14), tuple_115958, int_115961)
    
    # Assigning a type to the variable 'args' (line 1040)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1040, 8), 'args', tuple_115958)
    # SSA join for if statement (line 1039)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    
    # Call to len(...): (line 1048)
    # Processing the call arguments (line 1048)
    # Getting the type of 'args' (line 1048)
    args_115963 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 11), 'args', False)
    # Processing the call keyword arguments (line 1048)
    kwargs_115964 = {}
    # Getting the type of 'len' (line 1048)
    len_115962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 7), 'len', False)
    # Calling len(args, kwargs) (line 1048)
    len_call_result_115965 = invoke(stypy.reporting.localization.Localization(__file__, 1048, 7), len_115962, *[args_115963], **kwargs_115964)
    
    int_115966 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 20), 'int')
    # Applying the binary operator '>=' (line 1048)
    result_ge_115967 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 7), '>=', len_call_result_115965, int_115966)
    
    
    # Call to isinstance(...): (line 1048)
    # Processing the call arguments (line 1048)
    
    # Obtaining the type of the subscript
    int_115969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1048, 42), 'int')
    # Getting the type of 'args' (line 1048)
    args_115970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 37), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1048)
    getitem___115971 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1048, 37), args_115970, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1048)
    subscript_call_result_115972 = invoke(stypy.reporting.localization.Localization(__file__, 1048, 37), getitem___115971, int_115969)
    
    # Getting the type of 'bool' (line 1048)
    bool_115973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 46), 'bool', False)
    # Processing the call keyword arguments (line 1048)
    kwargs_115974 = {}
    # Getting the type of 'isinstance' (line 1048)
    isinstance_115968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1048, 26), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1048)
    isinstance_call_result_115975 = invoke(stypy.reporting.localization.Localization(__file__, 1048, 26), isinstance_115968, *[subscript_call_result_115972, bool_115973], **kwargs_115974)
    
    # Applying the binary operator 'and' (line 1048)
    result_and_keyword_115976 = python_operator(stypy.reporting.localization.Localization(__file__, 1048, 7), 'and', result_ge_115967, isinstance_call_result_115975)
    
    # Testing the type of an if condition (line 1048)
    if_condition_115977 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1048, 4), result_and_keyword_115976)
    # Assigning a type to the variable 'if_condition_115977' (line 1048)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1048, 4), 'if_condition_115977', if_condition_115977)
    # SSA begins for if statement (line 1048)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 1049)
    # Processing the call arguments (line 1049)
    unicode_115980 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1049, 22), 'unicode', u'The subplot index argument to subplot() appears to be a boolean. Did you intend to use subplots()?')
    # Processing the call keyword arguments (line 1049)
    kwargs_115981 = {}
    # Getting the type of 'warnings' (line 1049)
    warnings_115978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1049, 8), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 1049)
    warn_115979 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1049, 8), warnings_115978, 'warn')
    # Calling warn(args, kwargs) (line 1049)
    warn_call_result_115982 = invoke(stypy.reporting.localization.Localization(__file__, 1049, 8), warn_115979, *[unicode_115980], **kwargs_115981)
    
    # SSA join for if statement (line 1048)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1052):
    
    # Assigning a Call to a Name (line 1052):
    
    # Call to gcf(...): (line 1052)
    # Processing the call keyword arguments (line 1052)
    kwargs_115984 = {}
    # Getting the type of 'gcf' (line 1052)
    gcf_115983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1052, 10), 'gcf', False)
    # Calling gcf(args, kwargs) (line 1052)
    gcf_call_result_115985 = invoke(stypy.reporting.localization.Localization(__file__, 1052, 10), gcf_115983, *[], **kwargs_115984)
    
    # Assigning a type to the variable 'fig' (line 1052)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1052, 4), 'fig', gcf_call_result_115985)
    
    # Assigning a Call to a Name (line 1053):
    
    # Assigning a Call to a Name (line 1053):
    
    # Call to add_subplot(...): (line 1053)
    # Getting the type of 'args' (line 1053)
    args_115988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 25), 'args', False)
    # Processing the call keyword arguments (line 1053)
    # Getting the type of 'kwargs' (line 1053)
    kwargs_115989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 33), 'kwargs', False)
    kwargs_115990 = {'kwargs_115989': kwargs_115989}
    # Getting the type of 'fig' (line 1053)
    fig_115986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1053, 8), 'fig', False)
    # Obtaining the member 'add_subplot' of a type (line 1053)
    add_subplot_115987 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1053, 8), fig_115986, 'add_subplot')
    # Calling add_subplot(args, kwargs) (line 1053)
    add_subplot_call_result_115991 = invoke(stypy.reporting.localization.Localization(__file__, 1053, 8), add_subplot_115987, *[args_115988], **kwargs_115990)
    
    # Assigning a type to the variable 'a' (line 1053)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1053, 4), 'a', add_subplot_call_result_115991)
    
    # Assigning a Attribute to a Name (line 1054):
    
    # Assigning a Attribute to a Name (line 1054):
    # Getting the type of 'a' (line 1054)
    a_115992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1054, 11), 'a')
    # Obtaining the member 'bbox' of a type (line 1054)
    bbox_115993 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1054, 11), a_115992, 'bbox')
    # Assigning a type to the variable 'bbox' (line 1054)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1054, 4), 'bbox', bbox_115993)
    
    # Assigning a List to a Name (line 1055):
    
    # Assigning a List to a Name (line 1055):
    
    # Obtaining an instance of the builtin type 'list' (line 1055)
    list_115994 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1055, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1055)
    
    # Assigning a type to the variable 'byebye' (line 1055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1055, 4), 'byebye', list_115994)
    
    # Getting the type of 'fig' (line 1056)
    fig_115995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1056, 17), 'fig')
    # Obtaining the member 'axes' of a type (line 1056)
    axes_115996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1056, 17), fig_115995, 'axes')
    # Testing the type of a for loop iterable (line 1056)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1056, 4), axes_115996)
    # Getting the type of the for loop variable (line 1056)
    for_loop_var_115997 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1056, 4), axes_115996)
    # Assigning a type to the variable 'other' (line 1056)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1056, 4), 'other', for_loop_var_115997)
    # SSA begins for a for statement (line 1056)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'other' (line 1057)
    other_115998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 11), 'other')
    # Getting the type of 'a' (line 1057)
    a_115999 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1057, 18), 'a')
    # Applying the binary operator '==' (line 1057)
    result_eq_116000 = python_operator(stypy.reporting.localization.Localization(__file__, 1057, 11), '==', other_115998, a_115999)
    
    # Testing the type of an if condition (line 1057)
    if_condition_116001 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1057, 8), result_eq_116000)
    # Assigning a type to the variable 'if_condition_116001' (line 1057)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1057, 8), 'if_condition_116001', if_condition_116001)
    # SSA begins for if statement (line 1057)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1057)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to fully_overlaps(...): (line 1058)
    # Processing the call arguments (line 1058)
    # Getting the type of 'other' (line 1058)
    other_116004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 31), 'other', False)
    # Obtaining the member 'bbox' of a type (line 1058)
    bbox_116005 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1058, 31), other_116004, 'bbox')
    # Processing the call keyword arguments (line 1058)
    kwargs_116006 = {}
    # Getting the type of 'bbox' (line 1058)
    bbox_116002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1058, 11), 'bbox', False)
    # Obtaining the member 'fully_overlaps' of a type (line 1058)
    fully_overlaps_116003 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1058, 11), bbox_116002, 'fully_overlaps')
    # Calling fully_overlaps(args, kwargs) (line 1058)
    fully_overlaps_call_result_116007 = invoke(stypy.reporting.localization.Localization(__file__, 1058, 11), fully_overlaps_116003, *[bbox_116005], **kwargs_116006)
    
    # Testing the type of an if condition (line 1058)
    if_condition_116008 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1058, 8), fully_overlaps_call_result_116007)
    # Assigning a type to the variable 'if_condition_116008' (line 1058)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1058, 8), 'if_condition_116008', if_condition_116008)
    # SSA begins for if statement (line 1058)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 1059)
    # Processing the call arguments (line 1059)
    # Getting the type of 'other' (line 1059)
    other_116011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 26), 'other', False)
    # Processing the call keyword arguments (line 1059)
    kwargs_116012 = {}
    # Getting the type of 'byebye' (line 1059)
    byebye_116009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1059, 12), 'byebye', False)
    # Obtaining the member 'append' of a type (line 1059)
    append_116010 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1059, 12), byebye_116009, 'append')
    # Calling append(args, kwargs) (line 1059)
    append_call_result_116013 = invoke(stypy.reporting.localization.Localization(__file__, 1059, 12), append_116010, *[other_116011], **kwargs_116012)
    
    # SSA join for if statement (line 1058)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'byebye' (line 1060)
    byebye_116014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 14), 'byebye')
    # Testing the type of a for loop iterable (line 1060)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1060, 4), byebye_116014)
    # Getting the type of the for loop variable (line 1060)
    for_loop_var_116015 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1060, 4), byebye_116014)
    # Assigning a type to the variable 'ax' (line 1060)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1060, 4), 'ax', for_loop_var_116015)
    # SSA begins for a for statement (line 1060)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to delaxes(...): (line 1060)
    # Processing the call arguments (line 1060)
    # Getting the type of 'ax' (line 1060)
    ax_116017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 30), 'ax', False)
    # Processing the call keyword arguments (line 1060)
    kwargs_116018 = {}
    # Getting the type of 'delaxes' (line 1060)
    delaxes_116016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1060, 22), 'delaxes', False)
    # Calling delaxes(args, kwargs) (line 1060)
    delaxes_call_result_116019 = invoke(stypy.reporting.localization.Localization(__file__, 1060, 22), delaxes_116016, *[ax_116017], **kwargs_116018)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'a' (line 1062)
    a_116020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1062, 11), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 1062)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1062, 4), 'stypy_return_type', a_116020)
    
    # ################# End of 'subplot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'subplot' in the type store
    # Getting the type of 'stypy_return_type' (line 964)
    stypy_return_type_116021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 964, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116021)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'subplot'
    return stypy_return_type_116021

# Assigning a type to the variable 'subplot' (line 964)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 964, 0), 'subplot', subplot)

@norecursion
def subplots(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_116022 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, 19), 'int')
    int_116023 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1065, 28), 'int')
    # Getting the type of 'False' (line 1065)
    False_116024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 38), 'False')
    # Getting the type of 'False' (line 1065)
    False_116025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 52), 'False')
    # Getting the type of 'True' (line 1065)
    True_116026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 67), 'True')
    # Getting the type of 'None' (line 1066)
    None_116027 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 24), 'None')
    # Getting the type of 'None' (line 1066)
    None_116028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1066, 42), 'None')
    defaults = [int_116022, int_116023, False_116024, False_116025, True_116026, None_116027, None_116028]
    # Create a new context for function 'subplots'
    module_type_store = module_type_store.open_function_context('subplots', 1065, 0, False)
    
    # Passed parameters checking function
    subplots.stypy_localization = localization
    subplots.stypy_type_of_self = None
    subplots.stypy_type_store = module_type_store
    subplots.stypy_function_name = 'subplots'
    subplots.stypy_param_names_list = ['nrows', 'ncols', 'sharex', 'sharey', 'squeeze', 'subplot_kw', 'gridspec_kw']
    subplots.stypy_varargs_param_name = None
    subplots.stypy_kwargs_param_name = 'fig_kw'
    subplots.stypy_call_defaults = defaults
    subplots.stypy_call_varargs = varargs
    subplots.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'subplots', ['nrows', 'ncols', 'sharex', 'sharey', 'squeeze', 'subplot_kw', 'gridspec_kw'], None, 'fig_kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'subplots', localization, ['nrows', 'ncols', 'sharex', 'sharey', 'squeeze', 'subplot_kw', 'gridspec_kw'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'subplots(...)' code ##################

    unicode_116029 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1178, (-1)), 'unicode', u"\n    Create a figure and a set of subplots\n\n    This utility wrapper makes it convenient to create common layouts of\n    subplots, including the enclosing figure object, in a single call.\n\n    Parameters\n    ----------\n    nrows, ncols : int, optional, default: 1\n        Number of rows/columns of the subplot grid.\n\n    sharex, sharey : bool or {'none', 'all', 'row', 'col'}, default: False\n        Controls sharing of properties among x (`sharex`) or y (`sharey`)\n        axes:\n\n            - True or 'all': x- or y-axis will be shared among all\n              subplots.\n            - False or 'none': each subplot x- or y-axis will be\n              independent.\n            - 'row': each subplot row will share an x- or y-axis.\n            - 'col': each subplot column will share an x- or y-axis.\n\n        When subplots have a shared x-axis along a column, only the x tick\n        labels of the bottom subplot are visible.  Similarly, when subplots\n        have a shared y-axis along a row, only the y tick labels of the first\n        column subplot are visible.\n\n    squeeze : bool, optional, default: True\n        - If True, extra dimensions are squeezed out from the returned Axes\n          object:\n\n            - if only one subplot is constructed (nrows=ncols=1), the\n              resulting single Axes object is returned as a scalar.\n            - for Nx1 or 1xN subplots, the returned object is a 1D numpy\n              object array of Axes objects are returned as numpy 1D arrays.\n            - for NxM, subplots with N>1 and M>1 are returned as a 2D arrays.\n\n        - If False, no squeezing at all is done: the returned Axes object is\n          always a 2D array containing Axes instances, even if it ends up\n          being 1x1.\n\n    subplot_kw : dict, optional\n        Dict with keywords passed to the\n        :meth:`~matplotlib.figure.Figure.add_subplot` call used to create each\n        subplot.\n\n    gridspec_kw : dict, optional\n        Dict with keywords passed to the\n        :class:`~matplotlib.gridspec.GridSpec` constructor used to create the\n        grid the subplots are placed on.\n\n    **fig_kw :\n        All additional keyword arguments are passed to the :func:`figure` call.\n\n    Returns\n    -------\n    fig : :class:`matplotlib.figure.Figure` object\n\n    ax : Axes object or array of Axes objects.\n\n        ax can be either a single :class:`matplotlib.axes.Axes` object or an\n        array of Axes objects if more than one subplot was created.  The\n        dimensions of the resulting array can be controlled with the squeeze\n        keyword, see above.\n\n    Examples\n    --------\n    First create some toy data:\n\n    >>> x = np.linspace(0, 2*np.pi, 400)\n    >>> y = np.sin(x**2)\n\n    Creates just a figure and only one subplot\n\n    >>> fig, ax = plt.subplots()\n    >>> ax.plot(x, y)\n    >>> ax.set_title('Simple plot')\n\n    Creates two subplots and unpacks the output array immediately\n\n    >>> f, (ax1, ax2) = plt.subplots(1, 2, sharey=True)\n    >>> ax1.plot(x, y)\n    >>> ax1.set_title('Sharing Y axis')\n    >>> ax2.scatter(x, y)\n\n    Creates four polar axes, and accesses them through the returned array\n\n    >>> fig, axes = plt.subplots(2, 2, subplot_kw=dict(polar=True))\n    >>> axes[0, 0].plot(x, y)\n    >>> axes[1, 1].scatter(x, y)\n\n    Share a X axis with each column of subplots\n\n    >>> plt.subplots(2, 2, sharex='col')\n\n    Share a Y axis with each row of subplots\n\n    >>> plt.subplots(2, 2, sharey='row')\n\n    Share both X and Y axes with all subplots\n\n    >>> plt.subplots(2, 2, sharex='all', sharey='all')\n\n    Note that this is the same as\n\n    >>> plt.subplots(2, 2, sharex=True, sharey=True)\n\n    See Also\n    --------\n    figure\n    subplot\n    ")
    
    # Assigning a Call to a Name (line 1179):
    
    # Assigning a Call to a Name (line 1179):
    
    # Call to figure(...): (line 1179)
    # Processing the call keyword arguments (line 1179)
    # Getting the type of 'fig_kw' (line 1179)
    fig_kw_116031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 19), 'fig_kw', False)
    kwargs_116032 = {'fig_kw_116031': fig_kw_116031}
    # Getting the type of 'figure' (line 1179)
    figure_116030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1179, 10), 'figure', False)
    # Calling figure(args, kwargs) (line 1179)
    figure_call_result_116033 = invoke(stypy.reporting.localization.Localization(__file__, 1179, 10), figure_116030, *[], **kwargs_116032)
    
    # Assigning a type to the variable 'fig' (line 1179)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1179, 4), 'fig', figure_call_result_116033)
    
    # Assigning a Call to a Name (line 1180):
    
    # Assigning a Call to a Name (line 1180):
    
    # Call to subplots(...): (line 1180)
    # Processing the call keyword arguments (line 1180)
    # Getting the type of 'nrows' (line 1180)
    nrows_116036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 29), 'nrows', False)
    keyword_116037 = nrows_116036
    # Getting the type of 'ncols' (line 1180)
    ncols_116038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 42), 'ncols', False)
    keyword_116039 = ncols_116038
    # Getting the type of 'sharex' (line 1180)
    sharex_116040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 56), 'sharex', False)
    keyword_116041 = sharex_116040
    # Getting the type of 'sharey' (line 1180)
    sharey_116042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 71), 'sharey', False)
    keyword_116043 = sharey_116042
    # Getting the type of 'squeeze' (line 1181)
    squeeze_116044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 31), 'squeeze', False)
    keyword_116045 = squeeze_116044
    # Getting the type of 'subplot_kw' (line 1181)
    subplot_kw_116046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1181, 51), 'subplot_kw', False)
    keyword_116047 = subplot_kw_116046
    # Getting the type of 'gridspec_kw' (line 1182)
    gridspec_kw_116048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1182, 35), 'gridspec_kw', False)
    keyword_116049 = gridspec_kw_116048
    kwargs_116050 = {'subplot_kw': keyword_116047, 'sharey': keyword_116043, 'sharex': keyword_116041, 'ncols': keyword_116039, 'gridspec_kw': keyword_116049, 'nrows': keyword_116037, 'squeeze': keyword_116045}
    # Getting the type of 'fig' (line 1180)
    fig_116034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1180, 10), 'fig', False)
    # Obtaining the member 'subplots' of a type (line 1180)
    subplots_116035 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1180, 10), fig_116034, 'subplots')
    # Calling subplots(args, kwargs) (line 1180)
    subplots_call_result_116051 = invoke(stypy.reporting.localization.Localization(__file__, 1180, 10), subplots_116035, *[], **kwargs_116050)
    
    # Assigning a type to the variable 'axs' (line 1180)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1180, 4), 'axs', subplots_call_result_116051)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1183)
    tuple_116052 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1183, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1183)
    # Adding element type (line 1183)
    # Getting the type of 'fig' (line 1183)
    fig_116053 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 11), 'fig')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1183, 11), tuple_116052, fig_116053)
    # Adding element type (line 1183)
    # Getting the type of 'axs' (line 1183)
    axs_116054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1183, 16), 'axs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1183, 11), tuple_116052, axs_116054)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1183)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1183, 4), 'stypy_return_type', tuple_116052)
    
    # ################# End of 'subplots(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'subplots' in the type store
    # Getting the type of 'stypy_return_type' (line 1065)
    stypy_return_type_116055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1065, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116055)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'subplots'
    return stypy_return_type_116055

# Assigning a type to the variable 'subplots' (line 1065)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1065, 0), 'subplots', subplots)

@norecursion
def subplot2grid(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_116056 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 37), 'int')
    int_116057 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1186, 48), 'int')
    # Getting the type of 'None' (line 1186)
    None_116058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 55), 'None')
    defaults = [int_116056, int_116057, None_116058]
    # Create a new context for function 'subplot2grid'
    module_type_store = module_type_store.open_function_context('subplot2grid', 1186, 0, False)
    
    # Passed parameters checking function
    subplot2grid.stypy_localization = localization
    subplot2grid.stypy_type_of_self = None
    subplot2grid.stypy_type_store = module_type_store
    subplot2grid.stypy_function_name = 'subplot2grid'
    subplot2grid.stypy_param_names_list = ['shape', 'loc', 'rowspan', 'colspan', 'fig']
    subplot2grid.stypy_varargs_param_name = None
    subplot2grid.stypy_kwargs_param_name = 'kwargs'
    subplot2grid.stypy_call_defaults = defaults
    subplot2grid.stypy_call_varargs = varargs
    subplot2grid.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'subplot2grid', ['shape', 'loc', 'rowspan', 'colspan', 'fig'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'subplot2grid', localization, ['shape', 'loc', 'rowspan', 'colspan', 'fig'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'subplot2grid(...)' code ##################

    unicode_116059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1200, (-1)), 'unicode', u'\n    Create a subplot in a grid.  The grid is specified by *shape*, at\n    location of *loc*, spanning *rowspan*, *colspan* cells in each\n    direction.  The index for loc is 0-based.  The current figure will\n    be used unless *fig* is specified. ::\n\n      subplot2grid(shape, loc, rowspan=1, colspan=1)\n\n    is identical to ::\n\n      gridspec=GridSpec(shape[0], shape[1])\n      subplotspec=gridspec.new_subplotspec(loc, rowspan, colspan)\n      subplot(subplotspec)\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 1202)
    # Getting the type of 'fig' (line 1202)
    fig_116060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 7), 'fig')
    # Getting the type of 'None' (line 1202)
    None_116061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1202, 14), 'None')
    
    (may_be_116062, more_types_in_union_116063) = may_be_none(fig_116060, None_116061)

    if may_be_116062:

        if more_types_in_union_116063:
            # Runtime conditional SSA (line 1202)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1203):
        
        # Assigning a Call to a Name (line 1203):
        
        # Call to gcf(...): (line 1203)
        # Processing the call keyword arguments (line 1203)
        kwargs_116065 = {}
        # Getting the type of 'gcf' (line 1203)
        gcf_116064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1203, 14), 'gcf', False)
        # Calling gcf(args, kwargs) (line 1203)
        gcf_call_result_116066 = invoke(stypy.reporting.localization.Localization(__file__, 1203, 14), gcf_116064, *[], **kwargs_116065)
        
        # Assigning a type to the variable 'fig' (line 1203)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1203, 8), 'fig', gcf_call_result_116066)

        if more_types_in_union_116063:
            # SSA join for if statement (line 1202)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Name to a Tuple (line 1205):
    
    # Assigning a Subscript to a Name (line 1205):
    
    # Obtaining the type of the subscript
    int_116067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 4), 'int')
    # Getting the type of 'shape' (line 1205)
    shape_116068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 13), 'shape')
    # Obtaining the member '__getitem__' of a type (line 1205)
    getitem___116069 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 4), shape_116068, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1205)
    subscript_call_result_116070 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 4), getitem___116069, int_116067)
    
    # Assigning a type to the variable 'tuple_var_assignment_114602' (line 1205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'tuple_var_assignment_114602', subscript_call_result_116070)
    
    # Assigning a Subscript to a Name (line 1205):
    
    # Obtaining the type of the subscript
    int_116071 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1205, 4), 'int')
    # Getting the type of 'shape' (line 1205)
    shape_116072 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 13), 'shape')
    # Obtaining the member '__getitem__' of a type (line 1205)
    getitem___116073 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1205, 4), shape_116072, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1205)
    subscript_call_result_116074 = invoke(stypy.reporting.localization.Localization(__file__, 1205, 4), getitem___116073, int_116071)
    
    # Assigning a type to the variable 'tuple_var_assignment_114603' (line 1205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'tuple_var_assignment_114603', subscript_call_result_116074)
    
    # Assigning a Name to a Name (line 1205):
    # Getting the type of 'tuple_var_assignment_114602' (line 1205)
    tuple_var_assignment_114602_116075 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'tuple_var_assignment_114602')
    # Assigning a type to the variable 's1' (line 1205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 's1', tuple_var_assignment_114602_116075)
    
    # Assigning a Name to a Name (line 1205):
    # Getting the type of 'tuple_var_assignment_114603' (line 1205)
    tuple_var_assignment_114603_116076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1205, 4), 'tuple_var_assignment_114603')
    # Assigning a type to the variable 's2' (line 1205)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1205, 8), 's2', tuple_var_assignment_114603_116076)
    
    # Assigning a Call to a Name (line 1206):
    
    # Assigning a Call to a Name (line 1206):
    
    # Call to new_subplotspec(...): (line 1206)
    # Processing the call arguments (line 1206)
    # Getting the type of 'loc' (line 1206)
    loc_116083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 51), 'loc', False)
    # Processing the call keyword arguments (line 1206)
    # Getting the type of 'rowspan' (line 1207)
    rowspan_116084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1207, 59), 'rowspan', False)
    keyword_116085 = rowspan_116084
    # Getting the type of 'colspan' (line 1208)
    colspan_116086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1208, 59), 'colspan', False)
    keyword_116087 = colspan_116086
    kwargs_116088 = {'colspan': keyword_116087, 'rowspan': keyword_116085}
    
    # Call to GridSpec(...): (line 1206)
    # Processing the call arguments (line 1206)
    # Getting the type of 's1' (line 1206)
    s1_116078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 27), 's1', False)
    # Getting the type of 's2' (line 1206)
    s2_116079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 31), 's2', False)
    # Processing the call keyword arguments (line 1206)
    kwargs_116080 = {}
    # Getting the type of 'GridSpec' (line 1206)
    GridSpec_116077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1206, 18), 'GridSpec', False)
    # Calling GridSpec(args, kwargs) (line 1206)
    GridSpec_call_result_116081 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 18), GridSpec_116077, *[s1_116078, s2_116079], **kwargs_116080)
    
    # Obtaining the member 'new_subplotspec' of a type (line 1206)
    new_subplotspec_116082 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1206, 18), GridSpec_call_result_116081, 'new_subplotspec')
    # Calling new_subplotspec(args, kwargs) (line 1206)
    new_subplotspec_call_result_116089 = invoke(stypy.reporting.localization.Localization(__file__, 1206, 18), new_subplotspec_116082, *[loc_116083], **kwargs_116088)
    
    # Assigning a type to the variable 'subplotspec' (line 1206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1206, 4), 'subplotspec', new_subplotspec_call_result_116089)
    
    # Assigning a Call to a Name (line 1209):
    
    # Assigning a Call to a Name (line 1209):
    
    # Call to add_subplot(...): (line 1209)
    # Processing the call arguments (line 1209)
    # Getting the type of 'subplotspec' (line 1209)
    subplotspec_116092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 24), 'subplotspec', False)
    # Processing the call keyword arguments (line 1209)
    # Getting the type of 'kwargs' (line 1209)
    kwargs_116093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 39), 'kwargs', False)
    kwargs_116094 = {'kwargs_116093': kwargs_116093}
    # Getting the type of 'fig' (line 1209)
    fig_116090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1209, 8), 'fig', False)
    # Obtaining the member 'add_subplot' of a type (line 1209)
    add_subplot_116091 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1209, 8), fig_116090, 'add_subplot')
    # Calling add_subplot(args, kwargs) (line 1209)
    add_subplot_call_result_116095 = invoke(stypy.reporting.localization.Localization(__file__, 1209, 8), add_subplot_116091, *[subplotspec_116092], **kwargs_116094)
    
    # Assigning a type to the variable 'a' (line 1209)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1209, 4), 'a', add_subplot_call_result_116095)
    
    # Assigning a Attribute to a Name (line 1210):
    
    # Assigning a Attribute to a Name (line 1210):
    # Getting the type of 'a' (line 1210)
    a_116096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1210, 11), 'a')
    # Obtaining the member 'bbox' of a type (line 1210)
    bbox_116097 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1210, 11), a_116096, 'bbox')
    # Assigning a type to the variable 'bbox' (line 1210)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1210, 4), 'bbox', bbox_116097)
    
    # Assigning a List to a Name (line 1211):
    
    # Assigning a List to a Name (line 1211):
    
    # Obtaining an instance of the builtin type 'list' (line 1211)
    list_116098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1211, 13), 'list')
    # Adding type elements to the builtin type 'list' instance (line 1211)
    
    # Assigning a type to the variable 'byebye' (line 1211)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1211, 4), 'byebye', list_116098)
    
    # Getting the type of 'fig' (line 1212)
    fig_116099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1212, 17), 'fig')
    # Obtaining the member 'axes' of a type (line 1212)
    axes_116100 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1212, 17), fig_116099, 'axes')
    # Testing the type of a for loop iterable (line 1212)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1212, 4), axes_116100)
    # Getting the type of the for loop variable (line 1212)
    for_loop_var_116101 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1212, 4), axes_116100)
    # Assigning a type to the variable 'other' (line 1212)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1212, 4), 'other', for_loop_var_116101)
    # SSA begins for a for statement (line 1212)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Getting the type of 'other' (line 1213)
    other_116102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 11), 'other')
    # Getting the type of 'a' (line 1213)
    a_116103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1213, 20), 'a')
    # Applying the binary operator '==' (line 1213)
    result_eq_116104 = python_operator(stypy.reporting.localization.Localization(__file__, 1213, 11), '==', other_116102, a_116103)
    
    # Testing the type of an if condition (line 1213)
    if_condition_116105 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1213, 8), result_eq_116104)
    # Assigning a type to the variable 'if_condition_116105' (line 1213)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1213, 8), 'if_condition_116105', if_condition_116105)
    # SSA begins for if statement (line 1213)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1213)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to fully_overlaps(...): (line 1215)
    # Processing the call arguments (line 1215)
    # Getting the type of 'other' (line 1215)
    other_116108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 31), 'other', False)
    # Obtaining the member 'bbox' of a type (line 1215)
    bbox_116109 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 31), other_116108, 'bbox')
    # Processing the call keyword arguments (line 1215)
    kwargs_116110 = {}
    # Getting the type of 'bbox' (line 1215)
    bbox_116106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1215, 11), 'bbox', False)
    # Obtaining the member 'fully_overlaps' of a type (line 1215)
    fully_overlaps_116107 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1215, 11), bbox_116106, 'fully_overlaps')
    # Calling fully_overlaps(args, kwargs) (line 1215)
    fully_overlaps_call_result_116111 = invoke(stypy.reporting.localization.Localization(__file__, 1215, 11), fully_overlaps_116107, *[bbox_116109], **kwargs_116110)
    
    # Testing the type of an if condition (line 1215)
    if_condition_116112 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1215, 8), fully_overlaps_call_result_116111)
    # Assigning a type to the variable 'if_condition_116112' (line 1215)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1215, 8), 'if_condition_116112', if_condition_116112)
    # SSA begins for if statement (line 1215)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to append(...): (line 1216)
    # Processing the call arguments (line 1216)
    # Getting the type of 'other' (line 1216)
    other_116115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 26), 'other', False)
    # Processing the call keyword arguments (line 1216)
    kwargs_116116 = {}
    # Getting the type of 'byebye' (line 1216)
    byebye_116113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1216, 12), 'byebye', False)
    # Obtaining the member 'append' of a type (line 1216)
    append_116114 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1216, 12), byebye_116113, 'append')
    # Calling append(args, kwargs) (line 1216)
    append_call_result_116117 = invoke(stypy.reporting.localization.Localization(__file__, 1216, 12), append_116114, *[other_116115], **kwargs_116116)
    
    # SSA join for if statement (line 1215)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Getting the type of 'byebye' (line 1217)
    byebye_116118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1217, 14), 'byebye')
    # Testing the type of a for loop iterable (line 1217)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1217, 4), byebye_116118)
    # Getting the type of the for loop variable (line 1217)
    for_loop_var_116119 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1217, 4), byebye_116118)
    # Assigning a type to the variable 'ax' (line 1217)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1217, 4), 'ax', for_loop_var_116119)
    # SSA begins for a for statement (line 1217)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to delaxes(...): (line 1218)
    # Processing the call arguments (line 1218)
    # Getting the type of 'ax' (line 1218)
    ax_116121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 16), 'ax', False)
    # Processing the call keyword arguments (line 1218)
    kwargs_116122 = {}
    # Getting the type of 'delaxes' (line 1218)
    delaxes_116120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1218, 8), 'delaxes', False)
    # Calling delaxes(args, kwargs) (line 1218)
    delaxes_call_result_116123 = invoke(stypy.reporting.localization.Localization(__file__, 1218, 8), delaxes_116120, *[ax_116121], **kwargs_116122)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'a' (line 1220)
    a_116124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1220, 11), 'a')
    # Assigning a type to the variable 'stypy_return_type' (line 1220)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1220, 4), 'stypy_return_type', a_116124)
    
    # ################# End of 'subplot2grid(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'subplot2grid' in the type store
    # Getting the type of 'stypy_return_type' (line 1186)
    stypy_return_type_116125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1186, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116125)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'subplot2grid'
    return stypy_return_type_116125

# Assigning a type to the variable 'subplot2grid' (line 1186)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1186, 0), 'subplot2grid', subplot2grid)

@norecursion
def twinx(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1223)
    None_116126 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 13), 'None')
    defaults = [None_116126]
    # Create a new context for function 'twinx'
    module_type_store = module_type_store.open_function_context('twinx', 1223, 0, False)
    
    # Passed parameters checking function
    twinx.stypy_localization = localization
    twinx.stypy_type_of_self = None
    twinx.stypy_type_store = module_type_store
    twinx.stypy_function_name = 'twinx'
    twinx.stypy_param_names_list = ['ax']
    twinx.stypy_varargs_param_name = None
    twinx.stypy_kwargs_param_name = None
    twinx.stypy_call_defaults = defaults
    twinx.stypy_call_varargs = varargs
    twinx.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'twinx', ['ax'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'twinx', localization, ['ax'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'twinx(...)' code ##################

    unicode_116127 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1234, (-1)), 'unicode', u'\n    Make a second axes that shares the *x*-axis.  The new axes will\n    overlay *ax* (or the current axes if *ax* is *None*).  The ticks\n    for *ax2* will be placed on the right, and the *ax2* instance is\n    returned.\n\n    .. seealso::\n\n       :file:`examples/api_examples/two_scales.py`\n          For an example\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 1235)
    # Getting the type of 'ax' (line 1235)
    ax_116128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 7), 'ax')
    # Getting the type of 'None' (line 1235)
    None_116129 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1235, 13), 'None')
    
    (may_be_116130, more_types_in_union_116131) = may_be_none(ax_116128, None_116129)

    if may_be_116130:

        if more_types_in_union_116131:
            # Runtime conditional SSA (line 1235)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1236):
        
        # Assigning a Call to a Name (line 1236):
        
        # Call to gca(...): (line 1236)
        # Processing the call keyword arguments (line 1236)
        kwargs_116133 = {}
        # Getting the type of 'gca' (line 1236)
        gca_116132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1236, 11), 'gca', False)
        # Calling gca(args, kwargs) (line 1236)
        gca_call_result_116134 = invoke(stypy.reporting.localization.Localization(__file__, 1236, 11), gca_116132, *[], **kwargs_116133)
        
        # Assigning a type to the variable 'ax' (line 1236)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1236, 8), 'ax', gca_call_result_116134)

        if more_types_in_union_116131:
            # SSA join for if statement (line 1235)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1237):
    
    # Assigning a Call to a Name (line 1237):
    
    # Call to twinx(...): (line 1237)
    # Processing the call keyword arguments (line 1237)
    kwargs_116137 = {}
    # Getting the type of 'ax' (line 1237)
    ax_116135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1237, 10), 'ax', False)
    # Obtaining the member 'twinx' of a type (line 1237)
    twinx_116136 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1237, 10), ax_116135, 'twinx')
    # Calling twinx(args, kwargs) (line 1237)
    twinx_call_result_116138 = invoke(stypy.reporting.localization.Localization(__file__, 1237, 10), twinx_116136, *[], **kwargs_116137)
    
    # Assigning a type to the variable 'ax1' (line 1237)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1237, 4), 'ax1', twinx_call_result_116138)
    # Getting the type of 'ax1' (line 1238)
    ax1_116139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1238, 11), 'ax1')
    # Assigning a type to the variable 'stypy_return_type' (line 1238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1238, 4), 'stypy_return_type', ax1_116139)
    
    # ################# End of 'twinx(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'twinx' in the type store
    # Getting the type of 'stypy_return_type' (line 1223)
    stypy_return_type_116140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1223, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116140)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'twinx'
    return stypy_return_type_116140

# Assigning a type to the variable 'twinx' (line 1223)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1223, 0), 'twinx', twinx)

@norecursion
def twiny(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1241)
    None_116141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 13), 'None')
    defaults = [None_116141]
    # Create a new context for function 'twiny'
    module_type_store = module_type_store.open_function_context('twiny', 1241, 0, False)
    
    # Passed parameters checking function
    twiny.stypy_localization = localization
    twiny.stypy_type_of_self = None
    twiny.stypy_type_store = module_type_store
    twiny.stypy_function_name = 'twiny'
    twiny.stypy_param_names_list = ['ax']
    twiny.stypy_varargs_param_name = None
    twiny.stypy_kwargs_param_name = None
    twiny.stypy_call_defaults = defaults
    twiny.stypy_call_varargs = varargs
    twiny.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'twiny', ['ax'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'twiny', localization, ['ax'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'twiny(...)' code ##################

    unicode_116142 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1247, (-1)), 'unicode', u'\n    Make a second axes that shares the *y*-axis.  The new axis will\n    overlay *ax* (or the current axes if *ax* is *None*).  The ticks\n    for *ax2* will be placed on the top, and the *ax2* instance is\n    returned.\n    ')
    
    # Type idiom detected: calculating its left and rigth part (line 1248)
    # Getting the type of 'ax' (line 1248)
    ax_116143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 7), 'ax')
    # Getting the type of 'None' (line 1248)
    None_116144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1248, 13), 'None')
    
    (may_be_116145, more_types_in_union_116146) = may_be_none(ax_116143, None_116144)

    if may_be_116145:

        if more_types_in_union_116146:
            # Runtime conditional SSA (line 1248)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1249):
        
        # Assigning a Call to a Name (line 1249):
        
        # Call to gca(...): (line 1249)
        # Processing the call keyword arguments (line 1249)
        kwargs_116148 = {}
        # Getting the type of 'gca' (line 1249)
        gca_116147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1249, 11), 'gca', False)
        # Calling gca(args, kwargs) (line 1249)
        gca_call_result_116149 = invoke(stypy.reporting.localization.Localization(__file__, 1249, 11), gca_116147, *[], **kwargs_116148)
        
        # Assigning a type to the variable 'ax' (line 1249)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1249, 8), 'ax', gca_call_result_116149)

        if more_types_in_union_116146:
            # SSA join for if statement (line 1248)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1250):
    
    # Assigning a Call to a Name (line 1250):
    
    # Call to twiny(...): (line 1250)
    # Processing the call keyword arguments (line 1250)
    kwargs_116152 = {}
    # Getting the type of 'ax' (line 1250)
    ax_116150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1250, 10), 'ax', False)
    # Obtaining the member 'twiny' of a type (line 1250)
    twiny_116151 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1250, 10), ax_116150, 'twiny')
    # Calling twiny(args, kwargs) (line 1250)
    twiny_call_result_116153 = invoke(stypy.reporting.localization.Localization(__file__, 1250, 10), twiny_116151, *[], **kwargs_116152)
    
    # Assigning a type to the variable 'ax1' (line 1250)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1250, 4), 'ax1', twiny_call_result_116153)
    # Getting the type of 'ax1' (line 1251)
    ax1_116154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1251, 11), 'ax1')
    # Assigning a type to the variable 'stypy_return_type' (line 1251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1251, 4), 'stypy_return_type', ax1_116154)
    
    # ################# End of 'twiny(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'twiny' in the type store
    # Getting the type of 'stypy_return_type' (line 1241)
    stypy_return_type_116155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1241, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116155)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'twiny'
    return stypy_return_type_116155

# Assigning a type to the variable 'twiny' (line 1241)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1241, 0), 'twiny', twiny)

@norecursion
def subplots_adjust(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'subplots_adjust'
    module_type_store = module_type_store.open_function_context('subplots_adjust', 1254, 0, False)
    
    # Passed parameters checking function
    subplots_adjust.stypy_localization = localization
    subplots_adjust.stypy_type_of_self = None
    subplots_adjust.stypy_type_store = module_type_store
    subplots_adjust.stypy_function_name = 'subplots_adjust'
    subplots_adjust.stypy_param_names_list = []
    subplots_adjust.stypy_varargs_param_name = 'args'
    subplots_adjust.stypy_kwargs_param_name = 'kwargs'
    subplots_adjust.stypy_call_defaults = defaults
    subplots_adjust.stypy_call_varargs = varargs
    subplots_adjust.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'subplots_adjust', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'subplots_adjust', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'subplots_adjust(...)' code ##################

    unicode_116156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1275, (-1)), 'unicode', u'\n    Tune the subplot layout.\n\n    call signature::\n\n      subplots_adjust(left=None, bottom=None, right=None, top=None,\n                      wspace=None, hspace=None)\n\n    The parameter meanings (and suggested defaults) are::\n\n      left  = 0.125  # the left side of the subplots of the figure\n      right = 0.9    # the right side of the subplots of the figure\n      bottom = 0.1   # the bottom of the subplots of the figure\n      top = 0.9      # the top of the subplots of the figure\n      wspace = 0.2   # the amount of width reserved for blank space between subplots,\n                     # expressed as a fraction of the average axis width\n      hspace = 0.2   # the amount of height reserved for white space between subplots,\n                     # expressed as a fraction of the average axis height\n\n    The actual defaults are controlled by the rc file\n    ')
    
    # Assigning a Call to a Name (line 1276):
    
    # Assigning a Call to a Name (line 1276):
    
    # Call to gcf(...): (line 1276)
    # Processing the call keyword arguments (line 1276)
    kwargs_116158 = {}
    # Getting the type of 'gcf' (line 1276)
    gcf_116157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1276, 10), 'gcf', False)
    # Calling gcf(args, kwargs) (line 1276)
    gcf_call_result_116159 = invoke(stypy.reporting.localization.Localization(__file__, 1276, 10), gcf_116157, *[], **kwargs_116158)
    
    # Assigning a type to the variable 'fig' (line 1276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1276, 4), 'fig', gcf_call_result_116159)
    
    # Call to subplots_adjust(...): (line 1277)
    # Getting the type of 'args' (line 1277)
    args_116162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 25), 'args', False)
    # Processing the call keyword arguments (line 1277)
    # Getting the type of 'kwargs' (line 1277)
    kwargs_116163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 33), 'kwargs', False)
    kwargs_116164 = {'kwargs_116163': kwargs_116163}
    # Getting the type of 'fig' (line 1277)
    fig_116160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1277, 4), 'fig', False)
    # Obtaining the member 'subplots_adjust' of a type (line 1277)
    subplots_adjust_116161 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1277, 4), fig_116160, 'subplots_adjust')
    # Calling subplots_adjust(args, kwargs) (line 1277)
    subplots_adjust_call_result_116165 = invoke(stypy.reporting.localization.Localization(__file__, 1277, 4), subplots_adjust_116161, *[args_116162], **kwargs_116164)
    
    
    # ################# End of 'subplots_adjust(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'subplots_adjust' in the type store
    # Getting the type of 'stypy_return_type' (line 1254)
    stypy_return_type_116166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1254, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116166)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'subplots_adjust'
    return stypy_return_type_116166

# Assigning a type to the variable 'subplots_adjust' (line 1254)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1254, 0), 'subplots_adjust', subplots_adjust)

@norecursion
def subplot_tool(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1280)
    None_116167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 27), 'None')
    defaults = [None_116167]
    # Create a new context for function 'subplot_tool'
    module_type_store = module_type_store.open_function_context('subplot_tool', 1280, 0, False)
    
    # Passed parameters checking function
    subplot_tool.stypy_localization = localization
    subplot_tool.stypy_type_of_self = None
    subplot_tool.stypy_type_store = module_type_store
    subplot_tool.stypy_function_name = 'subplot_tool'
    subplot_tool.stypy_param_names_list = ['targetfig']
    subplot_tool.stypy_varargs_param_name = None
    subplot_tool.stypy_kwargs_param_name = None
    subplot_tool.stypy_call_defaults = defaults
    subplot_tool.stypy_call_varargs = varargs
    subplot_tool.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'subplot_tool', ['targetfig'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'subplot_tool', localization, ['targetfig'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'subplot_tool(...)' code ##################

    unicode_116168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1285, (-1)), 'unicode', u'\n    Launch a subplot tool window for a figure.\n\n    A :class:`matplotlib.widgets.SubplotTool` instance is returned.\n    ')
    
    # Assigning a Subscript to a Name (line 1286):
    
    # Assigning a Subscript to a Name (line 1286):
    
    # Obtaining the type of the subscript
    unicode_116169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1286, 20), 'unicode', u'toolbar')
    # Getting the type of 'rcParams' (line 1286)
    rcParams_116170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1286, 11), 'rcParams')
    # Obtaining the member '__getitem__' of a type (line 1286)
    getitem___116171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1286, 11), rcParams_116170, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1286)
    subscript_call_result_116172 = invoke(stypy.reporting.localization.Localization(__file__, 1286, 11), getitem___116171, unicode_116169)
    
    # Assigning a type to the variable 'tbar' (line 1286)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1286, 4), 'tbar', subscript_call_result_116172)
    
    # Assigning a Str to a Subscript (line 1287):
    
    # Assigning a Str to a Subscript (line 1287):
    unicode_116173 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 26), 'unicode', u'None')
    # Getting the type of 'rcParams' (line 1287)
    rcParams_116174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1287, 4), 'rcParams')
    unicode_116175 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1287, 13), 'unicode', u'toolbar')
    # Storing an element on a container (line 1287)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1287, 4), rcParams_116174, (unicode_116175, unicode_116173))
    
    # Type idiom detected: calculating its left and rigth part (line 1288)
    # Getting the type of 'targetfig' (line 1288)
    targetfig_116176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 7), 'targetfig')
    # Getting the type of 'None' (line 1288)
    None_116177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1288, 20), 'None')
    
    (may_be_116178, more_types_in_union_116179) = may_be_none(targetfig_116176, None_116177)

    if may_be_116178:

        if more_types_in_union_116179:
            # Runtime conditional SSA (line 1288)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 1289):
        
        # Assigning a Call to a Name (line 1289):
        
        # Call to get_current_fig_manager(...): (line 1289)
        # Processing the call keyword arguments (line 1289)
        kwargs_116181 = {}
        # Getting the type of 'get_current_fig_manager' (line 1289)
        get_current_fig_manager_116180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1289, 18), 'get_current_fig_manager', False)
        # Calling get_current_fig_manager(args, kwargs) (line 1289)
        get_current_fig_manager_call_result_116182 = invoke(stypy.reporting.localization.Localization(__file__, 1289, 18), get_current_fig_manager_116180, *[], **kwargs_116181)
        
        # Assigning a type to the variable 'manager' (line 1289)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1289, 8), 'manager', get_current_fig_manager_call_result_116182)
        
        # Assigning a Attribute to a Name (line 1290):
        
        # Assigning a Attribute to a Name (line 1290):
        # Getting the type of 'manager' (line 1290)
        manager_116183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1290, 20), 'manager')
        # Obtaining the member 'canvas' of a type (line 1290)
        canvas_116184 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1290, 20), manager_116183, 'canvas')
        # Obtaining the member 'figure' of a type (line 1290)
        figure_116185 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1290, 20), canvas_116184, 'figure')
        # Assigning a type to the variable 'targetfig' (line 1290)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1290, 8), 'targetfig', figure_116185)

        if more_types_in_union_116179:
            # Runtime conditional SSA for else branch (line 1288)
            module_type_store.open_ssa_branch('idiom else')



    if ((not may_be_116178) or more_types_in_union_116179):
        
        # Getting the type of '_pylab_helpers' (line 1293)
        _pylab_helpers_116186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1293, 23), '_pylab_helpers')
        # Obtaining the member 'Gcf' of a type (line 1293)
        Gcf_116187 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 23), _pylab_helpers_116186, 'Gcf')
        # Obtaining the member '_activeQue' of a type (line 1293)
        _activeQue_116188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1293, 23), Gcf_116187, '_activeQue')
        # Testing the type of a for loop iterable (line 1293)
        is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1293, 8), _activeQue_116188)
        # Getting the type of the for loop variable (line 1293)
        for_loop_var_116189 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1293, 8), _activeQue_116188)
        # Assigning a type to the variable 'manager' (line 1293)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1293, 8), 'manager', for_loop_var_116189)
        # SSA begins for a for statement (line 1293)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
        
        
        # Getting the type of 'manager' (line 1294)
        manager_116190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 15), 'manager')
        # Obtaining the member 'canvas' of a type (line 1294)
        canvas_116191 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 15), manager_116190, 'canvas')
        # Obtaining the member 'figure' of a type (line 1294)
        figure_116192 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1294, 15), canvas_116191, 'figure')
        # Getting the type of 'targetfig' (line 1294)
        targetfig_116193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1294, 38), 'targetfig')
        # Applying the binary operator '==' (line 1294)
        result_eq_116194 = python_operator(stypy.reporting.localization.Localization(__file__, 1294, 15), '==', figure_116192, targetfig_116193)
        
        # Testing the type of an if condition (line 1294)
        if_condition_116195 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1294, 12), result_eq_116194)
        # Assigning a type to the variable 'if_condition_116195' (line 1294)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1294, 12), 'if_condition_116195', if_condition_116195)
        # SSA begins for if statement (line 1294)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        # SSA join for if statement (line 1294)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA branch for the else part of a for statement (line 1293)
        module_type_store.open_ssa_branch('for loop else')
        
        # Call to RuntimeError(...): (line 1295)
        # Processing the call arguments (line 1295)
        unicode_116197 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1295, 33), 'unicode', u'Could not find manager for targetfig')
        # Processing the call keyword arguments (line 1295)
        kwargs_116198 = {}
        # Getting the type of 'RuntimeError' (line 1295)
        RuntimeError_116196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1295, 20), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 1295)
        RuntimeError_call_result_116199 = invoke(stypy.reporting.localization.Localization(__file__, 1295, 20), RuntimeError_116196, *[unicode_116197], **kwargs_116198)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1295, 14), RuntimeError_call_result_116199, 'raise parameter', BaseException)
        # SSA join for a for statement
        module_type_store = module_type_store.join_ssa_context()
        

        if (may_be_116178 and more_types_in_union_116179):
            # SSA join for if statement (line 1288)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 1297):
    
    # Assigning a Call to a Name (line 1297):
    
    # Call to figure(...): (line 1297)
    # Processing the call keyword arguments (line 1297)
    
    # Obtaining an instance of the builtin type 'tuple' (line 1297)
    tuple_116201 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 30), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1297)
    # Adding element type (line 1297)
    int_116202 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 30), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1297, 30), tuple_116201, int_116202)
    # Adding element type (line 1297)
    int_116203 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1297, 32), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1297, 30), tuple_116201, int_116203)
    
    keyword_116204 = tuple_116201
    kwargs_116205 = {'figsize': keyword_116204}
    # Getting the type of 'figure' (line 1297)
    figure_116200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1297, 14), 'figure', False)
    # Calling figure(args, kwargs) (line 1297)
    figure_call_result_116206 = invoke(stypy.reporting.localization.Localization(__file__, 1297, 14), figure_116200, *[], **kwargs_116205)
    
    # Assigning a type to the variable 'toolfig' (line 1297)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1297, 4), 'toolfig', figure_call_result_116206)
    
    # Call to subplots_adjust(...): (line 1298)
    # Processing the call keyword arguments (line 1298)
    float_116209 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1298, 32), 'float')
    keyword_116210 = float_116209
    kwargs_116211 = {'top': keyword_116210}
    # Getting the type of 'toolfig' (line 1298)
    toolfig_116207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1298, 4), 'toolfig', False)
    # Obtaining the member 'subplots_adjust' of a type (line 1298)
    subplots_adjust_116208 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1298, 4), toolfig_116207, 'subplots_adjust')
    # Calling subplots_adjust(args, kwargs) (line 1298)
    subplots_adjust_call_result_116212 = invoke(stypy.reporting.localization.Localization(__file__, 1298, 4), subplots_adjust_116208, *[], **kwargs_116211)
    
    
    # Assigning a Call to a Name (line 1299):
    
    # Assigning a Call to a Name (line 1299):
    
    # Call to SubplotTool(...): (line 1299)
    # Processing the call arguments (line 1299)
    # Getting the type of 'targetfig' (line 1299)
    targetfig_116214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 23), 'targetfig', False)
    # Getting the type of 'toolfig' (line 1299)
    toolfig_116215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 34), 'toolfig', False)
    # Processing the call keyword arguments (line 1299)
    kwargs_116216 = {}
    # Getting the type of 'SubplotTool' (line 1299)
    SubplotTool_116213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1299, 11), 'SubplotTool', False)
    # Calling SubplotTool(args, kwargs) (line 1299)
    SubplotTool_call_result_116217 = invoke(stypy.reporting.localization.Localization(__file__, 1299, 11), SubplotTool_116213, *[targetfig_116214, toolfig_116215], **kwargs_116216)
    
    # Assigning a type to the variable 'ret' (line 1299)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1299, 4), 'ret', SubplotTool_call_result_116217)
    
    # Assigning a Name to a Subscript (line 1300):
    
    # Assigning a Name to a Subscript (line 1300):
    # Getting the type of 'tbar' (line 1300)
    tbar_116218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 26), 'tbar')
    # Getting the type of 'rcParams' (line 1300)
    rcParams_116219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1300, 4), 'rcParams')
    unicode_116220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1300, 13), 'unicode', u'toolbar')
    # Storing an element on a container (line 1300)
    set_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1300, 4), rcParams_116219, (unicode_116220, tbar_116218))
    
    # Call to set_active(...): (line 1301)
    # Processing the call arguments (line 1301)
    # Getting the type of 'manager' (line 1301)
    manager_116224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 34), 'manager', False)
    # Processing the call keyword arguments (line 1301)
    kwargs_116225 = {}
    # Getting the type of '_pylab_helpers' (line 1301)
    _pylab_helpers_116221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1301, 4), '_pylab_helpers', False)
    # Obtaining the member 'Gcf' of a type (line 1301)
    Gcf_116222 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 4), _pylab_helpers_116221, 'Gcf')
    # Obtaining the member 'set_active' of a type (line 1301)
    set_active_116223 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1301, 4), Gcf_116222, 'set_active')
    # Calling set_active(args, kwargs) (line 1301)
    set_active_call_result_116226 = invoke(stypy.reporting.localization.Localization(__file__, 1301, 4), set_active_116223, *[manager_116224], **kwargs_116225)
    
    # Getting the type of 'ret' (line 1302)
    ret_116227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1302, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 1302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1302, 4), 'stypy_return_type', ret_116227)
    
    # ################# End of 'subplot_tool(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'subplot_tool' in the type store
    # Getting the type of 'stypy_return_type' (line 1280)
    stypy_return_type_116228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1280, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116228)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'subplot_tool'
    return stypy_return_type_116228

# Assigning a type to the variable 'subplot_tool' (line 1280)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1280, 0), 'subplot_tool', subplot_tool)

@norecursion
def tight_layout(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    float_116229 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1305, 21), 'float')
    # Getting the type of 'None' (line 1305)
    None_116230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 33), 'None')
    # Getting the type of 'None' (line 1305)
    None_116231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 45), 'None')
    # Getting the type of 'None' (line 1305)
    None_116232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 56), 'None')
    defaults = [float_116229, None_116230, None_116231, None_116232]
    # Create a new context for function 'tight_layout'
    module_type_store = module_type_store.open_function_context('tight_layout', 1305, 0, False)
    
    # Passed parameters checking function
    tight_layout.stypy_localization = localization
    tight_layout.stypy_type_of_self = None
    tight_layout.stypy_type_store = module_type_store
    tight_layout.stypy_function_name = 'tight_layout'
    tight_layout.stypy_param_names_list = ['pad', 'h_pad', 'w_pad', 'rect']
    tight_layout.stypy_varargs_param_name = None
    tight_layout.stypy_kwargs_param_name = None
    tight_layout.stypy_call_defaults = defaults
    tight_layout.stypy_call_varargs = varargs
    tight_layout.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tight_layout', ['pad', 'h_pad', 'w_pad', 'rect'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tight_layout', localization, ['pad', 'h_pad', 'w_pad', 'rect'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tight_layout(...)' code ##################

    unicode_116233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1320, (-1)), 'unicode', u'\n    Automatically adjust subplot parameters to give specified padding.\n\n    Parameters:\n\n    pad : float\n        padding between the figure edge and the edges of subplots, as a fraction of the font-size.\n    h_pad, w_pad : float\n        padding (height/width) between edges of adjacent subplots.\n        Defaults to `pad_inches`.\n    rect : if rect is given, it is interpreted as a rectangle\n        (left, bottom, right, top) in the normalized figure\n        coordinate that the whole subplots area (including\n        labels) will fit into. Default is (0, 0, 1, 1).\n    ')
    
    # Assigning a Call to a Name (line 1322):
    
    # Assigning a Call to a Name (line 1322):
    
    # Call to gcf(...): (line 1322)
    # Processing the call keyword arguments (line 1322)
    kwargs_116235 = {}
    # Getting the type of 'gcf' (line 1322)
    gcf_116234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1322, 10), 'gcf', False)
    # Calling gcf(args, kwargs) (line 1322)
    gcf_call_result_116236 = invoke(stypy.reporting.localization.Localization(__file__, 1322, 10), gcf_116234, *[], **kwargs_116235)
    
    # Assigning a type to the variable 'fig' (line 1322)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1322, 4), 'fig', gcf_call_result_116236)
    
    # Call to tight_layout(...): (line 1323)
    # Processing the call keyword arguments (line 1323)
    # Getting the type of 'pad' (line 1323)
    pad_116239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 25), 'pad', False)
    keyword_116240 = pad_116239
    # Getting the type of 'h_pad' (line 1323)
    h_pad_116241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 36), 'h_pad', False)
    keyword_116242 = h_pad_116241
    # Getting the type of 'w_pad' (line 1323)
    w_pad_116243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 49), 'w_pad', False)
    keyword_116244 = w_pad_116243
    # Getting the type of 'rect' (line 1323)
    rect_116245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 61), 'rect', False)
    keyword_116246 = rect_116245
    kwargs_116247 = {'w_pad': keyword_116244, 'h_pad': keyword_116242, 'pad': keyword_116240, 'rect': keyword_116246}
    # Getting the type of 'fig' (line 1323)
    fig_116237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1323, 4), 'fig', False)
    # Obtaining the member 'tight_layout' of a type (line 1323)
    tight_layout_116238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1323, 4), fig_116237, 'tight_layout')
    # Calling tight_layout(args, kwargs) (line 1323)
    tight_layout_call_result_116248 = invoke(stypy.reporting.localization.Localization(__file__, 1323, 4), tight_layout_116238, *[], **kwargs_116247)
    
    
    # ################# End of 'tight_layout(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tight_layout' in the type store
    # Getting the type of 'stypy_return_type' (line 1305)
    stypy_return_type_116249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1305, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116249)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tight_layout'
    return stypy_return_type_116249

# Assigning a type to the variable 'tight_layout' (line 1305)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1305, 0), 'tight_layout', tight_layout)

@norecursion
def box(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 1326)
    None_116250 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 11), 'None')
    defaults = [None_116250]
    # Create a new context for function 'box'
    module_type_store = module_type_store.open_function_context('box', 1326, 0, False)
    
    # Passed parameters checking function
    box.stypy_localization = localization
    box.stypy_type_of_self = None
    box.stypy_type_store = module_type_store
    box.stypy_function_name = 'box'
    box.stypy_param_names_list = ['on']
    box.stypy_varargs_param_name = None
    box.stypy_kwargs_param_name = None
    box.stypy_call_defaults = defaults
    box.stypy_call_varargs = varargs
    box.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'box', ['on'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'box', localization, ['on'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'box(...)' code ##################

    unicode_116251 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1332, (-1)), 'unicode', u"\n    Turn the axes box on or off.  *on* may be a boolean or a string,\n    'on' or 'off'.\n\n    If *on* is *None*, toggle state.\n    ")
    
    # Assigning a Call to a Name (line 1333):
    
    # Assigning a Call to a Name (line 1333):
    
    # Call to gca(...): (line 1333)
    # Processing the call keyword arguments (line 1333)
    kwargs_116253 = {}
    # Getting the type of 'gca' (line 1333)
    gca_116252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1333, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 1333)
    gca_call_result_116254 = invoke(stypy.reporting.localization.Localization(__file__, 1333, 9), gca_116252, *[], **kwargs_116253)
    
    # Assigning a type to the variable 'ax' (line 1333)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1333, 4), 'ax', gca_call_result_116254)
    
    # Assigning a Call to a Name (line 1334):
    
    # Assigning a Call to a Name (line 1334):
    
    # Call to _string_to_bool(...): (line 1334)
    # Processing the call arguments (line 1334)
    # Getting the type of 'on' (line 1334)
    on_116256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 25), 'on', False)
    # Processing the call keyword arguments (line 1334)
    kwargs_116257 = {}
    # Getting the type of '_string_to_bool' (line 1334)
    _string_to_bool_116255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1334, 9), '_string_to_bool', False)
    # Calling _string_to_bool(args, kwargs) (line 1334)
    _string_to_bool_call_result_116258 = invoke(stypy.reporting.localization.Localization(__file__, 1334, 9), _string_to_bool_116255, *[on_116256], **kwargs_116257)
    
    # Assigning a type to the variable 'on' (line 1334)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1334, 4), 'on', _string_to_bool_call_result_116258)
    
    # Type idiom detected: calculating its left and rigth part (line 1335)
    # Getting the type of 'on' (line 1335)
    on_116259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 7), 'on')
    # Getting the type of 'None' (line 1335)
    None_116260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1335, 13), 'None')
    
    (may_be_116261, more_types_in_union_116262) = may_be_none(on_116259, None_116260)

    if may_be_116261:

        if more_types_in_union_116262:
            # Runtime conditional SSA (line 1335)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a UnaryOp to a Name (line 1336):
        
        # Assigning a UnaryOp to a Name (line 1336):
        
        
        # Call to get_frame_on(...): (line 1336)
        # Processing the call keyword arguments (line 1336)
        kwargs_116265 = {}
        # Getting the type of 'ax' (line 1336)
        ax_116263 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1336, 17), 'ax', False)
        # Obtaining the member 'get_frame_on' of a type (line 1336)
        get_frame_on_116264 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1336, 17), ax_116263, 'get_frame_on')
        # Calling get_frame_on(args, kwargs) (line 1336)
        get_frame_on_call_result_116266 = invoke(stypy.reporting.localization.Localization(__file__, 1336, 17), get_frame_on_116264, *[], **kwargs_116265)
        
        # Applying the 'not' unary operator (line 1336)
        result_not__116267 = python_operator(stypy.reporting.localization.Localization(__file__, 1336, 13), 'not', get_frame_on_call_result_116266)
        
        # Assigning a type to the variable 'on' (line 1336)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1336, 8), 'on', result_not__116267)

        if more_types_in_union_116262:
            # SSA join for if statement (line 1335)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to set_frame_on(...): (line 1337)
    # Processing the call arguments (line 1337)
    # Getting the type of 'on' (line 1337)
    on_116270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 20), 'on', False)
    # Processing the call keyword arguments (line 1337)
    kwargs_116271 = {}
    # Getting the type of 'ax' (line 1337)
    ax_116268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1337, 4), 'ax', False)
    # Obtaining the member 'set_frame_on' of a type (line 1337)
    set_frame_on_116269 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1337, 4), ax_116268, 'set_frame_on')
    # Calling set_frame_on(args, kwargs) (line 1337)
    set_frame_on_call_result_116272 = invoke(stypy.reporting.localization.Localization(__file__, 1337, 4), set_frame_on_116269, *[on_116270], **kwargs_116271)
    
    
    # ################# End of 'box(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'box' in the type store
    # Getting the type of 'stypy_return_type' (line 1326)
    stypy_return_type_116273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1326, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116273)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'box'
    return stypy_return_type_116273

# Assigning a type to the variable 'box' (line 1326)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1326, 0), 'box', box)

@norecursion
def title(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'title'
    module_type_store = module_type_store.open_function_context('title', 1340, 0, False)
    
    # Passed parameters checking function
    title.stypy_localization = localization
    title.stypy_type_of_self = None
    title.stypy_type_store = module_type_store
    title.stypy_function_name = 'title'
    title.stypy_param_names_list = ['s']
    title.stypy_varargs_param_name = 'args'
    title.stypy_kwargs_param_name = 'kwargs'
    title.stypy_call_defaults = defaults
    title.stypy_call_varargs = varargs
    title.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'title', ['s'], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'title', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'title(...)' code ##################

    unicode_116274 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1381, (-1)), 'unicode', u"\n    Set a title of the current axes.\n\n    Set one of the three available axes titles. The available titles are\n    positioned above the axes in the center, flush with the left edge,\n    and flush with the right edge.\n\n    .. seealso::\n        See :func:`~matplotlib.pyplot.text` for adding text\n        to the current axes\n\n    Parameters\n    ----------\n    label : str\n        Text to use for the title\n\n    fontdict : dict\n        A dictionary controlling the appearance of the title text,\n        the default `fontdict` is:\n\n            {'fontsize': rcParams['axes.titlesize'],\n            'fontweight' : rcParams['axes.titleweight'],\n            'verticalalignment': 'baseline',\n            'horizontalalignment': loc}\n\n    loc : {'center', 'left', 'right'}, str, optional\n        Which title to set, defaults to 'center'\n\n    Returns\n    -------\n    text : :class:`~matplotlib.text.Text`\n        The matplotlib text instance representing the title\n\n    Other parameters\n    ----------------\n    kwargs : text properties\n        Other keyword arguments are text properties, see\n        :class:`~matplotlib.text.Text` for a list of valid text\n        properties.\n\n    ")
    
    # Call to set_title(...): (line 1382)
    # Processing the call arguments (line 1382)
    # Getting the type of 's' (line 1382)
    s_116279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 27), 's', False)
    # Getting the type of 'args' (line 1382)
    args_116280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 31), 'args', False)
    # Processing the call keyword arguments (line 1382)
    # Getting the type of 'kwargs' (line 1382)
    kwargs_116281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 39), 'kwargs', False)
    kwargs_116282 = {'kwargs_116281': kwargs_116281}
    
    # Call to gca(...): (line 1382)
    # Processing the call keyword arguments (line 1382)
    kwargs_116276 = {}
    # Getting the type of 'gca' (line 1382)
    gca_116275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1382, 11), 'gca', False)
    # Calling gca(args, kwargs) (line 1382)
    gca_call_result_116277 = invoke(stypy.reporting.localization.Localization(__file__, 1382, 11), gca_116275, *[], **kwargs_116276)
    
    # Obtaining the member 'set_title' of a type (line 1382)
    set_title_116278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1382, 11), gca_call_result_116277, 'set_title')
    # Calling set_title(args, kwargs) (line 1382)
    set_title_call_result_116283 = invoke(stypy.reporting.localization.Localization(__file__, 1382, 11), set_title_116278, *[s_116279, args_116280], **kwargs_116282)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1382, 4), 'stypy_return_type', set_title_call_result_116283)
    
    # ################# End of 'title(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'title' in the type store
    # Getting the type of 'stypy_return_type' (line 1340)
    stypy_return_type_116284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1340, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116284)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'title'
    return stypy_return_type_116284

# Assigning a type to the variable 'title' (line 1340)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1340, 0), 'title', title)

@norecursion
def axis(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'axis'
    module_type_store = module_type_store.open_function_context('axis', 1387, 0, False)
    
    # Passed parameters checking function
    axis.stypy_localization = localization
    axis.stypy_type_of_self = None
    axis.stypy_type_store = module_type_store
    axis.stypy_function_name = 'axis'
    axis.stypy_param_names_list = []
    axis.stypy_varargs_param_name = 'v'
    axis.stypy_kwargs_param_name = 'kwargs'
    axis.stypy_call_defaults = defaults
    axis.stypy_call_varargs = varargs
    axis.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'axis', [], 'v', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'axis', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'axis(...)' code ##################

    unicode_116285 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1452, (-1)), 'unicode', u"\n    Convenience method to get or set axis properties.\n\n    Calling with no arguments::\n\n      >>> axis()\n\n    returns the current axes limits ``[xmin, xmax, ymin, ymax]``.::\n\n      >>> axis(v)\n\n    sets the min and max of the x and y axes, with\n    ``v = [xmin, xmax, ymin, ymax]``.::\n\n      >>> axis('off')\n\n    turns off the axis lines and labels.::\n\n      >>> axis('equal')\n\n    changes limits of *x* or *y* axis so that equal increments of *x*\n    and *y* have the same length; a circle is circular.::\n\n      >>> axis('scaled')\n\n    achieves the same result by changing the dimensions of the plot box instead\n    of the axis data limits.::\n\n      >>> axis('tight')\n\n    changes *x* and *y* axis limits such that all data is shown. If\n    all data is already shown, it will move it to the center of the\n    figure without modifying (*xmax* - *xmin*) or (*ymax* -\n    *ymin*). Note this is slightly different than in MATLAB.::\n\n      >>> axis('image')\n\n    is 'scaled' with the axis limits equal to the data limits.::\n\n      >>> axis('auto')\n\n    and::\n\n      >>> axis('normal')\n\n    are deprecated. They restore default behavior; axis limits are automatically\n    scaled to make the data fit comfortably within the plot box.\n\n    if ``len(*v)==0``, you can pass in *xmin*, *xmax*, *ymin*, *ymax*\n    as kwargs selectively to alter just those limits without changing\n    the others.\n\n      >>> axis('square')\n\n    changes the limit ranges (*xmax*-*xmin*) and (*ymax*-*ymin*) of\n    the *x* and *y* axes to be the same, and have the same scaling,\n    resulting in a square plot.\n\n    The xmin, xmax, ymin, ymax tuple is returned\n\n    .. seealso::\n\n        :func:`xlim`, :func:`ylim`\n           For setting the x- and y-limits individually.\n    ")
    
    # Call to axis(...): (line 1453)
    # Getting the type of 'v' (line 1453)
    v_116290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 23), 'v', False)
    # Processing the call keyword arguments (line 1453)
    # Getting the type of 'kwargs' (line 1453)
    kwargs_116291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 28), 'kwargs', False)
    kwargs_116292 = {'kwargs_116291': kwargs_116291}
    
    # Call to gca(...): (line 1453)
    # Processing the call keyword arguments (line 1453)
    kwargs_116287 = {}
    # Getting the type of 'gca' (line 1453)
    gca_116286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1453, 11), 'gca', False)
    # Calling gca(args, kwargs) (line 1453)
    gca_call_result_116288 = invoke(stypy.reporting.localization.Localization(__file__, 1453, 11), gca_116286, *[], **kwargs_116287)
    
    # Obtaining the member 'axis' of a type (line 1453)
    axis_116289 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1453, 11), gca_call_result_116288, 'axis')
    # Calling axis(args, kwargs) (line 1453)
    axis_call_result_116293 = invoke(stypy.reporting.localization.Localization(__file__, 1453, 11), axis_116289, *[v_116290], **kwargs_116292)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1453)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1453, 4), 'stypy_return_type', axis_call_result_116293)
    
    # ################# End of 'axis(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'axis' in the type store
    # Getting the type of 'stypy_return_type' (line 1387)
    stypy_return_type_116294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1387, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116294)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'axis'
    return stypy_return_type_116294

# Assigning a type to the variable 'axis' (line 1387)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1387, 0), 'axis', axis)

@norecursion
def xlabel(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'xlabel'
    module_type_store = module_type_store.open_function_context('xlabel', 1456, 0, False)
    
    # Passed parameters checking function
    xlabel.stypy_localization = localization
    xlabel.stypy_type_of_self = None
    xlabel.stypy_type_store = module_type_store
    xlabel.stypy_function_name = 'xlabel'
    xlabel.stypy_param_names_list = ['s']
    xlabel.stypy_varargs_param_name = 'args'
    xlabel.stypy_kwargs_param_name = 'kwargs'
    xlabel.stypy_call_defaults = defaults
    xlabel.stypy_call_varargs = varargs
    xlabel.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'xlabel', ['s'], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'xlabel', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'xlabel(...)' code ##################

    unicode_116295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1472, (-1)), 'unicode', u"\n    Set the *x* axis label of the current axis.\n\n    Default override is::\n\n      override = {\n          'fontsize'            : 'small',\n          'verticalalignment'   : 'top',\n          'horizontalalignment' : 'center'\n          }\n\n    .. seealso::\n\n        :func:`~matplotlib.pyplot.text`\n            For information on how override and the optional args work\n    ")
    
    # Call to set_xlabel(...): (line 1473)
    # Processing the call arguments (line 1473)
    # Getting the type of 's' (line 1473)
    s_116300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 28), 's', False)
    # Getting the type of 'args' (line 1473)
    args_116301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 32), 'args', False)
    # Processing the call keyword arguments (line 1473)
    # Getting the type of 'kwargs' (line 1473)
    kwargs_116302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 40), 'kwargs', False)
    kwargs_116303 = {'kwargs_116302': kwargs_116302}
    
    # Call to gca(...): (line 1473)
    # Processing the call keyword arguments (line 1473)
    kwargs_116297 = {}
    # Getting the type of 'gca' (line 1473)
    gca_116296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1473, 11), 'gca', False)
    # Calling gca(args, kwargs) (line 1473)
    gca_call_result_116298 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 11), gca_116296, *[], **kwargs_116297)
    
    # Obtaining the member 'set_xlabel' of a type (line 1473)
    set_xlabel_116299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1473, 11), gca_call_result_116298, 'set_xlabel')
    # Calling set_xlabel(args, kwargs) (line 1473)
    set_xlabel_call_result_116304 = invoke(stypy.reporting.localization.Localization(__file__, 1473, 11), set_xlabel_116299, *[s_116300, args_116301], **kwargs_116303)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1473, 4), 'stypy_return_type', set_xlabel_call_result_116304)
    
    # ################# End of 'xlabel(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'xlabel' in the type store
    # Getting the type of 'stypy_return_type' (line 1456)
    stypy_return_type_116305 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1456, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116305)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'xlabel'
    return stypy_return_type_116305

# Assigning a type to the variable 'xlabel' (line 1456)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1456, 0), 'xlabel', xlabel)

@norecursion
def ylabel(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ylabel'
    module_type_store = module_type_store.open_function_context('ylabel', 1476, 0, False)
    
    # Passed parameters checking function
    ylabel.stypy_localization = localization
    ylabel.stypy_type_of_self = None
    ylabel.stypy_type_store = module_type_store
    ylabel.stypy_function_name = 'ylabel'
    ylabel.stypy_param_names_list = ['s']
    ylabel.stypy_varargs_param_name = 'args'
    ylabel.stypy_kwargs_param_name = 'kwargs'
    ylabel.stypy_call_defaults = defaults
    ylabel.stypy_call_varargs = varargs
    ylabel.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ylabel', ['s'], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ylabel', localization, ['s'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ylabel(...)' code ##################

    unicode_116306 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1493, (-1)), 'unicode', u"\n    Set the *y* axis label of the current axis.\n\n    Defaults override is::\n\n        override = {\n           'fontsize'            : 'small',\n           'verticalalignment'   : 'center',\n           'horizontalalignment' : 'right',\n           'rotation'='vertical' : }\n\n    .. seealso::\n\n        :func:`~matplotlib.pyplot.text`\n            For information on how override and the optional args\n            work.\n    ")
    
    # Call to set_ylabel(...): (line 1494)
    # Processing the call arguments (line 1494)
    # Getting the type of 's' (line 1494)
    s_116311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 28), 's', False)
    # Getting the type of 'args' (line 1494)
    args_116312 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 32), 'args', False)
    # Processing the call keyword arguments (line 1494)
    # Getting the type of 'kwargs' (line 1494)
    kwargs_116313 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 40), 'kwargs', False)
    kwargs_116314 = {'kwargs_116313': kwargs_116313}
    
    # Call to gca(...): (line 1494)
    # Processing the call keyword arguments (line 1494)
    kwargs_116308 = {}
    # Getting the type of 'gca' (line 1494)
    gca_116307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1494, 11), 'gca', False)
    # Calling gca(args, kwargs) (line 1494)
    gca_call_result_116309 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 11), gca_116307, *[], **kwargs_116308)
    
    # Obtaining the member 'set_ylabel' of a type (line 1494)
    set_ylabel_116310 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1494, 11), gca_call_result_116309, 'set_ylabel')
    # Calling set_ylabel(args, kwargs) (line 1494)
    set_ylabel_call_result_116315 = invoke(stypy.reporting.localization.Localization(__file__, 1494, 11), set_ylabel_116310, *[s_116311, args_116312], **kwargs_116314)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1494, 4), 'stypy_return_type', set_ylabel_call_result_116315)
    
    # ################# End of 'ylabel(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ylabel' in the type store
    # Getting the type of 'stypy_return_type' (line 1476)
    stypy_return_type_116316 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1476, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116316)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ylabel'
    return stypy_return_type_116316

# Assigning a type to the variable 'ylabel' (line 1476)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1476, 0), 'ylabel', ylabel)

@norecursion
def xlim(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'xlim'
    module_type_store = module_type_store.open_function_context('xlim', 1497, 0, False)
    
    # Passed parameters checking function
    xlim.stypy_localization = localization
    xlim.stypy_type_of_self = None
    xlim.stypy_type_store = module_type_store
    xlim.stypy_function_name = 'xlim'
    xlim.stypy_param_names_list = []
    xlim.stypy_varargs_param_name = 'args'
    xlim.stypy_kwargs_param_name = 'kwargs'
    xlim.stypy_call_defaults = defaults
    xlim.stypy_call_varargs = varargs
    xlim.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'xlim', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'xlim', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'xlim(...)' code ##################

    unicode_116317 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1517, (-1)), 'unicode', u'\n    Get or set the *x* limits of the current axes.\n\n    ::\n\n      xmin, xmax = xlim()   # return the current xlim\n      xlim( (xmin, xmax) )  # set the xlim to xmin, xmax\n      xlim( xmin, xmax )    # set the xlim to xmin, xmax\n\n    If you do not specify args, you can pass the xmin and xmax as\n    kwargs, e.g.::\n\n      xlim(xmax=3) # adjust the max leaving min unchanged\n      xlim(xmin=1) # adjust the min leaving max unchanged\n\n    Setting limits turns autoscaling off for the x-axis.\n\n    The new axis limits are returned as a length 2 tuple.\n\n    ')
    
    # Assigning a Call to a Name (line 1518):
    
    # Assigning a Call to a Name (line 1518):
    
    # Call to gca(...): (line 1518)
    # Processing the call keyword arguments (line 1518)
    kwargs_116319 = {}
    # Getting the type of 'gca' (line 1518)
    gca_116318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1518, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 1518)
    gca_call_result_116320 = invoke(stypy.reporting.localization.Localization(__file__, 1518, 9), gca_116318, *[], **kwargs_116319)
    
    # Assigning a type to the variable 'ax' (line 1518)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1518, 4), 'ax', gca_call_result_116320)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'args' (line 1519)
    args_116321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 11), 'args')
    # Applying the 'not' unary operator (line 1519)
    result_not__116322 = python_operator(stypy.reporting.localization.Localization(__file__, 1519, 7), 'not', args_116321)
    
    
    # Getting the type of 'kwargs' (line 1519)
    kwargs_116323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1519, 24), 'kwargs')
    # Applying the 'not' unary operator (line 1519)
    result_not__116324 = python_operator(stypy.reporting.localization.Localization(__file__, 1519, 20), 'not', kwargs_116323)
    
    # Applying the binary operator 'and' (line 1519)
    result_and_keyword_116325 = python_operator(stypy.reporting.localization.Localization(__file__, 1519, 7), 'and', result_not__116322, result_not__116324)
    
    # Testing the type of an if condition (line 1519)
    if_condition_116326 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1519, 4), result_and_keyword_116325)
    # Assigning a type to the variable 'if_condition_116326' (line 1519)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1519, 4), 'if_condition_116326', if_condition_116326)
    # SSA begins for if statement (line 1519)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to get_xlim(...): (line 1520)
    # Processing the call keyword arguments (line 1520)
    kwargs_116329 = {}
    # Getting the type of 'ax' (line 1520)
    ax_116327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1520, 15), 'ax', False)
    # Obtaining the member 'get_xlim' of a type (line 1520)
    get_xlim_116328 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1520, 15), ax_116327, 'get_xlim')
    # Calling get_xlim(args, kwargs) (line 1520)
    get_xlim_call_result_116330 = invoke(stypy.reporting.localization.Localization(__file__, 1520, 15), get_xlim_116328, *[], **kwargs_116329)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1520)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1520, 8), 'stypy_return_type', get_xlim_call_result_116330)
    # SSA join for if statement (line 1519)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1521):
    
    # Assigning a Call to a Name (line 1521):
    
    # Call to set_xlim(...): (line 1521)
    # Getting the type of 'args' (line 1521)
    args_116333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 23), 'args', False)
    # Processing the call keyword arguments (line 1521)
    # Getting the type of 'kwargs' (line 1521)
    kwargs_116334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 31), 'kwargs', False)
    kwargs_116335 = {'kwargs_116334': kwargs_116334}
    # Getting the type of 'ax' (line 1521)
    ax_116331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1521, 10), 'ax', False)
    # Obtaining the member 'set_xlim' of a type (line 1521)
    set_xlim_116332 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1521, 10), ax_116331, 'set_xlim')
    # Calling set_xlim(args, kwargs) (line 1521)
    set_xlim_call_result_116336 = invoke(stypy.reporting.localization.Localization(__file__, 1521, 10), set_xlim_116332, *[args_116333], **kwargs_116335)
    
    # Assigning a type to the variable 'ret' (line 1521)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1521, 4), 'ret', set_xlim_call_result_116336)
    # Getting the type of 'ret' (line 1522)
    ret_116337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1522, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 1522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1522, 4), 'stypy_return_type', ret_116337)
    
    # ################# End of 'xlim(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'xlim' in the type store
    # Getting the type of 'stypy_return_type' (line 1497)
    stypy_return_type_116338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1497, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116338)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'xlim'
    return stypy_return_type_116338

# Assigning a type to the variable 'xlim' (line 1497)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1497, 0), 'xlim', xlim)

@norecursion
def ylim(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ylim'
    module_type_store = module_type_store.open_function_context('ylim', 1525, 0, False)
    
    # Passed parameters checking function
    ylim.stypy_localization = localization
    ylim.stypy_type_of_self = None
    ylim.stypy_type_store = module_type_store
    ylim.stypy_function_name = 'ylim'
    ylim.stypy_param_names_list = []
    ylim.stypy_varargs_param_name = 'args'
    ylim.stypy_kwargs_param_name = 'kwargs'
    ylim.stypy_call_defaults = defaults
    ylim.stypy_call_varargs = varargs
    ylim.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ylim', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ylim', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ylim(...)' code ##################

    unicode_116339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1544, (-1)), 'unicode', u'\n    Get or set the *y*-limits of the current axes.\n\n    ::\n\n      ymin, ymax = ylim()   # return the current ylim\n      ylim( (ymin, ymax) )  # set the ylim to ymin, ymax\n      ylim( ymin, ymax )    # set the ylim to ymin, ymax\n\n    If you do not specify args, you can pass the *ymin* and *ymax* as\n    kwargs, e.g.::\n\n      ylim(ymax=3) # adjust the max leaving min unchanged\n      ylim(ymin=1) # adjust the min leaving max unchanged\n\n    Setting limits turns autoscaling off for the y-axis.\n\n    The new axis limits are returned as a length 2 tuple.\n    ')
    
    # Assigning a Call to a Name (line 1545):
    
    # Assigning a Call to a Name (line 1545):
    
    # Call to gca(...): (line 1545)
    # Processing the call keyword arguments (line 1545)
    kwargs_116341 = {}
    # Getting the type of 'gca' (line 1545)
    gca_116340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1545, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 1545)
    gca_call_result_116342 = invoke(stypy.reporting.localization.Localization(__file__, 1545, 9), gca_116340, *[], **kwargs_116341)
    
    # Assigning a type to the variable 'ax' (line 1545)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1545, 4), 'ax', gca_call_result_116342)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'args' (line 1546)
    args_116343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 11), 'args')
    # Applying the 'not' unary operator (line 1546)
    result_not__116344 = python_operator(stypy.reporting.localization.Localization(__file__, 1546, 7), 'not', args_116343)
    
    
    # Getting the type of 'kwargs' (line 1546)
    kwargs_116345 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1546, 24), 'kwargs')
    # Applying the 'not' unary operator (line 1546)
    result_not__116346 = python_operator(stypy.reporting.localization.Localization(__file__, 1546, 20), 'not', kwargs_116345)
    
    # Applying the binary operator 'and' (line 1546)
    result_and_keyword_116347 = python_operator(stypy.reporting.localization.Localization(__file__, 1546, 7), 'and', result_not__116344, result_not__116346)
    
    # Testing the type of an if condition (line 1546)
    if_condition_116348 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1546, 4), result_and_keyword_116347)
    # Assigning a type to the variable 'if_condition_116348' (line 1546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1546, 4), 'if_condition_116348', if_condition_116348)
    # SSA begins for if statement (line 1546)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to get_ylim(...): (line 1547)
    # Processing the call keyword arguments (line 1547)
    kwargs_116351 = {}
    # Getting the type of 'ax' (line 1547)
    ax_116349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1547, 15), 'ax', False)
    # Obtaining the member 'get_ylim' of a type (line 1547)
    get_ylim_116350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1547, 15), ax_116349, 'get_ylim')
    # Calling get_ylim(args, kwargs) (line 1547)
    get_ylim_call_result_116352 = invoke(stypy.reporting.localization.Localization(__file__, 1547, 15), get_ylim_116350, *[], **kwargs_116351)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1547, 8), 'stypy_return_type', get_ylim_call_result_116352)
    # SSA join for if statement (line 1546)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 1548):
    
    # Assigning a Call to a Name (line 1548):
    
    # Call to set_ylim(...): (line 1548)
    # Getting the type of 'args' (line 1548)
    args_116355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 23), 'args', False)
    # Processing the call keyword arguments (line 1548)
    # Getting the type of 'kwargs' (line 1548)
    kwargs_116356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 31), 'kwargs', False)
    kwargs_116357 = {'kwargs_116356': kwargs_116356}
    # Getting the type of 'ax' (line 1548)
    ax_116353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1548, 10), 'ax', False)
    # Obtaining the member 'set_ylim' of a type (line 1548)
    set_ylim_116354 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1548, 10), ax_116353, 'set_ylim')
    # Calling set_ylim(args, kwargs) (line 1548)
    set_ylim_call_result_116358 = invoke(stypy.reporting.localization.Localization(__file__, 1548, 10), set_ylim_116354, *[args_116355], **kwargs_116357)
    
    # Assigning a type to the variable 'ret' (line 1548)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1548, 4), 'ret', set_ylim_call_result_116358)
    # Getting the type of 'ret' (line 1549)
    ret_116359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1549, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 1549)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1549, 4), 'stypy_return_type', ret_116359)
    
    # ################# End of 'ylim(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ylim' in the type store
    # Getting the type of 'stypy_return_type' (line 1525)
    stypy_return_type_116360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1525, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116360)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ylim'
    return stypy_return_type_116360

# Assigning a type to the variable 'ylim' (line 1525)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1525, 0), 'ylim', ylim)

@norecursion
def xscale(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'xscale'
    module_type_store = module_type_store.open_function_context('xscale', 1552, 0, False)
    
    # Passed parameters checking function
    xscale.stypy_localization = localization
    xscale.stypy_type_of_self = None
    xscale.stypy_type_store = module_type_store
    xscale.stypy_function_name = 'xscale'
    xscale.stypy_param_names_list = []
    xscale.stypy_varargs_param_name = 'args'
    xscale.stypy_kwargs_param_name = 'kwargs'
    xscale.stypy_call_defaults = defaults
    xscale.stypy_call_varargs = varargs
    xscale.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'xscale', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'xscale', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'xscale(...)' code ##################

    unicode_116361 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1566, (-1)), 'unicode', u'\n    Set the scaling of the *x*-axis.\n\n    call signature::\n\n      xscale(scale, **kwargs)\n\n    The available scales are: %(scale)s\n\n    Different keywords may be accepted, depending on the scale:\n\n    %(scale_docs)s\n    ')
    
    # Call to set_xscale(...): (line 1567)
    # Getting the type of 'args' (line 1567)
    args_116366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 22), 'args', False)
    # Processing the call keyword arguments (line 1567)
    # Getting the type of 'kwargs' (line 1567)
    kwargs_116367 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 30), 'kwargs', False)
    kwargs_116368 = {'kwargs_116367': kwargs_116367}
    
    # Call to gca(...): (line 1567)
    # Processing the call keyword arguments (line 1567)
    kwargs_116363 = {}
    # Getting the type of 'gca' (line 1567)
    gca_116362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1567, 4), 'gca', False)
    # Calling gca(args, kwargs) (line 1567)
    gca_call_result_116364 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 4), gca_116362, *[], **kwargs_116363)
    
    # Obtaining the member 'set_xscale' of a type (line 1567)
    set_xscale_116365 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1567, 4), gca_call_result_116364, 'set_xscale')
    # Calling set_xscale(args, kwargs) (line 1567)
    set_xscale_call_result_116369 = invoke(stypy.reporting.localization.Localization(__file__, 1567, 4), set_xscale_116365, *[args_116366], **kwargs_116368)
    
    
    # ################# End of 'xscale(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'xscale' in the type store
    # Getting the type of 'stypy_return_type' (line 1552)
    stypy_return_type_116370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1552, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116370)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'xscale'
    return stypy_return_type_116370

# Assigning a type to the variable 'xscale' (line 1552)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1552, 0), 'xscale', xscale)

@norecursion
def yscale(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'yscale'
    module_type_store = module_type_store.open_function_context('yscale', 1570, 0, False)
    
    # Passed parameters checking function
    yscale.stypy_localization = localization
    yscale.stypy_type_of_self = None
    yscale.stypy_type_store = module_type_store
    yscale.stypy_function_name = 'yscale'
    yscale.stypy_param_names_list = []
    yscale.stypy_varargs_param_name = 'args'
    yscale.stypy_kwargs_param_name = 'kwargs'
    yscale.stypy_call_defaults = defaults
    yscale.stypy_call_varargs = varargs
    yscale.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'yscale', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'yscale', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'yscale(...)' code ##################

    unicode_116371 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1584, (-1)), 'unicode', u'\n    Set the scaling of the *y*-axis.\n\n    call signature::\n\n      yscale(scale, **kwargs)\n\n    The available scales are: %(scale)s\n\n    Different keywords may be accepted, depending on the scale:\n\n    %(scale_docs)s\n    ')
    
    # Call to set_yscale(...): (line 1585)
    # Getting the type of 'args' (line 1585)
    args_116376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 22), 'args', False)
    # Processing the call keyword arguments (line 1585)
    # Getting the type of 'kwargs' (line 1585)
    kwargs_116377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 30), 'kwargs', False)
    kwargs_116378 = {'kwargs_116377': kwargs_116377}
    
    # Call to gca(...): (line 1585)
    # Processing the call keyword arguments (line 1585)
    kwargs_116373 = {}
    # Getting the type of 'gca' (line 1585)
    gca_116372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1585, 4), 'gca', False)
    # Calling gca(args, kwargs) (line 1585)
    gca_call_result_116374 = invoke(stypy.reporting.localization.Localization(__file__, 1585, 4), gca_116372, *[], **kwargs_116373)
    
    # Obtaining the member 'set_yscale' of a type (line 1585)
    set_yscale_116375 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1585, 4), gca_call_result_116374, 'set_yscale')
    # Calling set_yscale(args, kwargs) (line 1585)
    set_yscale_call_result_116379 = invoke(stypy.reporting.localization.Localization(__file__, 1585, 4), set_yscale_116375, *[args_116376], **kwargs_116378)
    
    
    # ################# End of 'yscale(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'yscale' in the type store
    # Getting the type of 'stypy_return_type' (line 1570)
    stypy_return_type_116380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1570, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116380)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'yscale'
    return stypy_return_type_116380

# Assigning a type to the variable 'yscale' (line 1570)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1570, 0), 'yscale', yscale)

@norecursion
def xticks(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'xticks'
    module_type_store = module_type_store.open_function_context('xticks', 1588, 0, False)
    
    # Passed parameters checking function
    xticks.stypy_localization = localization
    xticks.stypy_type_of_self = None
    xticks.stypy_type_store = module_type_store
    xticks.stypy_function_name = 'xticks'
    xticks.stypy_param_names_list = []
    xticks.stypy_varargs_param_name = 'args'
    xticks.stypy_kwargs_param_name = 'kwargs'
    xticks.stypy_call_defaults = defaults
    xticks.stypy_call_varargs = varargs
    xticks.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'xticks', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'xticks', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'xticks(...)' code ##################

    unicode_116381 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1608, (-1)), 'unicode', u"\n    Get or set the *x*-limits of the current tick locations and labels.\n\n    ::\n\n      # return locs, labels where locs is an array of tick locations and\n      # labels is an array of tick labels.\n      locs, labels = xticks()\n\n      # set the locations of the xticks\n      xticks( arange(6) )\n\n      # set the locations and labels of the xticks\n      xticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )\n\n    The keyword args, if any, are :class:`~matplotlib.text.Text`\n    properties. For example, to rotate long labels::\n\n      xticks( arange(12), calendar.month_name[1:13], rotation=17 )\n    ")
    
    # Assigning a Call to a Name (line 1609):
    
    # Assigning a Call to a Name (line 1609):
    
    # Call to gca(...): (line 1609)
    # Processing the call keyword arguments (line 1609)
    kwargs_116383 = {}
    # Getting the type of 'gca' (line 1609)
    gca_116382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1609, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 1609)
    gca_call_result_116384 = invoke(stypy.reporting.localization.Localization(__file__, 1609, 9), gca_116382, *[], **kwargs_116383)
    
    # Assigning a type to the variable 'ax' (line 1609)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1609, 4), 'ax', gca_call_result_116384)
    
    
    
    # Call to len(...): (line 1611)
    # Processing the call arguments (line 1611)
    # Getting the type of 'args' (line 1611)
    args_116386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 11), 'args', False)
    # Processing the call keyword arguments (line 1611)
    kwargs_116387 = {}
    # Getting the type of 'len' (line 1611)
    len_116385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1611, 7), 'len', False)
    # Calling len(args, kwargs) (line 1611)
    len_call_result_116388 = invoke(stypy.reporting.localization.Localization(__file__, 1611, 7), len_116385, *[args_116386], **kwargs_116387)
    
    int_116389 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1611, 18), 'int')
    # Applying the binary operator '==' (line 1611)
    result_eq_116390 = python_operator(stypy.reporting.localization.Localization(__file__, 1611, 7), '==', len_call_result_116388, int_116389)
    
    # Testing the type of an if condition (line 1611)
    if_condition_116391 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1611, 4), result_eq_116390)
    # Assigning a type to the variable 'if_condition_116391' (line 1611)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1611, 4), 'if_condition_116391', if_condition_116391)
    # SSA begins for if statement (line 1611)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1612):
    
    # Assigning a Call to a Name (line 1612):
    
    # Call to get_xticks(...): (line 1612)
    # Processing the call keyword arguments (line 1612)
    kwargs_116394 = {}
    # Getting the type of 'ax' (line 1612)
    ax_116392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1612, 15), 'ax', False)
    # Obtaining the member 'get_xticks' of a type (line 1612)
    get_xticks_116393 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1612, 15), ax_116392, 'get_xticks')
    # Calling get_xticks(args, kwargs) (line 1612)
    get_xticks_call_result_116395 = invoke(stypy.reporting.localization.Localization(__file__, 1612, 15), get_xticks_116393, *[], **kwargs_116394)
    
    # Assigning a type to the variable 'locs' (line 1612)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1612, 8), 'locs', get_xticks_call_result_116395)
    
    # Assigning a Call to a Name (line 1613):
    
    # Assigning a Call to a Name (line 1613):
    
    # Call to get_xticklabels(...): (line 1613)
    # Processing the call keyword arguments (line 1613)
    kwargs_116398 = {}
    # Getting the type of 'ax' (line 1613)
    ax_116396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1613, 17), 'ax', False)
    # Obtaining the member 'get_xticklabels' of a type (line 1613)
    get_xticklabels_116397 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1613, 17), ax_116396, 'get_xticklabels')
    # Calling get_xticklabels(args, kwargs) (line 1613)
    get_xticklabels_call_result_116399 = invoke(stypy.reporting.localization.Localization(__file__, 1613, 17), get_xticklabels_116397, *[], **kwargs_116398)
    
    # Assigning a type to the variable 'labels' (line 1613)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1613, 8), 'labels', get_xticklabels_call_result_116399)
    # SSA branch for the else part of an if statement (line 1611)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to len(...): (line 1614)
    # Processing the call arguments (line 1614)
    # Getting the type of 'args' (line 1614)
    args_116401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 13), 'args', False)
    # Processing the call keyword arguments (line 1614)
    kwargs_116402 = {}
    # Getting the type of 'len' (line 1614)
    len_116400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1614, 9), 'len', False)
    # Calling len(args, kwargs) (line 1614)
    len_call_result_116403 = invoke(stypy.reporting.localization.Localization(__file__, 1614, 9), len_116400, *[args_116401], **kwargs_116402)
    
    int_116404 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1614, 20), 'int')
    # Applying the binary operator '==' (line 1614)
    result_eq_116405 = python_operator(stypy.reporting.localization.Localization(__file__, 1614, 9), '==', len_call_result_116403, int_116404)
    
    # Testing the type of an if condition (line 1614)
    if_condition_116406 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1614, 9), result_eq_116405)
    # Assigning a type to the variable 'if_condition_116406' (line 1614)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1614, 9), 'if_condition_116406', if_condition_116406)
    # SSA begins for if statement (line 1614)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1615):
    
    # Assigning a Call to a Name (line 1615):
    
    # Call to set_xticks(...): (line 1615)
    # Processing the call arguments (line 1615)
    
    # Obtaining the type of the subscript
    int_116409 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1615, 34), 'int')
    # Getting the type of 'args' (line 1615)
    args_116410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 29), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1615)
    getitem___116411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1615, 29), args_116410, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1615)
    subscript_call_result_116412 = invoke(stypy.reporting.localization.Localization(__file__, 1615, 29), getitem___116411, int_116409)
    
    # Processing the call keyword arguments (line 1615)
    kwargs_116413 = {}
    # Getting the type of 'ax' (line 1615)
    ax_116407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1615, 15), 'ax', False)
    # Obtaining the member 'set_xticks' of a type (line 1615)
    set_xticks_116408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1615, 15), ax_116407, 'set_xticks')
    # Calling set_xticks(args, kwargs) (line 1615)
    set_xticks_call_result_116414 = invoke(stypy.reporting.localization.Localization(__file__, 1615, 15), set_xticks_116408, *[subscript_call_result_116412], **kwargs_116413)
    
    # Assigning a type to the variable 'locs' (line 1615)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1615, 8), 'locs', set_xticks_call_result_116414)
    
    # Assigning a Call to a Name (line 1616):
    
    # Assigning a Call to a Name (line 1616):
    
    # Call to get_xticklabels(...): (line 1616)
    # Processing the call keyword arguments (line 1616)
    kwargs_116417 = {}
    # Getting the type of 'ax' (line 1616)
    ax_116415 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1616, 17), 'ax', False)
    # Obtaining the member 'get_xticklabels' of a type (line 1616)
    get_xticklabels_116416 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1616, 17), ax_116415, 'get_xticklabels')
    # Calling get_xticklabels(args, kwargs) (line 1616)
    get_xticklabels_call_result_116418 = invoke(stypy.reporting.localization.Localization(__file__, 1616, 17), get_xticklabels_116416, *[], **kwargs_116417)
    
    # Assigning a type to the variable 'labels' (line 1616)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1616, 8), 'labels', get_xticklabels_call_result_116418)
    # SSA branch for the else part of an if statement (line 1614)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to len(...): (line 1617)
    # Processing the call arguments (line 1617)
    # Getting the type of 'args' (line 1617)
    args_116420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 13), 'args', False)
    # Processing the call keyword arguments (line 1617)
    kwargs_116421 = {}
    # Getting the type of 'len' (line 1617)
    len_116419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1617, 9), 'len', False)
    # Calling len(args, kwargs) (line 1617)
    len_call_result_116422 = invoke(stypy.reporting.localization.Localization(__file__, 1617, 9), len_116419, *[args_116420], **kwargs_116421)
    
    int_116423 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1617, 20), 'int')
    # Applying the binary operator '==' (line 1617)
    result_eq_116424 = python_operator(stypy.reporting.localization.Localization(__file__, 1617, 9), '==', len_call_result_116422, int_116423)
    
    # Testing the type of an if condition (line 1617)
    if_condition_116425 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1617, 9), result_eq_116424)
    # Assigning a type to the variable 'if_condition_116425' (line 1617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1617, 9), 'if_condition_116425', if_condition_116425)
    # SSA begins for if statement (line 1617)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1618):
    
    # Assigning a Call to a Name (line 1618):
    
    # Call to set_xticks(...): (line 1618)
    # Processing the call arguments (line 1618)
    
    # Obtaining the type of the subscript
    int_116428 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1618, 34), 'int')
    # Getting the type of 'args' (line 1618)
    args_116429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 29), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1618)
    getitem___116430 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1618, 29), args_116429, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1618)
    subscript_call_result_116431 = invoke(stypy.reporting.localization.Localization(__file__, 1618, 29), getitem___116430, int_116428)
    
    # Processing the call keyword arguments (line 1618)
    kwargs_116432 = {}
    # Getting the type of 'ax' (line 1618)
    ax_116426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1618, 15), 'ax', False)
    # Obtaining the member 'set_xticks' of a type (line 1618)
    set_xticks_116427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1618, 15), ax_116426, 'set_xticks')
    # Calling set_xticks(args, kwargs) (line 1618)
    set_xticks_call_result_116433 = invoke(stypy.reporting.localization.Localization(__file__, 1618, 15), set_xticks_116427, *[subscript_call_result_116431], **kwargs_116432)
    
    # Assigning a type to the variable 'locs' (line 1618)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1618, 8), 'locs', set_xticks_call_result_116433)
    
    # Assigning a Call to a Name (line 1619):
    
    # Assigning a Call to a Name (line 1619):
    
    # Call to set_xticklabels(...): (line 1619)
    # Processing the call arguments (line 1619)
    
    # Obtaining the type of the subscript
    int_116436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1619, 41), 'int')
    # Getting the type of 'args' (line 1619)
    args_116437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 36), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1619)
    getitem___116438 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1619, 36), args_116437, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1619)
    subscript_call_result_116439 = invoke(stypy.reporting.localization.Localization(__file__, 1619, 36), getitem___116438, int_116436)
    
    # Processing the call keyword arguments (line 1619)
    # Getting the type of 'kwargs' (line 1619)
    kwargs_116440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 47), 'kwargs', False)
    kwargs_116441 = {'kwargs_116440': kwargs_116440}
    # Getting the type of 'ax' (line 1619)
    ax_116434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1619, 17), 'ax', False)
    # Obtaining the member 'set_xticklabels' of a type (line 1619)
    set_xticklabels_116435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1619, 17), ax_116434, 'set_xticklabels')
    # Calling set_xticklabels(args, kwargs) (line 1619)
    set_xticklabels_call_result_116442 = invoke(stypy.reporting.localization.Localization(__file__, 1619, 17), set_xticklabels_116435, *[subscript_call_result_116439], **kwargs_116441)
    
    # Assigning a type to the variable 'labels' (line 1619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1619, 8), 'labels', set_xticklabels_call_result_116442)
    # SSA branch for the else part of an if statement (line 1617)
    module_type_store.open_ssa_branch('else')
    
    # Call to TypeError(...): (line 1620)
    # Processing the call arguments (line 1620)
    unicode_116444 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1620, 26), 'unicode', u'Illegal number of arguments to xticks')
    # Processing the call keyword arguments (line 1620)
    kwargs_116445 = {}
    # Getting the type of 'TypeError' (line 1620)
    TypeError_116443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1620, 16), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1620)
    TypeError_call_result_116446 = invoke(stypy.reporting.localization.Localization(__file__, 1620, 16), TypeError_116443, *[unicode_116444], **kwargs_116445)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1620, 10), TypeError_call_result_116446, 'raise parameter', BaseException)
    # SSA join for if statement (line 1617)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1614)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1611)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to len(...): (line 1621)
    # Processing the call arguments (line 1621)
    # Getting the type of 'kwargs' (line 1621)
    kwargs_116448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 11), 'kwargs', False)
    # Processing the call keyword arguments (line 1621)
    kwargs_116449 = {}
    # Getting the type of 'len' (line 1621)
    len_116447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1621, 7), 'len', False)
    # Calling len(args, kwargs) (line 1621)
    len_call_result_116450 = invoke(stypy.reporting.localization.Localization(__file__, 1621, 7), len_116447, *[kwargs_116448], **kwargs_116449)
    
    # Testing the type of an if condition (line 1621)
    if_condition_116451 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1621, 4), len_call_result_116450)
    # Assigning a type to the variable 'if_condition_116451' (line 1621)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1621, 4), 'if_condition_116451', if_condition_116451)
    # SSA begins for if statement (line 1621)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'labels' (line 1622)
    labels_116452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1622, 17), 'labels')
    # Testing the type of a for loop iterable (line 1622)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1622, 8), labels_116452)
    # Getting the type of the for loop variable (line 1622)
    for_loop_var_116453 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1622, 8), labels_116452)
    # Assigning a type to the variable 'l' (line 1622)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1622, 8), 'l', for_loop_var_116453)
    # SSA begins for a for statement (line 1622)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to update(...): (line 1623)
    # Processing the call arguments (line 1623)
    # Getting the type of 'kwargs' (line 1623)
    kwargs_116456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 21), 'kwargs', False)
    # Processing the call keyword arguments (line 1623)
    kwargs_116457 = {}
    # Getting the type of 'l' (line 1623)
    l_116454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1623, 12), 'l', False)
    # Obtaining the member 'update' of a type (line 1623)
    update_116455 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1623, 12), l_116454, 'update')
    # Calling update(args, kwargs) (line 1623)
    update_call_result_116458 = invoke(stypy.reporting.localization.Localization(__file__, 1623, 12), update_116455, *[kwargs_116456], **kwargs_116457)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1621)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1625)
    tuple_116459 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, 11), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1625)
    # Adding element type (line 1625)
    # Getting the type of 'locs' (line 1625)
    locs_116460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 11), 'locs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1625, 11), tuple_116459, locs_116460)
    # Adding element type (line 1625)
    
    # Call to silent_list(...): (line 1625)
    # Processing the call arguments (line 1625)
    unicode_116462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1625, 29), 'unicode', u'Text xticklabel')
    # Getting the type of 'labels' (line 1625)
    labels_116463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 48), 'labels', False)
    # Processing the call keyword arguments (line 1625)
    kwargs_116464 = {}
    # Getting the type of 'silent_list' (line 1625)
    silent_list_116461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1625, 17), 'silent_list', False)
    # Calling silent_list(args, kwargs) (line 1625)
    silent_list_call_result_116465 = invoke(stypy.reporting.localization.Localization(__file__, 1625, 17), silent_list_116461, *[unicode_116462, labels_116463], **kwargs_116464)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1625, 11), tuple_116459, silent_list_call_result_116465)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1625)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1625, 4), 'stypy_return_type', tuple_116459)
    
    # ################# End of 'xticks(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'xticks' in the type store
    # Getting the type of 'stypy_return_type' (line 1588)
    stypy_return_type_116466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1588, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116466)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'xticks'
    return stypy_return_type_116466

# Assigning a type to the variable 'xticks' (line 1588)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1588, 0), 'xticks', xticks)

@norecursion
def yticks(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'yticks'
    module_type_store = module_type_store.open_function_context('yticks', 1628, 0, False)
    
    # Passed parameters checking function
    yticks.stypy_localization = localization
    yticks.stypy_type_of_self = None
    yticks.stypy_type_store = module_type_store
    yticks.stypy_function_name = 'yticks'
    yticks.stypy_param_names_list = []
    yticks.stypy_varargs_param_name = 'args'
    yticks.stypy_kwargs_param_name = 'kwargs'
    yticks.stypy_call_defaults = defaults
    yticks.stypy_call_varargs = varargs
    yticks.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'yticks', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'yticks', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'yticks(...)' code ##################

    unicode_116467 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1648, (-1)), 'unicode', u"\n    Get or set the *y*-limits of the current tick locations and labels.\n\n    ::\n\n      # return locs, labels where locs is an array of tick locations and\n      # labels is an array of tick labels.\n      locs, labels = yticks()\n\n      # set the locations of the yticks\n      yticks( arange(6) )\n\n      # set the locations and labels of the yticks\n      yticks( arange(5), ('Tom', 'Dick', 'Harry', 'Sally', 'Sue') )\n\n    The keyword args, if any, are :class:`~matplotlib.text.Text`\n    properties. For example, to rotate long labels::\n\n      yticks( arange(12), calendar.month_name[1:13], rotation=45 )\n    ")
    
    # Assigning a Call to a Name (line 1649):
    
    # Assigning a Call to a Name (line 1649):
    
    # Call to gca(...): (line 1649)
    # Processing the call keyword arguments (line 1649)
    kwargs_116469 = {}
    # Getting the type of 'gca' (line 1649)
    gca_116468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1649, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 1649)
    gca_call_result_116470 = invoke(stypy.reporting.localization.Localization(__file__, 1649, 9), gca_116468, *[], **kwargs_116469)
    
    # Assigning a type to the variable 'ax' (line 1649)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1649, 4), 'ax', gca_call_result_116470)
    
    
    
    # Call to len(...): (line 1651)
    # Processing the call arguments (line 1651)
    # Getting the type of 'args' (line 1651)
    args_116472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 11), 'args', False)
    # Processing the call keyword arguments (line 1651)
    kwargs_116473 = {}
    # Getting the type of 'len' (line 1651)
    len_116471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1651, 7), 'len', False)
    # Calling len(args, kwargs) (line 1651)
    len_call_result_116474 = invoke(stypy.reporting.localization.Localization(__file__, 1651, 7), len_116471, *[args_116472], **kwargs_116473)
    
    int_116475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1651, 18), 'int')
    # Applying the binary operator '==' (line 1651)
    result_eq_116476 = python_operator(stypy.reporting.localization.Localization(__file__, 1651, 7), '==', len_call_result_116474, int_116475)
    
    # Testing the type of an if condition (line 1651)
    if_condition_116477 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1651, 4), result_eq_116476)
    # Assigning a type to the variable 'if_condition_116477' (line 1651)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1651, 4), 'if_condition_116477', if_condition_116477)
    # SSA begins for if statement (line 1651)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1652):
    
    # Assigning a Call to a Name (line 1652):
    
    # Call to get_yticks(...): (line 1652)
    # Processing the call keyword arguments (line 1652)
    kwargs_116480 = {}
    # Getting the type of 'ax' (line 1652)
    ax_116478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1652, 15), 'ax', False)
    # Obtaining the member 'get_yticks' of a type (line 1652)
    get_yticks_116479 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1652, 15), ax_116478, 'get_yticks')
    # Calling get_yticks(args, kwargs) (line 1652)
    get_yticks_call_result_116481 = invoke(stypy.reporting.localization.Localization(__file__, 1652, 15), get_yticks_116479, *[], **kwargs_116480)
    
    # Assigning a type to the variable 'locs' (line 1652)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1652, 8), 'locs', get_yticks_call_result_116481)
    
    # Assigning a Call to a Name (line 1653):
    
    # Assigning a Call to a Name (line 1653):
    
    # Call to get_yticklabels(...): (line 1653)
    # Processing the call keyword arguments (line 1653)
    kwargs_116484 = {}
    # Getting the type of 'ax' (line 1653)
    ax_116482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1653, 17), 'ax', False)
    # Obtaining the member 'get_yticklabels' of a type (line 1653)
    get_yticklabels_116483 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1653, 17), ax_116482, 'get_yticklabels')
    # Calling get_yticklabels(args, kwargs) (line 1653)
    get_yticklabels_call_result_116485 = invoke(stypy.reporting.localization.Localization(__file__, 1653, 17), get_yticklabels_116483, *[], **kwargs_116484)
    
    # Assigning a type to the variable 'labels' (line 1653)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1653, 8), 'labels', get_yticklabels_call_result_116485)
    # SSA branch for the else part of an if statement (line 1651)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to len(...): (line 1654)
    # Processing the call arguments (line 1654)
    # Getting the type of 'args' (line 1654)
    args_116487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 13), 'args', False)
    # Processing the call keyword arguments (line 1654)
    kwargs_116488 = {}
    # Getting the type of 'len' (line 1654)
    len_116486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1654, 9), 'len', False)
    # Calling len(args, kwargs) (line 1654)
    len_call_result_116489 = invoke(stypy.reporting.localization.Localization(__file__, 1654, 9), len_116486, *[args_116487], **kwargs_116488)
    
    int_116490 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1654, 20), 'int')
    # Applying the binary operator '==' (line 1654)
    result_eq_116491 = python_operator(stypy.reporting.localization.Localization(__file__, 1654, 9), '==', len_call_result_116489, int_116490)
    
    # Testing the type of an if condition (line 1654)
    if_condition_116492 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1654, 9), result_eq_116491)
    # Assigning a type to the variable 'if_condition_116492' (line 1654)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1654, 9), 'if_condition_116492', if_condition_116492)
    # SSA begins for if statement (line 1654)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1655):
    
    # Assigning a Call to a Name (line 1655):
    
    # Call to set_yticks(...): (line 1655)
    # Processing the call arguments (line 1655)
    
    # Obtaining the type of the subscript
    int_116495 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1655, 34), 'int')
    # Getting the type of 'args' (line 1655)
    args_116496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 29), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1655)
    getitem___116497 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 29), args_116496, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1655)
    subscript_call_result_116498 = invoke(stypy.reporting.localization.Localization(__file__, 1655, 29), getitem___116497, int_116495)
    
    # Processing the call keyword arguments (line 1655)
    kwargs_116499 = {}
    # Getting the type of 'ax' (line 1655)
    ax_116493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1655, 15), 'ax', False)
    # Obtaining the member 'set_yticks' of a type (line 1655)
    set_yticks_116494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1655, 15), ax_116493, 'set_yticks')
    # Calling set_yticks(args, kwargs) (line 1655)
    set_yticks_call_result_116500 = invoke(stypy.reporting.localization.Localization(__file__, 1655, 15), set_yticks_116494, *[subscript_call_result_116498], **kwargs_116499)
    
    # Assigning a type to the variable 'locs' (line 1655)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1655, 8), 'locs', set_yticks_call_result_116500)
    
    # Assigning a Call to a Name (line 1656):
    
    # Assigning a Call to a Name (line 1656):
    
    # Call to get_yticklabels(...): (line 1656)
    # Processing the call keyword arguments (line 1656)
    kwargs_116503 = {}
    # Getting the type of 'ax' (line 1656)
    ax_116501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1656, 17), 'ax', False)
    # Obtaining the member 'get_yticklabels' of a type (line 1656)
    get_yticklabels_116502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1656, 17), ax_116501, 'get_yticklabels')
    # Calling get_yticklabels(args, kwargs) (line 1656)
    get_yticklabels_call_result_116504 = invoke(stypy.reporting.localization.Localization(__file__, 1656, 17), get_yticklabels_116502, *[], **kwargs_116503)
    
    # Assigning a type to the variable 'labels' (line 1656)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1656, 8), 'labels', get_yticklabels_call_result_116504)
    # SSA branch for the else part of an if statement (line 1654)
    module_type_store.open_ssa_branch('else')
    
    
    
    # Call to len(...): (line 1657)
    # Processing the call arguments (line 1657)
    # Getting the type of 'args' (line 1657)
    args_116506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 13), 'args', False)
    # Processing the call keyword arguments (line 1657)
    kwargs_116507 = {}
    # Getting the type of 'len' (line 1657)
    len_116505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1657, 9), 'len', False)
    # Calling len(args, kwargs) (line 1657)
    len_call_result_116508 = invoke(stypy.reporting.localization.Localization(__file__, 1657, 9), len_116505, *[args_116506], **kwargs_116507)
    
    int_116509 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1657, 20), 'int')
    # Applying the binary operator '==' (line 1657)
    result_eq_116510 = python_operator(stypy.reporting.localization.Localization(__file__, 1657, 9), '==', len_call_result_116508, int_116509)
    
    # Testing the type of an if condition (line 1657)
    if_condition_116511 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1657, 9), result_eq_116510)
    # Assigning a type to the variable 'if_condition_116511' (line 1657)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1657, 9), 'if_condition_116511', if_condition_116511)
    # SSA begins for if statement (line 1657)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1658):
    
    # Assigning a Call to a Name (line 1658):
    
    # Call to set_yticks(...): (line 1658)
    # Processing the call arguments (line 1658)
    
    # Obtaining the type of the subscript
    int_116514 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1658, 34), 'int')
    # Getting the type of 'args' (line 1658)
    args_116515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 29), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1658)
    getitem___116516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1658, 29), args_116515, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1658)
    subscript_call_result_116517 = invoke(stypy.reporting.localization.Localization(__file__, 1658, 29), getitem___116516, int_116514)
    
    # Processing the call keyword arguments (line 1658)
    kwargs_116518 = {}
    # Getting the type of 'ax' (line 1658)
    ax_116512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1658, 15), 'ax', False)
    # Obtaining the member 'set_yticks' of a type (line 1658)
    set_yticks_116513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1658, 15), ax_116512, 'set_yticks')
    # Calling set_yticks(args, kwargs) (line 1658)
    set_yticks_call_result_116519 = invoke(stypy.reporting.localization.Localization(__file__, 1658, 15), set_yticks_116513, *[subscript_call_result_116517], **kwargs_116518)
    
    # Assigning a type to the variable 'locs' (line 1658)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1658, 8), 'locs', set_yticks_call_result_116519)
    
    # Assigning a Call to a Name (line 1659):
    
    # Assigning a Call to a Name (line 1659):
    
    # Call to set_yticklabels(...): (line 1659)
    # Processing the call arguments (line 1659)
    
    # Obtaining the type of the subscript
    int_116522 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1659, 41), 'int')
    # Getting the type of 'args' (line 1659)
    args_116523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 36), 'args', False)
    # Obtaining the member '__getitem__' of a type (line 1659)
    getitem___116524 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1659, 36), args_116523, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 1659)
    subscript_call_result_116525 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 36), getitem___116524, int_116522)
    
    # Processing the call keyword arguments (line 1659)
    # Getting the type of 'kwargs' (line 1659)
    kwargs_116526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 47), 'kwargs', False)
    kwargs_116527 = {'kwargs_116526': kwargs_116526}
    # Getting the type of 'ax' (line 1659)
    ax_116520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1659, 17), 'ax', False)
    # Obtaining the member 'set_yticklabels' of a type (line 1659)
    set_yticklabels_116521 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1659, 17), ax_116520, 'set_yticklabels')
    # Calling set_yticklabels(args, kwargs) (line 1659)
    set_yticklabels_call_result_116528 = invoke(stypy.reporting.localization.Localization(__file__, 1659, 17), set_yticklabels_116521, *[subscript_call_result_116525], **kwargs_116527)
    
    # Assigning a type to the variable 'labels' (line 1659)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1659, 8), 'labels', set_yticklabels_call_result_116528)
    # SSA branch for the else part of an if statement (line 1657)
    module_type_store.open_ssa_branch('else')
    
    # Call to TypeError(...): (line 1660)
    # Processing the call arguments (line 1660)
    unicode_116530 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1660, 26), 'unicode', u'Illegal number of arguments to yticks')
    # Processing the call keyword arguments (line 1660)
    kwargs_116531 = {}
    # Getting the type of 'TypeError' (line 1660)
    TypeError_116529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1660, 16), 'TypeError', False)
    # Calling TypeError(args, kwargs) (line 1660)
    TypeError_call_result_116532 = invoke(stypy.reporting.localization.Localization(__file__, 1660, 16), TypeError_116529, *[unicode_116530], **kwargs_116531)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1660, 10), TypeError_call_result_116532, 'raise parameter', BaseException)
    # SSA join for if statement (line 1657)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1654)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1651)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to len(...): (line 1661)
    # Processing the call arguments (line 1661)
    # Getting the type of 'kwargs' (line 1661)
    kwargs_116534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 11), 'kwargs', False)
    # Processing the call keyword arguments (line 1661)
    kwargs_116535 = {}
    # Getting the type of 'len' (line 1661)
    len_116533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1661, 7), 'len', False)
    # Calling len(args, kwargs) (line 1661)
    len_call_result_116536 = invoke(stypy.reporting.localization.Localization(__file__, 1661, 7), len_116533, *[kwargs_116534], **kwargs_116535)
    
    # Testing the type of an if condition (line 1661)
    if_condition_116537 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1661, 4), len_call_result_116536)
    # Assigning a type to the variable 'if_condition_116537' (line 1661)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1661, 4), 'if_condition_116537', if_condition_116537)
    # SSA begins for if statement (line 1661)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Getting the type of 'labels' (line 1662)
    labels_116538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1662, 17), 'labels')
    # Testing the type of a for loop iterable (line 1662)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1662, 8), labels_116538)
    # Getting the type of the for loop variable (line 1662)
    for_loop_var_116539 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1662, 8), labels_116538)
    # Assigning a type to the variable 'l' (line 1662)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1662, 8), 'l', for_loop_var_116539)
    # SSA begins for a for statement (line 1662)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to update(...): (line 1663)
    # Processing the call arguments (line 1663)
    # Getting the type of 'kwargs' (line 1663)
    kwargs_116542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 21), 'kwargs', False)
    # Processing the call keyword arguments (line 1663)
    kwargs_116543 = {}
    # Getting the type of 'l' (line 1663)
    l_116540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1663, 12), 'l', False)
    # Obtaining the member 'update' of a type (line 1663)
    update_116541 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1663, 12), l_116540, 'update')
    # Calling update(args, kwargs) (line 1663)
    update_call_result_116544 = invoke(stypy.reporting.localization.Localization(__file__, 1663, 12), update_116541, *[kwargs_116542], **kwargs_116543)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 1661)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1666)
    tuple_116545 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1666, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1666)
    # Adding element type (line 1666)
    # Getting the type of 'locs' (line 1666)
    locs_116546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1666, 13), 'locs')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1666, 13), tuple_116545, locs_116546)
    # Adding element type (line 1666)
    
    # Call to silent_list(...): (line 1667)
    # Processing the call arguments (line 1667)
    unicode_116548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1667, 25), 'unicode', u'Text yticklabel')
    # Getting the type of 'labels' (line 1667)
    labels_116549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 44), 'labels', False)
    # Processing the call keyword arguments (line 1667)
    kwargs_116550 = {}
    # Getting the type of 'silent_list' (line 1667)
    silent_list_116547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1667, 13), 'silent_list', False)
    # Calling silent_list(args, kwargs) (line 1667)
    silent_list_call_result_116551 = invoke(stypy.reporting.localization.Localization(__file__, 1667, 13), silent_list_116547, *[unicode_116548, labels_116549], **kwargs_116550)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1666, 13), tuple_116545, silent_list_call_result_116551)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1666)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1666, 4), 'stypy_return_type', tuple_116545)
    
    # ################# End of 'yticks(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'yticks' in the type store
    # Getting the type of 'stypy_return_type' (line 1628)
    stypy_return_type_116552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1628, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116552)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'yticks'
    return stypy_return_type_116552

# Assigning a type to the variable 'yticks' (line 1628)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1628, 0), 'yticks', yticks)

@norecursion
def minorticks_on(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'minorticks_on'
    module_type_store = module_type_store.open_function_context('minorticks_on', 1671, 0, False)
    
    # Passed parameters checking function
    minorticks_on.stypy_localization = localization
    minorticks_on.stypy_type_of_self = None
    minorticks_on.stypy_type_store = module_type_store
    minorticks_on.stypy_function_name = 'minorticks_on'
    minorticks_on.stypy_param_names_list = []
    minorticks_on.stypy_varargs_param_name = None
    minorticks_on.stypy_kwargs_param_name = None
    minorticks_on.stypy_call_defaults = defaults
    minorticks_on.stypy_call_varargs = varargs
    minorticks_on.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'minorticks_on', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'minorticks_on', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'minorticks_on(...)' code ##################

    unicode_116553 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1677, (-1)), 'unicode', u'\n    Display minor ticks on the current plot.\n\n    Displaying minor ticks reduces performance; turn them off using\n    minorticks_off() if drawing speed is a problem.\n    ')
    
    # Call to minorticks_on(...): (line 1678)
    # Processing the call keyword arguments (line 1678)
    kwargs_116558 = {}
    
    # Call to gca(...): (line 1678)
    # Processing the call keyword arguments (line 1678)
    kwargs_116555 = {}
    # Getting the type of 'gca' (line 1678)
    gca_116554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1678, 4), 'gca', False)
    # Calling gca(args, kwargs) (line 1678)
    gca_call_result_116556 = invoke(stypy.reporting.localization.Localization(__file__, 1678, 4), gca_116554, *[], **kwargs_116555)
    
    # Obtaining the member 'minorticks_on' of a type (line 1678)
    minorticks_on_116557 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1678, 4), gca_call_result_116556, 'minorticks_on')
    # Calling minorticks_on(args, kwargs) (line 1678)
    minorticks_on_call_result_116559 = invoke(stypy.reporting.localization.Localization(__file__, 1678, 4), minorticks_on_116557, *[], **kwargs_116558)
    
    
    # ################# End of 'minorticks_on(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'minorticks_on' in the type store
    # Getting the type of 'stypy_return_type' (line 1671)
    stypy_return_type_116560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1671, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116560)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'minorticks_on'
    return stypy_return_type_116560

# Assigning a type to the variable 'minorticks_on' (line 1671)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1671, 0), 'minorticks_on', minorticks_on)

@norecursion
def minorticks_off(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'minorticks_off'
    module_type_store = module_type_store.open_function_context('minorticks_off', 1681, 0, False)
    
    # Passed parameters checking function
    minorticks_off.stypy_localization = localization
    minorticks_off.stypy_type_of_self = None
    minorticks_off.stypy_type_store = module_type_store
    minorticks_off.stypy_function_name = 'minorticks_off'
    minorticks_off.stypy_param_names_list = []
    minorticks_off.stypy_varargs_param_name = None
    minorticks_off.stypy_kwargs_param_name = None
    minorticks_off.stypy_call_defaults = defaults
    minorticks_off.stypy_call_varargs = varargs
    minorticks_off.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'minorticks_off', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'minorticks_off', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'minorticks_off(...)' code ##################

    unicode_116561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1684, (-1)), 'unicode', u'\n    Remove minor ticks from the current plot.\n    ')
    
    # Call to minorticks_off(...): (line 1685)
    # Processing the call keyword arguments (line 1685)
    kwargs_116566 = {}
    
    # Call to gca(...): (line 1685)
    # Processing the call keyword arguments (line 1685)
    kwargs_116563 = {}
    # Getting the type of 'gca' (line 1685)
    gca_116562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1685, 4), 'gca', False)
    # Calling gca(args, kwargs) (line 1685)
    gca_call_result_116564 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 4), gca_116562, *[], **kwargs_116563)
    
    # Obtaining the member 'minorticks_off' of a type (line 1685)
    minorticks_off_116565 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1685, 4), gca_call_result_116564, 'minorticks_off')
    # Calling minorticks_off(args, kwargs) (line 1685)
    minorticks_off_call_result_116567 = invoke(stypy.reporting.localization.Localization(__file__, 1685, 4), minorticks_off_116565, *[], **kwargs_116566)
    
    
    # ################# End of 'minorticks_off(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'minorticks_off' in the type store
    # Getting the type of 'stypy_return_type' (line 1681)
    stypy_return_type_116568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1681, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116568)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'minorticks_off'
    return stypy_return_type_116568

# Assigning a type to the variable 'minorticks_off' (line 1681)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1681, 0), 'minorticks_off', minorticks_off)

@norecursion
def rgrids(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'rgrids'
    module_type_store = module_type_store.open_function_context('rgrids', 1688, 0, False)
    
    # Passed parameters checking function
    rgrids.stypy_localization = localization
    rgrids.stypy_type_of_self = None
    rgrids.stypy_type_store = module_type_store
    rgrids.stypy_function_name = 'rgrids'
    rgrids.stypy_param_names_list = []
    rgrids.stypy_varargs_param_name = 'args'
    rgrids.stypy_kwargs_param_name = 'kwargs'
    rgrids.stypy_call_defaults = defaults
    rgrids.stypy_call_varargs = varargs
    rgrids.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'rgrids', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'rgrids', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'rgrids(...)' code ##################

    unicode_116569 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1718, (-1)), 'unicode', u"\n    Get or set the radial gridlines on a polar plot.\n\n    call signatures::\n\n      lines, labels = rgrids()\n      lines, labels = rgrids(radii, labels=None, angle=22.5, **kwargs)\n\n    When called with no arguments, :func:`rgrid` simply returns the\n    tuple (*lines*, *labels*), where *lines* is an array of radial\n    gridlines (:class:`~matplotlib.lines.Line2D` instances) and\n    *labels* is an array of tick labels\n    (:class:`~matplotlib.text.Text` instances). When called with\n    arguments, the labels will appear at the specified radial\n    distances and angles.\n\n    *labels*, if not *None*, is a len(*radii*) list of strings of the\n    labels to use at each angle.\n\n    If *labels* is None, the rformatter will be used\n\n    Examples::\n\n      # set the locations of the radial gridlines and labels\n      lines, labels = rgrids( (0.25, 0.5, 1.0) )\n\n      # set the locations and labels of the radial gridlines and labels\n      lines, labels = rgrids( (0.25, 0.5, 1.0), ('Tom', 'Dick', 'Harry' )\n\n    ")
    
    # Assigning a Call to a Name (line 1719):
    
    # Assigning a Call to a Name (line 1719):
    
    # Call to gca(...): (line 1719)
    # Processing the call keyword arguments (line 1719)
    kwargs_116571 = {}
    # Getting the type of 'gca' (line 1719)
    gca_116570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1719, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 1719)
    gca_call_result_116572 = invoke(stypy.reporting.localization.Localization(__file__, 1719, 9), gca_116570, *[], **kwargs_116571)
    
    # Assigning a type to the variable 'ax' (line 1719)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1719, 4), 'ax', gca_call_result_116572)
    
    
    
    # Call to isinstance(...): (line 1720)
    # Processing the call arguments (line 1720)
    # Getting the type of 'ax' (line 1720)
    ax_116574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 22), 'ax', False)
    # Getting the type of 'PolarAxes' (line 1720)
    PolarAxes_116575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 26), 'PolarAxes', False)
    # Processing the call keyword arguments (line 1720)
    kwargs_116576 = {}
    # Getting the type of 'isinstance' (line 1720)
    isinstance_116573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1720, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1720)
    isinstance_call_result_116577 = invoke(stypy.reporting.localization.Localization(__file__, 1720, 11), isinstance_116573, *[ax_116574, PolarAxes_116575], **kwargs_116576)
    
    # Applying the 'not' unary operator (line 1720)
    result_not__116578 = python_operator(stypy.reporting.localization.Localization(__file__, 1720, 7), 'not', isinstance_call_result_116577)
    
    # Testing the type of an if condition (line 1720)
    if_condition_116579 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1720, 4), result_not__116578)
    # Assigning a type to the variable 'if_condition_116579' (line 1720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1720, 4), 'if_condition_116579', if_condition_116579)
    # SSA begins for if statement (line 1720)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to RuntimeError(...): (line 1721)
    # Processing the call arguments (line 1721)
    unicode_116581 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1721, 27), 'unicode', u'rgrids only defined for polar axes')
    # Processing the call keyword arguments (line 1721)
    kwargs_116582 = {}
    # Getting the type of 'RuntimeError' (line 1721)
    RuntimeError_116580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1721, 14), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 1721)
    RuntimeError_call_result_116583 = invoke(stypy.reporting.localization.Localization(__file__, 1721, 14), RuntimeError_116580, *[unicode_116581], **kwargs_116582)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1721, 8), RuntimeError_call_result_116583, 'raise parameter', BaseException)
    # SSA join for if statement (line 1720)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1722)
    # Processing the call arguments (line 1722)
    # Getting the type of 'args' (line 1722)
    args_116585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 11), 'args', False)
    # Processing the call keyword arguments (line 1722)
    kwargs_116586 = {}
    # Getting the type of 'len' (line 1722)
    len_116584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1722, 7), 'len', False)
    # Calling len(args, kwargs) (line 1722)
    len_call_result_116587 = invoke(stypy.reporting.localization.Localization(__file__, 1722, 7), len_116584, *[args_116585], **kwargs_116586)
    
    int_116588 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1722, 18), 'int')
    # Applying the binary operator '==' (line 1722)
    result_eq_116589 = python_operator(stypy.reporting.localization.Localization(__file__, 1722, 7), '==', len_call_result_116587, int_116588)
    
    # Testing the type of an if condition (line 1722)
    if_condition_116590 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1722, 4), result_eq_116589)
    # Assigning a type to the variable 'if_condition_116590' (line 1722)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1722, 4), 'if_condition_116590', if_condition_116590)
    # SSA begins for if statement (line 1722)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1723):
    
    # Assigning a Call to a Name (line 1723):
    
    # Call to get_gridlines(...): (line 1723)
    # Processing the call keyword arguments (line 1723)
    kwargs_116594 = {}
    # Getting the type of 'ax' (line 1723)
    ax_116591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1723, 16), 'ax', False)
    # Obtaining the member 'yaxis' of a type (line 1723)
    yaxis_116592 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1723, 16), ax_116591, 'yaxis')
    # Obtaining the member 'get_gridlines' of a type (line 1723)
    get_gridlines_116593 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1723, 16), yaxis_116592, 'get_gridlines')
    # Calling get_gridlines(args, kwargs) (line 1723)
    get_gridlines_call_result_116595 = invoke(stypy.reporting.localization.Localization(__file__, 1723, 16), get_gridlines_116593, *[], **kwargs_116594)
    
    # Assigning a type to the variable 'lines' (line 1723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1723, 8), 'lines', get_gridlines_call_result_116595)
    
    # Assigning a Call to a Name (line 1724):
    
    # Assigning a Call to a Name (line 1724):
    
    # Call to get_ticklabels(...): (line 1724)
    # Processing the call keyword arguments (line 1724)
    kwargs_116599 = {}
    # Getting the type of 'ax' (line 1724)
    ax_116596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1724, 17), 'ax', False)
    # Obtaining the member 'yaxis' of a type (line 1724)
    yaxis_116597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1724, 17), ax_116596, 'yaxis')
    # Obtaining the member 'get_ticklabels' of a type (line 1724)
    get_ticklabels_116598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1724, 17), yaxis_116597, 'get_ticklabels')
    # Calling get_ticklabels(args, kwargs) (line 1724)
    get_ticklabels_call_result_116600 = invoke(stypy.reporting.localization.Localization(__file__, 1724, 17), get_ticklabels_116598, *[], **kwargs_116599)
    
    # Assigning a type to the variable 'labels' (line 1724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1724, 8), 'labels', get_ticklabels_call_result_116600)
    # SSA branch for the else part of an if statement (line 1722)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 1726):
    
    # Assigning a Call to a Name:
    
    # Call to set_rgrids(...): (line 1726)
    # Getting the type of 'args' (line 1726)
    args_116603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 39), 'args', False)
    # Processing the call keyword arguments (line 1726)
    # Getting the type of 'kwargs' (line 1726)
    kwargs_116604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 47), 'kwargs', False)
    kwargs_116605 = {'kwargs_116604': kwargs_116604}
    # Getting the type of 'ax' (line 1726)
    ax_116601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 24), 'ax', False)
    # Obtaining the member 'set_rgrids' of a type (line 1726)
    set_rgrids_116602 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1726, 24), ax_116601, 'set_rgrids')
    # Calling set_rgrids(args, kwargs) (line 1726)
    set_rgrids_call_result_116606 = invoke(stypy.reporting.localization.Localization(__file__, 1726, 24), set_rgrids_116602, *[args_116603], **kwargs_116605)
    
    # Assigning a type to the variable 'call_assignment_114604' (line 1726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'call_assignment_114604', set_rgrids_call_result_116606)
    
    # Assigning a Call to a Name (line 1726):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_116609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1726, 8), 'int')
    # Processing the call keyword arguments
    kwargs_116610 = {}
    # Getting the type of 'call_assignment_114604' (line 1726)
    call_assignment_114604_116607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'call_assignment_114604', False)
    # Obtaining the member '__getitem__' of a type (line 1726)
    getitem___116608 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1726, 8), call_assignment_114604_116607, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_116611 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___116608, *[int_116609], **kwargs_116610)
    
    # Assigning a type to the variable 'call_assignment_114605' (line 1726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'call_assignment_114605', getitem___call_result_116611)
    
    # Assigning a Name to a Name (line 1726):
    # Getting the type of 'call_assignment_114605' (line 1726)
    call_assignment_114605_116612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'call_assignment_114605')
    # Assigning a type to the variable 'lines' (line 1726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'lines', call_assignment_114605_116612)
    
    # Assigning a Call to a Name (line 1726):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_116615 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1726, 8), 'int')
    # Processing the call keyword arguments
    kwargs_116616 = {}
    # Getting the type of 'call_assignment_114604' (line 1726)
    call_assignment_114604_116613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'call_assignment_114604', False)
    # Obtaining the member '__getitem__' of a type (line 1726)
    getitem___116614 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1726, 8), call_assignment_114604_116613, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_116617 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___116614, *[int_116615], **kwargs_116616)
    
    # Assigning a type to the variable 'call_assignment_114606' (line 1726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'call_assignment_114606', getitem___call_result_116617)
    
    # Assigning a Name to a Name (line 1726):
    # Getting the type of 'call_assignment_114606' (line 1726)
    call_assignment_114606_116618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1726, 8), 'call_assignment_114606')
    # Assigning a type to the variable 'labels' (line 1726)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1726, 15), 'labels', call_assignment_114606_116618)
    # SSA join for if statement (line 1722)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1728)
    tuple_116619 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1728, 13), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1728)
    # Adding element type (line 1728)
    
    # Call to silent_list(...): (line 1728)
    # Processing the call arguments (line 1728)
    unicode_116621 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1728, 25), 'unicode', u'Line2D rgridline')
    # Getting the type of 'lines' (line 1728)
    lines_116622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 45), 'lines', False)
    # Processing the call keyword arguments (line 1728)
    kwargs_116623 = {}
    # Getting the type of 'silent_list' (line 1728)
    silent_list_116620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1728, 13), 'silent_list', False)
    # Calling silent_list(args, kwargs) (line 1728)
    silent_list_call_result_116624 = invoke(stypy.reporting.localization.Localization(__file__, 1728, 13), silent_list_116620, *[unicode_116621, lines_116622], **kwargs_116623)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1728, 13), tuple_116619, silent_list_call_result_116624)
    # Adding element type (line 1728)
    
    # Call to silent_list(...): (line 1729)
    # Processing the call arguments (line 1729)
    unicode_116626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1729, 25), 'unicode', u'Text rgridlabel')
    # Getting the type of 'labels' (line 1729)
    labels_116627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 44), 'labels', False)
    # Processing the call keyword arguments (line 1729)
    kwargs_116628 = {}
    # Getting the type of 'silent_list' (line 1729)
    silent_list_116625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1729, 13), 'silent_list', False)
    # Calling silent_list(args, kwargs) (line 1729)
    silent_list_call_result_116629 = invoke(stypy.reporting.localization.Localization(__file__, 1729, 13), silent_list_116625, *[unicode_116626, labels_116627], **kwargs_116628)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1728, 13), tuple_116619, silent_list_call_result_116629)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1728)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1728, 4), 'stypy_return_type', tuple_116619)
    
    # ################# End of 'rgrids(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'rgrids' in the type store
    # Getting the type of 'stypy_return_type' (line 1688)
    stypy_return_type_116630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1688, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116630)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'rgrids'
    return stypy_return_type_116630

# Assigning a type to the variable 'rgrids' (line 1688)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1688, 0), 'rgrids', rgrids)

@norecursion
def thetagrids(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'thetagrids'
    module_type_store = module_type_store.open_function_context('thetagrids', 1732, 0, False)
    
    # Passed parameters checking function
    thetagrids.stypy_localization = localization
    thetagrids.stypy_type_of_self = None
    thetagrids.stypy_type_store = module_type_store
    thetagrids.stypy_function_name = 'thetagrids'
    thetagrids.stypy_param_names_list = []
    thetagrids.stypy_varargs_param_name = 'args'
    thetagrids.stypy_kwargs_param_name = 'kwargs'
    thetagrids.stypy_call_defaults = defaults
    thetagrids.stypy_call_varargs = varargs
    thetagrids.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'thetagrids', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'thetagrids', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'thetagrids(...)' code ##################

    unicode_116631 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1778, (-1)), 'unicode', u"\n    Get or set the theta locations of the gridlines in a polar plot.\n\n    If no arguments are passed, return a tuple (*lines*, *labels*)\n    where *lines* is an array of radial gridlines\n    (:class:`~matplotlib.lines.Line2D` instances) and *labels* is an\n    array of tick labels (:class:`~matplotlib.text.Text` instances)::\n\n      lines, labels = thetagrids()\n\n    Otherwise the syntax is::\n\n      lines, labels = thetagrids(angles, labels=None, fmt='%d', frac = 1.1)\n\n    set the angles at which to place the theta grids (these gridlines\n    are equal along the theta dimension).\n\n    *angles* is in degrees.\n\n    *labels*, if not *None*, is a len(angles) list of strings of the\n    labels to use at each angle.\n\n    If *labels* is *None*, the labels will be ``fmt%angle``.\n\n    *frac* is the fraction of the polar axes radius at which to place\n    the label (1 is the edge). e.g., 1.05 is outside the axes and 0.95\n    is inside the axes.\n\n    Return value is a list of tuples (*lines*, *labels*):\n\n      - *lines* are :class:`~matplotlib.lines.Line2D` instances\n\n      - *labels* are :class:`~matplotlib.text.Text` instances.\n\n    Note that on input, the *labels* argument is a list of strings,\n    and on output it is a list of :class:`~matplotlib.text.Text`\n    instances.\n\n    Examples::\n\n      # set the locations of the radial gridlines and labels\n      lines, labels = thetagrids( range(45,360,90) )\n\n      # set the locations and labels of the radial gridlines and labels\n      lines, labels = thetagrids( range(45,360,90), ('NE', 'NW', 'SW','SE') )\n    ")
    
    # Assigning a Call to a Name (line 1779):
    
    # Assigning a Call to a Name (line 1779):
    
    # Call to gca(...): (line 1779)
    # Processing the call keyword arguments (line 1779)
    kwargs_116633 = {}
    # Getting the type of 'gca' (line 1779)
    gca_116632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1779, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 1779)
    gca_call_result_116634 = invoke(stypy.reporting.localization.Localization(__file__, 1779, 9), gca_116632, *[], **kwargs_116633)
    
    # Assigning a type to the variable 'ax' (line 1779)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1779, 4), 'ax', gca_call_result_116634)
    
    
    
    # Call to isinstance(...): (line 1780)
    # Processing the call arguments (line 1780)
    # Getting the type of 'ax' (line 1780)
    ax_116636 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 22), 'ax', False)
    # Getting the type of 'PolarAxes' (line 1780)
    PolarAxes_116637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 26), 'PolarAxes', False)
    # Processing the call keyword arguments (line 1780)
    kwargs_116638 = {}
    # Getting the type of 'isinstance' (line 1780)
    isinstance_116635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1780, 11), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 1780)
    isinstance_call_result_116639 = invoke(stypy.reporting.localization.Localization(__file__, 1780, 11), isinstance_116635, *[ax_116636, PolarAxes_116637], **kwargs_116638)
    
    # Applying the 'not' unary operator (line 1780)
    result_not__116640 = python_operator(stypy.reporting.localization.Localization(__file__, 1780, 7), 'not', isinstance_call_result_116639)
    
    # Testing the type of an if condition (line 1780)
    if_condition_116641 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1780, 4), result_not__116640)
    # Assigning a type to the variable 'if_condition_116641' (line 1780)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1780, 4), 'if_condition_116641', if_condition_116641)
    # SSA begins for if statement (line 1780)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to RuntimeError(...): (line 1781)
    # Processing the call arguments (line 1781)
    unicode_116643 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1781, 27), 'unicode', u'rgrids only defined for polar axes')
    # Processing the call keyword arguments (line 1781)
    kwargs_116644 = {}
    # Getting the type of 'RuntimeError' (line 1781)
    RuntimeError_116642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1781, 14), 'RuntimeError', False)
    # Calling RuntimeError(args, kwargs) (line 1781)
    RuntimeError_call_result_116645 = invoke(stypy.reporting.localization.Localization(__file__, 1781, 14), RuntimeError_116642, *[unicode_116643], **kwargs_116644)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 1781, 8), RuntimeError_call_result_116645, 'raise parameter', BaseException)
    # SSA join for if statement (line 1780)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 1782)
    # Processing the call arguments (line 1782)
    # Getting the type of 'args' (line 1782)
    args_116647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 11), 'args', False)
    # Processing the call keyword arguments (line 1782)
    kwargs_116648 = {}
    # Getting the type of 'len' (line 1782)
    len_116646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1782, 7), 'len', False)
    # Calling len(args, kwargs) (line 1782)
    len_call_result_116649 = invoke(stypy.reporting.localization.Localization(__file__, 1782, 7), len_116646, *[args_116647], **kwargs_116648)
    
    int_116650 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1782, 18), 'int')
    # Applying the binary operator '==' (line 1782)
    result_eq_116651 = python_operator(stypy.reporting.localization.Localization(__file__, 1782, 7), '==', len_call_result_116649, int_116650)
    
    # Testing the type of an if condition (line 1782)
    if_condition_116652 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1782, 4), result_eq_116651)
    # Assigning a type to the variable 'if_condition_116652' (line 1782)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1782, 4), 'if_condition_116652', if_condition_116652)
    # SSA begins for if statement (line 1782)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 1783):
    
    # Assigning a Call to a Name (line 1783):
    
    # Call to get_ticklines(...): (line 1783)
    # Processing the call keyword arguments (line 1783)
    kwargs_116656 = {}
    # Getting the type of 'ax' (line 1783)
    ax_116653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1783, 16), 'ax', False)
    # Obtaining the member 'xaxis' of a type (line 1783)
    xaxis_116654 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1783, 16), ax_116653, 'xaxis')
    # Obtaining the member 'get_ticklines' of a type (line 1783)
    get_ticklines_116655 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1783, 16), xaxis_116654, 'get_ticklines')
    # Calling get_ticklines(args, kwargs) (line 1783)
    get_ticklines_call_result_116657 = invoke(stypy.reporting.localization.Localization(__file__, 1783, 16), get_ticklines_116655, *[], **kwargs_116656)
    
    # Assigning a type to the variable 'lines' (line 1783)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1783, 8), 'lines', get_ticklines_call_result_116657)
    
    # Assigning a Call to a Name (line 1784):
    
    # Assigning a Call to a Name (line 1784):
    
    # Call to get_ticklabels(...): (line 1784)
    # Processing the call keyword arguments (line 1784)
    kwargs_116661 = {}
    # Getting the type of 'ax' (line 1784)
    ax_116658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1784, 17), 'ax', False)
    # Obtaining the member 'xaxis' of a type (line 1784)
    xaxis_116659 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 17), ax_116658, 'xaxis')
    # Obtaining the member 'get_ticklabels' of a type (line 1784)
    get_ticklabels_116660 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1784, 17), xaxis_116659, 'get_ticklabels')
    # Calling get_ticklabels(args, kwargs) (line 1784)
    get_ticklabels_call_result_116662 = invoke(stypy.reporting.localization.Localization(__file__, 1784, 17), get_ticklabels_116660, *[], **kwargs_116661)
    
    # Assigning a type to the variable 'labels' (line 1784)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1784, 8), 'labels', get_ticklabels_call_result_116662)
    # SSA branch for the else part of an if statement (line 1782)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Tuple (line 1786):
    
    # Assigning a Call to a Name:
    
    # Call to set_thetagrids(...): (line 1786)
    # Getting the type of 'args' (line 1786)
    args_116665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 43), 'args', False)
    # Processing the call keyword arguments (line 1786)
    # Getting the type of 'kwargs' (line 1786)
    kwargs_116666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 51), 'kwargs', False)
    kwargs_116667 = {'kwargs_116666': kwargs_116666}
    # Getting the type of 'ax' (line 1786)
    ax_116663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 24), 'ax', False)
    # Obtaining the member 'set_thetagrids' of a type (line 1786)
    set_thetagrids_116664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1786, 24), ax_116663, 'set_thetagrids')
    # Calling set_thetagrids(args, kwargs) (line 1786)
    set_thetagrids_call_result_116668 = invoke(stypy.reporting.localization.Localization(__file__, 1786, 24), set_thetagrids_116664, *[args_116665], **kwargs_116667)
    
    # Assigning a type to the variable 'call_assignment_114607' (line 1786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'call_assignment_114607', set_thetagrids_call_result_116668)
    
    # Assigning a Call to a Name (line 1786):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_116671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1786, 8), 'int')
    # Processing the call keyword arguments
    kwargs_116672 = {}
    # Getting the type of 'call_assignment_114607' (line 1786)
    call_assignment_114607_116669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'call_assignment_114607', False)
    # Obtaining the member '__getitem__' of a type (line 1786)
    getitem___116670 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1786, 8), call_assignment_114607_116669, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_116673 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___116670, *[int_116671], **kwargs_116672)
    
    # Assigning a type to the variable 'call_assignment_114608' (line 1786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'call_assignment_114608', getitem___call_result_116673)
    
    # Assigning a Name to a Name (line 1786):
    # Getting the type of 'call_assignment_114608' (line 1786)
    call_assignment_114608_116674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'call_assignment_114608')
    # Assigning a type to the variable 'lines' (line 1786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'lines', call_assignment_114608_116674)
    
    # Assigning a Call to a Name (line 1786):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_116677 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1786, 8), 'int')
    # Processing the call keyword arguments
    kwargs_116678 = {}
    # Getting the type of 'call_assignment_114607' (line 1786)
    call_assignment_114607_116675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'call_assignment_114607', False)
    # Obtaining the member '__getitem__' of a type (line 1786)
    getitem___116676 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1786, 8), call_assignment_114607_116675, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_116679 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___116676, *[int_116677], **kwargs_116678)
    
    # Assigning a type to the variable 'call_assignment_114609' (line 1786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'call_assignment_114609', getitem___call_result_116679)
    
    # Assigning a Name to a Name (line 1786):
    # Getting the type of 'call_assignment_114609' (line 1786)
    call_assignment_114609_116680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1786, 8), 'call_assignment_114609')
    # Assigning a type to the variable 'labels' (line 1786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1786, 15), 'labels', call_assignment_114609_116680)
    # SSA join for if statement (line 1782)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Obtaining an instance of the builtin type 'tuple' (line 1788)
    tuple_116681 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, 12), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 1788)
    # Adding element type (line 1788)
    
    # Call to silent_list(...): (line 1788)
    # Processing the call arguments (line 1788)
    unicode_116683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1788, 24), 'unicode', u'Line2D thetagridline')
    # Getting the type of 'lines' (line 1788)
    lines_116684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 48), 'lines', False)
    # Processing the call keyword arguments (line 1788)
    kwargs_116685 = {}
    # Getting the type of 'silent_list' (line 1788)
    silent_list_116682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1788, 12), 'silent_list', False)
    # Calling silent_list(args, kwargs) (line 1788)
    silent_list_call_result_116686 = invoke(stypy.reporting.localization.Localization(__file__, 1788, 12), silent_list_116682, *[unicode_116683, lines_116684], **kwargs_116685)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1788, 12), tuple_116681, silent_list_call_result_116686)
    # Adding element type (line 1788)
    
    # Call to silent_list(...): (line 1789)
    # Processing the call arguments (line 1789)
    unicode_116688 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1789, 24), 'unicode', u'Text thetagridlabel')
    # Getting the type of 'labels' (line 1789)
    labels_116689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 47), 'labels', False)
    # Processing the call keyword arguments (line 1789)
    kwargs_116690 = {}
    # Getting the type of 'silent_list' (line 1789)
    silent_list_116687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1789, 12), 'silent_list', False)
    # Calling silent_list(args, kwargs) (line 1789)
    silent_list_call_result_116691 = invoke(stypy.reporting.localization.Localization(__file__, 1789, 12), silent_list_116687, *[unicode_116688, labels_116689], **kwargs_116690)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1788, 12), tuple_116681, silent_list_call_result_116691)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1788)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1788, 4), 'stypy_return_type', tuple_116681)
    
    # ################# End of 'thetagrids(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'thetagrids' in the type store
    # Getting the type of 'stypy_return_type' (line 1732)
    stypy_return_type_116692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1732, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116692)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'thetagrids'
    return stypy_return_type_116692

# Assigning a type to the variable 'thetagrids' (line 1732)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1732, 0), 'thetagrids', thetagrids)

@norecursion
def plotting(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'plotting'
    module_type_store = module_type_store.open_function_context('plotting', 1795, 0, False)
    
    # Passed parameters checking function
    plotting.stypy_localization = localization
    plotting.stypy_type_of_self = None
    plotting.stypy_type_store = module_type_store
    plotting.stypy_function_name = 'plotting'
    plotting.stypy_param_names_list = []
    plotting.stypy_varargs_param_name = None
    plotting.stypy_kwargs_param_name = None
    plotting.stypy_call_defaults = defaults
    plotting.stypy_call_varargs = varargs
    plotting.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'plotting', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'plotting', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'plotting(...)' code ##################

    pass
    
    # ################# End of 'plotting(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'plotting' in the type store
    # Getting the type of 'stypy_return_type' (line 1795)
    stypy_return_type_116693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1795, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116693)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'plotting'
    return stypy_return_type_116693

# Assigning a type to the variable 'plotting' (line 1795)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1795, 0), 'plotting', plotting)

@norecursion
def get_plot_commands(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'get_plot_commands'
    module_type_store = module_type_store.open_function_context('get_plot_commands', 1799, 0, False)
    
    # Passed parameters checking function
    get_plot_commands.stypy_localization = localization
    get_plot_commands.stypy_type_of_self = None
    get_plot_commands.stypy_type_store = module_type_store
    get_plot_commands.stypy_function_name = 'get_plot_commands'
    get_plot_commands.stypy_param_names_list = []
    get_plot_commands.stypy_varargs_param_name = None
    get_plot_commands.stypy_kwargs_param_name = None
    get_plot_commands.stypy_call_defaults = defaults
    get_plot_commands.stypy_call_varargs = varargs
    get_plot_commands.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'get_plot_commands', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'get_plot_commands', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'get_plot_commands(...)' code ##################

    unicode_116694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1802, (-1)), 'unicode', u'\n    Get a sorted list of all of the plotting commands.\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 1808, 4))
    
    # 'import inspect' statement (line 1808)
    import inspect

    import_module(stypy.reporting.localization.Localization(__file__, 1808, 4), 'inspect', inspect, module_type_store)
    
    
    # Assigning a Set to a Name (line 1810):
    
    # Assigning a Set to a Name (line 1810):
    
    # Obtaining an instance of the builtin type 'set' (line 1810)
    set_116695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 14), 'set')
    # Adding type elements to the builtin type 'set' instance (line 1810)
    # Adding element type (line 1810)
    unicode_116696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 15), 'unicode', u'colormaps')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 14), set_116695, unicode_116696)
    # Adding element type (line 1810)
    unicode_116697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 28), 'unicode', u'colors')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 14), set_116695, unicode_116697)
    # Adding element type (line 1810)
    unicode_116698 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 38), 'unicode', u'connect')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 14), set_116695, unicode_116698)
    # Adding element type (line 1810)
    unicode_116699 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1810, 49), 'unicode', u'disconnect')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 14), set_116695, unicode_116699)
    # Adding element type (line 1810)
    unicode_116700 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 15), 'unicode', u'get_plot_commands')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 14), set_116695, unicode_116700)
    # Adding element type (line 1810)
    unicode_116701 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 36), 'unicode', u'get_current_fig_manager')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 14), set_116695, unicode_116701)
    # Adding element type (line 1810)
    unicode_116702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1811, 63), 'unicode', u'ginput')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 14), set_116695, unicode_116702)
    # Adding element type (line 1810)
    unicode_116703 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 15), 'unicode', u'plotting')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 14), set_116695, unicode_116703)
    # Adding element type (line 1810)
    unicode_116704 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1812, 27), 'unicode', u'waitforbuttonpress')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1810, 14), set_116695, unicode_116704)
    
    # Assigning a type to the variable 'exclude' (line 1810)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1810, 4), 'exclude', set_116695)
    
    # Getting the type of 'exclude' (line 1813)
    exclude_116705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 4), 'exclude')
    
    # Call to set(...): (line 1813)
    # Processing the call arguments (line 1813)
    
    # Call to colormaps(...): (line 1813)
    # Processing the call keyword arguments (line 1813)
    kwargs_116708 = {}
    # Getting the type of 'colormaps' (line 1813)
    colormaps_116707 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 19), 'colormaps', False)
    # Calling colormaps(args, kwargs) (line 1813)
    colormaps_call_result_116709 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 19), colormaps_116707, *[], **kwargs_116708)
    
    # Processing the call keyword arguments (line 1813)
    kwargs_116710 = {}
    # Getting the type of 'set' (line 1813)
    set_116706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1813, 15), 'set', False)
    # Calling set(args, kwargs) (line 1813)
    set_call_result_116711 = invoke(stypy.reporting.localization.Localization(__file__, 1813, 15), set_116706, *[colormaps_call_result_116709], **kwargs_116710)
    
    # Applying the binary operator '|=' (line 1813)
    result_ior_116712 = python_operator(stypy.reporting.localization.Localization(__file__, 1813, 4), '|=', exclude_116705, set_call_result_116711)
    # Assigning a type to the variable 'exclude' (line 1813)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1813, 4), 'exclude', result_ior_116712)
    
    
    # Assigning a Call to a Name (line 1814):
    
    # Assigning a Call to a Name (line 1814):
    
    # Call to getmodule(...): (line 1814)
    # Processing the call arguments (line 1814)
    # Getting the type of 'get_plot_commands' (line 1814)
    get_plot_commands_116715 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 36), 'get_plot_commands', False)
    # Processing the call keyword arguments (line 1814)
    kwargs_116716 = {}
    # Getting the type of 'inspect' (line 1814)
    inspect_116713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1814, 18), 'inspect', False)
    # Obtaining the member 'getmodule' of a type (line 1814)
    getmodule_116714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1814, 18), inspect_116713, 'getmodule')
    # Calling getmodule(args, kwargs) (line 1814)
    getmodule_call_result_116717 = invoke(stypy.reporting.localization.Localization(__file__, 1814, 18), getmodule_116714, *[get_plot_commands_116715], **kwargs_116716)
    
    # Assigning a type to the variable 'this_module' (line 1814)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1814, 4), 'this_module', getmodule_call_result_116717)
    
    # Assigning a Call to a Name (line 1816):
    
    # Assigning a Call to a Name (line 1816):
    
    # Call to set(...): (line 1816)
    # Processing the call keyword arguments (line 1816)
    kwargs_116719 = {}
    # Getting the type of 'set' (line 1816)
    set_116718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1816, 15), 'set', False)
    # Calling set(args, kwargs) (line 1816)
    set_call_result_116720 = invoke(stypy.reporting.localization.Localization(__file__, 1816, 15), set_116718, *[], **kwargs_116719)
    
    # Assigning a type to the variable 'commands' (line 1816)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1816, 4), 'commands', set_call_result_116720)
    
    
    # Call to list(...): (line 1817)
    # Processing the call arguments (line 1817)
    
    # Call to iteritems(...): (line 1817)
    # Processing the call arguments (line 1817)
    
    # Call to globals(...): (line 1817)
    # Processing the call keyword arguments (line 1817)
    kwargs_116725 = {}
    # Getting the type of 'globals' (line 1817)
    globals_116724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 40), 'globals', False)
    # Calling globals(args, kwargs) (line 1817)
    globals_call_result_116726 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 40), globals_116724, *[], **kwargs_116725)
    
    # Processing the call keyword arguments (line 1817)
    kwargs_116727 = {}
    # Getting the type of 'six' (line 1817)
    six_116722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 26), 'six', False)
    # Obtaining the member 'iteritems' of a type (line 1817)
    iteritems_116723 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1817, 26), six_116722, 'iteritems')
    # Calling iteritems(args, kwargs) (line 1817)
    iteritems_call_result_116728 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 26), iteritems_116723, *[globals_call_result_116726], **kwargs_116727)
    
    # Processing the call keyword arguments (line 1817)
    kwargs_116729 = {}
    # Getting the type of 'list' (line 1817)
    list_116721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1817, 21), 'list', False)
    # Calling list(args, kwargs) (line 1817)
    list_call_result_116730 = invoke(stypy.reporting.localization.Localization(__file__, 1817, 21), list_116721, *[iteritems_call_result_116728], **kwargs_116729)
    
    # Testing the type of a for loop iterable (line 1817)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 1817, 4), list_call_result_116730)
    # Getting the type of the for loop variable (line 1817)
    for_loop_var_116731 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 1817, 4), list_call_result_116730)
    # Assigning a type to the variable 'name' (line 1817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 4), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1817, 4), for_loop_var_116731))
    # Assigning a type to the variable 'obj' (line 1817)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1817, 4), 'obj', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 1817, 4), for_loop_var_116731))
    # SSA begins for a for statement (line 1817)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    
    # Evaluating a boolean operation
    
    # Call to startswith(...): (line 1818)
    # Processing the call arguments (line 1818)
    unicode_116734 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1818, 27), 'unicode', u'_')
    # Processing the call keyword arguments (line 1818)
    kwargs_116735 = {}
    # Getting the type of 'name' (line 1818)
    name_116732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 11), 'name', False)
    # Obtaining the member 'startswith' of a type (line 1818)
    startswith_116733 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1818, 11), name_116732, 'startswith')
    # Calling startswith(args, kwargs) (line 1818)
    startswith_call_result_116736 = invoke(stypy.reporting.localization.Localization(__file__, 1818, 11), startswith_116733, *[unicode_116734], **kwargs_116735)
    
    
    # Getting the type of 'name' (line 1818)
    name_116737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 35), 'name')
    # Getting the type of 'exclude' (line 1818)
    exclude_116738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1818, 43), 'exclude')
    # Applying the binary operator 'in' (line 1818)
    result_contains_116739 = python_operator(stypy.reporting.localization.Localization(__file__, 1818, 35), 'in', name_116737, exclude_116738)
    
    # Applying the binary operator 'or' (line 1818)
    result_or_keyword_116740 = python_operator(stypy.reporting.localization.Localization(__file__, 1818, 11), 'or', startswith_call_result_116736, result_contains_116739)
    
    # Testing the type of an if condition (line 1818)
    if_condition_116741 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1818, 8), result_or_keyword_116740)
    # Assigning a type to the variable 'if_condition_116741' (line 1818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1818, 8), 'if_condition_116741', if_condition_116741)
    # SSA begins for if statement (line 1818)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    # SSA join for if statement (line 1818)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Evaluating a boolean operation
    
    # Call to isfunction(...): (line 1820)
    # Processing the call arguments (line 1820)
    # Getting the type of 'obj' (line 1820)
    obj_116744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 30), 'obj', False)
    # Processing the call keyword arguments (line 1820)
    kwargs_116745 = {}
    # Getting the type of 'inspect' (line 1820)
    inspect_116742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 11), 'inspect', False)
    # Obtaining the member 'isfunction' of a type (line 1820)
    isfunction_116743 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1820, 11), inspect_116742, 'isfunction')
    # Calling isfunction(args, kwargs) (line 1820)
    isfunction_call_result_116746 = invoke(stypy.reporting.localization.Localization(__file__, 1820, 11), isfunction_116743, *[obj_116744], **kwargs_116745)
    
    
    
    # Call to getmodule(...): (line 1820)
    # Processing the call arguments (line 1820)
    # Getting the type of 'obj' (line 1820)
    obj_116749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 57), 'obj', False)
    # Processing the call keyword arguments (line 1820)
    kwargs_116750 = {}
    # Getting the type of 'inspect' (line 1820)
    inspect_116747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 39), 'inspect', False)
    # Obtaining the member 'getmodule' of a type (line 1820)
    getmodule_116748 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1820, 39), inspect_116747, 'getmodule')
    # Calling getmodule(args, kwargs) (line 1820)
    getmodule_call_result_116751 = invoke(stypy.reporting.localization.Localization(__file__, 1820, 39), getmodule_116748, *[obj_116749], **kwargs_116750)
    
    # Getting the type of 'this_module' (line 1820)
    this_module_116752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1820, 65), 'this_module')
    # Applying the binary operator 'is' (line 1820)
    result_is__116753 = python_operator(stypy.reporting.localization.Localization(__file__, 1820, 39), 'is', getmodule_call_result_116751, this_module_116752)
    
    # Applying the binary operator 'and' (line 1820)
    result_and_keyword_116754 = python_operator(stypy.reporting.localization.Localization(__file__, 1820, 11), 'and', isfunction_call_result_116746, result_is__116753)
    
    # Testing the type of an if condition (line 1820)
    if_condition_116755 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 1820, 8), result_and_keyword_116754)
    # Assigning a type to the variable 'if_condition_116755' (line 1820)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1820, 8), 'if_condition_116755', if_condition_116755)
    # SSA begins for if statement (line 1820)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to add(...): (line 1821)
    # Processing the call arguments (line 1821)
    # Getting the type of 'name' (line 1821)
    name_116758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 25), 'name', False)
    # Processing the call keyword arguments (line 1821)
    kwargs_116759 = {}
    # Getting the type of 'commands' (line 1821)
    commands_116756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1821, 12), 'commands', False)
    # Obtaining the member 'add' of a type (line 1821)
    add_116757 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 1821, 12), commands_116756, 'add')
    # Calling add(args, kwargs) (line 1821)
    add_call_result_116760 = invoke(stypy.reporting.localization.Localization(__file__, 1821, 12), add_116757, *[name_116758], **kwargs_116759)
    
    # SSA join for if statement (line 1820)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to sorted(...): (line 1823)
    # Processing the call arguments (line 1823)
    # Getting the type of 'commands' (line 1823)
    commands_116762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 18), 'commands', False)
    # Processing the call keyword arguments (line 1823)
    kwargs_116763 = {}
    # Getting the type of 'sorted' (line 1823)
    sorted_116761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1823, 11), 'sorted', False)
    # Calling sorted(args, kwargs) (line 1823)
    sorted_call_result_116764 = invoke(stypy.reporting.localization.Localization(__file__, 1823, 11), sorted_116761, *[commands_116762], **kwargs_116763)
    
    # Assigning a type to the variable 'stypy_return_type' (line 1823)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1823, 4), 'stypy_return_type', sorted_call_result_116764)
    
    # ################# End of 'get_plot_commands(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'get_plot_commands' in the type store
    # Getting the type of 'stypy_return_type' (line 1799)
    stypy_return_type_116765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1799, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116765)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'get_plot_commands'
    return stypy_return_type_116765

# Assigning a type to the variable 'get_plot_commands' (line 1799)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1799, 0), 'get_plot_commands', get_plot_commands)

@norecursion
def colors(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'colors'
    module_type_store = module_type_store.open_function_context('colors', 1826, 0, False)
    
    # Passed parameters checking function
    colors.stypy_localization = localization
    colors.stypy_type_of_self = None
    colors.stypy_type_store = module_type_store
    colors.stypy_function_name = 'colors'
    colors.stypy_param_names_list = []
    colors.stypy_varargs_param_name = None
    colors.stypy_kwargs_param_name = None
    colors.stypy_call_defaults = defaults
    colors.stypy_call_varargs = varargs
    colors.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'colors', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'colors', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'colors(...)' code ##################

    unicode_116766 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 1872, (-1)), 'unicode', u"\n    This is a do-nothing function to provide you with help on how\n    matplotlib handles colors.\n\n    Commands which take color arguments can use several formats to\n    specify the colors.  For the basic built-in colors, you can use a\n    single letter\n\n      =====   =======\n      Alias   Color\n      =====   =======\n      'b'     blue\n      'g'     green\n      'r'     red\n      'c'     cyan\n      'm'     magenta\n      'y'     yellow\n      'k'     black\n      'w'     white\n      =====   =======\n\n    For a greater range of colors, you have two options.  You can\n    specify the color using an html hex string, as in::\n\n      color = '#eeefff'\n\n    or you can pass an R,G,B tuple, where each of R,G,B are in the\n    range [0,1].\n\n    You can also use any legal html name for a color, for example::\n\n      color = 'red'\n      color = 'burlywood'\n      color = 'chartreuse'\n\n    The example below creates a subplot with a dark\n    slate gray background::\n\n       subplot(111, facecolor=(0.1843, 0.3098, 0.3098))\n\n    Here is an example that creates a pale turquoise title::\n\n      title('Is this the best color?', color='#afeeee')\n\n    ")
    pass
    
    # ################# End of 'colors(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'colors' in the type store
    # Getting the type of 'stypy_return_type' (line 1826)
    stypy_return_type_116767 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1826, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116767)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'colors'
    return stypy_return_type_116767

# Assigning a type to the variable 'colors' (line 1826)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1826, 0), 'colors', colors)

@norecursion
def colormaps(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'colormaps'
    module_type_store = module_type_store.open_function_context('colormaps', 1876, 0, False)
    
    # Passed parameters checking function
    colormaps.stypy_localization = localization
    colormaps.stypy_type_of_self = None
    colormaps.stypy_type_store = module_type_store
    colormaps.stypy_function_name = 'colormaps'
    colormaps.stypy_param_names_list = []
    colormaps.stypy_varargs_param_name = None
    colormaps.stypy_kwargs_param_name = None
    colormaps.stypy_call_defaults = defaults
    colormaps.stypy_call_varargs = varargs
    colormaps.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'colormaps', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'colormaps', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'colormaps(...)' code ##################

    unicode_116768 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2112, (-1)), 'unicode', u'\n    Matplotlib provides a number of colormaps, and others can be added using\n    :func:`~matplotlib.cm.register_cmap`.  This function documents the built-in\n    colormaps, and will also return a list of all registered colormaps if called.\n\n    You can set the colormap for an image, pcolor, scatter, etc,\n    using a keyword argument::\n\n      imshow(X, cmap=cm.hot)\n\n    or using the :func:`set_cmap` function::\n\n      imshow(X)\n      pyplot.set_cmap(\'hot\')\n      pyplot.set_cmap(\'jet\')\n\n    In interactive mode, :func:`set_cmap` will update the colormap post-hoc,\n    allowing you to see which one works best for your data.\n\n    All built-in colormaps can be reversed by appending ``_r``: For instance,\n    ``gray_r`` is the reverse of ``gray``.\n\n    There are several common color schemes used in visualization:\n\n    Sequential schemes\n      for unipolar data that progresses from low to high\n    Diverging schemes\n      for bipolar data that emphasizes positive or negative deviations from a\n      central value\n    Cyclic schemes\n      meant for plotting values that wrap around at the\n      endpoints, such as phase angle, wind direction, or time of day\n    Qualitative schemes\n      for nominal data that has no inherent ordering, where color is used\n      only to distinguish categories\n\n    Matplotlib ships with 4 perceptually uniform color maps which are\n    the recommended color maps for sequential data:\n\n      =========   ===================================================\n      Colormap    Description\n      =========   ===================================================\n      inferno     perceptually uniform shades of black-red-yellow\n      magma       perceptually uniform shades of black-red-white\n      plasma      perceptually uniform shades of blue-red-yellow\n      viridis     perceptually uniform shades of blue-green-yellow\n      =========   ===================================================\n\n    The following colormaps are based on the `ColorBrewer\n    <http://colorbrewer2.org>`_ color specifications and designs developed by\n    Cynthia Brewer:\n\n    ColorBrewer Diverging (luminance is highest at the midpoint, and\n    decreases towards differently-colored endpoints):\n\n      ========  ===================================\n      Colormap  Description\n      ========  ===================================\n      BrBG      brown, white, blue-green\n      PiYG      pink, white, yellow-green\n      PRGn      purple, white, green\n      PuOr      orange, white, purple\n      RdBu      red, white, blue\n      RdGy      red, white, gray\n      RdYlBu    red, yellow, blue\n      RdYlGn    red, yellow, green\n      Spectral  red, orange, yellow, green, blue\n      ========  ===================================\n\n    ColorBrewer Sequential (luminance decreases monotonically):\n\n      ========  ====================================\n      Colormap  Description\n      ========  ====================================\n      Blues     white to dark blue\n      BuGn      white, light blue, dark green\n      BuPu      white, light blue, dark purple\n      GnBu      white, light green, dark blue\n      Greens    white to dark green\n      Greys     white to black (not linear)\n      Oranges   white, orange, dark brown\n      OrRd      white, orange, dark red\n      PuBu      white, light purple, dark blue\n      PuBuGn    white, light purple, dark green\n      PuRd      white, light purple, dark red\n      Purples   white to dark purple\n      RdPu      white, pink, dark purple\n      Reds      white to dark red\n      YlGn      light yellow, dark green\n      YlGnBu    light yellow, light green, dark blue\n      YlOrBr    light yellow, orange, dark brown\n      YlOrRd    light yellow, orange, dark red\n      ========  ====================================\n\n    ColorBrewer Qualitative:\n\n    (For plotting nominal data, :class:`ListedColormap` is used,\n    not :class:`LinearSegmentedColormap`.  Different sets of colors are\n    recommended for different numbers of categories.)\n\n    * Accent\n    * Dark2\n    * Paired\n    * Pastel1\n    * Pastel2\n    * Set1\n    * Set2\n    * Set3\n\n    A set of colormaps derived from those of the same name provided\n    with Matlab are also included:\n\n      =========   =======================================================\n      Colormap    Description\n      =========   =======================================================\n      autumn      sequential linearly-increasing shades of red-orange-yellow\n      bone        sequential increasing black-white color map with\n                  a tinge of blue, to emulate X-ray film\n      cool        linearly-decreasing shades of cyan-magenta\n      copper      sequential increasing shades of black-copper\n      flag        repetitive red-white-blue-black pattern (not cyclic at\n                  endpoints)\n      gray        sequential linearly-increasing black-to-white\n                  grayscale\n      hot         sequential black-red-yellow-white, to emulate blackbody\n                  radiation from an object at increasing temperatures\n      hsv         cyclic red-yellow-green-cyan-blue-magenta-red, formed\n                  by changing the hue component in the HSV color space\n      jet         a spectral map with dark endpoints, blue-cyan-yellow-red;\n                  based on a fluid-jet simulation by NCSA [#]_\n      pink        sequential increasing pastel black-pink-white, meant\n                  for sepia tone colorization of photographs\n      prism       repetitive red-yellow-green-blue-purple-...-green pattern\n                  (not cyclic at endpoints)\n      spring      linearly-increasing shades of magenta-yellow\n      summer      sequential linearly-increasing shades of green-yellow\n      winter      linearly-increasing shades of blue-green\n      =========   =======================================================\n\n    A set of palettes from the `Yorick scientific visualisation\n    package <https://dhmunro.github.io/yorick-doc/>`_, an evolution of\n    the GIST package, both by David H. Munro are included:\n\n      ============  =======================================================\n      Colormap      Description\n      ============  =======================================================\n      gist_earth    mapmaker\'s colors from dark blue deep ocean to green\n                    lowlands to brown highlands to white mountains\n      gist_heat     sequential increasing black-red-orange-white, to emulate\n                    blackbody radiation from an iron bar as it grows hotter\n      gist_ncar     pseudo-spectral black-blue-green-yellow-red-purple-white\n                    colormap from National Center for Atmospheric\n                    Research [#]_\n      gist_rainbow  runs through the colors in spectral order from red to\n                    violet at full saturation (like *hsv* but not cyclic)\n      gist_stern    "Stern special" color table from Interactive Data\n                    Language software\n      ============  =======================================================\n\n\n    Other miscellaneous schemes:\n\n      ============= =======================================================\n      Colormap      Description\n      ============= =======================================================\n      afmhot        sequential black-orange-yellow-white blackbody\n                    spectrum, commonly used in atomic force microscopy\n      brg           blue-red-green\n      bwr           diverging blue-white-red\n      coolwarm      diverging blue-gray-red, meant to avoid issues with 3D\n                    shading, color blindness, and ordering of colors [#]_\n      CMRmap        "Default colormaps on color images often reproduce to\n                    confusing grayscale images. The proposed colormap\n                    maintains an aesthetically pleasing color image that\n                    automatically reproduces to a monotonic grayscale with\n                    discrete, quantifiable saturation levels." [#]_\n      cubehelix     Unlike most other color schemes cubehelix was designed\n                    by D.A. Green to be monotonically increasing in terms\n                    of perceived brightness. Also, when printed on a black\n                    and white postscript printer, the scheme results in a\n                    greyscale with monotonically increasing brightness.\n                    This color scheme is named cubehelix because the r,g,b\n                    values produced can be visualised as a squashed helix\n                    around the diagonal in the r,g,b color cube.\n      gnuplot       gnuplot\'s traditional pm3d scheme\n                    (black-blue-red-yellow)\n      gnuplot2      sequential color printable as gray\n                    (black-blue-violet-yellow-white)\n      ocean         green-blue-white\n      rainbow       spectral purple-blue-green-yellow-orange-red colormap\n                    with diverging luminance\n      seismic       diverging blue-white-red\n      nipy_spectral black-purple-blue-green-yellow-red-white spectrum,\n                    originally from the Neuroimaging in Python project\n      terrain       mapmaker\'s colors, blue-green-yellow-brown-white,\n                    originally from IGOR Pro\n      ============= =======================================================\n\n    The following colormaps are redundant and may be removed in future\n    versions.  It\'s recommended to use the names in the descriptions\n    instead, which produce identical output:\n\n      =========  =======================================================\n      Colormap   Description\n      =========  =======================================================\n      gist_gray  identical to *gray*\n      gist_yarg  identical to *gray_r*\n      binary     identical to *gray_r*\n      spectral   identical to *nipy_spectral* [#]_\n      =========  =======================================================\n\n    .. rubric:: Footnotes\n\n    .. [#] Rainbow colormaps, ``jet`` in particular, are considered a poor\n      choice for scientific visualization by many researchers: `Rainbow Color\n      Map (Still) Considered Harmful\n      <http://ieeexplore.ieee.org/document/4118486/?arnumber=4118486>`_\n\n    .. [#] Resembles "BkBlAqGrYeOrReViWh200" from NCAR Command\n      Language. See `Color Table Gallery\n      <https://www.ncl.ucar.edu/Document/Graphics/color_table_gallery.shtml>`_\n\n    .. [#] See `Diverging Color Maps for Scientific Visualization\n      <http://www.kennethmoreland.com/color-maps/>`_ by Kenneth Moreland.\n\n    .. [#] See `A Color Map for Effective Black-and-White Rendering of\n      Color-Scale Images\n      <https://www.mathworks.com/matlabcentral/fileexchange/2662-cmrmap-m>`_\n      by Carey Rappaport\n\n    .. [#] Changed to distinguish from ColorBrewer\'s *Spectral* map.\n      :func:`spectral` still works, but\n      ``set_cmap(\'nipy_spectral\')`` is recommended for clarity.\n\n\n    ')
    
    # Call to sorted(...): (line 2113)
    # Processing the call arguments (line 2113)
    # Getting the type of 'cm' (line 2113)
    cm_116770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 18), 'cm', False)
    # Obtaining the member 'cmap_d' of a type (line 2113)
    cmap_d_116771 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2113, 18), cm_116770, 'cmap_d')
    # Processing the call keyword arguments (line 2113)
    kwargs_116772 = {}
    # Getting the type of 'sorted' (line 2113)
    sorted_116769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2113, 11), 'sorted', False)
    # Calling sorted(args, kwargs) (line 2113)
    sorted_call_result_116773 = invoke(stypy.reporting.localization.Localization(__file__, 2113, 11), sorted_116769, *[cmap_d_116771], **kwargs_116772)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2113)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2113, 4), 'stypy_return_type', sorted_call_result_116773)
    
    # ################# End of 'colormaps(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'colormaps' in the type store
    # Getting the type of 'stypy_return_type' (line 1876)
    stypy_return_type_116774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 1876, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116774)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'colormaps'
    return stypy_return_type_116774

# Assigning a type to the variable 'colormaps' (line 1876)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 1876, 0), 'colormaps', colormaps)

@norecursion
def _setup_pyplot_info_docstrings(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_setup_pyplot_info_docstrings'
    module_type_store = module_type_store.open_function_context('_setup_pyplot_info_docstrings', 2116, 0, False)
    
    # Passed parameters checking function
    _setup_pyplot_info_docstrings.stypy_localization = localization
    _setup_pyplot_info_docstrings.stypy_type_of_self = None
    _setup_pyplot_info_docstrings.stypy_type_store = module_type_store
    _setup_pyplot_info_docstrings.stypy_function_name = '_setup_pyplot_info_docstrings'
    _setup_pyplot_info_docstrings.stypy_param_names_list = []
    _setup_pyplot_info_docstrings.stypy_varargs_param_name = None
    _setup_pyplot_info_docstrings.stypy_kwargs_param_name = None
    _setup_pyplot_info_docstrings.stypy_call_defaults = defaults
    _setup_pyplot_info_docstrings.stypy_call_varargs = varargs
    _setup_pyplot_info_docstrings.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_setup_pyplot_info_docstrings', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_setup_pyplot_info_docstrings', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_setup_pyplot_info_docstrings(...)' code ##################

    unicode_116775 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2123, (-1)), 'unicode', u'\n    Generates the plotting and docstring.\n\n    These must be done after the entire module is imported, so it is\n    called from the end of this module, which is generated by\n    boilerplate.py.\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2125, 4))
    
    # 'import re' statement (line 2125)
    import re

    import_module(stypy.reporting.localization.Localization(__file__, 2125, 4), 're', re, module_type_store)
    

    @norecursion
    def pad(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'pad'
        module_type_store = module_type_store.open_function_context('pad', 2127, 4, False)
        
        # Passed parameters checking function
        pad.stypy_localization = localization
        pad.stypy_type_of_self = None
        pad.stypy_type_store = module_type_store
        pad.stypy_function_name = 'pad'
        pad.stypy_param_names_list = ['s', 'l']
        pad.stypy_varargs_param_name = None
        pad.stypy_kwargs_param_name = None
        pad.stypy_call_defaults = defaults
        pad.stypy_call_varargs = varargs
        pad.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'pad', ['s', 'l'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'pad', localization, ['s', 'l'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'pad(...)' code ##################

        unicode_116776 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2128, 8), 'unicode', u'Pad string *s* to length *l*.')
        
        
        # Getting the type of 'l' (line 2129)
        l_116777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 11), 'l')
        
        # Call to len(...): (line 2129)
        # Processing the call arguments (line 2129)
        # Getting the type of 's' (line 2129)
        s_116779 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 19), 's', False)
        # Processing the call keyword arguments (line 2129)
        kwargs_116780 = {}
        # Getting the type of 'len' (line 2129)
        len_116778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2129, 15), 'len', False)
        # Calling len(args, kwargs) (line 2129)
        len_call_result_116781 = invoke(stypy.reporting.localization.Localization(__file__, 2129, 15), len_116778, *[s_116779], **kwargs_116780)
        
        # Applying the binary operator '<' (line 2129)
        result_lt_116782 = python_operator(stypy.reporting.localization.Localization(__file__, 2129, 11), '<', l_116777, len_call_result_116781)
        
        # Testing the type of an if condition (line 2129)
        if_condition_116783 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2129, 8), result_lt_116782)
        # Assigning a type to the variable 'if_condition_116783' (line 2129)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2129, 8), 'if_condition_116783', if_condition_116783)
        # SSA begins for if statement (line 2129)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining the type of the subscript
        # Getting the type of 'l' (line 2130)
        l_116784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 22), 'l')
        slice_116785 = ensure_slice_bounds(stypy.reporting.localization.Localization(__file__, 2130, 19), None, l_116784, None)
        # Getting the type of 's' (line 2130)
        s_116786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2130, 19), 's')
        # Obtaining the member '__getitem__' of a type (line 2130)
        getitem___116787 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2130, 19), s_116786, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2130)
        subscript_call_result_116788 = invoke(stypy.reporting.localization.Localization(__file__, 2130, 19), getitem___116787, slice_116785)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2130)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2130, 12), 'stypy_return_type', subscript_call_result_116788)
        # SSA join for if statement (line 2129)
        module_type_store = module_type_store.join_ssa_context()
        
        # Getting the type of 's' (line 2131)
        s_116789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2131, 15), 's')
        unicode_116790 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2131, 19), 'unicode', u' ')
        # Getting the type of 'l' (line 2131)
        l_116791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2131, 26), 'l')
        
        # Call to len(...): (line 2131)
        # Processing the call arguments (line 2131)
        # Getting the type of 's' (line 2131)
        s_116793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2131, 34), 's', False)
        # Processing the call keyword arguments (line 2131)
        kwargs_116794 = {}
        # Getting the type of 'len' (line 2131)
        len_116792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2131, 30), 'len', False)
        # Calling len(args, kwargs) (line 2131)
        len_call_result_116795 = invoke(stypy.reporting.localization.Localization(__file__, 2131, 30), len_116792, *[s_116793], **kwargs_116794)
        
        # Applying the binary operator '-' (line 2131)
        result_sub_116796 = python_operator(stypy.reporting.localization.Localization(__file__, 2131, 26), '-', l_116791, len_call_result_116795)
        
        # Applying the binary operator '*' (line 2131)
        result_mul_116797 = python_operator(stypy.reporting.localization.Localization(__file__, 2131, 19), '*', unicode_116790, result_sub_116796)
        
        # Applying the binary operator '+' (line 2131)
        result_add_116798 = python_operator(stypy.reporting.localization.Localization(__file__, 2131, 15), '+', s_116789, result_mul_116797)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2131)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2131, 8), 'stypy_return_type', result_add_116798)
        
        # ################# End of 'pad(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'pad' in the type store
        # Getting the type of 'stypy_return_type' (line 2127)
        stypy_return_type_116799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2127, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_116799)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'pad'
        return stypy_return_type_116799

    # Assigning a type to the variable 'pad' (line 2127)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2127, 4), 'pad', pad)
    
    # Assigning a Call to a Name (line 2133):
    
    # Assigning a Call to a Name (line 2133):
    
    # Call to get_plot_commands(...): (line 2133)
    # Processing the call keyword arguments (line 2133)
    kwargs_116801 = {}
    # Getting the type of 'get_plot_commands' (line 2133)
    get_plot_commands_116800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2133, 15), 'get_plot_commands', False)
    # Calling get_plot_commands(args, kwargs) (line 2133)
    get_plot_commands_call_result_116802 = invoke(stypy.reporting.localization.Localization(__file__, 2133, 15), get_plot_commands_116800, *[], **kwargs_116801)
    
    # Assigning a type to the variable 'commands' (line 2133)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2133, 4), 'commands', get_plot_commands_call_result_116802)
    
    # Assigning a Call to a Name (line 2135):
    
    # Assigning a Call to a Name (line 2135):
    
    # Call to compile(...): (line 2135)
    # Processing the call arguments (line 2135)
    unicode_116805 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2135, 32), 'unicode', u'(?:\\s*).+?\\.(?:\\s+|$)')
    # Processing the call keyword arguments (line 2135)
    # Getting the type of 're' (line 2135)
    re_116806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 64), 're', False)
    # Obtaining the member 'DOTALL' of a type (line 2135)
    DOTALL_116807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 64), re_116806, 'DOTALL')
    keyword_116808 = DOTALL_116807
    kwargs_116809 = {'flags': keyword_116808}
    # Getting the type of 're' (line 2135)
    re_116803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2135, 21), 're', False)
    # Obtaining the member 'compile' of a type (line 2135)
    compile_116804 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2135, 21), re_116803, 'compile')
    # Calling compile(args, kwargs) (line 2135)
    compile_call_result_116810 = invoke(stypy.reporting.localization.Localization(__file__, 2135, 21), compile_116804, *[unicode_116805], **kwargs_116809)
    
    # Assigning a type to the variable 'first_sentence' (line 2135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2135, 4), 'first_sentence', compile_call_result_116810)
    
    # Assigning a List to a Name (line 2139):
    
    # Assigning a List to a Name (line 2139):
    
    # Obtaining an instance of the builtin type 'list' (line 2139)
    list_116811 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2139, 11), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2139)
    
    # Assigning a type to the variable 'rows' (line 2139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2139, 4), 'rows', list_116811)
    
    # Assigning a Num to a Name (line 2140):
    
    # Assigning a Num to a Name (line 2140):
    int_116812 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2140, 15), 'int')
    # Assigning a type to the variable 'max_name' (line 2140)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2140, 4), 'max_name', int_116812)
    
    # Assigning a Num to a Name (line 2141):
    
    # Assigning a Num to a Name (line 2141):
    int_116813 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2141, 18), 'int')
    # Assigning a type to the variable 'max_summary' (line 2141)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2141, 4), 'max_summary', int_116813)
    
    # Getting the type of 'commands' (line 2142)
    commands_116814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2142, 16), 'commands')
    # Testing the type of a for loop iterable (line 2142)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2142, 4), commands_116814)
    # Getting the type of the for loop variable (line 2142)
    for_loop_var_116815 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2142, 4), commands_116814)
    # Assigning a type to the variable 'name' (line 2142)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2142, 4), 'name', for_loop_var_116815)
    # SSA begins for a for statement (line 2142)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Assigning a Attribute to a Name (line 2143):
    
    # Assigning a Attribute to a Name (line 2143):
    
    # Obtaining the type of the subscript
    # Getting the type of 'name' (line 2143)
    name_116816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 24), 'name')
    
    # Call to globals(...): (line 2143)
    # Processing the call keyword arguments (line 2143)
    kwargs_116818 = {}
    # Getting the type of 'globals' (line 2143)
    globals_116817 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2143, 14), 'globals', False)
    # Calling globals(args, kwargs) (line 2143)
    globals_call_result_116819 = invoke(stypy.reporting.localization.Localization(__file__, 2143, 14), globals_116817, *[], **kwargs_116818)
    
    # Obtaining the member '__getitem__' of a type (line 2143)
    getitem___116820 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2143, 14), globals_call_result_116819, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2143)
    subscript_call_result_116821 = invoke(stypy.reporting.localization.Localization(__file__, 2143, 14), getitem___116820, name_116816)
    
    # Obtaining the member '__doc__' of a type (line 2143)
    doc___116822 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2143, 14), subscript_call_result_116821, '__doc__')
    # Assigning a type to the variable 'doc' (line 2143)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2143, 8), 'doc', doc___116822)
    
    # Assigning a Str to a Name (line 2144):
    
    # Assigning a Str to a Name (line 2144):
    unicode_116823 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2144, 18), 'unicode', u'')
    # Assigning a type to the variable 'summary' (line 2144)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2144, 8), 'summary', unicode_116823)
    
    # Type idiom detected: calculating its left and rigth part (line 2145)
    # Getting the type of 'doc' (line 2145)
    doc_116824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2145, 8), 'doc')
    # Getting the type of 'None' (line 2145)
    None_116825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2145, 22), 'None')
    
    (may_be_116826, more_types_in_union_116827) = may_not_be_none(doc_116824, None_116825)

    if may_be_116826:

        if more_types_in_union_116827:
            # Runtime conditional SSA (line 2145)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2146):
        
        # Assigning a Call to a Name (line 2146):
        
        # Call to match(...): (line 2146)
        # Processing the call arguments (line 2146)
        # Getting the type of 'doc' (line 2146)
        doc_116830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 41), 'doc', False)
        # Processing the call keyword arguments (line 2146)
        kwargs_116831 = {}
        # Getting the type of 'first_sentence' (line 2146)
        first_sentence_116828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2146, 20), 'first_sentence', False)
        # Obtaining the member 'match' of a type (line 2146)
        match_116829 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2146, 20), first_sentence_116828, 'match')
        # Calling match(args, kwargs) (line 2146)
        match_call_result_116832 = invoke(stypy.reporting.localization.Localization(__file__, 2146, 20), match_116829, *[doc_116830], **kwargs_116831)
        
        # Assigning a type to the variable 'match' (line 2146)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2146, 12), 'match', match_call_result_116832)
        
        # Type idiom detected: calculating its left and rigth part (line 2147)
        # Getting the type of 'match' (line 2147)
        match_116833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 12), 'match')
        # Getting the type of 'None' (line 2147)
        None_116834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2147, 28), 'None')
        
        (may_be_116835, more_types_in_union_116836) = may_not_be_none(match_116833, None_116834)

        if may_be_116835:

            if more_types_in_union_116836:
                # Runtime conditional SSA (line 2147)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Assigning a Call to a Name (line 2148):
            
            # Assigning a Call to a Name (line 2148):
            
            # Call to replace(...): (line 2148)
            # Processing the call arguments (line 2148)
            unicode_116846 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2148, 57), 'unicode', u'\n')
            unicode_116847 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2148, 63), 'unicode', u' ')
            # Processing the call keyword arguments (line 2148)
            kwargs_116848 = {}
            
            # Call to strip(...): (line 2148)
            # Processing the call keyword arguments (line 2148)
            kwargs_116843 = {}
            
            # Call to group(...): (line 2148)
            # Processing the call arguments (line 2148)
            int_116839 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2148, 38), 'int')
            # Processing the call keyword arguments (line 2148)
            kwargs_116840 = {}
            # Getting the type of 'match' (line 2148)
            match_116837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2148, 26), 'match', False)
            # Obtaining the member 'group' of a type (line 2148)
            group_116838 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2148, 26), match_116837, 'group')
            # Calling group(args, kwargs) (line 2148)
            group_call_result_116841 = invoke(stypy.reporting.localization.Localization(__file__, 2148, 26), group_116838, *[int_116839], **kwargs_116840)
            
            # Obtaining the member 'strip' of a type (line 2148)
            strip_116842 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2148, 26), group_call_result_116841, 'strip')
            # Calling strip(args, kwargs) (line 2148)
            strip_call_result_116844 = invoke(stypy.reporting.localization.Localization(__file__, 2148, 26), strip_116842, *[], **kwargs_116843)
            
            # Obtaining the member 'replace' of a type (line 2148)
            replace_116845 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2148, 26), strip_call_result_116844, 'replace')
            # Calling replace(args, kwargs) (line 2148)
            replace_call_result_116849 = invoke(stypy.reporting.localization.Localization(__file__, 2148, 26), replace_116845, *[unicode_116846, unicode_116847], **kwargs_116848)
            
            # Assigning a type to the variable 'summary' (line 2148)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2148, 16), 'summary', replace_call_result_116849)

            if more_types_in_union_116836:
                # SSA join for if statement (line 2147)
                module_type_store = module_type_store.join_ssa_context()


        

        if more_types_in_union_116827:
            # SSA join for if statement (line 2145)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a BinOp to a Name (line 2149):
    
    # Assigning a BinOp to a Name (line 2149):
    unicode_116850 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2149, 15), 'unicode', u'`%s`')
    # Getting the type of 'name' (line 2149)
    name_116851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2149, 24), 'name')
    # Applying the binary operator '%' (line 2149)
    result_mod_116852 = python_operator(stypy.reporting.localization.Localization(__file__, 2149, 15), '%', unicode_116850, name_116851)
    
    # Assigning a type to the variable 'name' (line 2149)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2149, 8), 'name', result_mod_116852)
    
    # Call to append(...): (line 2150)
    # Processing the call arguments (line 2150)
    
    # Obtaining an instance of the builtin type 'list' (line 2150)
    list_116855 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2150, 20), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2150)
    # Adding element type (line 2150)
    # Getting the type of 'name' (line 2150)
    name_116856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 21), 'name', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2150, 20), list_116855, name_116856)
    # Adding element type (line 2150)
    # Getting the type of 'summary' (line 2150)
    summary_116857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 27), 'summary', False)
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2150, 20), list_116855, summary_116857)
    
    # Processing the call keyword arguments (line 2150)
    kwargs_116858 = {}
    # Getting the type of 'rows' (line 2150)
    rows_116853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2150, 8), 'rows', False)
    # Obtaining the member 'append' of a type (line 2150)
    append_116854 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2150, 8), rows_116853, 'append')
    # Calling append(args, kwargs) (line 2150)
    append_call_result_116859 = invoke(stypy.reporting.localization.Localization(__file__, 2150, 8), append_116854, *[list_116855], **kwargs_116858)
    
    
    # Assigning a Call to a Name (line 2151):
    
    # Assigning a Call to a Name (line 2151):
    
    # Call to max(...): (line 2151)
    # Processing the call arguments (line 2151)
    # Getting the type of 'max_name' (line 2151)
    max_name_116861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 23), 'max_name', False)
    
    # Call to len(...): (line 2151)
    # Processing the call arguments (line 2151)
    # Getting the type of 'name' (line 2151)
    name_116863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 37), 'name', False)
    # Processing the call keyword arguments (line 2151)
    kwargs_116864 = {}
    # Getting the type of 'len' (line 2151)
    len_116862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 33), 'len', False)
    # Calling len(args, kwargs) (line 2151)
    len_call_result_116865 = invoke(stypy.reporting.localization.Localization(__file__, 2151, 33), len_116862, *[name_116863], **kwargs_116864)
    
    # Processing the call keyword arguments (line 2151)
    kwargs_116866 = {}
    # Getting the type of 'max' (line 2151)
    max_116860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2151, 19), 'max', False)
    # Calling max(args, kwargs) (line 2151)
    max_call_result_116867 = invoke(stypy.reporting.localization.Localization(__file__, 2151, 19), max_116860, *[max_name_116861, len_call_result_116865], **kwargs_116866)
    
    # Assigning a type to the variable 'max_name' (line 2151)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2151, 8), 'max_name', max_call_result_116867)
    
    # Assigning a Call to a Name (line 2152):
    
    # Assigning a Call to a Name (line 2152):
    
    # Call to max(...): (line 2152)
    # Processing the call arguments (line 2152)
    # Getting the type of 'max_summary' (line 2152)
    max_summary_116869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 26), 'max_summary', False)
    
    # Call to len(...): (line 2152)
    # Processing the call arguments (line 2152)
    # Getting the type of 'summary' (line 2152)
    summary_116871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 43), 'summary', False)
    # Processing the call keyword arguments (line 2152)
    kwargs_116872 = {}
    # Getting the type of 'len' (line 2152)
    len_116870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 39), 'len', False)
    # Calling len(args, kwargs) (line 2152)
    len_call_result_116873 = invoke(stypy.reporting.localization.Localization(__file__, 2152, 39), len_116870, *[summary_116871], **kwargs_116872)
    
    # Processing the call keyword arguments (line 2152)
    kwargs_116874 = {}
    # Getting the type of 'max' (line 2152)
    max_116868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2152, 22), 'max', False)
    # Calling max(args, kwargs) (line 2152)
    max_call_result_116875 = invoke(stypy.reporting.localization.Localization(__file__, 2152, 22), max_116868, *[max_summary_116869, len_call_result_116873], **kwargs_116874)
    
    # Assigning a type to the variable 'max_summary' (line 2152)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2152, 8), 'max_summary', max_call_result_116875)
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a List to a Name (line 2154):
    
    # Assigning a List to a Name (line 2154):
    
    # Obtaining an instance of the builtin type 'list' (line 2154)
    list_116876 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2154, 12), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2154)
    
    # Assigning a type to the variable 'lines' (line 2154)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2154, 4), 'lines', list_116876)
    
    # Assigning a BinOp to a Name (line 2155):
    
    # Assigning a BinOp to a Name (line 2155):
    unicode_116877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2155, 10), 'unicode', u'=')
    # Getting the type of 'max_name' (line 2155)
    max_name_116878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 16), 'max_name')
    # Applying the binary operator '*' (line 2155)
    result_mul_116879 = python_operator(stypy.reporting.localization.Localization(__file__, 2155, 10), '*', unicode_116877, max_name_116878)
    
    unicode_116880 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2155, 27), 'unicode', u' ')
    # Applying the binary operator '+' (line 2155)
    result_add_116881 = python_operator(stypy.reporting.localization.Localization(__file__, 2155, 10), '+', result_mul_116879, unicode_116880)
    
    unicode_116882 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2155, 33), 'unicode', u'=')
    # Getting the type of 'max_summary' (line 2155)
    max_summary_116883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2155, 39), 'max_summary')
    # Applying the binary operator '*' (line 2155)
    result_mul_116884 = python_operator(stypy.reporting.localization.Localization(__file__, 2155, 33), '*', unicode_116882, max_summary_116883)
    
    # Applying the binary operator '+' (line 2155)
    result_add_116885 = python_operator(stypy.reporting.localization.Localization(__file__, 2155, 31), '+', result_add_116881, result_mul_116884)
    
    # Assigning a type to the variable 'sep' (line 2155)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2155, 4), 'sep', result_add_116885)
    
    # Call to append(...): (line 2156)
    # Processing the call arguments (line 2156)
    # Getting the type of 'sep' (line 2156)
    sep_116888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 17), 'sep', False)
    # Processing the call keyword arguments (line 2156)
    kwargs_116889 = {}
    # Getting the type of 'lines' (line 2156)
    lines_116886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2156, 4), 'lines', False)
    # Obtaining the member 'append' of a type (line 2156)
    append_116887 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2156, 4), lines_116886, 'append')
    # Calling append(args, kwargs) (line 2156)
    append_call_result_116890 = invoke(stypy.reporting.localization.Localization(__file__, 2156, 4), append_116887, *[sep_116888], **kwargs_116889)
    
    
    # Call to append(...): (line 2157)
    # Processing the call arguments (line 2157)
    
    # Call to join(...): (line 2157)
    # Processing the call arguments (line 2157)
    
    # Obtaining an instance of the builtin type 'list' (line 2157)
    list_116895 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2157, 26), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2157)
    # Adding element type (line 2157)
    
    # Call to pad(...): (line 2157)
    # Processing the call arguments (line 2157)
    unicode_116897 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2157, 31), 'unicode', u'Function')
    # Getting the type of 'max_name' (line 2157)
    max_name_116898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 43), 'max_name', False)
    # Processing the call keyword arguments (line 2157)
    kwargs_116899 = {}
    # Getting the type of 'pad' (line 2157)
    pad_116896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 27), 'pad', False)
    # Calling pad(args, kwargs) (line 2157)
    pad_call_result_116900 = invoke(stypy.reporting.localization.Localization(__file__, 2157, 27), pad_116896, *[unicode_116897, max_name_116898], **kwargs_116899)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2157, 26), list_116895, pad_call_result_116900)
    # Adding element type (line 2157)
    
    # Call to pad(...): (line 2158)
    # Processing the call arguments (line 2158)
    unicode_116902 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2158, 31), 'unicode', u'Description')
    # Getting the type of 'max_summary' (line 2158)
    max_summary_116903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 46), 'max_summary', False)
    # Processing the call keyword arguments (line 2158)
    kwargs_116904 = {}
    # Getting the type of 'pad' (line 2158)
    pad_116901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2158, 27), 'pad', False)
    # Calling pad(args, kwargs) (line 2158)
    pad_call_result_116905 = invoke(stypy.reporting.localization.Localization(__file__, 2158, 27), pad_116901, *[unicode_116902, max_summary_116903], **kwargs_116904)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2157, 26), list_116895, pad_call_result_116905)
    
    # Processing the call keyword arguments (line 2157)
    kwargs_116906 = {}
    unicode_116893 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2157, 17), 'unicode', u' ')
    # Obtaining the member 'join' of a type (line 2157)
    join_116894 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2157, 17), unicode_116893, 'join')
    # Calling join(args, kwargs) (line 2157)
    join_call_result_116907 = invoke(stypy.reporting.localization.Localization(__file__, 2157, 17), join_116894, *[list_116895], **kwargs_116906)
    
    # Processing the call keyword arguments (line 2157)
    kwargs_116908 = {}
    # Getting the type of 'lines' (line 2157)
    lines_116891 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2157, 4), 'lines', False)
    # Obtaining the member 'append' of a type (line 2157)
    append_116892 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2157, 4), lines_116891, 'append')
    # Calling append(args, kwargs) (line 2157)
    append_call_result_116909 = invoke(stypy.reporting.localization.Localization(__file__, 2157, 4), append_116892, *[join_call_result_116907], **kwargs_116908)
    
    
    # Call to append(...): (line 2159)
    # Processing the call arguments (line 2159)
    # Getting the type of 'sep' (line 2159)
    sep_116912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 17), 'sep', False)
    # Processing the call keyword arguments (line 2159)
    kwargs_116913 = {}
    # Getting the type of 'lines' (line 2159)
    lines_116910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2159, 4), 'lines', False)
    # Obtaining the member 'append' of a type (line 2159)
    append_116911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2159, 4), lines_116910, 'append')
    # Calling append(args, kwargs) (line 2159)
    append_call_result_116914 = invoke(stypy.reporting.localization.Localization(__file__, 2159, 4), append_116911, *[sep_116912], **kwargs_116913)
    
    
    # Getting the type of 'rows' (line 2160)
    rows_116915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2160, 25), 'rows')
    # Testing the type of a for loop iterable (line 2160)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2160, 4), rows_116915)
    # Getting the type of the for loop variable (line 2160)
    for_loop_var_116916 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2160, 4), rows_116915)
    # Assigning a type to the variable 'name' (line 2160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2160, 4), 'name', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2160, 4), for_loop_var_116916))
    # Assigning a type to the variable 'summary' (line 2160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2160, 4), 'summary', get_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2160, 4), for_loop_var_116916))
    # SSA begins for a for statement (line 2160)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Call to append(...): (line 2161)
    # Processing the call arguments (line 2161)
    
    # Call to join(...): (line 2161)
    # Processing the call arguments (line 2161)
    
    # Obtaining an instance of the builtin type 'list' (line 2161)
    list_116921 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2161, 30), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2161)
    # Adding element type (line 2161)
    
    # Call to pad(...): (line 2161)
    # Processing the call arguments (line 2161)
    # Getting the type of 'name' (line 2161)
    name_116923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 35), 'name', False)
    # Getting the type of 'max_name' (line 2161)
    max_name_116924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 41), 'max_name', False)
    # Processing the call keyword arguments (line 2161)
    kwargs_116925 = {}
    # Getting the type of 'pad' (line 2161)
    pad_116922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 31), 'pad', False)
    # Calling pad(args, kwargs) (line 2161)
    pad_call_result_116926 = invoke(stypy.reporting.localization.Localization(__file__, 2161, 31), pad_116922, *[name_116923, max_name_116924], **kwargs_116925)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2161, 30), list_116921, pad_call_result_116926)
    # Adding element type (line 2161)
    
    # Call to pad(...): (line 2162)
    # Processing the call arguments (line 2162)
    # Getting the type of 'summary' (line 2162)
    summary_116928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 35), 'summary', False)
    # Getting the type of 'max_summary' (line 2162)
    max_summary_116929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 44), 'max_summary', False)
    # Processing the call keyword arguments (line 2162)
    kwargs_116930 = {}
    # Getting the type of 'pad' (line 2162)
    pad_116927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2162, 31), 'pad', False)
    # Calling pad(args, kwargs) (line 2162)
    pad_call_result_116931 = invoke(stypy.reporting.localization.Localization(__file__, 2162, 31), pad_116927, *[summary_116928, max_summary_116929], **kwargs_116930)
    
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2161, 30), list_116921, pad_call_result_116931)
    
    # Processing the call keyword arguments (line 2161)
    kwargs_116932 = {}
    unicode_116919 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2161, 21), 'unicode', u' ')
    # Obtaining the member 'join' of a type (line 2161)
    join_116920 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2161, 21), unicode_116919, 'join')
    # Calling join(args, kwargs) (line 2161)
    join_call_result_116933 = invoke(stypy.reporting.localization.Localization(__file__, 2161, 21), join_116920, *[list_116921], **kwargs_116932)
    
    # Processing the call keyword arguments (line 2161)
    kwargs_116934 = {}
    # Getting the type of 'lines' (line 2161)
    lines_116917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2161, 8), 'lines', False)
    # Obtaining the member 'append' of a type (line 2161)
    append_116918 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2161, 8), lines_116917, 'append')
    # Calling append(args, kwargs) (line 2161)
    append_call_result_116935 = invoke(stypy.reporting.localization.Localization(__file__, 2161, 8), append_116918, *[join_call_result_116933], **kwargs_116934)
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Call to append(...): (line 2163)
    # Processing the call arguments (line 2163)
    # Getting the type of 'sep' (line 2163)
    sep_116938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 17), 'sep', False)
    # Processing the call keyword arguments (line 2163)
    kwargs_116939 = {}
    # Getting the type of 'lines' (line 2163)
    lines_116936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2163, 4), 'lines', False)
    # Obtaining the member 'append' of a type (line 2163)
    append_116937 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2163, 4), lines_116936, 'append')
    # Calling append(args, kwargs) (line 2163)
    append_call_result_116940 = invoke(stypy.reporting.localization.Localization(__file__, 2163, 4), append_116937, *[sep_116938], **kwargs_116939)
    
    
    # Assigning a Call to a Attribute (line 2165):
    
    # Assigning a Call to a Attribute (line 2165):
    
    # Call to join(...): (line 2165)
    # Processing the call arguments (line 2165)
    # Getting the type of 'lines' (line 2165)
    lines_116943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 33), 'lines', False)
    # Processing the call keyword arguments (line 2165)
    kwargs_116944 = {}
    unicode_116941 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2165, 23), 'unicode', u'\n')
    # Obtaining the member 'join' of a type (line 2165)
    join_116942 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2165, 23), unicode_116941, 'join')
    # Calling join(args, kwargs) (line 2165)
    join_call_result_116945 = invoke(stypy.reporting.localization.Localization(__file__, 2165, 23), join_116942, *[lines_116943], **kwargs_116944)
    
    # Getting the type of 'plotting' (line 2165)
    plotting_116946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2165, 4), 'plotting')
    # Setting the type of the member '__doc__' of a type (line 2165)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2165, 4), plotting_116946, '__doc__', join_call_result_116945)
    
    # ################# End of '_setup_pyplot_info_docstrings(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_setup_pyplot_info_docstrings' in the type store
    # Getting the type of 'stypy_return_type' (line 2116)
    stypy_return_type_116947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2116, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116947)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_setup_pyplot_info_docstrings'
    return stypy_return_type_116947

# Assigning a type to the variable '_setup_pyplot_info_docstrings' (line 2116)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2116, 0), '_setup_pyplot_info_docstrings', _setup_pyplot_info_docstrings)

@norecursion
def colorbar(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2169)
    None_116948 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 22), 'None')
    # Getting the type of 'None' (line 2169)
    None_116949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 32), 'None')
    # Getting the type of 'None' (line 2169)
    None_116950 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 41), 'None')
    defaults = [None_116948, None_116949, None_116950]
    # Create a new context for function 'colorbar'
    module_type_store = module_type_store.open_function_context('colorbar', 2169, 0, False)
    
    # Passed parameters checking function
    colorbar.stypy_localization = localization
    colorbar.stypy_type_of_self = None
    colorbar.stypy_type_store = module_type_store
    colorbar.stypy_function_name = 'colorbar'
    colorbar.stypy_param_names_list = ['mappable', 'cax', 'ax']
    colorbar.stypy_varargs_param_name = None
    colorbar.stypy_kwargs_param_name = 'kw'
    colorbar.stypy_call_defaults = defaults
    colorbar.stypy_call_varargs = varargs
    colorbar.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'colorbar', ['mappable', 'cax', 'ax'], None, 'kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'colorbar', localization, ['mappable', 'cax', 'ax'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'colorbar(...)' code ##################

    
    # Type idiom detected: calculating its left and rigth part (line 2170)
    # Getting the type of 'mappable' (line 2170)
    mappable_116951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 7), 'mappable')
    # Getting the type of 'None' (line 2170)
    None_116952 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2170, 19), 'None')
    
    (may_be_116953, more_types_in_union_116954) = may_be_none(mappable_116951, None_116952)

    if may_be_116953:

        if more_types_in_union_116954:
            # Runtime conditional SSA (line 2170)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2171):
        
        # Assigning a Call to a Name (line 2171):
        
        # Call to gci(...): (line 2171)
        # Processing the call keyword arguments (line 2171)
        kwargs_116956 = {}
        # Getting the type of 'gci' (line 2171)
        gci_116955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2171, 19), 'gci', False)
        # Calling gci(args, kwargs) (line 2171)
        gci_call_result_116957 = invoke(stypy.reporting.localization.Localization(__file__, 2171, 19), gci_116955, *[], **kwargs_116956)
        
        # Assigning a type to the variable 'mappable' (line 2171)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2171, 8), 'mappable', gci_call_result_116957)
        
        # Type idiom detected: calculating its left and rigth part (line 2172)
        # Getting the type of 'mappable' (line 2172)
        mappable_116958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 11), 'mappable')
        # Getting the type of 'None' (line 2172)
        None_116959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2172, 23), 'None')
        
        (may_be_116960, more_types_in_union_116961) = may_be_none(mappable_116958, None_116959)

        if may_be_116960:

            if more_types_in_union_116961:
                # Runtime conditional SSA (line 2172)
                module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
            else:
                module_type_store = module_type_store

            
            # Call to RuntimeError(...): (line 2173)
            # Processing the call arguments (line 2173)
            unicode_116963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2173, 31), 'unicode', u'No mappable was found to use for colorbar creation. First define a mappable such as an image (with imshow) or a contour set (with contourf).')
            # Processing the call keyword arguments (line 2173)
            kwargs_116964 = {}
            # Getting the type of 'RuntimeError' (line 2173)
            RuntimeError_116962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2173, 18), 'RuntimeError', False)
            # Calling RuntimeError(args, kwargs) (line 2173)
            RuntimeError_call_result_116965 = invoke(stypy.reporting.localization.Localization(__file__, 2173, 18), RuntimeError_116962, *[unicode_116963], **kwargs_116964)
            
            ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2173, 12), RuntimeError_call_result_116965, 'raise parameter', BaseException)

            if more_types_in_union_116961:
                # SSA join for if statement (line 2172)
                module_type_store = module_type_store.join_ssa_context()


        

        if more_types_in_union_116954:
            # SSA join for if statement (line 2170)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Type idiom detected: calculating its left and rigth part (line 2177)
    # Getting the type of 'ax' (line 2177)
    ax_116966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 7), 'ax')
    # Getting the type of 'None' (line 2177)
    None_116967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2177, 13), 'None')
    
    (may_be_116968, more_types_in_union_116969) = may_be_none(ax_116966, None_116967)

    if may_be_116968:

        if more_types_in_union_116969:
            # Runtime conditional SSA (line 2177)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2178):
        
        # Assigning a Call to a Name (line 2178):
        
        # Call to gca(...): (line 2178)
        # Processing the call keyword arguments (line 2178)
        kwargs_116971 = {}
        # Getting the type of 'gca' (line 2178)
        gca_116970 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2178, 13), 'gca', False)
        # Calling gca(args, kwargs) (line 2178)
        gca_call_result_116972 = invoke(stypy.reporting.localization.Localization(__file__, 2178, 13), gca_116970, *[], **kwargs_116971)
        
        # Assigning a type to the variable 'ax' (line 2178)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2178, 8), 'ax', gca_call_result_116972)

        if more_types_in_union_116969:
            # SSA join for if statement (line 2177)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2180):
    
    # Assigning a Call to a Name (line 2180):
    
    # Call to colorbar(...): (line 2180)
    # Processing the call arguments (line 2180)
    # Getting the type of 'mappable' (line 2180)
    mappable_116977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 25), 'mappable', False)
    # Processing the call keyword arguments (line 2180)
    # Getting the type of 'cax' (line 2180)
    cax_116978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 41), 'cax', False)
    keyword_116979 = cax_116978
    # Getting the type of 'ax' (line 2180)
    ax_116980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 49), 'ax', False)
    keyword_116981 = ax_116980
    # Getting the type of 'kw' (line 2180)
    kw_116982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 55), 'kw', False)
    kwargs_116983 = {'ax': keyword_116981, 'cax': keyword_116979, 'kw_116982': kw_116982}
    
    # Call to gcf(...): (line 2180)
    # Processing the call keyword arguments (line 2180)
    kwargs_116974 = {}
    # Getting the type of 'gcf' (line 2180)
    gcf_116973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2180, 10), 'gcf', False)
    # Calling gcf(args, kwargs) (line 2180)
    gcf_call_result_116975 = invoke(stypy.reporting.localization.Localization(__file__, 2180, 10), gcf_116973, *[], **kwargs_116974)
    
    # Obtaining the member 'colorbar' of a type (line 2180)
    colorbar_116976 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2180, 10), gcf_call_result_116975, 'colorbar')
    # Calling colorbar(args, kwargs) (line 2180)
    colorbar_call_result_116984 = invoke(stypy.reporting.localization.Localization(__file__, 2180, 10), colorbar_116976, *[mappable_116977], **kwargs_116983)
    
    # Assigning a type to the variable 'ret' (line 2180)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2180, 4), 'ret', colorbar_call_result_116984)
    # Getting the type of 'ret' (line 2181)
    ret_116985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2181, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2181, 4), 'stypy_return_type', ret_116985)
    
    # ################# End of 'colorbar(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'colorbar' in the type store
    # Getting the type of 'stypy_return_type' (line 2169)
    stypy_return_type_116986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2169, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_116986)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'colorbar'
    return stypy_return_type_116986

# Assigning a type to the variable 'colorbar' (line 2169)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2169, 0), 'colorbar', colorbar)

# Assigning a Attribute to a Attribute (line 2182):

# Assigning a Attribute to a Attribute (line 2182):
# Getting the type of 'matplotlib' (line 2182)
matplotlib_116987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 19), 'matplotlib')
# Obtaining the member 'colorbar' of a type (line 2182)
colorbar_116988 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 19), matplotlib_116987, 'colorbar')
# Obtaining the member 'colorbar_doc' of a type (line 2182)
colorbar_doc_116989 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 19), colorbar_116988, 'colorbar_doc')
# Getting the type of 'colorbar' (line 2182)
colorbar_116990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2182, 0), 'colorbar')
# Setting the type of the member '__doc__' of a type (line 2182)
module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2182, 0), colorbar_116990, '__doc__', colorbar_doc_116989)

@norecursion
def clim(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2185)
    None_116991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 14), 'None')
    # Getting the type of 'None' (line 2185)
    None_116992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 25), 'None')
    defaults = [None_116991, None_116992]
    # Create a new context for function 'clim'
    module_type_store = module_type_store.open_function_context('clim', 2185, 0, False)
    
    # Passed parameters checking function
    clim.stypy_localization = localization
    clim.stypy_type_of_self = None
    clim.stypy_type_store = module_type_store
    clim.stypy_function_name = 'clim'
    clim.stypy_param_names_list = ['vmin', 'vmax']
    clim.stypy_varargs_param_name = None
    clim.stypy_kwargs_param_name = None
    clim.stypy_call_defaults = defaults
    clim.stypy_call_varargs = varargs
    clim.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'clim', ['vmin', 'vmax'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'clim', localization, ['vmin', 'vmax'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'clim(...)' code ##################

    unicode_116993 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2202, (-1)), 'unicode', u'\n    Set the color limits of the current image.\n\n    To apply clim to all axes images do::\n\n      clim(0, 0.5)\n\n    If either *vmin* or *vmax* is None, the image min/max respectively\n    will be used for color scaling.\n\n    If you want to set the clim of multiple images,\n    use, for example::\n\n      for im in gca().get_images():\n          im.set_clim(0, 0.05)\n\n    ')
    
    # Assigning a Call to a Name (line 2203):
    
    # Assigning a Call to a Name (line 2203):
    
    # Call to gci(...): (line 2203)
    # Processing the call keyword arguments (line 2203)
    kwargs_116995 = {}
    # Getting the type of 'gci' (line 2203)
    gci_116994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2203, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 2203)
    gci_call_result_116996 = invoke(stypy.reporting.localization.Localization(__file__, 2203, 9), gci_116994, *[], **kwargs_116995)
    
    # Assigning a type to the variable 'im' (line 2203)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2203, 4), 'im', gci_call_result_116996)
    
    # Type idiom detected: calculating its left and rigth part (line 2204)
    # Getting the type of 'im' (line 2204)
    im_116997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 7), 'im')
    # Getting the type of 'None' (line 2204)
    None_116998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2204, 13), 'None')
    
    (may_be_116999, more_types_in_union_117000) = may_be_none(im_116997, None_116998)

    if may_be_116999:

        if more_types_in_union_117000:
            # Runtime conditional SSA (line 2204)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to RuntimeError(...): (line 2205)
        # Processing the call arguments (line 2205)
        unicode_117002 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2205, 27), 'unicode', u'You must first define an image, e.g., with imshow')
        # Processing the call keyword arguments (line 2205)
        kwargs_117003 = {}
        # Getting the type of 'RuntimeError' (line 2205)
        RuntimeError_117001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2205, 14), 'RuntimeError', False)
        # Calling RuntimeError(args, kwargs) (line 2205)
        RuntimeError_call_result_117004 = invoke(stypy.reporting.localization.Localization(__file__, 2205, 14), RuntimeError_117001, *[unicode_117002], **kwargs_117003)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2205, 8), RuntimeError_call_result_117004, 'raise parameter', BaseException)

        if more_types_in_union_117000:
            # SSA join for if statement (line 2204)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Call to set_clim(...): (line 2207)
    # Processing the call arguments (line 2207)
    # Getting the type of 'vmin' (line 2207)
    vmin_117007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 16), 'vmin', False)
    # Getting the type of 'vmax' (line 2207)
    vmax_117008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 22), 'vmax', False)
    # Processing the call keyword arguments (line 2207)
    kwargs_117009 = {}
    # Getting the type of 'im' (line 2207)
    im_117005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2207, 4), 'im', False)
    # Obtaining the member 'set_clim' of a type (line 2207)
    set_clim_117006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2207, 4), im_117005, 'set_clim')
    # Calling set_clim(args, kwargs) (line 2207)
    set_clim_call_result_117010 = invoke(stypy.reporting.localization.Localization(__file__, 2207, 4), set_clim_117006, *[vmin_117007, vmax_117008], **kwargs_117009)
    
    
    # ################# End of 'clim(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'clim' in the type store
    # Getting the type of 'stypy_return_type' (line 2185)
    stypy_return_type_117011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2185, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117011)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'clim'
    return stypy_return_type_117011

# Assigning a type to the variable 'clim' (line 2185)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2185, 0), 'clim', clim)

@norecursion
def set_cmap(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'set_cmap'
    module_type_store = module_type_store.open_function_context('set_cmap', 2210, 0, False)
    
    # Passed parameters checking function
    set_cmap.stypy_localization = localization
    set_cmap.stypy_type_of_self = None
    set_cmap.stypy_type_store = module_type_store
    set_cmap.stypy_function_name = 'set_cmap'
    set_cmap.stypy_param_names_list = ['cmap']
    set_cmap.stypy_varargs_param_name = None
    set_cmap.stypy_kwargs_param_name = None
    set_cmap.stypy_call_defaults = defaults
    set_cmap.stypy_call_varargs = varargs
    set_cmap.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'set_cmap', ['cmap'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'set_cmap', localization, ['cmap'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'set_cmap(...)' code ##################

    unicode_117012 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2220, (-1)), 'unicode', u'\n    Set the default colormap.  Applies to the current image if any.\n    See help(colormaps) for more information.\n\n    *cmap* must be a :class:`~matplotlib.colors.Colormap` instance, or\n    the name of a registered colormap.\n\n    See :func:`matplotlib.cm.register_cmap` and\n    :func:`matplotlib.cm.get_cmap`.\n    ')
    
    # Assigning a Call to a Name (line 2221):
    
    # Assigning a Call to a Name (line 2221):
    
    # Call to get_cmap(...): (line 2221)
    # Processing the call arguments (line 2221)
    # Getting the type of 'cmap' (line 2221)
    cmap_117015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 23), 'cmap', False)
    # Processing the call keyword arguments (line 2221)
    kwargs_117016 = {}
    # Getting the type of 'cm' (line 2221)
    cm_117013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2221, 11), 'cm', False)
    # Obtaining the member 'get_cmap' of a type (line 2221)
    get_cmap_117014 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2221, 11), cm_117013, 'get_cmap')
    # Calling get_cmap(args, kwargs) (line 2221)
    get_cmap_call_result_117017 = invoke(stypy.reporting.localization.Localization(__file__, 2221, 11), get_cmap_117014, *[cmap_117015], **kwargs_117016)
    
    # Assigning a type to the variable 'cmap' (line 2221)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2221, 4), 'cmap', get_cmap_call_result_117017)
    
    # Call to rc(...): (line 2223)
    # Processing the call arguments (line 2223)
    unicode_117019 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2223, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 2223)
    # Getting the type of 'cmap' (line 2223)
    cmap_117020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 21), 'cmap', False)
    # Obtaining the member 'name' of a type (line 2223)
    name_117021 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2223, 21), cmap_117020, 'name')
    keyword_117022 = name_117021
    kwargs_117023 = {'cmap': keyword_117022}
    # Getting the type of 'rc' (line 2223)
    rc_117018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2223, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 2223)
    rc_call_result_117024 = invoke(stypy.reporting.localization.Localization(__file__, 2223, 4), rc_117018, *[unicode_117019], **kwargs_117023)
    
    
    # Assigning a Call to a Name (line 2224):
    
    # Assigning a Call to a Name (line 2224):
    
    # Call to gci(...): (line 2224)
    # Processing the call keyword arguments (line 2224)
    kwargs_117026 = {}
    # Getting the type of 'gci' (line 2224)
    gci_117025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2224, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 2224)
    gci_call_result_117027 = invoke(stypy.reporting.localization.Localization(__file__, 2224, 9), gci_117025, *[], **kwargs_117026)
    
    # Assigning a type to the variable 'im' (line 2224)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2224, 4), 'im', gci_call_result_117027)
    
    # Type idiom detected: calculating its left and rigth part (line 2226)
    # Getting the type of 'im' (line 2226)
    im_117028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 4), 'im')
    # Getting the type of 'None' (line 2226)
    None_117029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2226, 17), 'None')
    
    (may_be_117030, more_types_in_union_117031) = may_not_be_none(im_117028, None_117029)

    if may_be_117030:

        if more_types_in_union_117031:
            # Runtime conditional SSA (line 2226)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 2227)
        # Processing the call arguments (line 2227)
        # Getting the type of 'cmap' (line 2227)
        cmap_117034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 20), 'cmap', False)
        # Processing the call keyword arguments (line 2227)
        kwargs_117035 = {}
        # Getting the type of 'im' (line 2227)
        im_117032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2227, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 2227)
        set_cmap_117033 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2227, 8), im_117032, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 2227)
        set_cmap_call_result_117036 = invoke(stypy.reporting.localization.Localization(__file__, 2227, 8), set_cmap_117033, *[cmap_117034], **kwargs_117035)
        

        if more_types_in_union_117031:
            # SSA join for if statement (line 2226)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'set_cmap(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'set_cmap' in the type store
    # Getting the type of 'stypy_return_type' (line 2210)
    stypy_return_type_117037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2210, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117037)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'set_cmap'
    return stypy_return_type_117037

# Assigning a type to the variable 'set_cmap' (line 2210)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2210, 0), 'set_cmap', set_cmap)

@norecursion
def imread(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'imread'
    module_type_store = module_type_store.open_function_context('imread', 2231, 0, False)
    
    # Passed parameters checking function
    imread.stypy_localization = localization
    imread.stypy_type_of_self = None
    imread.stypy_type_store = module_type_store
    imread.stypy_function_name = 'imread'
    imread.stypy_param_names_list = []
    imread.stypy_varargs_param_name = 'args'
    imread.stypy_kwargs_param_name = 'kwargs'
    imread.stypy_call_defaults = defaults
    imread.stypy_call_varargs = varargs
    imread.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'imread', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'imread', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'imread(...)' code ##################

    
    # Call to _imread(...): (line 2233)
    # Getting the type of 'args' (line 2233)
    args_117039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 20), 'args', False)
    # Processing the call keyword arguments (line 2233)
    # Getting the type of 'kwargs' (line 2233)
    kwargs_117040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 28), 'kwargs', False)
    kwargs_117041 = {'kwargs_117040': kwargs_117040}
    # Getting the type of '_imread' (line 2233)
    _imread_117038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2233, 11), '_imread', False)
    # Calling _imread(args, kwargs) (line 2233)
    _imread_call_result_117042 = invoke(stypy.reporting.localization.Localization(__file__, 2233, 11), _imread_117038, *[args_117039], **kwargs_117041)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2233, 4), 'stypy_return_type', _imread_call_result_117042)
    
    # ################# End of 'imread(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'imread' in the type store
    # Getting the type of 'stypy_return_type' (line 2231)
    stypy_return_type_117043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2231, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117043)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'imread'
    return stypy_return_type_117043

# Assigning a type to the variable 'imread' (line 2231)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2231, 0), 'imread', imread)

@norecursion
def imsave(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'imsave'
    module_type_store = module_type_store.open_function_context('imsave', 2236, 0, False)
    
    # Passed parameters checking function
    imsave.stypy_localization = localization
    imsave.stypy_type_of_self = None
    imsave.stypy_type_store = module_type_store
    imsave.stypy_function_name = 'imsave'
    imsave.stypy_param_names_list = []
    imsave.stypy_varargs_param_name = 'args'
    imsave.stypy_kwargs_param_name = 'kwargs'
    imsave.stypy_call_defaults = defaults
    imsave.stypy_call_varargs = varargs
    imsave.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'imsave', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'imsave', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'imsave(...)' code ##################

    
    # Call to _imsave(...): (line 2238)
    # Getting the type of 'args' (line 2238)
    args_117045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 20), 'args', False)
    # Processing the call keyword arguments (line 2238)
    # Getting the type of 'kwargs' (line 2238)
    kwargs_117046 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 28), 'kwargs', False)
    kwargs_117047 = {'kwargs_117046': kwargs_117046}
    # Getting the type of '_imsave' (line 2238)
    _imsave_117044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2238, 11), '_imsave', False)
    # Calling _imsave(args, kwargs) (line 2238)
    _imsave_call_result_117048 = invoke(stypy.reporting.localization.Localization(__file__, 2238, 11), _imsave_117044, *[args_117045], **kwargs_117047)
    
    # Assigning a type to the variable 'stypy_return_type' (line 2238)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2238, 4), 'stypy_return_type', _imsave_call_result_117048)
    
    # ################# End of 'imsave(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'imsave' in the type store
    # Getting the type of 'stypy_return_type' (line 2236)
    stypy_return_type_117049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2236, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117049)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'imsave'
    return stypy_return_type_117049

# Assigning a type to the variable 'imsave' (line 2236)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2236, 0), 'imsave', imsave)

@norecursion
def matshow(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2241)
    None_117050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 22), 'None')
    defaults = [None_117050]
    # Create a new context for function 'matshow'
    module_type_store = module_type_store.open_function_context('matshow', 2241, 0, False)
    
    # Passed parameters checking function
    matshow.stypy_localization = localization
    matshow.stypy_type_of_self = None
    matshow.stypy_type_store = module_type_store
    matshow.stypy_function_name = 'matshow'
    matshow.stypy_param_names_list = ['A', 'fignum']
    matshow.stypy_varargs_param_name = None
    matshow.stypy_kwargs_param_name = 'kw'
    matshow.stypy_call_defaults = defaults
    matshow.stypy_call_varargs = varargs
    matshow.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'matshow', ['A', 'fignum'], None, 'kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'matshow', localization, ['A', 'fignum'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'matshow(...)' code ##################

    unicode_117051 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2267, (-1)), 'unicode', u'\n    Display an array as a matrix in a new figure window.\n\n    The origin is set at the upper left hand corner and rows (first\n    dimension of the array) are displayed horizontally.  The aspect\n    ratio of the figure window is that of the array, unless this would\n    make an excessively short or narrow figure.\n\n    Tick labels for the xaxis are placed on top.\n\n    With the exception of *fignum*, keyword arguments are passed to\n    :func:`~matplotlib.pyplot.imshow`.  You may set the *origin*\n    kwarg to "lower" if you want the first row in the array to be\n    at the bottom instead of the top.\n\n\n    *fignum*: [ None | integer | False ]\n      By default, :func:`matshow` creates a new figure window with\n      automatic numbering.  If *fignum* is given as an integer, the\n      created figure will use this figure number.  Because of how\n      :func:`matshow` tries to set the figure aspect ratio to be the\n      one of the array, if you provide the number of an already\n      existing figure, strange things may happen.\n\n      If *fignum* is *False* or 0, a new figure window will **NOT** be created.\n    ')
    
    # Assigning a Call to a Name (line 2268):
    
    # Assigning a Call to a Name (line 2268):
    
    # Call to asanyarray(...): (line 2268)
    # Processing the call arguments (line 2268)
    # Getting the type of 'A' (line 2268)
    A_117054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 22), 'A', False)
    # Processing the call keyword arguments (line 2268)
    kwargs_117055 = {}
    # Getting the type of 'np' (line 2268)
    np_117052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2268, 8), 'np', False)
    # Obtaining the member 'asanyarray' of a type (line 2268)
    asanyarray_117053 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2268, 8), np_117052, 'asanyarray')
    # Calling asanyarray(args, kwargs) (line 2268)
    asanyarray_call_result_117056 = invoke(stypy.reporting.localization.Localization(__file__, 2268, 8), asanyarray_117053, *[A_117054], **kwargs_117055)
    
    # Assigning a type to the variable 'A' (line 2268)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2268, 4), 'A', asanyarray_call_result_117056)
    
    
    # Evaluating a boolean operation
    
    # Getting the type of 'fignum' (line 2269)
    fignum_117057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 7), 'fignum')
    # Getting the type of 'False' (line 2269)
    False_117058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 17), 'False')
    # Applying the binary operator 'is' (line 2269)
    result_is__117059 = python_operator(stypy.reporting.localization.Localization(__file__, 2269, 7), 'is', fignum_117057, False_117058)
    
    
    # Getting the type of 'fignum' (line 2269)
    fignum_117060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2269, 26), 'fignum')
    int_117061 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2269, 36), 'int')
    # Applying the binary operator 'is' (line 2269)
    result_is__117062 = python_operator(stypy.reporting.localization.Localization(__file__, 2269, 26), 'is', fignum_117060, int_117061)
    
    # Applying the binary operator 'or' (line 2269)
    result_or_keyword_117063 = python_operator(stypy.reporting.localization.Localization(__file__, 2269, 7), 'or', result_is__117059, result_is__117062)
    
    # Testing the type of an if condition (line 2269)
    if_condition_117064 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2269, 4), result_or_keyword_117063)
    # Assigning a type to the variable 'if_condition_117064' (line 2269)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2269, 4), 'if_condition_117064', if_condition_117064)
    # SSA begins for if statement (line 2269)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2270):
    
    # Assigning a Call to a Name (line 2270):
    
    # Call to gca(...): (line 2270)
    # Processing the call keyword arguments (line 2270)
    kwargs_117066 = {}
    # Getting the type of 'gca' (line 2270)
    gca_117065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2270, 13), 'gca', False)
    # Calling gca(args, kwargs) (line 2270)
    gca_call_result_117067 = invoke(stypy.reporting.localization.Localization(__file__, 2270, 13), gca_117065, *[], **kwargs_117066)
    
    # Assigning a type to the variable 'ax' (line 2270)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2270, 8), 'ax', gca_call_result_117067)
    # SSA branch for the else part of an if statement (line 2269)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2273):
    
    # Assigning a Call to a Name (line 2273):
    
    # Call to figure(...): (line 2273)
    # Processing the call arguments (line 2273)
    # Getting the type of 'fignum' (line 2273)
    fignum_117069 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 21), 'fignum', False)
    # Processing the call keyword arguments (line 2273)
    
    # Call to figaspect(...): (line 2273)
    # Processing the call arguments (line 2273)
    # Getting the type of 'A' (line 2273)
    A_117071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 47), 'A', False)
    # Processing the call keyword arguments (line 2273)
    kwargs_117072 = {}
    # Getting the type of 'figaspect' (line 2273)
    figaspect_117070 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 37), 'figaspect', False)
    # Calling figaspect(args, kwargs) (line 2273)
    figaspect_call_result_117073 = invoke(stypy.reporting.localization.Localization(__file__, 2273, 37), figaspect_117070, *[A_117071], **kwargs_117072)
    
    keyword_117074 = figaspect_call_result_117073
    kwargs_117075 = {'figsize': keyword_117074}
    # Getting the type of 'figure' (line 2273)
    figure_117068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2273, 14), 'figure', False)
    # Calling figure(args, kwargs) (line 2273)
    figure_call_result_117076 = invoke(stypy.reporting.localization.Localization(__file__, 2273, 14), figure_117068, *[fignum_117069], **kwargs_117075)
    
    # Assigning a type to the variable 'fig' (line 2273)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2273, 8), 'fig', figure_call_result_117076)
    
    # Assigning a Call to a Name (line 2274):
    
    # Assigning a Call to a Name (line 2274):
    
    # Call to add_axes(...): (line 2274)
    # Processing the call arguments (line 2274)
    
    # Obtaining an instance of the builtin type 'list' (line 2274)
    list_117079 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2274, 27), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2274)
    # Adding element type (line 2274)
    float_117080 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2274, 28), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2274, 27), list_117079, float_117080)
    # Adding element type (line 2274)
    float_117081 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2274, 34), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2274, 27), list_117079, float_117081)
    # Adding element type (line 2274)
    float_117082 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2274, 40), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2274, 27), list_117079, float_117082)
    # Adding element type (line 2274)
    float_117083 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2274, 47), 'float')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2274, 27), list_117079, float_117083)
    
    # Processing the call keyword arguments (line 2274)
    kwargs_117084 = {}
    # Getting the type of 'fig' (line 2274)
    fig_117077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2274, 14), 'fig', False)
    # Obtaining the member 'add_axes' of a type (line 2274)
    add_axes_117078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2274, 14), fig_117077, 'add_axes')
    # Calling add_axes(args, kwargs) (line 2274)
    add_axes_call_result_117085 = invoke(stypy.reporting.localization.Localization(__file__, 2274, 14), add_axes_117078, *[list_117079], **kwargs_117084)
    
    # Assigning a type to the variable 'ax' (line 2274)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2274, 8), 'ax', add_axes_call_result_117085)
    # SSA join for if statement (line 2269)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2276):
    
    # Assigning a Call to a Name (line 2276):
    
    # Call to matshow(...): (line 2276)
    # Processing the call arguments (line 2276)
    # Getting the type of 'A' (line 2276)
    A_117088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 20), 'A', False)
    # Processing the call keyword arguments (line 2276)
    # Getting the type of 'kw' (line 2276)
    kw_117089 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 25), 'kw', False)
    kwargs_117090 = {'kw_117089': kw_117089}
    # Getting the type of 'ax' (line 2276)
    ax_117086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2276, 9), 'ax', False)
    # Obtaining the member 'matshow' of a type (line 2276)
    matshow_117087 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2276, 9), ax_117086, 'matshow')
    # Calling matshow(args, kwargs) (line 2276)
    matshow_call_result_117091 = invoke(stypy.reporting.localization.Localization(__file__, 2276, 9), matshow_117087, *[A_117088], **kwargs_117090)
    
    # Assigning a type to the variable 'im' (line 2276)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2276, 4), 'im', matshow_call_result_117091)
    
    # Call to sci(...): (line 2277)
    # Processing the call arguments (line 2277)
    # Getting the type of 'im' (line 2277)
    im_117093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 8), 'im', False)
    # Processing the call keyword arguments (line 2277)
    kwargs_117094 = {}
    # Getting the type of 'sci' (line 2277)
    sci_117092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2277, 4), 'sci', False)
    # Calling sci(args, kwargs) (line 2277)
    sci_call_result_117095 = invoke(stypy.reporting.localization.Localization(__file__, 2277, 4), sci_117092, *[im_117093], **kwargs_117094)
    
    # Getting the type of 'im' (line 2279)
    im_117096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2279, 11), 'im')
    # Assigning a type to the variable 'stypy_return_type' (line 2279)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2279, 4), 'stypy_return_type', im_117096)
    
    # ################# End of 'matshow(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'matshow' in the type store
    # Getting the type of 'stypy_return_type' (line 2241)
    stypy_return_type_117097 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2241, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117097)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'matshow'
    return stypy_return_type_117097

# Assigning a type to the variable 'matshow' (line 2241)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2241, 0), 'matshow', matshow)

@norecursion
def polar(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'polar'
    module_type_store = module_type_store.open_function_context('polar', 2282, 0, False)
    
    # Passed parameters checking function
    polar.stypy_localization = localization
    polar.stypy_type_of_self = None
    polar.stypy_type_store = module_type_store
    polar.stypy_function_name = 'polar'
    polar.stypy_param_names_list = []
    polar.stypy_varargs_param_name = 'args'
    polar.stypy_kwargs_param_name = 'kwargs'
    polar.stypy_call_defaults = defaults
    polar.stypy_call_varargs = varargs
    polar.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'polar', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'polar', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'polar(...)' code ##################

    unicode_117098 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2293, (-1)), 'unicode', u'\n    Make a polar plot.\n\n    call signature::\n\n      polar(theta, r, **kwargs)\n\n    Multiple *theta*, *r* arguments are supported, with format\n    strings, as in :func:`~matplotlib.pyplot.plot`.\n\n    ')
    
    
    # Call to get_axes(...): (line 2295)
    # Processing the call keyword arguments (line 2295)
    kwargs_117103 = {}
    
    # Call to gcf(...): (line 2295)
    # Processing the call keyword arguments (line 2295)
    kwargs_117100 = {}
    # Getting the type of 'gcf' (line 2295)
    gcf_117099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2295, 7), 'gcf', False)
    # Calling gcf(args, kwargs) (line 2295)
    gcf_call_result_117101 = invoke(stypy.reporting.localization.Localization(__file__, 2295, 7), gcf_117099, *[], **kwargs_117100)
    
    # Obtaining the member 'get_axes' of a type (line 2295)
    get_axes_117102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2295, 7), gcf_call_result_117101, 'get_axes')
    # Calling get_axes(args, kwargs) (line 2295)
    get_axes_call_result_117104 = invoke(stypy.reporting.localization.Localization(__file__, 2295, 7), get_axes_117102, *[], **kwargs_117103)
    
    # Testing the type of an if condition (line 2295)
    if_condition_117105 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2295, 4), get_axes_call_result_117104)
    # Assigning a type to the variable 'if_condition_117105' (line 2295)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2295, 4), 'if_condition_117105', if_condition_117105)
    # SSA begins for if statement (line 2295)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    
    # Call to isinstance(...): (line 2296)
    # Processing the call arguments (line 2296)
    
    # Call to gca(...): (line 2296)
    # Processing the call keyword arguments (line 2296)
    kwargs_117108 = {}
    # Getting the type of 'gca' (line 2296)
    gca_117107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 26), 'gca', False)
    # Calling gca(args, kwargs) (line 2296)
    gca_call_result_117109 = invoke(stypy.reporting.localization.Localization(__file__, 2296, 26), gca_117107, *[], **kwargs_117108)
    
    # Getting the type of 'PolarAxes' (line 2296)
    PolarAxes_117110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 33), 'PolarAxes', False)
    # Processing the call keyword arguments (line 2296)
    kwargs_117111 = {}
    # Getting the type of 'isinstance' (line 2296)
    isinstance_117106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2296, 15), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2296)
    isinstance_call_result_117112 = invoke(stypy.reporting.localization.Localization(__file__, 2296, 15), isinstance_117106, *[gca_call_result_117109, PolarAxes_117110], **kwargs_117111)
    
    # Applying the 'not' unary operator (line 2296)
    result_not__117113 = python_operator(stypy.reporting.localization.Localization(__file__, 2296, 11), 'not', isinstance_call_result_117112)
    
    # Testing the type of an if condition (line 2296)
    if_condition_117114 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2296, 8), result_not__117113)
    # Assigning a type to the variable 'if_condition_117114' (line 2296)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2296, 8), 'if_condition_117114', if_condition_117114)
    # SSA begins for if statement (line 2296)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to warn(...): (line 2297)
    # Processing the call arguments (line 2297)
    unicode_117117 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2297, 26), 'unicode', u'Trying to create polar plot on an axis that does not have a polar projection.')
    # Processing the call keyword arguments (line 2297)
    kwargs_117118 = {}
    # Getting the type of 'warnings' (line 2297)
    warnings_117115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2297, 12), 'warnings', False)
    # Obtaining the member 'warn' of a type (line 2297)
    warn_117116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2297, 12), warnings_117115, 'warn')
    # Calling warn(args, kwargs) (line 2297)
    warn_call_result_117119 = invoke(stypy.reporting.localization.Localization(__file__, 2297, 12), warn_117116, *[unicode_117117], **kwargs_117118)
    
    # SSA join for if statement (line 2296)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2295)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Name (line 2299):
    
    # Assigning a Call to a Name (line 2299):
    
    # Call to gca(...): (line 2299)
    # Processing the call keyword arguments (line 2299)
    # Getting the type of 'True' (line 2299)
    True_117121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 19), 'True', False)
    keyword_117122 = True_117121
    kwargs_117123 = {'polar': keyword_117122}
    # Getting the type of 'gca' (line 2299)
    gca_117120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2299, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2299)
    gca_call_result_117124 = invoke(stypy.reporting.localization.Localization(__file__, 2299, 9), gca_117120, *[], **kwargs_117123)
    
    # Assigning a type to the variable 'ax' (line 2299)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2299, 4), 'ax', gca_call_result_117124)
    
    # Assigning a Call to a Name (line 2300):
    
    # Assigning a Call to a Name (line 2300):
    
    # Call to plot(...): (line 2300)
    # Getting the type of 'args' (line 2300)
    args_117127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 19), 'args', False)
    # Processing the call keyword arguments (line 2300)
    # Getting the type of 'kwargs' (line 2300)
    kwargs_117128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 27), 'kwargs', False)
    kwargs_117129 = {'kwargs_117128': kwargs_117128}
    # Getting the type of 'ax' (line 2300)
    ax_117125 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2300, 10), 'ax', False)
    # Obtaining the member 'plot' of a type (line 2300)
    plot_117126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2300, 10), ax_117125, 'plot')
    # Calling plot(args, kwargs) (line 2300)
    plot_call_result_117130 = invoke(stypy.reporting.localization.Localization(__file__, 2300, 10), plot_117126, *[args_117127], **kwargs_117129)
    
    # Assigning a type to the variable 'ret' (line 2300)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2300, 4), 'ret', plot_call_result_117130)
    # Getting the type of 'ret' (line 2301)
    ret_117131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2301, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2301)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2301, 4), 'stypy_return_type', ret_117131)
    
    # ################# End of 'polar(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'polar' in the type store
    # Getting the type of 'stypy_return_type' (line 2282)
    stypy_return_type_117132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2282, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117132)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'polar'
    return stypy_return_type_117132

# Assigning a type to the variable 'polar' (line 2282)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2282, 0), 'polar', polar)

@norecursion
def plotfile(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    
    # Obtaining an instance of the builtin type 'tuple' (line 2304)
    tuple_117133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2304, 26), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 2304)
    # Adding element type (line 2304)
    int_117134 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2304, 26), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2304, 26), tuple_117133, int_117134)
    
    # Getting the type of 'None' (line 2304)
    None_117135 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 41), 'None')
    unicode_117136 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2305, 22), 'unicode', u'#')
    int_117137 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2305, 36), 'int')
    int_117138 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2305, 49), 'int')
    unicode_117139 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2305, 62), 'unicode', u',')
    # Getting the type of 'None' (line 2306)
    None_117140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 19), 'None')
    # Getting the type of 'True' (line 2306)
    True_117141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 34), 'True')
    # Getting the type of 'True' (line 2306)
    True_117142 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2306, 47), 'True')
    defaults = [tuple_117133, None_117135, unicode_117136, int_117137, int_117138, unicode_117139, None_117140, True_117141, True_117142]
    # Create a new context for function 'plotfile'
    module_type_store = module_type_store.open_function_context('plotfile', 2304, 0, False)
    
    # Passed parameters checking function
    plotfile.stypy_localization = localization
    plotfile.stypy_type_of_self = None
    plotfile.stypy_type_store = module_type_store
    plotfile.stypy_function_name = 'plotfile'
    plotfile.stypy_param_names_list = ['fname', 'cols', 'plotfuncs', 'comments', 'skiprows', 'checkrows', 'delimiter', 'names', 'subplots', 'newfig']
    plotfile.stypy_varargs_param_name = None
    plotfile.stypy_kwargs_param_name = 'kwargs'
    plotfile.stypy_call_defaults = defaults
    plotfile.stypy_call_varargs = varargs
    plotfile.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'plotfile', ['fname', 'cols', 'plotfuncs', 'comments', 'skiprows', 'checkrows', 'delimiter', 'names', 'subplots', 'newfig'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'plotfile', localization, ['fname', 'cols', 'plotfuncs', 'comments', 'skiprows', 'checkrows', 'delimiter', 'names', 'subplots', 'newfig'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'plotfile(...)' code ##################

    unicode_117143 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2357, (-1)), 'unicode', u"\n    Plot the data in a file.\n\n    *cols* is a sequence of column identifiers to plot.  An identifier\n    is either an int or a string.  If it is an int, it indicates the\n    column number.  If it is a string, it indicates the column header.\n    matplotlib will make column headers lower case, replace spaces with\n    underscores, and remove all illegal characters; so ``'Adj Close*'``\n    will have name ``'adj_close'``.\n\n    - If len(*cols*) == 1, only that column will be plotted on the *y* axis.\n\n    - If len(*cols*) > 1, the first element will be an identifier for\n      data for the *x* axis and the remaining elements will be the\n      column indexes for multiple subplots if *subplots* is *True*\n      (the default), or for lines in a single subplot if *subplots*\n      is *False*.\n\n    *plotfuncs*, if not *None*, is a dictionary mapping identifier to\n    an :class:`~matplotlib.axes.Axes` plotting function as a string.\n    Default is 'plot', other choices are 'semilogy', 'fill', 'bar',\n    etc.  You must use the same type of identifier in the *cols*\n    vector as you use in the *plotfuncs* dictionary, e.g., integer\n    column numbers in both or column names in both. If *subplots*\n    is *False*, then including any function such as 'semilogy'\n    that changes the axis scaling will set the scaling for all\n    columns.\n\n    *comments*, *skiprows*, *checkrows*, *delimiter*, and *names*\n    are all passed on to :func:`matplotlib.pylab.csv2rec` to\n    load the data into a record array.\n\n    If *newfig* is *True*, the plot always will be made in a new figure;\n    if *False*, it will be made in the current figure if one exists,\n    else in a new figure.\n\n    kwargs are passed on to plotting functions.\n\n    Example usage::\n\n      # plot the 2nd and 4th column against the 1st in two subplots\n      plotfile(fname, (0,1,3))\n\n      # plot using column names; specify an alternate plot type for volume\n      plotfile(fname, ('date', 'volume', 'adj_close'),\n                                    plotfuncs={'volume': 'semilogy'})\n\n    Note: plotfile is intended as a convenience for quickly plotting\n    data from flat files; it is not intended as an alternative\n    interface to general plotting with pyplot or matplotlib.\n    ")
    
    # Getting the type of 'newfig' (line 2359)
    newfig_117144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2359, 7), 'newfig')
    # Testing the type of an if condition (line 2359)
    if_condition_117145 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2359, 4), newfig_117144)
    # Assigning a type to the variable 'if_condition_117145' (line 2359)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2359, 4), 'if_condition_117145', if_condition_117145)
    # SSA begins for if statement (line 2359)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2360):
    
    # Assigning a Call to a Name (line 2360):
    
    # Call to figure(...): (line 2360)
    # Processing the call keyword arguments (line 2360)
    kwargs_117147 = {}
    # Getting the type of 'figure' (line 2360)
    figure_117146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2360, 14), 'figure', False)
    # Calling figure(args, kwargs) (line 2360)
    figure_call_result_117148 = invoke(stypy.reporting.localization.Localization(__file__, 2360, 14), figure_117146, *[], **kwargs_117147)
    
    # Assigning a type to the variable 'fig' (line 2360)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2360, 8), 'fig', figure_call_result_117148)
    # SSA branch for the else part of an if statement (line 2359)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2362):
    
    # Assigning a Call to a Name (line 2362):
    
    # Call to gcf(...): (line 2362)
    # Processing the call keyword arguments (line 2362)
    kwargs_117150 = {}
    # Getting the type of 'gcf' (line 2362)
    gcf_117149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2362, 14), 'gcf', False)
    # Calling gcf(args, kwargs) (line 2362)
    gcf_call_result_117151 = invoke(stypy.reporting.localization.Localization(__file__, 2362, 14), gcf_117149, *[], **kwargs_117150)
    
    # Assigning a type to the variable 'fig' (line 2362)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2362, 8), 'fig', gcf_call_result_117151)
    # SSA join for if statement (line 2359)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    
    # Call to len(...): (line 2364)
    # Processing the call arguments (line 2364)
    # Getting the type of 'cols' (line 2364)
    cols_117153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 11), 'cols', False)
    # Processing the call keyword arguments (line 2364)
    kwargs_117154 = {}
    # Getting the type of 'len' (line 2364)
    len_117152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2364, 7), 'len', False)
    # Calling len(args, kwargs) (line 2364)
    len_call_result_117155 = invoke(stypy.reporting.localization.Localization(__file__, 2364, 7), len_117152, *[cols_117153], **kwargs_117154)
    
    int_117156 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2364, 17), 'int')
    # Applying the binary operator '<' (line 2364)
    result_lt_117157 = python_operator(stypy.reporting.localization.Localization(__file__, 2364, 7), '<', len_call_result_117155, int_117156)
    
    # Testing the type of an if condition (line 2364)
    if_condition_117158 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2364, 4), result_lt_117157)
    # Assigning a type to the variable 'if_condition_117158' (line 2364)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2364, 4), 'if_condition_117158', if_condition_117158)
    # SSA begins for if statement (line 2364)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to ValueError(...): (line 2365)
    # Processing the call arguments (line 2365)
    unicode_117160 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2365, 25), 'unicode', u'must have at least one column of data')
    # Processing the call keyword arguments (line 2365)
    kwargs_117161 = {}
    # Getting the type of 'ValueError' (line 2365)
    ValueError_117159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2365, 14), 'ValueError', False)
    # Calling ValueError(args, kwargs) (line 2365)
    ValueError_call_result_117162 = invoke(stypy.reporting.localization.Localization(__file__, 2365, 14), ValueError_117159, *[unicode_117160], **kwargs_117161)
    
    ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2365, 8), ValueError_call_result_117162, 'raise parameter', BaseException)
    # SSA join for if statement (line 2364)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Type idiom detected: calculating its left and rigth part (line 2367)
    # Getting the type of 'plotfuncs' (line 2367)
    plotfuncs_117163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 7), 'plotfuncs')
    # Getting the type of 'None' (line 2367)
    None_117164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2367, 20), 'None')
    
    (may_be_117165, more_types_in_union_117166) = may_be_none(plotfuncs_117163, None_117164)

    if may_be_117165:

        if more_types_in_union_117166:
            # Runtime conditional SSA (line 2367)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Call to a Name (line 2368):
        
        # Assigning a Call to a Name (line 2368):
        
        # Call to dict(...): (line 2368)
        # Processing the call keyword arguments (line 2368)
        kwargs_117168 = {}
        # Getting the type of 'dict' (line 2368)
        dict_117167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2368, 20), 'dict', False)
        # Calling dict(args, kwargs) (line 2368)
        dict_call_result_117169 = invoke(stypy.reporting.localization.Localization(__file__, 2368, 20), dict_117167, *[], **kwargs_117168)
        
        # Assigning a type to the variable 'plotfuncs' (line 2368)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2368, 8), 'plotfuncs', dict_call_result_117169)

        if more_types_in_union_117166:
            # SSA join for if statement (line 2367)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Assigning a Call to a Name (line 2369):
    
    # Assigning a Call to a Name (line 2369):
    
    # Call to csv2rec(...): (line 2369)
    # Processing the call arguments (line 2369)
    # Getting the type of 'fname' (line 2369)
    fname_117172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 21), 'fname', False)
    # Processing the call keyword arguments (line 2369)
    # Getting the type of 'comments' (line 2369)
    comments_117173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 37), 'comments', False)
    keyword_117174 = comments_117173
    # Getting the type of 'skiprows' (line 2369)
    skiprows_117175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 56), 'skiprows', False)
    keyword_117176 = skiprows_117175
    # Getting the type of 'checkrows' (line 2370)
    checkrows_117177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 31), 'checkrows', False)
    keyword_117178 = checkrows_117177
    # Getting the type of 'delimiter' (line 2370)
    delimiter_117179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 52), 'delimiter', False)
    keyword_117180 = delimiter_117179
    # Getting the type of 'names' (line 2370)
    names_117181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2370, 69), 'names', False)
    keyword_117182 = names_117181
    kwargs_117183 = {'delimiter': keyword_117180, 'names': keyword_117182, 'skiprows': keyword_117176, 'comments': keyword_117174, 'checkrows': keyword_117178}
    # Getting the type of 'mlab' (line 2369)
    mlab_117170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2369, 8), 'mlab', False)
    # Obtaining the member 'csv2rec' of a type (line 2369)
    csv2rec_117171 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2369, 8), mlab_117170, 'csv2rec')
    # Calling csv2rec(args, kwargs) (line 2369)
    csv2rec_call_result_117184 = invoke(stypy.reporting.localization.Localization(__file__, 2369, 8), csv2rec_117171, *[fname_117172], **kwargs_117183)
    
    # Assigning a type to the variable 'r' (line 2369)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2369, 4), 'r', csv2rec_call_result_117184)

    @norecursion
    def getname_val(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function 'getname_val'
        module_type_store = module_type_store.open_function_context('getname_val', 2372, 4, False)
        
        # Passed parameters checking function
        getname_val.stypy_localization = localization
        getname_val.stypy_type_of_self = None
        getname_val.stypy_type_store = module_type_store
        getname_val.stypy_function_name = 'getname_val'
        getname_val.stypy_param_names_list = ['identifier']
        getname_val.stypy_varargs_param_name = None
        getname_val.stypy_kwargs_param_name = None
        getname_val.stypy_call_defaults = defaults
        getname_val.stypy_call_varargs = varargs
        getname_val.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, 'getname_val', ['identifier'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Initialize method data
        init_call_information(module_type_store, 'getname_val', localization, ['identifier'], arguments)
        
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of 'getname_val(...)' code ##################

        unicode_117185 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2373, 8), 'unicode', u'return the name and column data for identifier')
        
        
        # Call to isinstance(...): (line 2374)
        # Processing the call arguments (line 2374)
        # Getting the type of 'identifier' (line 2374)
        identifier_117187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 22), 'identifier', False)
        # Getting the type of 'six' (line 2374)
        six_117188 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 34), 'six', False)
        # Obtaining the member 'string_types' of a type (line 2374)
        string_types_117189 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2374, 34), six_117188, 'string_types')
        # Processing the call keyword arguments (line 2374)
        kwargs_117190 = {}
        # Getting the type of 'isinstance' (line 2374)
        isinstance_117186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2374, 11), 'isinstance', False)
        # Calling isinstance(args, kwargs) (line 2374)
        isinstance_call_result_117191 = invoke(stypy.reporting.localization.Localization(__file__, 2374, 11), isinstance_117186, *[identifier_117187, string_types_117189], **kwargs_117190)
        
        # Testing the type of an if condition (line 2374)
        if_condition_117192 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2374, 8), isinstance_call_result_117191)
        # Assigning a type to the variable 'if_condition_117192' (line 2374)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2374, 8), 'if_condition_117192', if_condition_117192)
        # SSA begins for if statement (line 2374)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Obtaining an instance of the builtin type 'tuple' (line 2375)
        tuple_117193 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2375, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2375)
        # Adding element type (line 2375)
        # Getting the type of 'identifier' (line 2375)
        identifier_117194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 19), 'identifier')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2375, 19), tuple_117193, identifier_117194)
        # Adding element type (line 2375)
        
        # Obtaining the type of the subscript
        # Getting the type of 'identifier' (line 2375)
        identifier_117195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 33), 'identifier')
        # Getting the type of 'r' (line 2375)
        r_117196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2375, 31), 'r')
        # Obtaining the member '__getitem__' of a type (line 2375)
        getitem___117197 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2375, 31), r_117196, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2375)
        subscript_call_result_117198 = invoke(stypy.reporting.localization.Localization(__file__, 2375, 31), getitem___117197, identifier_117195)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2375, 19), tuple_117193, subscript_call_result_117198)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2375)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2375, 12), 'stypy_return_type', tuple_117193)
        # SSA branch for the else part of an if statement (line 2374)
        module_type_store.open_ssa_branch('else')
        
        
        # Call to is_numlike(...): (line 2376)
        # Processing the call arguments (line 2376)
        # Getting the type of 'identifier' (line 2376)
        identifier_117200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2376, 24), 'identifier', False)
        # Processing the call keyword arguments (line 2376)
        kwargs_117201 = {}
        # Getting the type of 'is_numlike' (line 2376)
        is_numlike_117199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2376, 13), 'is_numlike', False)
        # Calling is_numlike(args, kwargs) (line 2376)
        is_numlike_call_result_117202 = invoke(stypy.reporting.localization.Localization(__file__, 2376, 13), is_numlike_117199, *[identifier_117200], **kwargs_117201)
        
        # Testing the type of an if condition (line 2376)
        if_condition_117203 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2376, 13), is_numlike_call_result_117202)
        # Assigning a type to the variable 'if_condition_117203' (line 2376)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2376, 13), 'if_condition_117203', if_condition_117203)
        # SSA begins for if statement (line 2376)
        module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
        
        # Assigning a Subscript to a Name (line 2377):
        
        # Assigning a Subscript to a Name (line 2377):
        
        # Obtaining the type of the subscript
        
        # Call to int(...): (line 2377)
        # Processing the call arguments (line 2377)
        # Getting the type of 'identifier' (line 2377)
        identifier_117205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 37), 'identifier', False)
        # Processing the call keyword arguments (line 2377)
        kwargs_117206 = {}
        # Getting the type of 'int' (line 2377)
        int_117204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 33), 'int', False)
        # Calling int(args, kwargs) (line 2377)
        int_call_result_117207 = invoke(stypy.reporting.localization.Localization(__file__, 2377, 33), int_117204, *[identifier_117205], **kwargs_117206)
        
        # Getting the type of 'r' (line 2377)
        r_117208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2377, 19), 'r')
        # Obtaining the member 'dtype' of a type (line 2377)
        dtype_117209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2377, 19), r_117208, 'dtype')
        # Obtaining the member 'names' of a type (line 2377)
        names_117210 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2377, 19), dtype_117209, 'names')
        # Obtaining the member '__getitem__' of a type (line 2377)
        getitem___117211 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2377, 19), names_117210, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2377)
        subscript_call_result_117212 = invoke(stypy.reporting.localization.Localization(__file__, 2377, 19), getitem___117211, int_call_result_117207)
        
        # Assigning a type to the variable 'name' (line 2377)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2377, 12), 'name', subscript_call_result_117212)
        
        # Obtaining an instance of the builtin type 'tuple' (line 2378)
        tuple_117213 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2378, 19), 'tuple')
        # Adding type elements to the builtin type 'tuple' instance (line 2378)
        # Adding element type (line 2378)
        # Getting the type of 'name' (line 2378)
        name_117214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 19), 'name')
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2378, 19), tuple_117213, name_117214)
        # Adding element type (line 2378)
        
        # Obtaining the type of the subscript
        # Getting the type of 'name' (line 2378)
        name_117215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 27), 'name')
        # Getting the type of 'r' (line 2378)
        r_117216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2378, 25), 'r')
        # Obtaining the member '__getitem__' of a type (line 2378)
        getitem___117217 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2378, 25), r_117216, '__getitem__')
        # Calling the subscript (__getitem__) to obtain the elements type (line 2378)
        subscript_call_result_117218 = invoke(stypy.reporting.localization.Localization(__file__, 2378, 25), getitem___117217, name_117215)
        
        add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 2378, 19), tuple_117213, subscript_call_result_117218)
        
        # Assigning a type to the variable 'stypy_return_type' (line 2378)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2378, 12), 'stypy_return_type', tuple_117213)
        # SSA branch for the else part of an if statement (line 2376)
        module_type_store.open_ssa_branch('else')
        
        # Call to TypeError(...): (line 2380)
        # Processing the call arguments (line 2380)
        unicode_117220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2380, 28), 'unicode', u'identifier must be a string or integer')
        # Processing the call keyword arguments (line 2380)
        kwargs_117221 = {}
        # Getting the type of 'TypeError' (line 2380)
        TypeError_117219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2380, 18), 'TypeError', False)
        # Calling TypeError(args, kwargs) (line 2380)
        TypeError_call_result_117222 = invoke(stypy.reporting.localization.Localization(__file__, 2380, 18), TypeError_117219, *[unicode_117220], **kwargs_117221)
        
        ensure_var_of_types(stypy.reporting.localization.Localization(__file__, 2380, 12), TypeError_call_result_117222, 'raise parameter', BaseException)
        # SSA join for if statement (line 2376)
        module_type_store = module_type_store.join_ssa_context()
        
        # SSA join for if statement (line 2374)
        module_type_store = module_type_store.join_ssa_context()
        
        
        # ################# End of 'getname_val(...)' code ##################

        # Teardown call information
        teardown_call_information(localization, arguments)
        
        # Storing the return type of function 'getname_val' in the type store
        # Getting the type of 'stypy_return_type' (line 2372)
        stypy_return_type_117223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2372, 4), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117223)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function 'getname_val'
        return stypy_return_type_117223

    # Assigning a type to the variable 'getname_val' (line 2372)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2372, 4), 'getname_val', getname_val)
    
    # Assigning a Call to a Tuple (line 2382):
    
    # Assigning a Call to a Name:
    
    # Call to getname_val(...): (line 2382)
    # Processing the call arguments (line 2382)
    
    # Obtaining the type of the subscript
    int_117225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 32), 'int')
    # Getting the type of 'cols' (line 2382)
    cols_117226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2382, 27), 'cols', False)
    # Obtaining the member '__getitem__' of a type (line 2382)
    getitem___117227 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2382, 27), cols_117226, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2382)
    subscript_call_result_117228 = invoke(stypy.reporting.localization.Localization(__file__, 2382, 27), getitem___117227, int_117225)
    
    # Processing the call keyword arguments (line 2382)
    kwargs_117229 = {}
    # Getting the type of 'getname_val' (line 2382)
    getname_val_117224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2382, 15), 'getname_val', False)
    # Calling getname_val(args, kwargs) (line 2382)
    getname_val_call_result_117230 = invoke(stypy.reporting.localization.Localization(__file__, 2382, 15), getname_val_117224, *[subscript_call_result_117228], **kwargs_117229)
    
    # Assigning a type to the variable 'call_assignment_114610' (line 2382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 4), 'call_assignment_114610', getname_val_call_result_117230)
    
    # Assigning a Call to a Name (line 2382):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_117233 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 4), 'int')
    # Processing the call keyword arguments
    kwargs_117234 = {}
    # Getting the type of 'call_assignment_114610' (line 2382)
    call_assignment_114610_117231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2382, 4), 'call_assignment_114610', False)
    # Obtaining the member '__getitem__' of a type (line 2382)
    getitem___117232 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2382, 4), call_assignment_114610_117231, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_117235 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___117232, *[int_117233], **kwargs_117234)
    
    # Assigning a type to the variable 'call_assignment_114611' (line 2382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 4), 'call_assignment_114611', getitem___call_result_117235)
    
    # Assigning a Name to a Name (line 2382):
    # Getting the type of 'call_assignment_114611' (line 2382)
    call_assignment_114611_117236 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2382, 4), 'call_assignment_114611')
    # Assigning a type to the variable 'xname' (line 2382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 4), 'xname', call_assignment_114611_117236)
    
    # Assigning a Call to a Name (line 2382):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_117239 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2382, 4), 'int')
    # Processing the call keyword arguments
    kwargs_117240 = {}
    # Getting the type of 'call_assignment_114610' (line 2382)
    call_assignment_114610_117237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2382, 4), 'call_assignment_114610', False)
    # Obtaining the member '__getitem__' of a type (line 2382)
    getitem___117238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2382, 4), call_assignment_114610_117237, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_117241 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___117238, *[int_117239], **kwargs_117240)
    
    # Assigning a type to the variable 'call_assignment_114612' (line 2382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 4), 'call_assignment_114612', getitem___call_result_117241)
    
    # Assigning a Name to a Name (line 2382):
    # Getting the type of 'call_assignment_114612' (line 2382)
    call_assignment_114612_117242 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2382, 4), 'call_assignment_114612')
    # Assigning a type to the variable 'x' (line 2382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2382, 11), 'x', call_assignment_114612_117242)
    
    # Assigning a List to a Name (line 2383):
    
    # Assigning a List to a Name (line 2383):
    
    # Obtaining an instance of the builtin type 'list' (line 2383)
    list_117243 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2383, 16), 'list')
    # Adding type elements to the builtin type 'list' instance (line 2383)
    
    # Assigning a type to the variable 'ynamelist' (line 2383)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2383, 4), 'ynamelist', list_117243)
    
    
    
    # Call to len(...): (line 2385)
    # Processing the call arguments (line 2385)
    # Getting the type of 'cols' (line 2385)
    cols_117245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 11), 'cols', False)
    # Processing the call keyword arguments (line 2385)
    kwargs_117246 = {}
    # Getting the type of 'len' (line 2385)
    len_117244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2385, 7), 'len', False)
    # Calling len(args, kwargs) (line 2385)
    len_call_result_117247 = invoke(stypy.reporting.localization.Localization(__file__, 2385, 7), len_117244, *[cols_117245], **kwargs_117246)
    
    int_117248 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2385, 18), 'int')
    # Applying the binary operator '==' (line 2385)
    result_eq_117249 = python_operator(stypy.reporting.localization.Localization(__file__, 2385, 7), '==', len_call_result_117247, int_117248)
    
    # Testing the type of an if condition (line 2385)
    if_condition_117250 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2385, 4), result_eq_117249)
    # Assigning a type to the variable 'if_condition_117250' (line 2385)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2385, 4), 'if_condition_117250', if_condition_117250)
    # SSA begins for if statement (line 2385)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2386):
    
    # Assigning a Call to a Name (line 2386):
    
    # Call to add_subplot(...): (line 2386)
    # Processing the call arguments (line 2386)
    int_117253 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2386, 30), 'int')
    int_117254 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2386, 32), 'int')
    int_117255 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2386, 34), 'int')
    # Processing the call keyword arguments (line 2386)
    kwargs_117256 = {}
    # Getting the type of 'fig' (line 2386)
    fig_117251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2386, 14), 'fig', False)
    # Obtaining the member 'add_subplot' of a type (line 2386)
    add_subplot_117252 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2386, 14), fig_117251, 'add_subplot')
    # Calling add_subplot(args, kwargs) (line 2386)
    add_subplot_call_result_117257 = invoke(stypy.reporting.localization.Localization(__file__, 2386, 14), add_subplot_117252, *[int_117253, int_117254, int_117255], **kwargs_117256)
    
    # Assigning a type to the variable 'ax1' (line 2386)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2386, 8), 'ax1', add_subplot_call_result_117257)
    
    # Assigning a Call to a Name (line 2387):
    
    # Assigning a Call to a Name (line 2387):
    
    # Call to get(...): (line 2387)
    # Processing the call arguments (line 2387)
    
    # Obtaining the type of the subscript
    int_117260 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2387, 38), 'int')
    # Getting the type of 'cols' (line 2387)
    cols_117261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2387, 33), 'cols', False)
    # Obtaining the member '__getitem__' of a type (line 2387)
    getitem___117262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2387, 33), cols_117261, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2387)
    subscript_call_result_117263 = invoke(stypy.reporting.localization.Localization(__file__, 2387, 33), getitem___117262, int_117260)
    
    unicode_117264 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2387, 42), 'unicode', u'plot')
    # Processing the call keyword arguments (line 2387)
    kwargs_117265 = {}
    # Getting the type of 'plotfuncs' (line 2387)
    plotfuncs_117258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2387, 19), 'plotfuncs', False)
    # Obtaining the member 'get' of a type (line 2387)
    get_117259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2387, 19), plotfuncs_117258, 'get')
    # Calling get(args, kwargs) (line 2387)
    get_call_result_117266 = invoke(stypy.reporting.localization.Localization(__file__, 2387, 19), get_117259, *[subscript_call_result_117263, unicode_117264], **kwargs_117265)
    
    # Assigning a type to the variable 'funcname' (line 2387)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2387, 8), 'funcname', get_call_result_117266)
    
    # Assigning a Call to a Name (line 2388):
    
    # Assigning a Call to a Name (line 2388):
    
    # Call to getattr(...): (line 2388)
    # Processing the call arguments (line 2388)
    # Getting the type of 'ax1' (line 2388)
    ax1_117268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 23), 'ax1', False)
    # Getting the type of 'funcname' (line 2388)
    funcname_117269 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 28), 'funcname', False)
    # Processing the call keyword arguments (line 2388)
    kwargs_117270 = {}
    # Getting the type of 'getattr' (line 2388)
    getattr_117267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2388, 15), 'getattr', False)
    # Calling getattr(args, kwargs) (line 2388)
    getattr_call_result_117271 = invoke(stypy.reporting.localization.Localization(__file__, 2388, 15), getattr_117267, *[ax1_117268, funcname_117269], **kwargs_117270)
    
    # Assigning a type to the variable 'func' (line 2388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2388, 8), 'func', getattr_call_result_117271)
    
    # Call to func(...): (line 2389)
    # Processing the call arguments (line 2389)
    # Getting the type of 'x' (line 2389)
    x_117273 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 13), 'x', False)
    # Processing the call keyword arguments (line 2389)
    # Getting the type of 'kwargs' (line 2389)
    kwargs_117274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 18), 'kwargs', False)
    kwargs_117275 = {'kwargs_117274': kwargs_117274}
    # Getting the type of 'func' (line 2389)
    func_117272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2389, 8), 'func', False)
    # Calling func(args, kwargs) (line 2389)
    func_call_result_117276 = invoke(stypy.reporting.localization.Localization(__file__, 2389, 8), func_117272, *[x_117273], **kwargs_117275)
    
    
    # Call to set_ylabel(...): (line 2390)
    # Processing the call arguments (line 2390)
    # Getting the type of 'xname' (line 2390)
    xname_117279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 23), 'xname', False)
    # Processing the call keyword arguments (line 2390)
    kwargs_117280 = {}
    # Getting the type of 'ax1' (line 2390)
    ax1_117277 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2390, 8), 'ax1', False)
    # Obtaining the member 'set_ylabel' of a type (line 2390)
    set_ylabel_117278 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2390, 8), ax1_117277, 'set_ylabel')
    # Calling set_ylabel(args, kwargs) (line 2390)
    set_ylabel_call_result_117281 = invoke(stypy.reporting.localization.Localization(__file__, 2390, 8), set_ylabel_117278, *[xname_117279], **kwargs_117280)
    
    # SSA branch for the else part of an if statement (line 2385)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2392):
    
    # Assigning a Call to a Name (line 2392):
    
    # Call to len(...): (line 2392)
    # Processing the call arguments (line 2392)
    # Getting the type of 'cols' (line 2392)
    cols_117283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 16), 'cols', False)
    # Processing the call keyword arguments (line 2392)
    kwargs_117284 = {}
    # Getting the type of 'len' (line 2392)
    len_117282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2392, 12), 'len', False)
    # Calling len(args, kwargs) (line 2392)
    len_call_result_117285 = invoke(stypy.reporting.localization.Localization(__file__, 2392, 12), len_117282, *[cols_117283], **kwargs_117284)
    
    # Assigning a type to the variable 'N' (line 2392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2392, 8), 'N', len_call_result_117285)
    
    
    # Call to range(...): (line 2393)
    # Processing the call arguments (line 2393)
    int_117287 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2393, 23), 'int')
    # Getting the type of 'N' (line 2393)
    N_117288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 25), 'N', False)
    # Processing the call keyword arguments (line 2393)
    kwargs_117289 = {}
    # Getting the type of 'range' (line 2393)
    range_117286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2393, 17), 'range', False)
    # Calling range(args, kwargs) (line 2393)
    range_call_result_117290 = invoke(stypy.reporting.localization.Localization(__file__, 2393, 17), range_117286, *[int_117287, N_117288], **kwargs_117289)
    
    # Testing the type of a for loop iterable (line 2393)
    is_suitable_for_loop_condition(stypy.reporting.localization.Localization(__file__, 2393, 8), range_call_result_117290)
    # Getting the type of the for loop variable (line 2393)
    for_loop_var_117291 = get_type_of_for_loop_variable(stypy.reporting.localization.Localization(__file__, 2393, 8), range_call_result_117290)
    # Assigning a type to the variable 'i' (line 2393)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2393, 8), 'i', for_loop_var_117291)
    # SSA begins for a for statement (line 2393)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'for loop')
    
    # Getting the type of 'subplots' (line 2394)
    subplots_117292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2394, 15), 'subplots')
    # Testing the type of an if condition (line 2394)
    if_condition_117293 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2394, 12), subplots_117292)
    # Assigning a type to the variable 'if_condition_117293' (line 2394)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2394, 12), 'if_condition_117293', if_condition_117293)
    # SSA begins for if statement (line 2394)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    
    # Getting the type of 'i' (line 2395)
    i_117294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2395, 19), 'i')
    int_117295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2395, 22), 'int')
    # Applying the binary operator '==' (line 2395)
    result_eq_117296 = python_operator(stypy.reporting.localization.Localization(__file__, 2395, 19), '==', i_117294, int_117295)
    
    # Testing the type of an if condition (line 2395)
    if_condition_117297 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2395, 16), result_eq_117296)
    # Assigning a type to the variable 'if_condition_117297' (line 2395)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2395, 16), 'if_condition_117297', if_condition_117297)
    # SSA begins for if statement (line 2395)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Multiple assignment of 2 elements.
    
    # Assigning a Call to a Name (line 2396):
    
    # Call to add_subplot(...): (line 2396)
    # Processing the call arguments (line 2396)
    # Getting the type of 'N' (line 2396)
    N_117300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 47), 'N', False)
    int_117301 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2396, 49), 'int')
    # Applying the binary operator '-' (line 2396)
    result_sub_117302 = python_operator(stypy.reporting.localization.Localization(__file__, 2396, 47), '-', N_117300, int_117301)
    
    int_117303 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2396, 51), 'int')
    # Getting the type of 'i' (line 2396)
    i_117304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 53), 'i', False)
    # Processing the call keyword arguments (line 2396)
    kwargs_117305 = {}
    # Getting the type of 'fig' (line 2396)
    fig_117298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 31), 'fig', False)
    # Obtaining the member 'add_subplot' of a type (line 2396)
    add_subplot_117299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2396, 31), fig_117298, 'add_subplot')
    # Calling add_subplot(args, kwargs) (line 2396)
    add_subplot_call_result_117306 = invoke(stypy.reporting.localization.Localization(__file__, 2396, 31), add_subplot_117299, *[result_sub_117302, int_117303, i_117304], **kwargs_117305)
    
    # Assigning a type to the variable 'ax1' (line 2396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2396, 25), 'ax1', add_subplot_call_result_117306)
    
    # Assigning a Name to a Name (line 2396):
    # Getting the type of 'ax1' (line 2396)
    ax1_117307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2396, 25), 'ax1')
    # Assigning a type to the variable 'ax' (line 2396)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2396, 20), 'ax', ax1_117307)
    # SSA branch for the else part of an if statement (line 2395)
    module_type_store.open_ssa_branch('else')
    
    # Assigning a Call to a Name (line 2398):
    
    # Assigning a Call to a Name (line 2398):
    
    # Call to add_subplot(...): (line 2398)
    # Processing the call arguments (line 2398)
    # Getting the type of 'N' (line 2398)
    N_117310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 41), 'N', False)
    int_117311 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2398, 43), 'int')
    # Applying the binary operator '-' (line 2398)
    result_sub_117312 = python_operator(stypy.reporting.localization.Localization(__file__, 2398, 41), '-', N_117310, int_117311)
    
    int_117313 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2398, 45), 'int')
    # Getting the type of 'i' (line 2398)
    i_117314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 47), 'i', False)
    # Processing the call keyword arguments (line 2398)
    # Getting the type of 'ax1' (line 2398)
    ax1_117315 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 57), 'ax1', False)
    keyword_117316 = ax1_117315
    kwargs_117317 = {'sharex': keyword_117316}
    # Getting the type of 'fig' (line 2398)
    fig_117308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2398, 25), 'fig', False)
    # Obtaining the member 'add_subplot' of a type (line 2398)
    add_subplot_117309 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2398, 25), fig_117308, 'add_subplot')
    # Calling add_subplot(args, kwargs) (line 2398)
    add_subplot_call_result_117318 = invoke(stypy.reporting.localization.Localization(__file__, 2398, 25), add_subplot_117309, *[result_sub_117312, int_117313, i_117314], **kwargs_117317)
    
    # Assigning a type to the variable 'ax' (line 2398)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2398, 20), 'ax', add_subplot_call_result_117318)
    # SSA join for if statement (line 2395)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA branch for the else part of an if statement (line 2394)
    module_type_store.open_ssa_branch('else')
    
    
    # Getting the type of 'i' (line 2399)
    i_117319 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2399, 17), 'i')
    int_117320 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2399, 20), 'int')
    # Applying the binary operator '==' (line 2399)
    result_eq_117321 = python_operator(stypy.reporting.localization.Localization(__file__, 2399, 17), '==', i_117319, int_117320)
    
    # Testing the type of an if condition (line 2399)
    if_condition_117322 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2399, 17), result_eq_117321)
    # Assigning a type to the variable 'if_condition_117322' (line 2399)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2399, 17), 'if_condition_117322', if_condition_117322)
    # SSA begins for if statement (line 2399)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Assigning a Call to a Name (line 2400):
    
    # Assigning a Call to a Name (line 2400):
    
    # Call to add_subplot(...): (line 2400)
    # Processing the call arguments (line 2400)
    int_117325 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2400, 37), 'int')
    int_117326 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2400, 39), 'int')
    int_117327 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2400, 41), 'int')
    # Processing the call keyword arguments (line 2400)
    kwargs_117328 = {}
    # Getting the type of 'fig' (line 2400)
    fig_117323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2400, 21), 'fig', False)
    # Obtaining the member 'add_subplot' of a type (line 2400)
    add_subplot_117324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2400, 21), fig_117323, 'add_subplot')
    # Calling add_subplot(args, kwargs) (line 2400)
    add_subplot_call_result_117329 = invoke(stypy.reporting.localization.Localization(__file__, 2400, 21), add_subplot_117324, *[int_117325, int_117326, int_117327], **kwargs_117328)
    
    # Assigning a type to the variable 'ax' (line 2400)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2400, 16), 'ax', add_subplot_call_result_117329)
    # SSA join for if statement (line 2399)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2394)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # Assigning a Call to a Tuple (line 2402):
    
    # Assigning a Call to a Name:
    
    # Call to getname_val(...): (line 2402)
    # Processing the call arguments (line 2402)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2402)
    i_117331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 40), 'i', False)
    # Getting the type of 'cols' (line 2402)
    cols_117332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 35), 'cols', False)
    # Obtaining the member '__getitem__' of a type (line 2402)
    getitem___117333 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2402, 35), cols_117332, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2402)
    subscript_call_result_117334 = invoke(stypy.reporting.localization.Localization(__file__, 2402, 35), getitem___117333, i_117331)
    
    # Processing the call keyword arguments (line 2402)
    kwargs_117335 = {}
    # Getting the type of 'getname_val' (line 2402)
    getname_val_117330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 23), 'getname_val', False)
    # Calling getname_val(args, kwargs) (line 2402)
    getname_val_call_result_117336 = invoke(stypy.reporting.localization.Localization(__file__, 2402, 23), getname_val_117330, *[subscript_call_result_117334], **kwargs_117335)
    
    # Assigning a type to the variable 'call_assignment_114613' (line 2402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2402, 12), 'call_assignment_114613', getname_val_call_result_117336)
    
    # Assigning a Call to a Name (line 2402):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_117339 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2402, 12), 'int')
    # Processing the call keyword arguments
    kwargs_117340 = {}
    # Getting the type of 'call_assignment_114613' (line 2402)
    call_assignment_114613_117337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 12), 'call_assignment_114613', False)
    # Obtaining the member '__getitem__' of a type (line 2402)
    getitem___117338 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2402, 12), call_assignment_114613_117337, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_117341 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___117338, *[int_117339], **kwargs_117340)
    
    # Assigning a type to the variable 'call_assignment_114614' (line 2402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2402, 12), 'call_assignment_114614', getitem___call_result_117341)
    
    # Assigning a Name to a Name (line 2402):
    # Getting the type of 'call_assignment_114614' (line 2402)
    call_assignment_114614_117342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 12), 'call_assignment_114614')
    # Assigning a type to the variable 'yname' (line 2402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2402, 12), 'yname', call_assignment_114614_117342)
    
    # Assigning a Call to a Name (line 2402):
    
    # Call to __getitem__(...):
    # Processing the call arguments
    int_117345 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2402, 12), 'int')
    # Processing the call keyword arguments
    kwargs_117346 = {}
    # Getting the type of 'call_assignment_114613' (line 2402)
    call_assignment_114613_117343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 12), 'call_assignment_114613', False)
    # Obtaining the member '__getitem__' of a type (line 2402)
    getitem___117344 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2402, 12), call_assignment_114613_117343, '__getitem__')
    # Calling __getitem__(args, kwargs)
    getitem___call_result_117347 = invoke(stypy.reporting.localization.Localization(__file__, 0, 0), getitem___117344, *[int_117345], **kwargs_117346)
    
    # Assigning a type to the variable 'call_assignment_114615' (line 2402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2402, 12), 'call_assignment_114615', getitem___call_result_117347)
    
    # Assigning a Name to a Name (line 2402):
    # Getting the type of 'call_assignment_114615' (line 2402)
    call_assignment_114615_117348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2402, 12), 'call_assignment_114615')
    # Assigning a type to the variable 'y' (line 2402)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2402, 19), 'y', call_assignment_114615_117348)
    
    # Call to append(...): (line 2403)
    # Processing the call arguments (line 2403)
    # Getting the type of 'yname' (line 2403)
    yname_117351 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 29), 'yname', False)
    # Processing the call keyword arguments (line 2403)
    kwargs_117352 = {}
    # Getting the type of 'ynamelist' (line 2403)
    ynamelist_117349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2403, 12), 'ynamelist', False)
    # Obtaining the member 'append' of a type (line 2403)
    append_117350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2403, 12), ynamelist_117349, 'append')
    # Calling append(args, kwargs) (line 2403)
    append_call_result_117353 = invoke(stypy.reporting.localization.Localization(__file__, 2403, 12), append_117350, *[yname_117351], **kwargs_117352)
    
    
    # Assigning a Call to a Name (line 2405):
    
    # Assigning a Call to a Name (line 2405):
    
    # Call to get(...): (line 2405)
    # Processing the call arguments (line 2405)
    
    # Obtaining the type of the subscript
    # Getting the type of 'i' (line 2405)
    i_117356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 42), 'i', False)
    # Getting the type of 'cols' (line 2405)
    cols_117357 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 37), 'cols', False)
    # Obtaining the member '__getitem__' of a type (line 2405)
    getitem___117358 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2405, 37), cols_117357, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 2405)
    subscript_call_result_117359 = invoke(stypy.reporting.localization.Localization(__file__, 2405, 37), getitem___117358, i_117356)
    
    unicode_117360 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2405, 46), 'unicode', u'plot')
    # Processing the call keyword arguments (line 2405)
    kwargs_117361 = {}
    # Getting the type of 'plotfuncs' (line 2405)
    plotfuncs_117354 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2405, 23), 'plotfuncs', False)
    # Obtaining the member 'get' of a type (line 2405)
    get_117355 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2405, 23), plotfuncs_117354, 'get')
    # Calling get(args, kwargs) (line 2405)
    get_call_result_117362 = invoke(stypy.reporting.localization.Localization(__file__, 2405, 23), get_117355, *[subscript_call_result_117359, unicode_117360], **kwargs_117361)
    
    # Assigning a type to the variable 'funcname' (line 2405)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2405, 12), 'funcname', get_call_result_117362)
    
    # Assigning a Call to a Name (line 2406):
    
    # Assigning a Call to a Name (line 2406):
    
    # Call to getattr(...): (line 2406)
    # Processing the call arguments (line 2406)
    # Getting the type of 'ax' (line 2406)
    ax_117364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 27), 'ax', False)
    # Getting the type of 'funcname' (line 2406)
    funcname_117365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 31), 'funcname', False)
    # Processing the call keyword arguments (line 2406)
    kwargs_117366 = {}
    # Getting the type of 'getattr' (line 2406)
    getattr_117363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2406, 19), 'getattr', False)
    # Calling getattr(args, kwargs) (line 2406)
    getattr_call_result_117367 = invoke(stypy.reporting.localization.Localization(__file__, 2406, 19), getattr_117363, *[ax_117364, funcname_117365], **kwargs_117366)
    
    # Assigning a type to the variable 'func' (line 2406)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2406, 12), 'func', getattr_call_result_117367)
    
    # Call to func(...): (line 2408)
    # Processing the call arguments (line 2408)
    # Getting the type of 'x' (line 2408)
    x_117369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 17), 'x', False)
    # Getting the type of 'y' (line 2408)
    y_117370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 20), 'y', False)
    # Processing the call keyword arguments (line 2408)
    # Getting the type of 'kwargs' (line 2408)
    kwargs_117371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 25), 'kwargs', False)
    kwargs_117372 = {'kwargs_117371': kwargs_117371}
    # Getting the type of 'func' (line 2408)
    func_117368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2408, 12), 'func', False)
    # Calling func(args, kwargs) (line 2408)
    func_call_result_117373 = invoke(stypy.reporting.localization.Localization(__file__, 2408, 12), func_117368, *[x_117369, y_117370], **kwargs_117372)
    
    
    # Getting the type of 'subplots' (line 2409)
    subplots_117374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2409, 15), 'subplots')
    # Testing the type of an if condition (line 2409)
    if_condition_117375 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2409, 12), subplots_117374)
    # Assigning a type to the variable 'if_condition_117375' (line 2409)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2409, 12), 'if_condition_117375', if_condition_117375)
    # SSA begins for if statement (line 2409)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_ylabel(...): (line 2410)
    # Processing the call arguments (line 2410)
    # Getting the type of 'yname' (line 2410)
    yname_117378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 30), 'yname', False)
    # Processing the call keyword arguments (line 2410)
    kwargs_117379 = {}
    # Getting the type of 'ax' (line 2410)
    ax_117376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2410, 16), 'ax', False)
    # Obtaining the member 'set_ylabel' of a type (line 2410)
    set_ylabel_117377 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2410, 16), ax_117376, 'set_ylabel')
    # Calling set_ylabel(args, kwargs) (line 2410)
    set_ylabel_call_result_117380 = invoke(stypy.reporting.localization.Localization(__file__, 2410, 16), set_ylabel_117377, *[yname_117378], **kwargs_117379)
    
    # SSA join for if statement (line 2409)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Call to is_last_row(...): (line 2411)
    # Processing the call keyword arguments (line 2411)
    kwargs_117383 = {}
    # Getting the type of 'ax' (line 2411)
    ax_117381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2411, 15), 'ax', False)
    # Obtaining the member 'is_last_row' of a type (line 2411)
    is_last_row_117382 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2411, 15), ax_117381, 'is_last_row')
    # Calling is_last_row(args, kwargs) (line 2411)
    is_last_row_call_result_117384 = invoke(stypy.reporting.localization.Localization(__file__, 2411, 15), is_last_row_117382, *[], **kwargs_117383)
    
    # Testing the type of an if condition (line 2411)
    if_condition_117385 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2411, 12), is_last_row_call_result_117384)
    # Assigning a type to the variable 'if_condition_117385' (line 2411)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2411, 12), 'if_condition_117385', if_condition_117385)
    # SSA begins for if statement (line 2411)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to set_xlabel(...): (line 2412)
    # Processing the call arguments (line 2412)
    # Getting the type of 'xname' (line 2412)
    xname_117388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 30), 'xname', False)
    # Processing the call keyword arguments (line 2412)
    kwargs_117389 = {}
    # Getting the type of 'ax' (line 2412)
    ax_117386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2412, 16), 'ax', False)
    # Obtaining the member 'set_xlabel' of a type (line 2412)
    set_xlabel_117387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2412, 16), ax_117386, 'set_xlabel')
    # Calling set_xlabel(args, kwargs) (line 2412)
    set_xlabel_call_result_117390 = invoke(stypy.reporting.localization.Localization(__file__, 2412, 16), set_xlabel_117387, *[xname_117388], **kwargs_117389)
    
    # SSA branch for the else part of an if statement (line 2411)
    module_type_store.open_ssa_branch('else')
    
    # Call to set_xlabel(...): (line 2414)
    # Processing the call arguments (line 2414)
    unicode_117393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2414, 30), 'unicode', u'')
    # Processing the call keyword arguments (line 2414)
    kwargs_117394 = {}
    # Getting the type of 'ax' (line 2414)
    ax_117391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2414, 16), 'ax', False)
    # Obtaining the member 'set_xlabel' of a type (line 2414)
    set_xlabel_117392 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2414, 16), ax_117391, 'set_xlabel')
    # Calling set_xlabel(args, kwargs) (line 2414)
    set_xlabel_call_result_117395 = invoke(stypy.reporting.localization.Localization(__file__, 2414, 16), set_xlabel_117392, *[unicode_117393], **kwargs_117394)
    
    # SSA join for if statement (line 2411)
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for a for statement
    module_type_store = module_type_store.join_ssa_context()
    
    # SSA join for if statement (line 2385)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'subplots' (line 2416)
    subplots_117396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2416, 11), 'subplots')
    # Applying the 'not' unary operator (line 2416)
    result_not__117397 = python_operator(stypy.reporting.localization.Localization(__file__, 2416, 7), 'not', subplots_117396)
    
    # Testing the type of an if condition (line 2416)
    if_condition_117398 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2416, 4), result_not__117397)
    # Assigning a type to the variable 'if_condition_117398' (line 2416)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2416, 4), 'if_condition_117398', if_condition_117398)
    # SSA begins for if statement (line 2416)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to legend(...): (line 2417)
    # Processing the call arguments (line 2417)
    # Getting the type of 'ynamelist' (line 2417)
    ynamelist_117401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 18), 'ynamelist', False)
    # Processing the call keyword arguments (line 2417)
    unicode_117402 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2417, 33), 'unicode', u'best')
    keyword_117403 = unicode_117402
    kwargs_117404 = {'loc': keyword_117403}
    # Getting the type of 'ax' (line 2417)
    ax_117399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2417, 8), 'ax', False)
    # Obtaining the member 'legend' of a type (line 2417)
    legend_117400 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2417, 8), ax_117399, 'legend')
    # Calling legend(args, kwargs) (line 2417)
    legend_call_result_117405 = invoke(stypy.reporting.localization.Localization(__file__, 2417, 8), legend_117400, *[ynamelist_117401], **kwargs_117404)
    
    # SSA join for if statement (line 2416)
    module_type_store = module_type_store.join_ssa_context()
    
    
    
    # Getting the type of 'xname' (line 2419)
    xname_117406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2419, 7), 'xname')
    unicode_117407 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2419, 14), 'unicode', u'date')
    # Applying the binary operator '==' (line 2419)
    result_eq_117408 = python_operator(stypy.reporting.localization.Localization(__file__, 2419, 7), '==', xname_117406, unicode_117407)
    
    # Testing the type of an if condition (line 2419)
    if_condition_117409 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2419, 4), result_eq_117408)
    # Assigning a type to the variable 'if_condition_117409' (line 2419)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2419, 4), 'if_condition_117409', if_condition_117409)
    # SSA begins for if statement (line 2419)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to autofmt_xdate(...): (line 2420)
    # Processing the call keyword arguments (line 2420)
    kwargs_117412 = {}
    # Getting the type of 'fig' (line 2420)
    fig_117410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2420, 8), 'fig', False)
    # Obtaining the member 'autofmt_xdate' of a type (line 2420)
    autofmt_xdate_117411 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2420, 8), fig_117410, 'autofmt_xdate')
    # Calling autofmt_xdate(args, kwargs) (line 2420)
    autofmt_xdate_call_result_117413 = invoke(stypy.reporting.localization.Localization(__file__, 2420, 8), autofmt_xdate_117411, *[], **kwargs_117412)
    
    # SSA join for if statement (line 2419)
    module_type_store = module_type_store.join_ssa_context()
    
    
    # ################# End of 'plotfile(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'plotfile' in the type store
    # Getting the type of 'stypy_return_type' (line 2304)
    stypy_return_type_117414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2304, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117414)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'plotfile'
    return stypy_return_type_117414

# Assigning a type to the variable 'plotfile' (line 2304)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2304, 0), 'plotfile', plotfile)

@norecursion
def _autogen_docstring(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function '_autogen_docstring'
    module_type_store = module_type_store.open_function_context('_autogen_docstring', 2423, 0, False)
    
    # Passed parameters checking function
    _autogen_docstring.stypy_localization = localization
    _autogen_docstring.stypy_type_of_self = None
    _autogen_docstring.stypy_type_store = module_type_store
    _autogen_docstring.stypy_function_name = '_autogen_docstring'
    _autogen_docstring.stypy_param_names_list = ['base']
    _autogen_docstring.stypy_varargs_param_name = None
    _autogen_docstring.stypy_kwargs_param_name = None
    _autogen_docstring.stypy_call_defaults = defaults
    _autogen_docstring.stypy_call_varargs = varargs
    _autogen_docstring.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, '_autogen_docstring', ['base'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, '_autogen_docstring', localization, ['base'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of '_autogen_docstring(...)' code ##################

    unicode_117415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2425, (-1)), 'unicode', u'Autogenerated wrappers will get their docstring from a base function\n    with an addendum.')
    
    # Assigning a Str to a Name (line 2427):
    
    # Assigning a Str to a Name (line 2427):
    unicode_117416 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2427, 10), 'unicode', u'')
    # Assigning a type to the variable 'msg' (line 2427)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2427, 4), 'msg', unicode_117416)
    
    # Assigning a Call to a Name (line 2428):
    
    # Assigning a Call to a Name (line 2428):
    
    # Call to Appender(...): (line 2428)
    # Processing the call arguments (line 2428)
    # Getting the type of 'msg' (line 2428)
    msg_117419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2428, 34), 'msg', False)
    unicode_117420 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2428, 39), 'unicode', u'\n\n')
    # Processing the call keyword arguments (line 2428)
    kwargs_117421 = {}
    # Getting the type of 'docstring' (line 2428)
    docstring_117417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2428, 15), 'docstring', False)
    # Obtaining the member 'Appender' of a type (line 2428)
    Appender_117418 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2428, 15), docstring_117417, 'Appender')
    # Calling Appender(args, kwargs) (line 2428)
    Appender_call_result_117422 = invoke(stypy.reporting.localization.Localization(__file__, 2428, 15), Appender_117418, *[msg_117419, unicode_117420], **kwargs_117421)
    
    # Assigning a type to the variable 'addendum' (line 2428)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2428, 4), 'addendum', Appender_call_result_117422)

    @norecursion
    def _stypy_temp_lambda_22(localization, *varargs, **kwargs):
        global module_type_store
        # Assign values to the parameters with defaults
        defaults = []
        # Create a new context for function '_stypy_temp_lambda_22'
        module_type_store = module_type_store.open_function_context('_stypy_temp_lambda_22', 2429, 11, True)
        # Passed parameters checking function
        _stypy_temp_lambda_22.stypy_localization = localization
        _stypy_temp_lambda_22.stypy_type_of_self = None
        _stypy_temp_lambda_22.stypy_type_store = module_type_store
        _stypy_temp_lambda_22.stypy_function_name = '_stypy_temp_lambda_22'
        _stypy_temp_lambda_22.stypy_param_names_list = ['func']
        _stypy_temp_lambda_22.stypy_varargs_param_name = None
        _stypy_temp_lambda_22.stypy_kwargs_param_name = None
        _stypy_temp_lambda_22.stypy_call_defaults = defaults
        _stypy_temp_lambda_22.stypy_call_varargs = varargs
        _stypy_temp_lambda_22.stypy_call_kwargs = kwargs
        arguments = process_argument_values(localization, None, module_type_store, '_stypy_temp_lambda_22', ['func'], None, None, defaults, varargs, kwargs)

        if is_error_type(arguments):
            # Destroy the current context
            module_type_store = module_type_store.close_function_context()
            return arguments

        # Stacktrace push for error reporting
        localization.set_stack_trace('_stypy_temp_lambda_22', ['func'], arguments)
        # Default return type storage variable (SSA)
        # Assigning a type to the variable 'stypy_return_type'
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
        
        
        # ################# Begin of the lambda function code ##################

        
        # Call to addendum(...): (line 2429)
        # Processing the call arguments (line 2429)
        
        # Call to (...): (line 2429)
        # Processing the call arguments (line 2429)
        # Getting the type of 'func' (line 2429)
        func_117429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2429, 61), 'func', False)
        # Processing the call keyword arguments (line 2429)
        kwargs_117430 = {}
        
        # Call to copy_dedent(...): (line 2429)
        # Processing the call arguments (line 2429)
        # Getting the type of 'base' (line 2429)
        base_117426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2429, 55), 'base', False)
        # Processing the call keyword arguments (line 2429)
        kwargs_117427 = {}
        # Getting the type of 'docstring' (line 2429)
        docstring_117424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2429, 33), 'docstring', False)
        # Obtaining the member 'copy_dedent' of a type (line 2429)
        copy_dedent_117425 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2429, 33), docstring_117424, 'copy_dedent')
        # Calling copy_dedent(args, kwargs) (line 2429)
        copy_dedent_call_result_117428 = invoke(stypy.reporting.localization.Localization(__file__, 2429, 33), copy_dedent_117425, *[base_117426], **kwargs_117427)
        
        # Calling (args, kwargs) (line 2429)
        _call_result_117431 = invoke(stypy.reporting.localization.Localization(__file__, 2429, 33), copy_dedent_call_result_117428, *[func_117429], **kwargs_117430)
        
        # Processing the call keyword arguments (line 2429)
        kwargs_117432 = {}
        # Getting the type of 'addendum' (line 2429)
        addendum_117423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2429, 24), 'addendum', False)
        # Calling addendum(args, kwargs) (line 2429)
        addendum_call_result_117433 = invoke(stypy.reporting.localization.Localization(__file__, 2429, 24), addendum_117423, *[_call_result_117431], **kwargs_117432)
        
        # Assigning the return type of the lambda function
        # Assigning a type to the variable 'stypy_return_type' (line 2429)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2429, 11), 'stypy_return_type', addendum_call_result_117433)
        
        # ################# End of the lambda function code ##################

        # Stacktrace pop (error reporting)
        localization.unset_stack_trace()
        
        # Storing the return type of function '_stypy_temp_lambda_22' in the type store
        # Getting the type of 'stypy_return_type' (line 2429)
        stypy_return_type_117434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2429, 11), 'stypy_return_type')
        module_type_store.store_return_type_of_current_context(stypy_return_type_117434)
        
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        
        # Return type of the function '_stypy_temp_lambda_22'
        return stypy_return_type_117434

    # Assigning a type to the variable '_stypy_temp_lambda_22' (line 2429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2429, 11), '_stypy_temp_lambda_22', _stypy_temp_lambda_22)
    # Getting the type of '_stypy_temp_lambda_22' (line 2429)
    _stypy_temp_lambda_22_117435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2429, 11), '_stypy_temp_lambda_22')
    # Assigning a type to the variable 'stypy_return_type' (line 2429)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2429, 4), 'stypy_return_type', _stypy_temp_lambda_22_117435)
    
    # ################# End of '_autogen_docstring(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function '_autogen_docstring' in the type store
    # Getting the type of 'stypy_return_type' (line 2423)
    stypy_return_type_117436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2423, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117436)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function '_autogen_docstring'
    return stypy_return_type_117436

# Assigning a type to the variable '_autogen_docstring' (line 2423)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2423, 0), '_autogen_docstring', _autogen_docstring)

@norecursion
def spy(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_117437 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2434, 21), 'int')
    # Getting the type of 'None' (line 2434)
    None_117438 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2434, 31), 'None')
    # Getting the type of 'None' (line 2434)
    None_117439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2434, 48), 'None')
    unicode_117440 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2434, 61), 'unicode', u'equal')
    defaults = [int_117437, None_117438, None_117439, unicode_117440]
    # Create a new context for function 'spy'
    module_type_store = module_type_store.open_function_context('spy', 2433, 0, False)
    
    # Passed parameters checking function
    spy.stypy_localization = localization
    spy.stypy_type_of_self = None
    spy.stypy_type_store = module_type_store
    spy.stypy_function_name = 'spy'
    spy.stypy_param_names_list = ['Z', 'precision', 'marker', 'markersize', 'aspect']
    spy.stypy_varargs_param_name = None
    spy.stypy_kwargs_param_name = 'kwargs'
    spy.stypy_call_defaults = defaults
    spy.stypy_call_varargs = varargs
    spy.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'spy', ['Z', 'precision', 'marker', 'markersize', 'aspect'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'spy', localization, ['Z', 'precision', 'marker', 'markersize', 'aspect'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'spy(...)' code ##################

    
    # Assigning a Call to a Name (line 2435):
    
    # Assigning a Call to a Name (line 2435):
    
    # Call to gca(...): (line 2435)
    # Processing the call keyword arguments (line 2435)
    kwargs_117442 = {}
    # Getting the type of 'gca' (line 2435)
    gca_117441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2435, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2435)
    gca_call_result_117443 = invoke(stypy.reporting.localization.Localization(__file__, 2435, 9), gca_117441, *[], **kwargs_117442)
    
    # Assigning a type to the variable 'ax' (line 2435)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2435, 4), 'ax', gca_call_result_117443)
    
    # Assigning a Call to a Name (line 2436):
    
    # Assigning a Call to a Name (line 2436):
    
    # Call to pop(...): (line 2436)
    # Processing the call arguments (line 2436)
    unicode_117446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2436, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 2436)
    None_117447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 30), 'None', False)
    # Processing the call keyword arguments (line 2436)
    kwargs_117448 = {}
    # Getting the type of 'kwargs' (line 2436)
    kwargs_117444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2436, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 2436)
    pop_117445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2436, 11), kwargs_117444, 'pop')
    # Calling pop(args, kwargs) (line 2436)
    pop_call_result_117449 = invoke(stypy.reporting.localization.Localization(__file__, 2436, 11), pop_117445, *[unicode_117446, None_117447], **kwargs_117448)
    
    # Assigning a type to the variable 'hold' (line 2436)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2436, 4), 'hold', pop_call_result_117449)
    
    # Assigning a Attribute to a Name (line 2438):
    
    # Assigning a Attribute to a Name (line 2438):
    # Getting the type of 'ax' (line 2438)
    ax_117450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2438, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2438)
    _hold_117451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2438, 14), ax_117450, '_hold')
    # Assigning a type to the variable 'washold' (line 2438)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2438, 4), 'washold', _hold_117451)
    
    # Type idiom detected: calculating its left and rigth part (line 2440)
    # Getting the type of 'hold' (line 2440)
    hold_117452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 4), 'hold')
    # Getting the type of 'None' (line 2440)
    None_117453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2440, 19), 'None')
    
    (may_be_117454, more_types_in_union_117455) = may_not_be_none(hold_117452, None_117453)

    if may_be_117454:

        if more_types_in_union_117455:
            # Runtime conditional SSA (line 2440)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2441):
        
        # Assigning a Name to a Attribute (line 2441):
        # Getting the type of 'hold' (line 2441)
        hold_117456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 19), 'hold')
        # Getting the type of 'ax' (line 2441)
        ax_117457 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2441, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2441)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2441, 8), ax_117457, '_hold', hold_117456)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2442, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2442)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_117458 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2442, 8), 'matplotlib.cbook')

        if (type(import_117458) is not StypyTypeError):

            if (import_117458 != 'pyd_module'):
                __import__(import_117458)
                sys_modules_117459 = sys.modules[import_117458]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2442, 8), 'matplotlib.cbook', sys_modules_117459.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2442, 8), __file__, sys_modules_117459, sys_modules_117459.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2442, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2442)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2442, 8), 'matplotlib.cbook', import_117458)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2443)
        # Processing the call arguments (line 2443)
        unicode_117462 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2443, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2444)
        mplDeprecation_117463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2444, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2443)
        kwargs_117464 = {}
        # Getting the type of 'warnings' (line 2443)
        warnings_117460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2443, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2443)
        warn_117461 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2443, 8), warnings_117460, 'warn')
        # Calling warn(args, kwargs) (line 2443)
        warn_call_result_117465 = invoke(stypy.reporting.localization.Localization(__file__, 2443, 8), warn_117461, *[unicode_117462, mplDeprecation_117463], **kwargs_117464)
        

        if more_types_in_union_117455:
            # SSA join for if statement (line 2440)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2445)
    
    # Assigning a Call to a Name (line 2446):
    
    # Assigning a Call to a Name (line 2446):
    
    # Call to spy(...): (line 2446)
    # Processing the call arguments (line 2446)
    # Getting the type of 'Z' (line 2446)
    Z_117468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 21), 'Z', False)
    # Getting the type of 'precision' (line 2446)
    precision_117469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 24), 'precision', False)
    # Getting the type of 'marker' (line 2446)
    marker_117470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 35), 'marker', False)
    # Getting the type of 'markersize' (line 2446)
    markersize_117471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 43), 'markersize', False)
    # Getting the type of 'aspect' (line 2446)
    aspect_117472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 55), 'aspect', False)
    # Processing the call keyword arguments (line 2446)
    # Getting the type of 'kwargs' (line 2446)
    kwargs_117473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 65), 'kwargs', False)
    kwargs_117474 = {'kwargs_117473': kwargs_117473}
    # Getting the type of 'ax' (line 2446)
    ax_117466 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2446, 14), 'ax', False)
    # Obtaining the member 'spy' of a type (line 2446)
    spy_117467 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2446, 14), ax_117466, 'spy')
    # Calling spy(args, kwargs) (line 2446)
    spy_call_result_117475 = invoke(stypy.reporting.localization.Localization(__file__, 2446, 14), spy_117467, *[Z_117468, precision_117469, marker_117470, markersize_117471, aspect_117472], **kwargs_117474)
    
    # Assigning a type to the variable 'ret' (line 2446)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2446, 8), 'ret', spy_call_result_117475)
    
    # finally branch of the try-finally block (line 2445)
    
    # Assigning a Name to a Attribute (line 2448):
    
    # Assigning a Name to a Attribute (line 2448):
    # Getting the type of 'washold' (line 2448)
    washold_117476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 19), 'washold')
    # Getting the type of 'ax' (line 2448)
    ax_117477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2448, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2448)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2448, 8), ax_117477, '_hold', washold_117476)
    
    
    
    # Call to isinstance(...): (line 2449)
    # Processing the call arguments (line 2449)
    # Getting the type of 'ret' (line 2449)
    ret_117479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 18), 'ret', False)
    # Getting the type of 'cm' (line 2449)
    cm_117480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 23), 'cm', False)
    # Obtaining the member 'ScalarMappable' of a type (line 2449)
    ScalarMappable_117481 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2449, 23), cm_117480, 'ScalarMappable')
    # Processing the call keyword arguments (line 2449)
    kwargs_117482 = {}
    # Getting the type of 'isinstance' (line 2449)
    isinstance_117478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2449, 7), 'isinstance', False)
    # Calling isinstance(args, kwargs) (line 2449)
    isinstance_call_result_117483 = invoke(stypy.reporting.localization.Localization(__file__, 2449, 7), isinstance_117478, *[ret_117479, ScalarMappable_117481], **kwargs_117482)
    
    # Testing the type of an if condition (line 2449)
    if_condition_117484 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2449, 4), isinstance_call_result_117483)
    # Assigning a type to the variable 'if_condition_117484' (line 2449)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2449, 4), 'if_condition_117484', if_condition_117484)
    # SSA begins for if statement (line 2449)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sci(...): (line 2450)
    # Processing the call arguments (line 2450)
    # Getting the type of 'ret' (line 2450)
    ret_117486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 12), 'ret', False)
    # Processing the call keyword arguments (line 2450)
    kwargs_117487 = {}
    # Getting the type of 'sci' (line 2450)
    sci_117485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2450, 8), 'sci', False)
    # Calling sci(args, kwargs) (line 2450)
    sci_call_result_117488 = invoke(stypy.reporting.localization.Localization(__file__, 2450, 8), sci_117485, *[ret_117486], **kwargs_117487)
    
    # SSA join for if statement (line 2449)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'ret' (line 2451)
    ret_117489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2451, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2451)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2451, 4), 'stypy_return_type', ret_117489)
    
    # ################# End of 'spy(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'spy' in the type store
    # Getting the type of 'stypy_return_type' (line 2433)
    stypy_return_type_117490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2433, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117490)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'spy'
    return stypy_return_type_117490

# Assigning a type to the variable 'spy' (line 2433)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2433, 0), 'spy', spy)

# Call to install_repl_displayhook(...): (line 2458)
# Processing the call keyword arguments (line 2458)
kwargs_117492 = {}
# Getting the type of 'install_repl_displayhook' (line 2458)
install_repl_displayhook_117491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2458, 0), 'install_repl_displayhook', False)
# Calling install_repl_displayhook(args, kwargs) (line 2458)
install_repl_displayhook_call_result_117493 = invoke(stypy.reporting.localization.Localization(__file__, 2458, 0), install_repl_displayhook_117491, *[], **kwargs_117492)


@norecursion
def acorr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2466)
    None_117494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 18), 'None')
    # Getting the type of 'None' (line 2466)
    None_117495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2466, 29), 'None')
    defaults = [None_117494, None_117495]
    # Create a new context for function 'acorr'
    module_type_store = module_type_store.open_function_context('acorr', 2465, 0, False)
    
    # Passed parameters checking function
    acorr.stypy_localization = localization
    acorr.stypy_type_of_self = None
    acorr.stypy_type_store = module_type_store
    acorr.stypy_function_name = 'acorr'
    acorr.stypy_param_names_list = ['x', 'hold', 'data']
    acorr.stypy_varargs_param_name = None
    acorr.stypy_kwargs_param_name = 'kwargs'
    acorr.stypy_call_defaults = defaults
    acorr.stypy_call_varargs = varargs
    acorr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'acorr', ['x', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'acorr', localization, ['x', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'acorr(...)' code ##################

    
    # Assigning a Call to a Name (line 2467):
    
    # Assigning a Call to a Name (line 2467):
    
    # Call to gca(...): (line 2467)
    # Processing the call keyword arguments (line 2467)
    kwargs_117497 = {}
    # Getting the type of 'gca' (line 2467)
    gca_117496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2467, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2467)
    gca_call_result_117498 = invoke(stypy.reporting.localization.Localization(__file__, 2467, 9), gca_117496, *[], **kwargs_117497)
    
    # Assigning a type to the variable 'ax' (line 2467)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2467, 4), 'ax', gca_call_result_117498)
    
    # Assigning a Attribute to a Name (line 2470):
    
    # Assigning a Attribute to a Name (line 2470):
    # Getting the type of 'ax' (line 2470)
    ax_117499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2470, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2470)
    _hold_117500 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2470, 14), ax_117499, '_hold')
    # Assigning a type to the variable 'washold' (line 2470)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2470, 4), 'washold', _hold_117500)
    
    # Type idiom detected: calculating its left and rigth part (line 2472)
    # Getting the type of 'hold' (line 2472)
    hold_117501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 4), 'hold')
    # Getting the type of 'None' (line 2472)
    None_117502 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2472, 19), 'None')
    
    (may_be_117503, more_types_in_union_117504) = may_not_be_none(hold_117501, None_117502)

    if may_be_117503:

        if more_types_in_union_117504:
            # Runtime conditional SSA (line 2472)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2473):
        
        # Assigning a Name to a Attribute (line 2473):
        # Getting the type of 'hold' (line 2473)
        hold_117505 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 19), 'hold')
        # Getting the type of 'ax' (line 2473)
        ax_117506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2473, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2473)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2473, 8), ax_117506, '_hold', hold_117505)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2474, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2474)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_117507 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2474, 8), 'matplotlib.cbook')

        if (type(import_117507) is not StypyTypeError):

            if (import_117507 != 'pyd_module'):
                __import__(import_117507)
                sys_modules_117508 = sys.modules[import_117507]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2474, 8), 'matplotlib.cbook', sys_modules_117508.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2474, 8), __file__, sys_modules_117508, sys_modules_117508.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2474, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2474)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2474, 8), 'matplotlib.cbook', import_117507)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2475)
        # Processing the call arguments (line 2475)
        unicode_117511 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2475, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2476)
        mplDeprecation_117512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2476, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2475)
        kwargs_117513 = {}
        # Getting the type of 'warnings' (line 2475)
        warnings_117509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2475, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2475)
        warn_117510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2475, 8), warnings_117509, 'warn')
        # Calling warn(args, kwargs) (line 2475)
        warn_call_result_117514 = invoke(stypy.reporting.localization.Localization(__file__, 2475, 8), warn_117510, *[unicode_117511, mplDeprecation_117512], **kwargs_117513)
        

        if more_types_in_union_117504:
            # SSA join for if statement (line 2472)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2477)
    
    # Assigning a Call to a Name (line 2478):
    
    # Assigning a Call to a Name (line 2478):
    
    # Call to acorr(...): (line 2478)
    # Processing the call arguments (line 2478)
    # Getting the type of 'x' (line 2478)
    x_117517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 23), 'x', False)
    # Processing the call keyword arguments (line 2478)
    # Getting the type of 'data' (line 2478)
    data_117518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 31), 'data', False)
    keyword_117519 = data_117518
    # Getting the type of 'kwargs' (line 2478)
    kwargs_117520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 39), 'kwargs', False)
    kwargs_117521 = {'kwargs_117520': kwargs_117520, 'data': keyword_117519}
    # Getting the type of 'ax' (line 2478)
    ax_117515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2478, 14), 'ax', False)
    # Obtaining the member 'acorr' of a type (line 2478)
    acorr_117516 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2478, 14), ax_117515, 'acorr')
    # Calling acorr(args, kwargs) (line 2478)
    acorr_call_result_117522 = invoke(stypy.reporting.localization.Localization(__file__, 2478, 14), acorr_117516, *[x_117517], **kwargs_117521)
    
    # Assigning a type to the variable 'ret' (line 2478)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2478, 8), 'ret', acorr_call_result_117522)
    
    # finally branch of the try-finally block (line 2477)
    
    # Assigning a Name to a Attribute (line 2480):
    
    # Assigning a Name to a Attribute (line 2480):
    # Getting the type of 'washold' (line 2480)
    washold_117523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 19), 'washold')
    # Getting the type of 'ax' (line 2480)
    ax_117524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2480, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2480)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2480, 8), ax_117524, '_hold', washold_117523)
    
    # Getting the type of 'ret' (line 2482)
    ret_117525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2482, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2482, 4), 'stypy_return_type', ret_117525)
    
    # ################# End of 'acorr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'acorr' in the type store
    # Getting the type of 'stypy_return_type' (line 2465)
    stypy_return_type_117526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2465, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117526)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'acorr'
    return stypy_return_type_117526

# Assigning a type to the variable 'acorr' (line 2465)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2465, 0), 'acorr', acorr)

@norecursion
def angle_spectrum(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2487)
    None_117527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 25), 'None')
    # Getting the type of 'None' (line 2487)
    None_117528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 34), 'None')
    # Getting the type of 'None' (line 2487)
    None_117529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 47), 'None')
    # Getting the type of 'None' (line 2487)
    None_117530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 60), 'None')
    # Getting the type of 'None' (line 2487)
    None_117531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2487, 72), 'None')
    # Getting the type of 'None' (line 2488)
    None_117532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2488, 24), 'None')
    # Getting the type of 'None' (line 2488)
    None_117533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2488, 35), 'None')
    defaults = [None_117527, None_117528, None_117529, None_117530, None_117531, None_117532, None_117533]
    # Create a new context for function 'angle_spectrum'
    module_type_store = module_type_store.open_function_context('angle_spectrum', 2486, 0, False)
    
    # Passed parameters checking function
    angle_spectrum.stypy_localization = localization
    angle_spectrum.stypy_type_of_self = None
    angle_spectrum.stypy_type_store = module_type_store
    angle_spectrum.stypy_function_name = 'angle_spectrum'
    angle_spectrum.stypy_param_names_list = ['x', 'Fs', 'Fc', 'window', 'pad_to', 'sides', 'hold', 'data']
    angle_spectrum.stypy_varargs_param_name = None
    angle_spectrum.stypy_kwargs_param_name = 'kwargs'
    angle_spectrum.stypy_call_defaults = defaults
    angle_spectrum.stypy_call_varargs = varargs
    angle_spectrum.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'angle_spectrum', ['x', 'Fs', 'Fc', 'window', 'pad_to', 'sides', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'angle_spectrum', localization, ['x', 'Fs', 'Fc', 'window', 'pad_to', 'sides', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'angle_spectrum(...)' code ##################

    
    # Assigning a Call to a Name (line 2489):
    
    # Assigning a Call to a Name (line 2489):
    
    # Call to gca(...): (line 2489)
    # Processing the call keyword arguments (line 2489)
    kwargs_117535 = {}
    # Getting the type of 'gca' (line 2489)
    gca_117534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2489, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2489)
    gca_call_result_117536 = invoke(stypy.reporting.localization.Localization(__file__, 2489, 9), gca_117534, *[], **kwargs_117535)
    
    # Assigning a type to the variable 'ax' (line 2489)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2489, 4), 'ax', gca_call_result_117536)
    
    # Assigning a Attribute to a Name (line 2492):
    
    # Assigning a Attribute to a Name (line 2492):
    # Getting the type of 'ax' (line 2492)
    ax_117537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2492, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2492)
    _hold_117538 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2492, 14), ax_117537, '_hold')
    # Assigning a type to the variable 'washold' (line 2492)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2492, 4), 'washold', _hold_117538)
    
    # Type idiom detected: calculating its left and rigth part (line 2494)
    # Getting the type of 'hold' (line 2494)
    hold_117539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 4), 'hold')
    # Getting the type of 'None' (line 2494)
    None_117540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2494, 19), 'None')
    
    (may_be_117541, more_types_in_union_117542) = may_not_be_none(hold_117539, None_117540)

    if may_be_117541:

        if more_types_in_union_117542:
            # Runtime conditional SSA (line 2494)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2495):
        
        # Assigning a Name to a Attribute (line 2495):
        # Getting the type of 'hold' (line 2495)
        hold_117543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 19), 'hold')
        # Getting the type of 'ax' (line 2495)
        ax_117544 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2495, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2495)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2495, 8), ax_117544, '_hold', hold_117543)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2496, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2496)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_117545 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2496, 8), 'matplotlib.cbook')

        if (type(import_117545) is not StypyTypeError):

            if (import_117545 != 'pyd_module'):
                __import__(import_117545)
                sys_modules_117546 = sys.modules[import_117545]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2496, 8), 'matplotlib.cbook', sys_modules_117546.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2496, 8), __file__, sys_modules_117546, sys_modules_117546.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2496, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2496)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2496, 8), 'matplotlib.cbook', import_117545)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2497)
        # Processing the call arguments (line 2497)
        unicode_117549 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2497, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2498)
        mplDeprecation_117550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2498, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2497)
        kwargs_117551 = {}
        # Getting the type of 'warnings' (line 2497)
        warnings_117547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2497, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2497)
        warn_117548 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2497, 8), warnings_117547, 'warn')
        # Calling warn(args, kwargs) (line 2497)
        warn_call_result_117552 = invoke(stypy.reporting.localization.Localization(__file__, 2497, 8), warn_117548, *[unicode_117549, mplDeprecation_117550], **kwargs_117551)
        

        if more_types_in_union_117542:
            # SSA join for if statement (line 2494)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2499)
    
    # Assigning a Call to a Name (line 2500):
    
    # Assigning a Call to a Name (line 2500):
    
    # Call to angle_spectrum(...): (line 2500)
    # Processing the call arguments (line 2500)
    # Getting the type of 'x' (line 2500)
    x_117555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 32), 'x', False)
    # Processing the call keyword arguments (line 2500)
    # Getting the type of 'Fs' (line 2500)
    Fs_117556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 38), 'Fs', False)
    keyword_117557 = Fs_117556
    # Getting the type of 'Fc' (line 2500)
    Fc_117558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 45), 'Fc', False)
    keyword_117559 = Fc_117558
    # Getting the type of 'window' (line 2500)
    window_117560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 56), 'window', False)
    keyword_117561 = window_117560
    # Getting the type of 'pad_to' (line 2500)
    pad_to_117562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 71), 'pad_to', False)
    keyword_117563 = pad_to_117562
    # Getting the type of 'sides' (line 2501)
    sides_117564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2501, 38), 'sides', False)
    keyword_117565 = sides_117564
    # Getting the type of 'data' (line 2501)
    data_117566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2501, 50), 'data', False)
    keyword_117567 = data_117566
    # Getting the type of 'kwargs' (line 2501)
    kwargs_117568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2501, 58), 'kwargs', False)
    kwargs_117569 = {'Fs': keyword_117557, 'kwargs_117568': kwargs_117568, 'pad_to': keyword_117563, 'window': keyword_117561, 'Fc': keyword_117559, 'data': keyword_117567, 'sides': keyword_117565}
    # Getting the type of 'ax' (line 2500)
    ax_117553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2500, 14), 'ax', False)
    # Obtaining the member 'angle_spectrum' of a type (line 2500)
    angle_spectrum_117554 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2500, 14), ax_117553, 'angle_spectrum')
    # Calling angle_spectrum(args, kwargs) (line 2500)
    angle_spectrum_call_result_117570 = invoke(stypy.reporting.localization.Localization(__file__, 2500, 14), angle_spectrum_117554, *[x_117555], **kwargs_117569)
    
    # Assigning a type to the variable 'ret' (line 2500)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2500, 8), 'ret', angle_spectrum_call_result_117570)
    
    # finally branch of the try-finally block (line 2499)
    
    # Assigning a Name to a Attribute (line 2503):
    
    # Assigning a Name to a Attribute (line 2503):
    # Getting the type of 'washold' (line 2503)
    washold_117571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 19), 'washold')
    # Getting the type of 'ax' (line 2503)
    ax_117572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2503, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2503)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2503, 8), ax_117572, '_hold', washold_117571)
    
    # Getting the type of 'ret' (line 2505)
    ret_117573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2505, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2505)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2505, 4), 'stypy_return_type', ret_117573)
    
    # ################# End of 'angle_spectrum(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'angle_spectrum' in the type store
    # Getting the type of 'stypy_return_type' (line 2486)
    stypy_return_type_117574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2486, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117574)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'angle_spectrum'
    return stypy_return_type_117574

# Assigning a type to the variable 'angle_spectrum' (line 2486)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2486, 0), 'angle_spectrum', angle_spectrum)

@norecursion
def arrow(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2510)
    None_117575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2510, 29), 'None')
    defaults = [None_117575]
    # Create a new context for function 'arrow'
    module_type_store = module_type_store.open_function_context('arrow', 2509, 0, False)
    
    # Passed parameters checking function
    arrow.stypy_localization = localization
    arrow.stypy_type_of_self = None
    arrow.stypy_type_store = module_type_store
    arrow.stypy_function_name = 'arrow'
    arrow.stypy_param_names_list = ['x', 'y', 'dx', 'dy', 'hold']
    arrow.stypy_varargs_param_name = None
    arrow.stypy_kwargs_param_name = 'kwargs'
    arrow.stypy_call_defaults = defaults
    arrow.stypy_call_varargs = varargs
    arrow.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'arrow', ['x', 'y', 'dx', 'dy', 'hold'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'arrow', localization, ['x', 'y', 'dx', 'dy', 'hold'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'arrow(...)' code ##################

    
    # Assigning a Call to a Name (line 2511):
    
    # Assigning a Call to a Name (line 2511):
    
    # Call to gca(...): (line 2511)
    # Processing the call keyword arguments (line 2511)
    kwargs_117577 = {}
    # Getting the type of 'gca' (line 2511)
    gca_117576 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2511, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2511)
    gca_call_result_117578 = invoke(stypy.reporting.localization.Localization(__file__, 2511, 9), gca_117576, *[], **kwargs_117577)
    
    # Assigning a type to the variable 'ax' (line 2511)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2511, 4), 'ax', gca_call_result_117578)
    
    # Assigning a Attribute to a Name (line 2514):
    
    # Assigning a Attribute to a Name (line 2514):
    # Getting the type of 'ax' (line 2514)
    ax_117579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2514, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2514)
    _hold_117580 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2514, 14), ax_117579, '_hold')
    # Assigning a type to the variable 'washold' (line 2514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2514, 4), 'washold', _hold_117580)
    
    # Type idiom detected: calculating its left and rigth part (line 2516)
    # Getting the type of 'hold' (line 2516)
    hold_117581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 4), 'hold')
    # Getting the type of 'None' (line 2516)
    None_117582 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2516, 19), 'None')
    
    (may_be_117583, more_types_in_union_117584) = may_not_be_none(hold_117581, None_117582)

    if may_be_117583:

        if more_types_in_union_117584:
            # Runtime conditional SSA (line 2516)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2517):
        
        # Assigning a Name to a Attribute (line 2517):
        # Getting the type of 'hold' (line 2517)
        hold_117585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 19), 'hold')
        # Getting the type of 'ax' (line 2517)
        ax_117586 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2517, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2517)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2517, 8), ax_117586, '_hold', hold_117585)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2518, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2518)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_117587 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2518, 8), 'matplotlib.cbook')

        if (type(import_117587) is not StypyTypeError):

            if (import_117587 != 'pyd_module'):
                __import__(import_117587)
                sys_modules_117588 = sys.modules[import_117587]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2518, 8), 'matplotlib.cbook', sys_modules_117588.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2518, 8), __file__, sys_modules_117588, sys_modules_117588.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2518, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2518)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2518, 8), 'matplotlib.cbook', import_117587)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2519)
        # Processing the call arguments (line 2519)
        unicode_117591 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2519, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2520)
        mplDeprecation_117592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2520, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2519)
        kwargs_117593 = {}
        # Getting the type of 'warnings' (line 2519)
        warnings_117589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2519, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2519)
        warn_117590 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2519, 8), warnings_117589, 'warn')
        # Calling warn(args, kwargs) (line 2519)
        warn_call_result_117594 = invoke(stypy.reporting.localization.Localization(__file__, 2519, 8), warn_117590, *[unicode_117591, mplDeprecation_117592], **kwargs_117593)
        

        if more_types_in_union_117584:
            # SSA join for if statement (line 2516)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2521)
    
    # Assigning a Call to a Name (line 2522):
    
    # Assigning a Call to a Name (line 2522):
    
    # Call to arrow(...): (line 2522)
    # Processing the call arguments (line 2522)
    # Getting the type of 'x' (line 2522)
    x_117597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 23), 'x', False)
    # Getting the type of 'y' (line 2522)
    y_117598 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 26), 'y', False)
    # Getting the type of 'dx' (line 2522)
    dx_117599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 29), 'dx', False)
    # Getting the type of 'dy' (line 2522)
    dy_117600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 33), 'dy', False)
    # Processing the call keyword arguments (line 2522)
    # Getting the type of 'kwargs' (line 2522)
    kwargs_117601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 39), 'kwargs', False)
    kwargs_117602 = {'kwargs_117601': kwargs_117601}
    # Getting the type of 'ax' (line 2522)
    ax_117595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2522, 14), 'ax', False)
    # Obtaining the member 'arrow' of a type (line 2522)
    arrow_117596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2522, 14), ax_117595, 'arrow')
    # Calling arrow(args, kwargs) (line 2522)
    arrow_call_result_117603 = invoke(stypy.reporting.localization.Localization(__file__, 2522, 14), arrow_117596, *[x_117597, y_117598, dx_117599, dy_117600], **kwargs_117602)
    
    # Assigning a type to the variable 'ret' (line 2522)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2522, 8), 'ret', arrow_call_result_117603)
    
    # finally branch of the try-finally block (line 2521)
    
    # Assigning a Name to a Attribute (line 2524):
    
    # Assigning a Name to a Attribute (line 2524):
    # Getting the type of 'washold' (line 2524)
    washold_117604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 19), 'washold')
    # Getting the type of 'ax' (line 2524)
    ax_117605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2524, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2524)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2524, 8), ax_117605, '_hold', washold_117604)
    
    # Getting the type of 'ret' (line 2526)
    ret_117606 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2526, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2526)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2526, 4), 'stypy_return_type', ret_117606)
    
    # ################# End of 'arrow(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'arrow' in the type store
    # Getting the type of 'stypy_return_type' (line 2509)
    stypy_return_type_117607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2509, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117607)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'arrow'
    return stypy_return_type_117607

# Assigning a type to the variable 'arrow' (line 2509)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2509, 0), 'arrow', arrow)

@norecursion
def axhline(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_117608 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2531, 14), 'int')
    int_117609 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2531, 22), 'int')
    int_117610 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2531, 30), 'int')
    # Getting the type of 'None' (line 2531)
    None_117611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2531, 38), 'None')
    defaults = [int_117608, int_117609, int_117610, None_117611]
    # Create a new context for function 'axhline'
    module_type_store = module_type_store.open_function_context('axhline', 2530, 0, False)
    
    # Passed parameters checking function
    axhline.stypy_localization = localization
    axhline.stypy_type_of_self = None
    axhline.stypy_type_store = module_type_store
    axhline.stypy_function_name = 'axhline'
    axhline.stypy_param_names_list = ['y', 'xmin', 'xmax', 'hold']
    axhline.stypy_varargs_param_name = None
    axhline.stypy_kwargs_param_name = 'kwargs'
    axhline.stypy_call_defaults = defaults
    axhline.stypy_call_varargs = varargs
    axhline.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'axhline', ['y', 'xmin', 'xmax', 'hold'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'axhline', localization, ['y', 'xmin', 'xmax', 'hold'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'axhline(...)' code ##################

    
    # Assigning a Call to a Name (line 2532):
    
    # Assigning a Call to a Name (line 2532):
    
    # Call to gca(...): (line 2532)
    # Processing the call keyword arguments (line 2532)
    kwargs_117613 = {}
    # Getting the type of 'gca' (line 2532)
    gca_117612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2532, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2532)
    gca_call_result_117614 = invoke(stypy.reporting.localization.Localization(__file__, 2532, 9), gca_117612, *[], **kwargs_117613)
    
    # Assigning a type to the variable 'ax' (line 2532)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2532, 4), 'ax', gca_call_result_117614)
    
    # Assigning a Attribute to a Name (line 2535):
    
    # Assigning a Attribute to a Name (line 2535):
    # Getting the type of 'ax' (line 2535)
    ax_117615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2535, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2535)
    _hold_117616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2535, 14), ax_117615, '_hold')
    # Assigning a type to the variable 'washold' (line 2535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2535, 4), 'washold', _hold_117616)
    
    # Type idiom detected: calculating its left and rigth part (line 2537)
    # Getting the type of 'hold' (line 2537)
    hold_117617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2537, 4), 'hold')
    # Getting the type of 'None' (line 2537)
    None_117618 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2537, 19), 'None')
    
    (may_be_117619, more_types_in_union_117620) = may_not_be_none(hold_117617, None_117618)

    if may_be_117619:

        if more_types_in_union_117620:
            # Runtime conditional SSA (line 2537)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2538):
        
        # Assigning a Name to a Attribute (line 2538):
        # Getting the type of 'hold' (line 2538)
        hold_117621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2538, 19), 'hold')
        # Getting the type of 'ax' (line 2538)
        ax_117622 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2538, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2538)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2538, 8), ax_117622, '_hold', hold_117621)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2539, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2539)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_117623 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2539, 8), 'matplotlib.cbook')

        if (type(import_117623) is not StypyTypeError):

            if (import_117623 != 'pyd_module'):
                __import__(import_117623)
                sys_modules_117624 = sys.modules[import_117623]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2539, 8), 'matplotlib.cbook', sys_modules_117624.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2539, 8), __file__, sys_modules_117624, sys_modules_117624.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2539, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2539)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2539, 8), 'matplotlib.cbook', import_117623)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2540)
        # Processing the call arguments (line 2540)
        unicode_117627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2540, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2541)
        mplDeprecation_117628 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2541, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2540)
        kwargs_117629 = {}
        # Getting the type of 'warnings' (line 2540)
        warnings_117625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2540, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2540)
        warn_117626 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2540, 8), warnings_117625, 'warn')
        # Calling warn(args, kwargs) (line 2540)
        warn_call_result_117630 = invoke(stypy.reporting.localization.Localization(__file__, 2540, 8), warn_117626, *[unicode_117627, mplDeprecation_117628], **kwargs_117629)
        

        if more_types_in_union_117620:
            # SSA join for if statement (line 2537)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2542)
    
    # Assigning a Call to a Name (line 2543):
    
    # Assigning a Call to a Name (line 2543):
    
    # Call to axhline(...): (line 2543)
    # Processing the call keyword arguments (line 2543)
    # Getting the type of 'y' (line 2543)
    y_117633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 27), 'y', False)
    keyword_117634 = y_117633
    # Getting the type of 'xmin' (line 2543)
    xmin_117635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 35), 'xmin', False)
    keyword_117636 = xmin_117635
    # Getting the type of 'xmax' (line 2543)
    xmax_117637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 46), 'xmax', False)
    keyword_117638 = xmax_117637
    # Getting the type of 'kwargs' (line 2543)
    kwargs_117639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 54), 'kwargs', False)
    kwargs_117640 = {'y': keyword_117634, 'xmin': keyword_117636, 'kwargs_117639': kwargs_117639, 'xmax': keyword_117638}
    # Getting the type of 'ax' (line 2543)
    ax_117631 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2543, 14), 'ax', False)
    # Obtaining the member 'axhline' of a type (line 2543)
    axhline_117632 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2543, 14), ax_117631, 'axhline')
    # Calling axhline(args, kwargs) (line 2543)
    axhline_call_result_117641 = invoke(stypy.reporting.localization.Localization(__file__, 2543, 14), axhline_117632, *[], **kwargs_117640)
    
    # Assigning a type to the variable 'ret' (line 2543)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2543, 8), 'ret', axhline_call_result_117641)
    
    # finally branch of the try-finally block (line 2542)
    
    # Assigning a Name to a Attribute (line 2545):
    
    # Assigning a Name to a Attribute (line 2545):
    # Getting the type of 'washold' (line 2545)
    washold_117642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 19), 'washold')
    # Getting the type of 'ax' (line 2545)
    ax_117643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2545, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2545)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2545, 8), ax_117643, '_hold', washold_117642)
    
    # Getting the type of 'ret' (line 2547)
    ret_117644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2547, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2547)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2547, 4), 'stypy_return_type', ret_117644)
    
    # ################# End of 'axhline(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'axhline' in the type store
    # Getting the type of 'stypy_return_type' (line 2530)
    stypy_return_type_117645 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2530, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117645)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'axhline'
    return stypy_return_type_117645

# Assigning a type to the variable 'axhline' (line 2530)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2530, 0), 'axhline', axhline)

@norecursion
def axhspan(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_117646 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2552, 29), 'int')
    int_117647 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2552, 37), 'int')
    # Getting the type of 'None' (line 2552)
    None_117648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2552, 45), 'None')
    defaults = [int_117646, int_117647, None_117648]
    # Create a new context for function 'axhspan'
    module_type_store = module_type_store.open_function_context('axhspan', 2551, 0, False)
    
    # Passed parameters checking function
    axhspan.stypy_localization = localization
    axhspan.stypy_type_of_self = None
    axhspan.stypy_type_store = module_type_store
    axhspan.stypy_function_name = 'axhspan'
    axhspan.stypy_param_names_list = ['ymin', 'ymax', 'xmin', 'xmax', 'hold']
    axhspan.stypy_varargs_param_name = None
    axhspan.stypy_kwargs_param_name = 'kwargs'
    axhspan.stypy_call_defaults = defaults
    axhspan.stypy_call_varargs = varargs
    axhspan.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'axhspan', ['ymin', 'ymax', 'xmin', 'xmax', 'hold'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'axhspan', localization, ['ymin', 'ymax', 'xmin', 'xmax', 'hold'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'axhspan(...)' code ##################

    
    # Assigning a Call to a Name (line 2553):
    
    # Assigning a Call to a Name (line 2553):
    
    # Call to gca(...): (line 2553)
    # Processing the call keyword arguments (line 2553)
    kwargs_117650 = {}
    # Getting the type of 'gca' (line 2553)
    gca_117649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2553, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2553)
    gca_call_result_117651 = invoke(stypy.reporting.localization.Localization(__file__, 2553, 9), gca_117649, *[], **kwargs_117650)
    
    # Assigning a type to the variable 'ax' (line 2553)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2553, 4), 'ax', gca_call_result_117651)
    
    # Assigning a Attribute to a Name (line 2556):
    
    # Assigning a Attribute to a Name (line 2556):
    # Getting the type of 'ax' (line 2556)
    ax_117652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2556, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2556)
    _hold_117653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2556, 14), ax_117652, '_hold')
    # Assigning a type to the variable 'washold' (line 2556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2556, 4), 'washold', _hold_117653)
    
    # Type idiom detected: calculating its left and rigth part (line 2558)
    # Getting the type of 'hold' (line 2558)
    hold_117654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 4), 'hold')
    # Getting the type of 'None' (line 2558)
    None_117655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2558, 19), 'None')
    
    (may_be_117656, more_types_in_union_117657) = may_not_be_none(hold_117654, None_117655)

    if may_be_117656:

        if more_types_in_union_117657:
            # Runtime conditional SSA (line 2558)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2559):
        
        # Assigning a Name to a Attribute (line 2559):
        # Getting the type of 'hold' (line 2559)
        hold_117658 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 19), 'hold')
        # Getting the type of 'ax' (line 2559)
        ax_117659 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2559, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2559)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2559, 8), ax_117659, '_hold', hold_117658)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2560, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2560)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_117660 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2560, 8), 'matplotlib.cbook')

        if (type(import_117660) is not StypyTypeError):

            if (import_117660 != 'pyd_module'):
                __import__(import_117660)
                sys_modules_117661 = sys.modules[import_117660]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2560, 8), 'matplotlib.cbook', sys_modules_117661.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2560, 8), __file__, sys_modules_117661, sys_modules_117661.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2560, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2560)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2560, 8), 'matplotlib.cbook', import_117660)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2561)
        # Processing the call arguments (line 2561)
        unicode_117664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2561, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2562)
        mplDeprecation_117665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2562, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2561)
        kwargs_117666 = {}
        # Getting the type of 'warnings' (line 2561)
        warnings_117662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2561, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2561)
        warn_117663 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2561, 8), warnings_117662, 'warn')
        # Calling warn(args, kwargs) (line 2561)
        warn_call_result_117667 = invoke(stypy.reporting.localization.Localization(__file__, 2561, 8), warn_117663, *[unicode_117664, mplDeprecation_117665], **kwargs_117666)
        

        if more_types_in_union_117657:
            # SSA join for if statement (line 2558)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2563)
    
    # Assigning a Call to a Name (line 2564):
    
    # Assigning a Call to a Name (line 2564):
    
    # Call to axhspan(...): (line 2564)
    # Processing the call arguments (line 2564)
    # Getting the type of 'ymin' (line 2564)
    ymin_117670 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 25), 'ymin', False)
    # Getting the type of 'ymax' (line 2564)
    ymax_117671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 31), 'ymax', False)
    # Processing the call keyword arguments (line 2564)
    # Getting the type of 'xmin' (line 2564)
    xmin_117672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 42), 'xmin', False)
    keyword_117673 = xmin_117672
    # Getting the type of 'xmax' (line 2564)
    xmax_117674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 53), 'xmax', False)
    keyword_117675 = xmax_117674
    # Getting the type of 'kwargs' (line 2564)
    kwargs_117676 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 61), 'kwargs', False)
    kwargs_117677 = {'xmin': keyword_117673, 'xmax': keyword_117675, 'kwargs_117676': kwargs_117676}
    # Getting the type of 'ax' (line 2564)
    ax_117668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2564, 14), 'ax', False)
    # Obtaining the member 'axhspan' of a type (line 2564)
    axhspan_117669 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2564, 14), ax_117668, 'axhspan')
    # Calling axhspan(args, kwargs) (line 2564)
    axhspan_call_result_117678 = invoke(stypy.reporting.localization.Localization(__file__, 2564, 14), axhspan_117669, *[ymin_117670, ymax_117671], **kwargs_117677)
    
    # Assigning a type to the variable 'ret' (line 2564)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2564, 8), 'ret', axhspan_call_result_117678)
    
    # finally branch of the try-finally block (line 2563)
    
    # Assigning a Name to a Attribute (line 2566):
    
    # Assigning a Name to a Attribute (line 2566):
    # Getting the type of 'washold' (line 2566)
    washold_117679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 19), 'washold')
    # Getting the type of 'ax' (line 2566)
    ax_117680 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2566, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2566)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2566, 8), ax_117680, '_hold', washold_117679)
    
    # Getting the type of 'ret' (line 2568)
    ret_117681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2568, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2568)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2568, 4), 'stypy_return_type', ret_117681)
    
    # ################# End of 'axhspan(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'axhspan' in the type store
    # Getting the type of 'stypy_return_type' (line 2551)
    stypy_return_type_117682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2551, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117682)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'axhspan'
    return stypy_return_type_117682

# Assigning a type to the variable 'axhspan' (line 2551)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2551, 0), 'axhspan', axhspan)

@norecursion
def axvline(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_117683 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2573, 14), 'int')
    int_117684 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2573, 22), 'int')
    int_117685 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2573, 30), 'int')
    # Getting the type of 'None' (line 2573)
    None_117686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2573, 38), 'None')
    defaults = [int_117683, int_117684, int_117685, None_117686]
    # Create a new context for function 'axvline'
    module_type_store = module_type_store.open_function_context('axvline', 2572, 0, False)
    
    # Passed parameters checking function
    axvline.stypy_localization = localization
    axvline.stypy_type_of_self = None
    axvline.stypy_type_store = module_type_store
    axvline.stypy_function_name = 'axvline'
    axvline.stypy_param_names_list = ['x', 'ymin', 'ymax', 'hold']
    axvline.stypy_varargs_param_name = None
    axvline.stypy_kwargs_param_name = 'kwargs'
    axvline.stypy_call_defaults = defaults
    axvline.stypy_call_varargs = varargs
    axvline.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'axvline', ['x', 'ymin', 'ymax', 'hold'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'axvline', localization, ['x', 'ymin', 'ymax', 'hold'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'axvline(...)' code ##################

    
    # Assigning a Call to a Name (line 2574):
    
    # Assigning a Call to a Name (line 2574):
    
    # Call to gca(...): (line 2574)
    # Processing the call keyword arguments (line 2574)
    kwargs_117688 = {}
    # Getting the type of 'gca' (line 2574)
    gca_117687 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2574, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2574)
    gca_call_result_117689 = invoke(stypy.reporting.localization.Localization(__file__, 2574, 9), gca_117687, *[], **kwargs_117688)
    
    # Assigning a type to the variable 'ax' (line 2574)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2574, 4), 'ax', gca_call_result_117689)
    
    # Assigning a Attribute to a Name (line 2577):
    
    # Assigning a Attribute to a Name (line 2577):
    # Getting the type of 'ax' (line 2577)
    ax_117690 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2577, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2577)
    _hold_117691 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2577, 14), ax_117690, '_hold')
    # Assigning a type to the variable 'washold' (line 2577)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2577, 4), 'washold', _hold_117691)
    
    # Type idiom detected: calculating its left and rigth part (line 2579)
    # Getting the type of 'hold' (line 2579)
    hold_117692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 4), 'hold')
    # Getting the type of 'None' (line 2579)
    None_117693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2579, 19), 'None')
    
    (may_be_117694, more_types_in_union_117695) = may_not_be_none(hold_117692, None_117693)

    if may_be_117694:

        if more_types_in_union_117695:
            # Runtime conditional SSA (line 2579)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2580):
        
        # Assigning a Name to a Attribute (line 2580):
        # Getting the type of 'hold' (line 2580)
        hold_117696 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 19), 'hold')
        # Getting the type of 'ax' (line 2580)
        ax_117697 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2580, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2580)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2580, 8), ax_117697, '_hold', hold_117696)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2581, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2581)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_117698 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2581, 8), 'matplotlib.cbook')

        if (type(import_117698) is not StypyTypeError):

            if (import_117698 != 'pyd_module'):
                __import__(import_117698)
                sys_modules_117699 = sys.modules[import_117698]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2581, 8), 'matplotlib.cbook', sys_modules_117699.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2581, 8), __file__, sys_modules_117699, sys_modules_117699.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2581, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2581)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2581, 8), 'matplotlib.cbook', import_117698)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2582)
        # Processing the call arguments (line 2582)
        unicode_117702 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2582, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2583)
        mplDeprecation_117703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2583, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2582)
        kwargs_117704 = {}
        # Getting the type of 'warnings' (line 2582)
        warnings_117700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2582, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2582)
        warn_117701 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2582, 8), warnings_117700, 'warn')
        # Calling warn(args, kwargs) (line 2582)
        warn_call_result_117705 = invoke(stypy.reporting.localization.Localization(__file__, 2582, 8), warn_117701, *[unicode_117702, mplDeprecation_117703], **kwargs_117704)
        

        if more_types_in_union_117695:
            # SSA join for if statement (line 2579)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2584)
    
    # Assigning a Call to a Name (line 2585):
    
    # Assigning a Call to a Name (line 2585):
    
    # Call to axvline(...): (line 2585)
    # Processing the call keyword arguments (line 2585)
    # Getting the type of 'x' (line 2585)
    x_117708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 27), 'x', False)
    keyword_117709 = x_117708
    # Getting the type of 'ymin' (line 2585)
    ymin_117710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 35), 'ymin', False)
    keyword_117711 = ymin_117710
    # Getting the type of 'ymax' (line 2585)
    ymax_117712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 46), 'ymax', False)
    keyword_117713 = ymax_117712
    # Getting the type of 'kwargs' (line 2585)
    kwargs_117714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 54), 'kwargs', False)
    kwargs_117715 = {'x': keyword_117709, 'kwargs_117714': kwargs_117714, 'ymin': keyword_117711, 'ymax': keyword_117713}
    # Getting the type of 'ax' (line 2585)
    ax_117706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2585, 14), 'ax', False)
    # Obtaining the member 'axvline' of a type (line 2585)
    axvline_117707 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2585, 14), ax_117706, 'axvline')
    # Calling axvline(args, kwargs) (line 2585)
    axvline_call_result_117716 = invoke(stypy.reporting.localization.Localization(__file__, 2585, 14), axvline_117707, *[], **kwargs_117715)
    
    # Assigning a type to the variable 'ret' (line 2585)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2585, 8), 'ret', axvline_call_result_117716)
    
    # finally branch of the try-finally block (line 2584)
    
    # Assigning a Name to a Attribute (line 2587):
    
    # Assigning a Name to a Attribute (line 2587):
    # Getting the type of 'washold' (line 2587)
    washold_117717 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 19), 'washold')
    # Getting the type of 'ax' (line 2587)
    ax_117718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2587, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2587)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2587, 8), ax_117718, '_hold', washold_117717)
    
    # Getting the type of 'ret' (line 2589)
    ret_117719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2589, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2589)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2589, 4), 'stypy_return_type', ret_117719)
    
    # ################# End of 'axvline(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'axvline' in the type store
    # Getting the type of 'stypy_return_type' (line 2572)
    stypy_return_type_117720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2572, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117720)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'axvline'
    return stypy_return_type_117720

# Assigning a type to the variable 'axvline' (line 2572)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2572, 0), 'axvline', axvline)

@norecursion
def axvspan(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_117721 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2594, 29), 'int')
    int_117722 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2594, 37), 'int')
    # Getting the type of 'None' (line 2594)
    None_117723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2594, 45), 'None')
    defaults = [int_117721, int_117722, None_117723]
    # Create a new context for function 'axvspan'
    module_type_store = module_type_store.open_function_context('axvspan', 2593, 0, False)
    
    # Passed parameters checking function
    axvspan.stypy_localization = localization
    axvspan.stypy_type_of_self = None
    axvspan.stypy_type_store = module_type_store
    axvspan.stypy_function_name = 'axvspan'
    axvspan.stypy_param_names_list = ['xmin', 'xmax', 'ymin', 'ymax', 'hold']
    axvspan.stypy_varargs_param_name = None
    axvspan.stypy_kwargs_param_name = 'kwargs'
    axvspan.stypy_call_defaults = defaults
    axvspan.stypy_call_varargs = varargs
    axvspan.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'axvspan', ['xmin', 'xmax', 'ymin', 'ymax', 'hold'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'axvspan', localization, ['xmin', 'xmax', 'ymin', 'ymax', 'hold'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'axvspan(...)' code ##################

    
    # Assigning a Call to a Name (line 2595):
    
    # Assigning a Call to a Name (line 2595):
    
    # Call to gca(...): (line 2595)
    # Processing the call keyword arguments (line 2595)
    kwargs_117725 = {}
    # Getting the type of 'gca' (line 2595)
    gca_117724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2595, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2595)
    gca_call_result_117726 = invoke(stypy.reporting.localization.Localization(__file__, 2595, 9), gca_117724, *[], **kwargs_117725)
    
    # Assigning a type to the variable 'ax' (line 2595)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2595, 4), 'ax', gca_call_result_117726)
    
    # Assigning a Attribute to a Name (line 2598):
    
    # Assigning a Attribute to a Name (line 2598):
    # Getting the type of 'ax' (line 2598)
    ax_117727 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2598, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2598)
    _hold_117728 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2598, 14), ax_117727, '_hold')
    # Assigning a type to the variable 'washold' (line 2598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2598, 4), 'washold', _hold_117728)
    
    # Type idiom detected: calculating its left and rigth part (line 2600)
    # Getting the type of 'hold' (line 2600)
    hold_117729 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 4), 'hold')
    # Getting the type of 'None' (line 2600)
    None_117730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2600, 19), 'None')
    
    (may_be_117731, more_types_in_union_117732) = may_not_be_none(hold_117729, None_117730)

    if may_be_117731:

        if more_types_in_union_117732:
            # Runtime conditional SSA (line 2600)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2601):
        
        # Assigning a Name to a Attribute (line 2601):
        # Getting the type of 'hold' (line 2601)
        hold_117733 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 19), 'hold')
        # Getting the type of 'ax' (line 2601)
        ax_117734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2601, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2601)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2601, 8), ax_117734, '_hold', hold_117733)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2602, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2602)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_117735 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2602, 8), 'matplotlib.cbook')

        if (type(import_117735) is not StypyTypeError):

            if (import_117735 != 'pyd_module'):
                __import__(import_117735)
                sys_modules_117736 = sys.modules[import_117735]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2602, 8), 'matplotlib.cbook', sys_modules_117736.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2602, 8), __file__, sys_modules_117736, sys_modules_117736.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2602, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2602)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2602, 8), 'matplotlib.cbook', import_117735)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2603)
        # Processing the call arguments (line 2603)
        unicode_117739 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2603, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2604)
        mplDeprecation_117740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2604, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2603)
        kwargs_117741 = {}
        # Getting the type of 'warnings' (line 2603)
        warnings_117737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2603, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2603)
        warn_117738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2603, 8), warnings_117737, 'warn')
        # Calling warn(args, kwargs) (line 2603)
        warn_call_result_117742 = invoke(stypy.reporting.localization.Localization(__file__, 2603, 8), warn_117738, *[unicode_117739, mplDeprecation_117740], **kwargs_117741)
        

        if more_types_in_union_117732:
            # SSA join for if statement (line 2600)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2605)
    
    # Assigning a Call to a Name (line 2606):
    
    # Assigning a Call to a Name (line 2606):
    
    # Call to axvspan(...): (line 2606)
    # Processing the call arguments (line 2606)
    # Getting the type of 'xmin' (line 2606)
    xmin_117745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 25), 'xmin', False)
    # Getting the type of 'xmax' (line 2606)
    xmax_117746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 31), 'xmax', False)
    # Processing the call keyword arguments (line 2606)
    # Getting the type of 'ymin' (line 2606)
    ymin_117747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 42), 'ymin', False)
    keyword_117748 = ymin_117747
    # Getting the type of 'ymax' (line 2606)
    ymax_117749 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 53), 'ymax', False)
    keyword_117750 = ymax_117749
    # Getting the type of 'kwargs' (line 2606)
    kwargs_117751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 61), 'kwargs', False)
    kwargs_117752 = {'ymin': keyword_117748, 'ymax': keyword_117750, 'kwargs_117751': kwargs_117751}
    # Getting the type of 'ax' (line 2606)
    ax_117743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2606, 14), 'ax', False)
    # Obtaining the member 'axvspan' of a type (line 2606)
    axvspan_117744 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2606, 14), ax_117743, 'axvspan')
    # Calling axvspan(args, kwargs) (line 2606)
    axvspan_call_result_117753 = invoke(stypy.reporting.localization.Localization(__file__, 2606, 14), axvspan_117744, *[xmin_117745, xmax_117746], **kwargs_117752)
    
    # Assigning a type to the variable 'ret' (line 2606)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2606, 8), 'ret', axvspan_call_result_117753)
    
    # finally branch of the try-finally block (line 2605)
    
    # Assigning a Name to a Attribute (line 2608):
    
    # Assigning a Name to a Attribute (line 2608):
    # Getting the type of 'washold' (line 2608)
    washold_117754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 19), 'washold')
    # Getting the type of 'ax' (line 2608)
    ax_117755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2608, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2608)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2608, 8), ax_117755, '_hold', washold_117754)
    
    # Getting the type of 'ret' (line 2610)
    ret_117756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2610, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2610)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2610, 4), 'stypy_return_type', ret_117756)
    
    # ################# End of 'axvspan(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'axvspan' in the type store
    # Getting the type of 'stypy_return_type' (line 2593)
    stypy_return_type_117757 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2593, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117757)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'axvspan'
    return stypy_return_type_117757

# Assigning a type to the variable 'axvspan' (line 2593)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2593, 0), 'axvspan', axvspan)

@norecursion
def bar(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'bar'
    module_type_store = module_type_store.open_function_context('bar', 2614, 0, False)
    
    # Passed parameters checking function
    bar.stypy_localization = localization
    bar.stypy_type_of_self = None
    bar.stypy_type_store = module_type_store
    bar.stypy_function_name = 'bar'
    bar.stypy_param_names_list = []
    bar.stypy_varargs_param_name = 'args'
    bar.stypy_kwargs_param_name = 'kwargs'
    bar.stypy_call_defaults = defaults
    bar.stypy_call_varargs = varargs
    bar.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bar', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bar', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bar(...)' code ##################

    
    # Assigning a Call to a Name (line 2616):
    
    # Assigning a Call to a Name (line 2616):
    
    # Call to gca(...): (line 2616)
    # Processing the call keyword arguments (line 2616)
    kwargs_117759 = {}
    # Getting the type of 'gca' (line 2616)
    gca_117758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2616, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2616)
    gca_call_result_117760 = invoke(stypy.reporting.localization.Localization(__file__, 2616, 9), gca_117758, *[], **kwargs_117759)
    
    # Assigning a type to the variable 'ax' (line 2616)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2616, 4), 'ax', gca_call_result_117760)
    
    # Assigning a Attribute to a Name (line 2619):
    
    # Assigning a Attribute to a Name (line 2619):
    # Getting the type of 'ax' (line 2619)
    ax_117761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2619, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2619)
    _hold_117762 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2619, 14), ax_117761, '_hold')
    # Assigning a type to the variable 'washold' (line 2619)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2619, 4), 'washold', _hold_117762)
    
    # Assigning a Call to a Name (line 2620):
    
    # Assigning a Call to a Name (line 2620):
    
    # Call to pop(...): (line 2620)
    # Processing the call arguments (line 2620)
    unicode_117765 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2620, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 2620)
    None_117766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 30), 'None', False)
    # Processing the call keyword arguments (line 2620)
    kwargs_117767 = {}
    # Getting the type of 'kwargs' (line 2620)
    kwargs_117763 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2620, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 2620)
    pop_117764 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2620, 11), kwargs_117763, 'pop')
    # Calling pop(args, kwargs) (line 2620)
    pop_call_result_117768 = invoke(stypy.reporting.localization.Localization(__file__, 2620, 11), pop_117764, *[unicode_117765, None_117766], **kwargs_117767)
    
    # Assigning a type to the variable 'hold' (line 2620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2620, 4), 'hold', pop_call_result_117768)
    
    # Type idiom detected: calculating its left and rigth part (line 2621)
    # Getting the type of 'hold' (line 2621)
    hold_117769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 4), 'hold')
    # Getting the type of 'None' (line 2621)
    None_117770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2621, 19), 'None')
    
    (may_be_117771, more_types_in_union_117772) = may_not_be_none(hold_117769, None_117770)

    if may_be_117771:

        if more_types_in_union_117772:
            # Runtime conditional SSA (line 2621)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2622):
        
        # Assigning a Name to a Attribute (line 2622):
        # Getting the type of 'hold' (line 2622)
        hold_117773 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 19), 'hold')
        # Getting the type of 'ax' (line 2622)
        ax_117774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2622, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2622)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2622, 8), ax_117774, '_hold', hold_117773)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2623, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2623)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_117775 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2623, 8), 'matplotlib.cbook')

        if (type(import_117775) is not StypyTypeError):

            if (import_117775 != 'pyd_module'):
                __import__(import_117775)
                sys_modules_117776 = sys.modules[import_117775]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2623, 8), 'matplotlib.cbook', sys_modules_117776.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2623, 8), __file__, sys_modules_117776, sys_modules_117776.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2623, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2623)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2623, 8), 'matplotlib.cbook', import_117775)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2624)
        # Processing the call arguments (line 2624)
        unicode_117779 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2624, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2625)
        mplDeprecation_117780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2625, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2624)
        kwargs_117781 = {}
        # Getting the type of 'warnings' (line 2624)
        warnings_117777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2624, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2624)
        warn_117778 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2624, 8), warnings_117777, 'warn')
        # Calling warn(args, kwargs) (line 2624)
        warn_call_result_117782 = invoke(stypy.reporting.localization.Localization(__file__, 2624, 8), warn_117778, *[unicode_117779, mplDeprecation_117780], **kwargs_117781)
        

        if more_types_in_union_117772:
            # SSA join for if statement (line 2621)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2626)
    
    # Assigning a Call to a Name (line 2627):
    
    # Assigning a Call to a Name (line 2627):
    
    # Call to bar(...): (line 2627)
    # Getting the type of 'args' (line 2627)
    args_117785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2627, 22), 'args', False)
    # Processing the call keyword arguments (line 2627)
    # Getting the type of 'kwargs' (line 2627)
    kwargs_117786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2627, 30), 'kwargs', False)
    kwargs_117787 = {'kwargs_117786': kwargs_117786}
    # Getting the type of 'ax' (line 2627)
    ax_117783 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2627, 14), 'ax', False)
    # Obtaining the member 'bar' of a type (line 2627)
    bar_117784 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2627, 14), ax_117783, 'bar')
    # Calling bar(args, kwargs) (line 2627)
    bar_call_result_117788 = invoke(stypy.reporting.localization.Localization(__file__, 2627, 14), bar_117784, *[args_117785], **kwargs_117787)
    
    # Assigning a type to the variable 'ret' (line 2627)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2627, 8), 'ret', bar_call_result_117788)
    
    # finally branch of the try-finally block (line 2626)
    
    # Assigning a Name to a Attribute (line 2629):
    
    # Assigning a Name to a Attribute (line 2629):
    # Getting the type of 'washold' (line 2629)
    washold_117789 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 19), 'washold')
    # Getting the type of 'ax' (line 2629)
    ax_117790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2629, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2629)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2629, 8), ax_117790, '_hold', washold_117789)
    
    # Getting the type of 'ret' (line 2631)
    ret_117791 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2631, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2631)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2631, 4), 'stypy_return_type', ret_117791)
    
    # ################# End of 'bar(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bar' in the type store
    # Getting the type of 'stypy_return_type' (line 2614)
    stypy_return_type_117792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2614, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117792)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bar'
    return stypy_return_type_117792

# Assigning a type to the variable 'bar' (line 2614)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2614, 0), 'bar', bar)

@norecursion
def barh(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'barh'
    module_type_store = module_type_store.open_function_context('barh', 2635, 0, False)
    
    # Passed parameters checking function
    barh.stypy_localization = localization
    barh.stypy_type_of_self = None
    barh.stypy_type_store = module_type_store
    barh.stypy_function_name = 'barh'
    barh.stypy_param_names_list = []
    barh.stypy_varargs_param_name = 'args'
    barh.stypy_kwargs_param_name = 'kwargs'
    barh.stypy_call_defaults = defaults
    barh.stypy_call_varargs = varargs
    barh.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'barh', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'barh', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'barh(...)' code ##################

    
    # Assigning a Call to a Name (line 2637):
    
    # Assigning a Call to a Name (line 2637):
    
    # Call to gca(...): (line 2637)
    # Processing the call keyword arguments (line 2637)
    kwargs_117794 = {}
    # Getting the type of 'gca' (line 2637)
    gca_117793 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2637, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2637)
    gca_call_result_117795 = invoke(stypy.reporting.localization.Localization(__file__, 2637, 9), gca_117793, *[], **kwargs_117794)
    
    # Assigning a type to the variable 'ax' (line 2637)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2637, 4), 'ax', gca_call_result_117795)
    
    # Assigning a Attribute to a Name (line 2640):
    
    # Assigning a Attribute to a Name (line 2640):
    # Getting the type of 'ax' (line 2640)
    ax_117796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2640, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2640)
    _hold_117797 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2640, 14), ax_117796, '_hold')
    # Assigning a type to the variable 'washold' (line 2640)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2640, 4), 'washold', _hold_117797)
    
    # Assigning a Call to a Name (line 2641):
    
    # Assigning a Call to a Name (line 2641):
    
    # Call to pop(...): (line 2641)
    # Processing the call arguments (line 2641)
    unicode_117800 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2641, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 2641)
    None_117801 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 30), 'None', False)
    # Processing the call keyword arguments (line 2641)
    kwargs_117802 = {}
    # Getting the type of 'kwargs' (line 2641)
    kwargs_117798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2641, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 2641)
    pop_117799 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2641, 11), kwargs_117798, 'pop')
    # Calling pop(args, kwargs) (line 2641)
    pop_call_result_117803 = invoke(stypy.reporting.localization.Localization(__file__, 2641, 11), pop_117799, *[unicode_117800, None_117801], **kwargs_117802)
    
    # Assigning a type to the variable 'hold' (line 2641)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2641, 4), 'hold', pop_call_result_117803)
    
    # Type idiom detected: calculating its left and rigth part (line 2642)
    # Getting the type of 'hold' (line 2642)
    hold_117804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 4), 'hold')
    # Getting the type of 'None' (line 2642)
    None_117805 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2642, 19), 'None')
    
    (may_be_117806, more_types_in_union_117807) = may_not_be_none(hold_117804, None_117805)

    if may_be_117806:

        if more_types_in_union_117807:
            # Runtime conditional SSA (line 2642)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2643):
        
        # Assigning a Name to a Attribute (line 2643):
        # Getting the type of 'hold' (line 2643)
        hold_117808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 19), 'hold')
        # Getting the type of 'ax' (line 2643)
        ax_117809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2643, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2643)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2643, 8), ax_117809, '_hold', hold_117808)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2644, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2644)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_117810 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2644, 8), 'matplotlib.cbook')

        if (type(import_117810) is not StypyTypeError):

            if (import_117810 != 'pyd_module'):
                __import__(import_117810)
                sys_modules_117811 = sys.modules[import_117810]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2644, 8), 'matplotlib.cbook', sys_modules_117811.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2644, 8), __file__, sys_modules_117811, sys_modules_117811.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2644, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2644)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2644, 8), 'matplotlib.cbook', import_117810)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2645)
        # Processing the call arguments (line 2645)
        unicode_117814 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2645, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2646)
        mplDeprecation_117815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2646, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2645)
        kwargs_117816 = {}
        # Getting the type of 'warnings' (line 2645)
        warnings_117812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2645, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2645)
        warn_117813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2645, 8), warnings_117812, 'warn')
        # Calling warn(args, kwargs) (line 2645)
        warn_call_result_117817 = invoke(stypy.reporting.localization.Localization(__file__, 2645, 8), warn_117813, *[unicode_117814, mplDeprecation_117815], **kwargs_117816)
        

        if more_types_in_union_117807:
            # SSA join for if statement (line 2642)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2647)
    
    # Assigning a Call to a Name (line 2648):
    
    # Assigning a Call to a Name (line 2648):
    
    # Call to barh(...): (line 2648)
    # Getting the type of 'args' (line 2648)
    args_117820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 23), 'args', False)
    # Processing the call keyword arguments (line 2648)
    # Getting the type of 'kwargs' (line 2648)
    kwargs_117821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 31), 'kwargs', False)
    kwargs_117822 = {'kwargs_117821': kwargs_117821}
    # Getting the type of 'ax' (line 2648)
    ax_117818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2648, 14), 'ax', False)
    # Obtaining the member 'barh' of a type (line 2648)
    barh_117819 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2648, 14), ax_117818, 'barh')
    # Calling barh(args, kwargs) (line 2648)
    barh_call_result_117823 = invoke(stypy.reporting.localization.Localization(__file__, 2648, 14), barh_117819, *[args_117820], **kwargs_117822)
    
    # Assigning a type to the variable 'ret' (line 2648)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2648, 8), 'ret', barh_call_result_117823)
    
    # finally branch of the try-finally block (line 2647)
    
    # Assigning a Name to a Attribute (line 2650):
    
    # Assigning a Name to a Attribute (line 2650):
    # Getting the type of 'washold' (line 2650)
    washold_117824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 19), 'washold')
    # Getting the type of 'ax' (line 2650)
    ax_117825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2650, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2650)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2650, 8), ax_117825, '_hold', washold_117824)
    
    # Getting the type of 'ret' (line 2652)
    ret_117826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2652, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2652)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2652, 4), 'stypy_return_type', ret_117826)
    
    # ################# End of 'barh(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'barh' in the type store
    # Getting the type of 'stypy_return_type' (line 2635)
    stypy_return_type_117827 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2635, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117827)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'barh'
    return stypy_return_type_117827

# Assigning a type to the variable 'barh' (line 2635)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2635, 0), 'barh', barh)

@norecursion
def broken_barh(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2657)
    None_117828 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2657, 38), 'None')
    # Getting the type of 'None' (line 2657)
    None_117829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2657, 49), 'None')
    defaults = [None_117828, None_117829]
    # Create a new context for function 'broken_barh'
    module_type_store = module_type_store.open_function_context('broken_barh', 2656, 0, False)
    
    # Passed parameters checking function
    broken_barh.stypy_localization = localization
    broken_barh.stypy_type_of_self = None
    broken_barh.stypy_type_store = module_type_store
    broken_barh.stypy_function_name = 'broken_barh'
    broken_barh.stypy_param_names_list = ['xranges', 'yrange', 'hold', 'data']
    broken_barh.stypy_varargs_param_name = None
    broken_barh.stypy_kwargs_param_name = 'kwargs'
    broken_barh.stypy_call_defaults = defaults
    broken_barh.stypy_call_varargs = varargs
    broken_barh.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'broken_barh', ['xranges', 'yrange', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'broken_barh', localization, ['xranges', 'yrange', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'broken_barh(...)' code ##################

    
    # Assigning a Call to a Name (line 2658):
    
    # Assigning a Call to a Name (line 2658):
    
    # Call to gca(...): (line 2658)
    # Processing the call keyword arguments (line 2658)
    kwargs_117831 = {}
    # Getting the type of 'gca' (line 2658)
    gca_117830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2658, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2658)
    gca_call_result_117832 = invoke(stypy.reporting.localization.Localization(__file__, 2658, 9), gca_117830, *[], **kwargs_117831)
    
    # Assigning a type to the variable 'ax' (line 2658)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2658, 4), 'ax', gca_call_result_117832)
    
    # Assigning a Attribute to a Name (line 2661):
    
    # Assigning a Attribute to a Name (line 2661):
    # Getting the type of 'ax' (line 2661)
    ax_117833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2661, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2661)
    _hold_117834 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2661, 14), ax_117833, '_hold')
    # Assigning a type to the variable 'washold' (line 2661)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2661, 4), 'washold', _hold_117834)
    
    # Type idiom detected: calculating its left and rigth part (line 2663)
    # Getting the type of 'hold' (line 2663)
    hold_117835 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 4), 'hold')
    # Getting the type of 'None' (line 2663)
    None_117836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2663, 19), 'None')
    
    (may_be_117837, more_types_in_union_117838) = may_not_be_none(hold_117835, None_117836)

    if may_be_117837:

        if more_types_in_union_117838:
            # Runtime conditional SSA (line 2663)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2664):
        
        # Assigning a Name to a Attribute (line 2664):
        # Getting the type of 'hold' (line 2664)
        hold_117839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2664, 19), 'hold')
        # Getting the type of 'ax' (line 2664)
        ax_117840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2664, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2664)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2664, 8), ax_117840, '_hold', hold_117839)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2665, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2665)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_117841 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2665, 8), 'matplotlib.cbook')

        if (type(import_117841) is not StypyTypeError):

            if (import_117841 != 'pyd_module'):
                __import__(import_117841)
                sys_modules_117842 = sys.modules[import_117841]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2665, 8), 'matplotlib.cbook', sys_modules_117842.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2665, 8), __file__, sys_modules_117842, sys_modules_117842.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2665, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2665)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2665, 8), 'matplotlib.cbook', import_117841)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2666)
        # Processing the call arguments (line 2666)
        unicode_117845 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2666, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2667)
        mplDeprecation_117846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2667, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2666)
        kwargs_117847 = {}
        # Getting the type of 'warnings' (line 2666)
        warnings_117843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2666, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2666)
        warn_117844 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2666, 8), warnings_117843, 'warn')
        # Calling warn(args, kwargs) (line 2666)
        warn_call_result_117848 = invoke(stypy.reporting.localization.Localization(__file__, 2666, 8), warn_117844, *[unicode_117845, mplDeprecation_117846], **kwargs_117847)
        

        if more_types_in_union_117838:
            # SSA join for if statement (line 2663)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2668)
    
    # Assigning a Call to a Name (line 2669):
    
    # Assigning a Call to a Name (line 2669):
    
    # Call to broken_barh(...): (line 2669)
    # Processing the call arguments (line 2669)
    # Getting the type of 'xranges' (line 2669)
    xranges_117851 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 29), 'xranges', False)
    # Getting the type of 'yrange' (line 2669)
    yrange_117852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 38), 'yrange', False)
    # Processing the call keyword arguments (line 2669)
    # Getting the type of 'data' (line 2669)
    data_117853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 51), 'data', False)
    keyword_117854 = data_117853
    # Getting the type of 'kwargs' (line 2669)
    kwargs_117855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 59), 'kwargs', False)
    kwargs_117856 = {'kwargs_117855': kwargs_117855, 'data': keyword_117854}
    # Getting the type of 'ax' (line 2669)
    ax_117849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2669, 14), 'ax', False)
    # Obtaining the member 'broken_barh' of a type (line 2669)
    broken_barh_117850 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2669, 14), ax_117849, 'broken_barh')
    # Calling broken_barh(args, kwargs) (line 2669)
    broken_barh_call_result_117857 = invoke(stypy.reporting.localization.Localization(__file__, 2669, 14), broken_barh_117850, *[xranges_117851, yrange_117852], **kwargs_117856)
    
    # Assigning a type to the variable 'ret' (line 2669)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2669, 8), 'ret', broken_barh_call_result_117857)
    
    # finally branch of the try-finally block (line 2668)
    
    # Assigning a Name to a Attribute (line 2671):
    
    # Assigning a Name to a Attribute (line 2671):
    # Getting the type of 'washold' (line 2671)
    washold_117858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2671, 19), 'washold')
    # Getting the type of 'ax' (line 2671)
    ax_117859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2671, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2671)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2671, 8), ax_117859, '_hold', washold_117858)
    
    # Getting the type of 'ret' (line 2673)
    ret_117860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2673, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2673)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2673, 4), 'stypy_return_type', ret_117860)
    
    # ################# End of 'broken_barh(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'broken_barh' in the type store
    # Getting the type of 'stypy_return_type' (line 2656)
    stypy_return_type_117861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2656, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117861)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'broken_barh'
    return stypy_return_type_117861

# Assigning a type to the variable 'broken_barh' (line 2656)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2656, 0), 'broken_barh', broken_barh)

@norecursion
def boxplot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2678)
    None_117862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 21), 'None')
    # Getting the type of 'None' (line 2678)
    None_117863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 31), 'None')
    # Getting the type of 'None' (line 2678)
    None_117864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 42), 'None')
    # Getting the type of 'None' (line 2678)
    None_117865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 53), 'None')
    # Getting the type of 'None' (line 2678)
    None_117866 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2678, 69), 'None')
    # Getting the type of 'None' (line 2679)
    None_117867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2679, 19), 'None')
    # Getting the type of 'None' (line 2679)
    None_117868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2679, 38), 'None')
    # Getting the type of 'None' (line 2679)
    None_117869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2679, 54), 'None')
    # Getting the type of 'None' (line 2679)
    None_117870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2679, 72), 'None')
    # Getting the type of 'None' (line 2680)
    None_117871 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2680, 27), 'None')
    # Getting the type of 'None' (line 2680)
    None_117872 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2680, 42), 'None')
    # Getting the type of 'None' (line 2680)
    None_117873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2680, 58), 'None')
    # Getting the type of 'None' (line 2680)
    None_117874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2680, 73), 'None')
    # Getting the type of 'None' (line 2681)
    None_117875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 20), 'None')
    # Getting the type of 'None' (line 2681)
    None_117876 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 37), 'None')
    # Getting the type of 'None' (line 2681)
    None_117877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 52), 'None')
    # Getting the type of 'None' (line 2681)
    None_117878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2681, 65), 'None')
    # Getting the type of 'None' (line 2682)
    None_117879 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 23), 'None')
    # Getting the type of 'None' (line 2682)
    None_117880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 41), 'None')
    # Getting the type of 'None' (line 2682)
    None_117881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 57), 'None')
    # Getting the type of 'None' (line 2682)
    None_117882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2682, 72), 'None')
    # Getting the type of 'None' (line 2683)
    None_117883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2683, 25), 'None')
    # Getting the type of 'True' (line 2683)
    True_117884 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2683, 45), 'True')
    # Getting the type of 'False' (line 2683)
    False_117885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2683, 61), 'False')
    # Getting the type of 'None' (line 2683)
    None_117886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2683, 75), 'None')
    # Getting the type of 'None' (line 2684)
    None_117887 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 17), 'None')
    # Getting the type of 'None' (line 2684)
    None_117888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2684, 28), 'None')
    defaults = [None_117862, None_117863, None_117864, None_117865, None_117866, None_117867, None_117868, None_117869, None_117870, None_117871, None_117872, None_117873, None_117874, None_117875, None_117876, None_117877, None_117878, None_117879, None_117880, None_117881, None_117882, None_117883, True_117884, False_117885, None_117886, None_117887, None_117888]
    # Create a new context for function 'boxplot'
    module_type_store = module_type_store.open_function_context('boxplot', 2677, 0, False)
    
    # Passed parameters checking function
    boxplot.stypy_localization = localization
    boxplot.stypy_type_of_self = None
    boxplot.stypy_type_store = module_type_store
    boxplot.stypy_function_name = 'boxplot'
    boxplot.stypy_param_names_list = ['x', 'notch', 'sym', 'vert', 'whis', 'positions', 'widths', 'patch_artist', 'bootstrap', 'usermedians', 'conf_intervals', 'meanline', 'showmeans', 'showcaps', 'showbox', 'showfliers', 'boxprops', 'labels', 'flierprops', 'medianprops', 'meanprops', 'capprops', 'whiskerprops', 'manage_xticks', 'autorange', 'zorder', 'hold', 'data']
    boxplot.stypy_varargs_param_name = None
    boxplot.stypy_kwargs_param_name = None
    boxplot.stypy_call_defaults = defaults
    boxplot.stypy_call_varargs = varargs
    boxplot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'boxplot', ['x', 'notch', 'sym', 'vert', 'whis', 'positions', 'widths', 'patch_artist', 'bootstrap', 'usermedians', 'conf_intervals', 'meanline', 'showmeans', 'showcaps', 'showbox', 'showfliers', 'boxprops', 'labels', 'flierprops', 'medianprops', 'meanprops', 'capprops', 'whiskerprops', 'manage_xticks', 'autorange', 'zorder', 'hold', 'data'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'boxplot', localization, ['x', 'notch', 'sym', 'vert', 'whis', 'positions', 'widths', 'patch_artist', 'bootstrap', 'usermedians', 'conf_intervals', 'meanline', 'showmeans', 'showcaps', 'showbox', 'showfliers', 'boxprops', 'labels', 'flierprops', 'medianprops', 'meanprops', 'capprops', 'whiskerprops', 'manage_xticks', 'autorange', 'zorder', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'boxplot(...)' code ##################

    
    # Assigning a Call to a Name (line 2685):
    
    # Assigning a Call to a Name (line 2685):
    
    # Call to gca(...): (line 2685)
    # Processing the call keyword arguments (line 2685)
    kwargs_117890 = {}
    # Getting the type of 'gca' (line 2685)
    gca_117889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2685, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2685)
    gca_call_result_117891 = invoke(stypy.reporting.localization.Localization(__file__, 2685, 9), gca_117889, *[], **kwargs_117890)
    
    # Assigning a type to the variable 'ax' (line 2685)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2685, 4), 'ax', gca_call_result_117891)
    
    # Assigning a Attribute to a Name (line 2688):
    
    # Assigning a Attribute to a Name (line 2688):
    # Getting the type of 'ax' (line 2688)
    ax_117892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2688, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2688)
    _hold_117893 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2688, 14), ax_117892, '_hold')
    # Assigning a type to the variable 'washold' (line 2688)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2688, 4), 'washold', _hold_117893)
    
    # Type idiom detected: calculating its left and rigth part (line 2690)
    # Getting the type of 'hold' (line 2690)
    hold_117894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2690, 4), 'hold')
    # Getting the type of 'None' (line 2690)
    None_117895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2690, 19), 'None')
    
    (may_be_117896, more_types_in_union_117897) = may_not_be_none(hold_117894, None_117895)

    if may_be_117896:

        if more_types_in_union_117897:
            # Runtime conditional SSA (line 2690)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2691):
        
        # Assigning a Name to a Attribute (line 2691):
        # Getting the type of 'hold' (line 2691)
        hold_117898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2691, 19), 'hold')
        # Getting the type of 'ax' (line 2691)
        ax_117899 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2691, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2691)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2691, 8), ax_117899, '_hold', hold_117898)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2692, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2692)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_117900 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2692, 8), 'matplotlib.cbook')

        if (type(import_117900) is not StypyTypeError):

            if (import_117900 != 'pyd_module'):
                __import__(import_117900)
                sys_modules_117901 = sys.modules[import_117900]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2692, 8), 'matplotlib.cbook', sys_modules_117901.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2692, 8), __file__, sys_modules_117901, sys_modules_117901.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2692, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2692)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2692, 8), 'matplotlib.cbook', import_117900)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2693)
        # Processing the call arguments (line 2693)
        unicode_117904 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2693, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2694)
        mplDeprecation_117905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2694, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2693)
        kwargs_117906 = {}
        # Getting the type of 'warnings' (line 2693)
        warnings_117902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2693, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2693)
        warn_117903 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2693, 8), warnings_117902, 'warn')
        # Calling warn(args, kwargs) (line 2693)
        warn_call_result_117907 = invoke(stypy.reporting.localization.Localization(__file__, 2693, 8), warn_117903, *[unicode_117904, mplDeprecation_117905], **kwargs_117906)
        

        if more_types_in_union_117897:
            # SSA join for if statement (line 2690)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2695)
    
    # Assigning a Call to a Name (line 2696):
    
    # Assigning a Call to a Name (line 2696):
    
    # Call to boxplot(...): (line 2696)
    # Processing the call arguments (line 2696)
    # Getting the type of 'x' (line 2696)
    x_117910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 25), 'x', False)
    # Processing the call keyword arguments (line 2696)
    # Getting the type of 'notch' (line 2696)
    notch_117911 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 34), 'notch', False)
    keyword_117912 = notch_117911
    # Getting the type of 'sym' (line 2696)
    sym_117913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 45), 'sym', False)
    keyword_117914 = sym_117913
    # Getting the type of 'vert' (line 2696)
    vert_117915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 55), 'vert', False)
    keyword_117916 = vert_117915
    # Getting the type of 'whis' (line 2696)
    whis_117917 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 66), 'whis', False)
    keyword_117918 = whis_117917
    # Getting the type of 'positions' (line 2697)
    positions_117919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 35), 'positions', False)
    keyword_117920 = positions_117919
    # Getting the type of 'widths' (line 2697)
    widths_117921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2697, 53), 'widths', False)
    keyword_117922 = widths_117921
    # Getting the type of 'patch_artist' (line 2698)
    patch_artist_117923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 38), 'patch_artist', False)
    keyword_117924 = patch_artist_117923
    # Getting the type of 'bootstrap' (line 2698)
    bootstrap_117925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2698, 62), 'bootstrap', False)
    keyword_117926 = bootstrap_117925
    # Getting the type of 'usermedians' (line 2699)
    usermedians_117927 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2699, 37), 'usermedians', False)
    keyword_117928 = usermedians_117927
    # Getting the type of 'conf_intervals' (line 2700)
    conf_intervals_117929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 40), 'conf_intervals', False)
    keyword_117930 = conf_intervals_117929
    # Getting the type of 'meanline' (line 2700)
    meanline_117931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2700, 65), 'meanline', False)
    keyword_117932 = meanline_117931
    # Getting the type of 'showmeans' (line 2701)
    showmeans_117933 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 35), 'showmeans', False)
    keyword_117934 = showmeans_117933
    # Getting the type of 'showcaps' (line 2701)
    showcaps_117935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2701, 55), 'showcaps', False)
    keyword_117936 = showcaps_117935
    # Getting the type of 'showbox' (line 2702)
    showbox_117937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 33), 'showbox', False)
    keyword_117938 = showbox_117937
    # Getting the type of 'showfliers' (line 2702)
    showfliers_117939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2702, 53), 'showfliers', False)
    keyword_117940 = showfliers_117939
    # Getting the type of 'boxprops' (line 2703)
    boxprops_117941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2703, 34), 'boxprops', False)
    keyword_117942 = boxprops_117941
    # Getting the type of 'labels' (line 2703)
    labels_117943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2703, 51), 'labels', False)
    keyword_117944 = labels_117943
    # Getting the type of 'flierprops' (line 2704)
    flierprops_117945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 36), 'flierprops', False)
    keyword_117946 = flierprops_117945
    # Getting the type of 'medianprops' (line 2704)
    medianprops_117947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2704, 60), 'medianprops', False)
    keyword_117948 = medianprops_117947
    # Getting the type of 'meanprops' (line 2705)
    meanprops_117949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2705, 35), 'meanprops', False)
    keyword_117950 = meanprops_117949
    # Getting the type of 'capprops' (line 2705)
    capprops_117951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2705, 55), 'capprops', False)
    keyword_117952 = capprops_117951
    # Getting the type of 'whiskerprops' (line 2706)
    whiskerprops_117953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2706, 38), 'whiskerprops', False)
    keyword_117954 = whiskerprops_117953
    # Getting the type of 'manage_xticks' (line 2707)
    manage_xticks_117955 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2707, 39), 'manage_xticks', False)
    keyword_117956 = manage_xticks_117955
    # Getting the type of 'autorange' (line 2707)
    autorange_117957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2707, 64), 'autorange', False)
    keyword_117958 = autorange_117957
    # Getting the type of 'zorder' (line 2708)
    zorder_117959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2708, 32), 'zorder', False)
    keyword_117960 = zorder_117959
    # Getting the type of 'data' (line 2708)
    data_117961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2708, 45), 'data', False)
    keyword_117962 = data_117961
    kwargs_117963 = {'usermedians': keyword_117928, 'labels': keyword_117944, 'meanline': keyword_117932, 'whis': keyword_117918, 'whiskerprops': keyword_117954, 'flierprops': keyword_117946, 'widths': keyword_117922, 'autorange': keyword_117958, 'showfliers': keyword_117940, 'capprops': keyword_117952, 'showmeans': keyword_117934, 'vert': keyword_117916, 'sym': keyword_117914, 'boxprops': keyword_117942, 'manage_xticks': keyword_117956, 'data': keyword_117962, 'positions': keyword_117920, 'bootstrap': keyword_117926, 'zorder': keyword_117960, 'showbox': keyword_117938, 'meanprops': keyword_117950, 'medianprops': keyword_117948, 'patch_artist': keyword_117924, 'notch': keyword_117912, 'showcaps': keyword_117936, 'conf_intervals': keyword_117930}
    # Getting the type of 'ax' (line 2696)
    ax_117908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2696, 14), 'ax', False)
    # Obtaining the member 'boxplot' of a type (line 2696)
    boxplot_117909 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2696, 14), ax_117908, 'boxplot')
    # Calling boxplot(args, kwargs) (line 2696)
    boxplot_call_result_117964 = invoke(stypy.reporting.localization.Localization(__file__, 2696, 14), boxplot_117909, *[x_117910], **kwargs_117963)
    
    # Assigning a type to the variable 'ret' (line 2696)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2696, 8), 'ret', boxplot_call_result_117964)
    
    # finally branch of the try-finally block (line 2695)
    
    # Assigning a Name to a Attribute (line 2710):
    
    # Assigning a Name to a Attribute (line 2710):
    # Getting the type of 'washold' (line 2710)
    washold_117965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2710, 19), 'washold')
    # Getting the type of 'ax' (line 2710)
    ax_117966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2710, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2710)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2710, 8), ax_117966, '_hold', washold_117965)
    
    # Getting the type of 'ret' (line 2712)
    ret_117967 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2712, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2712)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2712, 4), 'stypy_return_type', ret_117967)
    
    # ################# End of 'boxplot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'boxplot' in the type store
    # Getting the type of 'stypy_return_type' (line 2677)
    stypy_return_type_117968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2677, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_117968)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'boxplot'
    return stypy_return_type_117968

# Assigning a type to the variable 'boxplot' (line 2677)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2677, 0), 'boxplot', boxplot)

@norecursion
def cohere(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_117969 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2717, 22), 'int')
    int_117970 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2717, 30), 'int')
    int_117971 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2717, 36), 'int')
    # Getting the type of 'mlab' (line 2717)
    mlab_117972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2717, 47), 'mlab')
    # Obtaining the member 'detrend_none' of a type (line 2717)
    detrend_none_117973 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2717, 47), mlab_117972, 'detrend_none')
    # Getting the type of 'mlab' (line 2718)
    mlab_117974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 18), 'mlab')
    # Obtaining the member 'window_hanning' of a type (line 2718)
    window_hanning_117975 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2718, 18), mlab_117974, 'window_hanning')
    int_117976 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2718, 48), 'int')
    # Getting the type of 'None' (line 2718)
    None_117977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2718, 58), 'None')
    unicode_117978 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2718, 70), 'unicode', u'default')
    # Getting the type of 'None' (line 2719)
    None_117979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 25), 'None')
    # Getting the type of 'None' (line 2719)
    None_117980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 36), 'None')
    # Getting the type of 'None' (line 2719)
    None_117981 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2719, 47), 'None')
    defaults = [int_117969, int_117970, int_117971, detrend_none_117973, window_hanning_117975, int_117976, None_117977, unicode_117978, None_117979, None_117980, None_117981]
    # Create a new context for function 'cohere'
    module_type_store = module_type_store.open_function_context('cohere', 2716, 0, False)
    
    # Passed parameters checking function
    cohere.stypy_localization = localization
    cohere.stypy_type_of_self = None
    cohere.stypy_type_store = module_type_store
    cohere.stypy_function_name = 'cohere'
    cohere.stypy_param_names_list = ['x', 'y', 'NFFT', 'Fs', 'Fc', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'hold', 'data']
    cohere.stypy_varargs_param_name = None
    cohere.stypy_kwargs_param_name = 'kwargs'
    cohere.stypy_call_defaults = defaults
    cohere.stypy_call_varargs = varargs
    cohere.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cohere', ['x', 'y', 'NFFT', 'Fs', 'Fc', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cohere', localization, ['x', 'y', 'NFFT', 'Fs', 'Fc', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cohere(...)' code ##################

    
    # Assigning a Call to a Name (line 2720):
    
    # Assigning a Call to a Name (line 2720):
    
    # Call to gca(...): (line 2720)
    # Processing the call keyword arguments (line 2720)
    kwargs_117983 = {}
    # Getting the type of 'gca' (line 2720)
    gca_117982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2720, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2720)
    gca_call_result_117984 = invoke(stypy.reporting.localization.Localization(__file__, 2720, 9), gca_117982, *[], **kwargs_117983)
    
    # Assigning a type to the variable 'ax' (line 2720)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2720, 4), 'ax', gca_call_result_117984)
    
    # Assigning a Attribute to a Name (line 2723):
    
    # Assigning a Attribute to a Name (line 2723):
    # Getting the type of 'ax' (line 2723)
    ax_117985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2723, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2723)
    _hold_117986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2723, 14), ax_117985, '_hold')
    # Assigning a type to the variable 'washold' (line 2723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2723, 4), 'washold', _hold_117986)
    
    # Type idiom detected: calculating its left and rigth part (line 2725)
    # Getting the type of 'hold' (line 2725)
    hold_117987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2725, 4), 'hold')
    # Getting the type of 'None' (line 2725)
    None_117988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2725, 19), 'None')
    
    (may_be_117989, more_types_in_union_117990) = may_not_be_none(hold_117987, None_117988)

    if may_be_117989:

        if more_types_in_union_117990:
            # Runtime conditional SSA (line 2725)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2726):
        
        # Assigning a Name to a Attribute (line 2726):
        # Getting the type of 'hold' (line 2726)
        hold_117991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 19), 'hold')
        # Getting the type of 'ax' (line 2726)
        ax_117992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2726, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2726)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2726, 8), ax_117992, '_hold', hold_117991)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2727, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2727)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_117993 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2727, 8), 'matplotlib.cbook')

        if (type(import_117993) is not StypyTypeError):

            if (import_117993 != 'pyd_module'):
                __import__(import_117993)
                sys_modules_117994 = sys.modules[import_117993]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2727, 8), 'matplotlib.cbook', sys_modules_117994.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2727, 8), __file__, sys_modules_117994, sys_modules_117994.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2727, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2727)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2727, 8), 'matplotlib.cbook', import_117993)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2728)
        # Processing the call arguments (line 2728)
        unicode_117997 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2728, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2729)
        mplDeprecation_117998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2729, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2728)
        kwargs_117999 = {}
        # Getting the type of 'warnings' (line 2728)
        warnings_117995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2728, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2728)
        warn_117996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2728, 8), warnings_117995, 'warn')
        # Calling warn(args, kwargs) (line 2728)
        warn_call_result_118000 = invoke(stypy.reporting.localization.Localization(__file__, 2728, 8), warn_117996, *[unicode_117997, mplDeprecation_117998], **kwargs_117999)
        

        if more_types_in_union_117990:
            # SSA join for if statement (line 2725)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2730)
    
    # Assigning a Call to a Name (line 2731):
    
    # Assigning a Call to a Name (line 2731):
    
    # Call to cohere(...): (line 2731)
    # Processing the call arguments (line 2731)
    # Getting the type of 'x' (line 2731)
    x_118003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 24), 'x', False)
    # Getting the type of 'y' (line 2731)
    y_118004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 27), 'y', False)
    # Processing the call keyword arguments (line 2731)
    # Getting the type of 'NFFT' (line 2731)
    NFFT_118005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 35), 'NFFT', False)
    keyword_118006 = NFFT_118005
    # Getting the type of 'Fs' (line 2731)
    Fs_118007 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 44), 'Fs', False)
    keyword_118008 = Fs_118007
    # Getting the type of 'Fc' (line 2731)
    Fc_118009 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 51), 'Fc', False)
    keyword_118010 = Fc_118009
    # Getting the type of 'detrend' (line 2731)
    detrend_118011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 63), 'detrend', False)
    keyword_118012 = detrend_118011
    # Getting the type of 'window' (line 2732)
    window_118013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2732, 31), 'window', False)
    keyword_118014 = window_118013
    # Getting the type of 'noverlap' (line 2732)
    noverlap_118015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2732, 48), 'noverlap', False)
    keyword_118016 = noverlap_118015
    # Getting the type of 'pad_to' (line 2732)
    pad_to_118017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2732, 65), 'pad_to', False)
    keyword_118018 = pad_to_118017
    # Getting the type of 'sides' (line 2733)
    sides_118019 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 30), 'sides', False)
    keyword_118020 = sides_118019
    # Getting the type of 'scale_by_freq' (line 2733)
    scale_by_freq_118021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 51), 'scale_by_freq', False)
    keyword_118022 = scale_by_freq_118021
    # Getting the type of 'data' (line 2733)
    data_118023 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2733, 71), 'data', False)
    keyword_118024 = data_118023
    # Getting the type of 'kwargs' (line 2734)
    kwargs_118025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2734, 26), 'kwargs', False)
    kwargs_118026 = {'Fs': keyword_118008, 'pad_to': keyword_118018, 'scale_by_freq': keyword_118022, 'detrend': keyword_118012, 'window': keyword_118014, 'Fc': keyword_118010, 'NFFT': keyword_118006, 'kwargs_118025': kwargs_118025, 'data': keyword_118024, 'sides': keyword_118020, 'noverlap': keyword_118016}
    # Getting the type of 'ax' (line 2731)
    ax_118001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2731, 14), 'ax', False)
    # Obtaining the member 'cohere' of a type (line 2731)
    cohere_118002 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2731, 14), ax_118001, 'cohere')
    # Calling cohere(args, kwargs) (line 2731)
    cohere_call_result_118027 = invoke(stypy.reporting.localization.Localization(__file__, 2731, 14), cohere_118002, *[x_118003, y_118004], **kwargs_118026)
    
    # Assigning a type to the variable 'ret' (line 2731)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2731, 8), 'ret', cohere_call_result_118027)
    
    # finally branch of the try-finally block (line 2730)
    
    # Assigning a Name to a Attribute (line 2736):
    
    # Assigning a Name to a Attribute (line 2736):
    # Getting the type of 'washold' (line 2736)
    washold_118028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 19), 'washold')
    # Getting the type of 'ax' (line 2736)
    ax_118029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2736, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2736)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2736, 8), ax_118029, '_hold', washold_118028)
    
    # Getting the type of 'ret' (line 2738)
    ret_118030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2738, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2738, 4), 'stypy_return_type', ret_118030)
    
    # ################# End of 'cohere(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cohere' in the type store
    # Getting the type of 'stypy_return_type' (line 2716)
    stypy_return_type_118031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2716, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118031)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cohere'
    return stypy_return_type_118031

# Assigning a type to the variable 'cohere' (line 2716)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2716, 0), 'cohere', cohere)

@norecursion
def clabel(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'clabel'
    module_type_store = module_type_store.open_function_context('clabel', 2742, 0, False)
    
    # Passed parameters checking function
    clabel.stypy_localization = localization
    clabel.stypy_type_of_self = None
    clabel.stypy_type_store = module_type_store
    clabel.stypy_function_name = 'clabel'
    clabel.stypy_param_names_list = ['CS']
    clabel.stypy_varargs_param_name = 'args'
    clabel.stypy_kwargs_param_name = 'kwargs'
    clabel.stypy_call_defaults = defaults
    clabel.stypy_call_varargs = varargs
    clabel.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'clabel', ['CS'], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'clabel', localization, ['CS'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'clabel(...)' code ##################

    
    # Assigning a Call to a Name (line 2744):
    
    # Assigning a Call to a Name (line 2744):
    
    # Call to gca(...): (line 2744)
    # Processing the call keyword arguments (line 2744)
    kwargs_118033 = {}
    # Getting the type of 'gca' (line 2744)
    gca_118032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2744, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2744)
    gca_call_result_118034 = invoke(stypy.reporting.localization.Localization(__file__, 2744, 9), gca_118032, *[], **kwargs_118033)
    
    # Assigning a type to the variable 'ax' (line 2744)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2744, 4), 'ax', gca_call_result_118034)
    
    # Assigning a Attribute to a Name (line 2747):
    
    # Assigning a Attribute to a Name (line 2747):
    # Getting the type of 'ax' (line 2747)
    ax_118035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2747, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2747)
    _hold_118036 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2747, 14), ax_118035, '_hold')
    # Assigning a type to the variable 'washold' (line 2747)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2747, 4), 'washold', _hold_118036)
    
    # Assigning a Call to a Name (line 2748):
    
    # Assigning a Call to a Name (line 2748):
    
    # Call to pop(...): (line 2748)
    # Processing the call arguments (line 2748)
    unicode_118039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2748, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 2748)
    None_118040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2748, 30), 'None', False)
    # Processing the call keyword arguments (line 2748)
    kwargs_118041 = {}
    # Getting the type of 'kwargs' (line 2748)
    kwargs_118037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2748, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 2748)
    pop_118038 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2748, 11), kwargs_118037, 'pop')
    # Calling pop(args, kwargs) (line 2748)
    pop_call_result_118042 = invoke(stypy.reporting.localization.Localization(__file__, 2748, 11), pop_118038, *[unicode_118039, None_118040], **kwargs_118041)
    
    # Assigning a type to the variable 'hold' (line 2748)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2748, 4), 'hold', pop_call_result_118042)
    
    # Type idiom detected: calculating its left and rigth part (line 2749)
    # Getting the type of 'hold' (line 2749)
    hold_118043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 4), 'hold')
    # Getting the type of 'None' (line 2749)
    None_118044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2749, 19), 'None')
    
    (may_be_118045, more_types_in_union_118046) = may_not_be_none(hold_118043, None_118044)

    if may_be_118045:

        if more_types_in_union_118046:
            # Runtime conditional SSA (line 2749)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2750):
        
        # Assigning a Name to a Attribute (line 2750):
        # Getting the type of 'hold' (line 2750)
        hold_118047 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 19), 'hold')
        # Getting the type of 'ax' (line 2750)
        ax_118048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2750, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2750)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2750, 8), ax_118048, '_hold', hold_118047)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2751, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2751)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118049 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2751, 8), 'matplotlib.cbook')

        if (type(import_118049) is not StypyTypeError):

            if (import_118049 != 'pyd_module'):
                __import__(import_118049)
                sys_modules_118050 = sys.modules[import_118049]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2751, 8), 'matplotlib.cbook', sys_modules_118050.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2751, 8), __file__, sys_modules_118050, sys_modules_118050.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2751, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2751)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2751, 8), 'matplotlib.cbook', import_118049)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2752)
        # Processing the call arguments (line 2752)
        unicode_118053 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2752, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2753)
        mplDeprecation_118054 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2753, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2752)
        kwargs_118055 = {}
        # Getting the type of 'warnings' (line 2752)
        warnings_118051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2752, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2752)
        warn_118052 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2752, 8), warnings_118051, 'warn')
        # Calling warn(args, kwargs) (line 2752)
        warn_call_result_118056 = invoke(stypy.reporting.localization.Localization(__file__, 2752, 8), warn_118052, *[unicode_118053, mplDeprecation_118054], **kwargs_118055)
        

        if more_types_in_union_118046:
            # SSA join for if statement (line 2749)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2754)
    
    # Assigning a Call to a Name (line 2755):
    
    # Assigning a Call to a Name (line 2755):
    
    # Call to clabel(...): (line 2755)
    # Processing the call arguments (line 2755)
    # Getting the type of 'CS' (line 2755)
    CS_118059 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 24), 'CS', False)
    # Getting the type of 'args' (line 2755)
    args_118060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 29), 'args', False)
    # Processing the call keyword arguments (line 2755)
    # Getting the type of 'kwargs' (line 2755)
    kwargs_118061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 37), 'kwargs', False)
    kwargs_118062 = {'kwargs_118061': kwargs_118061}
    # Getting the type of 'ax' (line 2755)
    ax_118057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2755, 14), 'ax', False)
    # Obtaining the member 'clabel' of a type (line 2755)
    clabel_118058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2755, 14), ax_118057, 'clabel')
    # Calling clabel(args, kwargs) (line 2755)
    clabel_call_result_118063 = invoke(stypy.reporting.localization.Localization(__file__, 2755, 14), clabel_118058, *[CS_118059, args_118060], **kwargs_118062)
    
    # Assigning a type to the variable 'ret' (line 2755)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2755, 8), 'ret', clabel_call_result_118063)
    
    # finally branch of the try-finally block (line 2754)
    
    # Assigning a Name to a Attribute (line 2757):
    
    # Assigning a Name to a Attribute (line 2757):
    # Getting the type of 'washold' (line 2757)
    washold_118064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2757, 19), 'washold')
    # Getting the type of 'ax' (line 2757)
    ax_118065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2757, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2757)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2757, 8), ax_118065, '_hold', washold_118064)
    
    # Getting the type of 'ret' (line 2759)
    ret_118066 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2759, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2759)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2759, 4), 'stypy_return_type', ret_118066)
    
    # ################# End of 'clabel(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'clabel' in the type store
    # Getting the type of 'stypy_return_type' (line 2742)
    stypy_return_type_118067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2742, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118067)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'clabel'
    return stypy_return_type_118067

# Assigning a type to the variable 'clabel' (line 2742)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2742, 0), 'clabel', clabel)

@norecursion
def contour(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'contour'
    module_type_store = module_type_store.open_function_context('contour', 2763, 0, False)
    
    # Passed parameters checking function
    contour.stypy_localization = localization
    contour.stypy_type_of_self = None
    contour.stypy_type_store = module_type_store
    contour.stypy_function_name = 'contour'
    contour.stypy_param_names_list = []
    contour.stypy_varargs_param_name = 'args'
    contour.stypy_kwargs_param_name = 'kwargs'
    contour.stypy_call_defaults = defaults
    contour.stypy_call_varargs = varargs
    contour.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'contour', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'contour', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'contour(...)' code ##################

    
    # Assigning a Call to a Name (line 2765):
    
    # Assigning a Call to a Name (line 2765):
    
    # Call to gca(...): (line 2765)
    # Processing the call keyword arguments (line 2765)
    kwargs_118069 = {}
    # Getting the type of 'gca' (line 2765)
    gca_118068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2765, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2765)
    gca_call_result_118070 = invoke(stypy.reporting.localization.Localization(__file__, 2765, 9), gca_118068, *[], **kwargs_118069)
    
    # Assigning a type to the variable 'ax' (line 2765)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2765, 4), 'ax', gca_call_result_118070)
    
    # Assigning a Attribute to a Name (line 2768):
    
    # Assigning a Attribute to a Name (line 2768):
    # Getting the type of 'ax' (line 2768)
    ax_118071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2768, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2768)
    _hold_118072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2768, 14), ax_118071, '_hold')
    # Assigning a type to the variable 'washold' (line 2768)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2768, 4), 'washold', _hold_118072)
    
    # Assigning a Call to a Name (line 2769):
    
    # Assigning a Call to a Name (line 2769):
    
    # Call to pop(...): (line 2769)
    # Processing the call arguments (line 2769)
    unicode_118075 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2769, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 2769)
    None_118076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 30), 'None', False)
    # Processing the call keyword arguments (line 2769)
    kwargs_118077 = {}
    # Getting the type of 'kwargs' (line 2769)
    kwargs_118073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2769, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 2769)
    pop_118074 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2769, 11), kwargs_118073, 'pop')
    # Calling pop(args, kwargs) (line 2769)
    pop_call_result_118078 = invoke(stypy.reporting.localization.Localization(__file__, 2769, 11), pop_118074, *[unicode_118075, None_118076], **kwargs_118077)
    
    # Assigning a type to the variable 'hold' (line 2769)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2769, 4), 'hold', pop_call_result_118078)
    
    # Type idiom detected: calculating its left and rigth part (line 2770)
    # Getting the type of 'hold' (line 2770)
    hold_118079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 4), 'hold')
    # Getting the type of 'None' (line 2770)
    None_118080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2770, 19), 'None')
    
    (may_be_118081, more_types_in_union_118082) = may_not_be_none(hold_118079, None_118080)

    if may_be_118081:

        if more_types_in_union_118082:
            # Runtime conditional SSA (line 2770)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2771):
        
        # Assigning a Name to a Attribute (line 2771):
        # Getting the type of 'hold' (line 2771)
        hold_118083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 19), 'hold')
        # Getting the type of 'ax' (line 2771)
        ax_118084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2771, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2771)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2771, 8), ax_118084, '_hold', hold_118083)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2772, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2772)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118085 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2772, 8), 'matplotlib.cbook')

        if (type(import_118085) is not StypyTypeError):

            if (import_118085 != 'pyd_module'):
                __import__(import_118085)
                sys_modules_118086 = sys.modules[import_118085]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2772, 8), 'matplotlib.cbook', sys_modules_118086.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2772, 8), __file__, sys_modules_118086, sys_modules_118086.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2772, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2772)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2772, 8), 'matplotlib.cbook', import_118085)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2773)
        # Processing the call arguments (line 2773)
        unicode_118089 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2773, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2774)
        mplDeprecation_118090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2774, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2773)
        kwargs_118091 = {}
        # Getting the type of 'warnings' (line 2773)
        warnings_118087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2773, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2773)
        warn_118088 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2773, 8), warnings_118087, 'warn')
        # Calling warn(args, kwargs) (line 2773)
        warn_call_result_118092 = invoke(stypy.reporting.localization.Localization(__file__, 2773, 8), warn_118088, *[unicode_118089, mplDeprecation_118090], **kwargs_118091)
        

        if more_types_in_union_118082:
            # SSA join for if statement (line 2770)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2775)
    
    # Assigning a Call to a Name (line 2776):
    
    # Assigning a Call to a Name (line 2776):
    
    # Call to contour(...): (line 2776)
    # Getting the type of 'args' (line 2776)
    args_118095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 26), 'args', False)
    # Processing the call keyword arguments (line 2776)
    # Getting the type of 'kwargs' (line 2776)
    kwargs_118096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 34), 'kwargs', False)
    kwargs_118097 = {'kwargs_118096': kwargs_118096}
    # Getting the type of 'ax' (line 2776)
    ax_118093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2776, 14), 'ax', False)
    # Obtaining the member 'contour' of a type (line 2776)
    contour_118094 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2776, 14), ax_118093, 'contour')
    # Calling contour(args, kwargs) (line 2776)
    contour_call_result_118098 = invoke(stypy.reporting.localization.Localization(__file__, 2776, 14), contour_118094, *[args_118095], **kwargs_118097)
    
    # Assigning a type to the variable 'ret' (line 2776)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2776, 8), 'ret', contour_call_result_118098)
    
    # finally branch of the try-finally block (line 2775)
    
    # Assigning a Name to a Attribute (line 2778):
    
    # Assigning a Name to a Attribute (line 2778):
    # Getting the type of 'washold' (line 2778)
    washold_118099 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 19), 'washold')
    # Getting the type of 'ax' (line 2778)
    ax_118100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2778, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2778)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2778, 8), ax_118100, '_hold', washold_118099)
    
    
    
    # Getting the type of 'ret' (line 2779)
    ret_118101 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 7), 'ret')
    # Obtaining the member '_A' of a type (line 2779)
    _A_118102 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2779, 7), ret_118101, '_A')
    # Getting the type of 'None' (line 2779)
    None_118103 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 21), 'None')
    # Applying the binary operator 'isnot' (line 2779)
    result_is_not_118104 = python_operator(stypy.reporting.localization.Localization(__file__, 2779, 7), 'isnot', _A_118102, None_118103)
    
    # Testing the type of an if condition (line 2779)
    if_condition_118105 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2779, 4), result_is_not_118104)
    # Assigning a type to the variable 'if_condition_118105' (line 2779)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2779, 4), 'if_condition_118105', if_condition_118105)
    # SSA begins for if statement (line 2779)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sci(...): (line 2779)
    # Processing the call arguments (line 2779)
    # Getting the type of 'ret' (line 2779)
    ret_118107 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 31), 'ret', False)
    # Processing the call keyword arguments (line 2779)
    kwargs_118108 = {}
    # Getting the type of 'sci' (line 2779)
    sci_118106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2779, 27), 'sci', False)
    # Calling sci(args, kwargs) (line 2779)
    sci_call_result_118109 = invoke(stypy.reporting.localization.Localization(__file__, 2779, 27), sci_118106, *[ret_118107], **kwargs_118108)
    
    # SSA join for if statement (line 2779)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'ret' (line 2780)
    ret_118110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2780, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2780)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2780, 4), 'stypy_return_type', ret_118110)
    
    # ################# End of 'contour(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'contour' in the type store
    # Getting the type of 'stypy_return_type' (line 2763)
    stypy_return_type_118111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2763, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118111)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'contour'
    return stypy_return_type_118111

# Assigning a type to the variable 'contour' (line 2763)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2763, 0), 'contour', contour)

@norecursion
def contourf(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'contourf'
    module_type_store = module_type_store.open_function_context('contourf', 2784, 0, False)
    
    # Passed parameters checking function
    contourf.stypy_localization = localization
    contourf.stypy_type_of_self = None
    contourf.stypy_type_store = module_type_store
    contourf.stypy_function_name = 'contourf'
    contourf.stypy_param_names_list = []
    contourf.stypy_varargs_param_name = 'args'
    contourf.stypy_kwargs_param_name = 'kwargs'
    contourf.stypy_call_defaults = defaults
    contourf.stypy_call_varargs = varargs
    contourf.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'contourf', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'contourf', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'contourf(...)' code ##################

    
    # Assigning a Call to a Name (line 2786):
    
    # Assigning a Call to a Name (line 2786):
    
    # Call to gca(...): (line 2786)
    # Processing the call keyword arguments (line 2786)
    kwargs_118113 = {}
    # Getting the type of 'gca' (line 2786)
    gca_118112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2786, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2786)
    gca_call_result_118114 = invoke(stypy.reporting.localization.Localization(__file__, 2786, 9), gca_118112, *[], **kwargs_118113)
    
    # Assigning a type to the variable 'ax' (line 2786)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2786, 4), 'ax', gca_call_result_118114)
    
    # Assigning a Attribute to a Name (line 2789):
    
    # Assigning a Attribute to a Name (line 2789):
    # Getting the type of 'ax' (line 2789)
    ax_118115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2789, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2789)
    _hold_118116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2789, 14), ax_118115, '_hold')
    # Assigning a type to the variable 'washold' (line 2789)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2789, 4), 'washold', _hold_118116)
    
    # Assigning a Call to a Name (line 2790):
    
    # Assigning a Call to a Name (line 2790):
    
    # Call to pop(...): (line 2790)
    # Processing the call arguments (line 2790)
    unicode_118119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2790, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 2790)
    None_118120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 30), 'None', False)
    # Processing the call keyword arguments (line 2790)
    kwargs_118121 = {}
    # Getting the type of 'kwargs' (line 2790)
    kwargs_118117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2790, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 2790)
    pop_118118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2790, 11), kwargs_118117, 'pop')
    # Calling pop(args, kwargs) (line 2790)
    pop_call_result_118122 = invoke(stypy.reporting.localization.Localization(__file__, 2790, 11), pop_118118, *[unicode_118119, None_118120], **kwargs_118121)
    
    # Assigning a type to the variable 'hold' (line 2790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2790, 4), 'hold', pop_call_result_118122)
    
    # Type idiom detected: calculating its left and rigth part (line 2791)
    # Getting the type of 'hold' (line 2791)
    hold_118123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 4), 'hold')
    # Getting the type of 'None' (line 2791)
    None_118124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2791, 19), 'None')
    
    (may_be_118125, more_types_in_union_118126) = may_not_be_none(hold_118123, None_118124)

    if may_be_118125:

        if more_types_in_union_118126:
            # Runtime conditional SSA (line 2791)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2792):
        
        # Assigning a Name to a Attribute (line 2792):
        # Getting the type of 'hold' (line 2792)
        hold_118127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 19), 'hold')
        # Getting the type of 'ax' (line 2792)
        ax_118128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2792, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2792)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2792, 8), ax_118128, '_hold', hold_118127)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2793, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2793)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118129 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2793, 8), 'matplotlib.cbook')

        if (type(import_118129) is not StypyTypeError):

            if (import_118129 != 'pyd_module'):
                __import__(import_118129)
                sys_modules_118130 = sys.modules[import_118129]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2793, 8), 'matplotlib.cbook', sys_modules_118130.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2793, 8), __file__, sys_modules_118130, sys_modules_118130.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2793, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2793)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2793, 8), 'matplotlib.cbook', import_118129)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2794)
        # Processing the call arguments (line 2794)
        unicode_118133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2794, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2795)
        mplDeprecation_118134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2795, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2794)
        kwargs_118135 = {}
        # Getting the type of 'warnings' (line 2794)
        warnings_118131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2794, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2794)
        warn_118132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2794, 8), warnings_118131, 'warn')
        # Calling warn(args, kwargs) (line 2794)
        warn_call_result_118136 = invoke(stypy.reporting.localization.Localization(__file__, 2794, 8), warn_118132, *[unicode_118133, mplDeprecation_118134], **kwargs_118135)
        

        if more_types_in_union_118126:
            # SSA join for if statement (line 2791)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2796)
    
    # Assigning a Call to a Name (line 2797):
    
    # Assigning a Call to a Name (line 2797):
    
    # Call to contourf(...): (line 2797)
    # Getting the type of 'args' (line 2797)
    args_118139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 27), 'args', False)
    # Processing the call keyword arguments (line 2797)
    # Getting the type of 'kwargs' (line 2797)
    kwargs_118140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 35), 'kwargs', False)
    kwargs_118141 = {'kwargs_118140': kwargs_118140}
    # Getting the type of 'ax' (line 2797)
    ax_118137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2797, 14), 'ax', False)
    # Obtaining the member 'contourf' of a type (line 2797)
    contourf_118138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2797, 14), ax_118137, 'contourf')
    # Calling contourf(args, kwargs) (line 2797)
    contourf_call_result_118142 = invoke(stypy.reporting.localization.Localization(__file__, 2797, 14), contourf_118138, *[args_118139], **kwargs_118141)
    
    # Assigning a type to the variable 'ret' (line 2797)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2797, 8), 'ret', contourf_call_result_118142)
    
    # finally branch of the try-finally block (line 2796)
    
    # Assigning a Name to a Attribute (line 2799):
    
    # Assigning a Name to a Attribute (line 2799):
    # Getting the type of 'washold' (line 2799)
    washold_118143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2799, 19), 'washold')
    # Getting the type of 'ax' (line 2799)
    ax_118144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2799, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2799)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2799, 8), ax_118144, '_hold', washold_118143)
    
    
    
    # Getting the type of 'ret' (line 2800)
    ret_118145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2800, 7), 'ret')
    # Obtaining the member '_A' of a type (line 2800)
    _A_118146 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2800, 7), ret_118145, '_A')
    # Getting the type of 'None' (line 2800)
    None_118147 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2800, 21), 'None')
    # Applying the binary operator 'isnot' (line 2800)
    result_is_not_118148 = python_operator(stypy.reporting.localization.Localization(__file__, 2800, 7), 'isnot', _A_118146, None_118147)
    
    # Testing the type of an if condition (line 2800)
    if_condition_118149 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 2800, 4), result_is_not_118148)
    # Assigning a type to the variable 'if_condition_118149' (line 2800)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2800, 4), 'if_condition_118149', if_condition_118149)
    # SSA begins for if statement (line 2800)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sci(...): (line 2800)
    # Processing the call arguments (line 2800)
    # Getting the type of 'ret' (line 2800)
    ret_118151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2800, 31), 'ret', False)
    # Processing the call keyword arguments (line 2800)
    kwargs_118152 = {}
    # Getting the type of 'sci' (line 2800)
    sci_118150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2800, 27), 'sci', False)
    # Calling sci(args, kwargs) (line 2800)
    sci_call_result_118153 = invoke(stypy.reporting.localization.Localization(__file__, 2800, 27), sci_118150, *[ret_118151], **kwargs_118152)
    
    # SSA join for if statement (line 2800)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'ret' (line 2801)
    ret_118154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2801, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2801)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2801, 4), 'stypy_return_type', ret_118154)
    
    # ################# End of 'contourf(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'contourf' in the type store
    # Getting the type of 'stypy_return_type' (line 2784)
    stypy_return_type_118155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2784, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118155)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'contourf'
    return stypy_return_type_118155

# Assigning a type to the variable 'contourf' (line 2784)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2784, 0), 'contourf', contourf)

@norecursion
def csd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2806)
    None_118156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 19), 'None')
    # Getting the type of 'None' (line 2806)
    None_118157 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 28), 'None')
    # Getting the type of 'None' (line 2806)
    None_118158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 37), 'None')
    # Getting the type of 'None' (line 2806)
    None_118159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 51), 'None')
    # Getting the type of 'None' (line 2806)
    None_118160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2806, 64), 'None')
    # Getting the type of 'None' (line 2807)
    None_118161 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2807, 17), 'None')
    # Getting the type of 'None' (line 2807)
    None_118162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2807, 30), 'None')
    # Getting the type of 'None' (line 2807)
    None_118163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2807, 42), 'None')
    # Getting the type of 'None' (line 2807)
    None_118164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2807, 62), 'None')
    # Getting the type of 'None' (line 2808)
    None_118165 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 20), 'None')
    # Getting the type of 'None' (line 2808)
    None_118166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 31), 'None')
    # Getting the type of 'None' (line 2808)
    None_118167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2808, 42), 'None')
    defaults = [None_118156, None_118157, None_118158, None_118159, None_118160, None_118161, None_118162, None_118163, None_118164, None_118165, None_118166, None_118167]
    # Create a new context for function 'csd'
    module_type_store = module_type_store.open_function_context('csd', 2805, 0, False)
    
    # Passed parameters checking function
    csd.stypy_localization = localization
    csd.stypy_type_of_self = None
    csd.stypy_type_store = module_type_store
    csd.stypy_function_name = 'csd'
    csd.stypy_param_names_list = ['x', 'y', 'NFFT', 'Fs', 'Fc', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'return_line', 'hold', 'data']
    csd.stypy_varargs_param_name = None
    csd.stypy_kwargs_param_name = 'kwargs'
    csd.stypy_call_defaults = defaults
    csd.stypy_call_varargs = varargs
    csd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'csd', ['x', 'y', 'NFFT', 'Fs', 'Fc', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'return_line', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'csd', localization, ['x', 'y', 'NFFT', 'Fs', 'Fc', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'return_line', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'csd(...)' code ##################

    
    # Assigning a Call to a Name (line 2809):
    
    # Assigning a Call to a Name (line 2809):
    
    # Call to gca(...): (line 2809)
    # Processing the call keyword arguments (line 2809)
    kwargs_118169 = {}
    # Getting the type of 'gca' (line 2809)
    gca_118168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2809, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2809)
    gca_call_result_118170 = invoke(stypy.reporting.localization.Localization(__file__, 2809, 9), gca_118168, *[], **kwargs_118169)
    
    # Assigning a type to the variable 'ax' (line 2809)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2809, 4), 'ax', gca_call_result_118170)
    
    # Assigning a Attribute to a Name (line 2812):
    
    # Assigning a Attribute to a Name (line 2812):
    # Getting the type of 'ax' (line 2812)
    ax_118171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2812, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2812)
    _hold_118172 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2812, 14), ax_118171, '_hold')
    # Assigning a type to the variable 'washold' (line 2812)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2812, 4), 'washold', _hold_118172)
    
    # Type idiom detected: calculating its left and rigth part (line 2814)
    # Getting the type of 'hold' (line 2814)
    hold_118173 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2814, 4), 'hold')
    # Getting the type of 'None' (line 2814)
    None_118174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2814, 19), 'None')
    
    (may_be_118175, more_types_in_union_118176) = may_not_be_none(hold_118173, None_118174)

    if may_be_118175:

        if more_types_in_union_118176:
            # Runtime conditional SSA (line 2814)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2815):
        
        # Assigning a Name to a Attribute (line 2815):
        # Getting the type of 'hold' (line 2815)
        hold_118177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 19), 'hold')
        # Getting the type of 'ax' (line 2815)
        ax_118178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2815, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2815)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2815, 8), ax_118178, '_hold', hold_118177)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2816, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2816)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118179 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2816, 8), 'matplotlib.cbook')

        if (type(import_118179) is not StypyTypeError):

            if (import_118179 != 'pyd_module'):
                __import__(import_118179)
                sys_modules_118180 = sys.modules[import_118179]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2816, 8), 'matplotlib.cbook', sys_modules_118180.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2816, 8), __file__, sys_modules_118180, sys_modules_118180.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2816, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2816)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2816, 8), 'matplotlib.cbook', import_118179)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2817)
        # Processing the call arguments (line 2817)
        unicode_118183 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2817, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2818)
        mplDeprecation_118184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2818, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2817)
        kwargs_118185 = {}
        # Getting the type of 'warnings' (line 2817)
        warnings_118181 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2817, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2817)
        warn_118182 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2817, 8), warnings_118181, 'warn')
        # Calling warn(args, kwargs) (line 2817)
        warn_call_result_118186 = invoke(stypy.reporting.localization.Localization(__file__, 2817, 8), warn_118182, *[unicode_118183, mplDeprecation_118184], **kwargs_118185)
        

        if more_types_in_union_118176:
            # SSA join for if statement (line 2814)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2819)
    
    # Assigning a Call to a Name (line 2820):
    
    # Assigning a Call to a Name (line 2820):
    
    # Call to csd(...): (line 2820)
    # Processing the call arguments (line 2820)
    # Getting the type of 'x' (line 2820)
    x_118189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 21), 'x', False)
    # Getting the type of 'y' (line 2820)
    y_118190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 24), 'y', False)
    # Processing the call keyword arguments (line 2820)
    # Getting the type of 'NFFT' (line 2820)
    NFFT_118191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 32), 'NFFT', False)
    keyword_118192 = NFFT_118191
    # Getting the type of 'Fs' (line 2820)
    Fs_118193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 41), 'Fs', False)
    keyword_118194 = Fs_118193
    # Getting the type of 'Fc' (line 2820)
    Fc_118195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 48), 'Fc', False)
    keyword_118196 = Fc_118195
    # Getting the type of 'detrend' (line 2820)
    detrend_118197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 60), 'detrend', False)
    keyword_118198 = detrend_118197
    # Getting the type of 'window' (line 2821)
    window_118199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 28), 'window', False)
    keyword_118200 = window_118199
    # Getting the type of 'noverlap' (line 2821)
    noverlap_118201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 45), 'noverlap', False)
    keyword_118202 = noverlap_118201
    # Getting the type of 'pad_to' (line 2821)
    pad_to_118203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2821, 62), 'pad_to', False)
    keyword_118204 = pad_to_118203
    # Getting the type of 'sides' (line 2822)
    sides_118205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2822, 27), 'sides', False)
    keyword_118206 = sides_118205
    # Getting the type of 'scale_by_freq' (line 2822)
    scale_by_freq_118207 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2822, 48), 'scale_by_freq', False)
    keyword_118208 = scale_by_freq_118207
    # Getting the type of 'return_line' (line 2823)
    return_line_118209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2823, 33), 'return_line', False)
    keyword_118210 = return_line_118209
    # Getting the type of 'data' (line 2823)
    data_118211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2823, 51), 'data', False)
    keyword_118212 = data_118211
    # Getting the type of 'kwargs' (line 2823)
    kwargs_118213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2823, 59), 'kwargs', False)
    kwargs_118214 = {'return_line': keyword_118210, 'Fs': keyword_118194, 'pad_to': keyword_118204, 'kwargs_118213': kwargs_118213, 'scale_by_freq': keyword_118208, 'detrend': keyword_118198, 'window': keyword_118200, 'Fc': keyword_118196, 'NFFT': keyword_118192, 'data': keyword_118212, 'sides': keyword_118206, 'noverlap': keyword_118202}
    # Getting the type of 'ax' (line 2820)
    ax_118187 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2820, 14), 'ax', False)
    # Obtaining the member 'csd' of a type (line 2820)
    csd_118188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2820, 14), ax_118187, 'csd')
    # Calling csd(args, kwargs) (line 2820)
    csd_call_result_118215 = invoke(stypy.reporting.localization.Localization(__file__, 2820, 14), csd_118188, *[x_118189, y_118190], **kwargs_118214)
    
    # Assigning a type to the variable 'ret' (line 2820)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2820, 8), 'ret', csd_call_result_118215)
    
    # finally branch of the try-finally block (line 2819)
    
    # Assigning a Name to a Attribute (line 2825):
    
    # Assigning a Name to a Attribute (line 2825):
    # Getting the type of 'washold' (line 2825)
    washold_118216 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2825, 19), 'washold')
    # Getting the type of 'ax' (line 2825)
    ax_118217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2825, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2825)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2825, 8), ax_118217, '_hold', washold_118216)
    
    # Getting the type of 'ret' (line 2827)
    ret_118218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2827, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2827)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2827, 4), 'stypy_return_type', ret_118218)
    
    # ################# End of 'csd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'csd' in the type store
    # Getting the type of 'stypy_return_type' (line 2805)
    stypy_return_type_118219 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2805, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118219)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'csd'
    return stypy_return_type_118219

# Assigning a type to the variable 'csd' (line 2805)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2805, 0), 'csd', csd)

@norecursion
def errorbar(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2832)
    None_118220 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2832, 24), 'None')
    # Getting the type of 'None' (line 2832)
    None_118221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2832, 35), 'None')
    unicode_118222 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2832, 45), 'unicode', u'')
    # Getting the type of 'None' (line 2832)
    None_118223 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2832, 56), 'None')
    # Getting the type of 'None' (line 2832)
    None_118224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2832, 73), 'None')
    # Getting the type of 'None' (line 2833)
    None_118225 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 21), 'None')
    # Getting the type of 'False' (line 2833)
    False_118226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 37), 'False')
    # Getting the type of 'False' (line 2833)
    False_118227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 51), 'False')
    # Getting the type of 'False' (line 2833)
    False_118228 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2833, 65), 'False')
    # Getting the type of 'False' (line 2834)
    False_118229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2834, 21), 'False')
    # Getting the type of 'False' (line 2834)
    False_118230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2834, 36), 'False')
    int_118231 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2834, 54), 'int')
    # Getting the type of 'None' (line 2834)
    None_118232 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2834, 66), 'None')
    # Getting the type of 'None' (line 2835)
    None_118233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 18), 'None')
    # Getting the type of 'None' (line 2835)
    None_118234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2835, 29), 'None')
    defaults = [None_118220, None_118221, unicode_118222, None_118223, None_118224, None_118225, False_118226, False_118227, False_118228, False_118229, False_118230, int_118231, None_118232, None_118233, None_118234]
    # Create a new context for function 'errorbar'
    module_type_store = module_type_store.open_function_context('errorbar', 2831, 0, False)
    
    # Passed parameters checking function
    errorbar.stypy_localization = localization
    errorbar.stypy_type_of_self = None
    errorbar.stypy_type_store = module_type_store
    errorbar.stypy_function_name = 'errorbar'
    errorbar.stypy_param_names_list = ['x', 'y', 'yerr', 'xerr', 'fmt', 'ecolor', 'elinewidth', 'capsize', 'barsabove', 'lolims', 'uplims', 'xlolims', 'xuplims', 'errorevery', 'capthick', 'hold', 'data']
    errorbar.stypy_varargs_param_name = None
    errorbar.stypy_kwargs_param_name = 'kwargs'
    errorbar.stypy_call_defaults = defaults
    errorbar.stypy_call_varargs = varargs
    errorbar.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'errorbar', ['x', 'y', 'yerr', 'xerr', 'fmt', 'ecolor', 'elinewidth', 'capsize', 'barsabove', 'lolims', 'uplims', 'xlolims', 'xuplims', 'errorevery', 'capthick', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'errorbar', localization, ['x', 'y', 'yerr', 'xerr', 'fmt', 'ecolor', 'elinewidth', 'capsize', 'barsabove', 'lolims', 'uplims', 'xlolims', 'xuplims', 'errorevery', 'capthick', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'errorbar(...)' code ##################

    
    # Assigning a Call to a Name (line 2836):
    
    # Assigning a Call to a Name (line 2836):
    
    # Call to gca(...): (line 2836)
    # Processing the call keyword arguments (line 2836)
    kwargs_118236 = {}
    # Getting the type of 'gca' (line 2836)
    gca_118235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2836, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2836)
    gca_call_result_118237 = invoke(stypy.reporting.localization.Localization(__file__, 2836, 9), gca_118235, *[], **kwargs_118236)
    
    # Assigning a type to the variable 'ax' (line 2836)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2836, 4), 'ax', gca_call_result_118237)
    
    # Assigning a Attribute to a Name (line 2839):
    
    # Assigning a Attribute to a Name (line 2839):
    # Getting the type of 'ax' (line 2839)
    ax_118238 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2839, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2839)
    _hold_118239 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2839, 14), ax_118238, '_hold')
    # Assigning a type to the variable 'washold' (line 2839)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2839, 4), 'washold', _hold_118239)
    
    # Type idiom detected: calculating its left and rigth part (line 2841)
    # Getting the type of 'hold' (line 2841)
    hold_118240 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 4), 'hold')
    # Getting the type of 'None' (line 2841)
    None_118241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2841, 19), 'None')
    
    (may_be_118242, more_types_in_union_118243) = may_not_be_none(hold_118240, None_118241)

    if may_be_118242:

        if more_types_in_union_118243:
            # Runtime conditional SSA (line 2841)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2842):
        
        # Assigning a Name to a Attribute (line 2842):
        # Getting the type of 'hold' (line 2842)
        hold_118244 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 19), 'hold')
        # Getting the type of 'ax' (line 2842)
        ax_118245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2842, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2842)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2842, 8), ax_118245, '_hold', hold_118244)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2843, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2843)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118246 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2843, 8), 'matplotlib.cbook')

        if (type(import_118246) is not StypyTypeError):

            if (import_118246 != 'pyd_module'):
                __import__(import_118246)
                sys_modules_118247 = sys.modules[import_118246]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2843, 8), 'matplotlib.cbook', sys_modules_118247.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2843, 8), __file__, sys_modules_118247, sys_modules_118247.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2843, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2843)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2843, 8), 'matplotlib.cbook', import_118246)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2844)
        # Processing the call arguments (line 2844)
        unicode_118250 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2844, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2845)
        mplDeprecation_118251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2845, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2844)
        kwargs_118252 = {}
        # Getting the type of 'warnings' (line 2844)
        warnings_118248 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2844, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2844)
        warn_118249 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2844, 8), warnings_118248, 'warn')
        # Calling warn(args, kwargs) (line 2844)
        warn_call_result_118253 = invoke(stypy.reporting.localization.Localization(__file__, 2844, 8), warn_118249, *[unicode_118250, mplDeprecation_118251], **kwargs_118252)
        

        if more_types_in_union_118243:
            # SSA join for if statement (line 2841)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2846)
    
    # Assigning a Call to a Name (line 2847):
    
    # Assigning a Call to a Name (line 2847):
    
    # Call to errorbar(...): (line 2847)
    # Processing the call arguments (line 2847)
    # Getting the type of 'x' (line 2847)
    x_118256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 26), 'x', False)
    # Getting the type of 'y' (line 2847)
    y_118257 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 29), 'y', False)
    # Processing the call keyword arguments (line 2847)
    # Getting the type of 'yerr' (line 2847)
    yerr_118258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 37), 'yerr', False)
    keyword_118259 = yerr_118258
    # Getting the type of 'xerr' (line 2847)
    xerr_118260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 48), 'xerr', False)
    keyword_118261 = xerr_118260
    # Getting the type of 'fmt' (line 2847)
    fmt_118262 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 58), 'fmt', False)
    keyword_118263 = fmt_118262
    # Getting the type of 'ecolor' (line 2847)
    ecolor_118264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 70), 'ecolor', False)
    keyword_118265 = ecolor_118264
    # Getting the type of 'elinewidth' (line 2848)
    elinewidth_118266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 37), 'elinewidth', False)
    keyword_118267 = elinewidth_118266
    # Getting the type of 'capsize' (line 2848)
    capsize_118268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2848, 57), 'capsize', False)
    keyword_118269 = capsize_118268
    # Getting the type of 'barsabove' (line 2849)
    barsabove_118270 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 36), 'barsabove', False)
    keyword_118271 = barsabove_118270
    # Getting the type of 'lolims' (line 2849)
    lolims_118272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 54), 'lolims', False)
    keyword_118273 = lolims_118272
    # Getting the type of 'uplims' (line 2849)
    uplims_118274 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2849, 69), 'uplims', False)
    keyword_118275 = uplims_118274
    # Getting the type of 'xlolims' (line 2850)
    xlolims_118276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 34), 'xlolims', False)
    keyword_118277 = xlolims_118276
    # Getting the type of 'xuplims' (line 2850)
    xuplims_118278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2850, 51), 'xuplims', False)
    keyword_118279 = xuplims_118278
    # Getting the type of 'errorevery' (line 2851)
    errorevery_118280 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 37), 'errorevery', False)
    keyword_118281 = errorevery_118280
    # Getting the type of 'capthick' (line 2851)
    capthick_118282 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 58), 'capthick', False)
    keyword_118283 = capthick_118282
    # Getting the type of 'data' (line 2851)
    data_118284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2851, 73), 'data', False)
    keyword_118285 = data_118284
    # Getting the type of 'kwargs' (line 2852)
    kwargs_118286 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2852, 28), 'kwargs', False)
    kwargs_118287 = {'lolims': keyword_118273, 'capsize': keyword_118269, 'uplims': keyword_118275, 'xlolims': keyword_118277, 'barsabove': keyword_118271, 'xerr': keyword_118261, 'fmt': keyword_118263, 'kwargs_118286': kwargs_118286, 'ecolor': keyword_118265, 'errorevery': keyword_118281, 'capthick': keyword_118283, 'xuplims': keyword_118279, 'elinewidth': keyword_118267, 'data': keyword_118285, 'yerr': keyword_118259}
    # Getting the type of 'ax' (line 2847)
    ax_118254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2847, 14), 'ax', False)
    # Obtaining the member 'errorbar' of a type (line 2847)
    errorbar_118255 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2847, 14), ax_118254, 'errorbar')
    # Calling errorbar(args, kwargs) (line 2847)
    errorbar_call_result_118288 = invoke(stypy.reporting.localization.Localization(__file__, 2847, 14), errorbar_118255, *[x_118256, y_118257], **kwargs_118287)
    
    # Assigning a type to the variable 'ret' (line 2847)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2847, 8), 'ret', errorbar_call_result_118288)
    
    # finally branch of the try-finally block (line 2846)
    
    # Assigning a Name to a Attribute (line 2854):
    
    # Assigning a Name to a Attribute (line 2854):
    # Getting the type of 'washold' (line 2854)
    washold_118289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2854, 19), 'washold')
    # Getting the type of 'ax' (line 2854)
    ax_118290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2854, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2854)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2854, 8), ax_118290, '_hold', washold_118289)
    
    # Getting the type of 'ret' (line 2856)
    ret_118291 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2856, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2856)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2856, 4), 'stypy_return_type', ret_118291)
    
    # ################# End of 'errorbar(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'errorbar' in the type store
    # Getting the type of 'stypy_return_type' (line 2831)
    stypy_return_type_118292 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2831, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118292)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'errorbar'
    return stypy_return_type_118292

# Assigning a type to the variable 'errorbar' (line 2831)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2831, 0), 'errorbar', errorbar)

@norecursion
def eventplot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_118293 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2861, 37), 'unicode', u'horizontal')
    int_118294 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2861, 63), 'int')
    int_118295 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2861, 78), 'int')
    # Getting the type of 'None' (line 2862)
    None_118296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 25), 'None')
    # Getting the type of 'None' (line 2862)
    None_118297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 38), 'None')
    unicode_118298 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2862, 55), 'unicode', u'solid')
    # Getting the type of 'None' (line 2862)
    None_118299 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2862, 69), 'None')
    # Getting the type of 'None' (line 2863)
    None_118300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2863, 19), 'None')
    defaults = [unicode_118293, int_118294, int_118295, None_118296, None_118297, unicode_118298, None_118299, None_118300]
    # Create a new context for function 'eventplot'
    module_type_store = module_type_store.open_function_context('eventplot', 2860, 0, False)
    
    # Passed parameters checking function
    eventplot.stypy_localization = localization
    eventplot.stypy_type_of_self = None
    eventplot.stypy_type_store = module_type_store
    eventplot.stypy_function_name = 'eventplot'
    eventplot.stypy_param_names_list = ['positions', 'orientation', 'lineoffsets', 'linelengths', 'linewidths', 'colors', 'linestyles', 'hold', 'data']
    eventplot.stypy_varargs_param_name = None
    eventplot.stypy_kwargs_param_name = 'kwargs'
    eventplot.stypy_call_defaults = defaults
    eventplot.stypy_call_varargs = varargs
    eventplot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'eventplot', ['positions', 'orientation', 'lineoffsets', 'linelengths', 'linewidths', 'colors', 'linestyles', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'eventplot', localization, ['positions', 'orientation', 'lineoffsets', 'linelengths', 'linewidths', 'colors', 'linestyles', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'eventplot(...)' code ##################

    
    # Assigning a Call to a Name (line 2864):
    
    # Assigning a Call to a Name (line 2864):
    
    # Call to gca(...): (line 2864)
    # Processing the call keyword arguments (line 2864)
    kwargs_118302 = {}
    # Getting the type of 'gca' (line 2864)
    gca_118301 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2864, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2864)
    gca_call_result_118303 = invoke(stypy.reporting.localization.Localization(__file__, 2864, 9), gca_118301, *[], **kwargs_118302)
    
    # Assigning a type to the variable 'ax' (line 2864)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2864, 4), 'ax', gca_call_result_118303)
    
    # Assigning a Attribute to a Name (line 2867):
    
    # Assigning a Attribute to a Name (line 2867):
    # Getting the type of 'ax' (line 2867)
    ax_118304 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2867, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2867)
    _hold_118305 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2867, 14), ax_118304, '_hold')
    # Assigning a type to the variable 'washold' (line 2867)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2867, 4), 'washold', _hold_118305)
    
    # Type idiom detected: calculating its left and rigth part (line 2869)
    # Getting the type of 'hold' (line 2869)
    hold_118306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2869, 4), 'hold')
    # Getting the type of 'None' (line 2869)
    None_118307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2869, 19), 'None')
    
    (may_be_118308, more_types_in_union_118309) = may_not_be_none(hold_118306, None_118307)

    if may_be_118308:

        if more_types_in_union_118309:
            # Runtime conditional SSA (line 2869)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2870):
        
        # Assigning a Name to a Attribute (line 2870):
        # Getting the type of 'hold' (line 2870)
        hold_118310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2870, 19), 'hold')
        # Getting the type of 'ax' (line 2870)
        ax_118311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2870, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2870)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2870, 8), ax_118311, '_hold', hold_118310)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2871, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2871)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118312 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2871, 8), 'matplotlib.cbook')

        if (type(import_118312) is not StypyTypeError):

            if (import_118312 != 'pyd_module'):
                __import__(import_118312)
                sys_modules_118313 = sys.modules[import_118312]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2871, 8), 'matplotlib.cbook', sys_modules_118313.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2871, 8), __file__, sys_modules_118313, sys_modules_118313.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2871, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2871)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2871, 8), 'matplotlib.cbook', import_118312)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2872)
        # Processing the call arguments (line 2872)
        unicode_118316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2872, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2873)
        mplDeprecation_118317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2873, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2872)
        kwargs_118318 = {}
        # Getting the type of 'warnings' (line 2872)
        warnings_118314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2872, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2872)
        warn_118315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2872, 8), warnings_118314, 'warn')
        # Calling warn(args, kwargs) (line 2872)
        warn_call_result_118319 = invoke(stypy.reporting.localization.Localization(__file__, 2872, 8), warn_118315, *[unicode_118316, mplDeprecation_118317], **kwargs_118318)
        

        if more_types_in_union_118309:
            # SSA join for if statement (line 2869)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2874)
    
    # Assigning a Call to a Name (line 2875):
    
    # Assigning a Call to a Name (line 2875):
    
    # Call to eventplot(...): (line 2875)
    # Processing the call arguments (line 2875)
    # Getting the type of 'positions' (line 2875)
    positions_118322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2875, 27), 'positions', False)
    # Processing the call keyword arguments (line 2875)
    # Getting the type of 'orientation' (line 2875)
    orientation_118323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2875, 50), 'orientation', False)
    keyword_118324 = orientation_118323
    # Getting the type of 'lineoffsets' (line 2876)
    lineoffsets_118325 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2876, 39), 'lineoffsets', False)
    keyword_118326 = lineoffsets_118325
    # Getting the type of 'linelengths' (line 2876)
    linelengths_118327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2876, 64), 'linelengths', False)
    keyword_118328 = linelengths_118327
    # Getting the type of 'linewidths' (line 2877)
    linewidths_118329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2877, 38), 'linewidths', False)
    keyword_118330 = linewidths_118329
    # Getting the type of 'colors' (line 2877)
    colors_118331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2877, 57), 'colors', False)
    keyword_118332 = colors_118331
    # Getting the type of 'linestyles' (line 2878)
    linestyles_118333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 38), 'linestyles', False)
    keyword_118334 = linestyles_118333
    # Getting the type of 'data' (line 2878)
    data_118335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 55), 'data', False)
    keyword_118336 = data_118335
    # Getting the type of 'kwargs' (line 2878)
    kwargs_118337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2878, 63), 'kwargs', False)
    kwargs_118338 = {'orientation': keyword_118324, 'linestyles': keyword_118334, 'linelengths': keyword_118328, 'kwargs_118337': kwargs_118337, 'linewidths': keyword_118330, 'colors': keyword_118332, 'data': keyword_118336, 'lineoffsets': keyword_118326}
    # Getting the type of 'ax' (line 2875)
    ax_118320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2875, 14), 'ax', False)
    # Obtaining the member 'eventplot' of a type (line 2875)
    eventplot_118321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2875, 14), ax_118320, 'eventplot')
    # Calling eventplot(args, kwargs) (line 2875)
    eventplot_call_result_118339 = invoke(stypy.reporting.localization.Localization(__file__, 2875, 14), eventplot_118321, *[positions_118322], **kwargs_118338)
    
    # Assigning a type to the variable 'ret' (line 2875)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2875, 8), 'ret', eventplot_call_result_118339)
    
    # finally branch of the try-finally block (line 2874)
    
    # Assigning a Name to a Attribute (line 2880):
    
    # Assigning a Name to a Attribute (line 2880):
    # Getting the type of 'washold' (line 2880)
    washold_118340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2880, 19), 'washold')
    # Getting the type of 'ax' (line 2880)
    ax_118341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2880, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2880)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2880, 8), ax_118341, '_hold', washold_118340)
    
    # Getting the type of 'ret' (line 2882)
    ret_118342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2882, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2882)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2882, 4), 'stypy_return_type', ret_118342)
    
    # ################# End of 'eventplot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'eventplot' in the type store
    # Getting the type of 'stypy_return_type' (line 2860)
    stypy_return_type_118343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2860, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118343)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'eventplot'
    return stypy_return_type_118343

# Assigning a type to the variable 'eventplot' (line 2860)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2860, 0), 'eventplot', eventplot)

@norecursion
def fill(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'fill'
    module_type_store = module_type_store.open_function_context('fill', 2886, 0, False)
    
    # Passed parameters checking function
    fill.stypy_localization = localization
    fill.stypy_type_of_self = None
    fill.stypy_type_store = module_type_store
    fill.stypy_function_name = 'fill'
    fill.stypy_param_names_list = []
    fill.stypy_varargs_param_name = 'args'
    fill.stypy_kwargs_param_name = 'kwargs'
    fill.stypy_call_defaults = defaults
    fill.stypy_call_varargs = varargs
    fill.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fill', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fill', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fill(...)' code ##################

    
    # Assigning a Call to a Name (line 2888):
    
    # Assigning a Call to a Name (line 2888):
    
    # Call to gca(...): (line 2888)
    # Processing the call keyword arguments (line 2888)
    kwargs_118345 = {}
    # Getting the type of 'gca' (line 2888)
    gca_118344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2888, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2888)
    gca_call_result_118346 = invoke(stypy.reporting.localization.Localization(__file__, 2888, 9), gca_118344, *[], **kwargs_118345)
    
    # Assigning a type to the variable 'ax' (line 2888)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2888, 4), 'ax', gca_call_result_118346)
    
    # Assigning a Attribute to a Name (line 2891):
    
    # Assigning a Attribute to a Name (line 2891):
    # Getting the type of 'ax' (line 2891)
    ax_118347 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2891, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2891)
    _hold_118348 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2891, 14), ax_118347, '_hold')
    # Assigning a type to the variable 'washold' (line 2891)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2891, 4), 'washold', _hold_118348)
    
    # Assigning a Call to a Name (line 2892):
    
    # Assigning a Call to a Name (line 2892):
    
    # Call to pop(...): (line 2892)
    # Processing the call arguments (line 2892)
    unicode_118351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2892, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 2892)
    None_118352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2892, 30), 'None', False)
    # Processing the call keyword arguments (line 2892)
    kwargs_118353 = {}
    # Getting the type of 'kwargs' (line 2892)
    kwargs_118349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2892, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 2892)
    pop_118350 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2892, 11), kwargs_118349, 'pop')
    # Calling pop(args, kwargs) (line 2892)
    pop_call_result_118354 = invoke(stypy.reporting.localization.Localization(__file__, 2892, 11), pop_118350, *[unicode_118351, None_118352], **kwargs_118353)
    
    # Assigning a type to the variable 'hold' (line 2892)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2892, 4), 'hold', pop_call_result_118354)
    
    # Type idiom detected: calculating its left and rigth part (line 2893)
    # Getting the type of 'hold' (line 2893)
    hold_118355 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2893, 4), 'hold')
    # Getting the type of 'None' (line 2893)
    None_118356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2893, 19), 'None')
    
    (may_be_118357, more_types_in_union_118358) = may_not_be_none(hold_118355, None_118356)

    if may_be_118357:

        if more_types_in_union_118358:
            # Runtime conditional SSA (line 2893)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2894):
        
        # Assigning a Name to a Attribute (line 2894):
        # Getting the type of 'hold' (line 2894)
        hold_118359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2894, 19), 'hold')
        # Getting the type of 'ax' (line 2894)
        ax_118360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2894, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2894)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2894, 8), ax_118360, '_hold', hold_118359)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2895, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2895)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118361 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2895, 8), 'matplotlib.cbook')

        if (type(import_118361) is not StypyTypeError):

            if (import_118361 != 'pyd_module'):
                __import__(import_118361)
                sys_modules_118362 = sys.modules[import_118361]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2895, 8), 'matplotlib.cbook', sys_modules_118362.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2895, 8), __file__, sys_modules_118362, sys_modules_118362.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2895, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2895)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2895, 8), 'matplotlib.cbook', import_118361)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2896)
        # Processing the call arguments (line 2896)
        unicode_118365 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2896, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2897)
        mplDeprecation_118366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2897, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2896)
        kwargs_118367 = {}
        # Getting the type of 'warnings' (line 2896)
        warnings_118363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2896, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2896)
        warn_118364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2896, 8), warnings_118363, 'warn')
        # Calling warn(args, kwargs) (line 2896)
        warn_call_result_118368 = invoke(stypy.reporting.localization.Localization(__file__, 2896, 8), warn_118364, *[unicode_118365, mplDeprecation_118366], **kwargs_118367)
        

        if more_types_in_union_118358:
            # SSA join for if statement (line 2893)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2898)
    
    # Assigning a Call to a Name (line 2899):
    
    # Assigning a Call to a Name (line 2899):
    
    # Call to fill(...): (line 2899)
    # Getting the type of 'args' (line 2899)
    args_118371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 23), 'args', False)
    # Processing the call keyword arguments (line 2899)
    # Getting the type of 'kwargs' (line 2899)
    kwargs_118372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 31), 'kwargs', False)
    kwargs_118373 = {'kwargs_118372': kwargs_118372}
    # Getting the type of 'ax' (line 2899)
    ax_118369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2899, 14), 'ax', False)
    # Obtaining the member 'fill' of a type (line 2899)
    fill_118370 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2899, 14), ax_118369, 'fill')
    # Calling fill(args, kwargs) (line 2899)
    fill_call_result_118374 = invoke(stypy.reporting.localization.Localization(__file__, 2899, 14), fill_118370, *[args_118371], **kwargs_118373)
    
    # Assigning a type to the variable 'ret' (line 2899)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2899, 8), 'ret', fill_call_result_118374)
    
    # finally branch of the try-finally block (line 2898)
    
    # Assigning a Name to a Attribute (line 2901):
    
    # Assigning a Name to a Attribute (line 2901):
    # Getting the type of 'washold' (line 2901)
    washold_118375 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 19), 'washold')
    # Getting the type of 'ax' (line 2901)
    ax_118376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2901, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2901)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2901, 8), ax_118376, '_hold', washold_118375)
    
    # Getting the type of 'ret' (line 2903)
    ret_118377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2903, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2903)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2903, 4), 'stypy_return_type', ret_118377)
    
    # ################# End of 'fill(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fill' in the type store
    # Getting the type of 'stypy_return_type' (line 2886)
    stypy_return_type_118378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2886, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118378)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fill'
    return stypy_return_type_118378

# Assigning a type to the variable 'fill' (line 2886)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2886, 0), 'fill', fill)

@norecursion
def fill_between(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_118379 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2908, 27), 'int')
    # Getting the type of 'None' (line 2908)
    None_118380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 36), 'None')
    # Getting the type of 'False' (line 2908)
    False_118381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 54), 'False')
    # Getting the type of 'None' (line 2908)
    None_118382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2908, 66), 'None')
    # Getting the type of 'None' (line 2909)
    None_118383 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2909, 22), 'None')
    # Getting the type of 'None' (line 2909)
    None_118384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2909, 33), 'None')
    defaults = [int_118379, None_118380, False_118381, None_118382, None_118383, None_118384]
    # Create a new context for function 'fill_between'
    module_type_store = module_type_store.open_function_context('fill_between', 2907, 0, False)
    
    # Passed parameters checking function
    fill_between.stypy_localization = localization
    fill_between.stypy_type_of_self = None
    fill_between.stypy_type_store = module_type_store
    fill_between.stypy_function_name = 'fill_between'
    fill_between.stypy_param_names_list = ['x', 'y1', 'y2', 'where', 'interpolate', 'step', 'hold', 'data']
    fill_between.stypy_varargs_param_name = None
    fill_between.stypy_kwargs_param_name = 'kwargs'
    fill_between.stypy_call_defaults = defaults
    fill_between.stypy_call_varargs = varargs
    fill_between.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fill_between', ['x', 'y1', 'y2', 'where', 'interpolate', 'step', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fill_between', localization, ['x', 'y1', 'y2', 'where', 'interpolate', 'step', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fill_between(...)' code ##################

    
    # Assigning a Call to a Name (line 2910):
    
    # Assigning a Call to a Name (line 2910):
    
    # Call to gca(...): (line 2910)
    # Processing the call keyword arguments (line 2910)
    kwargs_118386 = {}
    # Getting the type of 'gca' (line 2910)
    gca_118385 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2910, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2910)
    gca_call_result_118387 = invoke(stypy.reporting.localization.Localization(__file__, 2910, 9), gca_118385, *[], **kwargs_118386)
    
    # Assigning a type to the variable 'ax' (line 2910)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2910, 4), 'ax', gca_call_result_118387)
    
    # Assigning a Attribute to a Name (line 2913):
    
    # Assigning a Attribute to a Name (line 2913):
    # Getting the type of 'ax' (line 2913)
    ax_118388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2913, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2913)
    _hold_118389 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2913, 14), ax_118388, '_hold')
    # Assigning a type to the variable 'washold' (line 2913)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2913, 4), 'washold', _hold_118389)
    
    # Type idiom detected: calculating its left and rigth part (line 2915)
    # Getting the type of 'hold' (line 2915)
    hold_118390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2915, 4), 'hold')
    # Getting the type of 'None' (line 2915)
    None_118391 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2915, 19), 'None')
    
    (may_be_118392, more_types_in_union_118393) = may_not_be_none(hold_118390, None_118391)

    if may_be_118392:

        if more_types_in_union_118393:
            # Runtime conditional SSA (line 2915)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2916):
        
        # Assigning a Name to a Attribute (line 2916):
        # Getting the type of 'hold' (line 2916)
        hold_118394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 19), 'hold')
        # Getting the type of 'ax' (line 2916)
        ax_118395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2916, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2916)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2916, 8), ax_118395, '_hold', hold_118394)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2917, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2917)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118396 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2917, 8), 'matplotlib.cbook')

        if (type(import_118396) is not StypyTypeError):

            if (import_118396 != 'pyd_module'):
                __import__(import_118396)
                sys_modules_118397 = sys.modules[import_118396]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2917, 8), 'matplotlib.cbook', sys_modules_118397.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2917, 8), __file__, sys_modules_118397, sys_modules_118397.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2917, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2917)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2917, 8), 'matplotlib.cbook', import_118396)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2918)
        # Processing the call arguments (line 2918)
        unicode_118400 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2918, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2919)
        mplDeprecation_118401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2919, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2918)
        kwargs_118402 = {}
        # Getting the type of 'warnings' (line 2918)
        warnings_118398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2918, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2918)
        warn_118399 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2918, 8), warnings_118398, 'warn')
        # Calling warn(args, kwargs) (line 2918)
        warn_call_result_118403 = invoke(stypy.reporting.localization.Localization(__file__, 2918, 8), warn_118399, *[unicode_118400, mplDeprecation_118401], **kwargs_118402)
        

        if more_types_in_union_118393:
            # SSA join for if statement (line 2915)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2920)
    
    # Assigning a Call to a Name (line 2921):
    
    # Assigning a Call to a Name (line 2921):
    
    # Call to fill_between(...): (line 2921)
    # Processing the call arguments (line 2921)
    # Getting the type of 'x' (line 2921)
    x_118406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 30), 'x', False)
    # Getting the type of 'y1' (line 2921)
    y1_118407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 33), 'y1', False)
    # Processing the call keyword arguments (line 2921)
    # Getting the type of 'y2' (line 2921)
    y2_118408 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 40), 'y2', False)
    keyword_118409 = y2_118408
    # Getting the type of 'where' (line 2921)
    where_118410 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 50), 'where', False)
    keyword_118411 = where_118410
    # Getting the type of 'interpolate' (line 2922)
    interpolate_118412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 42), 'interpolate', False)
    keyword_118413 = interpolate_118412
    # Getting the type of 'step' (line 2922)
    step_118414 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 60), 'step', False)
    keyword_118415 = step_118414
    # Getting the type of 'data' (line 2922)
    data_118416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2922, 71), 'data', False)
    keyword_118417 = data_118416
    # Getting the type of 'kwargs' (line 2923)
    kwargs_118418 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2923, 32), 'kwargs', False)
    kwargs_118419 = {'where': keyword_118411, 'interpolate': keyword_118413, 'kwargs_118418': kwargs_118418, 'step': keyword_118415, 'y2': keyword_118409, 'data': keyword_118417}
    # Getting the type of 'ax' (line 2921)
    ax_118404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2921, 14), 'ax', False)
    # Obtaining the member 'fill_between' of a type (line 2921)
    fill_between_118405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2921, 14), ax_118404, 'fill_between')
    # Calling fill_between(args, kwargs) (line 2921)
    fill_between_call_result_118420 = invoke(stypy.reporting.localization.Localization(__file__, 2921, 14), fill_between_118405, *[x_118406, y1_118407], **kwargs_118419)
    
    # Assigning a type to the variable 'ret' (line 2921)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2921, 8), 'ret', fill_between_call_result_118420)
    
    # finally branch of the try-finally block (line 2920)
    
    # Assigning a Name to a Attribute (line 2925):
    
    # Assigning a Name to a Attribute (line 2925):
    # Getting the type of 'washold' (line 2925)
    washold_118421 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 19), 'washold')
    # Getting the type of 'ax' (line 2925)
    ax_118422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2925, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2925)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2925, 8), ax_118422, '_hold', washold_118421)
    
    # Getting the type of 'ret' (line 2927)
    ret_118423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2927, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2927)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2927, 4), 'stypy_return_type', ret_118423)
    
    # ################# End of 'fill_between(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fill_between' in the type store
    # Getting the type of 'stypy_return_type' (line 2907)
    stypy_return_type_118424 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2907, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118424)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fill_between'
    return stypy_return_type_118424

# Assigning a type to the variable 'fill_between' (line 2907)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2907, 0), 'fill_between', fill_between)

@norecursion
def fill_betweenx(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_118425 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2932, 28), 'int')
    # Getting the type of 'None' (line 2932)
    None_118426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 37), 'None')
    # Getting the type of 'None' (line 2932)
    None_118427 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 48), 'None')
    # Getting the type of 'False' (line 2932)
    False_118428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2932, 66), 'False')
    # Getting the type of 'None' (line 2933)
    None_118429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 23), 'None')
    # Getting the type of 'None' (line 2933)
    None_118430 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2933, 34), 'None')
    defaults = [int_118425, None_118426, None_118427, False_118428, None_118429, None_118430]
    # Create a new context for function 'fill_betweenx'
    module_type_store = module_type_store.open_function_context('fill_betweenx', 2931, 0, False)
    
    # Passed parameters checking function
    fill_betweenx.stypy_localization = localization
    fill_betweenx.stypy_type_of_self = None
    fill_betweenx.stypy_type_store = module_type_store
    fill_betweenx.stypy_function_name = 'fill_betweenx'
    fill_betweenx.stypy_param_names_list = ['y', 'x1', 'x2', 'where', 'step', 'interpolate', 'hold', 'data']
    fill_betweenx.stypy_varargs_param_name = None
    fill_betweenx.stypy_kwargs_param_name = 'kwargs'
    fill_betweenx.stypy_call_defaults = defaults
    fill_betweenx.stypy_call_varargs = varargs
    fill_betweenx.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'fill_betweenx', ['y', 'x1', 'x2', 'where', 'step', 'interpolate', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'fill_betweenx', localization, ['y', 'x1', 'x2', 'where', 'step', 'interpolate', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'fill_betweenx(...)' code ##################

    
    # Assigning a Call to a Name (line 2934):
    
    # Assigning a Call to a Name (line 2934):
    
    # Call to gca(...): (line 2934)
    # Processing the call keyword arguments (line 2934)
    kwargs_118432 = {}
    # Getting the type of 'gca' (line 2934)
    gca_118431 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2934, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2934)
    gca_call_result_118433 = invoke(stypy.reporting.localization.Localization(__file__, 2934, 9), gca_118431, *[], **kwargs_118432)
    
    # Assigning a type to the variable 'ax' (line 2934)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2934, 4), 'ax', gca_call_result_118433)
    
    # Assigning a Attribute to a Name (line 2937):
    
    # Assigning a Attribute to a Name (line 2937):
    # Getting the type of 'ax' (line 2937)
    ax_118434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2937, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2937)
    _hold_118435 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2937, 14), ax_118434, '_hold')
    # Assigning a type to the variable 'washold' (line 2937)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2937, 4), 'washold', _hold_118435)
    
    # Type idiom detected: calculating its left and rigth part (line 2939)
    # Getting the type of 'hold' (line 2939)
    hold_118436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2939, 4), 'hold')
    # Getting the type of 'None' (line 2939)
    None_118437 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2939, 19), 'None')
    
    (may_be_118438, more_types_in_union_118439) = may_not_be_none(hold_118436, None_118437)

    if may_be_118438:

        if more_types_in_union_118439:
            # Runtime conditional SSA (line 2939)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2940):
        
        # Assigning a Name to a Attribute (line 2940):
        # Getting the type of 'hold' (line 2940)
        hold_118440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2940, 19), 'hold')
        # Getting the type of 'ax' (line 2940)
        ax_118441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2940, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2940)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2940, 8), ax_118441, '_hold', hold_118440)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2941, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2941)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118442 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2941, 8), 'matplotlib.cbook')

        if (type(import_118442) is not StypyTypeError):

            if (import_118442 != 'pyd_module'):
                __import__(import_118442)
                sys_modules_118443 = sys.modules[import_118442]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2941, 8), 'matplotlib.cbook', sys_modules_118443.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2941, 8), __file__, sys_modules_118443, sys_modules_118443.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2941, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2941)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2941, 8), 'matplotlib.cbook', import_118442)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2942)
        # Processing the call arguments (line 2942)
        unicode_118446 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2942, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2943)
        mplDeprecation_118447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2943, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2942)
        kwargs_118448 = {}
        # Getting the type of 'warnings' (line 2942)
        warnings_118444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2942, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2942)
        warn_118445 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2942, 8), warnings_118444, 'warn')
        # Calling warn(args, kwargs) (line 2942)
        warn_call_result_118449 = invoke(stypy.reporting.localization.Localization(__file__, 2942, 8), warn_118445, *[unicode_118446, mplDeprecation_118447], **kwargs_118448)
        

        if more_types_in_union_118439:
            # SSA join for if statement (line 2939)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2944)
    
    # Assigning a Call to a Name (line 2945):
    
    # Assigning a Call to a Name (line 2945):
    
    # Call to fill_betweenx(...): (line 2945)
    # Processing the call arguments (line 2945)
    # Getting the type of 'y' (line 2945)
    y_118452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 31), 'y', False)
    # Getting the type of 'x1' (line 2945)
    x1_118453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 34), 'x1', False)
    # Processing the call keyword arguments (line 2945)
    # Getting the type of 'x2' (line 2945)
    x2_118454 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 41), 'x2', False)
    keyword_118455 = x2_118454
    # Getting the type of 'where' (line 2945)
    where_118456 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 51), 'where', False)
    keyword_118457 = where_118456
    # Getting the type of 'step' (line 2945)
    step_118458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 63), 'step', False)
    keyword_118459 = step_118458
    # Getting the type of 'interpolate' (line 2946)
    interpolate_118460 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 43), 'interpolate', False)
    keyword_118461 = interpolate_118460
    # Getting the type of 'data' (line 2946)
    data_118462 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 61), 'data', False)
    keyword_118463 = data_118462
    # Getting the type of 'kwargs' (line 2946)
    kwargs_118464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2946, 69), 'kwargs', False)
    kwargs_118465 = {'where': keyword_118457, 'interpolate': keyword_118461, 'step': keyword_118459, 'kwargs_118464': kwargs_118464, 'x2': keyword_118455, 'data': keyword_118463}
    # Getting the type of 'ax' (line 2945)
    ax_118450 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2945, 14), 'ax', False)
    # Obtaining the member 'fill_betweenx' of a type (line 2945)
    fill_betweenx_118451 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2945, 14), ax_118450, 'fill_betweenx')
    # Calling fill_betweenx(args, kwargs) (line 2945)
    fill_betweenx_call_result_118466 = invoke(stypy.reporting.localization.Localization(__file__, 2945, 14), fill_betweenx_118451, *[y_118452, x1_118453], **kwargs_118465)
    
    # Assigning a type to the variable 'ret' (line 2945)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2945, 8), 'ret', fill_betweenx_call_result_118466)
    
    # finally branch of the try-finally block (line 2944)
    
    # Assigning a Name to a Attribute (line 2948):
    
    # Assigning a Name to a Attribute (line 2948):
    # Getting the type of 'washold' (line 2948)
    washold_118467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 19), 'washold')
    # Getting the type of 'ax' (line 2948)
    ax_118468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2948, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2948)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2948, 8), ax_118468, '_hold', washold_118467)
    
    # Getting the type of 'ret' (line 2950)
    ret_118469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2950, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2950)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2950, 4), 'stypy_return_type', ret_118469)
    
    # ################# End of 'fill_betweenx(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'fill_betweenx' in the type store
    # Getting the type of 'stypy_return_type' (line 2931)
    stypy_return_type_118470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2931, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118470)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'fill_betweenx'
    return stypy_return_type_118470

# Assigning a type to the variable 'fill_betweenx' (line 2931)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2931, 0), 'fill_betweenx', fill_betweenx)

@norecursion
def hexbin(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2955)
    None_118471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2955, 19), 'None')
    int_118472 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2955, 34), 'int')
    # Getting the type of 'None' (line 2955)
    None_118473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2955, 44), 'None')
    unicode_118474 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2955, 57), 'unicode', u'linear')
    unicode_118475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2956, 18), 'unicode', u'linear')
    # Getting the type of 'None' (line 2956)
    None_118476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 35), 'None')
    # Getting the type of 'None' (line 2956)
    None_118477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 46), 'None')
    # Getting the type of 'None' (line 2956)
    None_118478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 57), 'None')
    # Getting the type of 'None' (line 2956)
    None_118479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2956, 68), 'None')
    # Getting the type of 'None' (line 2957)
    None_118480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 16), 'None')
    # Getting the type of 'None' (line 2957)
    None_118481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 28), 'None')
    # Getting the type of 'None' (line 2957)
    None_118482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2957, 45), 'None')
    unicode_118483 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2957, 62), 'unicode', u'face')
    # Getting the type of 'np' (line 2958)
    np_118484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 29), 'np')
    # Obtaining the member 'mean' of a type (line 2958)
    mean_118485 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2958, 29), np_118484, 'mean')
    # Getting the type of 'None' (line 2958)
    None_118486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 45), 'None')
    # Getting the type of 'False' (line 2958)
    False_118487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 61), 'False')
    # Getting the type of 'None' (line 2958)
    None_118488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2958, 73), 'None')
    # Getting the type of 'None' (line 2959)
    None_118489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2959, 16), 'None')
    defaults = [None_118471, int_118472, None_118473, unicode_118474, unicode_118475, None_118476, None_118477, None_118478, None_118479, None_118480, None_118481, None_118482, unicode_118483, mean_118485, None_118486, False_118487, None_118488, None_118489]
    # Create a new context for function 'hexbin'
    module_type_store = module_type_store.open_function_context('hexbin', 2954, 0, False)
    
    # Passed parameters checking function
    hexbin.stypy_localization = localization
    hexbin.stypy_type_of_self = None
    hexbin.stypy_type_store = module_type_store
    hexbin.stypy_function_name = 'hexbin'
    hexbin.stypy_param_names_list = ['x', 'y', 'C', 'gridsize', 'bins', 'xscale', 'yscale', 'extent', 'cmap', 'norm', 'vmin', 'vmax', 'alpha', 'linewidths', 'edgecolors', 'reduce_C_function', 'mincnt', 'marginals', 'hold', 'data']
    hexbin.stypy_varargs_param_name = None
    hexbin.stypy_kwargs_param_name = 'kwargs'
    hexbin.stypy_call_defaults = defaults
    hexbin.stypy_call_varargs = varargs
    hexbin.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hexbin', ['x', 'y', 'C', 'gridsize', 'bins', 'xscale', 'yscale', 'extent', 'cmap', 'norm', 'vmin', 'vmax', 'alpha', 'linewidths', 'edgecolors', 'reduce_C_function', 'mincnt', 'marginals', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hexbin', localization, ['x', 'y', 'C', 'gridsize', 'bins', 'xscale', 'yscale', 'extent', 'cmap', 'norm', 'vmin', 'vmax', 'alpha', 'linewidths', 'edgecolors', 'reduce_C_function', 'mincnt', 'marginals', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hexbin(...)' code ##################

    
    # Assigning a Call to a Name (line 2960):
    
    # Assigning a Call to a Name (line 2960):
    
    # Call to gca(...): (line 2960)
    # Processing the call keyword arguments (line 2960)
    kwargs_118491 = {}
    # Getting the type of 'gca' (line 2960)
    gca_118490 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2960, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2960)
    gca_call_result_118492 = invoke(stypy.reporting.localization.Localization(__file__, 2960, 9), gca_118490, *[], **kwargs_118491)
    
    # Assigning a type to the variable 'ax' (line 2960)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2960, 4), 'ax', gca_call_result_118492)
    
    # Assigning a Attribute to a Name (line 2963):
    
    # Assigning a Attribute to a Name (line 2963):
    # Getting the type of 'ax' (line 2963)
    ax_118493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2963, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2963)
    _hold_118494 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2963, 14), ax_118493, '_hold')
    # Assigning a type to the variable 'washold' (line 2963)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2963, 4), 'washold', _hold_118494)
    
    # Type idiom detected: calculating its left and rigth part (line 2965)
    # Getting the type of 'hold' (line 2965)
    hold_118495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2965, 4), 'hold')
    # Getting the type of 'None' (line 2965)
    None_118496 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2965, 19), 'None')
    
    (may_be_118497, more_types_in_union_118498) = may_not_be_none(hold_118495, None_118496)

    if may_be_118497:

        if more_types_in_union_118498:
            # Runtime conditional SSA (line 2965)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2966):
        
        # Assigning a Name to a Attribute (line 2966):
        # Getting the type of 'hold' (line 2966)
        hold_118499 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2966, 19), 'hold')
        # Getting the type of 'ax' (line 2966)
        ax_118500 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2966, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2966)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2966, 8), ax_118500, '_hold', hold_118499)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2967, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2967)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118501 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2967, 8), 'matplotlib.cbook')

        if (type(import_118501) is not StypyTypeError):

            if (import_118501 != 'pyd_module'):
                __import__(import_118501)
                sys_modules_118502 = sys.modules[import_118501]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2967, 8), 'matplotlib.cbook', sys_modules_118502.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2967, 8), __file__, sys_modules_118502, sys_modules_118502.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2967, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2967)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2967, 8), 'matplotlib.cbook', import_118501)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2968)
        # Processing the call arguments (line 2968)
        unicode_118505 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2968, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2969)
        mplDeprecation_118506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2969, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2968)
        kwargs_118507 = {}
        # Getting the type of 'warnings' (line 2968)
        warnings_118503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2968, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2968)
        warn_118504 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2968, 8), warnings_118503, 'warn')
        # Calling warn(args, kwargs) (line 2968)
        warn_call_result_118508 = invoke(stypy.reporting.localization.Localization(__file__, 2968, 8), warn_118504, *[unicode_118505, mplDeprecation_118506], **kwargs_118507)
        

        if more_types_in_union_118498:
            # SSA join for if statement (line 2965)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2970)
    
    # Assigning a Call to a Name (line 2971):
    
    # Assigning a Call to a Name (line 2971):
    
    # Call to hexbin(...): (line 2971)
    # Processing the call arguments (line 2971)
    # Getting the type of 'x' (line 2971)
    x_118511 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 24), 'x', False)
    # Getting the type of 'y' (line 2971)
    y_118512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 27), 'y', False)
    # Processing the call keyword arguments (line 2971)
    # Getting the type of 'C' (line 2971)
    C_118513 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 32), 'C', False)
    keyword_118514 = C_118513
    # Getting the type of 'gridsize' (line 2971)
    gridsize_118515 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 44), 'gridsize', False)
    keyword_118516 = gridsize_118515
    # Getting the type of 'bins' (line 2971)
    bins_118517 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 59), 'bins', False)
    keyword_118518 = bins_118517
    # Getting the type of 'xscale' (line 2971)
    xscale_118519 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 72), 'xscale', False)
    keyword_118520 = xscale_118519
    # Getting the type of 'yscale' (line 2972)
    yscale_118521 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 31), 'yscale', False)
    keyword_118522 = yscale_118521
    # Getting the type of 'extent' (line 2972)
    extent_118523 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 46), 'extent', False)
    keyword_118524 = extent_118523
    # Getting the type of 'cmap' (line 2972)
    cmap_118525 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 59), 'cmap', False)
    keyword_118526 = cmap_118525
    # Getting the type of 'norm' (line 2972)
    norm_118527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2972, 70), 'norm', False)
    keyword_118528 = norm_118527
    # Getting the type of 'vmin' (line 2973)
    vmin_118529 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2973, 29), 'vmin', False)
    keyword_118530 = vmin_118529
    # Getting the type of 'vmax' (line 2973)
    vmax_118531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2973, 40), 'vmax', False)
    keyword_118532 = vmax_118531
    # Getting the type of 'alpha' (line 2973)
    alpha_118533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2973, 52), 'alpha', False)
    keyword_118534 = alpha_118533
    # Getting the type of 'linewidths' (line 2974)
    linewidths_118535 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2974, 35), 'linewidths', False)
    keyword_118536 = linewidths_118535
    # Getting the type of 'edgecolors' (line 2974)
    edgecolors_118537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2974, 58), 'edgecolors', False)
    keyword_118538 = edgecolors_118537
    # Getting the type of 'reduce_C_function' (line 2975)
    reduce_C_function_118539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2975, 42), 'reduce_C_function', False)
    keyword_118540 = reduce_C_function_118539
    # Getting the type of 'mincnt' (line 2975)
    mincnt_118541 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2975, 68), 'mincnt', False)
    keyword_118542 = mincnt_118541
    # Getting the type of 'marginals' (line 2976)
    marginals_118543 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2976, 34), 'marginals', False)
    keyword_118544 = marginals_118543
    # Getting the type of 'data' (line 2976)
    data_118545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2976, 50), 'data', False)
    keyword_118546 = data_118545
    # Getting the type of 'kwargs' (line 2976)
    kwargs_118547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2976, 58), 'kwargs', False)
    kwargs_118548 = {'edgecolors': keyword_118538, 'C': keyword_118514, 'gridsize': keyword_118516, 'vmin': keyword_118530, 'yscale': keyword_118522, 'reduce_C_function': keyword_118540, 'kwargs_118547': kwargs_118547, 'linewidths': keyword_118536, 'vmax': keyword_118532, 'cmap': keyword_118526, 'norm': keyword_118528, 'extent': keyword_118524, 'marginals': keyword_118544, 'xscale': keyword_118520, 'alpha': keyword_118534, 'mincnt': keyword_118542, 'data': keyword_118546, 'bins': keyword_118518}
    # Getting the type of 'ax' (line 2971)
    ax_118509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2971, 14), 'ax', False)
    # Obtaining the member 'hexbin' of a type (line 2971)
    hexbin_118510 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2971, 14), ax_118509, 'hexbin')
    # Calling hexbin(args, kwargs) (line 2971)
    hexbin_call_result_118549 = invoke(stypy.reporting.localization.Localization(__file__, 2971, 14), hexbin_118510, *[x_118511, y_118512], **kwargs_118548)
    
    # Assigning a type to the variable 'ret' (line 2971)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2971, 8), 'ret', hexbin_call_result_118549)
    
    # finally branch of the try-finally block (line 2970)
    
    # Assigning a Name to a Attribute (line 2978):
    
    # Assigning a Name to a Attribute (line 2978):
    # Getting the type of 'washold' (line 2978)
    washold_118550 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 19), 'washold')
    # Getting the type of 'ax' (line 2978)
    ax_118551 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2978, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 2978)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2978, 8), ax_118551, '_hold', washold_118550)
    
    
    # Call to sci(...): (line 2979)
    # Processing the call arguments (line 2979)
    # Getting the type of 'ret' (line 2979)
    ret_118553 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 8), 'ret', False)
    # Processing the call keyword arguments (line 2979)
    kwargs_118554 = {}
    # Getting the type of 'sci' (line 2979)
    sci_118552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2979, 4), 'sci', False)
    # Calling sci(args, kwargs) (line 2979)
    sci_call_result_118555 = invoke(stypy.reporting.localization.Localization(__file__, 2979, 4), sci_118552, *[ret_118553], **kwargs_118554)
    
    # Getting the type of 'ret' (line 2980)
    ret_118556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2980, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 2980)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2980, 4), 'stypy_return_type', ret_118556)
    
    # ################# End of 'hexbin(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hexbin' in the type store
    # Getting the type of 'stypy_return_type' (line 2954)
    stypy_return_type_118557 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2954, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118557)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hexbin'
    return stypy_return_type_118557

# Assigning a type to the variable 'hexbin' (line 2954)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2954, 0), 'hexbin', hexbin)

@norecursion
def hist(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 2985)
    None_118558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 17), 'None')
    # Getting the type of 'None' (line 2985)
    None_118559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 29), 'None')
    # Getting the type of 'None' (line 2985)
    None_118560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 43), 'None')
    # Getting the type of 'None' (line 2985)
    None_118561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 57), 'None')
    # Getting the type of 'False' (line 2985)
    False_118562 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2985, 74), 'False')
    # Getting the type of 'None' (line 2986)
    None_118563 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2986, 16), 'None')
    unicode_118564 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2986, 31), 'unicode', u'bar')
    unicode_118565 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2986, 44), 'unicode', u'mid')
    unicode_118566 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2986, 63), 'unicode', u'vertical')
    # Getting the type of 'None' (line 2987)
    None_118567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 16), 'None')
    # Getting the type of 'False' (line 2987)
    False_118568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 26), 'False')
    # Getting the type of 'None' (line 2987)
    None_118569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 39), 'None')
    # Getting the type of 'None' (line 2987)
    None_118570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 51), 'None')
    # Getting the type of 'False' (line 2987)
    False_118571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2987, 65), 'False')
    # Getting the type of 'None' (line 2988)
    None_118572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2988, 16), 'None')
    # Getting the type of 'None' (line 2988)
    None_118573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2988, 27), 'None')
    # Getting the type of 'None' (line 2988)
    None_118574 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2988, 38), 'None')
    defaults = [None_118558, None_118559, None_118560, None_118561, False_118562, None_118563, unicode_118564, unicode_118565, unicode_118566, None_118567, False_118568, None_118569, None_118570, False_118571, None_118572, None_118573, None_118574]
    # Create a new context for function 'hist'
    module_type_store = module_type_store.open_function_context('hist', 2984, 0, False)
    
    # Passed parameters checking function
    hist.stypy_localization = localization
    hist.stypy_type_of_self = None
    hist.stypy_type_store = module_type_store
    hist.stypy_function_name = 'hist'
    hist.stypy_param_names_list = ['x', 'bins', 'range', 'density', 'weights', 'cumulative', 'bottom', 'histtype', 'align', 'orientation', 'rwidth', 'log', 'color', 'label', 'stacked', 'normed', 'hold', 'data']
    hist.stypy_varargs_param_name = None
    hist.stypy_kwargs_param_name = 'kwargs'
    hist.stypy_call_defaults = defaults
    hist.stypy_call_varargs = varargs
    hist.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hist', ['x', 'bins', 'range', 'density', 'weights', 'cumulative', 'bottom', 'histtype', 'align', 'orientation', 'rwidth', 'log', 'color', 'label', 'stacked', 'normed', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hist', localization, ['x', 'bins', 'range', 'density', 'weights', 'cumulative', 'bottom', 'histtype', 'align', 'orientation', 'rwidth', 'log', 'color', 'label', 'stacked', 'normed', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hist(...)' code ##################

    
    # Assigning a Call to a Name (line 2989):
    
    # Assigning a Call to a Name (line 2989):
    
    # Call to gca(...): (line 2989)
    # Processing the call keyword arguments (line 2989)
    kwargs_118576 = {}
    # Getting the type of 'gca' (line 2989)
    gca_118575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2989, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 2989)
    gca_call_result_118577 = invoke(stypy.reporting.localization.Localization(__file__, 2989, 9), gca_118575, *[], **kwargs_118576)
    
    # Assigning a type to the variable 'ax' (line 2989)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2989, 4), 'ax', gca_call_result_118577)
    
    # Assigning a Attribute to a Name (line 2992):
    
    # Assigning a Attribute to a Name (line 2992):
    # Getting the type of 'ax' (line 2992)
    ax_118578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2992, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 2992)
    _hold_118579 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2992, 14), ax_118578, '_hold')
    # Assigning a type to the variable 'washold' (line 2992)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2992, 4), 'washold', _hold_118579)
    
    # Type idiom detected: calculating its left and rigth part (line 2994)
    # Getting the type of 'hold' (line 2994)
    hold_118580 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2994, 4), 'hold')
    # Getting the type of 'None' (line 2994)
    None_118581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2994, 19), 'None')
    
    (may_be_118582, more_types_in_union_118583) = may_not_be_none(hold_118580, None_118581)

    if may_be_118582:

        if more_types_in_union_118583:
            # Runtime conditional SSA (line 2994)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 2995):
        
        # Assigning a Name to a Attribute (line 2995):
        # Getting the type of 'hold' (line 2995)
        hold_118584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 19), 'hold')
        # Getting the type of 'ax' (line 2995)
        ax_118585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2995, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 2995)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 2995, 8), ax_118585, '_hold', hold_118584)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 2996, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 2996)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118586 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 2996, 8), 'matplotlib.cbook')

        if (type(import_118586) is not StypyTypeError):

            if (import_118586 != 'pyd_module'):
                __import__(import_118586)
                sys_modules_118587 = sys.modules[import_118586]
                import_from_module(stypy.reporting.localization.Localization(__file__, 2996, 8), 'matplotlib.cbook', sys_modules_118587.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 2996, 8), __file__, sys_modules_118587, sys_modules_118587.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 2996, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 2996)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2996, 8), 'matplotlib.cbook', import_118586)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 2997)
        # Processing the call arguments (line 2997)
        unicode_118590 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 2997, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 2998)
        mplDeprecation_118591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2998, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 2997)
        kwargs_118592 = {}
        # Getting the type of 'warnings' (line 2997)
        warnings_118588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2997, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 2997)
        warn_118589 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 2997, 8), warnings_118588, 'warn')
        # Calling warn(args, kwargs) (line 2997)
        warn_call_result_118593 = invoke(stypy.reporting.localization.Localization(__file__, 2997, 8), warn_118589, *[unicode_118590, mplDeprecation_118591], **kwargs_118592)
        

        if more_types_in_union_118583:
            # SSA join for if statement (line 2994)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 2999)
    
    # Assigning a Call to a Name (line 3000):
    
    # Assigning a Call to a Name (line 3000):
    
    # Call to hist(...): (line 3000)
    # Processing the call arguments (line 3000)
    # Getting the type of 'x' (line 3000)
    x_118596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 22), 'x', False)
    # Processing the call keyword arguments (line 3000)
    # Getting the type of 'bins' (line 3000)
    bins_118597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 30), 'bins', False)
    keyword_118598 = bins_118597
    # Getting the type of 'range' (line 3000)
    range_118599 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 42), 'range', False)
    keyword_118600 = range_118599
    # Getting the type of 'density' (line 3000)
    density_118601 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 57), 'density', False)
    keyword_118602 = density_118601
    # Getting the type of 'weights' (line 3001)
    weights_118603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3001, 30), 'weights', False)
    keyword_118604 = weights_118603
    # Getting the type of 'cumulative' (line 3001)
    cumulative_118605 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3001, 50), 'cumulative', False)
    keyword_118606 = cumulative_118605
    # Getting the type of 'bottom' (line 3001)
    bottom_118607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3001, 69), 'bottom', False)
    keyword_118608 = bottom_118607
    # Getting the type of 'histtype' (line 3002)
    histtype_118609 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 31), 'histtype', False)
    keyword_118610 = histtype_118609
    # Getting the type of 'align' (line 3002)
    align_118611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 47), 'align', False)
    keyword_118612 = align_118611
    # Getting the type of 'orientation' (line 3002)
    orientation_118613 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3002, 66), 'orientation', False)
    keyword_118614 = orientation_118613
    # Getting the type of 'rwidth' (line 3003)
    rwidth_118615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 29), 'rwidth', False)
    keyword_118616 = rwidth_118615
    # Getting the type of 'log' (line 3003)
    log_118617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 41), 'log', False)
    keyword_118618 = log_118617
    # Getting the type of 'color' (line 3003)
    color_118619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 52), 'color', False)
    keyword_118620 = color_118619
    # Getting the type of 'label' (line 3003)
    label_118621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3003, 65), 'label', False)
    keyword_118622 = label_118621
    # Getting the type of 'stacked' (line 3004)
    stacked_118623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3004, 30), 'stacked', False)
    keyword_118624 = stacked_118623
    # Getting the type of 'normed' (line 3004)
    normed_118625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3004, 46), 'normed', False)
    keyword_118626 = normed_118625
    # Getting the type of 'data' (line 3004)
    data_118627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3004, 59), 'data', False)
    keyword_118628 = data_118627
    # Getting the type of 'kwargs' (line 3004)
    kwargs_118629 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3004, 67), 'kwargs', False)
    kwargs_118630 = {'rwidth': keyword_118616, 'kwargs_118629': kwargs_118629, 'normed': keyword_118626, 'stacked': keyword_118624, 'orientation': keyword_118614, 'bottom': keyword_118608, 'color': keyword_118620, 'density': keyword_118602, 'align': keyword_118612, 'cumulative': keyword_118606, 'label': keyword_118622, 'range': keyword_118600, 'weights': keyword_118604, 'histtype': keyword_118610, 'data': keyword_118628, 'bins': keyword_118598, 'log': keyword_118618}
    # Getting the type of 'ax' (line 3000)
    ax_118594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3000, 14), 'ax', False)
    # Obtaining the member 'hist' of a type (line 3000)
    hist_118595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3000, 14), ax_118594, 'hist')
    # Calling hist(args, kwargs) (line 3000)
    hist_call_result_118631 = invoke(stypy.reporting.localization.Localization(__file__, 3000, 14), hist_118595, *[x_118596], **kwargs_118630)
    
    # Assigning a type to the variable 'ret' (line 3000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3000, 8), 'ret', hist_call_result_118631)
    
    # finally branch of the try-finally block (line 2999)
    
    # Assigning a Name to a Attribute (line 3006):
    
    # Assigning a Name to a Attribute (line 3006):
    # Getting the type of 'washold' (line 3006)
    washold_118632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 19), 'washold')
    # Getting the type of 'ax' (line 3006)
    ax_118633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3006, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3006)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3006, 8), ax_118633, '_hold', washold_118632)
    
    # Getting the type of 'ret' (line 3008)
    ret_118634 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3008, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3008)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3008, 4), 'stypy_return_type', ret_118634)
    
    # ################# End of 'hist(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hist' in the type store
    # Getting the type of 'stypy_return_type' (line 2984)
    stypy_return_type_118635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 2984, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118635)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hist'
    return stypy_return_type_118635

# Assigning a type to the variable 'hist' (line 2984)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 2984, 0), 'hist', hist)

@norecursion
def hist2d(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_118636 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3013, 22), 'int')
    # Getting the type of 'None' (line 3013)
    None_118637 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 32), 'None')
    # Getting the type of 'False' (line 3013)
    False_118638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 45), 'False')
    # Getting the type of 'None' (line 3013)
    None_118639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 60), 'None')
    # Getting the type of 'None' (line 3013)
    None_118640 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3013, 71), 'None')
    # Getting the type of 'None' (line 3014)
    None_118641 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 16), 'None')
    # Getting the type of 'None' (line 3014)
    None_118642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 27), 'None')
    # Getting the type of 'None' (line 3014)
    None_118643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3014, 38), 'None')
    defaults = [int_118636, None_118637, False_118638, None_118639, None_118640, None_118641, None_118642, None_118643]
    # Create a new context for function 'hist2d'
    module_type_store = module_type_store.open_function_context('hist2d', 3012, 0, False)
    
    # Passed parameters checking function
    hist2d.stypy_localization = localization
    hist2d.stypy_type_of_self = None
    hist2d.stypy_type_store = module_type_store
    hist2d.stypy_function_name = 'hist2d'
    hist2d.stypy_param_names_list = ['x', 'y', 'bins', 'range', 'normed', 'weights', 'cmin', 'cmax', 'hold', 'data']
    hist2d.stypy_varargs_param_name = None
    hist2d.stypy_kwargs_param_name = 'kwargs'
    hist2d.stypy_call_defaults = defaults
    hist2d.stypy_call_varargs = varargs
    hist2d.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hist2d', ['x', 'y', 'bins', 'range', 'normed', 'weights', 'cmin', 'cmax', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hist2d', localization, ['x', 'y', 'bins', 'range', 'normed', 'weights', 'cmin', 'cmax', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hist2d(...)' code ##################

    
    # Assigning a Call to a Name (line 3015):
    
    # Assigning a Call to a Name (line 3015):
    
    # Call to gca(...): (line 3015)
    # Processing the call keyword arguments (line 3015)
    kwargs_118645 = {}
    # Getting the type of 'gca' (line 3015)
    gca_118644 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3015, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3015)
    gca_call_result_118646 = invoke(stypy.reporting.localization.Localization(__file__, 3015, 9), gca_118644, *[], **kwargs_118645)
    
    # Assigning a type to the variable 'ax' (line 3015)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3015, 4), 'ax', gca_call_result_118646)
    
    # Assigning a Attribute to a Name (line 3018):
    
    # Assigning a Attribute to a Name (line 3018):
    # Getting the type of 'ax' (line 3018)
    ax_118647 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3018, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3018)
    _hold_118648 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3018, 14), ax_118647, '_hold')
    # Assigning a type to the variable 'washold' (line 3018)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3018, 4), 'washold', _hold_118648)
    
    # Type idiom detected: calculating its left and rigth part (line 3020)
    # Getting the type of 'hold' (line 3020)
    hold_118649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 4), 'hold')
    # Getting the type of 'None' (line 3020)
    None_118650 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3020, 19), 'None')
    
    (may_be_118651, more_types_in_union_118652) = may_not_be_none(hold_118649, None_118650)

    if may_be_118651:

        if more_types_in_union_118652:
            # Runtime conditional SSA (line 3020)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3021):
        
        # Assigning a Name to a Attribute (line 3021):
        # Getting the type of 'hold' (line 3021)
        hold_118653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 19), 'hold')
        # Getting the type of 'ax' (line 3021)
        ax_118654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3021, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3021)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3021, 8), ax_118654, '_hold', hold_118653)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3022, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3022)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118655 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3022, 8), 'matplotlib.cbook')

        if (type(import_118655) is not StypyTypeError):

            if (import_118655 != 'pyd_module'):
                __import__(import_118655)
                sys_modules_118656 = sys.modules[import_118655]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3022, 8), 'matplotlib.cbook', sys_modules_118656.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3022, 8), __file__, sys_modules_118656, sys_modules_118656.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3022, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3022)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3022, 8), 'matplotlib.cbook', import_118655)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3023)
        # Processing the call arguments (line 3023)
        unicode_118659 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3023, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3024)
        mplDeprecation_118660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3024, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3023)
        kwargs_118661 = {}
        # Getting the type of 'warnings' (line 3023)
        warnings_118657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3023, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3023)
        warn_118658 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3023, 8), warnings_118657, 'warn')
        # Calling warn(args, kwargs) (line 3023)
        warn_call_result_118662 = invoke(stypy.reporting.localization.Localization(__file__, 3023, 8), warn_118658, *[unicode_118659, mplDeprecation_118660], **kwargs_118661)
        

        if more_types_in_union_118652:
            # SSA join for if statement (line 3020)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3025)
    
    # Assigning a Call to a Name (line 3026):
    
    # Assigning a Call to a Name (line 3026):
    
    # Call to hist2d(...): (line 3026)
    # Processing the call arguments (line 3026)
    # Getting the type of 'x' (line 3026)
    x_118665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 24), 'x', False)
    # Getting the type of 'y' (line 3026)
    y_118666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 27), 'y', False)
    # Processing the call keyword arguments (line 3026)
    # Getting the type of 'bins' (line 3026)
    bins_118667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 35), 'bins', False)
    keyword_118668 = bins_118667
    # Getting the type of 'range' (line 3026)
    range_118669 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 47), 'range', False)
    keyword_118670 = range_118669
    # Getting the type of 'normed' (line 3026)
    normed_118671 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 61), 'normed', False)
    keyword_118672 = normed_118671
    # Getting the type of 'weights' (line 3027)
    weights_118673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3027, 32), 'weights', False)
    keyword_118674 = weights_118673
    # Getting the type of 'cmin' (line 3027)
    cmin_118675 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3027, 46), 'cmin', False)
    keyword_118676 = cmin_118675
    # Getting the type of 'cmax' (line 3027)
    cmax_118677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3027, 57), 'cmax', False)
    keyword_118678 = cmax_118677
    # Getting the type of 'data' (line 3027)
    data_118679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3027, 68), 'data', False)
    keyword_118680 = data_118679
    # Getting the type of 'kwargs' (line 3028)
    kwargs_118681 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3028, 26), 'kwargs', False)
    kwargs_118682 = {'normed': keyword_118672, 'cmin': keyword_118676, 'range': keyword_118670, 'weights': keyword_118674, 'kwargs_118681': kwargs_118681, 'cmax': keyword_118678, 'data': keyword_118680, 'bins': keyword_118668}
    # Getting the type of 'ax' (line 3026)
    ax_118663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3026, 14), 'ax', False)
    # Obtaining the member 'hist2d' of a type (line 3026)
    hist2d_118664 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3026, 14), ax_118663, 'hist2d')
    # Calling hist2d(args, kwargs) (line 3026)
    hist2d_call_result_118683 = invoke(stypy.reporting.localization.Localization(__file__, 3026, 14), hist2d_118664, *[x_118665, y_118666], **kwargs_118682)
    
    # Assigning a type to the variable 'ret' (line 3026)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3026, 8), 'ret', hist2d_call_result_118683)
    
    # finally branch of the try-finally block (line 3025)
    
    # Assigning a Name to a Attribute (line 3030):
    
    # Assigning a Name to a Attribute (line 3030):
    # Getting the type of 'washold' (line 3030)
    washold_118684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3030, 19), 'washold')
    # Getting the type of 'ax' (line 3030)
    ax_118685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3030, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3030)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3030, 8), ax_118685, '_hold', washold_118684)
    
    
    # Call to sci(...): (line 3031)
    # Processing the call arguments (line 3031)
    
    # Obtaining the type of the subscript
    int_118687 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3031, 12), 'int')
    # Getting the type of 'ret' (line 3031)
    ret_118688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3031, 8), 'ret', False)
    # Obtaining the member '__getitem__' of a type (line 3031)
    getitem___118689 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3031, 8), ret_118688, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3031)
    subscript_call_result_118690 = invoke(stypy.reporting.localization.Localization(__file__, 3031, 8), getitem___118689, int_118687)
    
    # Processing the call keyword arguments (line 3031)
    kwargs_118691 = {}
    # Getting the type of 'sci' (line 3031)
    sci_118686 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3031, 4), 'sci', False)
    # Calling sci(args, kwargs) (line 3031)
    sci_call_result_118692 = invoke(stypy.reporting.localization.Localization(__file__, 3031, 4), sci_118686, *[subscript_call_result_118690], **kwargs_118691)
    
    # Getting the type of 'ret' (line 3032)
    ret_118693 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3032, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3032)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3032, 4), 'stypy_return_type', ret_118693)
    
    # ################# End of 'hist2d(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hist2d' in the type store
    # Getting the type of 'stypy_return_type' (line 3012)
    stypy_return_type_118694 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3012, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118694)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hist2d'
    return stypy_return_type_118694

# Assigning a type to the variable 'hist2d' (line 3012)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3012, 0), 'hist2d', hist2d)

@norecursion
def hlines(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_118695 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3037, 33), 'unicode', u'k')
    unicode_118696 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3037, 49), 'unicode', u'solid')
    unicode_118697 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3037, 64), 'unicode', u'')
    # Getting the type of 'None' (line 3037)
    None_118698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3037, 73), 'None')
    # Getting the type of 'None' (line 3038)
    None_118699 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3038, 16), 'None')
    defaults = [unicode_118695, unicode_118696, unicode_118697, None_118698, None_118699]
    # Create a new context for function 'hlines'
    module_type_store = module_type_store.open_function_context('hlines', 3036, 0, False)
    
    # Passed parameters checking function
    hlines.stypy_localization = localization
    hlines.stypy_type_of_self = None
    hlines.stypy_type_store = module_type_store
    hlines.stypy_function_name = 'hlines'
    hlines.stypy_param_names_list = ['y', 'xmin', 'xmax', 'colors', 'linestyles', 'label', 'hold', 'data']
    hlines.stypy_varargs_param_name = None
    hlines.stypy_kwargs_param_name = 'kwargs'
    hlines.stypy_call_defaults = defaults
    hlines.stypy_call_varargs = varargs
    hlines.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hlines', ['y', 'xmin', 'xmax', 'colors', 'linestyles', 'label', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hlines', localization, ['y', 'xmin', 'xmax', 'colors', 'linestyles', 'label', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hlines(...)' code ##################

    
    # Assigning a Call to a Name (line 3039):
    
    # Assigning a Call to a Name (line 3039):
    
    # Call to gca(...): (line 3039)
    # Processing the call keyword arguments (line 3039)
    kwargs_118701 = {}
    # Getting the type of 'gca' (line 3039)
    gca_118700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3039, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3039)
    gca_call_result_118702 = invoke(stypy.reporting.localization.Localization(__file__, 3039, 9), gca_118700, *[], **kwargs_118701)
    
    # Assigning a type to the variable 'ax' (line 3039)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3039, 4), 'ax', gca_call_result_118702)
    
    # Assigning a Attribute to a Name (line 3042):
    
    # Assigning a Attribute to a Name (line 3042):
    # Getting the type of 'ax' (line 3042)
    ax_118703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3042, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3042)
    _hold_118704 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3042, 14), ax_118703, '_hold')
    # Assigning a type to the variable 'washold' (line 3042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3042, 4), 'washold', _hold_118704)
    
    # Type idiom detected: calculating its left and rigth part (line 3044)
    # Getting the type of 'hold' (line 3044)
    hold_118705 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 4), 'hold')
    # Getting the type of 'None' (line 3044)
    None_118706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3044, 19), 'None')
    
    (may_be_118707, more_types_in_union_118708) = may_not_be_none(hold_118705, None_118706)

    if may_be_118707:

        if more_types_in_union_118708:
            # Runtime conditional SSA (line 3044)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3045):
        
        # Assigning a Name to a Attribute (line 3045):
        # Getting the type of 'hold' (line 3045)
        hold_118709 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3045, 19), 'hold')
        # Getting the type of 'ax' (line 3045)
        ax_118710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3045, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3045)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3045, 8), ax_118710, '_hold', hold_118709)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3046, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3046)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118711 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3046, 8), 'matplotlib.cbook')

        if (type(import_118711) is not StypyTypeError):

            if (import_118711 != 'pyd_module'):
                __import__(import_118711)
                sys_modules_118712 = sys.modules[import_118711]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3046, 8), 'matplotlib.cbook', sys_modules_118712.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3046, 8), __file__, sys_modules_118712, sys_modules_118712.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3046, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3046)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3046, 8), 'matplotlib.cbook', import_118711)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3047)
        # Processing the call arguments (line 3047)
        unicode_118715 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3047, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3048)
        mplDeprecation_118716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3048, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3047)
        kwargs_118717 = {}
        # Getting the type of 'warnings' (line 3047)
        warnings_118713 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3047, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3047)
        warn_118714 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3047, 8), warnings_118713, 'warn')
        # Calling warn(args, kwargs) (line 3047)
        warn_call_result_118718 = invoke(stypy.reporting.localization.Localization(__file__, 3047, 8), warn_118714, *[unicode_118715, mplDeprecation_118716], **kwargs_118717)
        

        if more_types_in_union_118708:
            # SSA join for if statement (line 3044)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3049)
    
    # Assigning a Call to a Name (line 3050):
    
    # Assigning a Call to a Name (line 3050):
    
    # Call to hlines(...): (line 3050)
    # Processing the call arguments (line 3050)
    # Getting the type of 'y' (line 3050)
    y_118721 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 24), 'y', False)
    # Getting the type of 'xmin' (line 3050)
    xmin_118722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 27), 'xmin', False)
    # Getting the type of 'xmax' (line 3050)
    xmax_118723 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 33), 'xmax', False)
    # Processing the call keyword arguments (line 3050)
    # Getting the type of 'colors' (line 3050)
    colors_118724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 46), 'colors', False)
    keyword_118725 = colors_118724
    # Getting the type of 'linestyles' (line 3050)
    linestyles_118726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 65), 'linestyles', False)
    keyword_118727 = linestyles_118726
    # Getting the type of 'label' (line 3051)
    label_118728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 30), 'label', False)
    keyword_118729 = label_118728
    # Getting the type of 'data' (line 3051)
    data_118730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 42), 'data', False)
    keyword_118731 = data_118730
    # Getting the type of 'kwargs' (line 3051)
    kwargs_118732 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3051, 50), 'kwargs', False)
    kwargs_118733 = {'colors': keyword_118725, 'kwargs_118732': kwargs_118732, 'data': keyword_118731, 'linestyles': keyword_118727, 'label': keyword_118729}
    # Getting the type of 'ax' (line 3050)
    ax_118719 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3050, 14), 'ax', False)
    # Obtaining the member 'hlines' of a type (line 3050)
    hlines_118720 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3050, 14), ax_118719, 'hlines')
    # Calling hlines(args, kwargs) (line 3050)
    hlines_call_result_118734 = invoke(stypy.reporting.localization.Localization(__file__, 3050, 14), hlines_118720, *[y_118721, xmin_118722, xmax_118723], **kwargs_118733)
    
    # Assigning a type to the variable 'ret' (line 3050)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3050, 8), 'ret', hlines_call_result_118734)
    
    # finally branch of the try-finally block (line 3049)
    
    # Assigning a Name to a Attribute (line 3053):
    
    # Assigning a Name to a Attribute (line 3053):
    # Getting the type of 'washold' (line 3053)
    washold_118735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 19), 'washold')
    # Getting the type of 'ax' (line 3053)
    ax_118736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3053, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3053)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3053, 8), ax_118736, '_hold', washold_118735)
    
    # Getting the type of 'ret' (line 3055)
    ret_118737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3055, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3055)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3055, 4), 'stypy_return_type', ret_118737)
    
    # ################# End of 'hlines(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hlines' in the type store
    # Getting the type of 'stypy_return_type' (line 3036)
    stypy_return_type_118738 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3036, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118738)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hlines'
    return stypy_return_type_118738

# Assigning a type to the variable 'hlines' (line 3036)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3036, 0), 'hlines', hlines)

@norecursion
def imshow(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3060)
    None_118739 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3060, 19), 'None')
    # Getting the type of 'None' (line 3060)
    None_118740 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3060, 30), 'None')
    # Getting the type of 'None' (line 3060)
    None_118741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3060, 43), 'None')
    # Getting the type of 'None' (line 3060)
    None_118742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3060, 63), 'None')
    # Getting the type of 'None' (line 3060)
    None_118743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3060, 75), 'None')
    # Getting the type of 'None' (line 3061)
    None_118744 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 16), 'None')
    # Getting the type of 'None' (line 3061)
    None_118745 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 27), 'None')
    # Getting the type of 'None' (line 3061)
    None_118746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 40), 'None')
    # Getting the type of 'None' (line 3061)
    None_118747 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 53), 'None')
    # Getting the type of 'None' (line 3061)
    None_118748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3061, 65), 'None')
    int_118749 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3062, 22), 'int')
    float_118750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3062, 35), 'float')
    # Getting the type of 'None' (line 3062)
    None_118751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3062, 46), 'None')
    # Getting the type of 'None' (line 3062)
    None_118752 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3062, 61), 'None')
    # Getting the type of 'None' (line 3062)
    None_118753 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3062, 71), 'None')
    # Getting the type of 'None' (line 3063)
    None_118754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 16), 'None')
    # Getting the type of 'None' (line 3063)
    None_118755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3063, 27), 'None')
    defaults = [None_118739, None_118740, None_118741, None_118742, None_118743, None_118744, None_118745, None_118746, None_118747, None_118748, int_118749, float_118750, None_118751, None_118752, None_118753, None_118754, None_118755]
    # Create a new context for function 'imshow'
    module_type_store = module_type_store.open_function_context('imshow', 3059, 0, False)
    
    # Passed parameters checking function
    imshow.stypy_localization = localization
    imshow.stypy_type_of_self = None
    imshow.stypy_type_store = module_type_store
    imshow.stypy_function_name = 'imshow'
    imshow.stypy_param_names_list = ['X', 'cmap', 'norm', 'aspect', 'interpolation', 'alpha', 'vmin', 'vmax', 'origin', 'extent', 'shape', 'filternorm', 'filterrad', 'imlim', 'resample', 'url', 'hold', 'data']
    imshow.stypy_varargs_param_name = None
    imshow.stypy_kwargs_param_name = 'kwargs'
    imshow.stypy_call_defaults = defaults
    imshow.stypy_call_varargs = varargs
    imshow.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'imshow', ['X', 'cmap', 'norm', 'aspect', 'interpolation', 'alpha', 'vmin', 'vmax', 'origin', 'extent', 'shape', 'filternorm', 'filterrad', 'imlim', 'resample', 'url', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'imshow', localization, ['X', 'cmap', 'norm', 'aspect', 'interpolation', 'alpha', 'vmin', 'vmax', 'origin', 'extent', 'shape', 'filternorm', 'filterrad', 'imlim', 'resample', 'url', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'imshow(...)' code ##################

    
    # Assigning a Call to a Name (line 3064):
    
    # Assigning a Call to a Name (line 3064):
    
    # Call to gca(...): (line 3064)
    # Processing the call keyword arguments (line 3064)
    kwargs_118757 = {}
    # Getting the type of 'gca' (line 3064)
    gca_118756 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3064, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3064)
    gca_call_result_118758 = invoke(stypy.reporting.localization.Localization(__file__, 3064, 9), gca_118756, *[], **kwargs_118757)
    
    # Assigning a type to the variable 'ax' (line 3064)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3064, 4), 'ax', gca_call_result_118758)
    
    # Assigning a Attribute to a Name (line 3067):
    
    # Assigning a Attribute to a Name (line 3067):
    # Getting the type of 'ax' (line 3067)
    ax_118759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3067, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3067)
    _hold_118760 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3067, 14), ax_118759, '_hold')
    # Assigning a type to the variable 'washold' (line 3067)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3067, 4), 'washold', _hold_118760)
    
    # Type idiom detected: calculating its left and rigth part (line 3069)
    # Getting the type of 'hold' (line 3069)
    hold_118761 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3069, 4), 'hold')
    # Getting the type of 'None' (line 3069)
    None_118762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3069, 19), 'None')
    
    (may_be_118763, more_types_in_union_118764) = may_not_be_none(hold_118761, None_118762)

    if may_be_118763:

        if more_types_in_union_118764:
            # Runtime conditional SSA (line 3069)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3070):
        
        # Assigning a Name to a Attribute (line 3070):
        # Getting the type of 'hold' (line 3070)
        hold_118765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 19), 'hold')
        # Getting the type of 'ax' (line 3070)
        ax_118766 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3070, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3070)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3070, 8), ax_118766, '_hold', hold_118765)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3071, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3071)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118767 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3071, 8), 'matplotlib.cbook')

        if (type(import_118767) is not StypyTypeError):

            if (import_118767 != 'pyd_module'):
                __import__(import_118767)
                sys_modules_118768 = sys.modules[import_118767]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3071, 8), 'matplotlib.cbook', sys_modules_118768.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3071, 8), __file__, sys_modules_118768, sys_modules_118768.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3071, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3071)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3071, 8), 'matplotlib.cbook', import_118767)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3072)
        # Processing the call arguments (line 3072)
        unicode_118771 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3072, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3073)
        mplDeprecation_118772 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3073, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3072)
        kwargs_118773 = {}
        # Getting the type of 'warnings' (line 3072)
        warnings_118769 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3072, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3072)
        warn_118770 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3072, 8), warnings_118769, 'warn')
        # Calling warn(args, kwargs) (line 3072)
        warn_call_result_118774 = invoke(stypy.reporting.localization.Localization(__file__, 3072, 8), warn_118770, *[unicode_118771, mplDeprecation_118772], **kwargs_118773)
        

        if more_types_in_union_118764:
            # SSA join for if statement (line 3069)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3074)
    
    # Assigning a Call to a Name (line 3075):
    
    # Assigning a Call to a Name (line 3075):
    
    # Call to imshow(...): (line 3075)
    # Processing the call arguments (line 3075)
    # Getting the type of 'X' (line 3075)
    X_118777 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3075, 24), 'X', False)
    # Processing the call keyword arguments (line 3075)
    # Getting the type of 'cmap' (line 3075)
    cmap_118778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3075, 32), 'cmap', False)
    keyword_118779 = cmap_118778
    # Getting the type of 'norm' (line 3075)
    norm_118780 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3075, 43), 'norm', False)
    keyword_118781 = norm_118780
    # Getting the type of 'aspect' (line 3075)
    aspect_118782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3075, 56), 'aspect', False)
    keyword_118783 = aspect_118782
    # Getting the type of 'interpolation' (line 3076)
    interpolation_118784 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 38), 'interpolation', False)
    keyword_118785 = interpolation_118784
    # Getting the type of 'alpha' (line 3076)
    alpha_118786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 59), 'alpha', False)
    keyword_118787 = alpha_118786
    # Getting the type of 'vmin' (line 3076)
    vmin_118788 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3076, 71), 'vmin', False)
    keyword_118789 = vmin_118788
    # Getting the type of 'vmax' (line 3077)
    vmax_118790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3077, 29), 'vmax', False)
    keyword_118791 = vmax_118790
    # Getting the type of 'origin' (line 3077)
    origin_118792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3077, 42), 'origin', False)
    keyword_118793 = origin_118792
    # Getting the type of 'extent' (line 3077)
    extent_118794 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3077, 57), 'extent', False)
    keyword_118795 = extent_118794
    # Getting the type of 'shape' (line 3077)
    shape_118796 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3077, 71), 'shape', False)
    keyword_118797 = shape_118796
    # Getting the type of 'filternorm' (line 3078)
    filternorm_118798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3078, 35), 'filternorm', False)
    keyword_118799 = filternorm_118798
    # Getting the type of 'filterrad' (line 3078)
    filterrad_118800 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3078, 57), 'filterrad', False)
    keyword_118801 = filterrad_118800
    # Getting the type of 'imlim' (line 3079)
    imlim_118802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3079, 30), 'imlim', False)
    keyword_118803 = imlim_118802
    # Getting the type of 'resample' (line 3079)
    resample_118804 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3079, 46), 'resample', False)
    keyword_118805 = resample_118804
    # Getting the type of 'url' (line 3079)
    url_118806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3079, 60), 'url', False)
    keyword_118807 = url_118806
    # Getting the type of 'data' (line 3079)
    data_118808 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3079, 70), 'data', False)
    keyword_118809 = data_118808
    # Getting the type of 'kwargs' (line 3080)
    kwargs_118810 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3080, 26), 'kwargs', False)
    kwargs_118811 = {'origin': keyword_118793, 'imlim': keyword_118803, 'extent': keyword_118795, 'vmin': keyword_118789, 'url': keyword_118807, 'resample': keyword_118805, 'kwargs_118810': kwargs_118810, 'shape': keyword_118797, 'cmap': keyword_118779, 'filterrad': keyword_118801, 'filternorm': keyword_118799, 'aspect': keyword_118783, 'vmax': keyword_118791, 'alpha': keyword_118787, 'data': keyword_118809, 'norm': keyword_118781, 'interpolation': keyword_118785}
    # Getting the type of 'ax' (line 3075)
    ax_118775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3075, 14), 'ax', False)
    # Obtaining the member 'imshow' of a type (line 3075)
    imshow_118776 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3075, 14), ax_118775, 'imshow')
    # Calling imshow(args, kwargs) (line 3075)
    imshow_call_result_118812 = invoke(stypy.reporting.localization.Localization(__file__, 3075, 14), imshow_118776, *[X_118777], **kwargs_118811)
    
    # Assigning a type to the variable 'ret' (line 3075)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3075, 8), 'ret', imshow_call_result_118812)
    
    # finally branch of the try-finally block (line 3074)
    
    # Assigning a Name to a Attribute (line 3082):
    
    # Assigning a Name to a Attribute (line 3082):
    # Getting the type of 'washold' (line 3082)
    washold_118813 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3082, 19), 'washold')
    # Getting the type of 'ax' (line 3082)
    ax_118814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3082, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3082)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3082, 8), ax_118814, '_hold', washold_118813)
    
    
    # Call to sci(...): (line 3083)
    # Processing the call arguments (line 3083)
    # Getting the type of 'ret' (line 3083)
    ret_118816 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 8), 'ret', False)
    # Processing the call keyword arguments (line 3083)
    kwargs_118817 = {}
    # Getting the type of 'sci' (line 3083)
    sci_118815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3083, 4), 'sci', False)
    # Calling sci(args, kwargs) (line 3083)
    sci_call_result_118818 = invoke(stypy.reporting.localization.Localization(__file__, 3083, 4), sci_118815, *[ret_118816], **kwargs_118817)
    
    # Getting the type of 'ret' (line 3084)
    ret_118819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3084, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3084)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3084, 4), 'stypy_return_type', ret_118819)
    
    # ################# End of 'imshow(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'imshow' in the type store
    # Getting the type of 'stypy_return_type' (line 3059)
    stypy_return_type_118820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3059, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118820)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'imshow'
    return stypy_return_type_118820

# Assigning a type to the variable 'imshow' (line 3059)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3059, 0), 'imshow', imshow)

@norecursion
def loglog(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'loglog'
    module_type_store = module_type_store.open_function_context('loglog', 3088, 0, False)
    
    # Passed parameters checking function
    loglog.stypy_localization = localization
    loglog.stypy_type_of_self = None
    loglog.stypy_type_store = module_type_store
    loglog.stypy_function_name = 'loglog'
    loglog.stypy_param_names_list = []
    loglog.stypy_varargs_param_name = 'args'
    loglog.stypy_kwargs_param_name = 'kwargs'
    loglog.stypy_call_defaults = defaults
    loglog.stypy_call_varargs = varargs
    loglog.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'loglog', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'loglog', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'loglog(...)' code ##################

    
    # Assigning a Call to a Name (line 3090):
    
    # Assigning a Call to a Name (line 3090):
    
    # Call to gca(...): (line 3090)
    # Processing the call keyword arguments (line 3090)
    kwargs_118822 = {}
    # Getting the type of 'gca' (line 3090)
    gca_118821 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3090, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3090)
    gca_call_result_118823 = invoke(stypy.reporting.localization.Localization(__file__, 3090, 9), gca_118821, *[], **kwargs_118822)
    
    # Assigning a type to the variable 'ax' (line 3090)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3090, 4), 'ax', gca_call_result_118823)
    
    # Assigning a Attribute to a Name (line 3093):
    
    # Assigning a Attribute to a Name (line 3093):
    # Getting the type of 'ax' (line 3093)
    ax_118824 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3093, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3093)
    _hold_118825 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3093, 14), ax_118824, '_hold')
    # Assigning a type to the variable 'washold' (line 3093)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3093, 4), 'washold', _hold_118825)
    
    # Assigning a Call to a Name (line 3094):
    
    # Assigning a Call to a Name (line 3094):
    
    # Call to pop(...): (line 3094)
    # Processing the call arguments (line 3094)
    unicode_118828 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3094, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 3094)
    None_118829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3094, 30), 'None', False)
    # Processing the call keyword arguments (line 3094)
    kwargs_118830 = {}
    # Getting the type of 'kwargs' (line 3094)
    kwargs_118826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3094, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 3094)
    pop_118827 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3094, 11), kwargs_118826, 'pop')
    # Calling pop(args, kwargs) (line 3094)
    pop_call_result_118831 = invoke(stypy.reporting.localization.Localization(__file__, 3094, 11), pop_118827, *[unicode_118828, None_118829], **kwargs_118830)
    
    # Assigning a type to the variable 'hold' (line 3094)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3094, 4), 'hold', pop_call_result_118831)
    
    # Type idiom detected: calculating its left and rigth part (line 3095)
    # Getting the type of 'hold' (line 3095)
    hold_118832 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 4), 'hold')
    # Getting the type of 'None' (line 3095)
    None_118833 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3095, 19), 'None')
    
    (may_be_118834, more_types_in_union_118835) = may_not_be_none(hold_118832, None_118833)

    if may_be_118834:

        if more_types_in_union_118835:
            # Runtime conditional SSA (line 3095)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3096):
        
        # Assigning a Name to a Attribute (line 3096):
        # Getting the type of 'hold' (line 3096)
        hold_118836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 19), 'hold')
        # Getting the type of 'ax' (line 3096)
        ax_118837 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3096, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3096)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3096, 8), ax_118837, '_hold', hold_118836)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3097, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3097)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118838 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3097, 8), 'matplotlib.cbook')

        if (type(import_118838) is not StypyTypeError):

            if (import_118838 != 'pyd_module'):
                __import__(import_118838)
                sys_modules_118839 = sys.modules[import_118838]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3097, 8), 'matplotlib.cbook', sys_modules_118839.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3097, 8), __file__, sys_modules_118839, sys_modules_118839.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3097, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3097)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3097, 8), 'matplotlib.cbook', import_118838)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3098)
        # Processing the call arguments (line 3098)
        unicode_118842 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3098, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3099)
        mplDeprecation_118843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3099, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3098)
        kwargs_118844 = {}
        # Getting the type of 'warnings' (line 3098)
        warnings_118840 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3098, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3098)
        warn_118841 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3098, 8), warnings_118840, 'warn')
        # Calling warn(args, kwargs) (line 3098)
        warn_call_result_118845 = invoke(stypy.reporting.localization.Localization(__file__, 3098, 8), warn_118841, *[unicode_118842, mplDeprecation_118843], **kwargs_118844)
        

        if more_types_in_union_118835:
            # SSA join for if statement (line 3095)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3100)
    
    # Assigning a Call to a Name (line 3101):
    
    # Assigning a Call to a Name (line 3101):
    
    # Call to loglog(...): (line 3101)
    # Getting the type of 'args' (line 3101)
    args_118848 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3101, 25), 'args', False)
    # Processing the call keyword arguments (line 3101)
    # Getting the type of 'kwargs' (line 3101)
    kwargs_118849 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3101, 33), 'kwargs', False)
    kwargs_118850 = {'kwargs_118849': kwargs_118849}
    # Getting the type of 'ax' (line 3101)
    ax_118846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3101, 14), 'ax', False)
    # Obtaining the member 'loglog' of a type (line 3101)
    loglog_118847 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3101, 14), ax_118846, 'loglog')
    # Calling loglog(args, kwargs) (line 3101)
    loglog_call_result_118851 = invoke(stypy.reporting.localization.Localization(__file__, 3101, 14), loglog_118847, *[args_118848], **kwargs_118850)
    
    # Assigning a type to the variable 'ret' (line 3101)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3101, 8), 'ret', loglog_call_result_118851)
    
    # finally branch of the try-finally block (line 3100)
    
    # Assigning a Name to a Attribute (line 3103):
    
    # Assigning a Name to a Attribute (line 3103):
    # Getting the type of 'washold' (line 3103)
    washold_118852 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 19), 'washold')
    # Getting the type of 'ax' (line 3103)
    ax_118853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3103, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3103)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3103, 8), ax_118853, '_hold', washold_118852)
    
    # Getting the type of 'ret' (line 3105)
    ret_118854 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3105, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3105)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3105, 4), 'stypy_return_type', ret_118854)
    
    # ################# End of 'loglog(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'loglog' in the type store
    # Getting the type of 'stypy_return_type' (line 3088)
    stypy_return_type_118855 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3088, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118855)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'loglog'
    return stypy_return_type_118855

# Assigning a type to the variable 'loglog' (line 3088)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3088, 0), 'loglog', loglog)

@norecursion
def magnitude_spectrum(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3110)
    None_118856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 29), 'None')
    # Getting the type of 'None' (line 3110)
    None_118857 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 38), 'None')
    # Getting the type of 'None' (line 3110)
    None_118858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 51), 'None')
    # Getting the type of 'None' (line 3110)
    None_118859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3110, 64), 'None')
    # Getting the type of 'None' (line 3111)
    None_118860 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 29), 'None')
    # Getting the type of 'None' (line 3111)
    None_118861 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 41), 'None')
    # Getting the type of 'None' (line 3111)
    None_118862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 52), 'None')
    # Getting the type of 'None' (line 3111)
    None_118863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3111, 63), 'None')
    defaults = [None_118856, None_118857, None_118858, None_118859, None_118860, None_118861, None_118862, None_118863]
    # Create a new context for function 'magnitude_spectrum'
    module_type_store = module_type_store.open_function_context('magnitude_spectrum', 3109, 0, False)
    
    # Passed parameters checking function
    magnitude_spectrum.stypy_localization = localization
    magnitude_spectrum.stypy_type_of_self = None
    magnitude_spectrum.stypy_type_store = module_type_store
    magnitude_spectrum.stypy_function_name = 'magnitude_spectrum'
    magnitude_spectrum.stypy_param_names_list = ['x', 'Fs', 'Fc', 'window', 'pad_to', 'sides', 'scale', 'hold', 'data']
    magnitude_spectrum.stypy_varargs_param_name = None
    magnitude_spectrum.stypy_kwargs_param_name = 'kwargs'
    magnitude_spectrum.stypy_call_defaults = defaults
    magnitude_spectrum.stypy_call_varargs = varargs
    magnitude_spectrum.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'magnitude_spectrum', ['x', 'Fs', 'Fc', 'window', 'pad_to', 'sides', 'scale', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'magnitude_spectrum', localization, ['x', 'Fs', 'Fc', 'window', 'pad_to', 'sides', 'scale', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'magnitude_spectrum(...)' code ##################

    
    # Assigning a Call to a Name (line 3112):
    
    # Assigning a Call to a Name (line 3112):
    
    # Call to gca(...): (line 3112)
    # Processing the call keyword arguments (line 3112)
    kwargs_118865 = {}
    # Getting the type of 'gca' (line 3112)
    gca_118864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3112, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3112)
    gca_call_result_118866 = invoke(stypy.reporting.localization.Localization(__file__, 3112, 9), gca_118864, *[], **kwargs_118865)
    
    # Assigning a type to the variable 'ax' (line 3112)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3112, 4), 'ax', gca_call_result_118866)
    
    # Assigning a Attribute to a Name (line 3115):
    
    # Assigning a Attribute to a Name (line 3115):
    # Getting the type of 'ax' (line 3115)
    ax_118867 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3115, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3115)
    _hold_118868 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3115, 14), ax_118867, '_hold')
    # Assigning a type to the variable 'washold' (line 3115)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3115, 4), 'washold', _hold_118868)
    
    # Type idiom detected: calculating its left and rigth part (line 3117)
    # Getting the type of 'hold' (line 3117)
    hold_118869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3117, 4), 'hold')
    # Getting the type of 'None' (line 3117)
    None_118870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3117, 19), 'None')
    
    (may_be_118871, more_types_in_union_118872) = may_not_be_none(hold_118869, None_118870)

    if may_be_118871:

        if more_types_in_union_118872:
            # Runtime conditional SSA (line 3117)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3118):
        
        # Assigning a Name to a Attribute (line 3118):
        # Getting the type of 'hold' (line 3118)
        hold_118873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 19), 'hold')
        # Getting the type of 'ax' (line 3118)
        ax_118874 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3118, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3118)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3118, 8), ax_118874, '_hold', hold_118873)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3119, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3119)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118875 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3119, 8), 'matplotlib.cbook')

        if (type(import_118875) is not StypyTypeError):

            if (import_118875 != 'pyd_module'):
                __import__(import_118875)
                sys_modules_118876 = sys.modules[import_118875]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3119, 8), 'matplotlib.cbook', sys_modules_118876.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3119, 8), __file__, sys_modules_118876, sys_modules_118876.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3119, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3119)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3119, 8), 'matplotlib.cbook', import_118875)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3120)
        # Processing the call arguments (line 3120)
        unicode_118879 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3120, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3121)
        mplDeprecation_118880 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3121, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3120)
        kwargs_118881 = {}
        # Getting the type of 'warnings' (line 3120)
        warnings_118877 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3120, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3120)
        warn_118878 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3120, 8), warnings_118877, 'warn')
        # Calling warn(args, kwargs) (line 3120)
        warn_call_result_118882 = invoke(stypy.reporting.localization.Localization(__file__, 3120, 8), warn_118878, *[unicode_118879, mplDeprecation_118880], **kwargs_118881)
        

        if more_types_in_union_118872:
            # SSA join for if statement (line 3117)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3122)
    
    # Assigning a Call to a Name (line 3123):
    
    # Assigning a Call to a Name (line 3123):
    
    # Call to magnitude_spectrum(...): (line 3123)
    # Processing the call arguments (line 3123)
    # Getting the type of 'x' (line 3123)
    x_118885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 36), 'x', False)
    # Processing the call keyword arguments (line 3123)
    # Getting the type of 'Fs' (line 3123)
    Fs_118886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 42), 'Fs', False)
    keyword_118887 = Fs_118886
    # Getting the type of 'Fc' (line 3123)
    Fc_118888 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 49), 'Fc', False)
    keyword_118889 = Fc_118888
    # Getting the type of 'window' (line 3123)
    window_118890 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 60), 'window', False)
    keyword_118891 = window_118890
    # Getting the type of 'pad_to' (line 3124)
    pad_to_118892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 43), 'pad_to', False)
    keyword_118893 = pad_to_118892
    # Getting the type of 'sides' (line 3124)
    sides_118894 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 57), 'sides', False)
    keyword_118895 = sides_118894
    # Getting the type of 'scale' (line 3124)
    scale_118896 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3124, 70), 'scale', False)
    keyword_118897 = scale_118896
    # Getting the type of 'data' (line 3125)
    data_118898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 41), 'data', False)
    keyword_118899 = data_118898
    # Getting the type of 'kwargs' (line 3125)
    kwargs_118900 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3125, 49), 'kwargs', False)
    kwargs_118901 = {'Fs': keyword_118887, 'pad_to': keyword_118893, 'kwargs_118900': kwargs_118900, 'window': keyword_118891, 'Fc': keyword_118889, 'scale': keyword_118897, 'data': keyword_118899, 'sides': keyword_118895}
    # Getting the type of 'ax' (line 3123)
    ax_118883 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3123, 14), 'ax', False)
    # Obtaining the member 'magnitude_spectrum' of a type (line 3123)
    magnitude_spectrum_118884 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3123, 14), ax_118883, 'magnitude_spectrum')
    # Calling magnitude_spectrum(args, kwargs) (line 3123)
    magnitude_spectrum_call_result_118902 = invoke(stypy.reporting.localization.Localization(__file__, 3123, 14), magnitude_spectrum_118884, *[x_118885], **kwargs_118901)
    
    # Assigning a type to the variable 'ret' (line 3123)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3123, 8), 'ret', magnitude_spectrum_call_result_118902)
    
    # finally branch of the try-finally block (line 3122)
    
    # Assigning a Name to a Attribute (line 3127):
    
    # Assigning a Name to a Attribute (line 3127):
    # Getting the type of 'washold' (line 3127)
    washold_118903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 19), 'washold')
    # Getting the type of 'ax' (line 3127)
    ax_118904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3127, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3127)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3127, 8), ax_118904, '_hold', washold_118903)
    
    # Getting the type of 'ret' (line 3129)
    ret_118905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3129, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3129)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3129, 4), 'stypy_return_type', ret_118905)
    
    # ################# End of 'magnitude_spectrum(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'magnitude_spectrum' in the type store
    # Getting the type of 'stypy_return_type' (line 3109)
    stypy_return_type_118906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3109, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118906)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'magnitude_spectrum'
    return stypy_return_type_118906

# Assigning a type to the variable 'magnitude_spectrum' (line 3109)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3109, 0), 'magnitude_spectrum', magnitude_spectrum)

@norecursion
def pcolor(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pcolor'
    module_type_store = module_type_store.open_function_context('pcolor', 3133, 0, False)
    
    # Passed parameters checking function
    pcolor.stypy_localization = localization
    pcolor.stypy_type_of_self = None
    pcolor.stypy_type_store = module_type_store
    pcolor.stypy_function_name = 'pcolor'
    pcolor.stypy_param_names_list = []
    pcolor.stypy_varargs_param_name = 'args'
    pcolor.stypy_kwargs_param_name = 'kwargs'
    pcolor.stypy_call_defaults = defaults
    pcolor.stypy_call_varargs = varargs
    pcolor.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pcolor', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pcolor', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pcolor(...)' code ##################

    
    # Assigning a Call to a Name (line 3135):
    
    # Assigning a Call to a Name (line 3135):
    
    # Call to gca(...): (line 3135)
    # Processing the call keyword arguments (line 3135)
    kwargs_118908 = {}
    # Getting the type of 'gca' (line 3135)
    gca_118907 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3135, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3135)
    gca_call_result_118909 = invoke(stypy.reporting.localization.Localization(__file__, 3135, 9), gca_118907, *[], **kwargs_118908)
    
    # Assigning a type to the variable 'ax' (line 3135)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3135, 4), 'ax', gca_call_result_118909)
    
    # Assigning a Attribute to a Name (line 3138):
    
    # Assigning a Attribute to a Name (line 3138):
    # Getting the type of 'ax' (line 3138)
    ax_118910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3138, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3138)
    _hold_118911 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3138, 14), ax_118910, '_hold')
    # Assigning a type to the variable 'washold' (line 3138)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3138, 4), 'washold', _hold_118911)
    
    # Assigning a Call to a Name (line 3139):
    
    # Assigning a Call to a Name (line 3139):
    
    # Call to pop(...): (line 3139)
    # Processing the call arguments (line 3139)
    unicode_118914 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3139, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 3139)
    None_118915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 30), 'None', False)
    # Processing the call keyword arguments (line 3139)
    kwargs_118916 = {}
    # Getting the type of 'kwargs' (line 3139)
    kwargs_118912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3139, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 3139)
    pop_118913 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3139, 11), kwargs_118912, 'pop')
    # Calling pop(args, kwargs) (line 3139)
    pop_call_result_118917 = invoke(stypy.reporting.localization.Localization(__file__, 3139, 11), pop_118913, *[unicode_118914, None_118915], **kwargs_118916)
    
    # Assigning a type to the variable 'hold' (line 3139)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3139, 4), 'hold', pop_call_result_118917)
    
    # Type idiom detected: calculating its left and rigth part (line 3140)
    # Getting the type of 'hold' (line 3140)
    hold_118918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3140, 4), 'hold')
    # Getting the type of 'None' (line 3140)
    None_118919 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3140, 19), 'None')
    
    (may_be_118920, more_types_in_union_118921) = may_not_be_none(hold_118918, None_118919)

    if may_be_118920:

        if more_types_in_union_118921:
            # Runtime conditional SSA (line 3140)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3141):
        
        # Assigning a Name to a Attribute (line 3141):
        # Getting the type of 'hold' (line 3141)
        hold_118922 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 19), 'hold')
        # Getting the type of 'ax' (line 3141)
        ax_118923 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3141, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3141)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3141, 8), ax_118923, '_hold', hold_118922)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3142, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3142)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118924 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3142, 8), 'matplotlib.cbook')

        if (type(import_118924) is not StypyTypeError):

            if (import_118924 != 'pyd_module'):
                __import__(import_118924)
                sys_modules_118925 = sys.modules[import_118924]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3142, 8), 'matplotlib.cbook', sys_modules_118925.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3142, 8), __file__, sys_modules_118925, sys_modules_118925.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3142, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3142)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3142, 8), 'matplotlib.cbook', import_118924)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3143)
        # Processing the call arguments (line 3143)
        unicode_118928 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3143, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3144)
        mplDeprecation_118929 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3144, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3143)
        kwargs_118930 = {}
        # Getting the type of 'warnings' (line 3143)
        warnings_118926 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3143, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3143)
        warn_118927 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3143, 8), warnings_118926, 'warn')
        # Calling warn(args, kwargs) (line 3143)
        warn_call_result_118931 = invoke(stypy.reporting.localization.Localization(__file__, 3143, 8), warn_118927, *[unicode_118928, mplDeprecation_118929], **kwargs_118930)
        

        if more_types_in_union_118921:
            # SSA join for if statement (line 3140)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3145)
    
    # Assigning a Call to a Name (line 3146):
    
    # Assigning a Call to a Name (line 3146):
    
    # Call to pcolor(...): (line 3146)
    # Getting the type of 'args' (line 3146)
    args_118934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 25), 'args', False)
    # Processing the call keyword arguments (line 3146)
    # Getting the type of 'kwargs' (line 3146)
    kwargs_118935 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 33), 'kwargs', False)
    kwargs_118936 = {'kwargs_118935': kwargs_118935}
    # Getting the type of 'ax' (line 3146)
    ax_118932 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3146, 14), 'ax', False)
    # Obtaining the member 'pcolor' of a type (line 3146)
    pcolor_118933 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3146, 14), ax_118932, 'pcolor')
    # Calling pcolor(args, kwargs) (line 3146)
    pcolor_call_result_118937 = invoke(stypy.reporting.localization.Localization(__file__, 3146, 14), pcolor_118933, *[args_118934], **kwargs_118936)
    
    # Assigning a type to the variable 'ret' (line 3146)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3146, 8), 'ret', pcolor_call_result_118937)
    
    # finally branch of the try-finally block (line 3145)
    
    # Assigning a Name to a Attribute (line 3148):
    
    # Assigning a Name to a Attribute (line 3148):
    # Getting the type of 'washold' (line 3148)
    washold_118938 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3148, 19), 'washold')
    # Getting the type of 'ax' (line 3148)
    ax_118939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3148, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3148)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3148, 8), ax_118939, '_hold', washold_118938)
    
    
    # Call to sci(...): (line 3149)
    # Processing the call arguments (line 3149)
    # Getting the type of 'ret' (line 3149)
    ret_118941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3149, 8), 'ret', False)
    # Processing the call keyword arguments (line 3149)
    kwargs_118942 = {}
    # Getting the type of 'sci' (line 3149)
    sci_118940 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3149, 4), 'sci', False)
    # Calling sci(args, kwargs) (line 3149)
    sci_call_result_118943 = invoke(stypy.reporting.localization.Localization(__file__, 3149, 4), sci_118940, *[ret_118941], **kwargs_118942)
    
    # Getting the type of 'ret' (line 3150)
    ret_118944 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3150, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3150)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3150, 4), 'stypy_return_type', ret_118944)
    
    # ################# End of 'pcolor(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pcolor' in the type store
    # Getting the type of 'stypy_return_type' (line 3133)
    stypy_return_type_118945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3133, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118945)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pcolor'
    return stypy_return_type_118945

# Assigning a type to the variable 'pcolor' (line 3133)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3133, 0), 'pcolor', pcolor)

@norecursion
def pcolormesh(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pcolormesh'
    module_type_store = module_type_store.open_function_context('pcolormesh', 3154, 0, False)
    
    # Passed parameters checking function
    pcolormesh.stypy_localization = localization
    pcolormesh.stypy_type_of_self = None
    pcolormesh.stypy_type_store = module_type_store
    pcolormesh.stypy_function_name = 'pcolormesh'
    pcolormesh.stypy_param_names_list = []
    pcolormesh.stypy_varargs_param_name = 'args'
    pcolormesh.stypy_kwargs_param_name = 'kwargs'
    pcolormesh.stypy_call_defaults = defaults
    pcolormesh.stypy_call_varargs = varargs
    pcolormesh.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pcolormesh', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pcolormesh', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pcolormesh(...)' code ##################

    
    # Assigning a Call to a Name (line 3156):
    
    # Assigning a Call to a Name (line 3156):
    
    # Call to gca(...): (line 3156)
    # Processing the call keyword arguments (line 3156)
    kwargs_118947 = {}
    # Getting the type of 'gca' (line 3156)
    gca_118946 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3156, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3156)
    gca_call_result_118948 = invoke(stypy.reporting.localization.Localization(__file__, 3156, 9), gca_118946, *[], **kwargs_118947)
    
    # Assigning a type to the variable 'ax' (line 3156)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3156, 4), 'ax', gca_call_result_118948)
    
    # Assigning a Attribute to a Name (line 3159):
    
    # Assigning a Attribute to a Name (line 3159):
    # Getting the type of 'ax' (line 3159)
    ax_118949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3159, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3159)
    _hold_118950 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3159, 14), ax_118949, '_hold')
    # Assigning a type to the variable 'washold' (line 3159)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3159, 4), 'washold', _hold_118950)
    
    # Assigning a Call to a Name (line 3160):
    
    # Assigning a Call to a Name (line 3160):
    
    # Call to pop(...): (line 3160)
    # Processing the call arguments (line 3160)
    unicode_118953 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3160, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 3160)
    None_118954 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3160, 30), 'None', False)
    # Processing the call keyword arguments (line 3160)
    kwargs_118955 = {}
    # Getting the type of 'kwargs' (line 3160)
    kwargs_118951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3160, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 3160)
    pop_118952 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3160, 11), kwargs_118951, 'pop')
    # Calling pop(args, kwargs) (line 3160)
    pop_call_result_118956 = invoke(stypy.reporting.localization.Localization(__file__, 3160, 11), pop_118952, *[unicode_118953, None_118954], **kwargs_118955)
    
    # Assigning a type to the variable 'hold' (line 3160)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3160, 4), 'hold', pop_call_result_118956)
    
    # Type idiom detected: calculating its left and rigth part (line 3161)
    # Getting the type of 'hold' (line 3161)
    hold_118957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3161, 4), 'hold')
    # Getting the type of 'None' (line 3161)
    None_118958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3161, 19), 'None')
    
    (may_be_118959, more_types_in_union_118960) = may_not_be_none(hold_118957, None_118958)

    if may_be_118959:

        if more_types_in_union_118960:
            # Runtime conditional SSA (line 3161)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3162):
        
        # Assigning a Name to a Attribute (line 3162):
        # Getting the type of 'hold' (line 3162)
        hold_118961 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 19), 'hold')
        # Getting the type of 'ax' (line 3162)
        ax_118962 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3162, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3162)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3162, 8), ax_118962, '_hold', hold_118961)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3163, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3163)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_118963 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3163, 8), 'matplotlib.cbook')

        if (type(import_118963) is not StypyTypeError):

            if (import_118963 != 'pyd_module'):
                __import__(import_118963)
                sys_modules_118964 = sys.modules[import_118963]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3163, 8), 'matplotlib.cbook', sys_modules_118964.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3163, 8), __file__, sys_modules_118964, sys_modules_118964.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3163, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3163)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3163, 8), 'matplotlib.cbook', import_118963)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3164)
        # Processing the call arguments (line 3164)
        unicode_118967 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3164, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3165)
        mplDeprecation_118968 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3165, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3164)
        kwargs_118969 = {}
        # Getting the type of 'warnings' (line 3164)
        warnings_118965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3164, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3164)
        warn_118966 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3164, 8), warnings_118965, 'warn')
        # Calling warn(args, kwargs) (line 3164)
        warn_call_result_118970 = invoke(stypy.reporting.localization.Localization(__file__, 3164, 8), warn_118966, *[unicode_118967, mplDeprecation_118968], **kwargs_118969)
        

        if more_types_in_union_118960:
            # SSA join for if statement (line 3161)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3166)
    
    # Assigning a Call to a Name (line 3167):
    
    # Assigning a Call to a Name (line 3167):
    
    # Call to pcolormesh(...): (line 3167)
    # Getting the type of 'args' (line 3167)
    args_118973 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3167, 29), 'args', False)
    # Processing the call keyword arguments (line 3167)
    # Getting the type of 'kwargs' (line 3167)
    kwargs_118974 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3167, 37), 'kwargs', False)
    kwargs_118975 = {'kwargs_118974': kwargs_118974}
    # Getting the type of 'ax' (line 3167)
    ax_118971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3167, 14), 'ax', False)
    # Obtaining the member 'pcolormesh' of a type (line 3167)
    pcolormesh_118972 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3167, 14), ax_118971, 'pcolormesh')
    # Calling pcolormesh(args, kwargs) (line 3167)
    pcolormesh_call_result_118976 = invoke(stypy.reporting.localization.Localization(__file__, 3167, 14), pcolormesh_118972, *[args_118973], **kwargs_118975)
    
    # Assigning a type to the variable 'ret' (line 3167)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3167, 8), 'ret', pcolormesh_call_result_118976)
    
    # finally branch of the try-finally block (line 3166)
    
    # Assigning a Name to a Attribute (line 3169):
    
    # Assigning a Name to a Attribute (line 3169):
    # Getting the type of 'washold' (line 3169)
    washold_118977 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3169, 19), 'washold')
    # Getting the type of 'ax' (line 3169)
    ax_118978 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3169, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3169)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3169, 8), ax_118978, '_hold', washold_118977)
    
    
    # Call to sci(...): (line 3170)
    # Processing the call arguments (line 3170)
    # Getting the type of 'ret' (line 3170)
    ret_118980 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3170, 8), 'ret', False)
    # Processing the call keyword arguments (line 3170)
    kwargs_118981 = {}
    # Getting the type of 'sci' (line 3170)
    sci_118979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3170, 4), 'sci', False)
    # Calling sci(args, kwargs) (line 3170)
    sci_call_result_118982 = invoke(stypy.reporting.localization.Localization(__file__, 3170, 4), sci_118979, *[ret_118980], **kwargs_118981)
    
    # Getting the type of 'ret' (line 3171)
    ret_118983 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3171, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3171)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3171, 4), 'stypy_return_type', ret_118983)
    
    # ################# End of 'pcolormesh(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pcolormesh' in the type store
    # Getting the type of 'stypy_return_type' (line 3154)
    stypy_return_type_118984 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3154, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_118984)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pcolormesh'
    return stypy_return_type_118984

# Assigning a type to the variable 'pcolormesh' (line 3154)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3154, 0), 'pcolormesh', pcolormesh)

@norecursion
def phase_spectrum(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3176)
    None_118985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3176, 25), 'None')
    # Getting the type of 'None' (line 3176)
    None_118986 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3176, 34), 'None')
    # Getting the type of 'None' (line 3176)
    None_118987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3176, 47), 'None')
    # Getting the type of 'None' (line 3176)
    None_118988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3176, 60), 'None')
    # Getting the type of 'None' (line 3176)
    None_118989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3176, 72), 'None')
    # Getting the type of 'None' (line 3177)
    None_118990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3177, 24), 'None')
    # Getting the type of 'None' (line 3177)
    None_118991 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3177, 35), 'None')
    defaults = [None_118985, None_118986, None_118987, None_118988, None_118989, None_118990, None_118991]
    # Create a new context for function 'phase_spectrum'
    module_type_store = module_type_store.open_function_context('phase_spectrum', 3175, 0, False)
    
    # Passed parameters checking function
    phase_spectrum.stypy_localization = localization
    phase_spectrum.stypy_type_of_self = None
    phase_spectrum.stypy_type_store = module_type_store
    phase_spectrum.stypy_function_name = 'phase_spectrum'
    phase_spectrum.stypy_param_names_list = ['x', 'Fs', 'Fc', 'window', 'pad_to', 'sides', 'hold', 'data']
    phase_spectrum.stypy_varargs_param_name = None
    phase_spectrum.stypy_kwargs_param_name = 'kwargs'
    phase_spectrum.stypy_call_defaults = defaults
    phase_spectrum.stypy_call_varargs = varargs
    phase_spectrum.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'phase_spectrum', ['x', 'Fs', 'Fc', 'window', 'pad_to', 'sides', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'phase_spectrum', localization, ['x', 'Fs', 'Fc', 'window', 'pad_to', 'sides', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'phase_spectrum(...)' code ##################

    
    # Assigning a Call to a Name (line 3178):
    
    # Assigning a Call to a Name (line 3178):
    
    # Call to gca(...): (line 3178)
    # Processing the call keyword arguments (line 3178)
    kwargs_118993 = {}
    # Getting the type of 'gca' (line 3178)
    gca_118992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3178, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3178)
    gca_call_result_118994 = invoke(stypy.reporting.localization.Localization(__file__, 3178, 9), gca_118992, *[], **kwargs_118993)
    
    # Assigning a type to the variable 'ax' (line 3178)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3178, 4), 'ax', gca_call_result_118994)
    
    # Assigning a Attribute to a Name (line 3181):
    
    # Assigning a Attribute to a Name (line 3181):
    # Getting the type of 'ax' (line 3181)
    ax_118995 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3181, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3181)
    _hold_118996 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3181, 14), ax_118995, '_hold')
    # Assigning a type to the variable 'washold' (line 3181)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3181, 4), 'washold', _hold_118996)
    
    # Type idiom detected: calculating its left and rigth part (line 3183)
    # Getting the type of 'hold' (line 3183)
    hold_118997 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3183, 4), 'hold')
    # Getting the type of 'None' (line 3183)
    None_118998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3183, 19), 'None')
    
    (may_be_118999, more_types_in_union_119000) = may_not_be_none(hold_118997, None_118998)

    if may_be_118999:

        if more_types_in_union_119000:
            # Runtime conditional SSA (line 3183)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3184):
        
        # Assigning a Name to a Attribute (line 3184):
        # Getting the type of 'hold' (line 3184)
        hold_119001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 19), 'hold')
        # Getting the type of 'ax' (line 3184)
        ax_119002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3184, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3184)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3184, 8), ax_119002, '_hold', hold_119001)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3185, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3185)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119003 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3185, 8), 'matplotlib.cbook')

        if (type(import_119003) is not StypyTypeError):

            if (import_119003 != 'pyd_module'):
                __import__(import_119003)
                sys_modules_119004 = sys.modules[import_119003]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3185, 8), 'matplotlib.cbook', sys_modules_119004.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3185, 8), __file__, sys_modules_119004, sys_modules_119004.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3185, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3185)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3185, 8), 'matplotlib.cbook', import_119003)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3186)
        # Processing the call arguments (line 3186)
        unicode_119007 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3186, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3187)
        mplDeprecation_119008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3187, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3186)
        kwargs_119009 = {}
        # Getting the type of 'warnings' (line 3186)
        warnings_119005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3186, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3186)
        warn_119006 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3186, 8), warnings_119005, 'warn')
        # Calling warn(args, kwargs) (line 3186)
        warn_call_result_119010 = invoke(stypy.reporting.localization.Localization(__file__, 3186, 8), warn_119006, *[unicode_119007, mplDeprecation_119008], **kwargs_119009)
        

        if more_types_in_union_119000:
            # SSA join for if statement (line 3183)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3188)
    
    # Assigning a Call to a Name (line 3189):
    
    # Assigning a Call to a Name (line 3189):
    
    # Call to phase_spectrum(...): (line 3189)
    # Processing the call arguments (line 3189)
    # Getting the type of 'x' (line 3189)
    x_119013 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 32), 'x', False)
    # Processing the call keyword arguments (line 3189)
    # Getting the type of 'Fs' (line 3189)
    Fs_119014 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 38), 'Fs', False)
    keyword_119015 = Fs_119014
    # Getting the type of 'Fc' (line 3189)
    Fc_119016 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 45), 'Fc', False)
    keyword_119017 = Fc_119016
    # Getting the type of 'window' (line 3189)
    window_119018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 56), 'window', False)
    keyword_119019 = window_119018
    # Getting the type of 'pad_to' (line 3189)
    pad_to_119020 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 71), 'pad_to', False)
    keyword_119021 = pad_to_119020
    # Getting the type of 'sides' (line 3190)
    sides_119022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3190, 38), 'sides', False)
    keyword_119023 = sides_119022
    # Getting the type of 'data' (line 3190)
    data_119024 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3190, 50), 'data', False)
    keyword_119025 = data_119024
    # Getting the type of 'kwargs' (line 3190)
    kwargs_119026 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3190, 58), 'kwargs', False)
    kwargs_119027 = {'kwargs_119026': kwargs_119026, 'Fs': keyword_119015, 'pad_to': keyword_119021, 'window': keyword_119019, 'Fc': keyword_119017, 'data': keyword_119025, 'sides': keyword_119023}
    # Getting the type of 'ax' (line 3189)
    ax_119011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3189, 14), 'ax', False)
    # Obtaining the member 'phase_spectrum' of a type (line 3189)
    phase_spectrum_119012 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3189, 14), ax_119011, 'phase_spectrum')
    # Calling phase_spectrum(args, kwargs) (line 3189)
    phase_spectrum_call_result_119028 = invoke(stypy.reporting.localization.Localization(__file__, 3189, 14), phase_spectrum_119012, *[x_119013], **kwargs_119027)
    
    # Assigning a type to the variable 'ret' (line 3189)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3189, 8), 'ret', phase_spectrum_call_result_119028)
    
    # finally branch of the try-finally block (line 3188)
    
    # Assigning a Name to a Attribute (line 3192):
    
    # Assigning a Name to a Attribute (line 3192):
    # Getting the type of 'washold' (line 3192)
    washold_119029 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3192, 19), 'washold')
    # Getting the type of 'ax' (line 3192)
    ax_119030 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3192, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3192)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3192, 8), ax_119030, '_hold', washold_119029)
    
    # Getting the type of 'ret' (line 3194)
    ret_119031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3194, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3194)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3194, 4), 'stypy_return_type', ret_119031)
    
    # ################# End of 'phase_spectrum(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'phase_spectrum' in the type store
    # Getting the type of 'stypy_return_type' (line 3175)
    stypy_return_type_119032 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3175, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119032)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'phase_spectrum'
    return stypy_return_type_119032

# Assigning a type to the variable 'phase_spectrum' (line 3175)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3175, 0), 'phase_spectrum', phase_spectrum)

@norecursion
def pie(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3199)
    None_119033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3199, 19), 'None')
    # Getting the type of 'None' (line 3199)
    None_119034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3199, 32), 'None')
    # Getting the type of 'None' (line 3199)
    None_119035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3199, 45), 'None')
    # Getting the type of 'None' (line 3199)
    None_119036 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3199, 59), 'None')
    float_119037 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3200, 20), 'float')
    # Getting the type of 'False' (line 3200)
    False_119038 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3200, 32), 'False')
    float_119039 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3200, 53), 'float')
    # Getting the type of 'None' (line 3200)
    None_119040 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3200, 69), 'None')
    # Getting the type of 'None' (line 3201)
    None_119041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 15), 'None')
    # Getting the type of 'True' (line 3201)
    True_119042 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 34), 'True')
    # Getting the type of 'None' (line 3201)
    None_119043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 51), 'None')
    # Getting the type of 'None' (line 3201)
    None_119044 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3201, 67), 'None')
    
    # Obtaining an instance of the builtin type 'tuple' (line 3202)
    tuple_119045 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3202, 16), 'tuple')
    # Adding type elements to the builtin type 'tuple' instance (line 3202)
    # Adding element type (line 3202)
    int_119046 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3202, 16), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3202, 16), tuple_119045, int_119046)
    # Adding element type (line 3202)
    int_119047 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3202, 19), 'int')
    add_contained_elements_type(stypy.reporting.localization.Localization(__file__, 3202, 16), tuple_119045, int_119047)
    
    # Getting the type of 'False' (line 3202)
    False_119048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3202, 29), 'False')
    # Getting the type of 'False' (line 3202)
    False_119049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3202, 49), 'False')
    # Getting the type of 'None' (line 3202)
    None_119050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3202, 61), 'None')
    # Getting the type of 'None' (line 3202)
    None_119051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3202, 72), 'None')
    defaults = [None_119033, None_119034, None_119035, None_119036, float_119037, False_119038, float_119039, None_119040, None_119041, True_119042, None_119043, None_119044, tuple_119045, False_119048, False_119049, None_119050, None_119051]
    # Create a new context for function 'pie'
    module_type_store = module_type_store.open_function_context('pie', 3198, 0, False)
    
    # Passed parameters checking function
    pie.stypy_localization = localization
    pie.stypy_type_of_self = None
    pie.stypy_type_store = module_type_store
    pie.stypy_function_name = 'pie'
    pie.stypy_param_names_list = ['x', 'explode', 'labels', 'colors', 'autopct', 'pctdistance', 'shadow', 'labeldistance', 'startangle', 'radius', 'counterclock', 'wedgeprops', 'textprops', 'center', 'frame', 'rotatelabels', 'hold', 'data']
    pie.stypy_varargs_param_name = None
    pie.stypy_kwargs_param_name = None
    pie.stypy_call_defaults = defaults
    pie.stypy_call_varargs = varargs
    pie.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pie', ['x', 'explode', 'labels', 'colors', 'autopct', 'pctdistance', 'shadow', 'labeldistance', 'startangle', 'radius', 'counterclock', 'wedgeprops', 'textprops', 'center', 'frame', 'rotatelabels', 'hold', 'data'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pie', localization, ['x', 'explode', 'labels', 'colors', 'autopct', 'pctdistance', 'shadow', 'labeldistance', 'startangle', 'radius', 'counterclock', 'wedgeprops', 'textprops', 'center', 'frame', 'rotatelabels', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pie(...)' code ##################

    
    # Assigning a Call to a Name (line 3203):
    
    # Assigning a Call to a Name (line 3203):
    
    # Call to gca(...): (line 3203)
    # Processing the call keyword arguments (line 3203)
    kwargs_119053 = {}
    # Getting the type of 'gca' (line 3203)
    gca_119052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3203, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3203)
    gca_call_result_119054 = invoke(stypy.reporting.localization.Localization(__file__, 3203, 9), gca_119052, *[], **kwargs_119053)
    
    # Assigning a type to the variable 'ax' (line 3203)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3203, 4), 'ax', gca_call_result_119054)
    
    # Assigning a Attribute to a Name (line 3206):
    
    # Assigning a Attribute to a Name (line 3206):
    # Getting the type of 'ax' (line 3206)
    ax_119055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3206, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3206)
    _hold_119056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3206, 14), ax_119055, '_hold')
    # Assigning a type to the variable 'washold' (line 3206)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3206, 4), 'washold', _hold_119056)
    
    # Type idiom detected: calculating its left and rigth part (line 3208)
    # Getting the type of 'hold' (line 3208)
    hold_119057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3208, 4), 'hold')
    # Getting the type of 'None' (line 3208)
    None_119058 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3208, 19), 'None')
    
    (may_be_119059, more_types_in_union_119060) = may_not_be_none(hold_119057, None_119058)

    if may_be_119059:

        if more_types_in_union_119060:
            # Runtime conditional SSA (line 3208)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3209):
        
        # Assigning a Name to a Attribute (line 3209):
        # Getting the type of 'hold' (line 3209)
        hold_119061 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3209, 19), 'hold')
        # Getting the type of 'ax' (line 3209)
        ax_119062 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3209, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3209)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3209, 8), ax_119062, '_hold', hold_119061)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3210, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3210)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119063 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3210, 8), 'matplotlib.cbook')

        if (type(import_119063) is not StypyTypeError):

            if (import_119063 != 'pyd_module'):
                __import__(import_119063)
                sys_modules_119064 = sys.modules[import_119063]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3210, 8), 'matplotlib.cbook', sys_modules_119064.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3210, 8), __file__, sys_modules_119064, sys_modules_119064.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3210, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3210)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3210, 8), 'matplotlib.cbook', import_119063)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3211)
        # Processing the call arguments (line 3211)
        unicode_119067 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3211, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3212)
        mplDeprecation_119068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3212, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3211)
        kwargs_119069 = {}
        # Getting the type of 'warnings' (line 3211)
        warnings_119065 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3211, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3211)
        warn_119066 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3211, 8), warnings_119065, 'warn')
        # Calling warn(args, kwargs) (line 3211)
        warn_call_result_119070 = invoke(stypy.reporting.localization.Localization(__file__, 3211, 8), warn_119066, *[unicode_119067, mplDeprecation_119068], **kwargs_119069)
        

        if more_types_in_union_119060:
            # SSA join for if statement (line 3208)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3213)
    
    # Assigning a Call to a Name (line 3214):
    
    # Assigning a Call to a Name (line 3214):
    
    # Call to pie(...): (line 3214)
    # Processing the call arguments (line 3214)
    # Getting the type of 'x' (line 3214)
    x_119073 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3214, 21), 'x', False)
    # Processing the call keyword arguments (line 3214)
    # Getting the type of 'explode' (line 3214)
    explode_119074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3214, 32), 'explode', False)
    keyword_119075 = explode_119074
    # Getting the type of 'labels' (line 3214)
    labels_119076 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3214, 48), 'labels', False)
    keyword_119077 = labels_119076
    # Getting the type of 'colors' (line 3214)
    colors_119078 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3214, 63), 'colors', False)
    keyword_119079 = colors_119078
    # Getting the type of 'autopct' (line 3215)
    autopct_119080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3215, 29), 'autopct', False)
    keyword_119081 = autopct_119080
    # Getting the type of 'pctdistance' (line 3215)
    pctdistance_119082 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3215, 50), 'pctdistance', False)
    keyword_119083 = pctdistance_119082
    # Getting the type of 'shadow' (line 3215)
    shadow_119084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3215, 70), 'shadow', False)
    keyword_119085 = shadow_119084
    # Getting the type of 'labeldistance' (line 3216)
    labeldistance_119086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3216, 35), 'labeldistance', False)
    keyword_119087 = labeldistance_119086
    # Getting the type of 'startangle' (line 3216)
    startangle_119088 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3216, 61), 'startangle', False)
    keyword_119089 = startangle_119088
    # Getting the type of 'radius' (line 3217)
    radius_119090 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3217, 28), 'radius', False)
    keyword_119091 = radius_119090
    # Getting the type of 'counterclock' (line 3217)
    counterclock_119092 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3217, 49), 'counterclock', False)
    keyword_119093 = counterclock_119092
    # Getting the type of 'wedgeprops' (line 3218)
    wedgeprops_119094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3218, 32), 'wedgeprops', False)
    keyword_119095 = wedgeprops_119094
    # Getting the type of 'textprops' (line 3218)
    textprops_119096 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3218, 54), 'textprops', False)
    keyword_119097 = textprops_119096
    # Getting the type of 'center' (line 3218)
    center_119098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3218, 72), 'center', False)
    keyword_119099 = center_119098
    # Getting the type of 'frame' (line 3219)
    frame_119100 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 27), 'frame', False)
    keyword_119101 = frame_119100
    # Getting the type of 'rotatelabels' (line 3219)
    rotatelabels_119102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 47), 'rotatelabels', False)
    keyword_119103 = rotatelabels_119102
    # Getting the type of 'data' (line 3219)
    data_119104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3219, 66), 'data', False)
    keyword_119105 = data_119104
    kwargs_119106 = {'autopct': keyword_119081, 'pctdistance': keyword_119083, 'center': keyword_119099, 'counterclock': keyword_119093, 'labels': keyword_119077, 'wedgeprops': keyword_119095, 'explode': keyword_119075, 'colors': keyword_119079, 'radius': keyword_119091, 'frame': keyword_119101, 'startangle': keyword_119089, 'rotatelabels': keyword_119103, 'textprops': keyword_119097, 'shadow': keyword_119085, 'data': keyword_119105, 'labeldistance': keyword_119087}
    # Getting the type of 'ax' (line 3214)
    ax_119071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3214, 14), 'ax', False)
    # Obtaining the member 'pie' of a type (line 3214)
    pie_119072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3214, 14), ax_119071, 'pie')
    # Calling pie(args, kwargs) (line 3214)
    pie_call_result_119107 = invoke(stypy.reporting.localization.Localization(__file__, 3214, 14), pie_119072, *[x_119073], **kwargs_119106)
    
    # Assigning a type to the variable 'ret' (line 3214)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3214, 8), 'ret', pie_call_result_119107)
    
    # finally branch of the try-finally block (line 3213)
    
    # Assigning a Name to a Attribute (line 3221):
    
    # Assigning a Name to a Attribute (line 3221):
    # Getting the type of 'washold' (line 3221)
    washold_119108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3221, 19), 'washold')
    # Getting the type of 'ax' (line 3221)
    ax_119109 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3221, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3221)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3221, 8), ax_119109, '_hold', washold_119108)
    
    # Getting the type of 'ret' (line 3223)
    ret_119110 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3223, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3223)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3223, 4), 'stypy_return_type', ret_119110)
    
    # ################# End of 'pie(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pie' in the type store
    # Getting the type of 'stypy_return_type' (line 3198)
    stypy_return_type_119111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3198, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119111)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pie'
    return stypy_return_type_119111

# Assigning a type to the variable 'pie' (line 3198)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3198, 0), 'pie', pie)

@norecursion
def plot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'plot'
    module_type_store = module_type_store.open_function_context('plot', 3227, 0, False)
    
    # Passed parameters checking function
    plot.stypy_localization = localization
    plot.stypy_type_of_self = None
    plot.stypy_type_store = module_type_store
    plot.stypy_function_name = 'plot'
    plot.stypy_param_names_list = []
    plot.stypy_varargs_param_name = 'args'
    plot.stypy_kwargs_param_name = 'kwargs'
    plot.stypy_call_defaults = defaults
    plot.stypy_call_varargs = varargs
    plot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'plot', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'plot', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'plot(...)' code ##################

    
    # Assigning a Call to a Name (line 3229):
    
    # Assigning a Call to a Name (line 3229):
    
    # Call to gca(...): (line 3229)
    # Processing the call keyword arguments (line 3229)
    kwargs_119113 = {}
    # Getting the type of 'gca' (line 3229)
    gca_119112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3229, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3229)
    gca_call_result_119114 = invoke(stypy.reporting.localization.Localization(__file__, 3229, 9), gca_119112, *[], **kwargs_119113)
    
    # Assigning a type to the variable 'ax' (line 3229)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3229, 4), 'ax', gca_call_result_119114)
    
    # Assigning a Attribute to a Name (line 3232):
    
    # Assigning a Attribute to a Name (line 3232):
    # Getting the type of 'ax' (line 3232)
    ax_119115 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3232, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3232)
    _hold_119116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3232, 14), ax_119115, '_hold')
    # Assigning a type to the variable 'washold' (line 3232)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3232, 4), 'washold', _hold_119116)
    
    # Assigning a Call to a Name (line 3233):
    
    # Assigning a Call to a Name (line 3233):
    
    # Call to pop(...): (line 3233)
    # Processing the call arguments (line 3233)
    unicode_119119 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3233, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 3233)
    None_119120 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3233, 30), 'None', False)
    # Processing the call keyword arguments (line 3233)
    kwargs_119121 = {}
    # Getting the type of 'kwargs' (line 3233)
    kwargs_119117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3233, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 3233)
    pop_119118 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3233, 11), kwargs_119117, 'pop')
    # Calling pop(args, kwargs) (line 3233)
    pop_call_result_119122 = invoke(stypy.reporting.localization.Localization(__file__, 3233, 11), pop_119118, *[unicode_119119, None_119120], **kwargs_119121)
    
    # Assigning a type to the variable 'hold' (line 3233)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3233, 4), 'hold', pop_call_result_119122)
    
    # Type idiom detected: calculating its left and rigth part (line 3234)
    # Getting the type of 'hold' (line 3234)
    hold_119123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3234, 4), 'hold')
    # Getting the type of 'None' (line 3234)
    None_119124 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3234, 19), 'None')
    
    (may_be_119125, more_types_in_union_119126) = may_not_be_none(hold_119123, None_119124)

    if may_be_119125:

        if more_types_in_union_119126:
            # Runtime conditional SSA (line 3234)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3235):
        
        # Assigning a Name to a Attribute (line 3235):
        # Getting the type of 'hold' (line 3235)
        hold_119127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 19), 'hold')
        # Getting the type of 'ax' (line 3235)
        ax_119128 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3235, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3235)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3235, 8), ax_119128, '_hold', hold_119127)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3236, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3236)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119129 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3236, 8), 'matplotlib.cbook')

        if (type(import_119129) is not StypyTypeError):

            if (import_119129 != 'pyd_module'):
                __import__(import_119129)
                sys_modules_119130 = sys.modules[import_119129]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3236, 8), 'matplotlib.cbook', sys_modules_119130.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3236, 8), __file__, sys_modules_119130, sys_modules_119130.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3236, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3236)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3236, 8), 'matplotlib.cbook', import_119129)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3237)
        # Processing the call arguments (line 3237)
        unicode_119133 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3237, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3238)
        mplDeprecation_119134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3238, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3237)
        kwargs_119135 = {}
        # Getting the type of 'warnings' (line 3237)
        warnings_119131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3237, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3237)
        warn_119132 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3237, 8), warnings_119131, 'warn')
        # Calling warn(args, kwargs) (line 3237)
        warn_call_result_119136 = invoke(stypy.reporting.localization.Localization(__file__, 3237, 8), warn_119132, *[unicode_119133, mplDeprecation_119134], **kwargs_119135)
        

        if more_types_in_union_119126:
            # SSA join for if statement (line 3234)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3239)
    
    # Assigning a Call to a Name (line 3240):
    
    # Assigning a Call to a Name (line 3240):
    
    # Call to plot(...): (line 3240)
    # Getting the type of 'args' (line 3240)
    args_119139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3240, 23), 'args', False)
    # Processing the call keyword arguments (line 3240)
    # Getting the type of 'kwargs' (line 3240)
    kwargs_119140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3240, 31), 'kwargs', False)
    kwargs_119141 = {'kwargs_119140': kwargs_119140}
    # Getting the type of 'ax' (line 3240)
    ax_119137 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3240, 14), 'ax', False)
    # Obtaining the member 'plot' of a type (line 3240)
    plot_119138 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3240, 14), ax_119137, 'plot')
    # Calling plot(args, kwargs) (line 3240)
    plot_call_result_119142 = invoke(stypy.reporting.localization.Localization(__file__, 3240, 14), plot_119138, *[args_119139], **kwargs_119141)
    
    # Assigning a type to the variable 'ret' (line 3240)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3240, 8), 'ret', plot_call_result_119142)
    
    # finally branch of the try-finally block (line 3239)
    
    # Assigning a Name to a Attribute (line 3242):
    
    # Assigning a Name to a Attribute (line 3242):
    # Getting the type of 'washold' (line 3242)
    washold_119143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3242, 19), 'washold')
    # Getting the type of 'ax' (line 3242)
    ax_119144 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3242, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3242)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3242, 8), ax_119144, '_hold', washold_119143)
    
    # Getting the type of 'ret' (line 3244)
    ret_119145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3244, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3244)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3244, 4), 'stypy_return_type', ret_119145)
    
    # ################# End of 'plot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'plot' in the type store
    # Getting the type of 'stypy_return_type' (line 3227)
    stypy_return_type_119146 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3227, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119146)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'plot'
    return stypy_return_type_119146

# Assigning a type to the variable 'plot' (line 3227)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3227, 0), 'plot', plot)

@norecursion
def plot_date(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_119147 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3249, 24), 'unicode', u'o')
    # Getting the type of 'None' (line 3249)
    None_119148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 32), 'None')
    # Getting the type of 'True' (line 3249)
    True_119149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 44), 'True')
    # Getting the type of 'False' (line 3249)
    False_119150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 56), 'False')
    # Getting the type of 'None' (line 3249)
    None_119151 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3249, 68), 'None')
    # Getting the type of 'None' (line 3250)
    None_119152 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3250, 19), 'None')
    defaults = [unicode_119147, None_119148, True_119149, False_119150, None_119151, None_119152]
    # Create a new context for function 'plot_date'
    module_type_store = module_type_store.open_function_context('plot_date', 3248, 0, False)
    
    # Passed parameters checking function
    plot_date.stypy_localization = localization
    plot_date.stypy_type_of_self = None
    plot_date.stypy_type_store = module_type_store
    plot_date.stypy_function_name = 'plot_date'
    plot_date.stypy_param_names_list = ['x', 'y', 'fmt', 'tz', 'xdate', 'ydate', 'hold', 'data']
    plot_date.stypy_varargs_param_name = None
    plot_date.stypy_kwargs_param_name = 'kwargs'
    plot_date.stypy_call_defaults = defaults
    plot_date.stypy_call_varargs = varargs
    plot_date.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'plot_date', ['x', 'y', 'fmt', 'tz', 'xdate', 'ydate', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'plot_date', localization, ['x', 'y', 'fmt', 'tz', 'xdate', 'ydate', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'plot_date(...)' code ##################

    
    # Assigning a Call to a Name (line 3251):
    
    # Assigning a Call to a Name (line 3251):
    
    # Call to gca(...): (line 3251)
    # Processing the call keyword arguments (line 3251)
    kwargs_119154 = {}
    # Getting the type of 'gca' (line 3251)
    gca_119153 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3251, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3251)
    gca_call_result_119155 = invoke(stypy.reporting.localization.Localization(__file__, 3251, 9), gca_119153, *[], **kwargs_119154)
    
    # Assigning a type to the variable 'ax' (line 3251)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3251, 4), 'ax', gca_call_result_119155)
    
    # Assigning a Attribute to a Name (line 3254):
    
    # Assigning a Attribute to a Name (line 3254):
    # Getting the type of 'ax' (line 3254)
    ax_119156 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3254, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3254)
    _hold_119157 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3254, 14), ax_119156, '_hold')
    # Assigning a type to the variable 'washold' (line 3254)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3254, 4), 'washold', _hold_119157)
    
    # Type idiom detected: calculating its left and rigth part (line 3256)
    # Getting the type of 'hold' (line 3256)
    hold_119158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3256, 4), 'hold')
    # Getting the type of 'None' (line 3256)
    None_119159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3256, 19), 'None')
    
    (may_be_119160, more_types_in_union_119161) = may_not_be_none(hold_119158, None_119159)

    if may_be_119160:

        if more_types_in_union_119161:
            # Runtime conditional SSA (line 3256)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3257):
        
        # Assigning a Name to a Attribute (line 3257):
        # Getting the type of 'hold' (line 3257)
        hold_119162 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3257, 19), 'hold')
        # Getting the type of 'ax' (line 3257)
        ax_119163 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3257, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3257)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3257, 8), ax_119163, '_hold', hold_119162)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3258, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3258)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119164 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3258, 8), 'matplotlib.cbook')

        if (type(import_119164) is not StypyTypeError):

            if (import_119164 != 'pyd_module'):
                __import__(import_119164)
                sys_modules_119165 = sys.modules[import_119164]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3258, 8), 'matplotlib.cbook', sys_modules_119165.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3258, 8), __file__, sys_modules_119165, sys_modules_119165.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3258, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3258)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3258, 8), 'matplotlib.cbook', import_119164)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3259)
        # Processing the call arguments (line 3259)
        unicode_119168 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3259, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3260)
        mplDeprecation_119169 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3260, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3259)
        kwargs_119170 = {}
        # Getting the type of 'warnings' (line 3259)
        warnings_119166 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3259, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3259)
        warn_119167 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3259, 8), warnings_119166, 'warn')
        # Calling warn(args, kwargs) (line 3259)
        warn_call_result_119171 = invoke(stypy.reporting.localization.Localization(__file__, 3259, 8), warn_119167, *[unicode_119168, mplDeprecation_119169], **kwargs_119170)
        

        if more_types_in_union_119161:
            # SSA join for if statement (line 3256)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3261)
    
    # Assigning a Call to a Name (line 3262):
    
    # Assigning a Call to a Name (line 3262):
    
    # Call to plot_date(...): (line 3262)
    # Processing the call arguments (line 3262)
    # Getting the type of 'x' (line 3262)
    x_119174 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 27), 'x', False)
    # Getting the type of 'y' (line 3262)
    y_119175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 30), 'y', False)
    # Processing the call keyword arguments (line 3262)
    # Getting the type of 'fmt' (line 3262)
    fmt_119176 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 37), 'fmt', False)
    keyword_119177 = fmt_119176
    # Getting the type of 'tz' (line 3262)
    tz_119178 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 45), 'tz', False)
    keyword_119179 = tz_119178
    # Getting the type of 'xdate' (line 3262)
    xdate_119180 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 55), 'xdate', False)
    keyword_119181 = xdate_119180
    # Getting the type of 'ydate' (line 3262)
    ydate_119182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 68), 'ydate', False)
    keyword_119183 = ydate_119182
    # Getting the type of 'data' (line 3263)
    data_119184 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3263, 32), 'data', False)
    keyword_119185 = data_119184
    # Getting the type of 'kwargs' (line 3263)
    kwargs_119186 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3263, 40), 'kwargs', False)
    kwargs_119187 = {'tz': keyword_119179, 'fmt': keyword_119177, 'ydate': keyword_119183, 'xdate': keyword_119181, 'kwargs_119186': kwargs_119186, 'data': keyword_119185}
    # Getting the type of 'ax' (line 3262)
    ax_119172 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3262, 14), 'ax', False)
    # Obtaining the member 'plot_date' of a type (line 3262)
    plot_date_119173 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3262, 14), ax_119172, 'plot_date')
    # Calling plot_date(args, kwargs) (line 3262)
    plot_date_call_result_119188 = invoke(stypy.reporting.localization.Localization(__file__, 3262, 14), plot_date_119173, *[x_119174, y_119175], **kwargs_119187)
    
    # Assigning a type to the variable 'ret' (line 3262)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3262, 8), 'ret', plot_date_call_result_119188)
    
    # finally branch of the try-finally block (line 3261)
    
    # Assigning a Name to a Attribute (line 3265):
    
    # Assigning a Name to a Attribute (line 3265):
    # Getting the type of 'washold' (line 3265)
    washold_119189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3265, 19), 'washold')
    # Getting the type of 'ax' (line 3265)
    ax_119190 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3265, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3265)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3265, 8), ax_119190, '_hold', washold_119189)
    
    # Getting the type of 'ret' (line 3267)
    ret_119191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3267, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3267)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3267, 4), 'stypy_return_type', ret_119191)
    
    # ################# End of 'plot_date(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'plot_date' in the type store
    # Getting the type of 'stypy_return_type' (line 3248)
    stypy_return_type_119192 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3248, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119192)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'plot_date'
    return stypy_return_type_119192

# Assigning a type to the variable 'plot_date' (line 3248)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3248, 0), 'plot_date', plot_date)

@norecursion
def psd(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3272)
    None_119193 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 16), 'None')
    # Getting the type of 'None' (line 3272)
    None_119194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 25), 'None')
    # Getting the type of 'None' (line 3272)
    None_119195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 34), 'None')
    # Getting the type of 'None' (line 3272)
    None_119196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 48), 'None')
    # Getting the type of 'None' (line 3272)
    None_119197 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3272, 61), 'None')
    # Getting the type of 'None' (line 3273)
    None_119198 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3273, 17), 'None')
    # Getting the type of 'None' (line 3273)
    None_119199 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3273, 30), 'None')
    # Getting the type of 'None' (line 3273)
    None_119200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3273, 42), 'None')
    # Getting the type of 'None' (line 3273)
    None_119201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3273, 62), 'None')
    # Getting the type of 'None' (line 3274)
    None_119202 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 20), 'None')
    # Getting the type of 'None' (line 3274)
    None_119203 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 31), 'None')
    # Getting the type of 'None' (line 3274)
    None_119204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3274, 42), 'None')
    defaults = [None_119193, None_119194, None_119195, None_119196, None_119197, None_119198, None_119199, None_119200, None_119201, None_119202, None_119203, None_119204]
    # Create a new context for function 'psd'
    module_type_store = module_type_store.open_function_context('psd', 3271, 0, False)
    
    # Passed parameters checking function
    psd.stypy_localization = localization
    psd.stypy_type_of_self = None
    psd.stypy_type_store = module_type_store
    psd.stypy_function_name = 'psd'
    psd.stypy_param_names_list = ['x', 'NFFT', 'Fs', 'Fc', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'return_line', 'hold', 'data']
    psd.stypy_varargs_param_name = None
    psd.stypy_kwargs_param_name = 'kwargs'
    psd.stypy_call_defaults = defaults
    psd.stypy_call_varargs = varargs
    psd.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'psd', ['x', 'NFFT', 'Fs', 'Fc', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'return_line', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'psd', localization, ['x', 'NFFT', 'Fs', 'Fc', 'detrend', 'window', 'noverlap', 'pad_to', 'sides', 'scale_by_freq', 'return_line', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'psd(...)' code ##################

    
    # Assigning a Call to a Name (line 3275):
    
    # Assigning a Call to a Name (line 3275):
    
    # Call to gca(...): (line 3275)
    # Processing the call keyword arguments (line 3275)
    kwargs_119206 = {}
    # Getting the type of 'gca' (line 3275)
    gca_119205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3275, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3275)
    gca_call_result_119207 = invoke(stypy.reporting.localization.Localization(__file__, 3275, 9), gca_119205, *[], **kwargs_119206)
    
    # Assigning a type to the variable 'ax' (line 3275)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3275, 4), 'ax', gca_call_result_119207)
    
    # Assigning a Attribute to a Name (line 3278):
    
    # Assigning a Attribute to a Name (line 3278):
    # Getting the type of 'ax' (line 3278)
    ax_119208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3278, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3278)
    _hold_119209 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3278, 14), ax_119208, '_hold')
    # Assigning a type to the variable 'washold' (line 3278)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3278, 4), 'washold', _hold_119209)
    
    # Type idiom detected: calculating its left and rigth part (line 3280)
    # Getting the type of 'hold' (line 3280)
    hold_119210 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3280, 4), 'hold')
    # Getting the type of 'None' (line 3280)
    None_119211 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3280, 19), 'None')
    
    (may_be_119212, more_types_in_union_119213) = may_not_be_none(hold_119210, None_119211)

    if may_be_119212:

        if more_types_in_union_119213:
            # Runtime conditional SSA (line 3280)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3281):
        
        # Assigning a Name to a Attribute (line 3281):
        # Getting the type of 'hold' (line 3281)
        hold_119214 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 19), 'hold')
        # Getting the type of 'ax' (line 3281)
        ax_119215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3281, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3281)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3281, 8), ax_119215, '_hold', hold_119214)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3282, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3282)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119216 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3282, 8), 'matplotlib.cbook')

        if (type(import_119216) is not StypyTypeError):

            if (import_119216 != 'pyd_module'):
                __import__(import_119216)
                sys_modules_119217 = sys.modules[import_119216]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3282, 8), 'matplotlib.cbook', sys_modules_119217.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3282, 8), __file__, sys_modules_119217, sys_modules_119217.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3282, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3282)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3282, 8), 'matplotlib.cbook', import_119216)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3283)
        # Processing the call arguments (line 3283)
        unicode_119220 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3283, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3284)
        mplDeprecation_119221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3284, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3283)
        kwargs_119222 = {}
        # Getting the type of 'warnings' (line 3283)
        warnings_119218 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3283, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3283)
        warn_119219 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3283, 8), warnings_119218, 'warn')
        # Calling warn(args, kwargs) (line 3283)
        warn_call_result_119223 = invoke(stypy.reporting.localization.Localization(__file__, 3283, 8), warn_119219, *[unicode_119220, mplDeprecation_119221], **kwargs_119222)
        

        if more_types_in_union_119213:
            # SSA join for if statement (line 3280)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3285)
    
    # Assigning a Call to a Name (line 3286):
    
    # Assigning a Call to a Name (line 3286):
    
    # Call to psd(...): (line 3286)
    # Processing the call arguments (line 3286)
    # Getting the type of 'x' (line 3286)
    x_119226 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3286, 21), 'x', False)
    # Processing the call keyword arguments (line 3286)
    # Getting the type of 'NFFT' (line 3286)
    NFFT_119227 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3286, 29), 'NFFT', False)
    keyword_119228 = NFFT_119227
    # Getting the type of 'Fs' (line 3286)
    Fs_119229 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3286, 38), 'Fs', False)
    keyword_119230 = Fs_119229
    # Getting the type of 'Fc' (line 3286)
    Fc_119231 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3286, 45), 'Fc', False)
    keyword_119232 = Fc_119231
    # Getting the type of 'detrend' (line 3286)
    detrend_119233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3286, 57), 'detrend', False)
    keyword_119234 = detrend_119233
    # Getting the type of 'window' (line 3287)
    window_119235 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3287, 28), 'window', False)
    keyword_119236 = window_119235
    # Getting the type of 'noverlap' (line 3287)
    noverlap_119237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3287, 45), 'noverlap', False)
    keyword_119238 = noverlap_119237
    # Getting the type of 'pad_to' (line 3287)
    pad_to_119239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3287, 62), 'pad_to', False)
    keyword_119240 = pad_to_119239
    # Getting the type of 'sides' (line 3288)
    sides_119241 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 27), 'sides', False)
    keyword_119242 = sides_119241
    # Getting the type of 'scale_by_freq' (line 3288)
    scale_by_freq_119243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3288, 48), 'scale_by_freq', False)
    keyword_119244 = scale_by_freq_119243
    # Getting the type of 'return_line' (line 3289)
    return_line_119245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3289, 33), 'return_line', False)
    keyword_119246 = return_line_119245
    # Getting the type of 'data' (line 3289)
    data_119247 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3289, 51), 'data', False)
    keyword_119248 = data_119247
    # Getting the type of 'kwargs' (line 3289)
    kwargs_119249 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3289, 59), 'kwargs', False)
    kwargs_119250 = {'return_line': keyword_119246, 'Fs': keyword_119230, 'pad_to': keyword_119240, 'kwargs_119249': kwargs_119249, 'scale_by_freq': keyword_119244, 'detrend': keyword_119234, 'window': keyword_119236, 'Fc': keyword_119232, 'NFFT': keyword_119228, 'data': keyword_119248, 'sides': keyword_119242, 'noverlap': keyword_119238}
    # Getting the type of 'ax' (line 3286)
    ax_119224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3286, 14), 'ax', False)
    # Obtaining the member 'psd' of a type (line 3286)
    psd_119225 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3286, 14), ax_119224, 'psd')
    # Calling psd(args, kwargs) (line 3286)
    psd_call_result_119251 = invoke(stypy.reporting.localization.Localization(__file__, 3286, 14), psd_119225, *[x_119226], **kwargs_119250)
    
    # Assigning a type to the variable 'ret' (line 3286)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3286, 8), 'ret', psd_call_result_119251)
    
    # finally branch of the try-finally block (line 3285)
    
    # Assigning a Name to a Attribute (line 3291):
    
    # Assigning a Name to a Attribute (line 3291):
    # Getting the type of 'washold' (line 3291)
    washold_119252 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3291, 19), 'washold')
    # Getting the type of 'ax' (line 3291)
    ax_119253 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3291, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3291)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3291, 8), ax_119253, '_hold', washold_119252)
    
    # Getting the type of 'ret' (line 3293)
    ret_119254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3293, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3293)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3293, 4), 'stypy_return_type', ret_119254)
    
    # ################# End of 'psd(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'psd' in the type store
    # Getting the type of 'stypy_return_type' (line 3271)
    stypy_return_type_119255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3271, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119255)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'psd'
    return stypy_return_type_119255

# Assigning a type to the variable 'psd' (line 3271)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3271, 0), 'psd', psd)

@norecursion
def quiver(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'quiver'
    module_type_store = module_type_store.open_function_context('quiver', 3297, 0, False)
    
    # Passed parameters checking function
    quiver.stypy_localization = localization
    quiver.stypy_type_of_self = None
    quiver.stypy_type_store = module_type_store
    quiver.stypy_function_name = 'quiver'
    quiver.stypy_param_names_list = []
    quiver.stypy_varargs_param_name = 'args'
    quiver.stypy_kwargs_param_name = 'kw'
    quiver.stypy_call_defaults = defaults
    quiver.stypy_call_varargs = varargs
    quiver.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'quiver', [], 'args', 'kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'quiver', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'quiver(...)' code ##################

    
    # Assigning a Call to a Name (line 3299):
    
    # Assigning a Call to a Name (line 3299):
    
    # Call to gca(...): (line 3299)
    # Processing the call keyword arguments (line 3299)
    kwargs_119257 = {}
    # Getting the type of 'gca' (line 3299)
    gca_119256 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3299, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3299)
    gca_call_result_119258 = invoke(stypy.reporting.localization.Localization(__file__, 3299, 9), gca_119256, *[], **kwargs_119257)
    
    # Assigning a type to the variable 'ax' (line 3299)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3299, 4), 'ax', gca_call_result_119258)
    
    # Assigning a Attribute to a Name (line 3302):
    
    # Assigning a Attribute to a Name (line 3302):
    # Getting the type of 'ax' (line 3302)
    ax_119259 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3302, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3302)
    _hold_119260 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3302, 14), ax_119259, '_hold')
    # Assigning a type to the variable 'washold' (line 3302)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3302, 4), 'washold', _hold_119260)
    
    # Assigning a Call to a Name (line 3303):
    
    # Assigning a Call to a Name (line 3303):
    
    # Call to pop(...): (line 3303)
    # Processing the call arguments (line 3303)
    unicode_119263 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3303, 18), 'unicode', u'hold')
    # Getting the type of 'None' (line 3303)
    None_119264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 26), 'None', False)
    # Processing the call keyword arguments (line 3303)
    kwargs_119265 = {}
    # Getting the type of 'kw' (line 3303)
    kw_119261 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3303, 11), 'kw', False)
    # Obtaining the member 'pop' of a type (line 3303)
    pop_119262 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3303, 11), kw_119261, 'pop')
    # Calling pop(args, kwargs) (line 3303)
    pop_call_result_119266 = invoke(stypy.reporting.localization.Localization(__file__, 3303, 11), pop_119262, *[unicode_119263, None_119264], **kwargs_119265)
    
    # Assigning a type to the variable 'hold' (line 3303)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3303, 4), 'hold', pop_call_result_119266)
    
    # Type idiom detected: calculating its left and rigth part (line 3304)
    # Getting the type of 'hold' (line 3304)
    hold_119267 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3304, 4), 'hold')
    # Getting the type of 'None' (line 3304)
    None_119268 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3304, 19), 'None')
    
    (may_be_119269, more_types_in_union_119270) = may_not_be_none(hold_119267, None_119268)

    if may_be_119269:

        if more_types_in_union_119270:
            # Runtime conditional SSA (line 3304)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3305):
        
        # Assigning a Name to a Attribute (line 3305):
        # Getting the type of 'hold' (line 3305)
        hold_119271 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 19), 'hold')
        # Getting the type of 'ax' (line 3305)
        ax_119272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3305, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3305)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3305, 8), ax_119272, '_hold', hold_119271)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3306, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3306)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119273 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3306, 8), 'matplotlib.cbook')

        if (type(import_119273) is not StypyTypeError):

            if (import_119273 != 'pyd_module'):
                __import__(import_119273)
                sys_modules_119274 = sys.modules[import_119273]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3306, 8), 'matplotlib.cbook', sys_modules_119274.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3306, 8), __file__, sys_modules_119274, sys_modules_119274.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3306, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3306)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3306, 8), 'matplotlib.cbook', import_119273)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3307)
        # Processing the call arguments (line 3307)
        unicode_119277 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3307, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3308)
        mplDeprecation_119278 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3308, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3307)
        kwargs_119279 = {}
        # Getting the type of 'warnings' (line 3307)
        warnings_119275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3307, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3307)
        warn_119276 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3307, 8), warnings_119275, 'warn')
        # Calling warn(args, kwargs) (line 3307)
        warn_call_result_119280 = invoke(stypy.reporting.localization.Localization(__file__, 3307, 8), warn_119276, *[unicode_119277, mplDeprecation_119278], **kwargs_119279)
        

        if more_types_in_union_119270:
            # SSA join for if statement (line 3304)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3309)
    
    # Assigning a Call to a Name (line 3310):
    
    # Assigning a Call to a Name (line 3310):
    
    # Call to quiver(...): (line 3310)
    # Getting the type of 'args' (line 3310)
    args_119283 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3310, 25), 'args', False)
    # Processing the call keyword arguments (line 3310)
    # Getting the type of 'kw' (line 3310)
    kw_119284 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3310, 33), 'kw', False)
    kwargs_119285 = {'kw_119284': kw_119284}
    # Getting the type of 'ax' (line 3310)
    ax_119281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3310, 14), 'ax', False)
    # Obtaining the member 'quiver' of a type (line 3310)
    quiver_119282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3310, 14), ax_119281, 'quiver')
    # Calling quiver(args, kwargs) (line 3310)
    quiver_call_result_119286 = invoke(stypy.reporting.localization.Localization(__file__, 3310, 14), quiver_119282, *[args_119283], **kwargs_119285)
    
    # Assigning a type to the variable 'ret' (line 3310)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3310, 8), 'ret', quiver_call_result_119286)
    
    # finally branch of the try-finally block (line 3309)
    
    # Assigning a Name to a Attribute (line 3312):
    
    # Assigning a Name to a Attribute (line 3312):
    # Getting the type of 'washold' (line 3312)
    washold_119287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3312, 19), 'washold')
    # Getting the type of 'ax' (line 3312)
    ax_119288 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3312, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3312)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3312, 8), ax_119288, '_hold', washold_119287)
    
    
    # Call to sci(...): (line 3313)
    # Processing the call arguments (line 3313)
    # Getting the type of 'ret' (line 3313)
    ret_119290 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3313, 8), 'ret', False)
    # Processing the call keyword arguments (line 3313)
    kwargs_119291 = {}
    # Getting the type of 'sci' (line 3313)
    sci_119289 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3313, 4), 'sci', False)
    # Calling sci(args, kwargs) (line 3313)
    sci_call_result_119292 = invoke(stypy.reporting.localization.Localization(__file__, 3313, 4), sci_119289, *[ret_119290], **kwargs_119291)
    
    # Getting the type of 'ret' (line 3314)
    ret_119293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3314, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3314)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3314, 4), 'stypy_return_type', ret_119293)
    
    # ################# End of 'quiver(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'quiver' in the type store
    # Getting the type of 'stypy_return_type' (line 3297)
    stypy_return_type_119294 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3297, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119294)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'quiver'
    return stypy_return_type_119294

# Assigning a type to the variable 'quiver' (line 3297)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3297, 0), 'quiver', quiver)

@norecursion
def quiverkey(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'quiverkey'
    module_type_store = module_type_store.open_function_context('quiverkey', 3318, 0, False)
    
    # Passed parameters checking function
    quiverkey.stypy_localization = localization
    quiverkey.stypy_type_of_self = None
    quiverkey.stypy_type_store = module_type_store
    quiverkey.stypy_function_name = 'quiverkey'
    quiverkey.stypy_param_names_list = []
    quiverkey.stypy_varargs_param_name = 'args'
    quiverkey.stypy_kwargs_param_name = 'kw'
    quiverkey.stypy_call_defaults = defaults
    quiverkey.stypy_call_varargs = varargs
    quiverkey.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'quiverkey', [], 'args', 'kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'quiverkey', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'quiverkey(...)' code ##################

    
    # Assigning a Call to a Name (line 3320):
    
    # Assigning a Call to a Name (line 3320):
    
    # Call to gca(...): (line 3320)
    # Processing the call keyword arguments (line 3320)
    kwargs_119296 = {}
    # Getting the type of 'gca' (line 3320)
    gca_119295 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3320, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3320)
    gca_call_result_119297 = invoke(stypy.reporting.localization.Localization(__file__, 3320, 9), gca_119295, *[], **kwargs_119296)
    
    # Assigning a type to the variable 'ax' (line 3320)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3320, 4), 'ax', gca_call_result_119297)
    
    # Assigning a Attribute to a Name (line 3323):
    
    # Assigning a Attribute to a Name (line 3323):
    # Getting the type of 'ax' (line 3323)
    ax_119298 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3323, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3323)
    _hold_119299 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3323, 14), ax_119298, '_hold')
    # Assigning a type to the variable 'washold' (line 3323)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3323, 4), 'washold', _hold_119299)
    
    # Assigning a Call to a Name (line 3324):
    
    # Assigning a Call to a Name (line 3324):
    
    # Call to pop(...): (line 3324)
    # Processing the call arguments (line 3324)
    unicode_119302 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3324, 18), 'unicode', u'hold')
    # Getting the type of 'None' (line 3324)
    None_119303 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3324, 26), 'None', False)
    # Processing the call keyword arguments (line 3324)
    kwargs_119304 = {}
    # Getting the type of 'kw' (line 3324)
    kw_119300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3324, 11), 'kw', False)
    # Obtaining the member 'pop' of a type (line 3324)
    pop_119301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3324, 11), kw_119300, 'pop')
    # Calling pop(args, kwargs) (line 3324)
    pop_call_result_119305 = invoke(stypy.reporting.localization.Localization(__file__, 3324, 11), pop_119301, *[unicode_119302, None_119303], **kwargs_119304)
    
    # Assigning a type to the variable 'hold' (line 3324)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3324, 4), 'hold', pop_call_result_119305)
    
    # Type idiom detected: calculating its left and rigth part (line 3325)
    # Getting the type of 'hold' (line 3325)
    hold_119306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 4), 'hold')
    # Getting the type of 'None' (line 3325)
    None_119307 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3325, 19), 'None')
    
    (may_be_119308, more_types_in_union_119309) = may_not_be_none(hold_119306, None_119307)

    if may_be_119308:

        if more_types_in_union_119309:
            # Runtime conditional SSA (line 3325)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3326):
        
        # Assigning a Name to a Attribute (line 3326):
        # Getting the type of 'hold' (line 3326)
        hold_119310 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 19), 'hold')
        # Getting the type of 'ax' (line 3326)
        ax_119311 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3326, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3326)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3326, 8), ax_119311, '_hold', hold_119310)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3327, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3327)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119312 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3327, 8), 'matplotlib.cbook')

        if (type(import_119312) is not StypyTypeError):

            if (import_119312 != 'pyd_module'):
                __import__(import_119312)
                sys_modules_119313 = sys.modules[import_119312]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3327, 8), 'matplotlib.cbook', sys_modules_119313.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3327, 8), __file__, sys_modules_119313, sys_modules_119313.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3327, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3327)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3327, 8), 'matplotlib.cbook', import_119312)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3328)
        # Processing the call arguments (line 3328)
        unicode_119316 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3328, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3329)
        mplDeprecation_119317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3329, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3328)
        kwargs_119318 = {}
        # Getting the type of 'warnings' (line 3328)
        warnings_119314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3328, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3328)
        warn_119315 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3328, 8), warnings_119314, 'warn')
        # Calling warn(args, kwargs) (line 3328)
        warn_call_result_119319 = invoke(stypy.reporting.localization.Localization(__file__, 3328, 8), warn_119315, *[unicode_119316, mplDeprecation_119317], **kwargs_119318)
        

        if more_types_in_union_119309:
            # SSA join for if statement (line 3325)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3330)
    
    # Assigning a Call to a Name (line 3331):
    
    # Assigning a Call to a Name (line 3331):
    
    # Call to quiverkey(...): (line 3331)
    # Getting the type of 'args' (line 3331)
    args_119322 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 28), 'args', False)
    # Processing the call keyword arguments (line 3331)
    # Getting the type of 'kw' (line 3331)
    kw_119323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 36), 'kw', False)
    kwargs_119324 = {'kw_119323': kw_119323}
    # Getting the type of 'ax' (line 3331)
    ax_119320 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3331, 14), 'ax', False)
    # Obtaining the member 'quiverkey' of a type (line 3331)
    quiverkey_119321 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3331, 14), ax_119320, 'quiverkey')
    # Calling quiverkey(args, kwargs) (line 3331)
    quiverkey_call_result_119325 = invoke(stypy.reporting.localization.Localization(__file__, 3331, 14), quiverkey_119321, *[args_119322], **kwargs_119324)
    
    # Assigning a type to the variable 'ret' (line 3331)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3331, 8), 'ret', quiverkey_call_result_119325)
    
    # finally branch of the try-finally block (line 3330)
    
    # Assigning a Name to a Attribute (line 3333):
    
    # Assigning a Name to a Attribute (line 3333):
    # Getting the type of 'washold' (line 3333)
    washold_119326 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 19), 'washold')
    # Getting the type of 'ax' (line 3333)
    ax_119327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3333, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3333)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3333, 8), ax_119327, '_hold', washold_119326)
    
    # Getting the type of 'ret' (line 3335)
    ret_119328 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3335, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3335)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3335, 4), 'stypy_return_type', ret_119328)
    
    # ################# End of 'quiverkey(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'quiverkey' in the type store
    # Getting the type of 'stypy_return_type' (line 3318)
    stypy_return_type_119329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3318, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119329)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'quiverkey'
    return stypy_return_type_119329

# Assigning a type to the variable 'quiverkey' (line 3318)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3318, 0), 'quiverkey', quiverkey)

@norecursion
def scatter(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3340)
    None_119330 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 20), 'None')
    # Getting the type of 'None' (line 3340)
    None_119331 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 28), 'None')
    # Getting the type of 'None' (line 3340)
    None_119332 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 41), 'None')
    # Getting the type of 'None' (line 3340)
    None_119333 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 52), 'None')
    # Getting the type of 'None' (line 3340)
    None_119334 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 63), 'None')
    # Getting the type of 'None' (line 3340)
    None_119335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3340, 74), 'None')
    # Getting the type of 'None' (line 3341)
    None_119336 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3341, 17), 'None')
    # Getting the type of 'None' (line 3341)
    None_119337 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3341, 29), 'None')
    # Getting the type of 'None' (line 3341)
    None_119338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3341, 46), 'None')
    # Getting the type of 'None' (line 3341)
    None_119339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3341, 58), 'None')
    # Getting the type of 'None' (line 3341)
    None_119340 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3341, 75), 'None')
    # Getting the type of 'None' (line 3342)
    None_119341 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 17), 'None')
    # Getting the type of 'None' (line 3342)
    None_119342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3342, 28), 'None')
    defaults = [None_119330, None_119331, None_119332, None_119333, None_119334, None_119335, None_119336, None_119337, None_119338, None_119339, None_119340, None_119341, None_119342]
    # Create a new context for function 'scatter'
    module_type_store = module_type_store.open_function_context('scatter', 3339, 0, False)
    
    # Passed parameters checking function
    scatter.stypy_localization = localization
    scatter.stypy_type_of_self = None
    scatter.stypy_type_store = module_type_store
    scatter.stypy_function_name = 'scatter'
    scatter.stypy_param_names_list = ['x', 'y', 's', 'c', 'marker', 'cmap', 'norm', 'vmin', 'vmax', 'alpha', 'linewidths', 'verts', 'edgecolors', 'hold', 'data']
    scatter.stypy_varargs_param_name = None
    scatter.stypy_kwargs_param_name = 'kwargs'
    scatter.stypy_call_defaults = defaults
    scatter.stypy_call_varargs = varargs
    scatter.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'scatter', ['x', 'y', 's', 'c', 'marker', 'cmap', 'norm', 'vmin', 'vmax', 'alpha', 'linewidths', 'verts', 'edgecolors', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'scatter', localization, ['x', 'y', 's', 'c', 'marker', 'cmap', 'norm', 'vmin', 'vmax', 'alpha', 'linewidths', 'verts', 'edgecolors', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'scatter(...)' code ##################

    
    # Assigning a Call to a Name (line 3343):
    
    # Assigning a Call to a Name (line 3343):
    
    # Call to gca(...): (line 3343)
    # Processing the call keyword arguments (line 3343)
    kwargs_119344 = {}
    # Getting the type of 'gca' (line 3343)
    gca_119343 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3343, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3343)
    gca_call_result_119345 = invoke(stypy.reporting.localization.Localization(__file__, 3343, 9), gca_119343, *[], **kwargs_119344)
    
    # Assigning a type to the variable 'ax' (line 3343)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3343, 4), 'ax', gca_call_result_119345)
    
    # Assigning a Attribute to a Name (line 3346):
    
    # Assigning a Attribute to a Name (line 3346):
    # Getting the type of 'ax' (line 3346)
    ax_119346 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3346, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3346)
    _hold_119347 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3346, 14), ax_119346, '_hold')
    # Assigning a type to the variable 'washold' (line 3346)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3346, 4), 'washold', _hold_119347)
    
    # Type idiom detected: calculating its left and rigth part (line 3348)
    # Getting the type of 'hold' (line 3348)
    hold_119348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3348, 4), 'hold')
    # Getting the type of 'None' (line 3348)
    None_119349 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3348, 19), 'None')
    
    (may_be_119350, more_types_in_union_119351) = may_not_be_none(hold_119348, None_119349)

    if may_be_119350:

        if more_types_in_union_119351:
            # Runtime conditional SSA (line 3348)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3349):
        
        # Assigning a Name to a Attribute (line 3349):
        # Getting the type of 'hold' (line 3349)
        hold_119352 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3349, 19), 'hold')
        # Getting the type of 'ax' (line 3349)
        ax_119353 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3349, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3349)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3349, 8), ax_119353, '_hold', hold_119352)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3350, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3350)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119354 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3350, 8), 'matplotlib.cbook')

        if (type(import_119354) is not StypyTypeError):

            if (import_119354 != 'pyd_module'):
                __import__(import_119354)
                sys_modules_119355 = sys.modules[import_119354]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3350, 8), 'matplotlib.cbook', sys_modules_119355.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3350, 8), __file__, sys_modules_119355, sys_modules_119355.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3350, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3350)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3350, 8), 'matplotlib.cbook', import_119354)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3351)
        # Processing the call arguments (line 3351)
        unicode_119358 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3351, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3352)
        mplDeprecation_119359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3352, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3351)
        kwargs_119360 = {}
        # Getting the type of 'warnings' (line 3351)
        warnings_119356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3351, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3351)
        warn_119357 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3351, 8), warnings_119356, 'warn')
        # Calling warn(args, kwargs) (line 3351)
        warn_call_result_119361 = invoke(stypy.reporting.localization.Localization(__file__, 3351, 8), warn_119357, *[unicode_119358, mplDeprecation_119359], **kwargs_119360)
        

        if more_types_in_union_119351:
            # SSA join for if statement (line 3348)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3353)
    
    # Assigning a Call to a Name (line 3354):
    
    # Assigning a Call to a Name (line 3354):
    
    # Call to scatter(...): (line 3354)
    # Processing the call arguments (line 3354)
    # Getting the type of 'x' (line 3354)
    x_119364 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 25), 'x', False)
    # Getting the type of 'y' (line 3354)
    y_119365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 28), 'y', False)
    # Processing the call keyword arguments (line 3354)
    # Getting the type of 's' (line 3354)
    s_119366 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 33), 's', False)
    keyword_119367 = s_119366
    # Getting the type of 'c' (line 3354)
    c_119368 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 38), 'c', False)
    keyword_119369 = c_119368
    # Getting the type of 'marker' (line 3354)
    marker_119370 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 48), 'marker', False)
    keyword_119371 = marker_119370
    # Getting the type of 'cmap' (line 3354)
    cmap_119372 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 61), 'cmap', False)
    keyword_119373 = cmap_119372
    # Getting the type of 'norm' (line 3354)
    norm_119374 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 72), 'norm', False)
    keyword_119375 = norm_119374
    # Getting the type of 'vmin' (line 3355)
    vmin_119376 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3355, 30), 'vmin', False)
    keyword_119377 = vmin_119376
    # Getting the type of 'vmax' (line 3355)
    vmax_119378 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3355, 41), 'vmax', False)
    keyword_119379 = vmax_119378
    # Getting the type of 'alpha' (line 3355)
    alpha_119380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3355, 53), 'alpha', False)
    keyword_119381 = alpha_119380
    # Getting the type of 'linewidths' (line 3356)
    linewidths_119382 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3356, 36), 'linewidths', False)
    keyword_119383 = linewidths_119382
    # Getting the type of 'verts' (line 3356)
    verts_119384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3356, 54), 'verts', False)
    keyword_119385 = verts_119384
    # Getting the type of 'edgecolors' (line 3357)
    edgecolors_119386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3357, 36), 'edgecolors', False)
    keyword_119387 = edgecolors_119386
    # Getting the type of 'data' (line 3357)
    data_119388 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3357, 53), 'data', False)
    keyword_119389 = data_119388
    # Getting the type of 'kwargs' (line 3357)
    kwargs_119390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3357, 61), 'kwargs', False)
    kwargs_119391 = {'edgecolors': keyword_119387, 'c': keyword_119369, 'vmin': keyword_119377, 'kwargs_119390': kwargs_119390, 'linewidths': keyword_119383, 'vmax': keyword_119379, 's': keyword_119367, 'cmap': keyword_119373, 'verts': keyword_119385, 'marker': keyword_119371, 'alpha': keyword_119381, 'data': keyword_119389, 'norm': keyword_119375}
    # Getting the type of 'ax' (line 3354)
    ax_119362 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3354, 14), 'ax', False)
    # Obtaining the member 'scatter' of a type (line 3354)
    scatter_119363 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3354, 14), ax_119362, 'scatter')
    # Calling scatter(args, kwargs) (line 3354)
    scatter_call_result_119392 = invoke(stypy.reporting.localization.Localization(__file__, 3354, 14), scatter_119363, *[x_119364, y_119365], **kwargs_119391)
    
    # Assigning a type to the variable 'ret' (line 3354)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3354, 8), 'ret', scatter_call_result_119392)
    
    # finally branch of the try-finally block (line 3353)
    
    # Assigning a Name to a Attribute (line 3359):
    
    # Assigning a Name to a Attribute (line 3359):
    # Getting the type of 'washold' (line 3359)
    washold_119393 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3359, 19), 'washold')
    # Getting the type of 'ax' (line 3359)
    ax_119394 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3359, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3359)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3359, 8), ax_119394, '_hold', washold_119393)
    
    
    # Call to sci(...): (line 3360)
    # Processing the call arguments (line 3360)
    # Getting the type of 'ret' (line 3360)
    ret_119396 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3360, 8), 'ret', False)
    # Processing the call keyword arguments (line 3360)
    kwargs_119397 = {}
    # Getting the type of 'sci' (line 3360)
    sci_119395 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3360, 4), 'sci', False)
    # Calling sci(args, kwargs) (line 3360)
    sci_call_result_119398 = invoke(stypy.reporting.localization.Localization(__file__, 3360, 4), sci_119395, *[ret_119396], **kwargs_119397)
    
    # Getting the type of 'ret' (line 3361)
    ret_119399 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3361, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3361)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3361, 4), 'stypy_return_type', ret_119399)
    
    # ################# End of 'scatter(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'scatter' in the type store
    # Getting the type of 'stypy_return_type' (line 3339)
    stypy_return_type_119400 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3339, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119400)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'scatter'
    return stypy_return_type_119400

# Assigning a type to the variable 'scatter' (line 3339)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3339, 0), 'scatter', scatter)

@norecursion
def semilogx(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'semilogx'
    module_type_store = module_type_store.open_function_context('semilogx', 3365, 0, False)
    
    # Passed parameters checking function
    semilogx.stypy_localization = localization
    semilogx.stypy_type_of_self = None
    semilogx.stypy_type_store = module_type_store
    semilogx.stypy_function_name = 'semilogx'
    semilogx.stypy_param_names_list = []
    semilogx.stypy_varargs_param_name = 'args'
    semilogx.stypy_kwargs_param_name = 'kwargs'
    semilogx.stypy_call_defaults = defaults
    semilogx.stypy_call_varargs = varargs
    semilogx.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'semilogx', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'semilogx', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'semilogx(...)' code ##################

    
    # Assigning a Call to a Name (line 3367):
    
    # Assigning a Call to a Name (line 3367):
    
    # Call to gca(...): (line 3367)
    # Processing the call keyword arguments (line 3367)
    kwargs_119402 = {}
    # Getting the type of 'gca' (line 3367)
    gca_119401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3367, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3367)
    gca_call_result_119403 = invoke(stypy.reporting.localization.Localization(__file__, 3367, 9), gca_119401, *[], **kwargs_119402)
    
    # Assigning a type to the variable 'ax' (line 3367)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3367, 4), 'ax', gca_call_result_119403)
    
    # Assigning a Attribute to a Name (line 3370):
    
    # Assigning a Attribute to a Name (line 3370):
    # Getting the type of 'ax' (line 3370)
    ax_119404 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3370, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3370)
    _hold_119405 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3370, 14), ax_119404, '_hold')
    # Assigning a type to the variable 'washold' (line 3370)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3370, 4), 'washold', _hold_119405)
    
    # Assigning a Call to a Name (line 3371):
    
    # Assigning a Call to a Name (line 3371):
    
    # Call to pop(...): (line 3371)
    # Processing the call arguments (line 3371)
    unicode_119408 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3371, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 3371)
    None_119409 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3371, 30), 'None', False)
    # Processing the call keyword arguments (line 3371)
    kwargs_119410 = {}
    # Getting the type of 'kwargs' (line 3371)
    kwargs_119406 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3371, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 3371)
    pop_119407 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3371, 11), kwargs_119406, 'pop')
    # Calling pop(args, kwargs) (line 3371)
    pop_call_result_119411 = invoke(stypy.reporting.localization.Localization(__file__, 3371, 11), pop_119407, *[unicode_119408, None_119409], **kwargs_119410)
    
    # Assigning a type to the variable 'hold' (line 3371)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3371, 4), 'hold', pop_call_result_119411)
    
    # Type idiom detected: calculating its left and rigth part (line 3372)
    # Getting the type of 'hold' (line 3372)
    hold_119412 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3372, 4), 'hold')
    # Getting the type of 'None' (line 3372)
    None_119413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3372, 19), 'None')
    
    (may_be_119414, more_types_in_union_119415) = may_not_be_none(hold_119412, None_119413)

    if may_be_119414:

        if more_types_in_union_119415:
            # Runtime conditional SSA (line 3372)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3373):
        
        # Assigning a Name to a Attribute (line 3373):
        # Getting the type of 'hold' (line 3373)
        hold_119416 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3373, 19), 'hold')
        # Getting the type of 'ax' (line 3373)
        ax_119417 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3373, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3373)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3373, 8), ax_119417, '_hold', hold_119416)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3374, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3374)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119418 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3374, 8), 'matplotlib.cbook')

        if (type(import_119418) is not StypyTypeError):

            if (import_119418 != 'pyd_module'):
                __import__(import_119418)
                sys_modules_119419 = sys.modules[import_119418]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3374, 8), 'matplotlib.cbook', sys_modules_119419.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3374, 8), __file__, sys_modules_119419, sys_modules_119419.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3374, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3374)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3374, 8), 'matplotlib.cbook', import_119418)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3375)
        # Processing the call arguments (line 3375)
        unicode_119422 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3375, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3376)
        mplDeprecation_119423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3376, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3375)
        kwargs_119424 = {}
        # Getting the type of 'warnings' (line 3375)
        warnings_119420 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3375, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3375)
        warn_119421 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3375, 8), warnings_119420, 'warn')
        # Calling warn(args, kwargs) (line 3375)
        warn_call_result_119425 = invoke(stypy.reporting.localization.Localization(__file__, 3375, 8), warn_119421, *[unicode_119422, mplDeprecation_119423], **kwargs_119424)
        

        if more_types_in_union_119415:
            # SSA join for if statement (line 3372)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3377)
    
    # Assigning a Call to a Name (line 3378):
    
    # Assigning a Call to a Name (line 3378):
    
    # Call to semilogx(...): (line 3378)
    # Getting the type of 'args' (line 3378)
    args_119428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3378, 27), 'args', False)
    # Processing the call keyword arguments (line 3378)
    # Getting the type of 'kwargs' (line 3378)
    kwargs_119429 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3378, 35), 'kwargs', False)
    kwargs_119430 = {'kwargs_119429': kwargs_119429}
    # Getting the type of 'ax' (line 3378)
    ax_119426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3378, 14), 'ax', False)
    # Obtaining the member 'semilogx' of a type (line 3378)
    semilogx_119427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3378, 14), ax_119426, 'semilogx')
    # Calling semilogx(args, kwargs) (line 3378)
    semilogx_call_result_119431 = invoke(stypy.reporting.localization.Localization(__file__, 3378, 14), semilogx_119427, *[args_119428], **kwargs_119430)
    
    # Assigning a type to the variable 'ret' (line 3378)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3378, 8), 'ret', semilogx_call_result_119431)
    
    # finally branch of the try-finally block (line 3377)
    
    # Assigning a Name to a Attribute (line 3380):
    
    # Assigning a Name to a Attribute (line 3380):
    # Getting the type of 'washold' (line 3380)
    washold_119432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3380, 19), 'washold')
    # Getting the type of 'ax' (line 3380)
    ax_119433 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3380, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3380)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3380, 8), ax_119433, '_hold', washold_119432)
    
    # Getting the type of 'ret' (line 3382)
    ret_119434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3382, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3382)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3382, 4), 'stypy_return_type', ret_119434)
    
    # ################# End of 'semilogx(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'semilogx' in the type store
    # Getting the type of 'stypy_return_type' (line 3365)
    stypy_return_type_119435 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3365, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119435)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'semilogx'
    return stypy_return_type_119435

# Assigning a type to the variable 'semilogx' (line 3365)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3365, 0), 'semilogx', semilogx)

@norecursion
def semilogy(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'semilogy'
    module_type_store = module_type_store.open_function_context('semilogy', 3386, 0, False)
    
    # Passed parameters checking function
    semilogy.stypy_localization = localization
    semilogy.stypy_type_of_self = None
    semilogy.stypy_type_store = module_type_store
    semilogy.stypy_function_name = 'semilogy'
    semilogy.stypy_param_names_list = []
    semilogy.stypy_varargs_param_name = 'args'
    semilogy.stypy_kwargs_param_name = 'kwargs'
    semilogy.stypy_call_defaults = defaults
    semilogy.stypy_call_varargs = varargs
    semilogy.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'semilogy', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'semilogy', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'semilogy(...)' code ##################

    
    # Assigning a Call to a Name (line 3388):
    
    # Assigning a Call to a Name (line 3388):
    
    # Call to gca(...): (line 3388)
    # Processing the call keyword arguments (line 3388)
    kwargs_119437 = {}
    # Getting the type of 'gca' (line 3388)
    gca_119436 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3388, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3388)
    gca_call_result_119438 = invoke(stypy.reporting.localization.Localization(__file__, 3388, 9), gca_119436, *[], **kwargs_119437)
    
    # Assigning a type to the variable 'ax' (line 3388)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3388, 4), 'ax', gca_call_result_119438)
    
    # Assigning a Attribute to a Name (line 3391):
    
    # Assigning a Attribute to a Name (line 3391):
    # Getting the type of 'ax' (line 3391)
    ax_119439 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3391, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3391)
    _hold_119440 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3391, 14), ax_119439, '_hold')
    # Assigning a type to the variable 'washold' (line 3391)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3391, 4), 'washold', _hold_119440)
    
    # Assigning a Call to a Name (line 3392):
    
    # Assigning a Call to a Name (line 3392):
    
    # Call to pop(...): (line 3392)
    # Processing the call arguments (line 3392)
    unicode_119443 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3392, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 3392)
    None_119444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 30), 'None', False)
    # Processing the call keyword arguments (line 3392)
    kwargs_119445 = {}
    # Getting the type of 'kwargs' (line 3392)
    kwargs_119441 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3392, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 3392)
    pop_119442 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3392, 11), kwargs_119441, 'pop')
    # Calling pop(args, kwargs) (line 3392)
    pop_call_result_119446 = invoke(stypy.reporting.localization.Localization(__file__, 3392, 11), pop_119442, *[unicode_119443, None_119444], **kwargs_119445)
    
    # Assigning a type to the variable 'hold' (line 3392)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3392, 4), 'hold', pop_call_result_119446)
    
    # Type idiom detected: calculating its left and rigth part (line 3393)
    # Getting the type of 'hold' (line 3393)
    hold_119447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3393, 4), 'hold')
    # Getting the type of 'None' (line 3393)
    None_119448 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3393, 19), 'None')
    
    (may_be_119449, more_types_in_union_119450) = may_not_be_none(hold_119447, None_119448)

    if may_be_119449:

        if more_types_in_union_119450:
            # Runtime conditional SSA (line 3393)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3394):
        
        # Assigning a Name to a Attribute (line 3394):
        # Getting the type of 'hold' (line 3394)
        hold_119451 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3394, 19), 'hold')
        # Getting the type of 'ax' (line 3394)
        ax_119452 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3394, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3394)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3394, 8), ax_119452, '_hold', hold_119451)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3395, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3395)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119453 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3395, 8), 'matplotlib.cbook')

        if (type(import_119453) is not StypyTypeError):

            if (import_119453 != 'pyd_module'):
                __import__(import_119453)
                sys_modules_119454 = sys.modules[import_119453]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3395, 8), 'matplotlib.cbook', sys_modules_119454.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3395, 8), __file__, sys_modules_119454, sys_modules_119454.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3395, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3395)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3395, 8), 'matplotlib.cbook', import_119453)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3396)
        # Processing the call arguments (line 3396)
        unicode_119457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3396, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3397)
        mplDeprecation_119458 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3397, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3396)
        kwargs_119459 = {}
        # Getting the type of 'warnings' (line 3396)
        warnings_119455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3396, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3396)
        warn_119456 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3396, 8), warnings_119455, 'warn')
        # Calling warn(args, kwargs) (line 3396)
        warn_call_result_119460 = invoke(stypy.reporting.localization.Localization(__file__, 3396, 8), warn_119456, *[unicode_119457, mplDeprecation_119458], **kwargs_119459)
        

        if more_types_in_union_119450:
            # SSA join for if statement (line 3393)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3398)
    
    # Assigning a Call to a Name (line 3399):
    
    # Assigning a Call to a Name (line 3399):
    
    # Call to semilogy(...): (line 3399)
    # Getting the type of 'args' (line 3399)
    args_119463 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 27), 'args', False)
    # Processing the call keyword arguments (line 3399)
    # Getting the type of 'kwargs' (line 3399)
    kwargs_119464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 35), 'kwargs', False)
    kwargs_119465 = {'kwargs_119464': kwargs_119464}
    # Getting the type of 'ax' (line 3399)
    ax_119461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3399, 14), 'ax', False)
    # Obtaining the member 'semilogy' of a type (line 3399)
    semilogy_119462 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3399, 14), ax_119461, 'semilogy')
    # Calling semilogy(args, kwargs) (line 3399)
    semilogy_call_result_119466 = invoke(stypy.reporting.localization.Localization(__file__, 3399, 14), semilogy_119462, *[args_119463], **kwargs_119465)
    
    # Assigning a type to the variable 'ret' (line 3399)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3399, 8), 'ret', semilogy_call_result_119466)
    
    # finally branch of the try-finally block (line 3398)
    
    # Assigning a Name to a Attribute (line 3401):
    
    # Assigning a Name to a Attribute (line 3401):
    # Getting the type of 'washold' (line 3401)
    washold_119467 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 19), 'washold')
    # Getting the type of 'ax' (line 3401)
    ax_119468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3401, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3401)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3401, 8), ax_119468, '_hold', washold_119467)
    
    # Getting the type of 'ret' (line 3403)
    ret_119469 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3403, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3403)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3403, 4), 'stypy_return_type', ret_119469)
    
    # ################# End of 'semilogy(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'semilogy' in the type store
    # Getting the type of 'stypy_return_type' (line 3386)
    stypy_return_type_119470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3386, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119470)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'semilogy'
    return stypy_return_type_119470

# Assigning a type to the variable 'semilogy' (line 3386)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3386, 0), 'semilogy', semilogy)

@norecursion
def specgram(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3408)
    None_119471 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3408, 21), 'None')
    # Getting the type of 'None' (line 3408)
    None_119472 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3408, 30), 'None')
    # Getting the type of 'None' (line 3408)
    None_119473 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3408, 39), 'None')
    # Getting the type of 'None' (line 3408)
    None_119474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3408, 53), 'None')
    # Getting the type of 'None' (line 3408)
    None_119475 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3408, 66), 'None')
    # Getting the type of 'None' (line 3409)
    None_119476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 22), 'None')
    # Getting the type of 'None' (line 3409)
    None_119477 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 33), 'None')
    # Getting the type of 'None' (line 3409)
    None_119478 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 47), 'None')
    # Getting the type of 'None' (line 3409)
    None_119479 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 60), 'None')
    # Getting the type of 'None' (line 3409)
    None_119480 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3409, 72), 'None')
    # Getting the type of 'None' (line 3410)
    None_119481 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3410, 27), 'None')
    # Getting the type of 'None' (line 3410)
    None_119482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3410, 38), 'None')
    # Getting the type of 'None' (line 3410)
    None_119483 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3410, 50), 'None')
    # Getting the type of 'None' (line 3410)
    None_119484 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3410, 61), 'None')
    # Getting the type of 'None' (line 3410)
    None_119485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3410, 72), 'None')
    # Getting the type of 'None' (line 3411)
    None_119486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 18), 'None')
    # Getting the type of 'None' (line 3411)
    None_119487 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3411, 29), 'None')
    defaults = [None_119471, None_119472, None_119473, None_119474, None_119475, None_119476, None_119477, None_119478, None_119479, None_119480, None_119481, None_119482, None_119483, None_119484, None_119485, None_119486, None_119487]
    # Create a new context for function 'specgram'
    module_type_store = module_type_store.open_function_context('specgram', 3407, 0, False)
    
    # Passed parameters checking function
    specgram.stypy_localization = localization
    specgram.stypy_type_of_self = None
    specgram.stypy_type_store = module_type_store
    specgram.stypy_function_name = 'specgram'
    specgram.stypy_param_names_list = ['x', 'NFFT', 'Fs', 'Fc', 'detrend', 'window', 'noverlap', 'cmap', 'xextent', 'pad_to', 'sides', 'scale_by_freq', 'mode', 'scale', 'vmin', 'vmax', 'hold', 'data']
    specgram.stypy_varargs_param_name = None
    specgram.stypy_kwargs_param_name = 'kwargs'
    specgram.stypy_call_defaults = defaults
    specgram.stypy_call_varargs = varargs
    specgram.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'specgram', ['x', 'NFFT', 'Fs', 'Fc', 'detrend', 'window', 'noverlap', 'cmap', 'xextent', 'pad_to', 'sides', 'scale_by_freq', 'mode', 'scale', 'vmin', 'vmax', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'specgram', localization, ['x', 'NFFT', 'Fs', 'Fc', 'detrend', 'window', 'noverlap', 'cmap', 'xextent', 'pad_to', 'sides', 'scale_by_freq', 'mode', 'scale', 'vmin', 'vmax', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'specgram(...)' code ##################

    
    # Assigning a Call to a Name (line 3412):
    
    # Assigning a Call to a Name (line 3412):
    
    # Call to gca(...): (line 3412)
    # Processing the call keyword arguments (line 3412)
    kwargs_119489 = {}
    # Getting the type of 'gca' (line 3412)
    gca_119488 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3412, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3412)
    gca_call_result_119490 = invoke(stypy.reporting.localization.Localization(__file__, 3412, 9), gca_119488, *[], **kwargs_119489)
    
    # Assigning a type to the variable 'ax' (line 3412)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3412, 4), 'ax', gca_call_result_119490)
    
    # Assigning a Attribute to a Name (line 3415):
    
    # Assigning a Attribute to a Name (line 3415):
    # Getting the type of 'ax' (line 3415)
    ax_119491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3415, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3415)
    _hold_119492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3415, 14), ax_119491, '_hold')
    # Assigning a type to the variable 'washold' (line 3415)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3415, 4), 'washold', _hold_119492)
    
    # Type idiom detected: calculating its left and rigth part (line 3417)
    # Getting the type of 'hold' (line 3417)
    hold_119493 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 4), 'hold')
    # Getting the type of 'None' (line 3417)
    None_119494 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3417, 19), 'None')
    
    (may_be_119495, more_types_in_union_119496) = may_not_be_none(hold_119493, None_119494)

    if may_be_119495:

        if more_types_in_union_119496:
            # Runtime conditional SSA (line 3417)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3418):
        
        # Assigning a Name to a Attribute (line 3418):
        # Getting the type of 'hold' (line 3418)
        hold_119497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 19), 'hold')
        # Getting the type of 'ax' (line 3418)
        ax_119498 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3418, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3418)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3418, 8), ax_119498, '_hold', hold_119497)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3419, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3419)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119499 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3419, 8), 'matplotlib.cbook')

        if (type(import_119499) is not StypyTypeError):

            if (import_119499 != 'pyd_module'):
                __import__(import_119499)
                sys_modules_119500 = sys.modules[import_119499]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3419, 8), 'matplotlib.cbook', sys_modules_119500.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3419, 8), __file__, sys_modules_119500, sys_modules_119500.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3419, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3419)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3419, 8), 'matplotlib.cbook', import_119499)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3420)
        # Processing the call arguments (line 3420)
        unicode_119503 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3420, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3421)
        mplDeprecation_119504 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3421, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3420)
        kwargs_119505 = {}
        # Getting the type of 'warnings' (line 3420)
        warnings_119501 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3420, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3420)
        warn_119502 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3420, 8), warnings_119501, 'warn')
        # Calling warn(args, kwargs) (line 3420)
        warn_call_result_119506 = invoke(stypy.reporting.localization.Localization(__file__, 3420, 8), warn_119502, *[unicode_119503, mplDeprecation_119504], **kwargs_119505)
        

        if more_types_in_union_119496:
            # SSA join for if statement (line 3417)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3422)
    
    # Assigning a Call to a Name (line 3423):
    
    # Assigning a Call to a Name (line 3423):
    
    # Call to specgram(...): (line 3423)
    # Processing the call arguments (line 3423)
    # Getting the type of 'x' (line 3423)
    x_119509 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3423, 26), 'x', False)
    # Processing the call keyword arguments (line 3423)
    # Getting the type of 'NFFT' (line 3423)
    NFFT_119510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3423, 34), 'NFFT', False)
    keyword_119511 = NFFT_119510
    # Getting the type of 'Fs' (line 3423)
    Fs_119512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3423, 43), 'Fs', False)
    keyword_119513 = Fs_119512
    # Getting the type of 'Fc' (line 3423)
    Fc_119514 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3423, 50), 'Fc', False)
    keyword_119515 = Fc_119514
    # Getting the type of 'detrend' (line 3423)
    detrend_119516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3423, 62), 'detrend', False)
    keyword_119517 = detrend_119516
    # Getting the type of 'window' (line 3424)
    window_119518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3424, 33), 'window', False)
    keyword_119519 = window_119518
    # Getting the type of 'noverlap' (line 3424)
    noverlap_119520 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3424, 50), 'noverlap', False)
    keyword_119521 = noverlap_119520
    # Getting the type of 'cmap' (line 3424)
    cmap_119522 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3424, 65), 'cmap', False)
    keyword_119523 = cmap_119522
    # Getting the type of 'xextent' (line 3425)
    xextent_119524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3425, 34), 'xextent', False)
    keyword_119525 = xextent_119524
    # Getting the type of 'pad_to' (line 3425)
    pad_to_119526 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3425, 50), 'pad_to', False)
    keyword_119527 = pad_to_119526
    # Getting the type of 'sides' (line 3425)
    sides_119528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3425, 64), 'sides', False)
    keyword_119529 = sides_119528
    # Getting the type of 'scale_by_freq' (line 3426)
    scale_by_freq_119530 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3426, 40), 'scale_by_freq', False)
    keyword_119531 = scale_by_freq_119530
    # Getting the type of 'mode' (line 3426)
    mode_119532 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3426, 60), 'mode', False)
    keyword_119533 = mode_119532
    # Getting the type of 'scale' (line 3426)
    scale_119534 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3426, 72), 'scale', False)
    keyword_119535 = scale_119534
    # Getting the type of 'vmin' (line 3427)
    vmin_119536 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3427, 31), 'vmin', False)
    keyword_119537 = vmin_119536
    # Getting the type of 'vmax' (line 3427)
    vmax_119538 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3427, 42), 'vmax', False)
    keyword_119539 = vmax_119538
    # Getting the type of 'data' (line 3427)
    data_119540 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3427, 53), 'data', False)
    keyword_119541 = data_119540
    # Getting the type of 'kwargs' (line 3427)
    kwargs_119542 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3427, 61), 'kwargs', False)
    kwargs_119543 = {'scale': keyword_119535, 'Fs': keyword_119513, 'vmin': keyword_119537, 'pad_to': keyword_119527, 'scale_by_freq': keyword_119531, 'xextent': keyword_119525, 'detrend': keyword_119517, 'window': keyword_119519, 'Fc': keyword_119515, 'mode': keyword_119533, 'NFFT': keyword_119511, 'cmap': keyword_119523, 'vmax': keyword_119539, 'kwargs_119542': kwargs_119542, 'data': keyword_119541, 'sides': keyword_119529, 'noverlap': keyword_119521}
    # Getting the type of 'ax' (line 3423)
    ax_119507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3423, 14), 'ax', False)
    # Obtaining the member 'specgram' of a type (line 3423)
    specgram_119508 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3423, 14), ax_119507, 'specgram')
    # Calling specgram(args, kwargs) (line 3423)
    specgram_call_result_119544 = invoke(stypy.reporting.localization.Localization(__file__, 3423, 14), specgram_119508, *[x_119509], **kwargs_119543)
    
    # Assigning a type to the variable 'ret' (line 3423)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3423, 8), 'ret', specgram_call_result_119544)
    
    # finally branch of the try-finally block (line 3422)
    
    # Assigning a Name to a Attribute (line 3429):
    
    # Assigning a Name to a Attribute (line 3429):
    # Getting the type of 'washold' (line 3429)
    washold_119545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3429, 19), 'washold')
    # Getting the type of 'ax' (line 3429)
    ax_119546 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3429, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3429)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3429, 8), ax_119546, '_hold', washold_119545)
    
    
    # Call to sci(...): (line 3430)
    # Processing the call arguments (line 3430)
    
    # Obtaining the type of the subscript
    int_119548 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3430, 12), 'int')
    # Getting the type of 'ret' (line 3430)
    ret_119549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3430, 8), 'ret', False)
    # Obtaining the member '__getitem__' of a type (line 3430)
    getitem___119550 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3430, 8), ret_119549, '__getitem__')
    # Calling the subscript (__getitem__) to obtain the elements type (line 3430)
    subscript_call_result_119551 = invoke(stypy.reporting.localization.Localization(__file__, 3430, 8), getitem___119550, int_119548)
    
    # Processing the call keyword arguments (line 3430)
    kwargs_119552 = {}
    # Getting the type of 'sci' (line 3430)
    sci_119547 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3430, 4), 'sci', False)
    # Calling sci(args, kwargs) (line 3430)
    sci_call_result_119553 = invoke(stypy.reporting.localization.Localization(__file__, 3430, 4), sci_119547, *[subscript_call_result_119551], **kwargs_119552)
    
    # Getting the type of 'ret' (line 3431)
    ret_119554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3431, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3431)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3431, 4), 'stypy_return_type', ret_119554)
    
    # ################# End of 'specgram(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'specgram' in the type store
    # Getting the type of 'stypy_return_type' (line 3407)
    stypy_return_type_119555 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3407, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119555)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'specgram'
    return stypy_return_type_119555

# Assigning a type to the variable 'specgram' (line 3407)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3407, 0), 'specgram', specgram)

@norecursion
def stackplot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'stackplot'
    module_type_store = module_type_store.open_function_context('stackplot', 3435, 0, False)
    
    # Passed parameters checking function
    stackplot.stypy_localization = localization
    stackplot.stypy_type_of_self = None
    stackplot.stypy_type_store = module_type_store
    stackplot.stypy_function_name = 'stackplot'
    stackplot.stypy_param_names_list = ['x']
    stackplot.stypy_varargs_param_name = 'args'
    stackplot.stypy_kwargs_param_name = 'kwargs'
    stackplot.stypy_call_defaults = defaults
    stackplot.stypy_call_varargs = varargs
    stackplot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'stackplot', ['x'], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'stackplot', localization, ['x'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'stackplot(...)' code ##################

    
    # Assigning a Call to a Name (line 3437):
    
    # Assigning a Call to a Name (line 3437):
    
    # Call to gca(...): (line 3437)
    # Processing the call keyword arguments (line 3437)
    kwargs_119557 = {}
    # Getting the type of 'gca' (line 3437)
    gca_119556 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3437, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3437)
    gca_call_result_119558 = invoke(stypy.reporting.localization.Localization(__file__, 3437, 9), gca_119556, *[], **kwargs_119557)
    
    # Assigning a type to the variable 'ax' (line 3437)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3437, 4), 'ax', gca_call_result_119558)
    
    # Assigning a Attribute to a Name (line 3440):
    
    # Assigning a Attribute to a Name (line 3440):
    # Getting the type of 'ax' (line 3440)
    ax_119559 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3440, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3440)
    _hold_119560 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3440, 14), ax_119559, '_hold')
    # Assigning a type to the variable 'washold' (line 3440)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3440, 4), 'washold', _hold_119560)
    
    # Assigning a Call to a Name (line 3441):
    
    # Assigning a Call to a Name (line 3441):
    
    # Call to pop(...): (line 3441)
    # Processing the call arguments (line 3441)
    unicode_119563 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3441, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 3441)
    None_119564 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3441, 30), 'None', False)
    # Processing the call keyword arguments (line 3441)
    kwargs_119565 = {}
    # Getting the type of 'kwargs' (line 3441)
    kwargs_119561 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3441, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 3441)
    pop_119562 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3441, 11), kwargs_119561, 'pop')
    # Calling pop(args, kwargs) (line 3441)
    pop_call_result_119566 = invoke(stypy.reporting.localization.Localization(__file__, 3441, 11), pop_119562, *[unicode_119563, None_119564], **kwargs_119565)
    
    # Assigning a type to the variable 'hold' (line 3441)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3441, 4), 'hold', pop_call_result_119566)
    
    # Type idiom detected: calculating its left and rigth part (line 3442)
    # Getting the type of 'hold' (line 3442)
    hold_119567 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 4), 'hold')
    # Getting the type of 'None' (line 3442)
    None_119568 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3442, 19), 'None')
    
    (may_be_119569, more_types_in_union_119570) = may_not_be_none(hold_119567, None_119568)

    if may_be_119569:

        if more_types_in_union_119570:
            # Runtime conditional SSA (line 3442)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3443):
        
        # Assigning a Name to a Attribute (line 3443):
        # Getting the type of 'hold' (line 3443)
        hold_119571 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3443, 19), 'hold')
        # Getting the type of 'ax' (line 3443)
        ax_119572 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3443, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3443)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3443, 8), ax_119572, '_hold', hold_119571)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3444, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3444)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119573 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3444, 8), 'matplotlib.cbook')

        if (type(import_119573) is not StypyTypeError):

            if (import_119573 != 'pyd_module'):
                __import__(import_119573)
                sys_modules_119574 = sys.modules[import_119573]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3444, 8), 'matplotlib.cbook', sys_modules_119574.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3444, 8), __file__, sys_modules_119574, sys_modules_119574.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3444, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3444)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3444, 8), 'matplotlib.cbook', import_119573)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3445)
        # Processing the call arguments (line 3445)
        unicode_119577 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3445, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3446)
        mplDeprecation_119578 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3446, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3445)
        kwargs_119579 = {}
        # Getting the type of 'warnings' (line 3445)
        warnings_119575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3445, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3445)
        warn_119576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3445, 8), warnings_119575, 'warn')
        # Calling warn(args, kwargs) (line 3445)
        warn_call_result_119580 = invoke(stypy.reporting.localization.Localization(__file__, 3445, 8), warn_119576, *[unicode_119577, mplDeprecation_119578], **kwargs_119579)
        

        if more_types_in_union_119570:
            # SSA join for if statement (line 3442)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3447)
    
    # Assigning a Call to a Name (line 3448):
    
    # Assigning a Call to a Name (line 3448):
    
    # Call to stackplot(...): (line 3448)
    # Processing the call arguments (line 3448)
    # Getting the type of 'x' (line 3448)
    x_119583 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3448, 27), 'x', False)
    # Getting the type of 'args' (line 3448)
    args_119584 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3448, 31), 'args', False)
    # Processing the call keyword arguments (line 3448)
    # Getting the type of 'kwargs' (line 3448)
    kwargs_119585 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3448, 39), 'kwargs', False)
    kwargs_119586 = {'kwargs_119585': kwargs_119585}
    # Getting the type of 'ax' (line 3448)
    ax_119581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3448, 14), 'ax', False)
    # Obtaining the member 'stackplot' of a type (line 3448)
    stackplot_119582 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3448, 14), ax_119581, 'stackplot')
    # Calling stackplot(args, kwargs) (line 3448)
    stackplot_call_result_119587 = invoke(stypy.reporting.localization.Localization(__file__, 3448, 14), stackplot_119582, *[x_119583, args_119584], **kwargs_119586)
    
    # Assigning a type to the variable 'ret' (line 3448)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3448, 8), 'ret', stackplot_call_result_119587)
    
    # finally branch of the try-finally block (line 3447)
    
    # Assigning a Name to a Attribute (line 3450):
    
    # Assigning a Name to a Attribute (line 3450):
    # Getting the type of 'washold' (line 3450)
    washold_119588 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3450, 19), 'washold')
    # Getting the type of 'ax' (line 3450)
    ax_119589 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3450, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3450)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3450, 8), ax_119589, '_hold', washold_119588)
    
    # Getting the type of 'ret' (line 3452)
    ret_119590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3452, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3452)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3452, 4), 'stypy_return_type', ret_119590)
    
    # ################# End of 'stackplot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'stackplot' in the type store
    # Getting the type of 'stypy_return_type' (line 3435)
    stypy_return_type_119591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3435, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119591)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'stackplot'
    return stypy_return_type_119591

# Assigning a type to the variable 'stackplot' (line 3435)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3435, 0), 'stackplot', stackplot)

@norecursion
def stem(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'stem'
    module_type_store = module_type_store.open_function_context('stem', 3456, 0, False)
    
    # Passed parameters checking function
    stem.stypy_localization = localization
    stem.stypy_type_of_self = None
    stem.stypy_type_store = module_type_store
    stem.stypy_function_name = 'stem'
    stem.stypy_param_names_list = []
    stem.stypy_varargs_param_name = 'args'
    stem.stypy_kwargs_param_name = 'kwargs'
    stem.stypy_call_defaults = defaults
    stem.stypy_call_varargs = varargs
    stem.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'stem', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'stem', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'stem(...)' code ##################

    
    # Assigning a Call to a Name (line 3458):
    
    # Assigning a Call to a Name (line 3458):
    
    # Call to gca(...): (line 3458)
    # Processing the call keyword arguments (line 3458)
    kwargs_119593 = {}
    # Getting the type of 'gca' (line 3458)
    gca_119592 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3458, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3458)
    gca_call_result_119594 = invoke(stypy.reporting.localization.Localization(__file__, 3458, 9), gca_119592, *[], **kwargs_119593)
    
    # Assigning a type to the variable 'ax' (line 3458)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3458, 4), 'ax', gca_call_result_119594)
    
    # Assigning a Attribute to a Name (line 3461):
    
    # Assigning a Attribute to a Name (line 3461):
    # Getting the type of 'ax' (line 3461)
    ax_119595 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3461, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3461)
    _hold_119596 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3461, 14), ax_119595, '_hold')
    # Assigning a type to the variable 'washold' (line 3461)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3461, 4), 'washold', _hold_119596)
    
    # Assigning a Call to a Name (line 3462):
    
    # Assigning a Call to a Name (line 3462):
    
    # Call to pop(...): (line 3462)
    # Processing the call arguments (line 3462)
    unicode_119599 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3462, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 3462)
    None_119600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3462, 30), 'None', False)
    # Processing the call keyword arguments (line 3462)
    kwargs_119601 = {}
    # Getting the type of 'kwargs' (line 3462)
    kwargs_119597 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3462, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 3462)
    pop_119598 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3462, 11), kwargs_119597, 'pop')
    # Calling pop(args, kwargs) (line 3462)
    pop_call_result_119602 = invoke(stypy.reporting.localization.Localization(__file__, 3462, 11), pop_119598, *[unicode_119599, None_119600], **kwargs_119601)
    
    # Assigning a type to the variable 'hold' (line 3462)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3462, 4), 'hold', pop_call_result_119602)
    
    # Type idiom detected: calculating its left and rigth part (line 3463)
    # Getting the type of 'hold' (line 3463)
    hold_119603 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3463, 4), 'hold')
    # Getting the type of 'None' (line 3463)
    None_119604 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3463, 19), 'None')
    
    (may_be_119605, more_types_in_union_119606) = may_not_be_none(hold_119603, None_119604)

    if may_be_119605:

        if more_types_in_union_119606:
            # Runtime conditional SSA (line 3463)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3464):
        
        # Assigning a Name to a Attribute (line 3464):
        # Getting the type of 'hold' (line 3464)
        hold_119607 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3464, 19), 'hold')
        # Getting the type of 'ax' (line 3464)
        ax_119608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3464, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3464)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3464, 8), ax_119608, '_hold', hold_119607)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3465, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3465)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119609 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3465, 8), 'matplotlib.cbook')

        if (type(import_119609) is not StypyTypeError):

            if (import_119609 != 'pyd_module'):
                __import__(import_119609)
                sys_modules_119610 = sys.modules[import_119609]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3465, 8), 'matplotlib.cbook', sys_modules_119610.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3465, 8), __file__, sys_modules_119610, sys_modules_119610.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3465, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3465)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3465, 8), 'matplotlib.cbook', import_119609)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3466)
        # Processing the call arguments (line 3466)
        unicode_119613 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3466, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3467)
        mplDeprecation_119614 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3467, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3466)
        kwargs_119615 = {}
        # Getting the type of 'warnings' (line 3466)
        warnings_119611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3466, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3466)
        warn_119612 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3466, 8), warnings_119611, 'warn')
        # Calling warn(args, kwargs) (line 3466)
        warn_call_result_119616 = invoke(stypy.reporting.localization.Localization(__file__, 3466, 8), warn_119612, *[unicode_119613, mplDeprecation_119614], **kwargs_119615)
        

        if more_types_in_union_119606:
            # SSA join for if statement (line 3463)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3468)
    
    # Assigning a Call to a Name (line 3469):
    
    # Assigning a Call to a Name (line 3469):
    
    # Call to stem(...): (line 3469)
    # Getting the type of 'args' (line 3469)
    args_119619 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3469, 23), 'args', False)
    # Processing the call keyword arguments (line 3469)
    # Getting the type of 'kwargs' (line 3469)
    kwargs_119620 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3469, 31), 'kwargs', False)
    kwargs_119621 = {'kwargs_119620': kwargs_119620}
    # Getting the type of 'ax' (line 3469)
    ax_119617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3469, 14), 'ax', False)
    # Obtaining the member 'stem' of a type (line 3469)
    stem_119618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3469, 14), ax_119617, 'stem')
    # Calling stem(args, kwargs) (line 3469)
    stem_call_result_119622 = invoke(stypy.reporting.localization.Localization(__file__, 3469, 14), stem_119618, *[args_119619], **kwargs_119621)
    
    # Assigning a type to the variable 'ret' (line 3469)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3469, 8), 'ret', stem_call_result_119622)
    
    # finally branch of the try-finally block (line 3468)
    
    # Assigning a Name to a Attribute (line 3471):
    
    # Assigning a Name to a Attribute (line 3471):
    # Getting the type of 'washold' (line 3471)
    washold_119623 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3471, 19), 'washold')
    # Getting the type of 'ax' (line 3471)
    ax_119624 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3471, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3471)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3471, 8), ax_119624, '_hold', washold_119623)
    
    # Getting the type of 'ret' (line 3473)
    ret_119625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3473, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3473)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3473, 4), 'stypy_return_type', ret_119625)
    
    # ################# End of 'stem(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'stem' in the type store
    # Getting the type of 'stypy_return_type' (line 3456)
    stypy_return_type_119626 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3456, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119626)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'stem'
    return stypy_return_type_119626

# Assigning a type to the variable 'stem' (line 3456)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3456, 0), 'stem', stem)

@norecursion
def step(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'step'
    module_type_store = module_type_store.open_function_context('step', 3477, 0, False)
    
    # Passed parameters checking function
    step.stypy_localization = localization
    step.stypy_type_of_self = None
    step.stypy_type_store = module_type_store
    step.stypy_function_name = 'step'
    step.stypy_param_names_list = ['x', 'y']
    step.stypy_varargs_param_name = 'args'
    step.stypy_kwargs_param_name = 'kwargs'
    step.stypy_call_defaults = defaults
    step.stypy_call_varargs = varargs
    step.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'step', ['x', 'y'], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'step', localization, ['x', 'y'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'step(...)' code ##################

    
    # Assigning a Call to a Name (line 3479):
    
    # Assigning a Call to a Name (line 3479):
    
    # Call to gca(...): (line 3479)
    # Processing the call keyword arguments (line 3479)
    kwargs_119628 = {}
    # Getting the type of 'gca' (line 3479)
    gca_119627 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3479, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3479)
    gca_call_result_119629 = invoke(stypy.reporting.localization.Localization(__file__, 3479, 9), gca_119627, *[], **kwargs_119628)
    
    # Assigning a type to the variable 'ax' (line 3479)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3479, 4), 'ax', gca_call_result_119629)
    
    # Assigning a Attribute to a Name (line 3482):
    
    # Assigning a Attribute to a Name (line 3482):
    # Getting the type of 'ax' (line 3482)
    ax_119630 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3482, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3482)
    _hold_119631 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3482, 14), ax_119630, '_hold')
    # Assigning a type to the variable 'washold' (line 3482)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3482, 4), 'washold', _hold_119631)
    
    # Assigning a Call to a Name (line 3483):
    
    # Assigning a Call to a Name (line 3483):
    
    # Call to pop(...): (line 3483)
    # Processing the call arguments (line 3483)
    unicode_119634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3483, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 3483)
    None_119635 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3483, 30), 'None', False)
    # Processing the call keyword arguments (line 3483)
    kwargs_119636 = {}
    # Getting the type of 'kwargs' (line 3483)
    kwargs_119632 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3483, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 3483)
    pop_119633 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3483, 11), kwargs_119632, 'pop')
    # Calling pop(args, kwargs) (line 3483)
    pop_call_result_119637 = invoke(stypy.reporting.localization.Localization(__file__, 3483, 11), pop_119633, *[unicode_119634, None_119635], **kwargs_119636)
    
    # Assigning a type to the variable 'hold' (line 3483)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3483, 4), 'hold', pop_call_result_119637)
    
    # Type idiom detected: calculating its left and rigth part (line 3484)
    # Getting the type of 'hold' (line 3484)
    hold_119638 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 4), 'hold')
    # Getting the type of 'None' (line 3484)
    None_119639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3484, 19), 'None')
    
    (may_be_119640, more_types_in_union_119641) = may_not_be_none(hold_119638, None_119639)

    if may_be_119640:

        if more_types_in_union_119641:
            # Runtime conditional SSA (line 3484)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3485):
        
        # Assigning a Name to a Attribute (line 3485):
        # Getting the type of 'hold' (line 3485)
        hold_119642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3485, 19), 'hold')
        # Getting the type of 'ax' (line 3485)
        ax_119643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3485, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3485)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3485, 8), ax_119643, '_hold', hold_119642)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3486, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3486)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119644 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3486, 8), 'matplotlib.cbook')

        if (type(import_119644) is not StypyTypeError):

            if (import_119644 != 'pyd_module'):
                __import__(import_119644)
                sys_modules_119645 = sys.modules[import_119644]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3486, 8), 'matplotlib.cbook', sys_modules_119645.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3486, 8), __file__, sys_modules_119645, sys_modules_119645.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3486, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3486)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3486, 8), 'matplotlib.cbook', import_119644)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3487)
        # Processing the call arguments (line 3487)
        unicode_119648 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3487, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3488)
        mplDeprecation_119649 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3488, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3487)
        kwargs_119650 = {}
        # Getting the type of 'warnings' (line 3487)
        warnings_119646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3487, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3487)
        warn_119647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3487, 8), warnings_119646, 'warn')
        # Calling warn(args, kwargs) (line 3487)
        warn_call_result_119651 = invoke(stypy.reporting.localization.Localization(__file__, 3487, 8), warn_119647, *[unicode_119648, mplDeprecation_119649], **kwargs_119650)
        

        if more_types_in_union_119641:
            # SSA join for if statement (line 3484)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3489)
    
    # Assigning a Call to a Name (line 3490):
    
    # Assigning a Call to a Name (line 3490):
    
    # Call to step(...): (line 3490)
    # Processing the call arguments (line 3490)
    # Getting the type of 'x' (line 3490)
    x_119654 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3490, 22), 'x', False)
    # Getting the type of 'y' (line 3490)
    y_119655 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3490, 25), 'y', False)
    # Getting the type of 'args' (line 3490)
    args_119656 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3490, 29), 'args', False)
    # Processing the call keyword arguments (line 3490)
    # Getting the type of 'kwargs' (line 3490)
    kwargs_119657 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3490, 37), 'kwargs', False)
    kwargs_119658 = {'kwargs_119657': kwargs_119657}
    # Getting the type of 'ax' (line 3490)
    ax_119652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3490, 14), 'ax', False)
    # Obtaining the member 'step' of a type (line 3490)
    step_119653 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3490, 14), ax_119652, 'step')
    # Calling step(args, kwargs) (line 3490)
    step_call_result_119659 = invoke(stypy.reporting.localization.Localization(__file__, 3490, 14), step_119653, *[x_119654, y_119655, args_119656], **kwargs_119658)
    
    # Assigning a type to the variable 'ret' (line 3490)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3490, 8), 'ret', step_call_result_119659)
    
    # finally branch of the try-finally block (line 3489)
    
    # Assigning a Name to a Attribute (line 3492):
    
    # Assigning a Name to a Attribute (line 3492):
    # Getting the type of 'washold' (line 3492)
    washold_119660 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3492, 19), 'washold')
    # Getting the type of 'ax' (line 3492)
    ax_119661 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3492, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3492)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3492, 8), ax_119661, '_hold', washold_119660)
    
    # Getting the type of 'ret' (line 3494)
    ret_119662 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3494, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3494)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3494, 4), 'stypy_return_type', ret_119662)
    
    # ################# End of 'step(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'step' in the type store
    # Getting the type of 'stypy_return_type' (line 3477)
    stypy_return_type_119663 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3477, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119663)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'step'
    return stypy_return_type_119663

# Assigning a type to the variable 'step' (line 3477)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3477, 0), 'step', step)

@norecursion
def streamplot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    int_119664 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3499, 35), 'int')
    # Getting the type of 'None' (line 3499)
    None_119665 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3499, 48), 'None')
    # Getting the type of 'None' (line 3499)
    None_119666 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3499, 60), 'None')
    # Getting the type of 'None' (line 3499)
    None_119667 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3499, 71), 'None')
    # Getting the type of 'None' (line 3500)
    None_119668 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3500, 20), 'None')
    int_119669 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3500, 36), 'int')
    unicode_119670 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3500, 50), 'unicode', u'-|>')
    float_119671 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3500, 67), 'float')
    # Getting the type of 'None' (line 3501)
    None_119672 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 25), 'None')
    # Getting the type of 'None' (line 3501)
    None_119673 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 38), 'None')
    # Getting the type of 'None' (line 3501)
    None_119674 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3501, 57), 'None')
    float_119675 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3501, 73), 'float')
    unicode_119676 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3502, 37), 'unicode', u'both')
    # Getting the type of 'None' (line 3502)
    None_119677 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3502, 50), 'None')
    # Getting the type of 'None' (line 3502)
    None_119678 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3502, 61), 'None')
    defaults = [int_119664, None_119665, None_119666, None_119667, None_119668, int_119669, unicode_119670, float_119671, None_119672, None_119673, None_119674, float_119675, unicode_119676, None_119677, None_119678]
    # Create a new context for function 'streamplot'
    module_type_store = module_type_store.open_function_context('streamplot', 3498, 0, False)
    
    # Passed parameters checking function
    streamplot.stypy_localization = localization
    streamplot.stypy_type_of_self = None
    streamplot.stypy_type_store = module_type_store
    streamplot.stypy_function_name = 'streamplot'
    streamplot.stypy_param_names_list = ['x', 'y', 'u', 'v', 'density', 'linewidth', 'color', 'cmap', 'norm', 'arrowsize', 'arrowstyle', 'minlength', 'transform', 'zorder', 'start_points', 'maxlength', 'integration_direction', 'hold', 'data']
    streamplot.stypy_varargs_param_name = None
    streamplot.stypy_kwargs_param_name = None
    streamplot.stypy_call_defaults = defaults
    streamplot.stypy_call_varargs = varargs
    streamplot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'streamplot', ['x', 'y', 'u', 'v', 'density', 'linewidth', 'color', 'cmap', 'norm', 'arrowsize', 'arrowstyle', 'minlength', 'transform', 'zorder', 'start_points', 'maxlength', 'integration_direction', 'hold', 'data'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'streamplot', localization, ['x', 'y', 'u', 'v', 'density', 'linewidth', 'color', 'cmap', 'norm', 'arrowsize', 'arrowstyle', 'minlength', 'transform', 'zorder', 'start_points', 'maxlength', 'integration_direction', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'streamplot(...)' code ##################

    
    # Assigning a Call to a Name (line 3503):
    
    # Assigning a Call to a Name (line 3503):
    
    # Call to gca(...): (line 3503)
    # Processing the call keyword arguments (line 3503)
    kwargs_119680 = {}
    # Getting the type of 'gca' (line 3503)
    gca_119679 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3503, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3503)
    gca_call_result_119681 = invoke(stypy.reporting.localization.Localization(__file__, 3503, 9), gca_119679, *[], **kwargs_119680)
    
    # Assigning a type to the variable 'ax' (line 3503)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3503, 4), 'ax', gca_call_result_119681)
    
    # Assigning a Attribute to a Name (line 3506):
    
    # Assigning a Attribute to a Name (line 3506):
    # Getting the type of 'ax' (line 3506)
    ax_119682 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3506, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3506)
    _hold_119683 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3506, 14), ax_119682, '_hold')
    # Assigning a type to the variable 'washold' (line 3506)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3506, 4), 'washold', _hold_119683)
    
    # Type idiom detected: calculating its left and rigth part (line 3508)
    # Getting the type of 'hold' (line 3508)
    hold_119684 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3508, 4), 'hold')
    # Getting the type of 'None' (line 3508)
    None_119685 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3508, 19), 'None')
    
    (may_be_119686, more_types_in_union_119687) = may_not_be_none(hold_119684, None_119685)

    if may_be_119686:

        if more_types_in_union_119687:
            # Runtime conditional SSA (line 3508)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3509):
        
        # Assigning a Name to a Attribute (line 3509):
        # Getting the type of 'hold' (line 3509)
        hold_119688 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3509, 19), 'hold')
        # Getting the type of 'ax' (line 3509)
        ax_119689 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3509, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3509)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3509, 8), ax_119689, '_hold', hold_119688)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3510, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3510)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119690 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3510, 8), 'matplotlib.cbook')

        if (type(import_119690) is not StypyTypeError):

            if (import_119690 != 'pyd_module'):
                __import__(import_119690)
                sys_modules_119691 = sys.modules[import_119690]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3510, 8), 'matplotlib.cbook', sys_modules_119691.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3510, 8), __file__, sys_modules_119691, sys_modules_119691.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3510, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3510)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3510, 8), 'matplotlib.cbook', import_119690)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3511)
        # Processing the call arguments (line 3511)
        unicode_119694 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3511, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3512)
        mplDeprecation_119695 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3512, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3511)
        kwargs_119696 = {}
        # Getting the type of 'warnings' (line 3511)
        warnings_119692 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3511, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3511)
        warn_119693 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3511, 8), warnings_119692, 'warn')
        # Calling warn(args, kwargs) (line 3511)
        warn_call_result_119697 = invoke(stypy.reporting.localization.Localization(__file__, 3511, 8), warn_119693, *[unicode_119694, mplDeprecation_119695], **kwargs_119696)
        

        if more_types_in_union_119687:
            # SSA join for if statement (line 3508)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3513)
    
    # Assigning a Call to a Name (line 3514):
    
    # Assigning a Call to a Name (line 3514):
    
    # Call to streamplot(...): (line 3514)
    # Processing the call arguments (line 3514)
    # Getting the type of 'x' (line 3514)
    x_119700 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 28), 'x', False)
    # Getting the type of 'y' (line 3514)
    y_119701 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 31), 'y', False)
    # Getting the type of 'u' (line 3514)
    u_119702 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 34), 'u', False)
    # Getting the type of 'v' (line 3514)
    v_119703 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 37), 'v', False)
    # Processing the call keyword arguments (line 3514)
    # Getting the type of 'density' (line 3514)
    density_119704 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 48), 'density', False)
    keyword_119705 = density_119704
    # Getting the type of 'linewidth' (line 3514)
    linewidth_119706 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 67), 'linewidth', False)
    keyword_119707 = linewidth_119706
    # Getting the type of 'color' (line 3515)
    color_119708 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3515, 34), 'color', False)
    keyword_119709 = color_119708
    # Getting the type of 'cmap' (line 3515)
    cmap_119710 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3515, 46), 'cmap', False)
    keyword_119711 = cmap_119710
    # Getting the type of 'norm' (line 3515)
    norm_119712 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3515, 57), 'norm', False)
    keyword_119713 = norm_119712
    # Getting the type of 'arrowsize' (line 3516)
    arrowsize_119714 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3516, 38), 'arrowsize', False)
    keyword_119715 = arrowsize_119714
    # Getting the type of 'arrowstyle' (line 3516)
    arrowstyle_119716 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3516, 60), 'arrowstyle', False)
    keyword_119717 = arrowstyle_119716
    # Getting the type of 'minlength' (line 3517)
    minlength_119718 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3517, 38), 'minlength', False)
    keyword_119719 = minlength_119718
    # Getting the type of 'transform' (line 3517)
    transform_119720 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3517, 59), 'transform', False)
    keyword_119721 = transform_119720
    # Getting the type of 'zorder' (line 3518)
    zorder_119722 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3518, 35), 'zorder', False)
    keyword_119723 = zorder_119722
    # Getting the type of 'start_points' (line 3518)
    start_points_119724 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3518, 56), 'start_points', False)
    keyword_119725 = start_points_119724
    # Getting the type of 'maxlength' (line 3519)
    maxlength_119726 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3519, 38), 'maxlength', False)
    keyword_119727 = maxlength_119726
    # Getting the type of 'integration_direction' (line 3520)
    integration_direction_119728 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3520, 50), 'integration_direction', False)
    keyword_119729 = integration_direction_119728
    # Getting the type of 'data' (line 3521)
    data_119730 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3521, 33), 'data', False)
    keyword_119731 = data_119730
    kwargs_119732 = {'arrowstyle': keyword_119717, 'density': keyword_119705, 'color': keyword_119709, 'minlength': keyword_119719, 'transform': keyword_119721, 'arrowsize': keyword_119715, 'cmap': keyword_119711, 'zorder': keyword_119723, 'integration_direction': keyword_119729, 'maxlength': keyword_119727, 'start_points': keyword_119725, 'linewidth': keyword_119707, 'data': keyword_119731, 'norm': keyword_119713}
    # Getting the type of 'ax' (line 3514)
    ax_119698 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3514, 14), 'ax', False)
    # Obtaining the member 'streamplot' of a type (line 3514)
    streamplot_119699 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3514, 14), ax_119698, 'streamplot')
    # Calling streamplot(args, kwargs) (line 3514)
    streamplot_call_result_119733 = invoke(stypy.reporting.localization.Localization(__file__, 3514, 14), streamplot_119699, *[x_119700, y_119701, u_119702, v_119703], **kwargs_119732)
    
    # Assigning a type to the variable 'ret' (line 3514)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3514, 8), 'ret', streamplot_call_result_119733)
    
    # finally branch of the try-finally block (line 3513)
    
    # Assigning a Name to a Attribute (line 3523):
    
    # Assigning a Name to a Attribute (line 3523):
    # Getting the type of 'washold' (line 3523)
    washold_119734 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3523, 19), 'washold')
    # Getting the type of 'ax' (line 3523)
    ax_119735 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3523, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3523)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3523, 8), ax_119735, '_hold', washold_119734)
    
    
    # Call to sci(...): (line 3524)
    # Processing the call arguments (line 3524)
    # Getting the type of 'ret' (line 3524)
    ret_119737 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3524, 8), 'ret', False)
    # Obtaining the member 'lines' of a type (line 3524)
    lines_119738 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3524, 8), ret_119737, 'lines')
    # Processing the call keyword arguments (line 3524)
    kwargs_119739 = {}
    # Getting the type of 'sci' (line 3524)
    sci_119736 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3524, 4), 'sci', False)
    # Calling sci(args, kwargs) (line 3524)
    sci_call_result_119740 = invoke(stypy.reporting.localization.Localization(__file__, 3524, 4), sci_119736, *[lines_119738], **kwargs_119739)
    
    # Getting the type of 'ret' (line 3525)
    ret_119741 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3525, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3525)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3525, 4), 'stypy_return_type', ret_119741)
    
    # ################# End of 'streamplot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'streamplot' in the type store
    # Getting the type of 'stypy_return_type' (line 3498)
    stypy_return_type_119742 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3498, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119742)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'streamplot'
    return stypy_return_type_119742

# Assigning a type to the variable 'streamplot' (line 3498)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3498, 0), 'streamplot', streamplot)

@norecursion
def tricontour(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'tricontour'
    module_type_store = module_type_store.open_function_context('tricontour', 3529, 0, False)
    
    # Passed parameters checking function
    tricontour.stypy_localization = localization
    tricontour.stypy_type_of_self = None
    tricontour.stypy_type_store = module_type_store
    tricontour.stypy_function_name = 'tricontour'
    tricontour.stypy_param_names_list = []
    tricontour.stypy_varargs_param_name = 'args'
    tricontour.stypy_kwargs_param_name = 'kwargs'
    tricontour.stypy_call_defaults = defaults
    tricontour.stypy_call_varargs = varargs
    tricontour.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tricontour', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tricontour', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tricontour(...)' code ##################

    
    # Assigning a Call to a Name (line 3531):
    
    # Assigning a Call to a Name (line 3531):
    
    # Call to gca(...): (line 3531)
    # Processing the call keyword arguments (line 3531)
    kwargs_119744 = {}
    # Getting the type of 'gca' (line 3531)
    gca_119743 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3531, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3531)
    gca_call_result_119745 = invoke(stypy.reporting.localization.Localization(__file__, 3531, 9), gca_119743, *[], **kwargs_119744)
    
    # Assigning a type to the variable 'ax' (line 3531)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3531, 4), 'ax', gca_call_result_119745)
    
    # Assigning a Attribute to a Name (line 3534):
    
    # Assigning a Attribute to a Name (line 3534):
    # Getting the type of 'ax' (line 3534)
    ax_119746 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3534, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3534)
    _hold_119747 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3534, 14), ax_119746, '_hold')
    # Assigning a type to the variable 'washold' (line 3534)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3534, 4), 'washold', _hold_119747)
    
    # Assigning a Call to a Name (line 3535):
    
    # Assigning a Call to a Name (line 3535):
    
    # Call to pop(...): (line 3535)
    # Processing the call arguments (line 3535)
    unicode_119750 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3535, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 3535)
    None_119751 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3535, 30), 'None', False)
    # Processing the call keyword arguments (line 3535)
    kwargs_119752 = {}
    # Getting the type of 'kwargs' (line 3535)
    kwargs_119748 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3535, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 3535)
    pop_119749 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3535, 11), kwargs_119748, 'pop')
    # Calling pop(args, kwargs) (line 3535)
    pop_call_result_119753 = invoke(stypy.reporting.localization.Localization(__file__, 3535, 11), pop_119749, *[unicode_119750, None_119751], **kwargs_119752)
    
    # Assigning a type to the variable 'hold' (line 3535)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3535, 4), 'hold', pop_call_result_119753)
    
    # Type idiom detected: calculating its left and rigth part (line 3536)
    # Getting the type of 'hold' (line 3536)
    hold_119754 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 4), 'hold')
    # Getting the type of 'None' (line 3536)
    None_119755 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3536, 19), 'None')
    
    (may_be_119756, more_types_in_union_119757) = may_not_be_none(hold_119754, None_119755)

    if may_be_119756:

        if more_types_in_union_119757:
            # Runtime conditional SSA (line 3536)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3537):
        
        # Assigning a Name to a Attribute (line 3537):
        # Getting the type of 'hold' (line 3537)
        hold_119758 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 19), 'hold')
        # Getting the type of 'ax' (line 3537)
        ax_119759 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3537, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3537)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3537, 8), ax_119759, '_hold', hold_119758)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3538, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3538)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119760 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3538, 8), 'matplotlib.cbook')

        if (type(import_119760) is not StypyTypeError):

            if (import_119760 != 'pyd_module'):
                __import__(import_119760)
                sys_modules_119761 = sys.modules[import_119760]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3538, 8), 'matplotlib.cbook', sys_modules_119761.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3538, 8), __file__, sys_modules_119761, sys_modules_119761.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3538, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3538)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3538, 8), 'matplotlib.cbook', import_119760)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3539)
        # Processing the call arguments (line 3539)
        unicode_119764 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3539, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3540)
        mplDeprecation_119765 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3540, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3539)
        kwargs_119766 = {}
        # Getting the type of 'warnings' (line 3539)
        warnings_119762 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3539, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3539)
        warn_119763 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3539, 8), warnings_119762, 'warn')
        # Calling warn(args, kwargs) (line 3539)
        warn_call_result_119767 = invoke(stypy.reporting.localization.Localization(__file__, 3539, 8), warn_119763, *[unicode_119764, mplDeprecation_119765], **kwargs_119766)
        

        if more_types_in_union_119757:
            # SSA join for if statement (line 3536)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3541)
    
    # Assigning a Call to a Name (line 3542):
    
    # Assigning a Call to a Name (line 3542):
    
    # Call to tricontour(...): (line 3542)
    # Getting the type of 'args' (line 3542)
    args_119770 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 29), 'args', False)
    # Processing the call keyword arguments (line 3542)
    # Getting the type of 'kwargs' (line 3542)
    kwargs_119771 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 37), 'kwargs', False)
    kwargs_119772 = {'kwargs_119771': kwargs_119771}
    # Getting the type of 'ax' (line 3542)
    ax_119768 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3542, 14), 'ax', False)
    # Obtaining the member 'tricontour' of a type (line 3542)
    tricontour_119769 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3542, 14), ax_119768, 'tricontour')
    # Calling tricontour(args, kwargs) (line 3542)
    tricontour_call_result_119773 = invoke(stypy.reporting.localization.Localization(__file__, 3542, 14), tricontour_119769, *[args_119770], **kwargs_119772)
    
    # Assigning a type to the variable 'ret' (line 3542)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3542, 8), 'ret', tricontour_call_result_119773)
    
    # finally branch of the try-finally block (line 3541)
    
    # Assigning a Name to a Attribute (line 3544):
    
    # Assigning a Name to a Attribute (line 3544):
    # Getting the type of 'washold' (line 3544)
    washold_119774 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3544, 19), 'washold')
    # Getting the type of 'ax' (line 3544)
    ax_119775 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3544, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3544)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3544, 8), ax_119775, '_hold', washold_119774)
    
    
    
    # Getting the type of 'ret' (line 3545)
    ret_119776 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3545, 7), 'ret')
    # Obtaining the member '_A' of a type (line 3545)
    _A_119777 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3545, 7), ret_119776, '_A')
    # Getting the type of 'None' (line 3545)
    None_119778 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3545, 21), 'None')
    # Applying the binary operator 'isnot' (line 3545)
    result_is_not_119779 = python_operator(stypy.reporting.localization.Localization(__file__, 3545, 7), 'isnot', _A_119777, None_119778)
    
    # Testing the type of an if condition (line 3545)
    if_condition_119780 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3545, 4), result_is_not_119779)
    # Assigning a type to the variable 'if_condition_119780' (line 3545)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3545, 4), 'if_condition_119780', if_condition_119780)
    # SSA begins for if statement (line 3545)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sci(...): (line 3545)
    # Processing the call arguments (line 3545)
    # Getting the type of 'ret' (line 3545)
    ret_119782 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3545, 31), 'ret', False)
    # Processing the call keyword arguments (line 3545)
    kwargs_119783 = {}
    # Getting the type of 'sci' (line 3545)
    sci_119781 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3545, 27), 'sci', False)
    # Calling sci(args, kwargs) (line 3545)
    sci_call_result_119784 = invoke(stypy.reporting.localization.Localization(__file__, 3545, 27), sci_119781, *[ret_119782], **kwargs_119783)
    
    # SSA join for if statement (line 3545)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'ret' (line 3546)
    ret_119785 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3546, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3546)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3546, 4), 'stypy_return_type', ret_119785)
    
    # ################# End of 'tricontour(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tricontour' in the type store
    # Getting the type of 'stypy_return_type' (line 3529)
    stypy_return_type_119786 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3529, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119786)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tricontour'
    return stypy_return_type_119786

# Assigning a type to the variable 'tricontour' (line 3529)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3529, 0), 'tricontour', tricontour)

@norecursion
def tricontourf(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'tricontourf'
    module_type_store = module_type_store.open_function_context('tricontourf', 3550, 0, False)
    
    # Passed parameters checking function
    tricontourf.stypy_localization = localization
    tricontourf.stypy_type_of_self = None
    tricontourf.stypy_type_store = module_type_store
    tricontourf.stypy_function_name = 'tricontourf'
    tricontourf.stypy_param_names_list = []
    tricontourf.stypy_varargs_param_name = 'args'
    tricontourf.stypy_kwargs_param_name = 'kwargs'
    tricontourf.stypy_call_defaults = defaults
    tricontourf.stypy_call_varargs = varargs
    tricontourf.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tricontourf', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tricontourf', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tricontourf(...)' code ##################

    
    # Assigning a Call to a Name (line 3552):
    
    # Assigning a Call to a Name (line 3552):
    
    # Call to gca(...): (line 3552)
    # Processing the call keyword arguments (line 3552)
    kwargs_119788 = {}
    # Getting the type of 'gca' (line 3552)
    gca_119787 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3552, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3552)
    gca_call_result_119789 = invoke(stypy.reporting.localization.Localization(__file__, 3552, 9), gca_119787, *[], **kwargs_119788)
    
    # Assigning a type to the variable 'ax' (line 3552)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3552, 4), 'ax', gca_call_result_119789)
    
    # Assigning a Attribute to a Name (line 3555):
    
    # Assigning a Attribute to a Name (line 3555):
    # Getting the type of 'ax' (line 3555)
    ax_119790 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3555, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3555)
    _hold_119791 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3555, 14), ax_119790, '_hold')
    # Assigning a type to the variable 'washold' (line 3555)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3555, 4), 'washold', _hold_119791)
    
    # Assigning a Call to a Name (line 3556):
    
    # Assigning a Call to a Name (line 3556):
    
    # Call to pop(...): (line 3556)
    # Processing the call arguments (line 3556)
    unicode_119794 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3556, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 3556)
    None_119795 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3556, 30), 'None', False)
    # Processing the call keyword arguments (line 3556)
    kwargs_119796 = {}
    # Getting the type of 'kwargs' (line 3556)
    kwargs_119792 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3556, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 3556)
    pop_119793 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3556, 11), kwargs_119792, 'pop')
    # Calling pop(args, kwargs) (line 3556)
    pop_call_result_119797 = invoke(stypy.reporting.localization.Localization(__file__, 3556, 11), pop_119793, *[unicode_119794, None_119795], **kwargs_119796)
    
    # Assigning a type to the variable 'hold' (line 3556)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3556, 4), 'hold', pop_call_result_119797)
    
    # Type idiom detected: calculating its left and rigth part (line 3557)
    # Getting the type of 'hold' (line 3557)
    hold_119798 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3557, 4), 'hold')
    # Getting the type of 'None' (line 3557)
    None_119799 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3557, 19), 'None')
    
    (may_be_119800, more_types_in_union_119801) = may_not_be_none(hold_119798, None_119799)

    if may_be_119800:

        if more_types_in_union_119801:
            # Runtime conditional SSA (line 3557)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3558):
        
        # Assigning a Name to a Attribute (line 3558):
        # Getting the type of 'hold' (line 3558)
        hold_119802 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3558, 19), 'hold')
        # Getting the type of 'ax' (line 3558)
        ax_119803 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3558, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3558)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3558, 8), ax_119803, '_hold', hold_119802)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3559, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3559)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119804 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3559, 8), 'matplotlib.cbook')

        if (type(import_119804) is not StypyTypeError):

            if (import_119804 != 'pyd_module'):
                __import__(import_119804)
                sys_modules_119805 = sys.modules[import_119804]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3559, 8), 'matplotlib.cbook', sys_modules_119805.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3559, 8), __file__, sys_modules_119805, sys_modules_119805.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3559, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3559)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3559, 8), 'matplotlib.cbook', import_119804)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3560)
        # Processing the call arguments (line 3560)
        unicode_119808 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3560, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3561)
        mplDeprecation_119809 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3561, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3560)
        kwargs_119810 = {}
        # Getting the type of 'warnings' (line 3560)
        warnings_119806 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3560, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3560)
        warn_119807 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3560, 8), warnings_119806, 'warn')
        # Calling warn(args, kwargs) (line 3560)
        warn_call_result_119811 = invoke(stypy.reporting.localization.Localization(__file__, 3560, 8), warn_119807, *[unicode_119808, mplDeprecation_119809], **kwargs_119810)
        

        if more_types_in_union_119801:
            # SSA join for if statement (line 3557)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3562)
    
    # Assigning a Call to a Name (line 3563):
    
    # Assigning a Call to a Name (line 3563):
    
    # Call to tricontourf(...): (line 3563)
    # Getting the type of 'args' (line 3563)
    args_119814 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3563, 30), 'args', False)
    # Processing the call keyword arguments (line 3563)
    # Getting the type of 'kwargs' (line 3563)
    kwargs_119815 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3563, 38), 'kwargs', False)
    kwargs_119816 = {'kwargs_119815': kwargs_119815}
    # Getting the type of 'ax' (line 3563)
    ax_119812 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3563, 14), 'ax', False)
    # Obtaining the member 'tricontourf' of a type (line 3563)
    tricontourf_119813 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3563, 14), ax_119812, 'tricontourf')
    # Calling tricontourf(args, kwargs) (line 3563)
    tricontourf_call_result_119817 = invoke(stypy.reporting.localization.Localization(__file__, 3563, 14), tricontourf_119813, *[args_119814], **kwargs_119816)
    
    # Assigning a type to the variable 'ret' (line 3563)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3563, 8), 'ret', tricontourf_call_result_119817)
    
    # finally branch of the try-finally block (line 3562)
    
    # Assigning a Name to a Attribute (line 3565):
    
    # Assigning a Name to a Attribute (line 3565):
    # Getting the type of 'washold' (line 3565)
    washold_119818 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3565, 19), 'washold')
    # Getting the type of 'ax' (line 3565)
    ax_119819 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3565, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3565)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3565, 8), ax_119819, '_hold', washold_119818)
    
    
    
    # Getting the type of 'ret' (line 3566)
    ret_119820 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 7), 'ret')
    # Obtaining the member '_A' of a type (line 3566)
    _A_119821 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3566, 7), ret_119820, '_A')
    # Getting the type of 'None' (line 3566)
    None_119822 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 21), 'None')
    # Applying the binary operator 'isnot' (line 3566)
    result_is_not_119823 = python_operator(stypy.reporting.localization.Localization(__file__, 3566, 7), 'isnot', _A_119821, None_119822)
    
    # Testing the type of an if condition (line 3566)
    if_condition_119824 = is_suitable_condition(stypy.reporting.localization.Localization(__file__, 3566, 4), result_is_not_119823)
    # Assigning a type to the variable 'if_condition_119824' (line 3566)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3566, 4), 'if_condition_119824', if_condition_119824)
    # SSA begins for if statement (line 3566)
    module_type_store = SSAContext.create_ssa_context(module_type_store, 'if')
    
    # Call to sci(...): (line 3566)
    # Processing the call arguments (line 3566)
    # Getting the type of 'ret' (line 3566)
    ret_119826 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 31), 'ret', False)
    # Processing the call keyword arguments (line 3566)
    kwargs_119827 = {}
    # Getting the type of 'sci' (line 3566)
    sci_119825 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3566, 27), 'sci', False)
    # Calling sci(args, kwargs) (line 3566)
    sci_call_result_119828 = invoke(stypy.reporting.localization.Localization(__file__, 3566, 27), sci_119825, *[ret_119826], **kwargs_119827)
    
    # SSA join for if statement (line 3566)
    module_type_store = module_type_store.join_ssa_context()
    
    # Getting the type of 'ret' (line 3567)
    ret_119829 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3567, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3567)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3567, 4), 'stypy_return_type', ret_119829)
    
    # ################# End of 'tricontourf(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tricontourf' in the type store
    # Getting the type of 'stypy_return_type' (line 3550)
    stypy_return_type_119830 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3550, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119830)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tricontourf'
    return stypy_return_type_119830

# Assigning a type to the variable 'tricontourf' (line 3550)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3550, 0), 'tricontourf', tricontourf)

@norecursion
def tripcolor(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'tripcolor'
    module_type_store = module_type_store.open_function_context('tripcolor', 3571, 0, False)
    
    # Passed parameters checking function
    tripcolor.stypy_localization = localization
    tripcolor.stypy_type_of_self = None
    tripcolor.stypy_type_store = module_type_store
    tripcolor.stypy_function_name = 'tripcolor'
    tripcolor.stypy_param_names_list = []
    tripcolor.stypy_varargs_param_name = 'args'
    tripcolor.stypy_kwargs_param_name = 'kwargs'
    tripcolor.stypy_call_defaults = defaults
    tripcolor.stypy_call_varargs = varargs
    tripcolor.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tripcolor', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tripcolor', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tripcolor(...)' code ##################

    
    # Assigning a Call to a Name (line 3573):
    
    # Assigning a Call to a Name (line 3573):
    
    # Call to gca(...): (line 3573)
    # Processing the call keyword arguments (line 3573)
    kwargs_119832 = {}
    # Getting the type of 'gca' (line 3573)
    gca_119831 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3573, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3573)
    gca_call_result_119833 = invoke(stypy.reporting.localization.Localization(__file__, 3573, 9), gca_119831, *[], **kwargs_119832)
    
    # Assigning a type to the variable 'ax' (line 3573)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3573, 4), 'ax', gca_call_result_119833)
    
    # Assigning a Attribute to a Name (line 3576):
    
    # Assigning a Attribute to a Name (line 3576):
    # Getting the type of 'ax' (line 3576)
    ax_119834 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3576, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3576)
    _hold_119835 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3576, 14), ax_119834, '_hold')
    # Assigning a type to the variable 'washold' (line 3576)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3576, 4), 'washold', _hold_119835)
    
    # Assigning a Call to a Name (line 3577):
    
    # Assigning a Call to a Name (line 3577):
    
    # Call to pop(...): (line 3577)
    # Processing the call arguments (line 3577)
    unicode_119838 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3577, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 3577)
    None_119839 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3577, 30), 'None', False)
    # Processing the call keyword arguments (line 3577)
    kwargs_119840 = {}
    # Getting the type of 'kwargs' (line 3577)
    kwargs_119836 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3577, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 3577)
    pop_119837 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3577, 11), kwargs_119836, 'pop')
    # Calling pop(args, kwargs) (line 3577)
    pop_call_result_119841 = invoke(stypy.reporting.localization.Localization(__file__, 3577, 11), pop_119837, *[unicode_119838, None_119839], **kwargs_119840)
    
    # Assigning a type to the variable 'hold' (line 3577)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3577, 4), 'hold', pop_call_result_119841)
    
    # Type idiom detected: calculating its left and rigth part (line 3578)
    # Getting the type of 'hold' (line 3578)
    hold_119842 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3578, 4), 'hold')
    # Getting the type of 'None' (line 3578)
    None_119843 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3578, 19), 'None')
    
    (may_be_119844, more_types_in_union_119845) = may_not_be_none(hold_119842, None_119843)

    if may_be_119844:

        if more_types_in_union_119845:
            # Runtime conditional SSA (line 3578)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3579):
        
        # Assigning a Name to a Attribute (line 3579):
        # Getting the type of 'hold' (line 3579)
        hold_119846 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3579, 19), 'hold')
        # Getting the type of 'ax' (line 3579)
        ax_119847 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3579, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3579)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3579, 8), ax_119847, '_hold', hold_119846)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3580, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3580)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119848 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3580, 8), 'matplotlib.cbook')

        if (type(import_119848) is not StypyTypeError):

            if (import_119848 != 'pyd_module'):
                __import__(import_119848)
                sys_modules_119849 = sys.modules[import_119848]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3580, 8), 'matplotlib.cbook', sys_modules_119849.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3580, 8), __file__, sys_modules_119849, sys_modules_119849.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3580, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3580)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3580, 8), 'matplotlib.cbook', import_119848)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3581)
        # Processing the call arguments (line 3581)
        unicode_119852 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3581, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3582)
        mplDeprecation_119853 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3582, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3581)
        kwargs_119854 = {}
        # Getting the type of 'warnings' (line 3581)
        warnings_119850 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3581, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3581)
        warn_119851 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3581, 8), warnings_119850, 'warn')
        # Calling warn(args, kwargs) (line 3581)
        warn_call_result_119855 = invoke(stypy.reporting.localization.Localization(__file__, 3581, 8), warn_119851, *[unicode_119852, mplDeprecation_119853], **kwargs_119854)
        

        if more_types_in_union_119845:
            # SSA join for if statement (line 3578)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3583)
    
    # Assigning a Call to a Name (line 3584):
    
    # Assigning a Call to a Name (line 3584):
    
    # Call to tripcolor(...): (line 3584)
    # Getting the type of 'args' (line 3584)
    args_119858 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 28), 'args', False)
    # Processing the call keyword arguments (line 3584)
    # Getting the type of 'kwargs' (line 3584)
    kwargs_119859 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 36), 'kwargs', False)
    kwargs_119860 = {'kwargs_119859': kwargs_119859}
    # Getting the type of 'ax' (line 3584)
    ax_119856 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3584, 14), 'ax', False)
    # Obtaining the member 'tripcolor' of a type (line 3584)
    tripcolor_119857 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3584, 14), ax_119856, 'tripcolor')
    # Calling tripcolor(args, kwargs) (line 3584)
    tripcolor_call_result_119861 = invoke(stypy.reporting.localization.Localization(__file__, 3584, 14), tripcolor_119857, *[args_119858], **kwargs_119860)
    
    # Assigning a type to the variable 'ret' (line 3584)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3584, 8), 'ret', tripcolor_call_result_119861)
    
    # finally branch of the try-finally block (line 3583)
    
    # Assigning a Name to a Attribute (line 3586):
    
    # Assigning a Name to a Attribute (line 3586):
    # Getting the type of 'washold' (line 3586)
    washold_119862 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3586, 19), 'washold')
    # Getting the type of 'ax' (line 3586)
    ax_119863 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3586, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3586)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3586, 8), ax_119863, '_hold', washold_119862)
    
    
    # Call to sci(...): (line 3587)
    # Processing the call arguments (line 3587)
    # Getting the type of 'ret' (line 3587)
    ret_119865 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3587, 8), 'ret', False)
    # Processing the call keyword arguments (line 3587)
    kwargs_119866 = {}
    # Getting the type of 'sci' (line 3587)
    sci_119864 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3587, 4), 'sci', False)
    # Calling sci(args, kwargs) (line 3587)
    sci_call_result_119867 = invoke(stypy.reporting.localization.Localization(__file__, 3587, 4), sci_119864, *[ret_119865], **kwargs_119866)
    
    # Getting the type of 'ret' (line 3588)
    ret_119868 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3588, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3588)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3588, 4), 'stypy_return_type', ret_119868)
    
    # ################# End of 'tripcolor(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tripcolor' in the type store
    # Getting the type of 'stypy_return_type' (line 3571)
    stypy_return_type_119869 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3571, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119869)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tripcolor'
    return stypy_return_type_119869

# Assigning a type to the variable 'tripcolor' (line 3571)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3571, 0), 'tripcolor', tripcolor)

@norecursion
def triplot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'triplot'
    module_type_store = module_type_store.open_function_context('triplot', 3592, 0, False)
    
    # Passed parameters checking function
    triplot.stypy_localization = localization
    triplot.stypy_type_of_self = None
    triplot.stypy_type_store = module_type_store
    triplot.stypy_function_name = 'triplot'
    triplot.stypy_param_names_list = []
    triplot.stypy_varargs_param_name = 'args'
    triplot.stypy_kwargs_param_name = 'kwargs'
    triplot.stypy_call_defaults = defaults
    triplot.stypy_call_varargs = varargs
    triplot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'triplot', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'triplot', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'triplot(...)' code ##################

    
    # Assigning a Call to a Name (line 3594):
    
    # Assigning a Call to a Name (line 3594):
    
    # Call to gca(...): (line 3594)
    # Processing the call keyword arguments (line 3594)
    kwargs_119871 = {}
    # Getting the type of 'gca' (line 3594)
    gca_119870 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3594, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3594)
    gca_call_result_119872 = invoke(stypy.reporting.localization.Localization(__file__, 3594, 9), gca_119870, *[], **kwargs_119871)
    
    # Assigning a type to the variable 'ax' (line 3594)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3594, 4), 'ax', gca_call_result_119872)
    
    # Assigning a Attribute to a Name (line 3597):
    
    # Assigning a Attribute to a Name (line 3597):
    # Getting the type of 'ax' (line 3597)
    ax_119873 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3597, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3597)
    _hold_119874 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3597, 14), ax_119873, '_hold')
    # Assigning a type to the variable 'washold' (line 3597)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3597, 4), 'washold', _hold_119874)
    
    # Assigning a Call to a Name (line 3598):
    
    # Assigning a Call to a Name (line 3598):
    
    # Call to pop(...): (line 3598)
    # Processing the call arguments (line 3598)
    unicode_119877 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3598, 22), 'unicode', u'hold')
    # Getting the type of 'None' (line 3598)
    None_119878 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3598, 30), 'None', False)
    # Processing the call keyword arguments (line 3598)
    kwargs_119879 = {}
    # Getting the type of 'kwargs' (line 3598)
    kwargs_119875 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3598, 11), 'kwargs', False)
    # Obtaining the member 'pop' of a type (line 3598)
    pop_119876 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3598, 11), kwargs_119875, 'pop')
    # Calling pop(args, kwargs) (line 3598)
    pop_call_result_119880 = invoke(stypy.reporting.localization.Localization(__file__, 3598, 11), pop_119876, *[unicode_119877, None_119878], **kwargs_119879)
    
    # Assigning a type to the variable 'hold' (line 3598)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3598, 4), 'hold', pop_call_result_119880)
    
    # Type idiom detected: calculating its left and rigth part (line 3599)
    # Getting the type of 'hold' (line 3599)
    hold_119881 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3599, 4), 'hold')
    # Getting the type of 'None' (line 3599)
    None_119882 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3599, 19), 'None')
    
    (may_be_119883, more_types_in_union_119884) = may_not_be_none(hold_119881, None_119882)

    if may_be_119883:

        if more_types_in_union_119884:
            # Runtime conditional SSA (line 3599)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3600):
        
        # Assigning a Name to a Attribute (line 3600):
        # Getting the type of 'hold' (line 3600)
        hold_119885 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3600, 19), 'hold')
        # Getting the type of 'ax' (line 3600)
        ax_119886 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3600, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3600)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3600, 8), ax_119886, '_hold', hold_119885)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3601, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3601)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119887 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3601, 8), 'matplotlib.cbook')

        if (type(import_119887) is not StypyTypeError):

            if (import_119887 != 'pyd_module'):
                __import__(import_119887)
                sys_modules_119888 = sys.modules[import_119887]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3601, 8), 'matplotlib.cbook', sys_modules_119888.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3601, 8), __file__, sys_modules_119888, sys_modules_119888.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3601, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3601)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3601, 8), 'matplotlib.cbook', import_119887)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3602)
        # Processing the call arguments (line 3602)
        unicode_119891 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3602, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3603)
        mplDeprecation_119892 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3603, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3602)
        kwargs_119893 = {}
        # Getting the type of 'warnings' (line 3602)
        warnings_119889 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3602, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3602)
        warn_119890 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3602, 8), warnings_119889, 'warn')
        # Calling warn(args, kwargs) (line 3602)
        warn_call_result_119894 = invoke(stypy.reporting.localization.Localization(__file__, 3602, 8), warn_119890, *[unicode_119891, mplDeprecation_119892], **kwargs_119893)
        

        if more_types_in_union_119884:
            # SSA join for if statement (line 3599)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3604)
    
    # Assigning a Call to a Name (line 3605):
    
    # Assigning a Call to a Name (line 3605):
    
    # Call to triplot(...): (line 3605)
    # Getting the type of 'args' (line 3605)
    args_119897 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 26), 'args', False)
    # Processing the call keyword arguments (line 3605)
    # Getting the type of 'kwargs' (line 3605)
    kwargs_119898 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 34), 'kwargs', False)
    kwargs_119899 = {'kwargs_119898': kwargs_119898}
    # Getting the type of 'ax' (line 3605)
    ax_119895 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3605, 14), 'ax', False)
    # Obtaining the member 'triplot' of a type (line 3605)
    triplot_119896 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3605, 14), ax_119895, 'triplot')
    # Calling triplot(args, kwargs) (line 3605)
    triplot_call_result_119900 = invoke(stypy.reporting.localization.Localization(__file__, 3605, 14), triplot_119896, *[args_119897], **kwargs_119899)
    
    # Assigning a type to the variable 'ret' (line 3605)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3605, 8), 'ret', triplot_call_result_119900)
    
    # finally branch of the try-finally block (line 3604)
    
    # Assigning a Name to a Attribute (line 3607):
    
    # Assigning a Name to a Attribute (line 3607):
    # Getting the type of 'washold' (line 3607)
    washold_119901 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 19), 'washold')
    # Getting the type of 'ax' (line 3607)
    ax_119902 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3607, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3607)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3607, 8), ax_119902, '_hold', washold_119901)
    
    # Getting the type of 'ret' (line 3609)
    ret_119903 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3609, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3609)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3609, 4), 'stypy_return_type', ret_119903)
    
    # ################# End of 'triplot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'triplot' in the type store
    # Getting the type of 'stypy_return_type' (line 3592)
    stypy_return_type_119904 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3592, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119904)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'triplot'
    return stypy_return_type_119904

# Assigning a type to the variable 'triplot' (line 3592)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3592, 0), 'triplot', triplot)

@norecursion
def violinplot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3614)
    None_119905 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3614, 34), 'None')
    # Getting the type of 'True' (line 3614)
    True_119906 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3614, 45), 'True')
    float_119907 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3614, 58), 'float')
    # Getting the type of 'False' (line 3614)
    False_119908 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3614, 73), 'False')
    # Getting the type of 'True' (line 3615)
    True_119909 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 27), 'True')
    # Getting the type of 'False' (line 3615)
    False_119910 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 45), 'False')
    int_119911 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3615, 59), 'int')
    # Getting the type of 'None' (line 3615)
    None_119912 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3615, 74), 'None')
    # Getting the type of 'None' (line 3616)
    None_119913 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 20), 'None')
    # Getting the type of 'None' (line 3616)
    None_119914 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3616, 31), 'None')
    defaults = [None_119905, True_119906, float_119907, False_119908, True_119909, False_119910, int_119911, None_119912, None_119913, None_119914]
    # Create a new context for function 'violinplot'
    module_type_store = module_type_store.open_function_context('violinplot', 3613, 0, False)
    
    # Passed parameters checking function
    violinplot.stypy_localization = localization
    violinplot.stypy_type_of_self = None
    violinplot.stypy_type_store = module_type_store
    violinplot.stypy_function_name = 'violinplot'
    violinplot.stypy_param_names_list = ['dataset', 'positions', 'vert', 'widths', 'showmeans', 'showextrema', 'showmedians', 'points', 'bw_method', 'hold', 'data']
    violinplot.stypy_varargs_param_name = None
    violinplot.stypy_kwargs_param_name = None
    violinplot.stypy_call_defaults = defaults
    violinplot.stypy_call_varargs = varargs
    violinplot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'violinplot', ['dataset', 'positions', 'vert', 'widths', 'showmeans', 'showextrema', 'showmedians', 'points', 'bw_method', 'hold', 'data'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'violinplot', localization, ['dataset', 'positions', 'vert', 'widths', 'showmeans', 'showextrema', 'showmedians', 'points', 'bw_method', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'violinplot(...)' code ##################

    
    # Assigning a Call to a Name (line 3617):
    
    # Assigning a Call to a Name (line 3617):
    
    # Call to gca(...): (line 3617)
    # Processing the call keyword arguments (line 3617)
    kwargs_119916 = {}
    # Getting the type of 'gca' (line 3617)
    gca_119915 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3617, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3617)
    gca_call_result_119917 = invoke(stypy.reporting.localization.Localization(__file__, 3617, 9), gca_119915, *[], **kwargs_119916)
    
    # Assigning a type to the variable 'ax' (line 3617)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3617, 4), 'ax', gca_call_result_119917)
    
    # Assigning a Attribute to a Name (line 3620):
    
    # Assigning a Attribute to a Name (line 3620):
    # Getting the type of 'ax' (line 3620)
    ax_119918 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3620, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3620)
    _hold_119919 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3620, 14), ax_119918, '_hold')
    # Assigning a type to the variable 'washold' (line 3620)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3620, 4), 'washold', _hold_119919)
    
    # Type idiom detected: calculating its left and rigth part (line 3622)
    # Getting the type of 'hold' (line 3622)
    hold_119920 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3622, 4), 'hold')
    # Getting the type of 'None' (line 3622)
    None_119921 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3622, 19), 'None')
    
    (may_be_119922, more_types_in_union_119923) = may_not_be_none(hold_119920, None_119921)

    if may_be_119922:

        if more_types_in_union_119923:
            # Runtime conditional SSA (line 3622)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3623):
        
        # Assigning a Name to a Attribute (line 3623):
        # Getting the type of 'hold' (line 3623)
        hold_119924 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3623, 19), 'hold')
        # Getting the type of 'ax' (line 3623)
        ax_119925 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3623, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3623)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3623, 8), ax_119925, '_hold', hold_119924)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3624, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3624)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119926 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3624, 8), 'matplotlib.cbook')

        if (type(import_119926) is not StypyTypeError):

            if (import_119926 != 'pyd_module'):
                __import__(import_119926)
                sys_modules_119927 = sys.modules[import_119926]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3624, 8), 'matplotlib.cbook', sys_modules_119927.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3624, 8), __file__, sys_modules_119927, sys_modules_119927.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3624, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3624)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3624, 8), 'matplotlib.cbook', import_119926)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3625)
        # Processing the call arguments (line 3625)
        unicode_119930 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3625, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3626)
        mplDeprecation_119931 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3626, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3625)
        kwargs_119932 = {}
        # Getting the type of 'warnings' (line 3625)
        warnings_119928 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3625, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3625)
        warn_119929 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3625, 8), warnings_119928, 'warn')
        # Calling warn(args, kwargs) (line 3625)
        warn_call_result_119933 = invoke(stypy.reporting.localization.Localization(__file__, 3625, 8), warn_119929, *[unicode_119930, mplDeprecation_119931], **kwargs_119932)
        

        if more_types_in_union_119923:
            # SSA join for if statement (line 3622)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3627)
    
    # Assigning a Call to a Name (line 3628):
    
    # Assigning a Call to a Name (line 3628):
    
    # Call to violinplot(...): (line 3628)
    # Processing the call arguments (line 3628)
    # Getting the type of 'dataset' (line 3628)
    dataset_119936 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 28), 'dataset', False)
    # Processing the call keyword arguments (line 3628)
    # Getting the type of 'positions' (line 3628)
    positions_119937 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 47), 'positions', False)
    keyword_119938 = positions_119937
    # Getting the type of 'vert' (line 3628)
    vert_119939 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 63), 'vert', False)
    keyword_119940 = vert_119939
    # Getting the type of 'widths' (line 3629)
    widths_119941 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3629, 35), 'widths', False)
    keyword_119942 = widths_119941
    # Getting the type of 'showmeans' (line 3629)
    showmeans_119943 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3629, 53), 'showmeans', False)
    keyword_119944 = showmeans_119943
    # Getting the type of 'showextrema' (line 3630)
    showextrema_119945 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3630, 40), 'showextrema', False)
    keyword_119946 = showextrema_119945
    # Getting the type of 'showmedians' (line 3630)
    showmedians_119947 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3630, 65), 'showmedians', False)
    keyword_119948 = showmedians_119947
    # Getting the type of 'points' (line 3631)
    points_119949 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3631, 35), 'points', False)
    keyword_119950 = points_119949
    # Getting the type of 'bw_method' (line 3631)
    bw_method_119951 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3631, 53), 'bw_method', False)
    keyword_119952 = bw_method_119951
    # Getting the type of 'data' (line 3631)
    data_119953 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3631, 69), 'data', False)
    keyword_119954 = data_119953
    kwargs_119955 = {'vert': keyword_119940, 'positions': keyword_119938, 'bw_method': keyword_119952, 'showmedians': keyword_119948, 'showextrema': keyword_119946, 'widths': keyword_119942, 'showmeans': keyword_119944, 'data': keyword_119954, 'points': keyword_119950}
    # Getting the type of 'ax' (line 3628)
    ax_119934 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3628, 14), 'ax', False)
    # Obtaining the member 'violinplot' of a type (line 3628)
    violinplot_119935 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3628, 14), ax_119934, 'violinplot')
    # Calling violinplot(args, kwargs) (line 3628)
    violinplot_call_result_119956 = invoke(stypy.reporting.localization.Localization(__file__, 3628, 14), violinplot_119935, *[dataset_119936], **kwargs_119955)
    
    # Assigning a type to the variable 'ret' (line 3628)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3628, 8), 'ret', violinplot_call_result_119956)
    
    # finally branch of the try-finally block (line 3627)
    
    # Assigning a Name to a Attribute (line 3633):
    
    # Assigning a Name to a Attribute (line 3633):
    # Getting the type of 'washold' (line 3633)
    washold_119957 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3633, 19), 'washold')
    # Getting the type of 'ax' (line 3633)
    ax_119958 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3633, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3633)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3633, 8), ax_119958, '_hold', washold_119957)
    
    # Getting the type of 'ret' (line 3635)
    ret_119959 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3635, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3635)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3635, 4), 'stypy_return_type', ret_119959)
    
    # ################# End of 'violinplot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'violinplot' in the type store
    # Getting the type of 'stypy_return_type' (line 3613)
    stypy_return_type_119960 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3613, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_119960)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'violinplot'
    return stypy_return_type_119960

# Assigning a type to the variable 'violinplot' (line 3613)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3613, 0), 'violinplot', violinplot)

@norecursion
def vlines(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_119961 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3640, 33), 'unicode', u'k')
    unicode_119962 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3640, 49), 'unicode', u'solid')
    unicode_119963 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3640, 64), 'unicode', u'')
    # Getting the type of 'None' (line 3640)
    None_119964 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3640, 73), 'None')
    # Getting the type of 'None' (line 3641)
    None_119965 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3641, 16), 'None')
    defaults = [unicode_119961, unicode_119962, unicode_119963, None_119964, None_119965]
    # Create a new context for function 'vlines'
    module_type_store = module_type_store.open_function_context('vlines', 3639, 0, False)
    
    # Passed parameters checking function
    vlines.stypy_localization = localization
    vlines.stypy_type_of_self = None
    vlines.stypy_type_store = module_type_store
    vlines.stypy_function_name = 'vlines'
    vlines.stypy_param_names_list = ['x', 'ymin', 'ymax', 'colors', 'linestyles', 'label', 'hold', 'data']
    vlines.stypy_varargs_param_name = None
    vlines.stypy_kwargs_param_name = 'kwargs'
    vlines.stypy_call_defaults = defaults
    vlines.stypy_call_varargs = varargs
    vlines.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'vlines', ['x', 'ymin', 'ymax', 'colors', 'linestyles', 'label', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'vlines', localization, ['x', 'ymin', 'ymax', 'colors', 'linestyles', 'label', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'vlines(...)' code ##################

    
    # Assigning a Call to a Name (line 3642):
    
    # Assigning a Call to a Name (line 3642):
    
    # Call to gca(...): (line 3642)
    # Processing the call keyword arguments (line 3642)
    kwargs_119967 = {}
    # Getting the type of 'gca' (line 3642)
    gca_119966 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3642, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3642)
    gca_call_result_119968 = invoke(stypy.reporting.localization.Localization(__file__, 3642, 9), gca_119966, *[], **kwargs_119967)
    
    # Assigning a type to the variable 'ax' (line 3642)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3642, 4), 'ax', gca_call_result_119968)
    
    # Assigning a Attribute to a Name (line 3645):
    
    # Assigning a Attribute to a Name (line 3645):
    # Getting the type of 'ax' (line 3645)
    ax_119969 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3645, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3645)
    _hold_119970 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3645, 14), ax_119969, '_hold')
    # Assigning a type to the variable 'washold' (line 3645)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3645, 4), 'washold', _hold_119970)
    
    # Type idiom detected: calculating its left and rigth part (line 3647)
    # Getting the type of 'hold' (line 3647)
    hold_119971 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 4), 'hold')
    # Getting the type of 'None' (line 3647)
    None_119972 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3647, 19), 'None')
    
    (may_be_119973, more_types_in_union_119974) = may_not_be_none(hold_119971, None_119972)

    if may_be_119973:

        if more_types_in_union_119974:
            # Runtime conditional SSA (line 3647)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3648):
        
        # Assigning a Name to a Attribute (line 3648):
        # Getting the type of 'hold' (line 3648)
        hold_119975 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3648, 19), 'hold')
        # Getting the type of 'ax' (line 3648)
        ax_119976 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3648, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3648)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3648, 8), ax_119976, '_hold', hold_119975)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3649, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3649)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_119977 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3649, 8), 'matplotlib.cbook')

        if (type(import_119977) is not StypyTypeError):

            if (import_119977 != 'pyd_module'):
                __import__(import_119977)
                sys_modules_119978 = sys.modules[import_119977]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3649, 8), 'matplotlib.cbook', sys_modules_119978.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3649, 8), __file__, sys_modules_119978, sys_modules_119978.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3649, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3649)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3649, 8), 'matplotlib.cbook', import_119977)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3650)
        # Processing the call arguments (line 3650)
        unicode_119981 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3650, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3651)
        mplDeprecation_119982 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3651, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3650)
        kwargs_119983 = {}
        # Getting the type of 'warnings' (line 3650)
        warnings_119979 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3650, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3650)
        warn_119980 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3650, 8), warnings_119979, 'warn')
        # Calling warn(args, kwargs) (line 3650)
        warn_call_result_119984 = invoke(stypy.reporting.localization.Localization(__file__, 3650, 8), warn_119980, *[unicode_119981, mplDeprecation_119982], **kwargs_119983)
        

        if more_types_in_union_119974:
            # SSA join for if statement (line 3647)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3652)
    
    # Assigning a Call to a Name (line 3653):
    
    # Assigning a Call to a Name (line 3653):
    
    # Call to vlines(...): (line 3653)
    # Processing the call arguments (line 3653)
    # Getting the type of 'x' (line 3653)
    x_119987 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 24), 'x', False)
    # Getting the type of 'ymin' (line 3653)
    ymin_119988 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 27), 'ymin', False)
    # Getting the type of 'ymax' (line 3653)
    ymax_119989 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 33), 'ymax', False)
    # Processing the call keyword arguments (line 3653)
    # Getting the type of 'colors' (line 3653)
    colors_119990 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 46), 'colors', False)
    keyword_119991 = colors_119990
    # Getting the type of 'linestyles' (line 3653)
    linestyles_119992 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 65), 'linestyles', False)
    keyword_119993 = linestyles_119992
    # Getting the type of 'label' (line 3654)
    label_119994 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3654, 30), 'label', False)
    keyword_119995 = label_119994
    # Getting the type of 'data' (line 3654)
    data_119996 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3654, 42), 'data', False)
    keyword_119997 = data_119996
    # Getting the type of 'kwargs' (line 3654)
    kwargs_119998 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3654, 50), 'kwargs', False)
    kwargs_119999 = {'colors': keyword_119991, 'data': keyword_119997, 'kwargs_119998': kwargs_119998, 'linestyles': keyword_119993, 'label': keyword_119995}
    # Getting the type of 'ax' (line 3653)
    ax_119985 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3653, 14), 'ax', False)
    # Obtaining the member 'vlines' of a type (line 3653)
    vlines_119986 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3653, 14), ax_119985, 'vlines')
    # Calling vlines(args, kwargs) (line 3653)
    vlines_call_result_120000 = invoke(stypy.reporting.localization.Localization(__file__, 3653, 14), vlines_119986, *[x_119987, ymin_119988, ymax_119989], **kwargs_119999)
    
    # Assigning a type to the variable 'ret' (line 3653)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3653, 8), 'ret', vlines_call_result_120000)
    
    # finally branch of the try-finally block (line 3652)
    
    # Assigning a Name to a Attribute (line 3656):
    
    # Assigning a Name to a Attribute (line 3656):
    # Getting the type of 'washold' (line 3656)
    washold_120001 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3656, 19), 'washold')
    # Getting the type of 'ax' (line 3656)
    ax_120002 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3656, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3656)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3656, 8), ax_120002, '_hold', washold_120001)
    
    # Getting the type of 'ret' (line 3658)
    ret_120003 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3658, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3658)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3658, 4), 'stypy_return_type', ret_120003)
    
    # ################# End of 'vlines(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'vlines' in the type store
    # Getting the type of 'stypy_return_type' (line 3639)
    stypy_return_type_120004 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3639, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120004)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'vlines'
    return stypy_return_type_120004

# Assigning a type to the variable 'vlines' (line 3639)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3639, 0), 'vlines', vlines)

@norecursion
def xcorr(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 3663)
    True_120005 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3663, 23), 'True')
    # Getting the type of 'mlab' (line 3663)
    mlab_120006 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3663, 37), 'mlab')
    # Obtaining the member 'detrend_none' of a type (line 3663)
    detrend_none_120007 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3663, 37), mlab_120006, 'detrend_none')
    # Getting the type of 'True' (line 3663)
    True_120008 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3663, 66), 'True')
    int_120009 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3664, 18), 'int')
    # Getting the type of 'None' (line 3664)
    None_120010 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3664, 27), 'None')
    # Getting the type of 'None' (line 3664)
    None_120011 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3664, 38), 'None')
    defaults = [True_120005, detrend_none_120007, True_120008, int_120009, None_120010, None_120011]
    # Create a new context for function 'xcorr'
    module_type_store = module_type_store.open_function_context('xcorr', 3662, 0, False)
    
    # Passed parameters checking function
    xcorr.stypy_localization = localization
    xcorr.stypy_type_of_self = None
    xcorr.stypy_type_store = module_type_store
    xcorr.stypy_function_name = 'xcorr'
    xcorr.stypy_param_names_list = ['x', 'y', 'normed', 'detrend', 'usevlines', 'maxlags', 'hold', 'data']
    xcorr.stypy_varargs_param_name = None
    xcorr.stypy_kwargs_param_name = 'kwargs'
    xcorr.stypy_call_defaults = defaults
    xcorr.stypy_call_varargs = varargs
    xcorr.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'xcorr', ['x', 'y', 'normed', 'detrend', 'usevlines', 'maxlags', 'hold', 'data'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'xcorr', localization, ['x', 'y', 'normed', 'detrend', 'usevlines', 'maxlags', 'hold', 'data'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'xcorr(...)' code ##################

    
    # Assigning a Call to a Name (line 3665):
    
    # Assigning a Call to a Name (line 3665):
    
    # Call to gca(...): (line 3665)
    # Processing the call keyword arguments (line 3665)
    kwargs_120013 = {}
    # Getting the type of 'gca' (line 3665)
    gca_120012 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3665, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3665)
    gca_call_result_120014 = invoke(stypy.reporting.localization.Localization(__file__, 3665, 9), gca_120012, *[], **kwargs_120013)
    
    # Assigning a type to the variable 'ax' (line 3665)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3665, 4), 'ax', gca_call_result_120014)
    
    # Assigning a Attribute to a Name (line 3668):
    
    # Assigning a Attribute to a Name (line 3668):
    # Getting the type of 'ax' (line 3668)
    ax_120015 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3668, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3668)
    _hold_120016 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3668, 14), ax_120015, '_hold')
    # Assigning a type to the variable 'washold' (line 3668)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3668, 4), 'washold', _hold_120016)
    
    # Type idiom detected: calculating its left and rigth part (line 3670)
    # Getting the type of 'hold' (line 3670)
    hold_120017 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3670, 4), 'hold')
    # Getting the type of 'None' (line 3670)
    None_120018 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3670, 19), 'None')
    
    (may_be_120019, more_types_in_union_120020) = may_not_be_none(hold_120017, None_120018)

    if may_be_120019:

        if more_types_in_union_120020:
            # Runtime conditional SSA (line 3670)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3671):
        
        # Assigning a Name to a Attribute (line 3671):
        # Getting the type of 'hold' (line 3671)
        hold_120021 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3671, 19), 'hold')
        # Getting the type of 'ax' (line 3671)
        ax_120022 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3671, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3671)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3671, 8), ax_120022, '_hold', hold_120021)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3672, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3672)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_120023 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3672, 8), 'matplotlib.cbook')

        if (type(import_120023) is not StypyTypeError):

            if (import_120023 != 'pyd_module'):
                __import__(import_120023)
                sys_modules_120024 = sys.modules[import_120023]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3672, 8), 'matplotlib.cbook', sys_modules_120024.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3672, 8), __file__, sys_modules_120024, sys_modules_120024.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3672, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3672)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3672, 8), 'matplotlib.cbook', import_120023)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3673)
        # Processing the call arguments (line 3673)
        unicode_120027 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3673, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3674)
        mplDeprecation_120028 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3674, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3673)
        kwargs_120029 = {}
        # Getting the type of 'warnings' (line 3673)
        warnings_120025 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3673, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3673)
        warn_120026 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3673, 8), warnings_120025, 'warn')
        # Calling warn(args, kwargs) (line 3673)
        warn_call_result_120030 = invoke(stypy.reporting.localization.Localization(__file__, 3673, 8), warn_120026, *[unicode_120027, mplDeprecation_120028], **kwargs_120029)
        

        if more_types_in_union_120020:
            # SSA join for if statement (line 3670)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3675)
    
    # Assigning a Call to a Name (line 3676):
    
    # Assigning a Call to a Name (line 3676):
    
    # Call to xcorr(...): (line 3676)
    # Processing the call arguments (line 3676)
    # Getting the type of 'x' (line 3676)
    x_120033 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 23), 'x', False)
    # Getting the type of 'y' (line 3676)
    y_120034 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 26), 'y', False)
    # Processing the call keyword arguments (line 3676)
    # Getting the type of 'normed' (line 3676)
    normed_120035 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 36), 'normed', False)
    keyword_120036 = normed_120035
    # Getting the type of 'detrend' (line 3676)
    detrend_120037 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 52), 'detrend', False)
    keyword_120038 = detrend_120037
    # Getting the type of 'usevlines' (line 3677)
    usevlines_120039 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3677, 33), 'usevlines', False)
    keyword_120040 = usevlines_120039
    # Getting the type of 'maxlags' (line 3677)
    maxlags_120041 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3677, 52), 'maxlags', False)
    keyword_120042 = maxlags_120041
    # Getting the type of 'data' (line 3677)
    data_120043 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3677, 66), 'data', False)
    keyword_120044 = data_120043
    # Getting the type of 'kwargs' (line 3678)
    kwargs_120045 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3678, 25), 'kwargs', False)
    kwargs_120046 = {'normed': keyword_120036, 'usevlines': keyword_120040, 'detrend': keyword_120038, 'maxlags': keyword_120042, 'kwargs_120045': kwargs_120045, 'data': keyword_120044}
    # Getting the type of 'ax' (line 3676)
    ax_120031 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3676, 14), 'ax', False)
    # Obtaining the member 'xcorr' of a type (line 3676)
    xcorr_120032 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3676, 14), ax_120031, 'xcorr')
    # Calling xcorr(args, kwargs) (line 3676)
    xcorr_call_result_120047 = invoke(stypy.reporting.localization.Localization(__file__, 3676, 14), xcorr_120032, *[x_120033, y_120034], **kwargs_120046)
    
    # Assigning a type to the variable 'ret' (line 3676)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3676, 8), 'ret', xcorr_call_result_120047)
    
    # finally branch of the try-finally block (line 3675)
    
    # Assigning a Name to a Attribute (line 3680):
    
    # Assigning a Name to a Attribute (line 3680):
    # Getting the type of 'washold' (line 3680)
    washold_120048 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3680, 19), 'washold')
    # Getting the type of 'ax' (line 3680)
    ax_120049 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3680, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3680)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3680, 8), ax_120049, '_hold', washold_120048)
    
    # Getting the type of 'ret' (line 3682)
    ret_120050 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3682, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3682)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3682, 4), 'stypy_return_type', ret_120050)
    
    # ################# End of 'xcorr(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'xcorr' in the type store
    # Getting the type of 'stypy_return_type' (line 3662)
    stypy_return_type_120051 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3662, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120051)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'xcorr'
    return stypy_return_type_120051

# Assigning a type to the variable 'xcorr' (line 3662)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3662, 0), 'xcorr', xcorr)

@norecursion
def barbs(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'barbs'
    module_type_store = module_type_store.open_function_context('barbs', 3686, 0, False)
    
    # Passed parameters checking function
    barbs.stypy_localization = localization
    barbs.stypy_type_of_self = None
    barbs.stypy_type_store = module_type_store
    barbs.stypy_function_name = 'barbs'
    barbs.stypy_param_names_list = []
    barbs.stypy_varargs_param_name = 'args'
    barbs.stypy_kwargs_param_name = 'kw'
    barbs.stypy_call_defaults = defaults
    barbs.stypy_call_varargs = varargs
    barbs.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'barbs', [], 'args', 'kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'barbs', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'barbs(...)' code ##################

    
    # Assigning a Call to a Name (line 3688):
    
    # Assigning a Call to a Name (line 3688):
    
    # Call to gca(...): (line 3688)
    # Processing the call keyword arguments (line 3688)
    kwargs_120053 = {}
    # Getting the type of 'gca' (line 3688)
    gca_120052 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3688, 9), 'gca', False)
    # Calling gca(args, kwargs) (line 3688)
    gca_call_result_120054 = invoke(stypy.reporting.localization.Localization(__file__, 3688, 9), gca_120052, *[], **kwargs_120053)
    
    # Assigning a type to the variable 'ax' (line 3688)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3688, 4), 'ax', gca_call_result_120054)
    
    # Assigning a Attribute to a Name (line 3691):
    
    # Assigning a Attribute to a Name (line 3691):
    # Getting the type of 'ax' (line 3691)
    ax_120055 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3691, 14), 'ax')
    # Obtaining the member '_hold' of a type (line 3691)
    _hold_120056 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3691, 14), ax_120055, '_hold')
    # Assigning a type to the variable 'washold' (line 3691)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3691, 4), 'washold', _hold_120056)
    
    # Assigning a Call to a Name (line 3692):
    
    # Assigning a Call to a Name (line 3692):
    
    # Call to pop(...): (line 3692)
    # Processing the call arguments (line 3692)
    unicode_120059 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3692, 18), 'unicode', u'hold')
    # Getting the type of 'None' (line 3692)
    None_120060 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3692, 26), 'None', False)
    # Processing the call keyword arguments (line 3692)
    kwargs_120061 = {}
    # Getting the type of 'kw' (line 3692)
    kw_120057 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3692, 11), 'kw', False)
    # Obtaining the member 'pop' of a type (line 3692)
    pop_120058 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3692, 11), kw_120057, 'pop')
    # Calling pop(args, kwargs) (line 3692)
    pop_call_result_120062 = invoke(stypy.reporting.localization.Localization(__file__, 3692, 11), pop_120058, *[unicode_120059, None_120060], **kwargs_120061)
    
    # Assigning a type to the variable 'hold' (line 3692)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3692, 4), 'hold', pop_call_result_120062)
    
    # Type idiom detected: calculating its left and rigth part (line 3693)
    # Getting the type of 'hold' (line 3693)
    hold_120063 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3693, 4), 'hold')
    # Getting the type of 'None' (line 3693)
    None_120064 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3693, 19), 'None')
    
    (may_be_120065, more_types_in_union_120066) = may_not_be_none(hold_120063, None_120064)

    if may_be_120065:

        if more_types_in_union_120066:
            # Runtime conditional SSA (line 3693)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Assigning a Name to a Attribute (line 3694):
        
        # Assigning a Name to a Attribute (line 3694):
        # Getting the type of 'hold' (line 3694)
        hold_120067 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3694, 19), 'hold')
        # Getting the type of 'ax' (line 3694)
        ax_120068 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3694, 8), 'ax')
        # Setting the type of the member '_hold' of a type (line 3694)
        module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3694, 8), ax_120068, '_hold', hold_120067)
        stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 3695, 8))
        
        # 'from matplotlib.cbook import mplDeprecation' statement (line 3695)
        update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
        import_120069 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 3695, 8), 'matplotlib.cbook')

        if (type(import_120069) is not StypyTypeError):

            if (import_120069 != 'pyd_module'):
                __import__(import_120069)
                sys_modules_120070 = sys.modules[import_120069]
                import_from_module(stypy.reporting.localization.Localization(__file__, 3695, 8), 'matplotlib.cbook', sys_modules_120070.module_type_store, module_type_store, ['mplDeprecation'])
                nest_module(stypy.reporting.localization.Localization(__file__, 3695, 8), __file__, sys_modules_120070, sys_modules_120070.module_type_store, module_type_store)
            else:
                from matplotlib.cbook import mplDeprecation

                import_from_module(stypy.reporting.localization.Localization(__file__, 3695, 8), 'matplotlib.cbook', None, module_type_store, ['mplDeprecation'], [mplDeprecation])

        else:
            # Assigning a type to the variable 'matplotlib.cbook' (line 3695)
            module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3695, 8), 'matplotlib.cbook', import_120069)

        remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
        
        
        # Call to warn(...): (line 3696)
        # Processing the call arguments (line 3696)
        unicode_120073 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3696, 22), 'unicode', u"The 'hold' keyword argument is deprecated since 2.0.")
        # Getting the type of 'mplDeprecation' (line 3697)
        mplDeprecation_120074 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3697, 22), 'mplDeprecation', False)
        # Processing the call keyword arguments (line 3696)
        kwargs_120075 = {}
        # Getting the type of 'warnings' (line 3696)
        warnings_120071 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3696, 8), 'warnings', False)
        # Obtaining the member 'warn' of a type (line 3696)
        warn_120072 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3696, 8), warnings_120071, 'warn')
        # Calling warn(args, kwargs) (line 3696)
        warn_call_result_120076 = invoke(stypy.reporting.localization.Localization(__file__, 3696, 8), warn_120072, *[unicode_120073, mplDeprecation_120074], **kwargs_120075)
        

        if more_types_in_union_120066:
            # SSA join for if statement (line 3693)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # Try-finally block (line 3698)
    
    # Assigning a Call to a Name (line 3699):
    
    # Assigning a Call to a Name (line 3699):
    
    # Call to barbs(...): (line 3699)
    # Getting the type of 'args' (line 3699)
    args_120079 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3699, 24), 'args', False)
    # Processing the call keyword arguments (line 3699)
    # Getting the type of 'kw' (line 3699)
    kw_120080 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3699, 32), 'kw', False)
    kwargs_120081 = {'kw_120080': kw_120080}
    # Getting the type of 'ax' (line 3699)
    ax_120077 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3699, 14), 'ax', False)
    # Obtaining the member 'barbs' of a type (line 3699)
    barbs_120078 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3699, 14), ax_120077, 'barbs')
    # Calling barbs(args, kwargs) (line 3699)
    barbs_call_result_120082 = invoke(stypy.reporting.localization.Localization(__file__, 3699, 14), barbs_120078, *[args_120079], **kwargs_120081)
    
    # Assigning a type to the variable 'ret' (line 3699)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3699, 8), 'ret', barbs_call_result_120082)
    
    # finally branch of the try-finally block (line 3698)
    
    # Assigning a Name to a Attribute (line 3701):
    
    # Assigning a Name to a Attribute (line 3701):
    # Getting the type of 'washold' (line 3701)
    washold_120083 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3701, 19), 'washold')
    # Getting the type of 'ax' (line 3701)
    ax_120084 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3701, 8), 'ax')
    # Setting the type of the member '_hold' of a type (line 3701)
    module_type_store.set_type_of_member(stypy.reporting.localization.Localization(__file__, 3701, 8), ax_120084, '_hold', washold_120083)
    
    # Getting the type of 'ret' (line 3703)
    ret_120085 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3703, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3703)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3703, 4), 'stypy_return_type', ret_120085)
    
    # ################# End of 'barbs(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'barbs' in the type store
    # Getting the type of 'stypy_return_type' (line 3686)
    stypy_return_type_120086 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3686, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120086)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'barbs'
    return stypy_return_type_120086

# Assigning a type to the variable 'barbs' (line 3686)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3686, 0), 'barbs', barbs)

@norecursion
def cla(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'cla'
    module_type_store = module_type_store.open_function_context('cla', 3707, 0, False)
    
    # Passed parameters checking function
    cla.stypy_localization = localization
    cla.stypy_type_of_self = None
    cla.stypy_type_store = module_type_store
    cla.stypy_function_name = 'cla'
    cla.stypy_param_names_list = []
    cla.stypy_varargs_param_name = None
    cla.stypy_kwargs_param_name = None
    cla.stypy_call_defaults = defaults
    cla.stypy_call_varargs = varargs
    cla.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cla', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cla', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cla(...)' code ##################

    
    # Assigning a Call to a Name (line 3709):
    
    # Assigning a Call to a Name (line 3709):
    
    # Call to cla(...): (line 3709)
    # Processing the call keyword arguments (line 3709)
    kwargs_120091 = {}
    
    # Call to gca(...): (line 3709)
    # Processing the call keyword arguments (line 3709)
    kwargs_120088 = {}
    # Getting the type of 'gca' (line 3709)
    gca_120087 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3709, 10), 'gca', False)
    # Calling gca(args, kwargs) (line 3709)
    gca_call_result_120089 = invoke(stypy.reporting.localization.Localization(__file__, 3709, 10), gca_120087, *[], **kwargs_120088)
    
    # Obtaining the member 'cla' of a type (line 3709)
    cla_120090 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3709, 10), gca_call_result_120089, 'cla')
    # Calling cla(args, kwargs) (line 3709)
    cla_call_result_120092 = invoke(stypy.reporting.localization.Localization(__file__, 3709, 10), cla_120090, *[], **kwargs_120091)
    
    # Assigning a type to the variable 'ret' (line 3709)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3709, 4), 'ret', cla_call_result_120092)
    # Getting the type of 'ret' (line 3710)
    ret_120093 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3710, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3710)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3710, 4), 'stypy_return_type', ret_120093)
    
    # ################# End of 'cla(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cla' in the type store
    # Getting the type of 'stypy_return_type' (line 3707)
    stypy_return_type_120094 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3707, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120094)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cla'
    return stypy_return_type_120094

# Assigning a type to the variable 'cla' (line 3707)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3707, 0), 'cla', cla)

@norecursion
def grid(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3715)
    None_120095 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3715, 11), 'None')
    unicode_120096 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3715, 23), 'unicode', u'major')
    unicode_120097 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3715, 37), 'unicode', u'both')
    defaults = [None_120095, unicode_120096, unicode_120097]
    # Create a new context for function 'grid'
    module_type_store = module_type_store.open_function_context('grid', 3714, 0, False)
    
    # Passed parameters checking function
    grid.stypy_localization = localization
    grid.stypy_type_of_self = None
    grid.stypy_type_store = module_type_store
    grid.stypy_function_name = 'grid'
    grid.stypy_param_names_list = ['b', 'which', 'axis']
    grid.stypy_varargs_param_name = None
    grid.stypy_kwargs_param_name = 'kwargs'
    grid.stypy_call_defaults = defaults
    grid.stypy_call_varargs = varargs
    grid.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'grid', ['b', 'which', 'axis'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'grid', localization, ['b', 'which', 'axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'grid(...)' code ##################

    
    # Assigning a Call to a Name (line 3716):
    
    # Assigning a Call to a Name (line 3716):
    
    # Call to grid(...): (line 3716)
    # Processing the call keyword arguments (line 3716)
    # Getting the type of 'b' (line 3716)
    b_120102 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 23), 'b', False)
    keyword_120103 = b_120102
    # Getting the type of 'which' (line 3716)
    which_120104 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 32), 'which', False)
    keyword_120105 = which_120104
    # Getting the type of 'axis' (line 3716)
    axis_120106 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 44), 'axis', False)
    keyword_120107 = axis_120106
    # Getting the type of 'kwargs' (line 3716)
    kwargs_120108 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 52), 'kwargs', False)
    kwargs_120109 = {'kwargs_120108': kwargs_120108, 'b': keyword_120103, 'which': keyword_120105, 'axis': keyword_120107}
    
    # Call to gca(...): (line 3716)
    # Processing the call keyword arguments (line 3716)
    kwargs_120099 = {}
    # Getting the type of 'gca' (line 3716)
    gca_120098 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3716, 10), 'gca', False)
    # Calling gca(args, kwargs) (line 3716)
    gca_call_result_120100 = invoke(stypy.reporting.localization.Localization(__file__, 3716, 10), gca_120098, *[], **kwargs_120099)
    
    # Obtaining the member 'grid' of a type (line 3716)
    grid_120101 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3716, 10), gca_call_result_120100, 'grid')
    # Calling grid(args, kwargs) (line 3716)
    grid_call_result_120110 = invoke(stypy.reporting.localization.Localization(__file__, 3716, 10), grid_120101, *[], **kwargs_120109)
    
    # Assigning a type to the variable 'ret' (line 3716)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3716, 4), 'ret', grid_call_result_120110)
    # Getting the type of 'ret' (line 3717)
    ret_120111 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3717, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3717)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3717, 4), 'stypy_return_type', ret_120111)
    
    # ################# End of 'grid(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'grid' in the type store
    # Getting the type of 'stypy_return_type' (line 3714)
    stypy_return_type_120112 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3714, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120112)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'grid'
    return stypy_return_type_120112

# Assigning a type to the variable 'grid' (line 3714)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3714, 0), 'grid', grid)

@norecursion
def legend(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'legend'
    module_type_store = module_type_store.open_function_context('legend', 3721, 0, False)
    
    # Passed parameters checking function
    legend.stypy_localization = localization
    legend.stypy_type_of_self = None
    legend.stypy_type_store = module_type_store
    legend.stypy_function_name = 'legend'
    legend.stypy_param_names_list = []
    legend.stypy_varargs_param_name = 'args'
    legend.stypy_kwargs_param_name = 'kwargs'
    legend.stypy_call_defaults = defaults
    legend.stypy_call_varargs = varargs
    legend.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'legend', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'legend', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'legend(...)' code ##################

    
    # Assigning a Call to a Name (line 3723):
    
    # Assigning a Call to a Name (line 3723):
    
    # Call to legend(...): (line 3723)
    # Getting the type of 'args' (line 3723)
    args_120117 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3723, 24), 'args', False)
    # Processing the call keyword arguments (line 3723)
    # Getting the type of 'kwargs' (line 3723)
    kwargs_120118 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3723, 32), 'kwargs', False)
    kwargs_120119 = {'kwargs_120118': kwargs_120118}
    
    # Call to gca(...): (line 3723)
    # Processing the call keyword arguments (line 3723)
    kwargs_120114 = {}
    # Getting the type of 'gca' (line 3723)
    gca_120113 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3723, 10), 'gca', False)
    # Calling gca(args, kwargs) (line 3723)
    gca_call_result_120115 = invoke(stypy.reporting.localization.Localization(__file__, 3723, 10), gca_120113, *[], **kwargs_120114)
    
    # Obtaining the member 'legend' of a type (line 3723)
    legend_120116 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3723, 10), gca_call_result_120115, 'legend')
    # Calling legend(args, kwargs) (line 3723)
    legend_call_result_120120 = invoke(stypy.reporting.localization.Localization(__file__, 3723, 10), legend_120116, *[args_120117], **kwargs_120119)
    
    # Assigning a type to the variable 'ret' (line 3723)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3723, 4), 'ret', legend_call_result_120120)
    # Getting the type of 'ret' (line 3724)
    ret_120121 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3724, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3724)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3724, 4), 'stypy_return_type', ret_120121)
    
    # ################# End of 'legend(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'legend' in the type store
    # Getting the type of 'stypy_return_type' (line 3721)
    stypy_return_type_120122 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3721, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120122)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'legend'
    return stypy_return_type_120122

# Assigning a type to the variable 'legend' (line 3721)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3721, 0), 'legend', legend)

@norecursion
def table(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'table'
    module_type_store = module_type_store.open_function_context('table', 3728, 0, False)
    
    # Passed parameters checking function
    table.stypy_localization = localization
    table.stypy_type_of_self = None
    table.stypy_type_store = module_type_store
    table.stypy_function_name = 'table'
    table.stypy_param_names_list = []
    table.stypy_varargs_param_name = None
    table.stypy_kwargs_param_name = 'kwargs'
    table.stypy_call_defaults = defaults
    table.stypy_call_varargs = varargs
    table.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'table', [], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'table', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'table(...)' code ##################

    
    # Assigning a Call to a Name (line 3730):
    
    # Assigning a Call to a Name (line 3730):
    
    # Call to table(...): (line 3730)
    # Processing the call keyword arguments (line 3730)
    # Getting the type of 'kwargs' (line 3730)
    kwargs_120127 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 24), 'kwargs', False)
    kwargs_120128 = {'kwargs_120127': kwargs_120127}
    
    # Call to gca(...): (line 3730)
    # Processing the call keyword arguments (line 3730)
    kwargs_120124 = {}
    # Getting the type of 'gca' (line 3730)
    gca_120123 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3730, 10), 'gca', False)
    # Calling gca(args, kwargs) (line 3730)
    gca_call_result_120125 = invoke(stypy.reporting.localization.Localization(__file__, 3730, 10), gca_120123, *[], **kwargs_120124)
    
    # Obtaining the member 'table' of a type (line 3730)
    table_120126 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3730, 10), gca_call_result_120125, 'table')
    # Calling table(args, kwargs) (line 3730)
    table_call_result_120129 = invoke(stypy.reporting.localization.Localization(__file__, 3730, 10), table_120126, *[], **kwargs_120128)
    
    # Assigning a type to the variable 'ret' (line 3730)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3730, 4), 'ret', table_call_result_120129)
    # Getting the type of 'ret' (line 3731)
    ret_120130 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3731, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3731)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3731, 4), 'stypy_return_type', ret_120130)
    
    # ################# End of 'table(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'table' in the type store
    # Getting the type of 'stypy_return_type' (line 3728)
    stypy_return_type_120131 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3728, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120131)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'table'
    return stypy_return_type_120131

# Assigning a type to the variable 'table' (line 3728)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3728, 0), 'table', table)

@norecursion
def text(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'None' (line 3736)
    None_120132 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3736, 27), 'None')
    # Getting the type of 'False' (line 3736)
    False_120133 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3736, 42), 'False')
    defaults = [None_120132, False_120133]
    # Create a new context for function 'text'
    module_type_store = module_type_store.open_function_context('text', 3735, 0, False)
    
    # Passed parameters checking function
    text.stypy_localization = localization
    text.stypy_type_of_self = None
    text.stypy_type_store = module_type_store
    text.stypy_function_name = 'text'
    text.stypy_param_names_list = ['x', 'y', 's', 'fontdict', 'withdash']
    text.stypy_varargs_param_name = None
    text.stypy_kwargs_param_name = 'kwargs'
    text.stypy_call_defaults = defaults
    text.stypy_call_varargs = varargs
    text.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'text', ['x', 'y', 's', 'fontdict', 'withdash'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'text', localization, ['x', 'y', 's', 'fontdict', 'withdash'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'text(...)' code ##################

    
    # Assigning a Call to a Name (line 3737):
    
    # Assigning a Call to a Name (line 3737):
    
    # Call to text(...): (line 3737)
    # Processing the call arguments (line 3737)
    # Getting the type of 'x' (line 3737)
    x_120138 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3737, 21), 'x', False)
    # Getting the type of 'y' (line 3737)
    y_120139 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3737, 24), 'y', False)
    # Getting the type of 's' (line 3737)
    s_120140 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3737, 27), 's', False)
    # Processing the call keyword arguments (line 3737)
    # Getting the type of 'fontdict' (line 3737)
    fontdict_120141 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3737, 39), 'fontdict', False)
    keyword_120142 = fontdict_120141
    # Getting the type of 'withdash' (line 3737)
    withdash_120143 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3737, 58), 'withdash', False)
    keyword_120144 = withdash_120143
    # Getting the type of 'kwargs' (line 3737)
    kwargs_120145 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3737, 70), 'kwargs', False)
    kwargs_120146 = {'kwargs_120145': kwargs_120145, 'fontdict': keyword_120142, 'withdash': keyword_120144}
    
    # Call to gca(...): (line 3737)
    # Processing the call keyword arguments (line 3737)
    kwargs_120135 = {}
    # Getting the type of 'gca' (line 3737)
    gca_120134 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3737, 10), 'gca', False)
    # Calling gca(args, kwargs) (line 3737)
    gca_call_result_120136 = invoke(stypy.reporting.localization.Localization(__file__, 3737, 10), gca_120134, *[], **kwargs_120135)
    
    # Obtaining the member 'text' of a type (line 3737)
    text_120137 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3737, 10), gca_call_result_120136, 'text')
    # Calling text(args, kwargs) (line 3737)
    text_call_result_120147 = invoke(stypy.reporting.localization.Localization(__file__, 3737, 10), text_120137, *[x_120138, y_120139, s_120140], **kwargs_120146)
    
    # Assigning a type to the variable 'ret' (line 3737)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3737, 4), 'ret', text_call_result_120147)
    # Getting the type of 'ret' (line 3738)
    ret_120148 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3738, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3738)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3738, 4), 'stypy_return_type', ret_120148)
    
    # ################# End of 'text(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'text' in the type store
    # Getting the type of 'stypy_return_type' (line 3735)
    stypy_return_type_120149 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3735, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120149)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'text'
    return stypy_return_type_120149

# Assigning a type to the variable 'text' (line 3735)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3735, 0), 'text', text)

@norecursion
def annotate(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'annotate'
    module_type_store = module_type_store.open_function_context('annotate', 3742, 0, False)
    
    # Passed parameters checking function
    annotate.stypy_localization = localization
    annotate.stypy_type_of_self = None
    annotate.stypy_type_store = module_type_store
    annotate.stypy_function_name = 'annotate'
    annotate.stypy_param_names_list = []
    annotate.stypy_varargs_param_name = 'args'
    annotate.stypy_kwargs_param_name = 'kwargs'
    annotate.stypy_call_defaults = defaults
    annotate.stypy_call_varargs = varargs
    annotate.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'annotate', [], 'args', 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'annotate', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'annotate(...)' code ##################

    
    # Assigning a Call to a Name (line 3744):
    
    # Assigning a Call to a Name (line 3744):
    
    # Call to annotate(...): (line 3744)
    # Getting the type of 'args' (line 3744)
    args_120154 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3744, 26), 'args', False)
    # Processing the call keyword arguments (line 3744)
    # Getting the type of 'kwargs' (line 3744)
    kwargs_120155 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3744, 34), 'kwargs', False)
    kwargs_120156 = {'kwargs_120155': kwargs_120155}
    
    # Call to gca(...): (line 3744)
    # Processing the call keyword arguments (line 3744)
    kwargs_120151 = {}
    # Getting the type of 'gca' (line 3744)
    gca_120150 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3744, 10), 'gca', False)
    # Calling gca(args, kwargs) (line 3744)
    gca_call_result_120152 = invoke(stypy.reporting.localization.Localization(__file__, 3744, 10), gca_120150, *[], **kwargs_120151)
    
    # Obtaining the member 'annotate' of a type (line 3744)
    annotate_120153 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3744, 10), gca_call_result_120152, 'annotate')
    # Calling annotate(args, kwargs) (line 3744)
    annotate_call_result_120157 = invoke(stypy.reporting.localization.Localization(__file__, 3744, 10), annotate_120153, *[args_120154], **kwargs_120156)
    
    # Assigning a type to the variable 'ret' (line 3744)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3744, 4), 'ret', annotate_call_result_120157)
    # Getting the type of 'ret' (line 3745)
    ret_120158 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3745, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3745)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3745, 4), 'stypy_return_type', ret_120158)
    
    # ################# End of 'annotate(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'annotate' in the type store
    # Getting the type of 'stypy_return_type' (line 3742)
    stypy_return_type_120159 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3742, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120159)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'annotate'
    return stypy_return_type_120159

# Assigning a type to the variable 'annotate' (line 3742)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3742, 0), 'annotate', annotate)

@norecursion
def ticklabel_format(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'ticklabel_format'
    module_type_store = module_type_store.open_function_context('ticklabel_format', 3749, 0, False)
    
    # Passed parameters checking function
    ticklabel_format.stypy_localization = localization
    ticklabel_format.stypy_type_of_self = None
    ticklabel_format.stypy_type_store = module_type_store
    ticklabel_format.stypy_function_name = 'ticklabel_format'
    ticklabel_format.stypy_param_names_list = []
    ticklabel_format.stypy_varargs_param_name = None
    ticklabel_format.stypy_kwargs_param_name = 'kwargs'
    ticklabel_format.stypy_call_defaults = defaults
    ticklabel_format.stypy_call_varargs = varargs
    ticklabel_format.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'ticklabel_format', [], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'ticklabel_format', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'ticklabel_format(...)' code ##################

    
    # Assigning a Call to a Name (line 3751):
    
    # Assigning a Call to a Name (line 3751):
    
    # Call to ticklabel_format(...): (line 3751)
    # Processing the call keyword arguments (line 3751)
    # Getting the type of 'kwargs' (line 3751)
    kwargs_120164 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3751, 35), 'kwargs', False)
    kwargs_120165 = {'kwargs_120164': kwargs_120164}
    
    # Call to gca(...): (line 3751)
    # Processing the call keyword arguments (line 3751)
    kwargs_120161 = {}
    # Getting the type of 'gca' (line 3751)
    gca_120160 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3751, 10), 'gca', False)
    # Calling gca(args, kwargs) (line 3751)
    gca_call_result_120162 = invoke(stypy.reporting.localization.Localization(__file__, 3751, 10), gca_120160, *[], **kwargs_120161)
    
    # Obtaining the member 'ticklabel_format' of a type (line 3751)
    ticklabel_format_120163 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3751, 10), gca_call_result_120162, 'ticklabel_format')
    # Calling ticklabel_format(args, kwargs) (line 3751)
    ticklabel_format_call_result_120166 = invoke(stypy.reporting.localization.Localization(__file__, 3751, 10), ticklabel_format_120163, *[], **kwargs_120165)
    
    # Assigning a type to the variable 'ret' (line 3751)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3751, 4), 'ret', ticklabel_format_call_result_120166)
    # Getting the type of 'ret' (line 3752)
    ret_120167 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3752, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3752)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3752, 4), 'stypy_return_type', ret_120167)
    
    # ################# End of 'ticklabel_format(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'ticklabel_format' in the type store
    # Getting the type of 'stypy_return_type' (line 3749)
    stypy_return_type_120168 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3749, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120168)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'ticklabel_format'
    return stypy_return_type_120168

# Assigning a type to the variable 'ticklabel_format' (line 3749)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3749, 0), 'ticklabel_format', ticklabel_format)

@norecursion
def locator_params(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_120169 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3757, 24), 'unicode', u'both')
    # Getting the type of 'None' (line 3757)
    None_120170 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3757, 38), 'None')
    defaults = [unicode_120169, None_120170]
    # Create a new context for function 'locator_params'
    module_type_store = module_type_store.open_function_context('locator_params', 3756, 0, False)
    
    # Passed parameters checking function
    locator_params.stypy_localization = localization
    locator_params.stypy_type_of_self = None
    locator_params.stypy_type_store = module_type_store
    locator_params.stypy_function_name = 'locator_params'
    locator_params.stypy_param_names_list = ['axis', 'tight']
    locator_params.stypy_varargs_param_name = None
    locator_params.stypy_kwargs_param_name = 'kwargs'
    locator_params.stypy_call_defaults = defaults
    locator_params.stypy_call_varargs = varargs
    locator_params.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'locator_params', ['axis', 'tight'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'locator_params', localization, ['axis', 'tight'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'locator_params(...)' code ##################

    
    # Assigning a Call to a Name (line 3758):
    
    # Assigning a Call to a Name (line 3758):
    
    # Call to locator_params(...): (line 3758)
    # Processing the call keyword arguments (line 3758)
    # Getting the type of 'axis' (line 3758)
    axis_120175 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3758, 36), 'axis', False)
    keyword_120176 = axis_120175
    # Getting the type of 'tight' (line 3758)
    tight_120177 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3758, 48), 'tight', False)
    keyword_120178 = tight_120177
    # Getting the type of 'kwargs' (line 3758)
    kwargs_120179 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3758, 57), 'kwargs', False)
    kwargs_120180 = {'tight': keyword_120178, 'kwargs_120179': kwargs_120179, 'axis': keyword_120176}
    
    # Call to gca(...): (line 3758)
    # Processing the call keyword arguments (line 3758)
    kwargs_120172 = {}
    # Getting the type of 'gca' (line 3758)
    gca_120171 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3758, 10), 'gca', False)
    # Calling gca(args, kwargs) (line 3758)
    gca_call_result_120173 = invoke(stypy.reporting.localization.Localization(__file__, 3758, 10), gca_120171, *[], **kwargs_120172)
    
    # Obtaining the member 'locator_params' of a type (line 3758)
    locator_params_120174 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3758, 10), gca_call_result_120173, 'locator_params')
    # Calling locator_params(args, kwargs) (line 3758)
    locator_params_call_result_120181 = invoke(stypy.reporting.localization.Localization(__file__, 3758, 10), locator_params_120174, *[], **kwargs_120180)
    
    # Assigning a type to the variable 'ret' (line 3758)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3758, 4), 'ret', locator_params_call_result_120181)
    # Getting the type of 'ret' (line 3759)
    ret_120182 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3759, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3759)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3759, 4), 'stypy_return_type', ret_120182)
    
    # ################# End of 'locator_params(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'locator_params' in the type store
    # Getting the type of 'stypy_return_type' (line 3756)
    stypy_return_type_120183 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3756, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120183)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'locator_params'
    return stypy_return_type_120183

# Assigning a type to the variable 'locator_params' (line 3756)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3756, 0), 'locator_params', locator_params)

@norecursion
def tick_params(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    unicode_120184 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3764, 21), 'unicode', u'both')
    defaults = [unicode_120184]
    # Create a new context for function 'tick_params'
    module_type_store = module_type_store.open_function_context('tick_params', 3763, 0, False)
    
    # Passed parameters checking function
    tick_params.stypy_localization = localization
    tick_params.stypy_type_of_self = None
    tick_params.stypy_type_store = module_type_store
    tick_params.stypy_function_name = 'tick_params'
    tick_params.stypy_param_names_list = ['axis']
    tick_params.stypy_varargs_param_name = None
    tick_params.stypy_kwargs_param_name = 'kwargs'
    tick_params.stypy_call_defaults = defaults
    tick_params.stypy_call_varargs = varargs
    tick_params.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'tick_params', ['axis'], None, 'kwargs', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'tick_params', localization, ['axis'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'tick_params(...)' code ##################

    
    # Assigning a Call to a Name (line 3765):
    
    # Assigning a Call to a Name (line 3765):
    
    # Call to tick_params(...): (line 3765)
    # Processing the call keyword arguments (line 3765)
    # Getting the type of 'axis' (line 3765)
    axis_120189 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3765, 33), 'axis', False)
    keyword_120190 = axis_120189
    # Getting the type of 'kwargs' (line 3765)
    kwargs_120191 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3765, 41), 'kwargs', False)
    kwargs_120192 = {'kwargs_120191': kwargs_120191, 'axis': keyword_120190}
    
    # Call to gca(...): (line 3765)
    # Processing the call keyword arguments (line 3765)
    kwargs_120186 = {}
    # Getting the type of 'gca' (line 3765)
    gca_120185 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3765, 10), 'gca', False)
    # Calling gca(args, kwargs) (line 3765)
    gca_call_result_120187 = invoke(stypy.reporting.localization.Localization(__file__, 3765, 10), gca_120185, *[], **kwargs_120186)
    
    # Obtaining the member 'tick_params' of a type (line 3765)
    tick_params_120188 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3765, 10), gca_call_result_120187, 'tick_params')
    # Calling tick_params(args, kwargs) (line 3765)
    tick_params_call_result_120193 = invoke(stypy.reporting.localization.Localization(__file__, 3765, 10), tick_params_120188, *[], **kwargs_120192)
    
    # Assigning a type to the variable 'ret' (line 3765)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3765, 4), 'ret', tick_params_call_result_120193)
    # Getting the type of 'ret' (line 3766)
    ret_120194 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3766, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3766)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3766, 4), 'stypy_return_type', ret_120194)
    
    # ################# End of 'tick_params(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'tick_params' in the type store
    # Getting the type of 'stypy_return_type' (line 3763)
    stypy_return_type_120195 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3763, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120195)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'tick_params'
    return stypy_return_type_120195

# Assigning a type to the variable 'tick_params' (line 3763)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3763, 0), 'tick_params', tick_params)

@norecursion
def margins(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'margins'
    module_type_store = module_type_store.open_function_context('margins', 3770, 0, False)
    
    # Passed parameters checking function
    margins.stypy_localization = localization
    margins.stypy_type_of_self = None
    margins.stypy_type_store = module_type_store
    margins.stypy_function_name = 'margins'
    margins.stypy_param_names_list = []
    margins.stypy_varargs_param_name = 'args'
    margins.stypy_kwargs_param_name = 'kw'
    margins.stypy_call_defaults = defaults
    margins.stypy_call_varargs = varargs
    margins.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'margins', [], 'args', 'kw', defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'margins', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'margins(...)' code ##################

    
    # Assigning a Call to a Name (line 3772):
    
    # Assigning a Call to a Name (line 3772):
    
    # Call to margins(...): (line 3772)
    # Getting the type of 'args' (line 3772)
    args_120200 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3772, 25), 'args', False)
    # Processing the call keyword arguments (line 3772)
    # Getting the type of 'kw' (line 3772)
    kw_120201 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3772, 33), 'kw', False)
    kwargs_120202 = {'kw_120201': kw_120201}
    
    # Call to gca(...): (line 3772)
    # Processing the call keyword arguments (line 3772)
    kwargs_120197 = {}
    # Getting the type of 'gca' (line 3772)
    gca_120196 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3772, 10), 'gca', False)
    # Calling gca(args, kwargs) (line 3772)
    gca_call_result_120198 = invoke(stypy.reporting.localization.Localization(__file__, 3772, 10), gca_120196, *[], **kwargs_120197)
    
    # Obtaining the member 'margins' of a type (line 3772)
    margins_120199 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3772, 10), gca_call_result_120198, 'margins')
    # Calling margins(args, kwargs) (line 3772)
    margins_call_result_120203 = invoke(stypy.reporting.localization.Localization(__file__, 3772, 10), margins_120199, *[args_120200], **kwargs_120202)
    
    # Assigning a type to the variable 'ret' (line 3772)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3772, 4), 'ret', margins_call_result_120203)
    # Getting the type of 'ret' (line 3773)
    ret_120204 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3773, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3773)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3773, 4), 'stypy_return_type', ret_120204)
    
    # ################# End of 'margins(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'margins' in the type store
    # Getting the type of 'stypy_return_type' (line 3770)
    stypy_return_type_120205 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3770, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120205)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'margins'
    return stypy_return_type_120205

# Assigning a type to the variable 'margins' (line 3770)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3770, 0), 'margins', margins)

@norecursion
def autoscale(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    # Getting the type of 'True' (line 3778)
    True_120206 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3778, 21), 'True')
    unicode_120207 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3778, 32), 'unicode', u'both')
    # Getting the type of 'None' (line 3778)
    None_120208 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3778, 46), 'None')
    defaults = [True_120206, unicode_120207, None_120208]
    # Create a new context for function 'autoscale'
    module_type_store = module_type_store.open_function_context('autoscale', 3777, 0, False)
    
    # Passed parameters checking function
    autoscale.stypy_localization = localization
    autoscale.stypy_type_of_self = None
    autoscale.stypy_type_store = module_type_store
    autoscale.stypy_function_name = 'autoscale'
    autoscale.stypy_param_names_list = ['enable', 'axis', 'tight']
    autoscale.stypy_varargs_param_name = None
    autoscale.stypy_kwargs_param_name = None
    autoscale.stypy_call_defaults = defaults
    autoscale.stypy_call_varargs = varargs
    autoscale.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'autoscale', ['enable', 'axis', 'tight'], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'autoscale', localization, ['enable', 'axis', 'tight'], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'autoscale(...)' code ##################

    
    # Assigning a Call to a Name (line 3779):
    
    # Assigning a Call to a Name (line 3779):
    
    # Call to autoscale(...): (line 3779)
    # Processing the call keyword arguments (line 3779)
    # Getting the type of 'enable' (line 3779)
    enable_120213 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3779, 33), 'enable', False)
    keyword_120214 = enable_120213
    # Getting the type of 'axis' (line 3779)
    axis_120215 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3779, 46), 'axis', False)
    keyword_120216 = axis_120215
    # Getting the type of 'tight' (line 3779)
    tight_120217 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3779, 58), 'tight', False)
    keyword_120218 = tight_120217
    kwargs_120219 = {'tight': keyword_120218, 'enable': keyword_120214, 'axis': keyword_120216}
    
    # Call to gca(...): (line 3779)
    # Processing the call keyword arguments (line 3779)
    kwargs_120210 = {}
    # Getting the type of 'gca' (line 3779)
    gca_120209 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3779, 10), 'gca', False)
    # Calling gca(args, kwargs) (line 3779)
    gca_call_result_120211 = invoke(stypy.reporting.localization.Localization(__file__, 3779, 10), gca_120209, *[], **kwargs_120210)
    
    # Obtaining the member 'autoscale' of a type (line 3779)
    autoscale_120212 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3779, 10), gca_call_result_120211, 'autoscale')
    # Calling autoscale(args, kwargs) (line 3779)
    autoscale_call_result_120220 = invoke(stypy.reporting.localization.Localization(__file__, 3779, 10), autoscale_120212, *[], **kwargs_120219)
    
    # Assigning a type to the variable 'ret' (line 3779)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3779, 4), 'ret', autoscale_call_result_120220)
    # Getting the type of 'ret' (line 3780)
    ret_120221 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3780, 11), 'ret')
    # Assigning a type to the variable 'stypy_return_type' (line 3780)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3780, 4), 'stypy_return_type', ret_120221)
    
    # ################# End of 'autoscale(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'autoscale' in the type store
    # Getting the type of 'stypy_return_type' (line 3777)
    stypy_return_type_120222 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3777, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120222)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'autoscale'
    return stypy_return_type_120222

# Assigning a type to the variable 'autoscale' (line 3777)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3777, 0), 'autoscale', autoscale)

@norecursion
def autumn(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'autumn'
    module_type_store = module_type_store.open_function_context('autumn', 3784, 0, False)
    
    # Passed parameters checking function
    autumn.stypy_localization = localization
    autumn.stypy_type_of_self = None
    autumn.stypy_type_store = module_type_store
    autumn.stypy_function_name = 'autumn'
    autumn.stypy_param_names_list = []
    autumn.stypy_varargs_param_name = None
    autumn.stypy_kwargs_param_name = None
    autumn.stypy_call_defaults = defaults
    autumn.stypy_call_varargs = varargs
    autumn.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'autumn', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'autumn', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'autumn(...)' code ##################

    unicode_120223 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3788, (-1)), 'unicode', u'\n    set the default colormap to autumn and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3789)
    # Processing the call arguments (line 3789)
    unicode_120225 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3789, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3789)
    unicode_120226 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3789, 21), 'unicode', u'autumn')
    keyword_120227 = unicode_120226
    kwargs_120228 = {'cmap': keyword_120227}
    # Getting the type of 'rc' (line 3789)
    rc_120224 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3789, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3789)
    rc_call_result_120229 = invoke(stypy.reporting.localization.Localization(__file__, 3789, 4), rc_120224, *[unicode_120225], **kwargs_120228)
    
    
    # Assigning a Call to a Name (line 3790):
    
    # Assigning a Call to a Name (line 3790):
    
    # Call to gci(...): (line 3790)
    # Processing the call keyword arguments (line 3790)
    kwargs_120231 = {}
    # Getting the type of 'gci' (line 3790)
    gci_120230 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3790, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3790)
    gci_call_result_120232 = invoke(stypy.reporting.localization.Localization(__file__, 3790, 9), gci_120230, *[], **kwargs_120231)
    
    # Assigning a type to the variable 'im' (line 3790)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3790, 4), 'im', gci_call_result_120232)
    
    # Type idiom detected: calculating its left and rigth part (line 3792)
    # Getting the type of 'im' (line 3792)
    im_120233 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 4), 'im')
    # Getting the type of 'None' (line 3792)
    None_120234 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3792, 17), 'None')
    
    (may_be_120235, more_types_in_union_120236) = may_not_be_none(im_120233, None_120234)

    if may_be_120235:

        if more_types_in_union_120236:
            # Runtime conditional SSA (line 3792)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3793)
        # Processing the call arguments (line 3793)
        # Getting the type of 'cm' (line 3793)
        cm_120239 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3793, 20), 'cm', False)
        # Obtaining the member 'autumn' of a type (line 3793)
        autumn_120240 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3793, 20), cm_120239, 'autumn')
        # Processing the call keyword arguments (line 3793)
        kwargs_120241 = {}
        # Getting the type of 'im' (line 3793)
        im_120237 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3793, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3793)
        set_cmap_120238 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3793, 8), im_120237, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3793)
        set_cmap_call_result_120242 = invoke(stypy.reporting.localization.Localization(__file__, 3793, 8), set_cmap_120238, *[autumn_120240], **kwargs_120241)
        

        if more_types_in_union_120236:
            # SSA join for if statement (line 3792)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'autumn(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'autumn' in the type store
    # Getting the type of 'stypy_return_type' (line 3784)
    stypy_return_type_120243 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3784, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120243)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'autumn'
    return stypy_return_type_120243

# Assigning a type to the variable 'autumn' (line 3784)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3784, 0), 'autumn', autumn)

@norecursion
def bone(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'bone'
    module_type_store = module_type_store.open_function_context('bone', 3798, 0, False)
    
    # Passed parameters checking function
    bone.stypy_localization = localization
    bone.stypy_type_of_self = None
    bone.stypy_type_store = module_type_store
    bone.stypy_function_name = 'bone'
    bone.stypy_param_names_list = []
    bone.stypy_varargs_param_name = None
    bone.stypy_kwargs_param_name = None
    bone.stypy_call_defaults = defaults
    bone.stypy_call_varargs = varargs
    bone.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'bone', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'bone', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'bone(...)' code ##################

    unicode_120244 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3802, (-1)), 'unicode', u'\n    set the default colormap to bone and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3803)
    # Processing the call arguments (line 3803)
    unicode_120246 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3803, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3803)
    unicode_120247 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3803, 21), 'unicode', u'bone')
    keyword_120248 = unicode_120247
    kwargs_120249 = {'cmap': keyword_120248}
    # Getting the type of 'rc' (line 3803)
    rc_120245 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3803, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3803)
    rc_call_result_120250 = invoke(stypy.reporting.localization.Localization(__file__, 3803, 4), rc_120245, *[unicode_120246], **kwargs_120249)
    
    
    # Assigning a Call to a Name (line 3804):
    
    # Assigning a Call to a Name (line 3804):
    
    # Call to gci(...): (line 3804)
    # Processing the call keyword arguments (line 3804)
    kwargs_120252 = {}
    # Getting the type of 'gci' (line 3804)
    gci_120251 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3804, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3804)
    gci_call_result_120253 = invoke(stypy.reporting.localization.Localization(__file__, 3804, 9), gci_120251, *[], **kwargs_120252)
    
    # Assigning a type to the variable 'im' (line 3804)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3804, 4), 'im', gci_call_result_120253)
    
    # Type idiom detected: calculating its left and rigth part (line 3806)
    # Getting the type of 'im' (line 3806)
    im_120254 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 4), 'im')
    # Getting the type of 'None' (line 3806)
    None_120255 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3806, 17), 'None')
    
    (may_be_120256, more_types_in_union_120257) = may_not_be_none(im_120254, None_120255)

    if may_be_120256:

        if more_types_in_union_120257:
            # Runtime conditional SSA (line 3806)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3807)
        # Processing the call arguments (line 3807)
        # Getting the type of 'cm' (line 3807)
        cm_120260 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3807, 20), 'cm', False)
        # Obtaining the member 'bone' of a type (line 3807)
        bone_120261 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3807, 20), cm_120260, 'bone')
        # Processing the call keyword arguments (line 3807)
        kwargs_120262 = {}
        # Getting the type of 'im' (line 3807)
        im_120258 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3807, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3807)
        set_cmap_120259 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3807, 8), im_120258, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3807)
        set_cmap_call_result_120263 = invoke(stypy.reporting.localization.Localization(__file__, 3807, 8), set_cmap_120259, *[bone_120261], **kwargs_120262)
        

        if more_types_in_union_120257:
            # SSA join for if statement (line 3806)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'bone(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'bone' in the type store
    # Getting the type of 'stypy_return_type' (line 3798)
    stypy_return_type_120264 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3798, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120264)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'bone'
    return stypy_return_type_120264

# Assigning a type to the variable 'bone' (line 3798)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3798, 0), 'bone', bone)

@norecursion
def cool(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'cool'
    module_type_store = module_type_store.open_function_context('cool', 3812, 0, False)
    
    # Passed parameters checking function
    cool.stypy_localization = localization
    cool.stypy_type_of_self = None
    cool.stypy_type_store = module_type_store
    cool.stypy_function_name = 'cool'
    cool.stypy_param_names_list = []
    cool.stypy_varargs_param_name = None
    cool.stypy_kwargs_param_name = None
    cool.stypy_call_defaults = defaults
    cool.stypy_call_varargs = varargs
    cool.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'cool', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'cool', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'cool(...)' code ##################

    unicode_120265 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3816, (-1)), 'unicode', u'\n    set the default colormap to cool and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3817)
    # Processing the call arguments (line 3817)
    unicode_120267 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3817, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3817)
    unicode_120268 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3817, 21), 'unicode', u'cool')
    keyword_120269 = unicode_120268
    kwargs_120270 = {'cmap': keyword_120269}
    # Getting the type of 'rc' (line 3817)
    rc_120266 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3817, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3817)
    rc_call_result_120271 = invoke(stypy.reporting.localization.Localization(__file__, 3817, 4), rc_120266, *[unicode_120267], **kwargs_120270)
    
    
    # Assigning a Call to a Name (line 3818):
    
    # Assigning a Call to a Name (line 3818):
    
    # Call to gci(...): (line 3818)
    # Processing the call keyword arguments (line 3818)
    kwargs_120273 = {}
    # Getting the type of 'gci' (line 3818)
    gci_120272 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3818, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3818)
    gci_call_result_120274 = invoke(stypy.reporting.localization.Localization(__file__, 3818, 9), gci_120272, *[], **kwargs_120273)
    
    # Assigning a type to the variable 'im' (line 3818)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3818, 4), 'im', gci_call_result_120274)
    
    # Type idiom detected: calculating its left and rigth part (line 3820)
    # Getting the type of 'im' (line 3820)
    im_120275 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3820, 4), 'im')
    # Getting the type of 'None' (line 3820)
    None_120276 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3820, 17), 'None')
    
    (may_be_120277, more_types_in_union_120278) = may_not_be_none(im_120275, None_120276)

    if may_be_120277:

        if more_types_in_union_120278:
            # Runtime conditional SSA (line 3820)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3821)
        # Processing the call arguments (line 3821)
        # Getting the type of 'cm' (line 3821)
        cm_120281 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 20), 'cm', False)
        # Obtaining the member 'cool' of a type (line 3821)
        cool_120282 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3821, 20), cm_120281, 'cool')
        # Processing the call keyword arguments (line 3821)
        kwargs_120283 = {}
        # Getting the type of 'im' (line 3821)
        im_120279 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3821, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3821)
        set_cmap_120280 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3821, 8), im_120279, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3821)
        set_cmap_call_result_120284 = invoke(stypy.reporting.localization.Localization(__file__, 3821, 8), set_cmap_120280, *[cool_120282], **kwargs_120283)
        

        if more_types_in_union_120278:
            # SSA join for if statement (line 3820)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'cool(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'cool' in the type store
    # Getting the type of 'stypy_return_type' (line 3812)
    stypy_return_type_120285 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3812, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120285)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'cool'
    return stypy_return_type_120285

# Assigning a type to the variable 'cool' (line 3812)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3812, 0), 'cool', cool)

@norecursion
def copper(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'copper'
    module_type_store = module_type_store.open_function_context('copper', 3826, 0, False)
    
    # Passed parameters checking function
    copper.stypy_localization = localization
    copper.stypy_type_of_self = None
    copper.stypy_type_store = module_type_store
    copper.stypy_function_name = 'copper'
    copper.stypy_param_names_list = []
    copper.stypy_varargs_param_name = None
    copper.stypy_kwargs_param_name = None
    copper.stypy_call_defaults = defaults
    copper.stypy_call_varargs = varargs
    copper.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'copper', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'copper', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'copper(...)' code ##################

    unicode_120286 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3830, (-1)), 'unicode', u'\n    set the default colormap to copper and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3831)
    # Processing the call arguments (line 3831)
    unicode_120288 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3831, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3831)
    unicode_120289 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3831, 21), 'unicode', u'copper')
    keyword_120290 = unicode_120289
    kwargs_120291 = {'cmap': keyword_120290}
    # Getting the type of 'rc' (line 3831)
    rc_120287 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3831, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3831)
    rc_call_result_120292 = invoke(stypy.reporting.localization.Localization(__file__, 3831, 4), rc_120287, *[unicode_120288], **kwargs_120291)
    
    
    # Assigning a Call to a Name (line 3832):
    
    # Assigning a Call to a Name (line 3832):
    
    # Call to gci(...): (line 3832)
    # Processing the call keyword arguments (line 3832)
    kwargs_120294 = {}
    # Getting the type of 'gci' (line 3832)
    gci_120293 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3832, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3832)
    gci_call_result_120295 = invoke(stypy.reporting.localization.Localization(__file__, 3832, 9), gci_120293, *[], **kwargs_120294)
    
    # Assigning a type to the variable 'im' (line 3832)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3832, 4), 'im', gci_call_result_120295)
    
    # Type idiom detected: calculating its left and rigth part (line 3834)
    # Getting the type of 'im' (line 3834)
    im_120296 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3834, 4), 'im')
    # Getting the type of 'None' (line 3834)
    None_120297 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3834, 17), 'None')
    
    (may_be_120298, more_types_in_union_120299) = may_not_be_none(im_120296, None_120297)

    if may_be_120298:

        if more_types_in_union_120299:
            # Runtime conditional SSA (line 3834)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3835)
        # Processing the call arguments (line 3835)
        # Getting the type of 'cm' (line 3835)
        cm_120302 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 20), 'cm', False)
        # Obtaining the member 'copper' of a type (line 3835)
        copper_120303 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3835, 20), cm_120302, 'copper')
        # Processing the call keyword arguments (line 3835)
        kwargs_120304 = {}
        # Getting the type of 'im' (line 3835)
        im_120300 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3835, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3835)
        set_cmap_120301 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3835, 8), im_120300, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3835)
        set_cmap_call_result_120305 = invoke(stypy.reporting.localization.Localization(__file__, 3835, 8), set_cmap_120301, *[copper_120303], **kwargs_120304)
        

        if more_types_in_union_120299:
            # SSA join for if statement (line 3834)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'copper(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'copper' in the type store
    # Getting the type of 'stypy_return_type' (line 3826)
    stypy_return_type_120306 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3826, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120306)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'copper'
    return stypy_return_type_120306

# Assigning a type to the variable 'copper' (line 3826)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3826, 0), 'copper', copper)

@norecursion
def flag(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'flag'
    module_type_store = module_type_store.open_function_context('flag', 3840, 0, False)
    
    # Passed parameters checking function
    flag.stypy_localization = localization
    flag.stypy_type_of_self = None
    flag.stypy_type_store = module_type_store
    flag.stypy_function_name = 'flag'
    flag.stypy_param_names_list = []
    flag.stypy_varargs_param_name = None
    flag.stypy_kwargs_param_name = None
    flag.stypy_call_defaults = defaults
    flag.stypy_call_varargs = varargs
    flag.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'flag', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'flag', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'flag(...)' code ##################

    unicode_120307 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3844, (-1)), 'unicode', u'\n    set the default colormap to flag and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3845)
    # Processing the call arguments (line 3845)
    unicode_120309 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3845, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3845)
    unicode_120310 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3845, 21), 'unicode', u'flag')
    keyword_120311 = unicode_120310
    kwargs_120312 = {'cmap': keyword_120311}
    # Getting the type of 'rc' (line 3845)
    rc_120308 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3845, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3845)
    rc_call_result_120313 = invoke(stypy.reporting.localization.Localization(__file__, 3845, 4), rc_120308, *[unicode_120309], **kwargs_120312)
    
    
    # Assigning a Call to a Name (line 3846):
    
    # Assigning a Call to a Name (line 3846):
    
    # Call to gci(...): (line 3846)
    # Processing the call keyword arguments (line 3846)
    kwargs_120315 = {}
    # Getting the type of 'gci' (line 3846)
    gci_120314 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3846, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3846)
    gci_call_result_120316 = invoke(stypy.reporting.localization.Localization(__file__, 3846, 9), gci_120314, *[], **kwargs_120315)
    
    # Assigning a type to the variable 'im' (line 3846)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3846, 4), 'im', gci_call_result_120316)
    
    # Type idiom detected: calculating its left and rigth part (line 3848)
    # Getting the type of 'im' (line 3848)
    im_120317 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3848, 4), 'im')
    # Getting the type of 'None' (line 3848)
    None_120318 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3848, 17), 'None')
    
    (may_be_120319, more_types_in_union_120320) = may_not_be_none(im_120317, None_120318)

    if may_be_120319:

        if more_types_in_union_120320:
            # Runtime conditional SSA (line 3848)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3849)
        # Processing the call arguments (line 3849)
        # Getting the type of 'cm' (line 3849)
        cm_120323 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3849, 20), 'cm', False)
        # Obtaining the member 'flag' of a type (line 3849)
        flag_120324 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3849, 20), cm_120323, 'flag')
        # Processing the call keyword arguments (line 3849)
        kwargs_120325 = {}
        # Getting the type of 'im' (line 3849)
        im_120321 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3849, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3849)
        set_cmap_120322 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3849, 8), im_120321, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3849)
        set_cmap_call_result_120326 = invoke(stypy.reporting.localization.Localization(__file__, 3849, 8), set_cmap_120322, *[flag_120324], **kwargs_120325)
        

        if more_types_in_union_120320:
            # SSA join for if statement (line 3848)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'flag(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'flag' in the type store
    # Getting the type of 'stypy_return_type' (line 3840)
    stypy_return_type_120327 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3840, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120327)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'flag'
    return stypy_return_type_120327

# Assigning a type to the variable 'flag' (line 3840)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3840, 0), 'flag', flag)

@norecursion
def gray(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'gray'
    module_type_store = module_type_store.open_function_context('gray', 3854, 0, False)
    
    # Passed parameters checking function
    gray.stypy_localization = localization
    gray.stypy_type_of_self = None
    gray.stypy_type_store = module_type_store
    gray.stypy_function_name = 'gray'
    gray.stypy_param_names_list = []
    gray.stypy_varargs_param_name = None
    gray.stypy_kwargs_param_name = None
    gray.stypy_call_defaults = defaults
    gray.stypy_call_varargs = varargs
    gray.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'gray', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'gray', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'gray(...)' code ##################

    unicode_120328 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3858, (-1)), 'unicode', u'\n    set the default colormap to gray and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3859)
    # Processing the call arguments (line 3859)
    unicode_120330 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3859, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3859)
    unicode_120331 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3859, 21), 'unicode', u'gray')
    keyword_120332 = unicode_120331
    kwargs_120333 = {'cmap': keyword_120332}
    # Getting the type of 'rc' (line 3859)
    rc_120329 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3859, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3859)
    rc_call_result_120334 = invoke(stypy.reporting.localization.Localization(__file__, 3859, 4), rc_120329, *[unicode_120330], **kwargs_120333)
    
    
    # Assigning a Call to a Name (line 3860):
    
    # Assigning a Call to a Name (line 3860):
    
    # Call to gci(...): (line 3860)
    # Processing the call keyword arguments (line 3860)
    kwargs_120336 = {}
    # Getting the type of 'gci' (line 3860)
    gci_120335 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3860, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3860)
    gci_call_result_120337 = invoke(stypy.reporting.localization.Localization(__file__, 3860, 9), gci_120335, *[], **kwargs_120336)
    
    # Assigning a type to the variable 'im' (line 3860)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3860, 4), 'im', gci_call_result_120337)
    
    # Type idiom detected: calculating its left and rigth part (line 3862)
    # Getting the type of 'im' (line 3862)
    im_120338 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3862, 4), 'im')
    # Getting the type of 'None' (line 3862)
    None_120339 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3862, 17), 'None')
    
    (may_be_120340, more_types_in_union_120341) = may_not_be_none(im_120338, None_120339)

    if may_be_120340:

        if more_types_in_union_120341:
            # Runtime conditional SSA (line 3862)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3863)
        # Processing the call arguments (line 3863)
        # Getting the type of 'cm' (line 3863)
        cm_120344 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3863, 20), 'cm', False)
        # Obtaining the member 'gray' of a type (line 3863)
        gray_120345 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3863, 20), cm_120344, 'gray')
        # Processing the call keyword arguments (line 3863)
        kwargs_120346 = {}
        # Getting the type of 'im' (line 3863)
        im_120342 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3863, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3863)
        set_cmap_120343 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3863, 8), im_120342, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3863)
        set_cmap_call_result_120347 = invoke(stypy.reporting.localization.Localization(__file__, 3863, 8), set_cmap_120343, *[gray_120345], **kwargs_120346)
        

        if more_types_in_union_120341:
            # SSA join for if statement (line 3862)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'gray(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'gray' in the type store
    # Getting the type of 'stypy_return_type' (line 3854)
    stypy_return_type_120348 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3854, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120348)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'gray'
    return stypy_return_type_120348

# Assigning a type to the variable 'gray' (line 3854)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3854, 0), 'gray', gray)

@norecursion
def hot(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'hot'
    module_type_store = module_type_store.open_function_context('hot', 3868, 0, False)
    
    # Passed parameters checking function
    hot.stypy_localization = localization
    hot.stypy_type_of_self = None
    hot.stypy_type_store = module_type_store
    hot.stypy_function_name = 'hot'
    hot.stypy_param_names_list = []
    hot.stypy_varargs_param_name = None
    hot.stypy_kwargs_param_name = None
    hot.stypy_call_defaults = defaults
    hot.stypy_call_varargs = varargs
    hot.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hot', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hot', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hot(...)' code ##################

    unicode_120349 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3872, (-1)), 'unicode', u'\n    set the default colormap to hot and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3873)
    # Processing the call arguments (line 3873)
    unicode_120351 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3873, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3873)
    unicode_120352 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3873, 21), 'unicode', u'hot')
    keyword_120353 = unicode_120352
    kwargs_120354 = {'cmap': keyword_120353}
    # Getting the type of 'rc' (line 3873)
    rc_120350 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3873, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3873)
    rc_call_result_120355 = invoke(stypy.reporting.localization.Localization(__file__, 3873, 4), rc_120350, *[unicode_120351], **kwargs_120354)
    
    
    # Assigning a Call to a Name (line 3874):
    
    # Assigning a Call to a Name (line 3874):
    
    # Call to gci(...): (line 3874)
    # Processing the call keyword arguments (line 3874)
    kwargs_120357 = {}
    # Getting the type of 'gci' (line 3874)
    gci_120356 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3874, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3874)
    gci_call_result_120358 = invoke(stypy.reporting.localization.Localization(__file__, 3874, 9), gci_120356, *[], **kwargs_120357)
    
    # Assigning a type to the variable 'im' (line 3874)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3874, 4), 'im', gci_call_result_120358)
    
    # Type idiom detected: calculating its left and rigth part (line 3876)
    # Getting the type of 'im' (line 3876)
    im_120359 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3876, 4), 'im')
    # Getting the type of 'None' (line 3876)
    None_120360 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3876, 17), 'None')
    
    (may_be_120361, more_types_in_union_120362) = may_not_be_none(im_120359, None_120360)

    if may_be_120361:

        if more_types_in_union_120362:
            # Runtime conditional SSA (line 3876)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3877)
        # Processing the call arguments (line 3877)
        # Getting the type of 'cm' (line 3877)
        cm_120365 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3877, 20), 'cm', False)
        # Obtaining the member 'hot' of a type (line 3877)
        hot_120366 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3877, 20), cm_120365, 'hot')
        # Processing the call keyword arguments (line 3877)
        kwargs_120367 = {}
        # Getting the type of 'im' (line 3877)
        im_120363 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3877, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3877)
        set_cmap_120364 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3877, 8), im_120363, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3877)
        set_cmap_call_result_120368 = invoke(stypy.reporting.localization.Localization(__file__, 3877, 8), set_cmap_120364, *[hot_120366], **kwargs_120367)
        

        if more_types_in_union_120362:
            # SSA join for if statement (line 3876)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'hot(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hot' in the type store
    # Getting the type of 'stypy_return_type' (line 3868)
    stypy_return_type_120369 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3868, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120369)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hot'
    return stypy_return_type_120369

# Assigning a type to the variable 'hot' (line 3868)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3868, 0), 'hot', hot)

@norecursion
def hsv(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'hsv'
    module_type_store = module_type_store.open_function_context('hsv', 3882, 0, False)
    
    # Passed parameters checking function
    hsv.stypy_localization = localization
    hsv.stypy_type_of_self = None
    hsv.stypy_type_store = module_type_store
    hsv.stypy_function_name = 'hsv'
    hsv.stypy_param_names_list = []
    hsv.stypy_varargs_param_name = None
    hsv.stypy_kwargs_param_name = None
    hsv.stypy_call_defaults = defaults
    hsv.stypy_call_varargs = varargs
    hsv.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'hsv', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'hsv', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'hsv(...)' code ##################

    unicode_120370 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3886, (-1)), 'unicode', u'\n    set the default colormap to hsv and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3887)
    # Processing the call arguments (line 3887)
    unicode_120372 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3887, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3887)
    unicode_120373 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3887, 21), 'unicode', u'hsv')
    keyword_120374 = unicode_120373
    kwargs_120375 = {'cmap': keyword_120374}
    # Getting the type of 'rc' (line 3887)
    rc_120371 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3887, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3887)
    rc_call_result_120376 = invoke(stypy.reporting.localization.Localization(__file__, 3887, 4), rc_120371, *[unicode_120372], **kwargs_120375)
    
    
    # Assigning a Call to a Name (line 3888):
    
    # Assigning a Call to a Name (line 3888):
    
    # Call to gci(...): (line 3888)
    # Processing the call keyword arguments (line 3888)
    kwargs_120378 = {}
    # Getting the type of 'gci' (line 3888)
    gci_120377 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3888, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3888)
    gci_call_result_120379 = invoke(stypy.reporting.localization.Localization(__file__, 3888, 9), gci_120377, *[], **kwargs_120378)
    
    # Assigning a type to the variable 'im' (line 3888)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3888, 4), 'im', gci_call_result_120379)
    
    # Type idiom detected: calculating its left and rigth part (line 3890)
    # Getting the type of 'im' (line 3890)
    im_120380 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3890, 4), 'im')
    # Getting the type of 'None' (line 3890)
    None_120381 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3890, 17), 'None')
    
    (may_be_120382, more_types_in_union_120383) = may_not_be_none(im_120380, None_120381)

    if may_be_120382:

        if more_types_in_union_120383:
            # Runtime conditional SSA (line 3890)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3891)
        # Processing the call arguments (line 3891)
        # Getting the type of 'cm' (line 3891)
        cm_120386 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3891, 20), 'cm', False)
        # Obtaining the member 'hsv' of a type (line 3891)
        hsv_120387 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3891, 20), cm_120386, 'hsv')
        # Processing the call keyword arguments (line 3891)
        kwargs_120388 = {}
        # Getting the type of 'im' (line 3891)
        im_120384 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3891, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3891)
        set_cmap_120385 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3891, 8), im_120384, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3891)
        set_cmap_call_result_120389 = invoke(stypy.reporting.localization.Localization(__file__, 3891, 8), set_cmap_120385, *[hsv_120387], **kwargs_120388)
        

        if more_types_in_union_120383:
            # SSA join for if statement (line 3890)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'hsv(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'hsv' in the type store
    # Getting the type of 'stypy_return_type' (line 3882)
    stypy_return_type_120390 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3882, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120390)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'hsv'
    return stypy_return_type_120390

# Assigning a type to the variable 'hsv' (line 3882)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3882, 0), 'hsv', hsv)

@norecursion
def jet(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'jet'
    module_type_store = module_type_store.open_function_context('jet', 3896, 0, False)
    
    # Passed parameters checking function
    jet.stypy_localization = localization
    jet.stypy_type_of_self = None
    jet.stypy_type_store = module_type_store
    jet.stypy_function_name = 'jet'
    jet.stypy_param_names_list = []
    jet.stypy_varargs_param_name = None
    jet.stypy_kwargs_param_name = None
    jet.stypy_call_defaults = defaults
    jet.stypy_call_varargs = varargs
    jet.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'jet', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'jet', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'jet(...)' code ##################

    unicode_120391 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3900, (-1)), 'unicode', u'\n    set the default colormap to jet and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3901)
    # Processing the call arguments (line 3901)
    unicode_120393 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3901, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3901)
    unicode_120394 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3901, 21), 'unicode', u'jet')
    keyword_120395 = unicode_120394
    kwargs_120396 = {'cmap': keyword_120395}
    # Getting the type of 'rc' (line 3901)
    rc_120392 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3901, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3901)
    rc_call_result_120397 = invoke(stypy.reporting.localization.Localization(__file__, 3901, 4), rc_120392, *[unicode_120393], **kwargs_120396)
    
    
    # Assigning a Call to a Name (line 3902):
    
    # Assigning a Call to a Name (line 3902):
    
    # Call to gci(...): (line 3902)
    # Processing the call keyword arguments (line 3902)
    kwargs_120399 = {}
    # Getting the type of 'gci' (line 3902)
    gci_120398 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3902, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3902)
    gci_call_result_120400 = invoke(stypy.reporting.localization.Localization(__file__, 3902, 9), gci_120398, *[], **kwargs_120399)
    
    # Assigning a type to the variable 'im' (line 3902)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3902, 4), 'im', gci_call_result_120400)
    
    # Type idiom detected: calculating its left and rigth part (line 3904)
    # Getting the type of 'im' (line 3904)
    im_120401 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 4), 'im')
    # Getting the type of 'None' (line 3904)
    None_120402 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3904, 17), 'None')
    
    (may_be_120403, more_types_in_union_120404) = may_not_be_none(im_120401, None_120402)

    if may_be_120403:

        if more_types_in_union_120404:
            # Runtime conditional SSA (line 3904)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3905)
        # Processing the call arguments (line 3905)
        # Getting the type of 'cm' (line 3905)
        cm_120407 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3905, 20), 'cm', False)
        # Obtaining the member 'jet' of a type (line 3905)
        jet_120408 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3905, 20), cm_120407, 'jet')
        # Processing the call keyword arguments (line 3905)
        kwargs_120409 = {}
        # Getting the type of 'im' (line 3905)
        im_120405 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3905, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3905)
        set_cmap_120406 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3905, 8), im_120405, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3905)
        set_cmap_call_result_120410 = invoke(stypy.reporting.localization.Localization(__file__, 3905, 8), set_cmap_120406, *[jet_120408], **kwargs_120409)
        

        if more_types_in_union_120404:
            # SSA join for if statement (line 3904)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'jet(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'jet' in the type store
    # Getting the type of 'stypy_return_type' (line 3896)
    stypy_return_type_120411 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3896, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120411)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'jet'
    return stypy_return_type_120411

# Assigning a type to the variable 'jet' (line 3896)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3896, 0), 'jet', jet)

@norecursion
def pink(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'pink'
    module_type_store = module_type_store.open_function_context('pink', 3910, 0, False)
    
    # Passed parameters checking function
    pink.stypy_localization = localization
    pink.stypy_type_of_self = None
    pink.stypy_type_store = module_type_store
    pink.stypy_function_name = 'pink'
    pink.stypy_param_names_list = []
    pink.stypy_varargs_param_name = None
    pink.stypy_kwargs_param_name = None
    pink.stypy_call_defaults = defaults
    pink.stypy_call_varargs = varargs
    pink.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'pink', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'pink', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'pink(...)' code ##################

    unicode_120412 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3914, (-1)), 'unicode', u'\n    set the default colormap to pink and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3915)
    # Processing the call arguments (line 3915)
    unicode_120414 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3915, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3915)
    unicode_120415 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3915, 21), 'unicode', u'pink')
    keyword_120416 = unicode_120415
    kwargs_120417 = {'cmap': keyword_120416}
    # Getting the type of 'rc' (line 3915)
    rc_120413 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3915, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3915)
    rc_call_result_120418 = invoke(stypy.reporting.localization.Localization(__file__, 3915, 4), rc_120413, *[unicode_120414], **kwargs_120417)
    
    
    # Assigning a Call to a Name (line 3916):
    
    # Assigning a Call to a Name (line 3916):
    
    # Call to gci(...): (line 3916)
    # Processing the call keyword arguments (line 3916)
    kwargs_120420 = {}
    # Getting the type of 'gci' (line 3916)
    gci_120419 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3916, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3916)
    gci_call_result_120421 = invoke(stypy.reporting.localization.Localization(__file__, 3916, 9), gci_120419, *[], **kwargs_120420)
    
    # Assigning a type to the variable 'im' (line 3916)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3916, 4), 'im', gci_call_result_120421)
    
    # Type idiom detected: calculating its left and rigth part (line 3918)
    # Getting the type of 'im' (line 3918)
    im_120422 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3918, 4), 'im')
    # Getting the type of 'None' (line 3918)
    None_120423 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3918, 17), 'None')
    
    (may_be_120424, more_types_in_union_120425) = may_not_be_none(im_120422, None_120423)

    if may_be_120424:

        if more_types_in_union_120425:
            # Runtime conditional SSA (line 3918)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3919)
        # Processing the call arguments (line 3919)
        # Getting the type of 'cm' (line 3919)
        cm_120428 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3919, 20), 'cm', False)
        # Obtaining the member 'pink' of a type (line 3919)
        pink_120429 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3919, 20), cm_120428, 'pink')
        # Processing the call keyword arguments (line 3919)
        kwargs_120430 = {}
        # Getting the type of 'im' (line 3919)
        im_120426 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3919, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3919)
        set_cmap_120427 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3919, 8), im_120426, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3919)
        set_cmap_call_result_120431 = invoke(stypy.reporting.localization.Localization(__file__, 3919, 8), set_cmap_120427, *[pink_120429], **kwargs_120430)
        

        if more_types_in_union_120425:
            # SSA join for if statement (line 3918)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'pink(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'pink' in the type store
    # Getting the type of 'stypy_return_type' (line 3910)
    stypy_return_type_120432 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3910, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120432)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'pink'
    return stypy_return_type_120432

# Assigning a type to the variable 'pink' (line 3910)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3910, 0), 'pink', pink)

@norecursion
def prism(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'prism'
    module_type_store = module_type_store.open_function_context('prism', 3924, 0, False)
    
    # Passed parameters checking function
    prism.stypy_localization = localization
    prism.stypy_type_of_self = None
    prism.stypy_type_store = module_type_store
    prism.stypy_function_name = 'prism'
    prism.stypy_param_names_list = []
    prism.stypy_varargs_param_name = None
    prism.stypy_kwargs_param_name = None
    prism.stypy_call_defaults = defaults
    prism.stypy_call_varargs = varargs
    prism.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'prism', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'prism', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'prism(...)' code ##################

    unicode_120433 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3928, (-1)), 'unicode', u'\n    set the default colormap to prism and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3929)
    # Processing the call arguments (line 3929)
    unicode_120435 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3929, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3929)
    unicode_120436 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3929, 21), 'unicode', u'prism')
    keyword_120437 = unicode_120436
    kwargs_120438 = {'cmap': keyword_120437}
    # Getting the type of 'rc' (line 3929)
    rc_120434 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3929, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3929)
    rc_call_result_120439 = invoke(stypy.reporting.localization.Localization(__file__, 3929, 4), rc_120434, *[unicode_120435], **kwargs_120438)
    
    
    # Assigning a Call to a Name (line 3930):
    
    # Assigning a Call to a Name (line 3930):
    
    # Call to gci(...): (line 3930)
    # Processing the call keyword arguments (line 3930)
    kwargs_120441 = {}
    # Getting the type of 'gci' (line 3930)
    gci_120440 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3930, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3930)
    gci_call_result_120442 = invoke(stypy.reporting.localization.Localization(__file__, 3930, 9), gci_120440, *[], **kwargs_120441)
    
    # Assigning a type to the variable 'im' (line 3930)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3930, 4), 'im', gci_call_result_120442)
    
    # Type idiom detected: calculating its left and rigth part (line 3932)
    # Getting the type of 'im' (line 3932)
    im_120443 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3932, 4), 'im')
    # Getting the type of 'None' (line 3932)
    None_120444 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3932, 17), 'None')
    
    (may_be_120445, more_types_in_union_120446) = may_not_be_none(im_120443, None_120444)

    if may_be_120445:

        if more_types_in_union_120446:
            # Runtime conditional SSA (line 3932)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3933)
        # Processing the call arguments (line 3933)
        # Getting the type of 'cm' (line 3933)
        cm_120449 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3933, 20), 'cm', False)
        # Obtaining the member 'prism' of a type (line 3933)
        prism_120450 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3933, 20), cm_120449, 'prism')
        # Processing the call keyword arguments (line 3933)
        kwargs_120451 = {}
        # Getting the type of 'im' (line 3933)
        im_120447 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3933, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3933)
        set_cmap_120448 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3933, 8), im_120447, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3933)
        set_cmap_call_result_120452 = invoke(stypy.reporting.localization.Localization(__file__, 3933, 8), set_cmap_120448, *[prism_120450], **kwargs_120451)
        

        if more_types_in_union_120446:
            # SSA join for if statement (line 3932)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'prism(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'prism' in the type store
    # Getting the type of 'stypy_return_type' (line 3924)
    stypy_return_type_120453 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3924, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120453)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'prism'
    return stypy_return_type_120453

# Assigning a type to the variable 'prism' (line 3924)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3924, 0), 'prism', prism)

@norecursion
def spring(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'spring'
    module_type_store = module_type_store.open_function_context('spring', 3938, 0, False)
    
    # Passed parameters checking function
    spring.stypy_localization = localization
    spring.stypy_type_of_self = None
    spring.stypy_type_store = module_type_store
    spring.stypy_function_name = 'spring'
    spring.stypy_param_names_list = []
    spring.stypy_varargs_param_name = None
    spring.stypy_kwargs_param_name = None
    spring.stypy_call_defaults = defaults
    spring.stypy_call_varargs = varargs
    spring.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'spring', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'spring', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'spring(...)' code ##################

    unicode_120454 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3942, (-1)), 'unicode', u'\n    set the default colormap to spring and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3943)
    # Processing the call arguments (line 3943)
    unicode_120456 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3943, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3943)
    unicode_120457 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3943, 21), 'unicode', u'spring')
    keyword_120458 = unicode_120457
    kwargs_120459 = {'cmap': keyword_120458}
    # Getting the type of 'rc' (line 3943)
    rc_120455 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3943, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3943)
    rc_call_result_120460 = invoke(stypy.reporting.localization.Localization(__file__, 3943, 4), rc_120455, *[unicode_120456], **kwargs_120459)
    
    
    # Assigning a Call to a Name (line 3944):
    
    # Assigning a Call to a Name (line 3944):
    
    # Call to gci(...): (line 3944)
    # Processing the call keyword arguments (line 3944)
    kwargs_120462 = {}
    # Getting the type of 'gci' (line 3944)
    gci_120461 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3944, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3944)
    gci_call_result_120463 = invoke(stypy.reporting.localization.Localization(__file__, 3944, 9), gci_120461, *[], **kwargs_120462)
    
    # Assigning a type to the variable 'im' (line 3944)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3944, 4), 'im', gci_call_result_120463)
    
    # Type idiom detected: calculating its left and rigth part (line 3946)
    # Getting the type of 'im' (line 3946)
    im_120464 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3946, 4), 'im')
    # Getting the type of 'None' (line 3946)
    None_120465 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3946, 17), 'None')
    
    (may_be_120466, more_types_in_union_120467) = may_not_be_none(im_120464, None_120465)

    if may_be_120466:

        if more_types_in_union_120467:
            # Runtime conditional SSA (line 3946)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3947)
        # Processing the call arguments (line 3947)
        # Getting the type of 'cm' (line 3947)
        cm_120470 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3947, 20), 'cm', False)
        # Obtaining the member 'spring' of a type (line 3947)
        spring_120471 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3947, 20), cm_120470, 'spring')
        # Processing the call keyword arguments (line 3947)
        kwargs_120472 = {}
        # Getting the type of 'im' (line 3947)
        im_120468 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3947, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3947)
        set_cmap_120469 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3947, 8), im_120468, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3947)
        set_cmap_call_result_120473 = invoke(stypy.reporting.localization.Localization(__file__, 3947, 8), set_cmap_120469, *[spring_120471], **kwargs_120472)
        

        if more_types_in_union_120467:
            # SSA join for if statement (line 3946)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'spring(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'spring' in the type store
    # Getting the type of 'stypy_return_type' (line 3938)
    stypy_return_type_120474 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3938, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120474)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'spring'
    return stypy_return_type_120474

# Assigning a type to the variable 'spring' (line 3938)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3938, 0), 'spring', spring)

@norecursion
def summer(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'summer'
    module_type_store = module_type_store.open_function_context('summer', 3952, 0, False)
    
    # Passed parameters checking function
    summer.stypy_localization = localization
    summer.stypy_type_of_self = None
    summer.stypy_type_store = module_type_store
    summer.stypy_function_name = 'summer'
    summer.stypy_param_names_list = []
    summer.stypy_varargs_param_name = None
    summer.stypy_kwargs_param_name = None
    summer.stypy_call_defaults = defaults
    summer.stypy_call_varargs = varargs
    summer.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'summer', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'summer', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'summer(...)' code ##################

    unicode_120475 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3956, (-1)), 'unicode', u'\n    set the default colormap to summer and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3957)
    # Processing the call arguments (line 3957)
    unicode_120477 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3957, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3957)
    unicode_120478 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3957, 21), 'unicode', u'summer')
    keyword_120479 = unicode_120478
    kwargs_120480 = {'cmap': keyword_120479}
    # Getting the type of 'rc' (line 3957)
    rc_120476 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3957, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3957)
    rc_call_result_120481 = invoke(stypy.reporting.localization.Localization(__file__, 3957, 4), rc_120476, *[unicode_120477], **kwargs_120480)
    
    
    # Assigning a Call to a Name (line 3958):
    
    # Assigning a Call to a Name (line 3958):
    
    # Call to gci(...): (line 3958)
    # Processing the call keyword arguments (line 3958)
    kwargs_120483 = {}
    # Getting the type of 'gci' (line 3958)
    gci_120482 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3958, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3958)
    gci_call_result_120484 = invoke(stypy.reporting.localization.Localization(__file__, 3958, 9), gci_120482, *[], **kwargs_120483)
    
    # Assigning a type to the variable 'im' (line 3958)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3958, 4), 'im', gci_call_result_120484)
    
    # Type idiom detected: calculating its left and rigth part (line 3960)
    # Getting the type of 'im' (line 3960)
    im_120485 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3960, 4), 'im')
    # Getting the type of 'None' (line 3960)
    None_120486 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3960, 17), 'None')
    
    (may_be_120487, more_types_in_union_120488) = may_not_be_none(im_120485, None_120486)

    if may_be_120487:

        if more_types_in_union_120488:
            # Runtime conditional SSA (line 3960)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3961)
        # Processing the call arguments (line 3961)
        # Getting the type of 'cm' (line 3961)
        cm_120491 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3961, 20), 'cm', False)
        # Obtaining the member 'summer' of a type (line 3961)
        summer_120492 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3961, 20), cm_120491, 'summer')
        # Processing the call keyword arguments (line 3961)
        kwargs_120493 = {}
        # Getting the type of 'im' (line 3961)
        im_120489 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3961, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3961)
        set_cmap_120490 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3961, 8), im_120489, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3961)
        set_cmap_call_result_120494 = invoke(stypy.reporting.localization.Localization(__file__, 3961, 8), set_cmap_120490, *[summer_120492], **kwargs_120493)
        

        if more_types_in_union_120488:
            # SSA join for if statement (line 3960)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'summer(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'summer' in the type store
    # Getting the type of 'stypy_return_type' (line 3952)
    stypy_return_type_120495 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3952, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120495)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'summer'
    return stypy_return_type_120495

# Assigning a type to the variable 'summer' (line 3952)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3952, 0), 'summer', summer)

@norecursion
def winter(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'winter'
    module_type_store = module_type_store.open_function_context('winter', 3966, 0, False)
    
    # Passed parameters checking function
    winter.stypy_localization = localization
    winter.stypy_type_of_self = None
    winter.stypy_type_store = module_type_store
    winter.stypy_function_name = 'winter'
    winter.stypy_param_names_list = []
    winter.stypy_varargs_param_name = None
    winter.stypy_kwargs_param_name = None
    winter.stypy_call_defaults = defaults
    winter.stypy_call_varargs = varargs
    winter.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'winter', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'winter', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'winter(...)' code ##################

    unicode_120496 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3970, (-1)), 'unicode', u'\n    set the default colormap to winter and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3971)
    # Processing the call arguments (line 3971)
    unicode_120498 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3971, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3971)
    unicode_120499 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3971, 21), 'unicode', u'winter')
    keyword_120500 = unicode_120499
    kwargs_120501 = {'cmap': keyword_120500}
    # Getting the type of 'rc' (line 3971)
    rc_120497 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3971, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3971)
    rc_call_result_120502 = invoke(stypy.reporting.localization.Localization(__file__, 3971, 4), rc_120497, *[unicode_120498], **kwargs_120501)
    
    
    # Assigning a Call to a Name (line 3972):
    
    # Assigning a Call to a Name (line 3972):
    
    # Call to gci(...): (line 3972)
    # Processing the call keyword arguments (line 3972)
    kwargs_120504 = {}
    # Getting the type of 'gci' (line 3972)
    gci_120503 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3972, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3972)
    gci_call_result_120505 = invoke(stypy.reporting.localization.Localization(__file__, 3972, 9), gci_120503, *[], **kwargs_120504)
    
    # Assigning a type to the variable 'im' (line 3972)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3972, 4), 'im', gci_call_result_120505)
    
    # Type idiom detected: calculating its left and rigth part (line 3974)
    # Getting the type of 'im' (line 3974)
    im_120506 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3974, 4), 'im')
    # Getting the type of 'None' (line 3974)
    None_120507 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3974, 17), 'None')
    
    (may_be_120508, more_types_in_union_120509) = may_not_be_none(im_120506, None_120507)

    if may_be_120508:

        if more_types_in_union_120509:
            # Runtime conditional SSA (line 3974)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3975)
        # Processing the call arguments (line 3975)
        # Getting the type of 'cm' (line 3975)
        cm_120512 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3975, 20), 'cm', False)
        # Obtaining the member 'winter' of a type (line 3975)
        winter_120513 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3975, 20), cm_120512, 'winter')
        # Processing the call keyword arguments (line 3975)
        kwargs_120514 = {}
        # Getting the type of 'im' (line 3975)
        im_120510 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3975, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3975)
        set_cmap_120511 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3975, 8), im_120510, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3975)
        set_cmap_call_result_120515 = invoke(stypy.reporting.localization.Localization(__file__, 3975, 8), set_cmap_120511, *[winter_120513], **kwargs_120514)
        

        if more_types_in_union_120509:
            # SSA join for if statement (line 3974)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'winter(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'winter' in the type store
    # Getting the type of 'stypy_return_type' (line 3966)
    stypy_return_type_120516 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3966, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120516)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'winter'
    return stypy_return_type_120516

# Assigning a type to the variable 'winter' (line 3966)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3966, 0), 'winter', winter)

@norecursion
def magma(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'magma'
    module_type_store = module_type_store.open_function_context('magma', 3980, 0, False)
    
    # Passed parameters checking function
    magma.stypy_localization = localization
    magma.stypy_type_of_self = None
    magma.stypy_type_store = module_type_store
    magma.stypy_function_name = 'magma'
    magma.stypy_param_names_list = []
    magma.stypy_varargs_param_name = None
    magma.stypy_kwargs_param_name = None
    magma.stypy_call_defaults = defaults
    magma.stypy_call_varargs = varargs
    magma.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'magma', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'magma', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'magma(...)' code ##################

    unicode_120517 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3984, (-1)), 'unicode', u'\n    set the default colormap to magma and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3985)
    # Processing the call arguments (line 3985)
    unicode_120519 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3985, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3985)
    unicode_120520 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3985, 21), 'unicode', u'magma')
    keyword_120521 = unicode_120520
    kwargs_120522 = {'cmap': keyword_120521}
    # Getting the type of 'rc' (line 3985)
    rc_120518 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3985, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3985)
    rc_call_result_120523 = invoke(stypy.reporting.localization.Localization(__file__, 3985, 4), rc_120518, *[unicode_120519], **kwargs_120522)
    
    
    # Assigning a Call to a Name (line 3986):
    
    # Assigning a Call to a Name (line 3986):
    
    # Call to gci(...): (line 3986)
    # Processing the call keyword arguments (line 3986)
    kwargs_120525 = {}
    # Getting the type of 'gci' (line 3986)
    gci_120524 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3986, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 3986)
    gci_call_result_120526 = invoke(stypy.reporting.localization.Localization(__file__, 3986, 9), gci_120524, *[], **kwargs_120525)
    
    # Assigning a type to the variable 'im' (line 3986)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3986, 4), 'im', gci_call_result_120526)
    
    # Type idiom detected: calculating its left and rigth part (line 3988)
    # Getting the type of 'im' (line 3988)
    im_120527 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3988, 4), 'im')
    # Getting the type of 'None' (line 3988)
    None_120528 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3988, 17), 'None')
    
    (may_be_120529, more_types_in_union_120530) = may_not_be_none(im_120527, None_120528)

    if may_be_120529:

        if more_types_in_union_120530:
            # Runtime conditional SSA (line 3988)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 3989)
        # Processing the call arguments (line 3989)
        # Getting the type of 'cm' (line 3989)
        cm_120533 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3989, 20), 'cm', False)
        # Obtaining the member 'magma' of a type (line 3989)
        magma_120534 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3989, 20), cm_120533, 'magma')
        # Processing the call keyword arguments (line 3989)
        kwargs_120535 = {}
        # Getting the type of 'im' (line 3989)
        im_120531 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3989, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 3989)
        set_cmap_120532 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 3989, 8), im_120531, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 3989)
        set_cmap_call_result_120536 = invoke(stypy.reporting.localization.Localization(__file__, 3989, 8), set_cmap_120532, *[magma_120534], **kwargs_120535)
        

        if more_types_in_union_120530:
            # SSA join for if statement (line 3988)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'magma(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'magma' in the type store
    # Getting the type of 'stypy_return_type' (line 3980)
    stypy_return_type_120537 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3980, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120537)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'magma'
    return stypy_return_type_120537

# Assigning a type to the variable 'magma' (line 3980)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3980, 0), 'magma', magma)

@norecursion
def inferno(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'inferno'
    module_type_store = module_type_store.open_function_context('inferno', 3994, 0, False)
    
    # Passed parameters checking function
    inferno.stypy_localization = localization
    inferno.stypy_type_of_self = None
    inferno.stypy_type_store = module_type_store
    inferno.stypy_function_name = 'inferno'
    inferno.stypy_param_names_list = []
    inferno.stypy_varargs_param_name = None
    inferno.stypy_kwargs_param_name = None
    inferno.stypy_call_defaults = defaults
    inferno.stypy_call_varargs = varargs
    inferno.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'inferno', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'inferno', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'inferno(...)' code ##################

    unicode_120538 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3998, (-1)), 'unicode', u'\n    set the default colormap to inferno and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 3999)
    # Processing the call arguments (line 3999)
    unicode_120540 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3999, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 3999)
    unicode_120541 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 3999, 21), 'unicode', u'inferno')
    keyword_120542 = unicode_120541
    kwargs_120543 = {'cmap': keyword_120542}
    # Getting the type of 'rc' (line 3999)
    rc_120539 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3999, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 3999)
    rc_call_result_120544 = invoke(stypy.reporting.localization.Localization(__file__, 3999, 4), rc_120539, *[unicode_120540], **kwargs_120543)
    
    
    # Assigning a Call to a Name (line 4000):
    
    # Assigning a Call to a Name (line 4000):
    
    # Call to gci(...): (line 4000)
    # Processing the call keyword arguments (line 4000)
    kwargs_120546 = {}
    # Getting the type of 'gci' (line 4000)
    gci_120545 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4000, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 4000)
    gci_call_result_120547 = invoke(stypy.reporting.localization.Localization(__file__, 4000, 9), gci_120545, *[], **kwargs_120546)
    
    # Assigning a type to the variable 'im' (line 4000)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4000, 4), 'im', gci_call_result_120547)
    
    # Type idiom detected: calculating its left and rigth part (line 4002)
    # Getting the type of 'im' (line 4002)
    im_120548 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4002, 4), 'im')
    # Getting the type of 'None' (line 4002)
    None_120549 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4002, 17), 'None')
    
    (may_be_120550, more_types_in_union_120551) = may_not_be_none(im_120548, None_120549)

    if may_be_120550:

        if more_types_in_union_120551:
            # Runtime conditional SSA (line 4002)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 4003)
        # Processing the call arguments (line 4003)
        # Getting the type of 'cm' (line 4003)
        cm_120554 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4003, 20), 'cm', False)
        # Obtaining the member 'inferno' of a type (line 4003)
        inferno_120555 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4003, 20), cm_120554, 'inferno')
        # Processing the call keyword arguments (line 4003)
        kwargs_120556 = {}
        # Getting the type of 'im' (line 4003)
        im_120552 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4003, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 4003)
        set_cmap_120553 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4003, 8), im_120552, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 4003)
        set_cmap_call_result_120557 = invoke(stypy.reporting.localization.Localization(__file__, 4003, 8), set_cmap_120553, *[inferno_120555], **kwargs_120556)
        

        if more_types_in_union_120551:
            # SSA join for if statement (line 4002)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'inferno(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'inferno' in the type store
    # Getting the type of 'stypy_return_type' (line 3994)
    stypy_return_type_120558 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 3994, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120558)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'inferno'
    return stypy_return_type_120558

# Assigning a type to the variable 'inferno' (line 3994)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 3994, 0), 'inferno', inferno)

@norecursion
def plasma(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'plasma'
    module_type_store = module_type_store.open_function_context('plasma', 4008, 0, False)
    
    # Passed parameters checking function
    plasma.stypy_localization = localization
    plasma.stypy_type_of_self = None
    plasma.stypy_type_store = module_type_store
    plasma.stypy_function_name = 'plasma'
    plasma.stypy_param_names_list = []
    plasma.stypy_varargs_param_name = None
    plasma.stypy_kwargs_param_name = None
    plasma.stypy_call_defaults = defaults
    plasma.stypy_call_varargs = varargs
    plasma.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'plasma', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'plasma', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'plasma(...)' code ##################

    unicode_120559 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4012, (-1)), 'unicode', u'\n    set the default colormap to plasma and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 4013)
    # Processing the call arguments (line 4013)
    unicode_120561 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4013, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 4013)
    unicode_120562 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4013, 21), 'unicode', u'plasma')
    keyword_120563 = unicode_120562
    kwargs_120564 = {'cmap': keyword_120563}
    # Getting the type of 'rc' (line 4013)
    rc_120560 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4013, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 4013)
    rc_call_result_120565 = invoke(stypy.reporting.localization.Localization(__file__, 4013, 4), rc_120560, *[unicode_120561], **kwargs_120564)
    
    
    # Assigning a Call to a Name (line 4014):
    
    # Assigning a Call to a Name (line 4014):
    
    # Call to gci(...): (line 4014)
    # Processing the call keyword arguments (line 4014)
    kwargs_120567 = {}
    # Getting the type of 'gci' (line 4014)
    gci_120566 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4014, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 4014)
    gci_call_result_120568 = invoke(stypy.reporting.localization.Localization(__file__, 4014, 9), gci_120566, *[], **kwargs_120567)
    
    # Assigning a type to the variable 'im' (line 4014)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4014, 4), 'im', gci_call_result_120568)
    
    # Type idiom detected: calculating its left and rigth part (line 4016)
    # Getting the type of 'im' (line 4016)
    im_120569 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4016, 4), 'im')
    # Getting the type of 'None' (line 4016)
    None_120570 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4016, 17), 'None')
    
    (may_be_120571, more_types_in_union_120572) = may_not_be_none(im_120569, None_120570)

    if may_be_120571:

        if more_types_in_union_120572:
            # Runtime conditional SSA (line 4016)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 4017)
        # Processing the call arguments (line 4017)
        # Getting the type of 'cm' (line 4017)
        cm_120575 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4017, 20), 'cm', False)
        # Obtaining the member 'plasma' of a type (line 4017)
        plasma_120576 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4017, 20), cm_120575, 'plasma')
        # Processing the call keyword arguments (line 4017)
        kwargs_120577 = {}
        # Getting the type of 'im' (line 4017)
        im_120573 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4017, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 4017)
        set_cmap_120574 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4017, 8), im_120573, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 4017)
        set_cmap_call_result_120578 = invoke(stypy.reporting.localization.Localization(__file__, 4017, 8), set_cmap_120574, *[plasma_120576], **kwargs_120577)
        

        if more_types_in_union_120572:
            # SSA join for if statement (line 4016)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'plasma(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'plasma' in the type store
    # Getting the type of 'stypy_return_type' (line 4008)
    stypy_return_type_120579 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4008, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120579)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'plasma'
    return stypy_return_type_120579

# Assigning a type to the variable 'plasma' (line 4008)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4008, 0), 'plasma', plasma)

@norecursion
def viridis(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'viridis'
    module_type_store = module_type_store.open_function_context('viridis', 4022, 0, False)
    
    # Passed parameters checking function
    viridis.stypy_localization = localization
    viridis.stypy_type_of_self = None
    viridis.stypy_type_store = module_type_store
    viridis.stypy_function_name = 'viridis'
    viridis.stypy_param_names_list = []
    viridis.stypy_varargs_param_name = None
    viridis.stypy_kwargs_param_name = None
    viridis.stypy_call_defaults = defaults
    viridis.stypy_call_varargs = varargs
    viridis.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'viridis', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'viridis', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'viridis(...)' code ##################

    unicode_120580 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4026, (-1)), 'unicode', u'\n    set the default colormap to viridis and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 4027)
    # Processing the call arguments (line 4027)
    unicode_120582 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4027, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 4027)
    unicode_120583 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4027, 21), 'unicode', u'viridis')
    keyword_120584 = unicode_120583
    kwargs_120585 = {'cmap': keyword_120584}
    # Getting the type of 'rc' (line 4027)
    rc_120581 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4027, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 4027)
    rc_call_result_120586 = invoke(stypy.reporting.localization.Localization(__file__, 4027, 4), rc_120581, *[unicode_120582], **kwargs_120585)
    
    
    # Assigning a Call to a Name (line 4028):
    
    # Assigning a Call to a Name (line 4028):
    
    # Call to gci(...): (line 4028)
    # Processing the call keyword arguments (line 4028)
    kwargs_120588 = {}
    # Getting the type of 'gci' (line 4028)
    gci_120587 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4028, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 4028)
    gci_call_result_120589 = invoke(stypy.reporting.localization.Localization(__file__, 4028, 9), gci_120587, *[], **kwargs_120588)
    
    # Assigning a type to the variable 'im' (line 4028)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4028, 4), 'im', gci_call_result_120589)
    
    # Type idiom detected: calculating its left and rigth part (line 4030)
    # Getting the type of 'im' (line 4030)
    im_120590 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4030, 4), 'im')
    # Getting the type of 'None' (line 4030)
    None_120591 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4030, 17), 'None')
    
    (may_be_120592, more_types_in_union_120593) = may_not_be_none(im_120590, None_120591)

    if may_be_120592:

        if more_types_in_union_120593:
            # Runtime conditional SSA (line 4030)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 4031)
        # Processing the call arguments (line 4031)
        # Getting the type of 'cm' (line 4031)
        cm_120596 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4031, 20), 'cm', False)
        # Obtaining the member 'viridis' of a type (line 4031)
        viridis_120597 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4031, 20), cm_120596, 'viridis')
        # Processing the call keyword arguments (line 4031)
        kwargs_120598 = {}
        # Getting the type of 'im' (line 4031)
        im_120594 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4031, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 4031)
        set_cmap_120595 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4031, 8), im_120594, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 4031)
        set_cmap_call_result_120599 = invoke(stypy.reporting.localization.Localization(__file__, 4031, 8), set_cmap_120595, *[viridis_120597], **kwargs_120598)
        

        if more_types_in_union_120593:
            # SSA join for if statement (line 4030)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'viridis(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'viridis' in the type store
    # Getting the type of 'stypy_return_type' (line 4022)
    stypy_return_type_120600 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4022, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120600)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'viridis'
    return stypy_return_type_120600

# Assigning a type to the variable 'viridis' (line 4022)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4022, 0), 'viridis', viridis)

@norecursion
def nipy_spectral(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'nipy_spectral'
    module_type_store = module_type_store.open_function_context('nipy_spectral', 4036, 0, False)
    
    # Passed parameters checking function
    nipy_spectral.stypy_localization = localization
    nipy_spectral.stypy_type_of_self = None
    nipy_spectral.stypy_type_store = module_type_store
    nipy_spectral.stypy_function_name = 'nipy_spectral'
    nipy_spectral.stypy_param_names_list = []
    nipy_spectral.stypy_varargs_param_name = None
    nipy_spectral.stypy_kwargs_param_name = None
    nipy_spectral.stypy_call_defaults = defaults
    nipy_spectral.stypy_call_varargs = varargs
    nipy_spectral.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'nipy_spectral', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'nipy_spectral', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'nipy_spectral(...)' code ##################

    unicode_120601 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4040, (-1)), 'unicode', u'\n    set the default colormap to nipy_spectral and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    
    # Call to rc(...): (line 4041)
    # Processing the call arguments (line 4041)
    unicode_120603 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4041, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 4041)
    unicode_120604 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4041, 21), 'unicode', u'nipy_spectral')
    keyword_120605 = unicode_120604
    kwargs_120606 = {'cmap': keyword_120605}
    # Getting the type of 'rc' (line 4041)
    rc_120602 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4041, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 4041)
    rc_call_result_120607 = invoke(stypy.reporting.localization.Localization(__file__, 4041, 4), rc_120602, *[unicode_120603], **kwargs_120606)
    
    
    # Assigning a Call to a Name (line 4042):
    
    # Assigning a Call to a Name (line 4042):
    
    # Call to gci(...): (line 4042)
    # Processing the call keyword arguments (line 4042)
    kwargs_120609 = {}
    # Getting the type of 'gci' (line 4042)
    gci_120608 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4042, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 4042)
    gci_call_result_120610 = invoke(stypy.reporting.localization.Localization(__file__, 4042, 9), gci_120608, *[], **kwargs_120609)
    
    # Assigning a type to the variable 'im' (line 4042)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4042, 4), 'im', gci_call_result_120610)
    
    # Type idiom detected: calculating its left and rigth part (line 4044)
    # Getting the type of 'im' (line 4044)
    im_120611 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4044, 4), 'im')
    # Getting the type of 'None' (line 4044)
    None_120612 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4044, 17), 'None')
    
    (may_be_120613, more_types_in_union_120614) = may_not_be_none(im_120611, None_120612)

    if may_be_120613:

        if more_types_in_union_120614:
            # Runtime conditional SSA (line 4044)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 4045)
        # Processing the call arguments (line 4045)
        # Getting the type of 'cm' (line 4045)
        cm_120617 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4045, 20), 'cm', False)
        # Obtaining the member 'nipy_spectral' of a type (line 4045)
        nipy_spectral_120618 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4045, 20), cm_120617, 'nipy_spectral')
        # Processing the call keyword arguments (line 4045)
        kwargs_120619 = {}
        # Getting the type of 'im' (line 4045)
        im_120615 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4045, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 4045)
        set_cmap_120616 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4045, 8), im_120615, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 4045)
        set_cmap_call_result_120620 = invoke(stypy.reporting.localization.Localization(__file__, 4045, 8), set_cmap_120616, *[nipy_spectral_120618], **kwargs_120619)
        

        if more_types_in_union_120614:
            # SSA join for if statement (line 4044)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'nipy_spectral(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'nipy_spectral' in the type store
    # Getting the type of 'stypy_return_type' (line 4036)
    stypy_return_type_120621 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4036, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120621)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'nipy_spectral'
    return stypy_return_type_120621

# Assigning a type to the variable 'nipy_spectral' (line 4036)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4036, 0), 'nipy_spectral', nipy_spectral)

@norecursion
def spectral(localization, *varargs, **kwargs):
    global module_type_store
    # Assign values to the parameters with defaults
    defaults = []
    # Create a new context for function 'spectral'
    module_type_store = module_type_store.open_function_context('spectral', 4050, 0, False)
    
    # Passed parameters checking function
    spectral.stypy_localization = localization
    spectral.stypy_type_of_self = None
    spectral.stypy_type_store = module_type_store
    spectral.stypy_function_name = 'spectral'
    spectral.stypy_param_names_list = []
    spectral.stypy_varargs_param_name = None
    spectral.stypy_kwargs_param_name = None
    spectral.stypy_call_defaults = defaults
    spectral.stypy_call_varargs = varargs
    spectral.stypy_call_kwargs = kwargs
    arguments = process_argument_values(localization, None, module_type_store, 'spectral', [], None, None, defaults, varargs, kwargs)

    if is_error_type(arguments):
        # Destroy the current context
        module_type_store = module_type_store.close_function_context()
        return arguments

    # Initialize method data
    init_call_information(module_type_store, 'spectral', localization, [], arguments)
    
    # Default return type storage variable (SSA)
    # Assigning a type to the variable 'stypy_return_type'
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 0, 0), 'stypy_return_type', None)
    
    
    # ################# Begin of 'spectral(...)' code ##################

    unicode_120622 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4054, (-1)), 'unicode', u'\n    set the default colormap to spectral and apply to current image if any.\n    See help(colormaps) for more information\n    ')
    stypy.reporting.localization.Localization.set_current(stypy.reporting.localization.Localization(__file__, 4055, 4))
    
    # 'from matplotlib.cbook import warn_deprecated' statement (line 4055)
    update_path_to_current_file_folder('C:/Python27/lib/site-packages/matplotlib/')
    import_120623 = generate_type_inference_code_for_module(stypy.reporting.localization.Localization(__file__, 4055, 4), 'matplotlib.cbook')

    if (type(import_120623) is not StypyTypeError):

        if (import_120623 != 'pyd_module'):
            __import__(import_120623)
            sys_modules_120624 = sys.modules[import_120623]
            import_from_module(stypy.reporting.localization.Localization(__file__, 4055, 4), 'matplotlib.cbook', sys_modules_120624.module_type_store, module_type_store, ['warn_deprecated'])
            nest_module(stypy.reporting.localization.Localization(__file__, 4055, 4), __file__, sys_modules_120624, sys_modules_120624.module_type_store, module_type_store)
        else:
            from matplotlib.cbook import warn_deprecated

            import_from_module(stypy.reporting.localization.Localization(__file__, 4055, 4), 'matplotlib.cbook', None, module_type_store, ['warn_deprecated'], [warn_deprecated])

    else:
        # Assigning a type to the variable 'matplotlib.cbook' (line 4055)
        module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4055, 4), 'matplotlib.cbook', import_120623)

    remove_current_file_folder_from_path('C:/Python27/lib/site-packages/matplotlib/')
    
    
    # Call to warn_deprecated(...): (line 4056)
    # Processing the call arguments (line 4056)
    unicode_120626 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4057, 20), 'unicode', u'2.0')
    # Processing the call keyword arguments (line 4056)
    unicode_120627 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4058, 25), 'unicode', u'spectral')
    keyword_120628 = unicode_120627
    unicode_120629 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4059, 29), 'unicode', u'colormap')
    keyword_120630 = unicode_120629
    kwargs_120631 = {'obj_type': keyword_120630, 'name': keyword_120628}
    # Getting the type of 'warn_deprecated' (line 4056)
    warn_deprecated_120625 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4056, 4), 'warn_deprecated', False)
    # Calling warn_deprecated(args, kwargs) (line 4056)
    warn_deprecated_call_result_120632 = invoke(stypy.reporting.localization.Localization(__file__, 4056, 4), warn_deprecated_120625, *[unicode_120626], **kwargs_120631)
    
    
    # Call to rc(...): (line 4062)
    # Processing the call arguments (line 4062)
    unicode_120634 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4062, 7), 'unicode', u'image')
    # Processing the call keyword arguments (line 4062)
    unicode_120635 = get_builtin_python_type_instance(stypy.reporting.localization.Localization(__file__, 4062, 21), 'unicode', u'spectral')
    keyword_120636 = unicode_120635
    kwargs_120637 = {'cmap': keyword_120636}
    # Getting the type of 'rc' (line 4062)
    rc_120633 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4062, 4), 'rc', False)
    # Calling rc(args, kwargs) (line 4062)
    rc_call_result_120638 = invoke(stypy.reporting.localization.Localization(__file__, 4062, 4), rc_120633, *[unicode_120634], **kwargs_120637)
    
    
    # Assigning a Call to a Name (line 4063):
    
    # Assigning a Call to a Name (line 4063):
    
    # Call to gci(...): (line 4063)
    # Processing the call keyword arguments (line 4063)
    kwargs_120640 = {}
    # Getting the type of 'gci' (line 4063)
    gci_120639 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4063, 9), 'gci', False)
    # Calling gci(args, kwargs) (line 4063)
    gci_call_result_120641 = invoke(stypy.reporting.localization.Localization(__file__, 4063, 9), gci_120639, *[], **kwargs_120640)
    
    # Assigning a type to the variable 'im' (line 4063)
    module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4063, 4), 'im', gci_call_result_120641)
    
    # Type idiom detected: calculating its left and rigth part (line 4065)
    # Getting the type of 'im' (line 4065)
    im_120642 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4065, 4), 'im')
    # Getting the type of 'None' (line 4065)
    None_120643 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4065, 17), 'None')
    
    (may_be_120644, more_types_in_union_120645) = may_not_be_none(im_120642, None_120643)

    if may_be_120644:

        if more_types_in_union_120645:
            # Runtime conditional SSA (line 4065)
            module_type_store = SSAContext.create_ssa_context(module_type_store, 'idiom if')
        else:
            module_type_store = module_type_store

        
        # Call to set_cmap(...): (line 4066)
        # Processing the call arguments (line 4066)
        # Getting the type of 'cm' (line 4066)
        cm_120648 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4066, 20), 'cm', False)
        # Obtaining the member 'spectral' of a type (line 4066)
        spectral_120649 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4066, 20), cm_120648, 'spectral')
        # Processing the call keyword arguments (line 4066)
        kwargs_120650 = {}
        # Getting the type of 'im' (line 4066)
        im_120646 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4066, 8), 'im', False)
        # Obtaining the member 'set_cmap' of a type (line 4066)
        set_cmap_120647 = module_type_store.get_type_of_member(stypy.reporting.localization.Localization(__file__, 4066, 8), im_120646, 'set_cmap')
        # Calling set_cmap(args, kwargs) (line 4066)
        set_cmap_call_result_120651 = invoke(stypy.reporting.localization.Localization(__file__, 4066, 8), set_cmap_120647, *[spectral_120649], **kwargs_120650)
        

        if more_types_in_union_120645:
            # SSA join for if statement (line 4065)
            module_type_store = module_type_store.join_ssa_context()


    
    
    # ################# End of 'spectral(...)' code ##################

    # Teardown call information
    teardown_call_information(localization, arguments)
    
    # Storing the return type of function 'spectral' in the type store
    # Getting the type of 'stypy_return_type' (line 4050)
    stypy_return_type_120652 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4050, 0), 'stypy_return_type')
    module_type_store.store_return_type_of_current_context(stypy_return_type_120652)
    
    # Destroy the current context
    module_type_store = module_type_store.close_function_context()
    
    # Return type of the function 'spectral'
    return stypy_return_type_120652

# Assigning a type to the variable 'spectral' (line 4050)
module_type_store.set_type_of(stypy.reporting.localization.Localization(__file__, 4050, 0), 'spectral', spectral)

# Call to _setup_pyplot_info_docstrings(...): (line 4068)
# Processing the call keyword arguments (line 4068)
kwargs_120654 = {}
# Getting the type of '_setup_pyplot_info_docstrings' (line 4068)
_setup_pyplot_info_docstrings_120653 = module_type_store.get_type_of(stypy.reporting.localization.Localization(__file__, 4068, 0), '_setup_pyplot_info_docstrings', False)
# Calling _setup_pyplot_info_docstrings(args, kwargs) (line 4068)
_setup_pyplot_info_docstrings_call_result_120655 = invoke(stypy.reporting.localization.Localization(__file__, 4068, 0), _setup_pyplot_info_docstrings_120653, *[], **kwargs_120654)


# ################# End of the type inference program ##################

module_errors = stypy.errors.type_error.StypyTypeError.get_error_msgs()
module_warnings = stypy.errors.type_warning.TypeWarning.get_warning_msgs()
